void *assignWithTake for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationSelection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void storeEnumTagSinglePayload for SportsPersonalizationSelection(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = 4u;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = 1u;
    }
  }
  else
  {
    v15 = 0u;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t destructiveInjectEnumTag for SportsPersonalizationSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t type metadata accessor for SportsPersonalizationSelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SportsPersonalizationSelection);
}

uint64_t dispatch thunk of CacheHandling.makeCacheable(pommesResponse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t *static DummyDataProvider.make(dummyResult:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(v1 + 80);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - v6;
  type metadata accessor for AnyDataProvider(0, v3, v8, v9);
  v12 = type metadata accessor for DummyDataProvider(0, v3, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v13 = swift_allocObject();
  DummyDataProvider.init(dummyResult:)((uint64_t)v7);
  v19 = v13;
  v14 = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for DummyDataProvider<A>, v12);
  v16 = specialized AnyDataProvider.__allocating_init<A>(provider:)((uint64_t)&v19, v12, v14, v15);
  swift_release();
  return v16;
}

uint64_t type metadata accessor for DummyDataProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DummyDataProvider);
}

uint64_t key path setter for DummyDataProvider.dummyResult : <A>DummyDataProvider<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 104))(v6);
}

uint64_t DummyDataProvider.dummyResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  swift_beginAccess();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DummyDataProvider.dummyResult.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  swift_beginAccess();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*DummyDataProvider.dummyResult.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t DummyDataProvider.__allocating_init(dummyResult:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  DummyDataProvider.init(dummyResult:)(a1);
  return v2;
}

uint64_t *DummyDataProvider.make()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  type metadata accessor for AnyDataProvider(0, v5, a3, a4);
  v12 = v4;
  v8 = type metadata accessor for DummyDataProvider(0, v5, v6, v7);
  v9 = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for DummyDataProvider<A>, v8);
  return specialized AnyDataProvider.__allocating_init<A>(provider:)((uint64_t)&v12, v8, v9, v10);
}

uint64_t DummyDataProvider.init(dummyResult:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 56))(v3, 1, 1, *(_QWORD *)(*(_QWORD *)v1 + 80));
  swift_beginAccess();
  v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  swift_endAccess();
  return v1;
}

uint64_t DummyDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t DummyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t DummyDataProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t DummyDataProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance DummyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance DummyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance DummyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t protocol witness for DataProvider.reset() in conformance DummyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_1C2480CAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
}

uint64_t sub_1C2480CD8()
{
  return 8;
}

_QWORD *sub_1C2480CE4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for DummyDataProvider()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for DummyDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DummyDataProvider.dummyResult.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of DummyDataProvider.dummyResult.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of DummyDataProvider.dummyResult.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of DummyDataProvider.make()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DummyDataProvider.__allocating_init(dummyResult:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of DummyDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of DummyDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))() & 1;
}

uint64_t dispatch thunk of DummyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 152);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of DummyDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t static Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit.fromString(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v8;
  uint64_t v9;
  char v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v6 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
LABEL_13:
    v12 = (unsigned int *)MEMORY[0x1E0D6CA60];
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v9 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
LABEL_16:
    v12 = (unsigned int *)MEMORY[0x1E0D6CA58];
    goto LABEL_14;
  }
  v12 = (unsigned int *)MEMORY[0x1E0D6CA68];
LABEL_14:
  v13 = *v12;
  v14 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(a3, v13, v14);
}

uint64_t closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v5 = type metadata accessor for DispatchTimeInterval();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v8 = 5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF4A0], v5);
  Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a2, a3, v8);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(int *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Context;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>));
  void (*v18)(char *, uint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int *v34;
  void (*v35)(id *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)());
  uint64_t v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  CLLocation v52;
  unsigned int *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  void (*v61)(uint64_t *, _QWORD);
  int v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82[4];
  id v83[2];
  unsigned __int8 v84;
  char v85;
  uint64_t v86;
  unint64_t v87;

  v80 = a3;
  v79 = a2;
  v73 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  MEMORY[0x1E0C80A78](v73);
  v74 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for Apple_Parsec_Search_V2_PreciseStatus();
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v71 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v68);
  v72 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v77 = *(_QWORD *)(Context - 8);
  v78 = Context;
  MEMORY[0x1E0C80A78](Context);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    v12 = swift_once();
  v15 = &demangling cache variable for type metadata for (String, CacheHandling);
  v16 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v12);
  v63 = a1;
  Date.init()();
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v16 + 200);
  v63 = &v62;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  LOBYTE(v62) = 2;
  v17(&v86, 0xD00000000000001DLL, 0x80000001C2507A10, 0, v14, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 109, "addLocation(using:for:suspensionTimeInterval:)", 46, v62, partial apply for closure #1 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:));
  v18 = *(void (**)(_QWORD, _QWORD))(v11 + 8);
  v75 = 0;
  v76 = (void (*)(char *, uint64_t))v18;
  v18(v14, v10);
  v19 = v87;
  if (v87)
  {
    v20 = v86;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v66 = a1;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc();
      v67 = v20;
      v27 = v26;
      v82[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain();
      v83[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v19, v82);
      v15 = (_QWORD *)&demangling cache variable for type metadata for (String, CacheHandling);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v22, v23, "Adding country code to query context: %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v27, -1, -1);
      v28 = v25;
      a1 = v66;
      MEMORY[0x1C3BBFF64](v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    Apple_Parsec_Search_PegasusQueryContext.countryCode.setter();
  }
  v30 = v77;
  v29 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v9, v81, v78);
  Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(v79, a1, v80);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v9, v29);
  v32 = v15;
  v33 = v15[237];
  MEMORY[0x1E0C80A78](v31);
  v63 = v34;
  Date.init()();
  v35 = *(void (**)(id *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)()))(*(_QWORD *)v33 + 200);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesLocationInfo, LocationError>);
  v63 = &v62;
  v64 = v36;
  LOBYTE(v62) = 2;
  v35(v83, 0xD00000000000001ELL, 0x80000001C2507A60, 0, v14, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 119, "addLocation(using:for:suspensionTimeInterval:)", 46, v62, partial apply for closure #2 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:));
  v76(v14, v10);
  v37 = v83[0];
  if ((v85 & 1) != 0)
  {
    if (LOBYTE(v83[0]))
    {
      if (LOBYTE(v83[0]) == 1)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v38 = type metadata accessor for Logger();
        __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
        v39 = Logger.logObject.getter();
        v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v41 = 0;
          _os_log_impl(&dword_1C2356000, v39, v40, "Location services disabled", v41, 2u);
          MEMORY[0x1C3BBFF64](v41, -1, -1);
        }
      }
      else
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v57 = type metadata accessor for Logger();
        __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
        v39 = Logger.logObject.getter();
        v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v59 = 0;
          _os_log_impl(&dword_1C2356000, v39, v58, "Siri location sharing disabled", v59, 2u);
          MEMORY[0x1C3BBFF64](v59, -1, -1);
        }
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
      v39 = Logger.logObject.getter();
      v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v56 = 0;
        _os_log_impl(&dword_1C2356000, v39, v55, "Location unavailable", v56, 2u);
        MEMORY[0x1C3BBFF64](v56, -1, -1);
      }
    }

    lazy protocol witness table accessor for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location();
    static Message.with(_:)();
    return Apple_Parsec_Search_PegasusQueryContext.location.setter();
  }
  else
  {
    v42 = v83[1];
    v43 = v84;
    v44 = v83[0];
    v45 = (uint64_t)v72;
    Date.init()();
    v46 = (int *)v68;
    v47 = v45 + *(int *)(v68 + 20);
    *(_QWORD *)v47 = "SiriInformationSearch/PegasusQueryContext+Extensions.swift";
    *(_QWORD *)(v47 + 8) = 58;
    *(_BYTE *)(v47 + 16) = 2;
    *(_QWORD *)(v45 + v46[6]) = 125;
    v48 = v45 + v46[7];
    *(_QWORD *)v48 = "addLocation(using:for:suspensionTimeInterval:)";
    *(_QWORD *)(v48 + 8) = 46;
    *(_BYTE *)(v48 + 16) = 2;
    v49 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000023);
    v50 = (uint64_t *)(v45 + v46[8]);
    *v50 = v49;
    v50[1] = v51;
    v52.super.isa = (Class)v44;
    Apple_Parsec_Search_PegasusQueryContext.augment(withLocation:)(v52);
    outlined consume of Result<PommesLocationInfo, LocationError>(v37, (uint64_t)v42, v43, 0);
    if (v42)
    {
      if (v42 == (id)1)
        v53 = (unsigned int *)MEMORY[0x1E0D6E210];
      else
        v53 = (unsigned int *)MEMORY[0x1E0D6E218];
    }
    else
    {
      v53 = (unsigned int *)MEMORY[0x1E0D6E220];
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v71, *v53, v70);
    v61 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Search_PegasusQueryContext.location.modify();
    Apple_Parsec_Search_V2_Location.preciseStatus.setter();
    v61(v82, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32[237] + 184))(v45, 0);
    outlined consume of Result<PommesLocationInfo, LocationError>(v37, (uint64_t)v42, v43, 0);
    outlined consume of Result<PommesLocationInfo, LocationError>(v37, (uint64_t)v42, v43, 0);
    return outlined destroy of PommesSearchRequest(v45, type metadata accessor for PerformanceUtil.Ticket);
  }
}

void Apple_Parsec_Search_PegasusQueryContext.addSiriLocale(using:)(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  v1 = objc_msgSend(*(id *)(a1 + 104), sel_languageCode);
  if (v1)
  {
    v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    Apple_Parsec_Search_PegasusQueryContext.siriLocale.setter();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
    oslog = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1C2356000, oslog, v4, "Unable to add locale to QueryContext", v5, 2u);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }

  }
}

void Apple_Parsec_Search_PegasusQueryContext.addSiriResponseLanguageVariant(using:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v0 = PommesSearchRequest.responseVariantResult.getter();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    swift_bridgeObjectRetain();
    Apple_Parsec_Search_PegasusQueryContext.siriResponseLanguageVariant.setter();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v9 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v5, v6, "Adding siri response language variant to query context: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v8, -1, -1);
      MEMORY[0x1C3BBFF64](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v0 + 16) + 384))(*(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 16) + 392))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  double v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  void *v35;
  void (*v36)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)());
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  void (*v42)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)());
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  void (*v46)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t (*v50)(uint64_t *, char *, uint64_t);
  uint64_t v51;
  void *v52;
  void (*v53)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  void *v59;
  void (*v60)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  void (*v65)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v66;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t Context;
  uint64_t v85;

  v83 = a1;
  v81 = a4;
  v85 = type metadata accessor for Date();
  v76 = *(uint64_t **)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v73 - v13;
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v82 = *(_QWORD *)(Context - 8);
  v15 = MEMORY[0x1E0C80A78](Context);
  v78 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v77 = (char *)&v73 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v73 - v19;
  v21 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for OSSignposter();
  v79 = __swift_project_value_buffer(v24, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("proxy.createQueryContext", 24, 2u, 0, (uint64_t)v23);
  Apple_Parsec_Search_PegasusQueryContext.init()();
  v80 = v23;
  if (a2)
  {
    v25 = a3;
    v26 = a2;
    Apple_Parsec_Search_V2_Location.init()();
    v27 = -[NSObject coordinate](v26, sel_coordinate);
    *(float *)&v28 = v28;
    MEMORY[0x1C3BBB23C](v27, *(float *)&v28);
    -[NSObject coordinate](v26, sel_coordinate);
    Apple_Parsec_Search_V2_Location.longitude.setter();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v29 = (uint64_t *)v20;
    Apple_Parsec_Search_PegasusQueryContext.location.setter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  else
  {
    v29 = (uint64_t *)v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1C24FA1B0;
    *(_QWORD *)(v30 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v30 + 32) = 0xD000000000000014;
    *(_QWORD *)(v30 + 40) = 0x80000001C2507AB0;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v25 = a3;
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    v26 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1C2356000, v26, v32, "Location unavailable", v33, 2u);
      MEMORY[0x1C3BBFF64](v33, -1, -1);
    }
  }

  if (one-time initialization token for shared != -1)
    v34 = swift_once();
  v35 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v34);
  v71 = v29;
  v72 = v25;
  v74 = (uint64_t *)v25;
  Date.init()();
  v36 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))(*(_QWORD *)v35 + 200);
  v72 = MEMORY[0x1E0DEE9C0] + 8;
  v37 = MEMORY[0x1E0DEE9C0] + 8;
  v75 = MEMORY[0x1E0DEE9C0] + 8;
  v71 = (uint64_t *)&v69;
  LOBYTE(v69) = 2;
  v36(0xD000000000000015, 0x80000001C2507900, 0, v7, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 63, "build(for:withLocation:dataProviderManager:)", 44, (_DWORD)v69, partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  v38 = (char *)v76[1];
  v39 = ((uint64_t (*)(char *, uint64_t))v38)(v7, v85);
  v40 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v39);
  v41 = (uint64_t *)v83;
  v71 = v29;
  v72 = v83;
  Date.init()();
  v42 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))(*(_QWORD *)v40 + 200);
  v71 = (uint64_t *)&v69;
  v72 = v37;
  LOBYTE(v69) = 2;
  v42(0xD000000000000026, 0x80000001C2507920, 0, v7, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 66, "build(for:withLocation:dataProviderManager:)", 44, (_DWORD)v69, partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  v43 = ((uint64_t (*)(char *, uint64_t))v38)(v7, v85);
  v76 = &v73;
  v44 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v43);
  v45 = v74;
  v69 = v74;
  v70 = v29;
  v71 = v41;
  Date.init()();
  v46 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))(*(_QWORD *)v44 + 200);
  v47 = Context;
  v71 = &v68;
  v72 = Context;
  LOBYTE(v69) = 2;
  v48 = v77;
  v46(0xD00000000000002DLL, 0x80000001C2507950, 0, v7, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 70, "build(for:withLocation:dataProviderManager:)", 44, (_DWORD)v69, partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  v49 = v38;
  ((void (*)(char *, uint64_t))v38)(v7, v85);
  v50 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v82 + 40);
  v51 = v50(v29, v48, v47);
  v52 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v51);
  v71 = v45;
  v72 = (uint64_t)v29;
  Date.init()();
  v53 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))(*(_QWORD *)v52 + 200);
  v71 = (uint64_t *)&v69;
  v72 = v47;
  LOBYTE(v69) = 2;
  v54 = v78;
  v53(0xD000000000000023, 0x80000001C2507980, 0, v7, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 73, "build(for:withLocation:dataProviderManager:)", 44, (_DWORD)v69, partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:));
  ((void (*)(char *, uint64_t))v49)(v7, v85);
  v55 = v47;
  v56 = v75;
  v57 = v50(v29, v54, v55);
  v58 = v45;
  v59 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v57);
  v71 = v45;
  v72 = (uint64_t)v29;
  Date.init()();
  v60 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))(*(_QWORD *)v59 + 200);
  v71 = (uint64_t *)&v69;
  v72 = v56;
  v61 = v85;
  LOBYTE(v69) = 2;
  v60(0xD00000000000002BLL, 0x80000001C25079B0, 0, v7, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 76, "build(for:withLocation:dataProviderManager:)", 44, (_DWORD)v69, partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v78 = v49;
  ((void (*)(char *, uint64_t))v49)(v7, v61);
  v62 = type metadata accessor for PommesSearchRequest(0);
  if (*(_BYTE *)(v83 + *(int *)(v62 + 60)) == 1)
  {
    v63 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v62);
    v69 = v58;
    v70 = v29;
    v71 = v64;
    Date.init()();
    v65 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD, _QWORD))(*(_QWORD *)v63 + 200);
    v71 = &v68;
    v72 = v56;
    LOBYTE(v69) = 2;
    v65(0xD00000000000002BLL, 0x80000001C25079E0, 0, v7, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 81, "build(for:withLocation:dataProviderManager:)", 44, (_DWORD)v69, partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
    ((void (*)(char *, uint64_t))v78)(v7, v61);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v82 + 32))(v81, v29, Context);
  v66 = (uint64_t)v80;
  OSSignposter.end(token:message:)((uint64_t)v80, 0, 0xE000000000000000);
  return outlined destroy of PommesSearchRequest(v66, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
}

Swift::Void __swiftcall Apple_Parsec_Search_PegasusQueryContext.addLocation(using:)(CLLocation using)
{
  Class isa;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  double v10;
  uint64_t v11;

  isa = using.super.isa;
  v2 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  Apple_Parsec_Search_V2_Location.init()();
  v9 = -[objc_class coordinate](isa, sel_coordinate);
  *(float *)&v10 = v10;
  MEMORY[0x1C3BBB23C](v9, *(float *)&v10);
  -[objc_class coordinate](isa, sel_coordinate);
  Apple_Parsec_Search_V2_Location.longitude.setter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  Apple_Parsec_Search_PegasusQueryContext.location.setter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

void closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = objc_msgSend(*(id *)(a2 + 104), sel_languageCode);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    Apple_Parsec_Search_PegasusQueryContext.siriLocale.setter();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1C2356000, v5, v6, "Unable to add locale to QueryContext", v7, 2u);
      MEMORY[0x1C3BBFF64](v7, -1, -1);
    }

  }
}

uint64_t closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v7 = *(_QWORD *)(Context - 8);
  MEMORY[0x1E0C80A78](Context);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, Context);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)a1 + 336))(v9, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, Context);
}

uint64_t closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t Context;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v5 = *(_QWORD *)(Context - 8);
  MEMORY[0x1E0C80A78](Context);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, Context);
  (*(void (**)(char *))(*(_QWORD *)a1 + 376))(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, Context);
}

uint64_t partial apply for closure #1 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = v3[3];
  v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  *a1 = result;
  a1[1] = v7;
  return result;
}

void Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  dispatch_semaphore_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void (*v21)(char *, uint64_t);
  char v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  os_log_type_t v27;
  const char *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32[2];

  v6 = type metadata accessor for DispatchTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v32 - v11;
  if ((Apple_Parsec_Search_PegasusQueryContext.shouldSuspend(_:_:)(a1, a2) & 1) != 0)
  {
    v32[0] = a3;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1C2356000, v14, v15, "locationManager.status is pending. Suspending execution until location available or timeout.", v16, 2u);
      MEMORY[0x1C3BBFF64](v16, -1, -1);
    }

    v17 = dispatch_semaphore_create(0);
    v18 = a2[3];
    v19 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v18);
    v32[1] = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v18, v19);
    *(_QWORD *)(swift_allocObject() + 16) = v17;
    v20 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Result<LocationStatus, LocationError>, Never>);
    lazy protocol witness table accessor for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    static DispatchTime.now()();
    MEMORY[0x1C3BBEB6C](v10, v32[0]);
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, v6);
    v22 = MEMORY[0x1C3BBF190](v12);
    v21(v12, v6);
    AnyCancellable.cancel()();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    v25 = os_log_type_enabled(v23, v24);
    if ((v22 & 1) != 0)
    {
      if (v25)
      {
        v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v26 = 0;
        v27 = v24;
        v28 = "Timed out waiting to receive location. Resuming execution with no location info.";
        goto LABEL_16;
      }
    }
    else if (v25)
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      v27 = v24;
      v28 = "Resuming execution to add location to Pegasus request";
LABEL_16:
      _os_log_impl(&dword_1C2356000, v23, v27, v28, v26, 2u);
      MEMORY[0x1C3BBFF64](v26, -1, -1);

      swift_release();
      return;
    }

    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v32[0] = (id)Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled((os_log_t)v32[0], v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1C2356000, (os_log_t)v32[0], v30, "Will not suspend request. Continuing to add location.", v31, 2u);
      MEMORY[0x1C3BBFF64](v31, -1, -1);
    }

  }
}

uint64_t partial apply for closure #2 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
}

uint64_t closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1)
{
  return closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a1, MEMORY[0x1E0D6DBF0]);
}

uint64_t closure #4 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1)
{
  return closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a1, MEMORY[0x1E0D6DBE0]);
}

uint64_t closure #5 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1)
{
  return closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(a1, MEMORY[0x1E0D6DC08]);
}

uint64_t closure #3 in Apple_Parsec_Search_PegasusQueryContext.addLocation(using:for:suspensionTimeInterval:)(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = type metadata accessor for Apple_Parsec_Search_V2_Location.Source();
  MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, _QWORD))(v5 + 104))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *a2);
  return Apple_Parsec_Search_V2_Location.source.setter();
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location)
  {
    v1 = type metadata accessor for Apple_Parsec_Search_V2_Location();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6DBC8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_Location and conformance Apple_Parsec_Search_V2_Location);
  }
  return result;
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.shouldSuspend(_:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  char v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (id *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a2[3];
  v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v15 = (char *)v9
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                 + 48);
    v16 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      outlined destroy of PommesSearchRequest((uint64_t)v9, type metadata accessor for LocationStatus);
      return 0;
    }
    v13 = *((_BYTE *)v9 + 16);

    if ((v13 & 1) == 0)
      return 0;
  }
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v6, type metadata accessor for PommesSearchRequest.ParseState);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                              + 64)];
    swift_bridgeObjectRelease();
    outlined destroy of Siri_Nlu_External_DelegatedUserDialogAct?(v17);
    return 1;
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesSearchRequest.ParseState);
    return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 80));
  }
}

void closure #1 in Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for LocationStatus(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v35 - v7;
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (id *)((char *)&v35 - v10);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v35 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<LocationStatus, LocationError>(a1, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = *v16;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v36 = v22;
      *(_DWORD *)v21 = 136315138;
      LOBYTE(v35) = v17;
      lazy protocol witness table accessor for type LocationError and conformance LocationError();
      v23 = Error.localizedDescription.getter();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v19, v20, "locationManager.statusPublisher failed with error=%s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v22, -1, -1);
      MEMORY[0x1C3BBFF64](v21, -1, -1);
    }

  }
  else
  {
    outlined init with take of LocationStatus((uint64_t)v16, (uint64_t)v13);
    outlined init with copy of PommesSearchRequest((uint64_t)v13, (uint64_t)v11, type metadata accessor for LocationStatus);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of PommesSearchRequest((uint64_t)v11, type metadata accessor for LocationStatus);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
      outlined init with copy of PommesSearchRequest((uint64_t)v13, (uint64_t)v8, type metadata accessor for LocationStatus);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (_DWORD *)swift_slowAlloc();
        v36 = swift_slowAlloc();
        *v28 = 136315138;
        outlined init with copy of PommesSearchRequest((uint64_t)v8, (uint64_t)v5, type metadata accessor for LocationStatus);
        v29 = (char *)&loc_1C2483494 + 4 * byte_1C24FF702[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }

      outlined destroy of PommesSearchRequest((uint64_t)v8, type metadata accessor for LocationStatus);
      v34 = (uint64_t)v13;
    }
    else
    {

      if (one-time initialization token for pommes != -1)
        swift_once();
      v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_1C2356000, v31, v32, "locationManager.status changed to available", v33, 2u);
        MEMORY[0x1C3BBFF64](v33, -1, -1);
      }

      OS_dispatch_semaphore.signal()();
      v34 = (uint64_t)v13;
    }
    outlined destroy of PommesSearchRequest(v34, type metadata accessor for LocationStatus);
  }
}

void partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  uint64_t v0;

  closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  Apple_Parsec_Search_PegasusQueryContext.addSiriResponseLanguageVariant(using:)();
}

uint64_t partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  uint64_t *v0;

  return closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)()
{
  uint64_t v0;

  return closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1C2483824()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(uint64_t a1)
{
  closure #1 in Apple_Parsec_Search_PegasusQueryContext.suspendRequestIfNecessary(_:_:_:)(a1);
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<Result<LocationStatus, LocationError>, Never>);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0C95D90], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Result<LocationStatus, LocationError>, Never> and conformance AnyPublisher<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of Result<LocationStatus, LocationError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LocationError and conformance LocationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocationError and conformance LocationError;
  if (!lazy protocol witness table cache variable for type LocationError and conformance LocationError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for LocationError, &type metadata for LocationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationError and conformance LocationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocationError and conformance LocationError;
  if (!lazy protocol witness table cache variable for type LocationError and conformance LocationError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for LocationError, &type metadata for LocationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationError and conformance LocationError);
  }
  return result;
}

void partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)();
}

uint64_t partial apply for closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)();
}

uint64_t *PommesBridgeInstrumentationUtil.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return &static PommesBridgeInstrumentationUtil.sharedInstance;
}

uint64_t one-time initialization function for sharedInstance()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for PommesBridgeInstrumentationUtil();
  v0 = (_QWORD *)swift_allocObject();
  v0[2] = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
  type metadata accessor for InstrumentationUtil();
  swift_allocObject();
  v0[3] = InstrumentationUtil.init()();
  type metadata accessor for AnalyticsComponentIdGenerator();
  v0[4] = swift_allocObject();
  v1 = type metadata accessor for FeatureChecker();
  result = swift_allocObject();
  v0[8] = v1;
  v0[9] = &protocol witness table for FeatureChecker;
  v0[5] = result;
  static PommesBridgeInstrumentationUtil.sharedInstance = (uint64_t)v0;
  return result;
}

uint64_t static PommesBridgeInstrumentationUtil.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return swift_retain();
}

uint64_t PommesBridgeInstrumentationUtil.stream.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t PommesBridgeInstrumentationUtil.commonInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PommesBridgeInstrumentationUtil.componentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesBridgeInstrumentationUtil.featureChecker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AppDataProviding(v1 + 40, a1);
}

_QWORD *PommesBridgeInstrumentationUtil.__allocating_init(_:_:_:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  outlined init with take of AppDataProviding(a4, (uint64_t)(v8 + 5));
  return v8;
}

_QWORD *PommesBridgeInstrumentationUtil.init(_:_:_:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  outlined init with take of AppDataProviding(a4, (uint64_t)(v4 + 5));
  return v4;
}

void PommesBridgeInstrumentationUtil.logPommesRequestStarted(pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a1, a2, a3);
  if (!v10)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    v25 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1C2356000, v25, v22, "Unable to log Pommes request started because wrapperEvent is nil", v23, 2u);
      MEMORY[0x1C3BBFF64](v23, -1, -1);
    }
    goto LABEL_13;
  }
  v11 = v10;
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F98]), sel_init);
  -[NSObject setExists:](v25, sel_setExists_, 1);
  v12 = objc_msgSend(v11, sel_pommesBridgeContext);
  objc_msgSend(v12, sel_setStartedOrChanged_, v25);

  objc_msgSend(*(id *)(v3 + 16), sel_emitMessage_, v11);
  v13 = (void *)dispatch thunk of InstrumentationUtil.powerLogger()();
  if (!v13
    || (v14 = v13,
        v15 = objc_msgSend(v13, sel_captureSnapshot),
        v14,
        !v15))
  {

LABEL_13:
    return;
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_context);
  if (v16)
  {
    v17 = v16;
    UUID.init(uuidString:)();
    v18 = type metadata accessor for UUID();
    v19 = *(_QWORD *)(v18 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, v18) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
    }
    objc_msgSend(v15, sel_logWithEventContext_requestIdentifier_, v17, isa);

  }
  else
  {
    __break(1u);
  }
}

void PommesBridgeInstrumentationUtil.logPommesRequestEnded(status:pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a2, a3, a4);
  if (!v12)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C2356000, v27, v24, "Unable to log Pommes request ended because wrapperEvent is nil", v25, 2u);
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }
    goto LABEL_13;
  }
  v13 = v12;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F88]), sel_init);
  -[NSObject setStatus:](v27, sel_setStatus_, a1);
  v14 = objc_msgSend(v13, sel_pommesBridgeContext);
  objc_msgSend(v14, sel_setEnded_, v27);

  objc_msgSend(*(id *)(v4 + 16), sel_emitMessage_, v13);
  v15 = (void *)dispatch thunk of InstrumentationUtil.powerLogger()();
  if (!v15
    || (v16 = v15,
        v17 = objc_msgSend(v15, sel_captureSnapshot),
        v16,
        !v17))
  {

LABEL_13:
    return;
  }
  v18 = objc_msgSend((id)objc_opt_self(), sel_context);
  if (v18)
  {
    v19 = v18;
    UUID.init(uuidString:)();
    v20 = type metadata accessor for UUID();
    v21 = *(_QWORD *)(v20 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v11, 1, v20) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v20);
    }
    objc_msgSend(v17, sel_logWithEventContext_requestIdentifier_, v19, isa);

  }
  else
  {
    __break(1u);
  }
}

void PommesBridgeInstrumentationUtil.logPommesRequestFailed(reason:pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a2, a3, a4);
  if (!v12)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C2356000, v27, v24, "Unable to log Pommes request failed because wrapperEvent is nil", v25, 2u);
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }
    goto LABEL_13;
  }
  v13 = v12;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F90]), sel_init);
  -[NSObject setReason:](v27, sel_setReason_, a1);
  v14 = objc_msgSend(v13, sel_pommesBridgeContext);
  objc_msgSend(v14, sel_setFailed_, v27);

  objc_msgSend(*(id *)(v4 + 16), sel_emitMessage_, v13);
  v15 = (void *)dispatch thunk of InstrumentationUtil.powerLogger()();
  if (!v15
    || (v16 = v15,
        v17 = objc_msgSend(v15, sel_captureSnapshot),
        v16,
        !v17))
  {

LABEL_13:
    return;
  }
  v18 = objc_msgSend((id)objc_opt_self(), sel_context);
  if (v18)
  {
    v19 = v18;
    UUID.init(uuidString:)();
    v20 = type metadata accessor for UUID();
    v21 = *(_QWORD *)(v20 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v11, 1, v20) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v20);
    }
    objc_msgSend(v17, sel_logWithEventContext_requestIdentifier_, v19, isa);

  }
  else
  {
    __break(1u);
  }
}

void PommesBridgeInstrumentationUtil.logPommesRequestUnableToHandle(pommesCandidateId:requestId:rootRequestId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  os_log_t oslog;

  v4 = specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(a1, a2, a3);
  if (v4)
  {
    v5 = v4;
    oslog = (os_log_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99FA0]), sel_init);
    -[NSObject setExists:](oslog, sel_setExists_, 1);
    v6 = objc_msgSend(v5, sel_pommesBridgeContext);
    objc_msgSend(v6, sel_setCancelled_, oslog);

    objc_msgSend(*(id *)(v3 + 16), sel_emitMessage_, v5);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    oslog = (os_log_t)Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1C2356000, oslog, v8, "Unable to log Pommes request unable to habdle because wrapperEvent is nil", v9, 2u);
      MEMORY[0x1C3BBFF64](v9, -1, -1);
    }
  }

}

void *PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, char a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  id v34;
  uint64_t *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  id *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  void *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  id v109[2];

  v105 = a5;
  v106 = a6;
  v107 = a1;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  MEMORY[0x1E0C80A78](v14);
  v101 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PommesSearchError(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v100 = (id *)((char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for PommesSearchReason();
  v103 = *(_QWORD *)(v19 - 8);
  v104 = v19;
  MEMORY[0x1E0C80A78](v19);
  v102 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v99 = (uint64_t)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v91 - v24;
  v26 = type metadata accessor for PommesError();
  v27 = MEMORY[0x1E0C80A78](v26);
  v28 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)&v91 - v31;
  if ((a8 & 1) == 0)
  {
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 136);
    v34 = a7;
    v33(1, a2, a3, a4, v105, v106);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v107, 1, 1, v16);
    return a7;
  }
  v91 = v30;
  v92 = a4;
  v94 = v17;
  v95 = a2;
  v96 = a3;
  v97 = v29;
  v93 = v8;
  v98 = v28;
  v36 = v107;
  v109[0] = a7;
  v37 = a7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  v109[0] = a7;
  v38 = a7;
  if ((swift_dynamicCast() & 1) != 0)
  {
    LOBYTE(v109[0]) = v108;
    logAndMapSearchRequestProcessorError #1 (_:) in PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)((unsigned __int8 *)v109, a7, v93, v95, v96, v92, v105, v106, (uint64_t)v25);
    v39 = v97;
    v40 = v98;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v25, 1, v98) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
      v42 = v102;
      v41 = v103;
      v43 = v104;
      (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, *MEMORY[0x1E0D98920], v104);
      lazy protocol witness table accessor for type PommesError and conformance PommesError();
      v44 = swift_allocError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v45, *MEMORY[0x1E0D9E828], v40);
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v36 + *(int *)(v16 + 20), v42, v43);
      *v36 = v44;
      outlined consume of Result<PommesResponse, Error>(a7);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    }
    else
    {
      v63 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      v63(v32, v25, v40);
      lazy protocol witness table accessor for type PommesError and conformance PommesError();
      v64 = swift_allocError();
      v63(v65, v32, v40);
      outlined consume of Result<PommesResponse, Error>(a7);
      (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))((char *)v36 + *(int *)(v16 + 20), *MEMORY[0x1E0D98920], v104);
      *v36 = v64;
    }
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v36, 0, 1, v16);
    return 0;
  }
  v109[0] = a7;
  v46 = a7;
  v47 = (uint64_t)v101;
  v48 = v16;
  v49 = swift_dynamicCast();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56);
  if (!v49)
  {
    v100 = *(id **)(v94 + 56);
    v50(v47, 1, 1, v16);
    outlined destroy of MediaUserStateCenter?(v47, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.pommes);
    v67 = a7;
    v68 = a7;
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc();
      v72 = (void *)swift_slowAlloc();
      v108 = (uint64_t)a7;
      v109[0] = v72;
      *(_DWORD *)v71 = 136315138;
      v73 = a7;
      v74 = String.init<A>(describing:)();
      v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<PommesResponse, Error>(a7);
      outlined consume of Result<PommesResponse, Error>(a7);
      _os_log_impl(&dword_1C2356000, v69, v70, "Pommes request failed due to unknown error, not of expected types: %s", v71, 0xCu);
      swift_arrayDestroy();
      v76 = v72;
      v48 = v16;
      MEMORY[0x1C3BBFF64](v76, -1, -1);
      MEMORY[0x1C3BBFF64](v71, -1, -1);
    }
    else
    {
      outlined consume of Result<PommesResponse, Error>(a7);
      outlined consume of Result<PommesResponse, Error>(a7);
    }

    v77 = v36;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93 + 144))(0, v95, v96, v92, v105, v106);
    v79 = v102;
    v78 = v103;
    v80 = v104;
    (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, *MEMORY[0x1E0D98920], v104);
    lazy protocol witness table accessor for type PommesError and conformance PommesError();
    v81 = v98;
    v82 = swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v97 + 104))(v83, *MEMORY[0x1E0D9E828], v81);
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))((char *)v77 + *(int *)(v48 + 20), v79, v80);
    *v77 = v82;
    outlined consume of Result<PommesResponse, Error>(a7);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v80);
    ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v100)(v77, 0, 1, v48);
    return 0;
  }
  v51 = v16;
  v52 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v94 + 56);
  v50(v47, 0, 1, v51);
  v53 = v47;
  v54 = v100;
  outlined init with take of PommesSearchError(v53, (uint64_t)v100);
  v109[0] = *v54;
  v55 = v109[0];
  if ((swift_dynamicCast() & 1) != 0)
  {
    LOBYTE(v109[0]) = v108;
    v56 = v99;
    logAndMapSearchRequestProcessorError #1 (_:) in PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)((unsigned __int8 *)v109, a7, v93, v95, v96, v92, v105, v106, v99);
    v57 = v97;
    v58 = v98;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v56, 1, v98) != 1)
    {
      v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32);
      v85 = v91;
      v84(v91, v56, v58);
      lazy protocol witness table accessor for type PommesError and conformance PommesError();
      v86 = swift_allocError();
      v84(v87, v85, v58);
      outlined consume of Result<PommesResponse, Error>(a7);
      v89 = v102;
      v88 = v103;
      v90 = v104;
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v102, (char *)v54 + *(int *)(v48 + 20), v104);
      outlined destroy of PommesSearchError((uint64_t)v54);
      *v36 = v86;
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))((char *)v36 + *(int *)(v48 + 20), v89, v90);
      goto LABEL_20;
    }
    outlined destroy of MediaUserStateCenter?(v56, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
  }
  v59 = (char *)v54 + *(int *)(v48 + 20);
  lazy protocol witness table accessor for type PommesError and conformance PommesError();
  v60 = v98;
  v61 = swift_allocError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v97 + 104))(v62, *MEMORY[0x1E0D9E828], v60);
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))((char *)v36 + *(int *)(v48 + 20), v59, v104);
  *v36 = v61;
  outlined consume of Result<PommesResponse, Error>(a7);
  outlined destroy of PommesSearchError((uint64_t)v54);
LABEL_20:
  v52(v36, 0, 1, v48);
  return 0;
}

uint64_t logAndMapSearchRequestProcessorError #1 (_:) in PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  id v55;
  id v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  id v77;
  id v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint8_t *v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;

  v16 = *a1;
  if (!(v16 >> 6))
  {
    if (v16 == 2)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v25, v26))
        goto LABEL_40;
      v27 = a4;
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1C2356000, v25, v26, "Declining Pommes request due to low PSC score. This is expected behavior for non-info requests.", v28, 2u);
      v29 = v28;
      a4 = v27;
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
      v55 = a2;
      v56 = a2;
      v25 = Logger.logObject.getter();
      v57 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v25, v57))
      {

        goto LABEL_40;
      }
      v99 = a5;
      v58 = (uint8_t *)swift_slowAlloc();
      v94 = a4;
      v59 = swift_slowAlloc();
      v103 = v59;
      *(_DWORD *)v58 = 136315138;
      v60 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v61 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v25, v57, "Pommes request unable to be handled: %s", v58, 0xCu);
      swift_arrayDestroy();
      v63 = v59;
      a4 = v94;
      MEMORY[0x1C3BBFF64](v63, -1, -1);
      v29 = v58;
      a5 = v99;
    }
    MEMORY[0x1C3BBFF64](v29, -1, -1);
LABEL_40:

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 152))(a4, a5, a6, a7, a8);
    v88 = (unsigned int *)MEMORY[0x1E0D9E810];
    goto LABEL_47;
  }
  if (v16 >> 6 == 1)
  {
    v17 = v16 & 0x3F;
    if ((_DWORD)v17 != 1)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
      v43 = a2;
      v44 = a2;
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v98 = a5;
        v47 = (uint8_t *)swift_slowAlloc();
        v93 = a4;
        v48 = swift_slowAlloc();
        v103 = v48;
        *(_DWORD *)v47 = 136315138;
        v49 = a2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v50 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v45, v46, "Pommes request failed due to a Pommes failure: %s", v47, 0xCu);
        swift_arrayDestroy();
        v52 = v48;
        a4 = v93;
        MEMORY[0x1C3BBFF64](v52, -1, -1);
        v53 = v47;
        a5 = v98;
        MEMORY[0x1C3BBFF64](v53, -1, -1);
      }
      else
      {

      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(7, a4, a5, a6, a7, a8);
      __asm { BR              X9 }
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = a4;
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1C2356000, v19, v20, "Declining Pommes request due to missing DUDA. This is expected behavior for non-info requests.", v22, 2u);
      v23 = v22;
      a4 = v21;
      MEMORY[0x1C3BBFF64](v23, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(7, a4, a5, a6, a7, a8);
    v88 = (unsigned int *)MEMORY[0x1E0D9E808];
  }
  else if (v16 == 128)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.pommes);
    v65 = a2;
    v66 = a2;
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v101 = a9;
      v69 = (uint8_t *)swift_slowAlloc();
      v95 = a4;
      v70 = swift_slowAlloc();
      v103 = v70;
      *(_DWORD *)v69 = 136315138;
      v71 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v72 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v67, v68, "Pommes request failed due to invalid state: %s", v69, 0xCu);
      swift_arrayDestroy();
      v74 = v70;
      a4 = v95;
      MEMORY[0x1C3BBFF64](v74, -1, -1);
      v75 = v69;
      a9 = v101;
      MEMORY[0x1C3BBFF64](v75, -1, -1);
    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(7, a4, a5, a6, a7, a8);
    v88 = (unsigned int *)MEMORY[0x1E0D9E800];
  }
  else if (v16 == 129)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    v31 = a2;
    v32 = a2;
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v97 = a5;
      v35 = (uint8_t *)swift_slowAlloc();
      v92 = a4;
      v36 = swift_slowAlloc();
      v103 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v38 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v33, v34, "Pommes request failed due to getting no results: %s", v35, 0xCu);
      swift_arrayDestroy();
      v40 = v36;
      a4 = v92;
      MEMORY[0x1C3BBFF64](v40, -1, -1);
      v41 = v35;
      a5 = v97;
      MEMORY[0x1C3BBFF64](v41, -1, -1);
    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 136))(2, a4, a5, a6, a7, a8);
    v88 = (unsigned int *)MEMORY[0x1E0D9E840];
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.pommes);
    v77 = a2;
    v78 = a2;
    v79 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v100 = a5;
      v81 = (uint8_t *)swift_slowAlloc();
      v96 = a4;
      v82 = swift_slowAlloc();
      v103 = v82;
      *(_DWORD *)v81 = 136315138;
      v83 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v84 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v79, v80, "Pommes request failed due to unavailable network: %s", v81, 0xCu);
      swift_arrayDestroy();
      v86 = v82;
      a4 = v96;
      MEMORY[0x1C3BBFF64](v86, -1, -1);
      v87 = v81;
      a5 = v100;
      MEMORY[0x1C3BBFF64](v87, -1, -1);
    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(6, a4, a5, a6, a7, a8);
    v88 = (unsigned int *)MEMORY[0x1E0D9E818];
  }
LABEL_47:
  v89 = *v88;
  v90 = type metadata accessor for PommesError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 104))(a9, v89, v90);
  type metadata accessor for PommesError();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(a9, 0, 1, v90);
}

uint64_t PommesBridgeInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return v0;
}

uint64_t PommesBridgeInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocClassInstance();
}

void *specialized PommesBridgeInstrumentationUtil.buildWrapperEventMessageForPommes(pommesCandidateId:requestId:rootRequestId:logResourceUtilization:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  id v30;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  id v38;
  Class v39;
  id v40;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a3;
  v45 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v42 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v43 = (char *)&v42 - v14;
  v15 = specialized PommesBridgeInstrumentationUtil.getRCIdAndTRPId(pommesCandidateId:)(a1);
  v17 = v16;
  v46 = v3;
  swift_bridgeObjectRetain();
  v18 = (void *)dispatch thunk of InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)();
  swift_bridgeObjectRelease();
  if (v18)
  {
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F80]), sel_init);
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v20(v9, 1, v10) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      v28 = v43;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v43, v9, v10);
      if (v19)
      {
        v29 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
        v30 = v19;
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v32 = objc_msgSend(v29, sel_initWithNSUUID_, isa);

        objc_msgSend(v30, sel_setTrpId_, v32);
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v28, v10);
    }
    v33 = v46[8];
    v34 = v46[9];
    __swift_project_boxed_opaque_existential_1(v46 + 5, v33);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34) & 1) != 0)
    {
      v35 = (uint64_t)v44;
      UUID.init(uuidString:)();
      if (v20((char *)v35, 1, v10) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        v36 = v42;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v42, v35, v10);
        if (v19)
        {
          v37 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
          v38 = v19;
          v39 = UUID._bridgeToObjectiveC()().super.isa;
          v40 = objc_msgSend(v37, sel_initWithNSUUID_, v39);

          objc_msgSend(v38, sel_setSubRequestId_, v40);
        }
        (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
      }
    }
    objc_msgSend(v18, sel_setPommesBridgeContext_, v19);

  }
  else
  {
    v21 = v15;
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    v23 = v47;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v49 = v27;
      *(_DWORD *)v26 = 136315394;
      swift_bridgeObjectRetain();
      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v23, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain();
      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v17, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v24, v25, "Unable to create ORCHSchemaORCHClientEvent for requestId=%s resultCandidateId=%s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v27, -1, -1);
      MEMORY[0x1C3BBFF64](v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  return v18;
}

uint64_t type metadata accessor for PommesBridgeInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesBridgeInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.__allocating_init(_:_:_:featureChecker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestStarted(pommesCandidateId:requestId:rootRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestEnded(status:pommesCandidateId:requestId:rootRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestFailed(reason:pommesCandidateId:requestId:rootRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logPommesRequestUnableToHandle(pommesCandidateId:requestId:rootRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PommesBridgeInstrumentationUtil.logSearchCompletion(pommesCandidateId:requestId:rootRequestId:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 160))(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
}

uint64_t AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15[5];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Google_Protobuf_Any();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15[3] = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
  v15[4] = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6DD60], MEMORY[0x1E0D6DD28]);
  __swift_allocate_boxed_opaque_existential_1(v15);
  v14 = v1;
  static Message.with(_:)();
  defaultAnyTypeURLPrefix.getter();
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v5, v6);
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  MEMORY[0x1E0C80A78](v10);
  *(_QWORD *)&v13[-16] = v9;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, v11, MEMORY[0x1E0D6F200]);
  static Message.with(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
}

uint64_t AssistantDataSnapshot.MeCard.toPersonProtobuf()()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6DD60], MEMORY[0x1E0D6DD28]);
  return static Message.with(_:)();
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = type metadata accessor for Google_Protobuf_Any();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, _QWORD))(v13 + 104))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6FCC0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0D70598], v7);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
}

uint64_t outlined destroy of Google_Protobuf_Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined retain of AssistantDataSnapshot.MeCard.ContactAddress(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AssistantDataSnapshot.MeCard.ContactAddress(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(a1);
}

id specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  id result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    result = objc_msgSend((id)objc_opt_self(), sel_protocolOrNilWithIdentifier_, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10));
    if (result)
    {
      MEMORY[0x1C3BBEE78]();
      if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = (id)specialized Array._endMutation()();
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return (id)v14;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t AppIntentMetadataMapper.init(metadataProvider:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of AppDataProviding(a1, a2);
}

unint64_t AppIntentMetadataMapper.getAppIntentMetadata(bundleId:)(uint64_t a1, id a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  char v57;
  void (*v58)(uint64_t *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t result;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  int64_t v85;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  id v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
  v9 = *(_QWORD *)(v8 - 8);
  v96 = v8;
  v97 = v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v89 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v91 = (char *)&v83 - v12;
  v14 = v2[3];
  v13 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v14);
  if (one-time initialization token for mappings != -1)
    goto LABEL_74;
  while (1)
  {
    v15 = swift_bridgeObjectRetain();
    v16 = specialized Sequence.compactMap<A>(_:)(v15);
    swift_bridgeObjectRelease();
    v17 = specialized Set.init<A>(_:)((unint64_t)v16);
    swift_bridgeObjectRelease();
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, id, int64_t, unint64_t))(v13 + 8))(v17, 2, a1, a2, v14, v13);
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v28 + 16))
      goto LABEL_68;
    swift_bridgeObjectRetain();
    v29 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_68:
      swift_bridgeObjectRelease();
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    }
    v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v88 = v31;
    v32 = 0;
    v33 = *(_QWORD *)(v31 + 64);
    v84 = v31 + 64;
    v34 = 1 << *(_BYTE *)(v31 + 32);
    if (v34 < 64)
      v35 = ~(-1 << v34);
    else
      v35 = -1;
    v36 = v35 & v33;
    v85 = (unint64_t)(v34 + 63) >> 6;
    v37 = &demangling cache variable for type metadata for (String, CacheHandling);
LABEL_12:
    if (v36)
    {
      v93 = (v36 - 1) & v36;
      v94 = v32;
      v38 = __clz(__rbit64(v36)) | (v32 << 6);
      goto LABEL_28;
    }
    v39 = v32 + 1;
    if (!__OFADD__(v32, 1))
      break;
LABEL_73:
    __break(1u);
LABEL_74:
    swift_once();
  }
  if (v39 >= v85)
    goto LABEL_69;
  v40 = *(_QWORD *)(v84 + 8 * v39);
  v41 = v32 + 1;
  if (v40)
    goto LABEL_27;
  v41 = v32 + 2;
  if (v32 + 2 >= v85)
    goto LABEL_69;
  v40 = *(_QWORD *)(v84 + 8 * v41);
  if (v40)
    goto LABEL_27;
  v41 = v32 + 3;
  if (v32 + 3 >= v85)
    goto LABEL_69;
  v40 = *(_QWORD *)(v84 + 8 * v41);
  if (v40)
    goto LABEL_27;
  v42 = v32 + 4;
  if (v32 + 4 >= v85)
  {
LABEL_69:
    swift_release();
    return v87;
  }
  v40 = *(_QWORD *)(v84 + 8 * v42);
  if (!v40)
  {
    while (1)
    {
      v41 = v42 + 1;
      if (__OFADD__(v42, 1))
      {
        __break(1u);
LABEL_77:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      if (v41 >= v85)
        goto LABEL_69;
      v40 = *(_QWORD *)(v84 + 8 * v41);
      ++v42;
      if (v40)
        goto LABEL_27;
    }
  }
  v41 = v32 + 4;
LABEL_27:
  v93 = (v40 - 1) & v40;
  v94 = v41;
  v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_28:
  v92 = *(id *)(*(_QWORD *)(v88 + 56) + 8 * v38);
  v43 = objc_msgSend(v92, sel_systemProtocolMetadata);
  type metadata accessor for LNSystemProtocolIdentifier(0);
  a2 = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocolMetadata);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  a1 = 0;
  v45 = v44 + 64;
  v46 = 1 << *(_BYTE *)(v44 + 32);
  if (v46 < 64)
    v47 = ~(-1 << v46);
  else
    v47 = -1;
  v13 = v47 & *(_QWORD *)(v44 + 64);
  v14 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        do
        {
          if (v13)
          {
            v48 = __clz(__rbit64(v13));
            v13 &= v13 - 1;
            v49 = v48 | (a1 << 6);
          }
          else
          {
            v50 = a1 + 1;
            if (__OFADD__(a1, 1))
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            if (v50 >= v14)
              goto LABEL_11;
            v51 = *(_QWORD *)(v45 + 8 * v50);
            ++a1;
            if (!v51)
            {
              a1 = v50 + 1;
              if (v50 + 1 >= v14)
                goto LABEL_11;
              v51 = *(_QWORD *)(v45 + 8 * a1);
              if (!v51)
              {
                a1 = v50 + 2;
                if (v50 + 2 >= v14)
                  goto LABEL_11;
                v51 = *(_QWORD *)(v45 + 8 * a1);
                if (!v51)
                {
                  v52 = v50 + 3;
                  if (v52 >= v14)
                  {
LABEL_11:

                    swift_release();
                    v36 = v93;
                    v32 = v94;
                    goto LABEL_12;
                  }
                  v51 = *(_QWORD *)(v45 + 8 * v52);
                  if (!v51)
                  {
                    while (1)
                    {
                      a1 = v52 + 1;
                      if (__OFADD__(v52, 1))
                        goto LABEL_71;
                      if (a1 >= v14)
                        goto LABEL_11;
                      v51 = *(_QWORD *)(v45 + 8 * a1);
                      ++v52;
                      if (v51)
                        goto LABEL_48;
                    }
                  }
                  a1 = v52;
                }
              }
            }
LABEL_48:
            v13 = (v51 - 1) & v51;
            v49 = __clz(__rbit64(v51)) + (a1 << 6);
          }
          v53 = v37[198];
        }
        while (!*(_QWORD *)(v53 + 16));
        v54 = 8 * v49;
        v55 = *(void **)(*(_QWORD *)(v44 + 56) + v54);
        a2 = *(id *)(*(_QWORD *)(v44 + 48) + v54);
        swift_unknownObjectRetain();
        v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
        if ((v57 & 1) != 0)
          break;
        swift_unknownObjectRelease();

      }
      v58 = *(void (**)(uint64_t *))(*(_QWORD *)(v53 + 56) + 16 * v56);
      swift_retain();

      v99[0] = (uint64_t)v55;
      v58(v99);
      v59 = v96;
      swift_release();
      v60 = v97;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v7, 1, v59) != 1)
        break;
      swift_unknownObjectRelease();

      outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
      v37 = (_QWORD *)&demangling cache variable for type metadata for (String, CacheHandling);
    }
    v83 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    v83(v91, v7, v59);
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v95 = v61;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v89, v91, v59);
    v62 = v87;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v99[0] = v62;
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v95);
    v65 = *(_QWORD *)(v62 + 16);
    v66 = (v63 & 1) == 0;
    v67 = v65 + v66;
    if (__OFADD__(v65, v66))
      goto LABEL_72;
    if (*(_QWORD *)(v62 + 24) >= v67)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        LODWORD(v87) = v63;
        specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D70050], &demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata>);
        LOBYTE(v63) = v87;
      }
    }
    else
    {
      LODWORD(v87) = v63;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, isUniquelyReferenced_nonNull_native, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70050], &demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata>);
      v68 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v95);
      v69 = v63 & 1;
      LOBYTE(v63) = v87;
      if ((v87 & 1) != v69)
        goto LABEL_77;
      v64 = v68;
    }
    v70 = v95;
    v71 = (_QWORD *)v99[0];
    if ((v63 & 1) != 0)
    {
      v72 = v97;
      v73 = *(_QWORD *)(v99[0] + 56) + *(_QWORD *)(v97 + 72) * v64;
      v74 = v96;
      (*(void (**)(unint64_t, char *, uint64_t))(v97 + 40))(v73, v89, v96);
      goto LABEL_63;
    }
    *(_QWORD *)(v99[0] + 8 * (v64 >> 6) + 64) |= 1 << v64;
    v75 = (_QWORD *)(v71[6] + 16 * v64);
    v76 = v89;
    *v75 = v90;
    v75[1] = v70;
    v77 = v71[7] + *(_QWORD *)(v97 + 72) * v64;
    v74 = v96;
    v83((char *)v77, v76, v96);
    v78 = v71[2];
    v79 = __OFADD__(v78, 1);
    v80 = v78 + 1;
    if (v79)
      break;
    v71[2] = v80;
    swift_bridgeObjectRetain();
    v72 = v97;
LABEL_63:
    v87 = v99[0];

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v91, v74);
    v37 = (_QWORD *)&demangling cache variable for type metadata for (String, CacheHandling);
  }
  __break(1u);
  swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  v19 = v55;
  v20 = v55;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v98 = (uint64_t)v55;
    v99[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v26 = String.init<A>(describing:)();
    v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v21, v22, "Failure getting AppIntents protocol metadata: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v24, -1, -1);
    MEMORY[0x1C3BBFF64](v23, -1, -1);
  }
  else
  {

  }
  v81 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);

  return v81;
}

void *one-time initialization function for mappings()
{
  uint64_t inited;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(LNSystemProtocolIdentifier, (_:))>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FB7E0;
  v1 = (void *)*MEMORY[0x1E0D43A58];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D43A58];
  *(_QWORD *)(inited + 40) = specialized thunk for @escaping @callee_guaranteed (@guaranteed LNSystemProtocolMetadata) -> (@out Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
  v2 = (void *)*MEMORY[0x1E0D43A70];
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = v2;
  *(_QWORD *)(inited + 64) = specialized thunk for @escaping @callee_guaranteed (@guaranteed LNSystemProtocolMetadata) -> (@out Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?);
  *(_QWORD *)(inited + 72) = 0;
  v3 = v1;
  v4 = v2;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  static AppIntentMetadataMapper.mappings = result;
  return result;
}

uint64_t static AppIntentMetadataMapper.mapPlayVideo(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v56 = (uint64_t)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v44 - v7;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.VideoCategory();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    v18 = (void *)v17;
    v48 = v14;
    v49 = v13;
    swift_unknownObjectRetain();
    Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.init()();
    v19 = objc_msgSend(v18, sel_supportedCategories);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v45 = v16;
      v46 = a1;
      v47 = a2;
      v58 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      v55 = *MEMORY[0x1E0C90A80];
      v53 = *MEMORY[0x1E0C90A78];
      v51 = *MEMORY[0x1E0C90A88];
      v50 = *MEMORY[0x1E0D70010];
      v52 = *MEMORY[0x1E0D6FFF8];
      v54 = *MEMORY[0x1E0D70000];
      v44[1] = v20;
      v22 = v20 + 40;
      v23 = *MEMORY[0x1E0D70008];
      do
      {
        swift_bridgeObjectRetain_n();
        VideoCategory.init(rawValue:)();
        v24 = type metadata accessor for VideoCategory();
        v25 = *(_QWORD *)(v24 - 8);
        v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v8, 1, v24);
        v27 = v23;
        if (v26 != 1)
        {
          v28 = (uint64_t)v8;
          v57 = v21;
          v29 = v10;
          v30 = v8;
          v31 = v12;
          v32 = v9;
          v33 = v23;
          v34 = v56;
          outlined init with copy of MediaUserStateCenter?(v28, v56, &demangling cache variable for type metadata for VideoCategory?);
          v35 = v34;
          v23 = v33;
          v9 = v32;
          v12 = v31;
          v8 = v30;
          v10 = v29;
          v21 = v57;
          v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v35, v24);
          v27 = v54;
          if (v36 != v55)
          {
            v27 = v52;
            if (v36 != v53)
            {
              v27 = v50;
              if (v36 != v51)
              {
                (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v56, v24);
                v27 = v23;
              }
            }
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v12, v27, v9);
        outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for VideoCategory?);
        swift_bridgeObjectRelease();
        v37 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v37 + 16) + 1, 1);
          v37 = v58;
        }
        v39 = *(_QWORD *)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          v37 = v58;
        }
        v22 += 16;
        *(_QWORD *)(v37 + 16) = v39 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v37+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v39, v12, v9);
        v58 = v37;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      a2 = v47;
      v16 = v45;
    }
    else
    {
      swift_bridgeObjectRelease();
      v37 = MEMORY[0x1E0DEE9D8];
    }
    MEMORY[0x1C3BBC400](v37);
    v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    MEMORY[0x1E0C80A78](v42);
    v44[-2] = v16;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata and conformance Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata, v43, MEMORY[0x1E0D70040]);
    static Message.with(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a2, 0, 1, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v16, v49);
  }
  else
  {
    v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a2, 1, 1, v40);
  }
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed LNSystemProtocolMetadata) -> (@out Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata?)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return static AppIntentMetadataMapper.mapPlayVideo(_:)(*a1, a2);
}

{
  return static AppIntentMetadataMapper.mapShowInAppStringSearchResults(_:)(*a1, a2);
}

uint64_t static AppIntentMetadataMapper.mapShowInAppStringSearchResults(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v58 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v44 - v7;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.StringSearchScope();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    v18 = (void *)v17;
    v50 = v14;
    v51 = v13;
    swift_unknownObjectRetain();
    Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.init()();
    v19 = objc_msgSend(v18, sel_searchScopes);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v45 = v16;
      v46 = a1;
      v47 = a2;
      v60 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      v57 = *MEMORY[0x1E0C911C0];
      v55 = *MEMORY[0x1E0C911B8];
      v53 = *MEMORY[0x1E0C911B0];
      v49 = *MEMORY[0x1E0C911A8];
      v48 = *MEMORY[0x1E0D6FFA8];
      v52 = *MEMORY[0x1E0D6FFB0];
      v54 = *MEMORY[0x1E0D6FFB8];
      v56 = *MEMORY[0x1E0D6FFC0];
      v44 = v20;
      v22 = v20 + 40;
      v23 = *MEMORY[0x1E0D6FFC8];
      do
      {
        swift_bridgeObjectRetain_n();
        StringSearchScope.init(rawValue:)();
        v24 = type metadata accessor for StringSearchScope();
        v25 = *(_QWORD *)(v24 - 8);
        v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v8, 1, v24);
        v27 = v23;
        if (v26 != 1)
        {
          v28 = (uint64_t)v8;
          v59 = v21;
          v29 = v10;
          v30 = v8;
          v31 = v12;
          v32 = v9;
          v33 = v23;
          v34 = v58;
          outlined init with copy of MediaUserStateCenter?(v28, v58, &demangling cache variable for type metadata for StringSearchScope?);
          v35 = v34;
          v23 = v33;
          v9 = v32;
          v12 = v31;
          v8 = v30;
          v10 = v29;
          v21 = v59;
          v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v35, v24);
          v27 = v56;
          if (v36 != v57)
          {
            v27 = v54;
            if (v36 != v55)
            {
              v27 = v52;
              if (v36 != v53)
              {
                v27 = v48;
                if (v36 != v49)
                {
                  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v58, v24);
                  v27 = v23;
                }
              }
            }
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v12, v27, v9);
        outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for StringSearchScope?);
        swift_bridgeObjectRelease();
        v37 = v60;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v37 + 16) + 1, 1);
          v37 = v60;
        }
        v39 = *(_QWORD *)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          v37 = v60;
        }
        v22 += 16;
        *(_QWORD *)(v37 + 16) = v39 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v37+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v39, v12, v9);
        v60 = v37;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      a2 = v47;
      v16 = v45;
    }
    else
    {
      swift_bridgeObjectRelease();
      v37 = MEMORY[0x1E0DEE9D8];
    }
    MEMORY[0x1C3BBC3D0](v37);
    v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    MEMORY[0x1E0C80A78](v42);
    *(&v44 - 2) = (uint64_t)v16;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata and conformance Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata, v43, MEMORY[0x1E0D70040]);
    static Message.with(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a2, 0, 1, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v16, v51);
  }
  else
  {
    v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a2, 1, 1, v40);
  }
}

uint64_t closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.OneOf_Metadata?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a2, v10);
  v11 = *a4;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.OneOf_Metadata();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v9, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  return Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.metadata.setter();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E9C0], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AudioItemType>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F078], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_Span>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>);
  v43 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      outlined init with take of PommesSearchReason?(v30, (uint64_t)v7, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    }
    else
    {
      outlined init with copy of MediaUserStateCenter?(v30, (uint64_t)v7, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = outlined init with take of PommesSearchReason?((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t i;
  int v48;
  uint64_t v49;

  v3 = v2;
  v5 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v49 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PommesCandidateId();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PommesCandidateId, PommesBridgeResultCandidateState>);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_42;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v2;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v21 = v11;
  for (i = v11; ; v21 = i)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v27 = v45[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_35:
          swift_release();
          v3 = v43;
          if ((v48 & 1) == 0)
            goto LABEL_42;
          goto LABEL_36;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_44;
            if (v20 >= v44)
              goto LABEL_35;
            v27 = v45[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = *(_QWORD *)(v8 + 72);
    v30 = *(_QWORD *)(v21 + 48) + v29 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v30, v7);
      v31 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      outlined init with take of PerformanceUtil.Ticket(v31 + v32 * v24, v49, type metadata accessor for PommesBridgeResultCandidateState);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
      v33 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      outlined init with copy of PommesSearchRequest(v33 + v32 * v24, v49, type metadata accessor for PommesBridgeResultCandidateState);
    }
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId, (uint64_t (*)(uint64_t))MEMORY[0x1E0D988D8], MEMORY[0x1E0D988E8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v29 * v22, v10, v7);
    result = outlined init with take of PerformanceUtil.Ticket(v49, *(_QWORD *)(v13 + 56) + v32 * v22, type metadata accessor for PommesBridgeResultCandidateState);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v3 = v43;
  v26 = v45;
  if ((v48 & 1) == 0)
    goto LABEL_42;
LABEL_36:
  v41 = 1 << *(_BYTE *)(i + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(i + 16) = 0;
LABEL_42:
  result = swift_release();
  *v3 = v13;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = v2;
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_AudioItemType, Float>);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release();
    v35 = v39;
LABEL_42:
    *v35 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  v38 = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v42 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v22 >= v40)
    {
      swift_release();
      v35 = v39;
      v23 = v41;
      if ((v38 & 1) != 0)
      {
LABEL_37:
        v36 = 1 << *(_BYTE *)(v8 + 32);
        if (v36 >= 64)
          bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v36;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
        break;
    }
LABEL_23:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + v42))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v4);
    v27 = *(_DWORD *)(*(_QWORD *)(v8 + 56) + 4 * v21);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v4);
    *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v19) = v27;
    ++*(_QWORD *)(v10 + 16);
  }
  v25 = v22 + 2;
  if (v25 >= v40)
  {
LABEL_34:
    swift_release();
    v35 = v39;
    if ((v38 & 1) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v24 = v41[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v40)
      goto LABEL_34;
    v24 = v41[v17];
    ++v25;
    if (v24)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (textMatchScore: Float, itemTypeMatchScore: Float)>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [[String : String]]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  __int128 v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_33;
      v24 = v40[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v24 = v40[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 40 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v43 = *(_OWORD *)(v33 + 16);
    v36 = *(_QWORD *)(v33 + 32);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 40 * v17;
    *(_QWORD *)v19 = v34;
    *(_QWORD *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v43;
    *(_QWORD *)(v19 + 32) = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, DispatchTimeoutResult>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, DomainAffinityKVStore>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : Float]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, [String]>);
  v34 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = v2;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v32)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v33 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v32)
        goto LABEL_33;
      v22 = *(_QWORD *)(v33 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v32)
        {
LABEL_33:
          swift_release();
          v3 = v31;
          if ((v34 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v22 = *(_QWORD *)(v33 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_42;
            if (v13 >= v32)
              goto LABEL_33;
            v22 = *(_QWORD *)(v33 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_30;
          }
        }
        v13 = v23;
      }
    }
LABEL_30:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    v28 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    if ((v34 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v16 == v25;
        if (v16 == v25)
          v16 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v28;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v21 = (_QWORD *)(v5 + 64);
  if ((v34 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, String>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v20);
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
    v31 = *v30;
    v32 = v30[1];
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v29;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17);
    *v18 = v31;
    v18[1] = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AudioItemCandidate>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, PommesResult>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [WarmupComponent]>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;

  v6 = v4;
  v48 = a3(0);
  v8 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v47 = (char *)&v42 - v9;
  v10 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (*(_QWORD *)(v10 + 16))
  {
    v43 = v4;
    v13 = 1 << *(_BYTE *)(v10 + 32);
    v14 = *(_QWORD *)(v10 + 64);
    v45 = (_QWORD *)(v10 + 64);
    if (v13 < 64)
      v15 = ~(-1 << v13);
    else
      v15 = -1;
    v16 = v15 & v14;
    v44 = (unint64_t)(v13 + 63) >> 6;
    v17 = v11 + 64;
    result = swift_retain();
    v19 = 0;
    while (1)
    {
      if (v16)
      {
        v22 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v23 = v22 | (v19 << 6);
      }
      else
      {
        v24 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v44)
          goto LABEL_34;
        v25 = v45[v24];
        ++v19;
        if (!v25)
        {
          v19 = v24 + 1;
          if (v24 + 1 >= v44)
            goto LABEL_34;
          v25 = v45[v19];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v44)
            {
LABEL_34:
              swift_release();
              v6 = v43;
              if ((v46 & 1) != 0)
              {
                v41 = 1 << *(_BYTE *)(v10 + 32);
                if (v41 >= 64)
                  bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v45 = -1 << v41;
                *(_QWORD *)(v10 + 16) = 0;
              }
              break;
            }
            v25 = v45[v26];
            if (!v25)
            {
              while (1)
              {
                v19 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v19 >= v44)
                  goto LABEL_34;
                v25 = v45[v19];
                ++v26;
                if (v25)
                  goto LABEL_21;
              }
            }
            v19 = v26;
          }
        }
LABEL_21:
        v16 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v19 << 6);
      }
      v27 = *(_QWORD *)(v10 + 56);
      v28 = v10;
      v29 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v23);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v8 + 72);
      v33 = v27 + v32 * v23;
      if ((v46 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v47, v33, v48);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v47, v33, v48);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v34 = -1 << *(_BYTE *)(v12 + 32);
      v35 = result & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v17 + 8 * (v35 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v17 + 8 * v36);
        }
        while (v40 == -1);
        v20 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20);
      *v21 = v31;
      v21[1] = v30;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v12 + 56) + v32 * v20, v47, v48);
      ++*(_QWORD *)(v12 + 16);
      v10 = v28;
    }
  }
  result = swift_release();
  *v6 = v12;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          v4 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v36)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v6 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v35;
  v23 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D6E9C0], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AudioItemType>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (textMatchScore: Float, itemTypeMatchScore: Float)>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9F078], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_Span>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_23;
      v23 = *(_QWORD *)(v26 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_22:
    v13 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v28 + 72) * v15;
    outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    v21 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of PommesSearchReason?((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [[String : String]]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v23 = *(_QWORD *)v21;
    v22 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 32);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v26 = *(_OWORD *)(v21 + 16);
    *v25 = v18;
    v25[1] = v19;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v27 = v23;
    *(_QWORD *)(v27 + 8) = v22;
    *(_OWORD *)(v27 + 16) = v26;
    *(_QWORD *)(v27 + 32) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v36 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for PommesCandidateId();
  v3 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PommesCandidateId, PommesBridgeResultCandidateState>);
  v30 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = *(_QWORD *)(v5 + 16);
  v38 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v28 = v38;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v38;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v37 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = v5 + 64;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v16 = v33;
  v15 = v34;
  v17 = (uint64_t)v35;
  for (i = v38;
        ;
        result = (void *)outlined init with take of PerformanceUtil.Ticket(v17, *(_QWORD *)(i + 56) + v23, type metadata accessor for PommesBridgeResultCandidateState))
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v37;
      goto LABEL_9;
    }
    v24 = v11 + 1;
    v21 = v37;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_22:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(_QWORD *)(v21 + 48) + v22, v15);
    v23 = *(_QWORD *)(v36 + 72) * v20;
    outlined init with copy of PommesSearchRequest(*(_QWORD *)(v21 + 56) + v23, v17, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(i + 48) + v22, v16, v15);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release();
    v27 = v30;
    v28 = v38;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, DispatchTimeoutResult>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, DomainAffinityKVStore>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String : Float]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_AudioItemType, Float>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 4 * v18;
    v21 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + v20);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v20) = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, [String]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [WarmupComponent]>);
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1(0);
  v4 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v6 = (char *)&v33 - v5;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v34 = v2;
  v7 = *v2;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = *(_QWORD *)(v7 + 16);
  v38 = v8;
  if (!v9)
  {
    result = (void *)swift_release();
    v32 = v38;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v10 = v8;
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    v10 = v38;
  }
  v35 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v36 = (unint64_t)(v15 + 63) >> 6;
  v18 = v37;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v14);
      if (!v29)
        break;
    }
LABEL_25:
    v17 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 56) + v25, v18);
    v26 = v38;
    v27 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v21);
    *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v26 + 56) + v25, v6, v18);
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release();
    v31 = v34;
    v32 = v38;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v14 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v14);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AudioItemCandidate>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, PommesResult>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = *v17;
    v18 = v17[1];
    LOBYTE(v17) = *(_BYTE *)(*(_QWORD *)(v3 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    *v20 = v19;
    v20[1] = v18;
    *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16) = (_BYTE)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v8;
  uint64_t v10;

  v4 = *v2;
  Hasher.init(_seed:)();
  CommonAudio.Attribute.rawValue.getter(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v8;
  *v8 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10;
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t matched;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v33 = a1;
  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v6 = *(_QWORD *)(matched - 8);
  v7 = MEMORY[0x1E0C80A78](matched);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v31 - v10;
  v12 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  v36 = matched;
  v13 = *(int *)(matched + 20);
  v39 = a2;
  v14 = a2 + v13;
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
  v34 = v15;
  v35 = v14;
  dispatch thunk of Hashable.hash(into:)();
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v12 + 32);
  v18 = v16 & ~v17;
  v19 = v12;
  v20 = v12 + 56;
  v21 = *(_QWORD *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18;
  v32 = v11;
  if ((v21 & 1) != 0)
  {
    v31 = v3;
    v22 = ~v17;
    v23 = *(_QWORD *)(v6 + 72);
    v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0];
    v38 = v19;
    do
    {
      v25 = *(_QWORD *)(v19 + 48);
      v37 = v23 * v18;
      outlined init with copy of PommesSearchRequest(v25 + v23 * v18, (uint64_t)v9, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, v24, MEMORY[0x1E0D6F5C0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v41 == v40)
      {
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9E0]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0];
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v41 == v40)
        {
          outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v9);
          swift_bridgeObjectRelease();
          outlined destroy of AudioTypeFeaturiser.ExactMatchKey(v39);
          outlined init with copy of PommesSearchRequest(*(_QWORD *)(*v31 + 48) + v37, v33, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
          return 0;
        }
      }
      outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v9);
      v18 = (v18 + 1) & v22;
      v19 = v38;
    }
    while (((*(_QWORD *)(v20 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
    swift_bridgeObjectRelease();
    v27 = v33;
    v3 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = v33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v29 = v39;
  v30 = (uint64_t)v32;
  outlined init with copy of PommesSearchRequest(v39, (uint64_t)v32, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
  v41 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(v30, v18, isUniquelyReferenced_nonNull_native);
  *v3 = v41;
  swift_bridgeObjectRelease();
  outlined init with take of PerformanceUtil.Ticket(v29, v27, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
  return 1;
}

{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  unsigned int v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t *v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v48 = a1;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
  MEMORY[0x1E0C80A78](v57);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for VideoCategory();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v52 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v58 = (uint64_t)&v45 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v46 = (uint64_t)&v45 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v45 - v18;
  v47 = v2;
  v20 = *v2;
  Hasher.init(_seed:)();
  v50 = a2;
  v21 = a2;
  v22 = v7;
  outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v19, &demangling cache variable for type metadata for VideoCategory?);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v24 = v23(v19, 1, v6);
  v51 = v22;
  if (v24 == 1)
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v9, v19, v6);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AA8]);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v6);
  }
  v25 = Hasher._finalize()();
  v26 = -1 << *(_BYTE *)(v20 + 32);
  v27 = v25 & ~v26;
  v56 = v20 + 56;
  v28 = (uint64_t)v52;
  if (((*(_QWORD *)(v20 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
    v29 = v50;
LABEL_15:
    swift_bridgeObjectRelease();
    v41 = v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43 = v46;
    outlined init with copy of MediaUserStateCenter?(v29, v46, &demangling cache variable for type metadata for VideoCategory?);
    v59 = *v41;
    *v41 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v43, v27, isUniquelyReferenced_nonNull_native);
    *v41 = v59;
    swift_bridgeObjectRelease();
    outlined init with take of PommesSearchReason?(v29, v48, &demangling cache variable for type metadata for VideoCategory?);
    return 1;
  }
  v49 = v9;
  v53 = ~v26;
  v54 = *(_QWORD *)(v11 + 72);
  v55 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v23;
  v29 = v50;
  while (1)
  {
    v30 = v20;
    v31 = v54 * v27;
    v32 = *(_QWORD *)(v20 + 48) + v54 * v27;
    v33 = v58;
    outlined init with copy of MediaUserStateCenter?(v32, v58, &demangling cache variable for type metadata for VideoCategory?);
    v34 = (uint64_t)&v5[*(int *)(v57 + 48)];
    outlined init with copy of MediaUserStateCenter?(v33, (uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
    outlined init with copy of MediaUserStateCenter?(v29, v34, &demangling cache variable for type metadata for VideoCategory?);
    v35 = v55;
    if (v55((uint64_t)v5, 1, v6) == 1)
      break;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, v28, &demangling cache variable for type metadata for VideoCategory?);
    if (v35(v34, 1, v6) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v28, v6);
      goto LABEL_7;
    }
    v36 = v51;
    v37 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v49, v34, v6);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AB0]);
    v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    v39 = *(void (**)(char *, uint64_t))(v36 + 8);
    v40 = v37;
    v28 = (uint64_t)v52;
    v39(v40, v6);
    v39((char *)v28, v6);
    v29 = v50;
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
    outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for VideoCategory?);
    if ((v38 & 1) != 0)
      goto LABEL_17;
LABEL_8:
    v27 = (v27 + 1) & v53;
    v20 = v30;
    if (((*(_QWORD *)(v56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
      goto LABEL_15;
  }
  if (v35(v34, 1, v6) != 1)
  {
LABEL_7:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
    outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for VideoCategory?);
    goto LABEL_8;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
  outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for VideoCategory?);
LABEL_17:
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for VideoCategory?);
  outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(*v47 + 48) + v31, v48, &demangling cache variable for type metadata for VideoCategory?);
  return 0;
}

{
  uint64_t *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  unsigned int v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t *v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v48 = a1;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
  MEMORY[0x1E0C80A78](v57);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StringSearchScope();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v52 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v58 = (uint64_t)&v45 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v46 = (uint64_t)&v45 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v45 - v18;
  v47 = v2;
  v20 = *v2;
  Hasher.init(_seed:)();
  v50 = a2;
  v21 = a2;
  v22 = v7;
  outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v19, &demangling cache variable for type metadata for StringSearchScope?);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v24 = v23(v19, 1, v6);
  v51 = v22;
  if (v24 == 1)
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v9, v19, v6);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C911F8]);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v6);
  }
  v25 = Hasher._finalize()();
  v26 = -1 << *(_BYTE *)(v20 + 32);
  v27 = v25 & ~v26;
  v56 = v20 + 56;
  v28 = (uint64_t)v52;
  if (((*(_QWORD *)(v20 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
    v29 = v50;
LABEL_15:
    swift_bridgeObjectRelease();
    v41 = v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43 = v46;
    outlined init with copy of MediaUserStateCenter?(v29, v46, &demangling cache variable for type metadata for StringSearchScope?);
    v59 = *v41;
    *v41 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v43, v27, isUniquelyReferenced_nonNull_native);
    *v41 = v59;
    swift_bridgeObjectRelease();
    outlined init with take of PommesSearchReason?(v29, v48, &demangling cache variable for type metadata for StringSearchScope?);
    return 1;
  }
  v49 = v9;
  v53 = ~v26;
  v54 = *(_QWORD *)(v11 + 72);
  v55 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v23;
  v29 = v50;
  while (1)
  {
    v30 = v20;
    v31 = v54 * v27;
    v32 = *(_QWORD *)(v20 + 48) + v54 * v27;
    v33 = v58;
    outlined init with copy of MediaUserStateCenter?(v32, v58, &demangling cache variable for type metadata for StringSearchScope?);
    v34 = (uint64_t)&v5[*(int *)(v57 + 48)];
    outlined init with copy of MediaUserStateCenter?(v33, (uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
    outlined init with copy of MediaUserStateCenter?(v29, v34, &demangling cache variable for type metadata for StringSearchScope?);
    v35 = v55;
    if (v55((uint64_t)v5, 1, v6) == 1)
      break;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, v28, &demangling cache variable for type metadata for StringSearchScope?);
    if (v35(v34, 1, v6) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v28, v6);
      goto LABEL_7;
    }
    v36 = v51;
    v37 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v49, v34, v6);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C91200]);
    v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    v39 = *(void (**)(char *, uint64_t))(v36 + 8);
    v40 = v37;
    v28 = (uint64_t)v52;
    v39(v40, v6);
    v39((char *)v28, v6);
    v29 = v50;
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
    outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for StringSearchScope?);
    if ((v38 & 1) != 0)
      goto LABEL_17;
LABEL_8:
    v27 = (v27 + 1) & v53;
    v20 = v30;
    if (((*(_QWORD *)(v56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
      goto LABEL_15;
  }
  if (v35(v34, 1, v6) != 1)
  {
LABEL_7:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
    outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for StringSearchScope?);
    goto LABEL_8;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
  outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_17:
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for StringSearchScope?);
  outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(*v47 + 48) + v31, v48, &demangling cache variable for type metadata for StringSearchScope?);
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  _QWORD *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for LNSystemProtocol();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v28 = (_QWORD *)v22;
    if (*(_QWORD *)(v22 + 24) <= *(_QWORD *)(v22 + 16))
    {
      v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      v23 = v28;
    }
    else
    {
      v23 = (_QWORD *)v22;
      v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *v3 = (uint64_t)v23;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for LNSystemProtocol();
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v20 = v16;
    if (*(_QWORD *)(v16 + 24) <= *(_QWORD *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v17 = v20;
    }
    else
    {
      v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  swift_bridgeObjectRetain();
  v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v11 = -1 << *(_BYTE *)(v6 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v2;
    *v2 = 0x8000000000000000;
    v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v13 = ~v11;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E20]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for LNSystemProtocol();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      v3 = MEMORY[0x1E0C95E18];
      do
      {
        swift_dynamicCast();
        v2 = v15;
        if (*(_QWORD *)(v15 + 24) <= *(_QWORD *)(v15 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v15;
        }
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], v3);
        result = dispatch thunk of Hashable._rawHashValue(seed:)();
        v5 = v2 + 56;
        v6 = -1 << *(_BYTE *)(v2 + 32);
        v7 = result & ~v6;
        v8 = v7 >> 6;
        if (((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          v9 = __clz(__rbit64((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v10 = 0;
          v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v12 = v8 == v11;
            if (v8 == v11)
              v8 = 0;
            v10 |= v12;
            v13 = *(_QWORD *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(_QWORD *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9) = v14;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<CommonAudio.Attribute>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1C248E4F8);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Modifier>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
      Hasher.init(_seed:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t matched;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v33 = *(_QWORD *)(matched - 8);
  v34 = matched;
  MEMORY[0x1E0C80A78](matched);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AudioTypeFeaturiser.ExactMatchKey>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v32 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v30 = v0;
    v31 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31)
          goto LABEL_33;
        v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v31)
            goto LABEL_33;
          v19 = v32[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v31)
              goto LABEL_33;
            v19 = v32[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                v1 = v30;
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 > 63)
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v31)
                    goto LABEL_33;
                  v19 = v32[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(v33 + 72);
      outlined init with take of PerformanceUtil.Ticket(*(_QWORD *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      Hasher.init(_seed:)();
      type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
      dispatch thunk of Hashable.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = outlined init with take of PerformanceUtil.Ticket((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v21, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v26 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v25 = (unint64_t)(v4 + 63) >> 6;
    v7 = v2 + 56;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v12 = v11 | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25)
          goto LABEL_33;
        v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          v9 = v13 + 1;
          if (v13 + 1 >= v25)
            goto LABEL_33;
          v14 = v26[v9];
          if (!v14)
          {
            v9 = v13 + 2;
            if (v13 + 2 >= v25)
              goto LABEL_33;
            v14 = v26[v9];
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                v24 = 1 << *(_BYTE *)(v1 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v9 >= v25)
                    goto LABEL_33;
                  v14 = v26[v9];
                  ++v15;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v9 = v15;
            }
          }
        }
LABEL_23:
        v6 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      type metadata accessor for AnyCancellable();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v17 = -1 << *(_BYTE *)(v3 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v1 = v0;
  v2 = type metadata accessor for VideoCategory();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v45 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v46 = (char *)&v44 - v10;
  v11 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<VideoCategory?>);
  v12 = static _SetStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v50 = v2;
    v51 = v3;
    v44 = v0;
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v48 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v47 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    v21 = (uint64_t)v46;
    v49 = v11;
    v23 = v50;
    v22 = v51;
    while (1)
    {
      if (v17)
      {
        v25 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v52 = v20;
        v26 = v25 | (v20 << 6);
      }
      else
      {
        v27 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v27 >= v47)
          goto LABEL_36;
        v28 = v48[v27];
        v29 = v20 + 1;
        if (!v28)
        {
          v29 = v20 + 2;
          if (v20 + 2 >= v47)
            goto LABEL_36;
          v28 = v48[v29];
          if (!v28)
          {
            v29 = v20 + 3;
            if (v20 + 3 >= v47)
              goto LABEL_36;
            v28 = v48[v29];
            if (!v28)
            {
              v30 = v20 + 4;
              if (v20 + 4 >= v47)
              {
LABEL_36:
                swift_release();
                v1 = v44;
                v43 = 1 << *(_BYTE *)(v11 + 32);
                if (v43 > 63)
                  bzero(v48, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v48 = -1 << v43;
                *(_QWORD *)(v11 + 16) = 0;
                break;
              }
              v28 = v48[v30];
              if (!v28)
              {
                while (1)
                {
                  v29 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_42;
                  if (v29 >= v47)
                    goto LABEL_36;
                  v28 = v48[v29];
                  ++v30;
                  if (v28)
                    goto LABEL_23;
                }
              }
              v29 = v20 + 4;
            }
          }
        }
LABEL_23:
        v17 = (v28 - 1) & v28;
        v52 = v29;
        v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      v31 = *(_QWORD *)(v11 + 48);
      v32 = *(_QWORD *)(v6 + 72);
      outlined init with take of PommesSearchReason?(v31 + v32 * v26, v21, &demangling cache variable for type metadata for VideoCategory?);
      Hasher.init(_seed:)();
      outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v9, &demangling cache variable for type metadata for VideoCategory?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v23) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v33 = v6;
        v34 = v45;
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v45, v9, v23);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AA8]);
        dispatch thunk of Hashable.hash(into:)();
        v35 = v34;
        v6 = v33;
        v21 = (uint64_t)v46;
        (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v23);
      }
      result = Hasher._finalize()();
      v36 = -1 << *(_BYTE *)(v13 + 32);
      v37 = result & ~v36;
      v38 = v37 >> 6;
      if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
      {
        v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v39 = 0;
        v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v41 = v38 == v40;
          if (v38 == v40)
            v38 = 0;
          v39 |= v41;
          v42 = *(_QWORD *)(v18 + 8 * v38);
        }
        while (v42 == -1);
        v24 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(_QWORD *)(v18 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      result = outlined init with take of PommesSearchReason?(v21, *(_QWORD *)(v13 + 48) + v24 * v32, &demangling cache variable for type metadata for VideoCategory?);
      ++*(_QWORD *)(v13 + 16);
      v11 = v49;
      v20 = v52;
    }
  }
  result = swift_release();
  *v1 = v13;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v1 = v0;
  v2 = type metadata accessor for StringSearchScope();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v45 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v46 = (char *)&v44 - v10;
  v11 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StringSearchScope?>);
  v12 = static _SetStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v50 = v2;
    v51 = v3;
    v44 = v0;
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v48 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v47 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    v21 = (uint64_t)v46;
    v49 = v11;
    v23 = v50;
    v22 = v51;
    while (1)
    {
      if (v17)
      {
        v25 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v52 = v20;
        v26 = v25 | (v20 << 6);
      }
      else
      {
        v27 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v27 >= v47)
          goto LABEL_36;
        v28 = v48[v27];
        v29 = v20 + 1;
        if (!v28)
        {
          v29 = v20 + 2;
          if (v20 + 2 >= v47)
            goto LABEL_36;
          v28 = v48[v29];
          if (!v28)
          {
            v29 = v20 + 3;
            if (v20 + 3 >= v47)
              goto LABEL_36;
            v28 = v48[v29];
            if (!v28)
            {
              v30 = v20 + 4;
              if (v20 + 4 >= v47)
              {
LABEL_36:
                swift_release();
                v1 = v44;
                v43 = 1 << *(_BYTE *)(v11 + 32);
                if (v43 > 63)
                  bzero(v48, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v48 = -1 << v43;
                *(_QWORD *)(v11 + 16) = 0;
                break;
              }
              v28 = v48[v30];
              if (!v28)
              {
                while (1)
                {
                  v29 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_42;
                  if (v29 >= v47)
                    goto LABEL_36;
                  v28 = v48[v29];
                  ++v30;
                  if (v28)
                    goto LABEL_23;
                }
              }
              v29 = v20 + 4;
            }
          }
        }
LABEL_23:
        v17 = (v28 - 1) & v28;
        v52 = v29;
        v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      v31 = *(_QWORD *)(v11 + 48);
      v32 = *(_QWORD *)(v6 + 72);
      outlined init with take of PommesSearchReason?(v31 + v32 * v26, v21, &demangling cache variable for type metadata for StringSearchScope?);
      Hasher.init(_seed:)();
      outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v9, &demangling cache variable for type metadata for StringSearchScope?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v23) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v33 = v6;
        v34 = v45;
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v45, v9, v23);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C911F8]);
        dispatch thunk of Hashable.hash(into:)();
        v35 = v34;
        v6 = v33;
        v21 = (uint64_t)v46;
        (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v23);
      }
      result = Hasher._finalize()();
      v36 = -1 << *(_BYTE *)(v13 + 32);
      v37 = result & ~v36;
      v38 = v37 >> 6;
      if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
      {
        v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v39 = 0;
        v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v41 = v38 == v40;
          if (v38 == v40)
            v38 = 0;
          v39 |= v41;
          v42 = *(_QWORD *)(v18 + 8 * v38);
        }
        while (v42 == -1);
        v24 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(_QWORD *)(v18 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      result = outlined init with take of PommesSearchReason?(v21, *(_QWORD *)(v13 + 48) + v24 * v32, &demangling cache variable for type metadata for StringSearchScope?);
      ++*(_QWORD *)(v13 + 16);
      v11 = v49;
      v20 = v52;
    }
  }
  result = swift_release();
  *v1 = v13;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_10;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v8 = *v3;
    Hasher.init(_seed:)();
    CommonAudio.Attribute.rawValue.getter(v5);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1C2490290);
  }
  *(_QWORD *)(v9 + 16) = v12;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t matched;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a1;
  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v6 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*v3 + 16);
  v10 = *(_QWORD *)(*v3 + 24);
  v24 = v6;
  v25 = v3;
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
  v12 = v28;
  dispatch thunk of Hashable.hash(into:)();
  v13 = v12 + *(int *)(matched + 20);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
  v26 = v13;
  dispatch thunk of Hashable.hash(into:)();
  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v11 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      outlined init with copy of PommesSearchRequest(*(_QWORD *)(v11 + 48) + v17 * a2, (uint64_t)v8, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5C0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v30 == v29)
      {
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9E0]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        if (v30 == v29)
          break;
      }
      outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v8);
      a2 = (a2 + 1) & v16;
      if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_14;
    }
    outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v8);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_14:
  v18 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of PerformanceUtil.Ticket(v28, *(_QWORD *)(v18 + 48) + *(_QWORD *)(v24 + 72) * a2, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v22;
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;

  v49 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for VideoCategory();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  v41 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v43 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v38 - v16;
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v38 - v19;
  v21 = *(_QWORD *)(*v3 + 16);
  v22 = *(_QWORD *)(*v3 + 24);
  v39 = v3;
  if (v22 <= v21 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v38 = v18;
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v22 > v21)
      {
        specialized _NativeSet.copy()(&demangling cache variable for type metadata for VideoCategory?, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<VideoCategory?>);
        goto LABEL_21;
      }
      v38 = v18;
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v48 = *v3;
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?(v49, (uint64_t)v20, &demangling cache variable for type metadata for VideoCategory?);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    if (v47(v20, 1, v9) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v23 = v42;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v42, v20, v9);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AA8]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
    }
    v24 = (uint64_t)v43;
    v25 = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v48 + 32);
    a2 = v25 & ~v26;
    v46 = v48 + 56;
    if (((*(_QWORD *)(v48 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v45 = ~v26;
      v44 = *(_QWORD *)(v41 + 72);
      v40 = v17;
      do
      {
        outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v48 + 48) + v44 * a2, (uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
        v31 = (uint64_t)&v8[*(int *)(v6 + 48)];
        outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v8, &demangling cache variable for type metadata for VideoCategory?);
        outlined init with copy of MediaUserStateCenter?(v49, v31, &demangling cache variable for type metadata for VideoCategory?);
        v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v47;
        if (v47(v8, 1, v9) == 1)
        {
          if (v32(v31, 1, v9) == 1)
            goto LABEL_24;
        }
        else
        {
          outlined init with copy of MediaUserStateCenter?((uint64_t)v8, v24, &demangling cache variable for type metadata for VideoCategory?);
          if (v32(v31, 1, v9) != 1)
          {
            v27 = v42;
            (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v42, v31, v9);
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AB0]);
            v28 = dispatch thunk of static Equatable.== infix(_:_:)();
            v29 = *(void (**)(char *, uint64_t))(v10 + 8);
            v30 = v27;
            v17 = v40;
            v29(v30, v9);
            v29(v43, v9);
            v24 = (uint64_t)v43;
            outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for VideoCategory?);
            outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
            if ((v28 & 1) != 0)
              goto LABEL_25;
            goto LABEL_14;
          }
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v24, v9);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
LABEL_14:
        a2 = (a2 + 1) & v45;
      }
      while (((*(_QWORD *)(v46 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  v33 = *v39;
  *(_QWORD *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of PommesSearchReason?(v49, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v41 + 72) * a2, &demangling cache variable for type metadata for VideoCategory?);
  v35 = *(_QWORD *)(v33 + 16);
  v36 = __OFADD__(v35, 1);
  v37 = v35 + 1;
  if (v36)
  {
    __break(1u);
LABEL_24:
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for VideoCategory?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for VideoCategory?);
LABEL_25:
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 16) = v37;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;

  v49 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StringSearchScope();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  v41 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v43 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v38 - v16;
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v38 - v19;
  v21 = *(_QWORD *)(*v3 + 16);
  v22 = *(_QWORD *)(*v3 + 24);
  v39 = v3;
  if (v22 <= v21 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v38 = v18;
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v22 > v21)
      {
        specialized _NativeSet.copy()(&demangling cache variable for type metadata for StringSearchScope?, &demangling cache variable for type metadata for _SetStorage<StringSearchScope?>);
        goto LABEL_21;
      }
      v38 = v18;
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v48 = *v3;
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?(v49, (uint64_t)v20, &demangling cache variable for type metadata for StringSearchScope?);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    if (v47(v20, 1, v9) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v23 = v42;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v42, v20, v9);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C911F8]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
    }
    v24 = (uint64_t)v43;
    v25 = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v48 + 32);
    a2 = v25 & ~v26;
    v46 = v48 + 56;
    if (((*(_QWORD *)(v48 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v45 = ~v26;
      v44 = *(_QWORD *)(v41 + 72);
      v40 = v17;
      do
      {
        outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v48 + 48) + v44 * a2, (uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
        v31 = (uint64_t)&v8[*(int *)(v6 + 48)];
        outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v8, &demangling cache variable for type metadata for StringSearchScope?);
        outlined init with copy of MediaUserStateCenter?(v49, v31, &demangling cache variable for type metadata for StringSearchScope?);
        v32 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v47;
        if (v47(v8, 1, v9) == 1)
        {
          if (v32(v31, 1, v9) == 1)
            goto LABEL_24;
        }
        else
        {
          outlined init with copy of MediaUserStateCenter?((uint64_t)v8, v24, &demangling cache variable for type metadata for StringSearchScope?);
          if (v32(v31, 1, v9) != 1)
          {
            v27 = v42;
            (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v42, v31, v9);
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C91200]);
            v28 = dispatch thunk of static Equatable.== infix(_:_:)();
            v29 = *(void (**)(char *, uint64_t))(v10 + 8);
            v30 = v27;
            v17 = v40;
            v29(v30, v9);
            v29(v43, v9);
            v24 = (uint64_t)v43;
            outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for StringSearchScope?);
            outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
            if ((v28 & 1) != 0)
              goto LABEL_25;
            goto LABEL_14;
          }
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v24, v9);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_14:
        a2 = (a2 + 1) & v45;
      }
      while (((*(_QWORD *)(v46 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  v33 = *v39;
  *(_QWORD *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = outlined init with take of PommesSearchReason?(v49, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v41 + 72) * a2, &demangling cache variable for type metadata for StringSearchScope?);
  v35 = *(_QWORD *)(v33 + 16);
  v36 = __OFADD__(v35, 1);
  v37 = v35 + 1;
  if (v36)
  {
    __break(1u);
LABEL_24:
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for StringSearchScope?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_25:
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 16) = v37;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for LNSystemProtocol();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E20]);
    do
    {
      result = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v11 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * a2) = v5;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    *(_QWORD *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<CommonAudio.Attribute>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Modifier>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t matched;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v3 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AudioTypeFeaturiser.ExactMatchKey>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    outlined init with copy of PommesSearchRequest(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
    result = (void *)outlined init with take of PerformanceUtil.Ticket((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)outlined init with take of PommesSearchReason?((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release();
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<CommonAudio.Attribute>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1C24925C8);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CommonAudio.Modifier>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t matched;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v32 = *(_QWORD *)(matched - 8);
  v33 = matched;
  MEMORY[0x1E0C80A78](matched);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AudioTypeFeaturiser.ExactMatchKey>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 56);
  v29 = v0;
  v30 = v5 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & v9;
  v31 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31)
      goto LABEL_33;
    v19 = *(_QWORD *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v31)
        goto LABEL_33;
      v19 = *(_QWORD *)(v30 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v31)
          goto LABEL_33;
        v19 = *(_QWORD *)(v30 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v32 + 72);
    outlined init with copy of PommesSearchRequest(*(_QWORD *)(v5 + 48) + v21 * v17, (uint64_t)v4, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
    Hasher.init(_seed:)();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    result = outlined init with take of PerformanceUtil.Ticket((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v21, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v29;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v30 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v31)
      goto LABEL_33;
    v19 = *(_QWORD *)(v30 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v24 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v25)
        goto LABEL_33;
      v14 = *(_QWORD *)(v24 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v25)
          goto LABEL_33;
        v14 = *(_QWORD *)(v24 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
    swift_retain();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v17 = -1 << *(_BYTE *)(v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
    ++*(_QWORD *)(v3 + 16);
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  int64_t i;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v1 = v0;
  v2 = type metadata accessor for VideoCategory();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v46 - v10;
  v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<VideoCategory?>);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v14;
    return result;
  }
  v46 = v0;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v48 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = v18;
  for (i = 0; ; i = v52)
  {
    if (v21)
    {
      v51 = (v21 - 1) & v21;
      v52 = i;
      v24 = __clz(__rbit64(v21)) | (i << 6);
      goto LABEL_24;
    }
    v25 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v25);
    v27 = i + 1;
    if (!v26)
    {
      v27 = i + 2;
      if (i + 2 >= v49)
        goto LABEL_36;
      v26 = *(_QWORD *)(v48 + 8 * v27);
      if (!v26)
      {
        v27 = i + 3;
        if (i + 3 >= v49)
          goto LABEL_36;
        v26 = *(_QWORD *)(v48 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v51 = (v26 - 1) & v26;
    v52 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v12 + 48);
    v50 = *(_QWORD *)(v6 + 72);
    outlined init with copy of MediaUserStateCenter?(v29 + v50 * v24, (uint64_t)v11, &demangling cache variable for type metadata for VideoCategory?);
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for VideoCategory?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v30 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v31 = v11;
      v32 = v14;
      v33 = v12;
      v34 = v6;
      v35 = v3;
      v36 = v47;
      v30(v47, v9, v2);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AA8]);
      dispatch thunk of Hashable.hash(into:)();
      v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      v38 = v36;
      v3 = v35;
      v6 = v34;
      v12 = v33;
      v14 = v32;
      v11 = v31;
      v37(v38, v2);
    }
    result = Hasher._finalize()();
    v39 = -1 << *(_BYTE *)(v14 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v41);
      }
      while (v45 == -1);
      v23 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = outlined init with take of PommesSearchReason?((uint64_t)v11, *(_QWORD *)(v14 + 48) + v23 * v50, &demangling cache variable for type metadata for VideoCategory?);
    ++*(_QWORD *)(v14 + 16);
    v21 = v51;
  }
  v28 = i + 4;
  if (i + 4 >= v49)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v46;
    goto LABEL_38;
  }
  v26 = *(_QWORD *)(v48 + 8 * v28);
  if (v26)
  {
    v27 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  int64_t i;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v1 = v0;
  v2 = type metadata accessor for StringSearchScope();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v47 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v46 - v10;
  v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<StringSearchScope?>);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v14;
    return result;
  }
  v46 = v0;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v48 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = v18;
  for (i = 0; ; i = v52)
  {
    if (v21)
    {
      v51 = (v21 - 1) & v21;
      v52 = i;
      v24 = __clz(__rbit64(v21)) | (i << 6);
      goto LABEL_24;
    }
    v25 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v25);
    v27 = i + 1;
    if (!v26)
    {
      v27 = i + 2;
      if (i + 2 >= v49)
        goto LABEL_36;
      v26 = *(_QWORD *)(v48 + 8 * v27);
      if (!v26)
      {
        v27 = i + 3;
        if (i + 3 >= v49)
          goto LABEL_36;
        v26 = *(_QWORD *)(v48 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v51 = (v26 - 1) & v26;
    v52 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v12 + 48);
    v50 = *(_QWORD *)(v6 + 72);
    outlined init with copy of MediaUserStateCenter?(v29 + v50 * v24, (uint64_t)v11, &demangling cache variable for type metadata for StringSearchScope?);
    Hasher.init(_seed:)();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for StringSearchScope?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v30 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v31 = v11;
      v32 = v14;
      v33 = v12;
      v34 = v6;
      v35 = v3;
      v36 = v47;
      v30(v47, v9, v2);
      Hasher._combine(_:)(1u);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C911F8]);
      dispatch thunk of Hashable.hash(into:)();
      v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      v38 = v36;
      v3 = v35;
      v6 = v34;
      v12 = v33;
      v14 = v32;
      v11 = v31;
      v37(v38, v2);
    }
    result = Hasher._finalize()();
    v39 = -1 << *(_BYTE *)(v14 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v19 + 8 * v41);
      }
      while (v45 == -1);
      v23 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = outlined init with take of PommesSearchReason?((uint64_t)v11, *(_QWORD *)(v14 + 48) + v23 * v50, &demangling cache variable for type metadata for StringSearchScope?);
    ++*(_QWORD *)(v14 + 16);
    v21 = v51;
  }
  v28 = i + 4;
  if (i + 4 >= v49)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v46;
    goto LABEL_38;
  }
  v26 = *(_QWORD *)(v48 + 8 * v28);
  if (v26)
  {
    v27 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v49)
      goto LABEL_36;
    v26 = *(_QWORD *)(v48 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t matched;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v3 = *(_QWORD *)(matched - 8);
  v4 = MEMORY[0x1E0C80A78](matched);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey, v10, (uint64_t)&protocol conformance descriptor for AudioTypeFeaturiser.ExactMatchKey);
  result = Set.init(minimumCapacity:)();
  v15 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    do
    {
      outlined init with copy of PommesSearchRequest(v12, (uint64_t)v6, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
      specialized Set._Variant.insert(_:)((uint64_t)v8, (uint64_t)v6);
      outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v8);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for LNSystemProtocol();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocol, MEMORY[0x1E0DEFCF8]);
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1C3BBF3F4](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(_QWORD))MEMORY[0x1E0D70038], MEMORY[0x1E0D6FF90]);
}

uint64_t partial apply for closure #2 in static AppIntentMetadataMapper.mapShowInAppStringSearchResults(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static AppIntentMetadataMapper.mapPlayVideo(_:)(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(_QWORD))MEMORY[0x1E0D6FFF0], MEMORY[0x1E0D6FF88]);
}

ValueMetadata *type metadata accessor for AppIntentMetadataMapper()
{
  return &type metadata for AppIntentMetadataMapper;
}

unint64_t static SearchProxy.defaultRRClient()@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  char v3;
  ValueMetadata *v4;
  unint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v3 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v3 & 1) != 0)
  {
    v4 = &type metadata for EmptyReferenceResolver;
    result = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    v4 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *a1 = ReferenceResolutionClient.__allocating_init()();
    result = MEMORY[0x1E0DA3CC8];
  }
  a1[3] = (uint64_t)v4;
  a1[4] = result;
  return result;
}

uint64_t SearchProxy.addGenerativeModelSupport(to:)()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t (*v10)(uint64_t *, _QWORD);
  uint64_t v12;

  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  v0 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000024, 0x80000001C25041F0);
  MGGetBoolAnswer();
  swift_release();

  if (AFIsInternalInstall())
  {
    v1 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
    v2 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
    v3 = objc_msgSend(v1, sel_initWithSuiteName_, v2);

    if (v3)
    {
      v4 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000002CLL, 0x80000001C2507BA0);
      v5 = objc_msgSend(v3, sel_BOOLForKey_, v4);

      if (v5)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
        v7 = Logger.logObject.getter();
        v8 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v9 = 0;
          MEMORY[0x1C3BBFF64](v9, -1, -1);
        }

      }
    }
  }
  v10 = (uint64_t (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.modify();
  Apple_Parsec_Search_PegasusQueryContext.isGenerativeModelDevice.setter();
  return v10(&v12, 0);
}

uint64_t SearchProxy.appendClientEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint8_t *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t *, _QWORD);
  void (*v32)(uint64_t *, _QWORD);
  void (*v33)(char *, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint8_t *v39;
  os_log_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char v44[32];
  uint64_t v45[4];
  uint64_t v46[5];

  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v43 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a3, a2, v9);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    v38 = v12;
    v40 = v11;
    v13 = (uint8_t *)swift_slowAlloc();
    v37 = swift_slowAlloc();
    v46[0] = v37;
    v39 = v13;
    *(_DWORD *)v13 = 136315138;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = MEMORY[0x1E0DEE9D8];
    if (v14)
    {
      v35 = a3;
      v45[0] = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      v16 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      v36 = a1;
      v17 = a1 + v16;
      v18 = *(_QWORD *)(v43 + 72);
      v41 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
      v42 = v18;
      do
      {
        v41(v8, v17, v6);
        v19 = Apple_Parsec_Siri_Context_ClientEntity.summarizedDescription.getter();
        v21 = v20;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v6);
        v15 = v45[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
          v15 = v45[0];
        }
        v23 = *(_QWORD *)(v15 + 16);
        v22 = *(_QWORD *)(v15 + 24);
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          v15 = v45[0];
        }
        *(_QWORD *)(v15 + 16) = v23 + 1;
        v24 = v15 + 16 * v23;
        *(_QWORD *)(v24 + 32) = v19;
        *(_QWORD *)(v24 + 40) = v21;
        v17 += v42;
        --v14;
      }
      while (v14);
      a1 = v36;
    }
    v25 = v39;
    v45[0] = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v26 = BidirectionalCollection<>.joined(separator:)();
    v28 = v27;
    swift_bridgeObjectRelease();
    v45[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v29 = v40;
    _os_log_impl(&dword_1C2356000, v40, (os_log_type_t)v38, "Adding client entities to request: [%s]", v25, 0xCu);
    v30 = v37;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v30, -1, -1);
    MEMORY[0x1C3BBFF64](v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  v31 = (uint64_t (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
  v32 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_Context_ClientConversationContextInfo.onDeviceContext.modify();
  v33 = (void (*)(char *, _QWORD))Apple_Parsec_Siri_Context_OnDeviceContext.entities.modify();
  specialized Array.append<A>(contentsOf:)(a1);
  v33(v44, 0);
  v32(v45, 0);
  return v31(v46, 0);
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.summarizedDescription.getter()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v39 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntityAlignment();
  v36 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v1 = (char *)&v35 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntitySource();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntityType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = 0;
  v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(107);
  v10._countAndFlagsBits = 0x7974202020200A7BLL;
  v10._object = (void *)0xEC000000203A6570;
  String.append(_:)(v10);
  Apple_Parsec_Siri_Context_ClientEntity.type.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v11._countAndFlagsBits = 0x756F73202020200ALL;
  v11._object = (void *)0xED0000203A656372;
  String.append(_:)(v11);
  Apple_Parsec_Siri_Context_ClientEntity.source.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12._object = (void *)0xEC000000203A6572;
  v12._countAndFlagsBits = 0x6F6373202020200ALL;
  String.append(_:)(v12);
  Apple_Parsec_Siri_Context_ClientEntity.score.getter();
  Double.write<A>(to:)();
  v13._object = (void *)0x80000001C2507BD0;
  v13._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v13);
  v14._countAndFlagsBits = Apple_Parsec_Siri_Context_ClientEntity.ontologyLabel.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000025;
  v15._object = (void *)0x80000001C2507BF0;
  String.append(_:)(v15);
  v16 = MEMORY[0x1C3BBB68C]();
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v18 = v36;
    v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v35 = v16;
    v20 = v16 + v19;
    v21 = *(_QWORD *)(v36 + 72);
    v37 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v36 + 16);
    v38 = v21;
    v22 = v36;
    do
    {
      v23 = v39;
      v24 = v37(v1, v20, v39);
      v25 = MEMORY[0x1C3BBC190](v24);
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v1, v23);
      v28 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v40;
      }
      v30 = *(_QWORD *)(v28 + 16);
      v29 = *(_QWORD *)(v28 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v28 = v40;
      }
      *(_QWORD *)(v28 + 16) = v30 + 1;
      v31 = v28 + 16 * v30;
      *(_QWORD *)(v31 + 32) = v25;
      *(_QWORD *)(v31 + 40) = v27;
      v20 += v38;
      --v17;
      v18 = v22;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = MEMORY[0x1E0DEE9D8];
  }
  v32._countAndFlagsBits = MEMORY[0x1C3BBEE9C](v28, MEMORY[0x1E0DEA968]);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 32010;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  return v41;
}

void SearchProxy.addMAFStateFlags(to:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  int IsNavigating;
  void (*v3)(uint64_t *, _QWORD);
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  void (*v12)(uint64_t *, _QWORD);
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19[4];

  objc_msgSend(*(id *)(a2 + 104), sel_currentNavigationState);
  IsNavigating = AFNavigationStateIsNavigating();
  v3 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isNavigationMode.setter();
  v3(v19, 0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v19[0] = v8;
    *(_DWORD *)v7 = 136315138;
    if (IsNavigating)
      v9 = 1702195828;
    else
      v9 = 0x65736C6166;
    if (IsNavigating)
      v10 = 0xE400000000000000;
    else
      v10 = 0xE500000000000000;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v5, v6, "Navigation mode: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v8, -1, -1);
    MEMORY[0x1C3BBFF64](v7, -1, -1);
  }

  v11 = AFDeviceSupportsSystemAssistantExperience();
  v12 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isSaeRequest.setter();
  v12(v19, 0);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v19[0] = v16;
    *(_DWORD *)v15 = 136315138;
    if (v11)
      v17 = 1702195828;
    else
      v17 = 0x65736C6166;
    if (v11)
      v18 = 0xE400000000000000;
    else
      v18 = 0xE500000000000000;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v13, v14, "SAE request: %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v16, -1, -1);
    MEMORY[0x1C3BBFF64](v15, -1, -1);
  }

}

uint64_t SearchProxy.addCompanionDevices(to:dataProviderManager:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 472))();
}

uint64_t SearchProxy.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SearchProxy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SearchProxy.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SearchProxy.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for SearchProxy()
{
  return objc_opt_self();
}

uint64_t method lookup function for SearchProxy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SearchProxy.addGenerativeModelSupport(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of SearchProxy.appendClientEntities(_:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SearchProxy.addMAFStateFlags(to:dataProviderManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SearchProxy.addCompanionDevices(to:dataProviderManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SearchProxy.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t Siri_Nlu_External_UserParse.firstCallTask()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  uint64_t v21;
  _QWORD v22[4];

  v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v22[0] = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v8 = *(_QWORD *)(v2 + 72);
    v18 = v5;
    v19 = v8;
    v9 = v2;
    v10 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    while (1)
    {
      v10(v4, v7, v1);
      v11 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v0)
        break;
      v12 = v11;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
      specialized Array.append<A>(contentsOf:)(v12);
      v7 += v19;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        v13 = v22[0];
        goto LABEL_7;
      }
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    if (v13 >> 62)
      goto LABEL_18;
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter())
    {
      v15 = 0;
      while (1)
      {
        v16 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        v9 = *(_QWORD *)(v13 + 8 * v15 + 32);
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        outlined init with copy of Any?((uint64_t)v22, (uint64_t)v20);
        if (v21)
        {
          type metadata accessor for UsoTask_call_common_PhoneCall();
          if (swift_dynamicCast())
          {
            swift_release();
            outlined destroy of Any?((uint64_t)v22);
            swift_bridgeObjectRelease_n();
            return v9;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)v20);
        }
        outlined destroy of Any?((uint64_t)v22);
        swift_release();
        ++v15;
        if (v16 == v14)
          goto LABEL_19;
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  return v9;
}

BOOL UsoTask.isCallTask.getter()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;
  _BYTE v6[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with take of Any?((uint64_t)v6, (uint64_t)v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)v4);
    goto LABEL_5;
  }
  type metadata accessor for UsoTask_call_common_PhoneCall();
  if (!swift_dynamicCast())
  {
LABEL_5:
    v0 = 0;
    goto LABEL_6;
  }
  v0 = v3;
LABEL_6:
  v1 = v0 != 0;
  swift_release();
  return v1;
}

uint64_t NSDictionary.arrayValue<A>(for:)()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[2];
  _QWORD v8[4];

  v1 = (void *)MEMORY[0x1C3BBEC44]();
  v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (!v8[3])
  {
    outlined destroy of Any?((uint64_t)v8);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  v3 = swift_dynamicCast();
  if ((v3 & 1) == 0)
    return 0;
  v8[0] = v6;
  MEMORY[0x1E0C80A78](v3);
  lazy protocol witness table accessor for type [Any] and conformance [A]();
  v4 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v4;
}

Swift::String_optional __swiftcall NSDictionary.stringValue(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  id v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  Swift::String_optional result;
  uint64_t v9;
  void *v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v2 = (void *)MEMORY[0x1C3BBEC44](a1._countAndFlagsBits, a1._object);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  outlined init with take of Any?((uint64_t)v11, (uint64_t)v12);
  if (v13)
  {
    v4 = swift_dynamicCast();
    v5 = v4 == 0;
    if (v4)
      v6 = v9;
    else
      v6 = 0;
    if (v5)
      v7 = 0;
    else
      v7 = v10;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v12);
    v6 = 0;
    v7 = 0;
  }
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::Bool_optional __swiftcall NSDictionary.BOOLeanValue(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  id v3;
  Swift::Bool_optional v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v2 = (void *)MEMORY[0x1C3BBEC44](a1._countAndFlagsBits, a1._object);
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of Any?((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast())
      return v5;
    else
      return (Swift::Bool_optional)2;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
    return (Swift::Bool_optional)2;
  }
}

uint64_t closure #1 in NSDictionary.arrayValue<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;

  outlined init with copy of Any(a1, (uint64_t)&v7);
  v5 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v5 ^ 1u, 1, a2);
}

uint64_t partial apply for closure #1 in NSDictionary.arrayValue<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in NSDictionary.arrayValue<A>(for:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [Any] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Any] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Any] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Any]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Any] and conformance [A]);
  }
  return result;
}

uint64_t EntityNameFeaturiser.__allocating_init(query:localizedTokenizer:)(uint64_t a1, void *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  EntityNameFeaturiser.init(query:localizedTokenizer:)(a1, a2);
  return v4;
}

uint64_t EntityNameFeaturiser.name.getter()
{
  type metadata accessor for EntityNameFeaturiser();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityNameFeaturiser.Type);
  return String.init<A>(describing:)();
}

uint64_t one-time initialization function for textMatchOverride()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);
  uint64_t v7;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FE390;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E0D6E970], v0);
  v6(v5 + v2, *MEMORY[0x1E0D6E928], v0);
  v6(v5 + 2 * v2, *MEMORY[0x1E0D6E950], v0);
  v6(v5 + 3 * v2, *MEMORY[0x1E0D6E998], v0);
  v6(v5 + 4 * v2, *MEMORY[0x1E0D6E920], v0);
  v6(v5 + 5 * v2, *MEMORY[0x1E0D6E9A8], v0);
  v6(v5 + 6 * v2, *MEMORY[0x1E0D6E988], v0);
  v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  result = swift_deallocClassInstance();
  static EntityNameFeaturiser.textMatchOverride = v7;
  return result;
}

uint64_t EntityNameFeaturiser.init(query:localizedTokenizer:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  Class isa;
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  id v40[4];
  uint64_t v41[2];

  v3 = v2;
  v41[1] = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for Locale();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D42BF0]), sel_init);
  *(_QWORD *)(v3 + 48) = 0x3F8000003ECCCCCDLL;
  *(_DWORD *)(v3 + 56) = 0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  v11 = a2;
  swift_retain_n();
  v12 = v11;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    v16 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    v41[0] = v38;
    *(_DWORD *)v16 = 136315394;
    v39 = a1;
    v17 = objc_msgSend(v12, sel_locale);
    v37 = v15;
    v18 = v17;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = Locale.identifier.getter();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v40[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v40[0] = *(id *)(v39 + 16);
    v40[1] = closure #1 in implicit closure #2 in EntityNameFeaturiser.init(query:localizedTokenizer:);
    v40[2] = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String>);
    lazy protocol witness table accessor for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>();
    v22 = BidirectionalCollection<>.joined(separator:)();
    v24 = v23;
    swift_bridgeObjectRelease();
    v40[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v13, (os_log_type_t)v37, "EntityNameFeaturiser : tokenizerLocale=%s, queryFields=[%s]", (uint8_t *)v16, 0x16u);
    v25 = v38;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v25, -1, -1);
    MEMORY[0x1C3BBFF64](v16, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *(_QWORD *)(v3 + 16) = v12;
  v26 = v12;
  v27 = swift_bridgeObjectRetain();
  v28 = specialized Sequence.compactMap<A>(_:)(v27, v26);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 24) = v28;
  v29 = (void *)objc_opt_self();
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v40[0] = 0;
  v31 = objc_msgSend(v29, sel_itemMatcher_tokenizer_error_, isa, v26, v40);

  v32 = v40[0];
  if (v31)
  {
    swift_release();

  }
  else
  {
    v33 = v32;
    v34 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();

    v31 = 0;
  }
  *(_QWORD *)(v3 + 40) = v31;
  return v3;
}

uint64_t closure #1 in implicit closure #2 in EntityNameFeaturiser.init(query:localizedTokenizer:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.description.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  _QWORD v15[2];

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v4._countAndFlagsBits = 0x7079546D6574697BLL;
  v4._object = (void *)0xEA00000000003D65;
  String.append(_:)(v4);
  MEMORY[0x1C3BBBB48]();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v5._countAndFlagsBits = 0x537972657571202CLL;
  v5._object = (void *)0xEC000000223D7274;
  String.append(_:)(v5);
  v6._countAndFlagsBits = MEMORY[0x1C3BBBB60]();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x696B6E6172202C22;
  v7._object = (void *)0xEF3D796C6E4F676ELL;
  String.append(_:)(v7);
  v8 = Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.getter();
  v9 = (v8 & 1) == 0;
  if ((v8 & 1) != 0)
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (v9)
    v11 = 0xE500000000000000;
  else
    v11 = 0xE400000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 125;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v15[0];
}

void closure #1 in EntityNameFeaturiser.generateItems(from:identifier:)(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, void *, uint64_t);
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  id v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  id v77;
  void *v78;
  _QWORD *v79;
  _BYTE v80[12];
  int v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  void (*v92)(char *, void *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  id v96[2];

  v85 = a3;
  v86 = a4;
  v89 = a2;
  v96[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v8 = MEMORY[0x1E0C80A78](v7);
  v88 = &v80[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v8);
  v87 = &v80[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = &v80[-v13];
  v15 = MEMORY[0x1E0C80A78](v12);
  v90 = &v80[-v16];
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = &v80[-v18];
  v93 = v17;
  v20 = *(int *)(v17 + 64);
  v21 = &v80[v20 - v18];
  v22 = (char *)a1 + v20;
  v23 = a1[1];
  *v19 = *a1;
  v19[1] = v23;
  v24 = a1[2];
  v25 = a1[3];
  v19[2] = v24;
  v19[3] = v25;
  v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(char *, void *, uint64_t))(v27 + 16);
  v91 = v22;
  v92 = v28;
  v28(v21, v22, v26);
  if (!v25)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v26);
LABEL_11:
    v43 = 0;
    goto LABEL_12;
  }
  v29 = *(void (**)(char *, uint64_t))(v27 + 8);
  swift_bridgeObjectRetain();
  v29(v21, v26);
  v30 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v30 = v24 & 0xFFFFFFFFFFFFLL;
  if (!v30)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v83 = v24;
  v84 = a5;
  v31 = v90;
  v32 = (void *)v89[4];
  v33 = (char *)v90 + *(int *)(v93 + 64);
  v34 = v29;
  v35 = *a1;
  v36 = a1[1];
  *v90 = *a1;
  v31[1] = v36;
  *((_OWORD *)v31 + 1) = *((_OWORD *)a1 + 1);
  v92(v33, v91, v26);
  swift_bridgeObjectRetain();
  v37 = (void *)MEMORY[0x1C3BBEC44](v35, v36);
  swift_bridgeObjectRelease();
  v82 = v34;
  v34(v33, v26);
  v96[0] = 0;
  v38 = objc_msgSend(v32, sel_setItemType_itemId_error_, 5, v37, v96);

  v39 = v96[0];
  if (!v38)
  {
    v46 = v39;
    v47 = (_QWORD *)_convertNSErrorToError(_:)();

LABEL_15:
    v89 = v47;
    swift_willThrow();
    v45 = v93;
    goto LABEL_16;
  }
  v40 = (void *)MEMORY[0x1C3BBEC44](v83, v25);
  v96[0] = 0;
  v41 = objc_msgSend(v38, sel_addFieldWithType_value_error_, 228, v40, v96);

  v42 = v96[0];
  if (!v41)
  {
    v48 = v42;
    v47 = (_QWORD *)_convertNSErrorToError(_:)();

    goto LABEL_15;
  }
  v96[0] = 0;
  v43 = objc_msgSend(v41, sel_buildItemWithError_, v96);

  v44 = v96[0];
  a5 = v84;
  v45 = v93;
  if (v43)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v78 = v44;
  v79 = (_QWORD *)_convertNSErrorToError(_:)();

  v89 = v79;
  swift_willThrow();
LABEL_16:
  v94 = 0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
  v50 = (char *)v14 + *(int *)(v45 + 64);
  v51 = a1[1];
  *v14 = *a1;
  v14[1] = v51;
  v52 = a1[2];
  v53 = a1[3];
  v14[2] = v52;
  v14[3] = v53;
  v92(v50, v91, v26);
  v54 = v87;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v87, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v55 = (uint64_t)v14;
  v56 = v88;
  outlined init with take of PommesSearchReason?(v55, (uint64_t)v88, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v57 = v86;
  swift_bridgeObjectRetain();
  v58 = v89;
  v59 = v89;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v89 = v58;
  v60 = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.error.getter();
  v63 = v62;
  if (os_log_type_enabled(v61, v62))
  {
    v64 = (uint64_t)v56;
    v65 = swift_slowAlloc();
    v91 = (void *)swift_slowAlloc();
    v96[0] = v91;
    *(_DWORD *)v65 = 136315906;
    v81 = v63;
    swift_bridgeObjectRetain();
    v95 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v57, (uint64_t *)v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v65 + 12) = 2080;
    swift_bridgeObjectRetain();
    v95 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v25, (uint64_t *)v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v65 + 22) = 2048;
    v66 = *(int *)(v93 + 64);
    v67 = v90;
    v68 = (char *)v90 + v66;
    v69 = *((_QWORD *)v54 + 1);
    *v90 = *(_QWORD *)v54;
    v67[1] = v69;
    *((_OWORD *)v67 + 1) = *((_OWORD *)v54 + 1);
    v92((char *)v67 + v66, &v54[v66], v26);
    v70 = v61;
    v71 = Apple_Parsec_Siri_V2alpha_AudioNoun.rawValue.getter();
    v82(v68, v26);
    outlined destroy of MediaUserStateCenter?((uint64_t)v54, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v95 = (_QWORD *)v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of MediaUserStateCenter?(v64, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    *(_WORD *)(v65 + 32) = 2080;
    v72 = v89;
    v95 = v89;
    v73 = v89;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v74 = String.init<A>(describing:)();
    v95 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v70, (os_log_type_t)v81, "EntityNameFeaturiser failed while building item %s \"%s\" %ld : %s", (uint8_t *)v65, 0x2Au);
    v76 = v91;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v76, -1, -1);
    MEMORY[0x1C3BBFF64](v65, -1, -1);

  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v54, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v77 = v89;

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    outlined destroy of MediaUserStateCenter?((uint64_t)v56, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));

  }
  v43 = 0;
  a5 = v84;
LABEL_12:
  *a5 = v43;
}

uint64_t EntityNameFeaturiser.add(match:multiFieldMatchWeight:with:_:to:)(void *a1, uint64_t a2, uint64_t a3, id *a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  id v37;
  void *v38;
  char *v39;
  unsigned int *v40;
  char *v41;
  float v42;
  float v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  char v49;
  void (*v50)(char *, uint64_t);
  float v51;
  float v52;
  id *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  char v57;
  float *v58;
  float v59;
  float v60;
  char isUniquelyReferenced_nonNull_native;
  char *v62;
  char *v63;
  uint64_t v64;
  id *v65;
  id v66;
  uint64_t v67;
  void *v68;
  id v69[2];

  v67 = a2;
  v69[1] = *(id *)MEMORY[0x1E0C80C00];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v62 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v62 - v20;
  v22 = objc_msgSend(a1, sel_entityInfo);
  objc_opt_self();
  v23 = (void *)swift_dynamicCastObjCClass();
  if (!v23)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v65 = a4;
  v66 = v22;
  v69[0] = 0;
  v24 = objc_msgSend(v23, sel_toKVItem_, v69);
  if (!v24)
  {
    v37 = v69[0];
    v38 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();

    return 0;
  }
  v25 = v24;
  v63 = v21;
  v26 = v69[0];
  v27 = objc_msgSend(v25, sel_itemId);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31 = *(_QWORD *)(a3 + 16);
  v32 = (unsigned int *)MEMORY[0x1E0D6E9A0];
  v64 = v28;
  v62 = v16;
  if (!v31)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    v39 = v63;
LABEL_11:
    v40 = v32;
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v39, *v32, v12);
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v33 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
  if ((v34 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(a3 + 56) + *(_QWORD *)(v13 + 72) * v33, v12);
    v35 = 0;
  }
  else
  {
    v35 = 1;
  }
  v39 = v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v35, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    goto LABEL_11;
  v40 = v32;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v39, v11, v12);
LABEL_13:
  v41 = v39;
  objc_msgSend(a1, sel_score, v62);
  v43 = v42 * 1.25;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E0D6E9E0]);
  v44 = v67;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v45 = v69[0];
  v46 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v19, v44, v12);
  if (v45 != v46)
  {
    v50 = *(void (**)(char *, uint64_t))(v13 + 8);
    v50(v19, v12);
    goto LABEL_17;
  }
  v47 = *v40;
  v48 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v62, v47, v12);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E0D6E9D8]);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v13 + 8);
  v50(v48, v12);
  v50(v19, v12);
  v51 = 1.0;
  if ((v49 & 1) != 0)
LABEL_17:
    v51 = 0.0;
  v52 = v43 * a5;
  v54 = v64;
  v53 = v65;
  v55 = *v65;
  if (*((_QWORD *)*v65 + 2))
  {
    swift_bridgeObjectRetain();
    v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v30);
    if ((v57 & 1) != 0)
    {
      v58 = (float *)(v55[7] + 8 * v56);
      v59 = *v58;
      v60 = v58[1];
      swift_bridgeObjectRelease();
      if (v51 < v60 || vabds_f32(v60, v51) < 0.0001 && v52 < v59)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v50(v41, v12);
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v69[0] = *v53;
  *v53 = (id)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, v30, isUniquelyReferenced_nonNull_native, v52, v51);
  *v53 = v69[0];
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50(v41, v12);
  return 1;
}

uint64_t EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v43 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (_QWORD **)((char *)&v39 - v12);
  MEMORY[0x1E0C80A78](v11);
  v15 = (_QWORD **)((char *)&v39 - v14);
  result = (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a3) + 0xD0))(*(_QWORD *)(v3 + 16));
  v17 = result;
  v18 = MEMORY[0x1E0DEE9D8];
  v50 = MEMORY[0x1E0DEE9D8];
  v45 = *(_QWORD *)(result + 16);
  if (!v45)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)(v18 + 16);
    swift_release();
    *a2 = v36;
    v37 = closure #2 in EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)(v4, (uint64_t)a3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x656C746974, 0xE500000000000000, isUniquelyReferenced_nonNull_native, 0.995, v37);
    *a1 = v50;
    return swift_bridgeObjectRelease();
  }
  v39 = a2;
  v40 = v4;
  v41 = a3;
  v42 = a1;
  v19 = 0;
  v20 = &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType);
  v44 = result;
  while (v19 < *(_QWORD *)(v17 + 16))
  {
    v21 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v48 = *(_QWORD *)(v46 + 72);
    v49 = v21;
    v22 = v20;
    outlined init with copy of MediaUserStateCenter?(v17 + v21 + v48 * v19, (uint64_t)v15, v20);
    v23 = *(int *)(v47 + 64);
    v24 = (char *)v13 + v23;
    v25 = (char *)v15 + v23;
    v26 = v15[1];
    *v13 = *v15;
    v13[1] = v26;
    v28 = v15[2];
    v27 = v15[3];
    v13[2] = v28;
    v13[3] = v27;
    v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v24, v25, v29);
    if (v27)
    {
      v31 = *(void (**)(char *, uint64_t))(v30 + 8);
      swift_bridgeObjectRetain();
      v31(v24, v29);
      swift_bridgeObjectRelease();
      v32 = HIBYTE(v27) & 0xF;
      if ((v27 & 0x2000000000000000) == 0)
        v32 = v28 & 0xFFFFFFFFFFFFLL;
      v17 = v44;
      v20 = v22;
      if (v32)
      {
        outlined init with take of PommesSearchReason?((uint64_t)v15, v43, v22);
        v33 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
          v33 = v50;
        }
        v35 = *(_QWORD *)(v33 + 16);
        v34 = *(_QWORD *)(v33 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
          v33 = v50;
        }
        *(_QWORD *)(v33 + 16) = v35 + 1;
        result = outlined init with take of PommesSearchReason?(v43, v33 + v49 + v35 * v48, v22);
        goto LABEL_5;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v29);
      v17 = v44;
      v20 = v22;
    }
    result = outlined destroy of MediaUserStateCenter?((uint64_t)v15, v20);
LABEL_5:
    if (v45 == ++v19)
    {
      v18 = v50;
      a3 = v41;
      a1 = v42;
      a2 = v39;
      v4 = v40;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

float closure #2 in EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  float result;
  _QWORD v44[2];
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v4 = *(_QWORD *)(v52 - 8);
  v5 = MEMORY[0x1E0C80A78](v52);
  v51 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v44 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  MEMORY[0x1E0C80A78](v9);
  v48 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v46 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v44 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v47 = (char *)v44 - v19;
  MEMORY[0x1E0C80A78](v18);
  v45 = (char *)v44 - v20;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(v21 + 16);
  v23 = MEMORY[0x1E0DEE9D8];
  if (v22)
  {
    v44[1] = a2;
    v54 = MEMORY[0x1E0DEE9D8];
    v24 = v21;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    v25 = *(unsigned __int8 *)(v4 + 80);
    v44[0] = v24;
    v26 = v24 + ((v25 + 32) & ~v25);
    v49 = *(_QWORD *)(v4 + 72);
    v50 = v17;
    do
    {
      outlined init with copy of MediaUserStateCenter?(v26, (uint64_t)v8, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      v27 = *(int *)(v52 + 48);
      v28 = &v51[v27];
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v51[v27], &v8[v27], v11);
      v29 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v29(v17, v28, v11);
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
      v23 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v54;
      }
      v31 = *(_QWORD *)(v23 + 16);
      v30 = *(_QWORD *)(v23 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v23 = v54;
      }
      *(_QWORD *)(v23 + 16) = v31 + 1;
      v32 = v23
          + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + *(_QWORD *)(v12 + 72) * v31;
      v17 = v50;
      v29((char *)v32, v50, v11);
      v54 = v23;
      v26 += v49;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    v33 = v47;
    v34 = *(_QWORD *)(v23 + 16);
    if (!v34)
      goto LABEL_15;
  }
  else
  {
    v33 = v47;
    v34 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v34)
    {
LABEL_15:
      v37 = 1;
      v38 = (uint64_t)v48;
      goto LABEL_17;
    }
  }
  v35 = v23 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v52 = *(_QWORD *)(v12 + 72);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v36(v33, v35, v11);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E0D6E9E0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v54 == v53)
      break;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v11);
    v35 += v52;
    if (!--v34)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  v38 = (uint64_t)v48;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v48, v33, v11);
  v37 = 0;
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v38, v37, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v38, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItemType?);
  }
  else
  {
    v39 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v45, v38, v11);
    v40 = v46;
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v46, *MEMORY[0x1E0D6E9A0], v11);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E0D6E9D8]);
    v41 = dispatch thunk of static Equatable.== infix(_:_:)();
    v42 = *(void (**)(char *, uint64_t))(v12 + 8);
    v42(v40, v11);
    v42(v39, v11);
    result = 1.0;
    if ((v41 & 1) == 0)
      return result;
  }
  return 0.0;
}

void EntityNameFeaturiser.featuriseTextFields(candidateMatches:itemsCount:candidate:candidateFields:)(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  Class isa;
  unsigned __int8 v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  float v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  char v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  const char *v71;
  _QWORD *v72;
  uint64_t (*v73)(void);
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  id v77;
  _QWORD v78[2];
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void **v83;
  char *v84;
  id v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  id v94[3];

  v5 = v4;
  v92 = a1;
  v94[1] = *(id *)MEMORY[0x1E0C80C00];
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v93 = (char *)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v84 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v83 = (void **)((char *)v78 - v15);
  v16 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier);
  v17 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  v80 = v16;
  v18 = specialized Sequence.compactMap<A>(_:)(a4, v5, v16, v17);
  swift_release();
  swift_bridgeObjectRelease();
  v19 = (void *)v5[5];
  if (v19)
  {
    v90 = v10;
    v91 = a2;
    v81 = v17;
    v82 = v9;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
    v20 = v19;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v94[0] = 0;
    v22 = objc_msgSend(v20, sel_setItems_error_, isa, v94);

    if ((v22 & 1) != 0)
    {
      v88 = v20;
      if (v18 >> 62)
      {
        v77 = v94[0];
        swift_bridgeObjectRetain();
        v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v23 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        v24 = v94[0];
      }
      swift_bridgeObjectRelease();
      *v91 = v23;
      v91 = (_QWORD *)specialized EntityNameFeaturiser.generateItemTypes(from:)(a4);
      v25 = v5[3];
      v26 = *(_QWORD *)(v25 + 16);
      swift_bridgeObjectRetain();
      v27 = 0;
      *(_QWORD *)&v28 = 136315138;
      v79 = v28;
      v78[1] = MEMORY[0x1E0DEE9B8] + 8;
      v29 = v82;
      v30 = v83;
      v31 = (uint64_t)v84;
      v86 = v26;
      v87 = v25;
      if (!v26)
        goto LABEL_13;
LABEL_6:
      if ((v27 & 0x8000000000000000) != 0)
        goto LABEL_58;
      if (v27 < *(_QWORD *)(v25 + 16))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
        v33 = *(_QWORD *)(v32 - 8);
        outlined init with copy of MediaUserStateCenter?(v25+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v27, v31, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
        v89 = v27 + 1;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v31, 0, 1, v32);
        while (1)
        {
          outlined init with take of PommesSearchReason?(v31, (uint64_t)v30, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)?);
          v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
          if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v30, 1, v35) == 1)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            return;
          }
          v36 = *v30;
          (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v93, (char *)v30 + *(int *)(v35 + 48), v29);
          v94[0] = 0;
          v37 = objc_msgSend(v88, sel_matchSpans_error_, v36, v94);
          v38 = v94[0];
          if (v37)
          {
            v39 = v37;
            type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
            v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
            v41 = v38;

            if (v40 < 0 || (v40 & 0x4000000000000000) != 0)
            {
              v64 = swift_bridgeObjectRetain();
              v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v64);
              swift_bridgeObjectRelease();
            }
            else
            {
              v42 = (void *)(v40 & 0xFFFFFFFFFFFFFF8);
              swift_bridgeObjectRetain();
            }
            v94[0] = v42;
            specialized MutableCollection<>.sort(by:)((uint64_t *)v94);
            swift_bridgeObjectRelease();
            v43 = (unint64_t)v94[0];
            if (((unint64_t)v94[0] & 0x8000000000000000) != 0
              || ((unint64_t)v94[0] & 0x4000000000000000) != 0)
            {
              swift_retain();
              v44 = _CocoaArrayWrapper.endIndex.getter();
              if (v44)
              {
LABEL_22:
                v85 = v36;
                if ((v43 & 0xC000000000000001) != 0)
                {
                  v45 = (id)MEMORY[0x1C3BBF3F4](0, v43);
                }
                else
                {
                  if (!*(_QWORD *)(v43 + 16))
                    goto LABEL_60;
                  v45 = *(id *)(v43 + 32);
                }
                v46 = v45;
                swift_release();
                v47 = 1.0;
                v48 = 4;
                while (1)
                {
                  v49 = (v43 & 0xC000000000000001) != 0
                      ? (id)MEMORY[0x1C3BBF3F4](v48 - 4, v43)
                      : *(id *)(v43 + 8 * v48);
                  v50 = v49;
                  v51 = v48 - 3;
                  if (__OFADD__(v48 - 4, 1))
                    break;
                  objc_msgSend(v49, sel_score);
                  v53 = v52;
                  objc_msgSend(v46, sel_score);
                  if ((float)(v54 * 0.4) > v53)
                  {

LABEL_10:
                    swift_release();
                    v29 = v82;
                    (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v82);
                    v30 = v83;
                    v31 = (uint64_t)v84;
                    goto LABEL_11;
                  }
                  v55 = (*(uint64_t (**)(void *, char *, _QWORD *, uint64_t, float))(*v5 + 168))(v50, v93, v91, v92, v47);

                  if ((v55 & 1) != 0)
                    v47 = v47 * 0.5;
                  ++v48;
                  if (v51 == v44)
                  {
                    v50 = v46;
                    v46 = v85;
                    goto LABEL_10;
                  }
                }
                __break(1u);
LABEL_58:
                __break(1u);
                break;
              }
            }
            else
            {
              v44 = *((_QWORD *)v94[0] + 2);
              swift_retain();
              if (v44)
                goto LABEL_22;
            }
            swift_release();
            (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v29);
            swift_release();

            v26 = v86;
            v25 = v87;
          }
          else
          {
            v56 = v94[0];
            v57 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            if (one-time initialization token for pommes != -1)
              swift_once();
            v58 = type metadata accessor for Logger();
            __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
            v59 = v81;
            swift_bridgeObjectRetain_n();
            v60 = Logger.logObject.getter();
            v61 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v60, v61))
            {
              v62 = swift_slowAlloc();
              v63 = (void *)swift_slowAlloc();
              v94[0] = v63;
              *(_DWORD *)v62 = v79;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v62 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v59, (uint64_t *)v94);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1C2356000, v60, v61, "EntityNameFeaturiser failed span matching candidate %s", (uint8_t *)v62, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1C3BBFF64](v63, -1, -1);
              MEMORY[0x1C3BBFF64](v62, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v29);
LABEL_11:
            v26 = v86;
            v25 = v87;
          }
          v27 = v89;
          if (v89 != v26)
            goto LABEL_6;
LABEL_13:
          v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v31, 1, 1, v34);
          v89 = v26;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      swift_once();
      goto LABEL_48;
    }
    v65 = v94[0];
    v66 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  if ((AFIsInternalInstall() & 1) == 0)
  {
    v72 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v73 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a3) + 0xB8);
    v74 = (_QWORD *)v73();
    (*(void (**)(void *))((*v72 & *v74) + 0xE8))(&outlined read-only object #0 of EntityNameFeaturiser.featuriseTextFields(candidateMatches:itemsCount:candidate:candidateFields:));

    v75 = (_QWORD *)v73();
    (*(void (**)(uint64_t))((*v72 & *v75) + 0x100))(1);

    if (one-time initialization token for pommes != -1)
      swift_once();
    v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.pommes);
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v68, v69))
      goto LABEL_55;
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    v71 = "EntityNameFeaturiser#featuriseTextFields couldn't set the items in itemmatcher";
    goto LABEL_54;
  }
  if (one-time initialization token for pommes != -1)
    goto LABEL_61;
LABEL_48:
  v67 = type metadata accessor for Logger();
  __swift_project_value_buffer(v67, (uint64_t)static Logger.pommes);
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    v71 = "EntityNameFeaturiser : failed to set items for the item matcher";
LABEL_54:
    _os_log_impl(&dword_1C2356000, v68, v69, v71, v70, 2u);
    MEMORY[0x1C3BBFF64](v70, -1, -1);
  }
LABEL_55:

}

uint64_t EntityNameFeaturiser.featuresCalculator(candidate:candidateFields:fieldMatchScores:maxFieldCount:optionalFieldCount:combinedTextMatchScore:rankedSlotIndex:)(_QWORD **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, float *a6, uint64_t a7)
{
  _QWORD *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  float v20;
  float v21;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  float v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  swift_bridgeObjectRelease();
  v44 = 0;
  v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v14 = *a1;
  EntityNameFeaturiser.featuriseTextFields(candidateMatches:itemsCount:candidate:candidateFields:)((uint64_t)&v43, &v44, *a1, a2);
  if ((*((_BYTE *)v14 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) & 1) != 0)
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v16 = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0 || a7)
      goto LABEL_11;
LABEL_6:
    if (one-time initialization token for textMatchOverride == -1)
      goto LABEL_7;
    goto LABEL_28;
  }
  v16 = swift_bridgeObjectRelease();
  if (!a7)
    goto LABEL_6;
LABEL_11:
  while (1)
  {
    v23 = *a1;
    v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v25 = (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xE0))(v16);
    a1 = (_QWORD **)v43;
    v26 = swift_bridgeObjectRetain();
    v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v26);
    v27 = swift_bridgeObjectRelease();
    *a3 = v14;
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v24 & *v23) + 0xB8))(v27);
    v29 = (*(uint64_t (**)(void))((*v24 & *v28) + 0xE0))();

    v30 = *(_QWORD *)(v29 + 16);
    swift_bridgeObjectRelease();
    a3 = (_QWORD *)(v30 <= v25 ? v25 : v30);
    *a4 = a3;
    if (v25 >= v44)
      break;
    v31 = v44 - v25;
    if (!__OFSUB__(v44, v25))
    {
      v32 = __OFSUB__(v31, 1);
      v33 = v31 - 1;
      if (!v32)
        goto LABEL_20;
      __break(1u);
      break;
    }
    __break(1u);
LABEL_28:
    swift_once();
LABEL_7:
    v16 = specialized Set.contains(_:)((uint64_t)v14 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, static EntityNameFeaturiser.textMatchOverride);
    if ((v16 & 1) != 0)
    {
      v17 = v43;
      if (*(_QWORD *)(v43 + 16))
      {
        v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C746974, 0xE500000000000000);
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)(v17 + 56) + 8 * v16;
          v20 = *(float *)(v19 + 4);
          v21 = *(float *)v19 * 1.01;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x656C746974, 0xE500000000000000, isUniquelyReferenced_nonNull_native, v21, v20);
          v43 = v17;
          v16 = swift_bridgeObjectRelease();
        }
      }
    }
  }
  v33 = 0;
LABEL_20:
  *a5 = v33;
  v34 = v14[2];
  v35 = MEMORY[0x1E0DEE9D8];
  if (v34)
  {
    v42 = MEMORY[0x1E0DEE9D8];
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
    v35 = v42;
    v36 = *(_QWORD *)(v42 + 16);
    v37 = 4;
    do
    {
      v38 = v14[v37];
      v39 = *(_QWORD *)(v42 + 24);
      if (v36 >= v39 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v36 + 1, 1);
      *(_QWORD *)(v42 + 16) = v36 + 1;
      *(_DWORD *)(v42 + 4 * v36 + 32) = v38;
      ++v37;
      ++v36;
      --v34;
    }
    while (v34);
    swift_release();
  }
  v40 = specialized EntityNameFeaturiser.computeCombineTextMatchScore(maxFieldCount:textMatchScores:)((uint64_t)a3, v35);
  swift_bridgeObjectRelease();
  *a6 = v40;
  return swift_bridgeObjectRelease();
}

void EntityNameFeaturiser.featurise(candidate:rankedSlotIndex:)(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xD0))(v6);
  v9 = MEMORY[0x1E0DEE9D8];
  v31 = 0;
  v32 = MEMORY[0x1E0DEE9D8];
  v30 = 0;
  v29 = 0.0;
  EntityNameFeaturiser.featuresCalculator(candidate:candidateFields:fieldMatchScores:maxFieldCount:optionalFieldCount:combinedTextMatchScore:rankedSlotIndex:)(a1, v8, &v32, &v31, &v30, &v29, a2);
  swift_bridgeObjectRelease();
  v27 = 0;
  v28 = v9;
  v26 = 0;
  v25 = 0.0;
  v10 = (*(uint64_t (**)(uint64_t))((*v7 & *v5) + 0xD8))(v6);
  if (v10)
  {
    EntityNameFeaturiser.featuresCalculator(candidate:candidateFields:fieldMatchScores:maxFieldCount:optionalFieldCount:combinedTextMatchScore:rankedSlotIndex:)(a1, v10, &v28, &v27, &v26, &v25, a2);
    swift_bridgeObjectRelease();
    v11 = v25;
  }
  else
  {
    v11 = 0.0;
  }
  v12 = v29;
  if (v29 >= v11)
  {
    v19 = swift_bridgeObjectRelease();
    v20 = *(uint64_t (**)(void))((*v7 & *v5) + 0xB8);
    v21 = (_QWORD *)((uint64_t (*)(uint64_t))v20)(v19);
    (*(void (**)(uint64_t))((*v7 & *v21) + 0xE8))(v32);

    v22 = (_QWORD *)v20();
    (*(void (**)(uint64_t))((*v7 & *v22) + 0x100))(v31);

    v23 = (_QWORD *)v20();
    (*(void (**)(uint64_t))((*v7 & *v23) + 0x118))(v30);

    v24 = (_QWORD *)v20();
    v18.n128_f32[0] = v12;
  }
  else
  {
    v13 = swift_bridgeObjectRelease();
    v14 = *(uint64_t (**)(void))((*v7 & *v5) + 0xB8);
    v15 = (_QWORD *)((uint64_t (*)(uint64_t))v14)(v13);
    (*(void (**)(uint64_t))((*v7 & *v15) + 0xE8))(v28);

    v16 = (_QWORD *)v14();
    (*(void (**)(uint64_t))((*v7 & *v16) + 0x100))(v27);

    v17 = (_QWORD *)v14();
    (*(void (**)(uint64_t))((*v7 & *v17) + 0x118))(v26);

    v24 = (_QWORD *)v14();
    v18.n128_f32[0] = v11;
  }
  (*(void (**)(__n128))((*v7 & *v24) + 0x130))(v18);

}

void one-time initialization function for precompdPnormExp()
{
  static EntityNameFeaturiser.precompdPnormExp = &outlined read-only object #0 of one-time initialization function for precompdPnormExp;
}

void one-time initialization function for fieldCountWgts()
{
  static EntityNameFeaturiser.fieldCountWgts = &outlined read-only object #0 of one-time initialization function for fieldCountWgts;
}

id *EntityNameFeaturiser.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EntityNameFeaturiser.__deallocating_deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance EntityNameFeaturiser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x1C3BBF5C8);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType))
                    - 8);
    v11 = (_QWORD *)(a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)));
    v12 = *(_QWORD *)(v10 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in EntityNameFeaturiser.generateItems(from:identifier:)(v11, a2, a3, a4, &v14);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v14)
      {
        MEMORY[0x1C3BBEE78]();
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v11 = (_QWORD *)((char *)v11 + v12);
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

uint64_t specialized EntityNameFeaturiser.generateItemTypes(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  Swift::Int v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  unint64_t v41;
  int isUniquelyReferenced_nonNull_native;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  Swift::Int v74;
  _QWORD *v75;
  unint64_t v76;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v65 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v60 = (uint64_t *)((char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v7);
  v59 = (char *)&v58 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v69 = (uint64_t *)((char *)&v58 - v12);
  v13 = MEMORY[0x1E0C80A78](v11);
  v62 = (uint64_t *)((char *)&v58 - v14);
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v58 - v15);
  v76 = MEMORY[0x1E0DEE9E0];
  v17 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Apple_Parsec_Siri_V2alpha_AudioItemType]);
  Dictionary.reserveCapacity(_:)(v17);
  if (!v17)
    return v76;
  v67 = (char *)v16 + *(int *)(v5 + 64);
  v18 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v66 = *(_QWORD *)(v6 + 72);
  v58 = a1;
  swift_bridgeObjectRetain();
  v19 = v62;
  v61 = v3;
  v70 = v5;
  v68 = v16;
  while (1)
  {
    v73 = v18;
    v74 = v17;
    outlined init with copy of MediaUserStateCenter?(v18, (uint64_t)v16, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v20 = (char *)v19 + *(int *)(v5 + 64);
    v22 = *v16;
    v21 = v16[1];
    v24 = v16[2];
    v23 = v16[3];
    *v19 = *v16;
    v19[1] = v21;
    v19[2] = v24;
    v19[3] = v23;
    v71 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v71(v20, v67, v2);
    v25 = *(int *)(v5 + 64);
    v26 = v69;
    v27 = (uint64_t)v19;
    v28 = (char *)v69 + v25;
    v72 = v22;
    *v69 = v22;
    v26[1] = v21;
    v26[2] = v24;
    v26[3] = v23;
    v29 = v2;
    v30 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v30((char *)v26 + v25, v20, v29);
    if (v23)
      break;
    outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    (*(void (**)(char *, uint64_t))(v3 + 8))(v28, v29);
    v2 = v29;
    v5 = v70;
    v19 = (_QWORD *)v27;
LABEL_4:
    v16 = v68;
LABEL_5:
    v18 = v73 + v66;
    v17 = v74 - 1;
    if (v74 == 1)
    {
      swift_bridgeObjectRelease();
      return v76;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = *(void (**)(char *, uint64_t))(v3 + 8);
  v31(v28, v29);
  v32 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0)
    v32 = v24 & 0xFFFFFFFFFFFFLL;
  if (!v32)
  {
    v19 = v62;
    outlined destroy of MediaUserStateCenter?((uint64_t)v62, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v29;
    v3 = v61;
    v5 = v70;
    goto LABEL_4;
  }
  v33 = v70;
  v34 = *(int *)(v70 + 64);
  v35 = v59;
  v36 = &v59[v34];
  v37 = v72;
  *(_QWORD *)v59 = v72;
  *((_QWORD *)v35 + 1) = v21;
  *((_QWORD *)v35 + 2) = v24;
  *((_QWORD *)v35 + 3) = v23;
  v30(&v35[v34], v20, v29);
  v38 = *(int *)(v33 + 64);
  v39 = v60;
  v40 = (char *)v60 + v38;
  *v60 = v37;
  v39[1] = v21;
  v39[2] = v24;
  v39[3] = v23;
  v30((char *)v39 + v38, v20, v29);
  swift_bridgeObjectRelease();
  v71(v65, v40, v29);
  v41 = v76;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v75 = (_QWORD *)v41;
  v76 = 0x8000000000000000;
  v44 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v21);
  v45 = *(_QWORD *)(v41 + 16);
  v46 = (v43 & 1) == 0;
  v47 = v45 + v46;
  v16 = v68;
  if (!__OFADD__(v45, v46))
  {
    v48 = v43;
    v63 = v36;
    v64 = v31;
    if (*(_QWORD *)(v41 + 24) >= v47)
    {
      v51 = v61;
      v5 = v70;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v52 = v75;
        if ((v43 & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v52 = v75;
        if ((v48 & 1) == 0)
          goto LABEL_14;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v72, v21);
      v51 = v61;
      v5 = v70;
      if ((v48 & 1) != (v50 & 1))
        goto LABEL_27;
      v44 = v49;
      v52 = v75;
      if ((v48 & 1) == 0)
      {
LABEL_14:
        v52[(v44 >> 6) + 8] |= 1 << v44;
        v53 = (_QWORD *)(v52[6] + 16 * v44);
        *v53 = v72;
        v53[1] = v21;
        v71((char *)(v52[7] + *(_QWORD *)(v51 + 72) * v44), v65, v29);
        v54 = v52[2];
        v55 = __OFADD__(v54, 1);
        v56 = v54 + 1;
        if (v55)
          goto LABEL_26;
        v3 = v51;
        v52[2] = v56;
        swift_bridgeObjectRetain();
        goto LABEL_20;
      }
    }
    v3 = v51;
    (*(void (**)(unint64_t, char *, uint64_t))(v51 + 40))(v52[7] + *(_QWORD *)(v51 + 72) * v44, v65, v29);
LABEL_20:
    v76 = (unint64_t)v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v62;
    outlined destroy of MediaUserStateCenter?((uint64_t)v62, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v2 = v29;
    v64(v63, v29);
    goto LABEL_5;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

float specialized EntityNameFeaturiser.computeCombineTextMatchScore(maxFieldCount:textMatchScores:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float *v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  float v20;
  uint64_t v21;

  if ((unint64_t)(a1 - 0x2000000000000000) >> 62 == 3)
  {
    v3 = a2;
    v2 = a1;
    if (one-time initialization token for precompdPnormExp == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v6 = 4 * v2;
  if (*((_QWORD *)static EntityNameFeaturiser.precompdPnormExp + 2) <= v2)
  {
    v4 = 1.0 / (float)v6;
    v7 = *(_QWORD *)(v3 + 16);
    if (!v7)
      goto LABEL_6;
LABEL_10:
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v11 = (float)v6;
    v8 = v21;
    v12 = (float *)(v3 + 32);
    v13 = *(_QWORD *)(v21 + 16);
    do
    {
      v14 = *v12;
      v15 = *(_QWORD *)(v21 + 24);
      v9 = v13 + 1;
      if (v13 >= v15 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v13 + 1, 1);
      v16 = powf(v14, v11);
      *(_QWORD *)(v21 + 16) = v9;
      *(float *)(v21 + 4 * v13 + 32) = v16;
      ++v12;
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_7;
  }
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *((float *)static EntityNameFeaturiser.precompdPnormExp + v2 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  if (v7)
    goto LABEL_10;
LABEL_6:
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v9)
  {
    v5 = 0.0;
    goto LABEL_22;
  }
LABEL_7:
  if (v9 >= 2)
  {
    v17 = 0;
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v5 = 0.0;
    do
    {
      v5 = (float)(v5 + *(float *)(v8 + 4 * v17 + 32)) + *(float *)(v8 + 4 * v17 + 36);
      v17 += 2;
    }
    while (v10 != v17);
    goto LABEL_23;
  }
  v10 = 0;
  v5 = 0.0;
  do
  {
    v20 = *(float *)(v8 + 4 * v10++ + 32);
    v5 = v5 + v20;
LABEL_23:
    ;
  }
  while (v9 != v10);
LABEL_22:
  swift_bridgeObjectRelease();
  v18 = powf((float)v2, -v4);
  return v18 * powf(v5, v4);
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;

  v34 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (_QWORD *)((char *)v30 - v9);
  MEMORY[0x1E0C80A78](v8);
  v31 = (uint64_t)v30 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  v30[1] = v2;
  v13 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm() - 8);
  v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v35 = *(_QWORD *)(v13 + 72);
  v30[0] = a1;
  v15 = swift_bridgeObjectRetain();
  v16 = MEMORY[0x1E0DEE9D8];
  v17 = &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType);
  do
  {
    v18 = MEMORY[0x1C3BBBB60](v15);
    v20 = v19;
    v15 = swift_bridgeObjectRelease();
    v21 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0)
      v21 = v18 & 0xFFFFFFFFFFFFLL;
    if (v21)
    {
      v22 = MEMORY[0x1C3BBBB60](v15);
      v23 = v17;
      v24 = (void *)MEMORY[0x1C3BBEC44](v22);
      swift_bridgeObjectRelease();
      v25 = objc_msgSend(v34, sel_queryFromText_, v24);

      v17 = v23;
      *v10 = v25;
      MEMORY[0x1C3BBBB48]();
      v26 = v31;
      outlined init with take of PommesSearchReason?((uint64_t)v10, v31, v23);
      outlined init with take of PommesSearchReason?(v26, (uint64_t)v7, v23);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
      v28 = *(_QWORD *)(v16 + 16);
      v27 = *(_QWORD *)(v16 + 24);
      if (v28 >= v27 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v16);
      *(_QWORD *)(v16 + 16) = v28 + 1;
      v15 = outlined init with take of PommesSearchReason?((uint64_t)v7, v16+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v28, v23);
    }
    v14 += v35;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized static EntityNameFeaturiser.score(_:_:_:_:)(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  float *v9;
  unint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float *v17;
  unint64_t v18;
  unint64_t v19;
  float *v20;
  float v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a4 >= a2)
    v4 = a2;
  else
    v4 = a4;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v7 = v24;
    v8 = *(_QWORD *)(v24 + 16);
    v9 = (float *)(a1 + 36);
    v10 = v5;
    do
    {
      v12 = *(v9 - 1);
      v11 = *v9;
      v25 = v7;
      v13 = *(_QWORD *)(v7 + 24);
      v14 = v8 + 1;
      if (v8 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v8 + 1, 1);
        v7 = v25;
      }
      *(_QWORD *)(v7 + 16) = v14;
      *(float *)(v7 + 4 * v8 + 32) = (float)(v12 * 0.67) + (float)(v11 * 0.33);
      v9 += 2;
      ++v8;
      --v10;
    }
    while (v10);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v14)
      goto LABEL_18;
  }
  if (v14 < 2)
  {
    v15 = 0;
    v16 = 0.0;
LABEL_16:
    v19 = v14 - v15;
    v20 = (float *)(v7 + 4 * v15 + 32);
    do
    {
      v21 = *v20++;
      v16 = v16 + v21;
      --v19;
    }
    while (v19);
    goto LABEL_18;
  }
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  v17 = (float *)(v7 + 36);
  v16 = 0.0;
  v18 = v14 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v16 = (float)(v16 + *(v17 - 1)) + *v17;
    v17 += 2;
    v18 -= 2;
  }
  while (v18);
  if (v14 != v15)
    goto LABEL_16;
LABEL_18:
  result = swift_bridgeObjectRelease();
  if (one-time initialization token for fieldCountWgts != -1)
    result = swift_once();
  v23 = *((_QWORD *)static EntityNameFeaturiser.fieldCountWgts + 2);
  if (v5 < v23 && v4 >= v23)
    __break(1u);
  return result;
}

uint64_t type metadata accessor for EntityNameFeaturiser()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String>);
    v2 = lazy protocol witness table accessor for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A]();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEC850], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[Apple_Parsec_Siri_V2alpha_LibrarySearchTerm], String> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Apple_Parsec_Siri_V2alpha_LibrarySearchTerm] and conformance [A]);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    result = MEMORY[0x1C3BBFE74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for EntityNameFeaturiser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EntityNameFeaturiser.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.__allocating_init(query:localizedTokenizer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.add(match:multiFieldMatchWeight:with:_:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.featuriseTopServer(candidateMatches:itemsCount:candidate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of EntityNameFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

const char *CallBusinessNoResultsExperiencesResolver.domainName.unsafeMutableAddressor()
{
  return "phone";
}

uint64_t static CallBusinessNoResultsExperiencesResolver.domainName.getter()
{
  return 0x656E6F6870;
}

uint64_t CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  int isUniquelyReferenced_nonNull_native;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t (*v43)@<X0>(uint64_t *@<X8>);
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  int v48;
  int v49;
  unint64_t v50;
  BOOL v51;
  void (*v52)(uint64_t);
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  _QWORD v81[2];
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t (*v89)@<X0>(uint64_t *@<X8>);
  uint64_t v90;
  _QWORD v91[3];
  _QWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t (*v106)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unsigned __int8 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t (*v126)@<X0>(uint64_t *@<X8>);
  uint64_t v127;
  uint64_t (*v128)();
  uint64_t v129;
  uint64_t (*v130)@<X0>(uint64_t *@<X0>, uint64_t *@<X8>);
  uint64_t v131;
  uint64_t (*v132)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v133;
  uint64_t (*v134)();
  uint64_t v135;
  uint64_t (*v136)();
  uint64_t v137;
  uint64_t (*v138)();
  uint64_t v139;
  uint64_t (*v140)@<X0>(_QWORD *@<X8>);
  uint64_t v141;
  BOOL (*v142)(_QWORD *);
  uint64_t v143;

  v86 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  v84 = *(_QWORD *)(v86 - 8);
  v4 = MEMORY[0x1E0C80A78](v86);
  v83 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v82 = (char *)v81 - v7;
  MEMORY[0x1E0C80A78](v6);
  v85 = (char *)v81 - v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (!v9)
  {
    v14 = MEMORY[0x1E0DEE9D8];
LABEL_25:
    v124 = v10;
    v37 = *(_QWORD *)(v14 + 16);
    if (v37)
    {
      v38 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
      v39 = v14 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
      v40 = *(_QWORD *)(v38 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      do
      {
        if (specialized CallBusinessNoResultsExperiencesResolver.getUsoTask(_:)())
        {
          MEMORY[0x1C3BBEE78]();
          if (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v39 += v40;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
      v41 = v124;
    }
    else
    {
      swift_bridgeObjectRetain();
      v41 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v42 = specialized Sequence.compactMap<A>(_:)(v41);
    v81[1] = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    v125 = v42;
    v126 = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    v127 = 0;
    v128 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v129 = 0;
    v130 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    v131 = 0;
    v132 = closure #5 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    v133 = 0;
    v134 = closure #6 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    v135 = 0;
    v136 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v137 = 0;
    v138 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    v139 = 0;
    v140 = closure #7 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    v141 = 0;
    v142 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v143 = 0;
    *(_QWORD *)&v111 = v42;
    *((_QWORD *)&v111 + 1) = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(_QWORD *)&v112 = 0;
    *((_QWORD *)&v112 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    *(_QWORD *)&v113 = 0;
    *((_QWORD *)&v113 + 1) = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *(_QWORD *)&v114 = 0;
    *((_QWORD *)&v114 + 1) = closure #5 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(_QWORD *)&v115 = 0;
    *((_QWORD *)&v115 + 1) = closure #6 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(_QWORD *)&v116 = 0;
    *((_QWORD *)&v116 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    *(_QWORD *)&v117 = 0;
    *((_QWORD *)&v117 + 1) = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *(_QWORD *)&v118 = 0;
    *((_QWORD *)&v118 + 1) = closure #7 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(_QWORD *)&v119 = 0;
    *((_QWORD *)&v119 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    *(_QWORD *)&v120 = 0;
    *((_QWORD *)&v120 + 1) = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
    *(_QWORD *)&v121 = 0;
    *((_QWORD *)&v121 + 1) = closure #8 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(_QWORD *)&v122 = 0;
    *((_QWORD *)&v122 + 1) = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
    v123 = 0;
    v44 = specialized LazyFilterSequence<>.startIndex.getter();
    v46 = v45;
    LOBYTE(v48) = v47;
    v49 = v47 & 1;
    v108 = v44;
    v109 = v45;
    v110 = v47 & 1;
    v50 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
    v87 = v42;
    *(_QWORD *)&v93 = v42;
    *((_QWORD *)&v93 + 1) = closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:);
    *(_QWORD *)&v94 = 0;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
    MEMORY[0x1C3BBF49C](&v88, v9, v50);
    if (v44 == v88 && v49)
    {
      v51 = 1;
LABEL_51:
      v103 = v121;
      v104 = v122;
      v99 = v117;
      v100 = v118;
      v101 = v119;
      v102 = v120;
      v95 = v113;
      v96 = v114;
      v97 = v115;
      v98 = v116;
      v93 = v111;
      v94 = v112;
      v105 = v123;
      v106 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      v107 = 0;
      v88 = (_QWORD *)v87;
      v89 = v43;
      v90 = 0;
      MEMORY[0x1C3BBF49C](v91, v9, v50);
      if (v44 == (_QWORD *)v91[0] && v51)
      {
LABEL_62:
        v64 = outlined release of LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>, String>((uint64_t)&v93);
        MEMORY[0x1E0C80A78](v64);
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
        v9 = (uint64_t)v85;
        v13 = v86;
        static Message.with(_:)();
        swift_bridgeObjectRelease();
        if (one-time initialization token for pommes != -1)
          goto LABEL_73;
        goto LABEL_63;
      }
      v91[2] = 0;
      v92 = v44;
      v91[0] = v87;
      v91[1] = v43;
      v58 = LazyMapSequence<>.subscript.read(&v88, (uint64_t)&v92, v9);
      v60 = *v59;
      swift_bridgeObjectRetain();
      ((void (*)(_QWORD **, _QWORD))v58)(&v88, 0);
      if (!v60)
        goto LABEL_81;
      if (v51)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      if ((v60 & 0xC000000000000001) != 0)
      {
        MEMORY[0x1C3BBF3F4](v46, v60);
LABEL_59:
        swift_bridgeObjectRelease();
        dispatch thunk of CodeGenListEntry.entry.getter();
        swift_release();
        if (v88)
        {
          CodeGenBase.entity.getter();
          type metadata accessor for UsoEntity_common_Person();
          static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v88);
          swift_release();
          v61 = swift_release();
          if (v88)
          {
            MEMORY[0x1C3BBCE74](v61);
            v63 = v62;
            swift_release();
            if (v63)
              goto LABEL_62;
LABEL_85:
            __break(1u);
LABEL_86:
            result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      if ((v46 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v46 < *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
        goto LABEL_59;
      }
      __break(1u);
    }
    else
    {
      while (1)
      {
        v91[0] = v44;
        v88 = (_QWORD *)v87;
        v89 = v43;
        v13 = (uint64_t)v43;
        v90 = 0;
        outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>((uint64_t)&v111);
        v52 = LazyMapSequence<>.subscript.read(&v93, (uint64_t)v91, v9);
        v54 = *v53;
        swift_bridgeObjectRetain();
        ((void (*)(__int128 *, _QWORD))v52)(&v93, 0);
        if (!v54)
          break;
        if ((v48 & 1) != 0)
          goto LABEL_78;
        if ((v54 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1C3BBF3F4](v46, v54);
        }
        else
        {
          if ((v46 & 0x8000000000000000) != 0)
            goto LABEL_70;
          if (v46 >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_71;
          swift_retain();
        }
        swift_bridgeObjectRelease();
        dispatch thunk of CodeGenListEntry.entry.getter();
        swift_release();
        if (!(_QWORD)v93)
          goto LABEL_79;
        CodeGenBase.entity.getter();
        type metadata accessor for UsoEntity_common_Person();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v93);
        swift_release();
        v55 = swift_release();
        if (!(_QWORD)v93)
          goto LABEL_80;
        MEMORY[0x1C3BBCE74](v55);
        v57 = v56;
        swift_release();
        outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>((uint64_t)&v111);
        swift_bridgeObjectRelease();
        v51 = v57 == 0;
        if (v57)
        {
          v43 = (uint64_t (*)@<X0>(uint64_t *@<X8>))v13;
          goto LABEL_51;
        }
        specialized LazyFilterSequence<>.formIndex(after:)((uint64_t)&v108);
        v48 = v110;
        v44 = v108;
        v46 = v109;
        *(_QWORD *)&v93 = v87;
        *((_QWORD *)&v93 + 1) = v13;
        v43 = (uint64_t (*)@<X0>(uint64_t *@<X8>))v13;
        *(_QWORD *)&v94 = 0;
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
        MEMORY[0x1C3BBF49C](&v88, v9, v50);
        if (v44 == v88 && v48)
          goto LABEL_51;
      }
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v11 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v13 = *(_QWORD *)(v11 + 72);
  swift_bridgeObjectRetain_n();
  v14 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v15 = Siri_Nlu_External_Span.matcherNames.getter();
    v16 = *(_QWORD *)(v15 + 16);
    v17 = *(_QWORD *)(v14 + 16);
    v18 = v17 + v16;
    if (__OFADD__(v17, v16))
      break;
    v19 = v15;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v18 <= *(_QWORD *)(v14 + 24) >> 1)
    {
      if (*(_QWORD *)(v19 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v17 <= v18)
        v21 = v17 + v16;
      else
        v21 = v17;
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v21, 1, v14);
      if (*(_QWORD *)(v19 + 16))
      {
LABEL_14:
        v22 = *(_QWORD *)(v14 + 16);
        v23 = (*(_QWORD *)(v14 + 24) >> 1) - v22;
        v24 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
        if (v23 < v16)
          goto LABEL_69;
        v25 = *(_QWORD *)(v24 - 8);
        v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
        v27 = *(_QWORD *)(v25 + 72);
        v28 = v14 + v26 + v27 * v22;
        v29 = v19 + v26;
        v30 = v27 * v16;
        v31 = v28 + v30;
        v32 = v29 + v30;
        if (v29 < v31 && v28 < v32)
          goto LABEL_86;
        swift_arrayInitWithCopy();
        if (v16)
        {
          v34 = *(_QWORD *)(v14 + 16);
          v35 = __OFADD__(v34, v16);
          v36 = v34 + v16;
          if (v35)
            goto LABEL_72;
          *(_QWORD *)(v14 + 16) = v36;
        }
        goto LABEL_4;
      }
    }
    if (v16)
      goto LABEL_68;
LABEL_4:
    swift_bridgeObjectRelease();
    v12 += v13;
    if (!--v9)
    {
      swift_bridgeObjectRelease_n();
      v10 = MEMORY[0x1E0DEE9D8];
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  swift_once();
LABEL_63:
  v65 = type metadata accessor for Logger();
  __swift_project_value_buffer(v65, (uint64_t)static Logger.pommes);
  v66 = v84;
  v67 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
  v68 = v82;
  v67(v82, v9, v13);
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = swift_slowAlloc();
    v88 = (_QWORD *)v72;
    *(_DWORD *)v71 = 136315138;
    v73 = Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter();
    v91[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, (uint64_t *)&v88);
    v13 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v75 = *(void (**)(char *, uint64_t))(v84 + 8);
    v75(v68, v13);
    _os_log_impl(&dword_1C2356000, v69, v70, "Making PhoneCallExperience for CallBusinessNoResultsExperiencesResolver with phoneCall.name=%s", v71, 0xCu);
    swift_arrayDestroy();
    v76 = v72;
    v9 = (uint64_t)v85;
    MEMORY[0x1C3BBFF64](v76, -1, -1);
    MEMORY[0x1C3BBFF64](v71, -1, -1);
  }
  else
  {
    v75 = *(void (**)(char *, uint64_t))(v66 + 8);
    v75(v68, v13);
  }

  v77 = v83;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_1C24FB5A0;
  type metadata accessor for PhoneCallExperience();
  v67(v77, v9, v13);
  *(_QWORD *)(v78 + 32) = PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:)();
  v88 = (_QWORD *)v78;
  specialized Array._endMutation()();
  v79 = (uint64_t)v88;
  v75((char *)v9, v13);
  return v79;
}

uint64_t closure #4 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MEMORY[0x1C3BBCF64]();
  *a1 = result;
  return result;
}

uint64_t closure #5 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t closure #6 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)()
{
  return dispatch thunk of CodeGenListEntry.entry.getter();
}

uint64_t closure #7 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)@<X0>(_QWORD *a1@<X8>)
{
  CodeGenBase.entity.getter();
  type metadata accessor for UsoEntity_common_Person();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(a1);
  return swift_release();
}

uint64_t closure #8 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MEMORY[0x1C3BBCE74]();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for ExperiencesResolver.buildExperiences(from:with:) in conformance CallBusinessNoResultsExperiencesResolver(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)(a1, a2, *v2);
}

void (*specialized protocol witness for Collection.subscript.read in conformance <> LazyMapSequence<A, B>(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized LazyMapSequence<>.subscript.read(v4, a2);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t specialized LazyMapSequence<>.startIndex.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  void (*v9)(uint64_t *__return_ptr, __int128 *);
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v13)(__int128 *);
  void (*v14)(uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void (*v22)(__int128 *__return_ptr, __int128 *);
  void (*v23)(__int128 *__return_ptr, __int128 *);
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v1 = *(_OWORD *)(v0 + 80);
  v33 = *(_OWORD *)(v0 + 64);
  v34 = v1;
  v35 = *(_QWORD *)(v0 + 96);
  v2 = *(_OWORD *)(v0 + 16);
  v30[0] = *(_OWORD *)v0;
  v30[1] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  v31 = *(_OWORD *)(v0 + 32);
  v32 = v3;
  v38 = v31;
  v39 = v3;
  v40 = *(_QWORD *)(v0 + 64);
  v36 = v30[0];
  v37 = v2;
  v22 = (void (*)(__int128 *__return_ptr, __int128 *))*((_QWORD *)&v33 + 1);
  v4 = specialized FlattenSequence<>.startIndex.getter();
  v6 = v5;
  v8 = v7;
  v9 = (void (*)(uint64_t *__return_ptr, __int128 *))*((_QWORD *)&v31 + 1);
  v23 = (void (*)(__int128 *__return_ptr, __int128 *))*((_QWORD *)&v39 + 1);
  v41 = v30[0];
  v42 = v37;
  v10 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  while (1)
  {
    v24 = v41;
    v25 = v42;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
    MEMORY[0x1C3BBF49C](&v26, v11, v10);
    if (v4 == (_QWORD)v26 && (v8 & 1) != 0)
      return v4;
    v13 = (uint64_t (*)(__int128 *))*((_QWORD *)&v34 + 1);
    v28 = v4;
    v26 = v41;
    v27 = v42;
    swift_retain();
    outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v30);
    v14 = LazyMapSequence<>.subscript.read(&v24, (uint64_t)&v28, v11);
    v16 = *v15;
    swift_bridgeObjectRetain();
    ((void (*)(__int128 *, _QWORD))v14)(&v24, 0);
    *(_QWORD *)&v24 = v16;
    v9(&v29, &v24);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v26 = v29;
    v23(&v24, &v26);
    result = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      goto LABEL_18;
    if ((v24 & 0xC000000000000001) != 0)
    {
      v18 = MEMORY[0x1C3BBF3F4](v6, v24);
      goto LABEL_12;
    }
    if ((v6 & 0x8000000000000000) != 0)
      break;
    if (v6 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_17;
    v18 = *(_QWORD *)(v24 + 8 * v6 + 32);
    swift_retain();
LABEL_12:
    swift_bridgeObjectRelease();
    *(_QWORD *)&v26 = v18;
    v22(&v24, &v26);
    swift_release();
    outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v30);
    *(_QWORD *)&v26 = v24;
    v19 = v13(&v26);
    swift_release();
    swift_release();
    if ((v19 & 1) != 0)
      return v4;
    v4 = specialized FlattenSequence<>._index(after:)(v4, v6, 0);
    v6 = v20;
    v8 = v21;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void (*specialized LazyMapSequence<>.subscript.read(_QWORD *a1, uint64_t a2))(void **a1)
{
  uint64_t v2;
  _QWORD *v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  void (*v7)(uint64_t *);
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = malloc(0x48uLL);
  *a1 = v5;
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 40);
  v7 = *(void (**)(uint64_t *))(v2 + 56);
  v5[8] = a2;
  *((_OWORD *)v5 + 2) = *(_OWORD *)v2;
  v5[6] = *(_QWORD *)(v2 + 16);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  v9 = LazyMapSequence<>.subscript.read(v5, (uint64_t)(v5 + 8), v8);
  v11 = *v10;
  swift_bridgeObjectRetain();
  ((void (*)(_QWORD *, _QWORD))v9)(v5, 0);
  v13 = v11;
  v6(&v14, &v13);
  swift_bridgeObjectRelease();
  v13 = v14;
  v7(&v13);
  swift_bridgeObjectRelease();
  return LazyMapSequence<>.subscript.readspecialized ;
}

void LazyMapSequence<>.subscript.readspecialized (void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  free(v1);
}

void (*LazyMapSequence<>.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *);
  void (*v13)(_QWORD *, _QWORD);

  v6 = malloc(0x40uLL);
  *a1 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = malloc(*(_QWORD *)(v8 + 64));
  v10 = *(_QWORD *)(a3 + 24);
  v6[4] = v9;
  v6[5] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[6] = v11;
  v6[7] = malloc(*(_QWORD *)(v11 + 64));
  v12 = *(void (**)(void *))(v3 + *(int *)(a3 + 44));
  v13 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
  (*(void (**)(void *))(v8 + 16))(v9);
  v13(v6, 0);
  v12(v9);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v9, AssociatedTypeWitness);
  return LazyMapSequence<>.subscript.read;
}

void LazyMapSequence<>.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 56);
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 48) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 40));
  free(v2);
  free(v3);
  free(v1);
}

_QWORD *specialized LazyFilterSequence<>.startIndex.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *result;
  char v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *);
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t (*v26)(_QWORD *);
  unint64_t v27;
  void (*v28)(uint64_t);
  uint64_t *v29;
  uint64_t v30;
  char v31;
  void (*v32)(_QWORD *__return_ptr, __int128 *);
  void (*v33)(__int128 *__return_ptr, uint64_t *);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(__int128 *__return_ptr, _QWORD *);
  void (*v38)(__int128 *__return_ptr, _QWORD *);
  uint64_t v39;
  void (*v40)(uint64_t *__return_ptr, __int128 *);
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[5];
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v1 = v0[5];
  v52 = v0[4];
  v53 = v1;
  v54 = v0[6];
  v55 = *((_QWORD *)v0 + 14);
  v2 = v0[1];
  v48 = *v0;
  v49 = v2;
  v3 = v0[3];
  v50 = v0[2];
  v51 = v3;
  v4 = specialized LazyMapSequence<>.startIndex.getter();
  v42 = v5;
  LODWORD(v7) = v6 & 1;
  v56[4] = v52;
  v57 = v53;
  v58 = v54;
  v56[0] = v48;
  v56[1] = v49;
  v56[2] = v50;
  v56[3] = v51;
  v63 = v52;
  v61 = v50;
  v62 = v51;
  v59 = v48;
  v60 = v49;
  v37 = (void (*)(__int128 *__return_ptr, _QWORD *))*((_QWORD *)&v52 + 1);
  v9 = *((_QWORD *)&v48 + 1);
  v8 = v48;
  v10 = v49;
  v39 = v51;
  v40 = (void (*)(uint64_t *__return_ptr, __int128 *))*((_QWORD *)&v50 + 1);
  v38 = (void (*)(__int128 *__return_ptr, _QWORD *))*((_QWORD *)&v51 + 1);
  v11 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  v43 = v48;
  v44 = v49;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  MEMORY[0x1C3BBF49C](v45, v12, v11);
  if (v4 != v45[0] || !(_DWORD)v7)
  {
    v32 = (void (*)(_QWORD *__return_ptr, __int128 *))*((_QWORD *)&v54 + 1);
    v35 = v9;
    v36 = v11;
    do
    {
      v41 = v12;
      v15 = v10;
      v16 = *(uint64_t (**)(_QWORD *))(v34 + 136);
      outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v34);
      swift_retain();
      v45[0] = specialized FlattenSequence<>.subscript.getter(v4, v42, v7 & 1, v8, v9, v15, (void (*)(uint64_t *__return_ptr, _QWORD *))v40, v39, (void (*)(_QWORD *__return_ptr, _QWORD *))v38);
      v37(&v43, v45);
      swift_release();
      v32(v45, &v43);
      swift_release();
      v47 = v45[0];
      v33(&v43, &v47);
      swift_release();
      outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v34);
      v45[0] = v43;
      v17 = v16(v45);
      swift_release();
      swift_release();
      if ((v17 & 1) != 0)
        break;
      *(_QWORD *)&v43 = v8;
      *((_QWORD *)&v43 + 1) = v9;
      v44 = v15;
      v18 = v36;
      result = MEMORY[0x1C3BBF49C](v45, v41, v36);
      if (((v4 == v45[0]) & v7) != 0)
      {
LABEL_24:
        __break(1u);
        return result;
      }
      v10 = v15;
      v19 = v4;
      v9 = v35;
      v20 = v41;
      do
      {
        v21 = specialized FlattenSequence<>._index(after:)(v19, v42, v7 & 1);
        v42 = v22;
        *(_QWORD *)&v43 = v8;
        v24 = v23;
        *((_QWORD *)&v43 + 1) = v9;
        v44 = v10;
        MEMORY[0x1C3BBF49C](v45, v20, v18);
        v19 = v21;
        v25 = (v21 == v45[0]) & v24;
        if (v25)
          break;
        v26 = (uint64_t (*)(_QWORD *))*((_QWORD *)&v57 + 1);
        v27 = v21;
        v45[2] = v10;
        v46 = v21;
        v45[0] = v8;
        v45[1] = v9;
        swift_retain();
        outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v56);
        v28 = LazyMapSequence<>.subscript.read(&v43, (uint64_t)&v46, v20);
        v30 = *v29;
        swift_bridgeObjectRetain();
        ((void (*)(__int128 *, _QWORD))v28)(&v43, 0);
        *(_QWORD *)&v43 = v30;
        v40(&v47, &v43);
        swift_bridgeObjectRelease();
        v45[0] = v47;
        v38(&v43, v45);
        result = (_QWORD *)swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
          goto LABEL_23;
        result = (_QWORD *)v42;
        if ((v43 & 0xC000000000000001) != 0)
        {
          v7 = MEMORY[0x1C3BBF3F4](v42, v43);
        }
        else
        {
          if ((v42 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          if (v42 >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_22;
          v7 = *(_QWORD *)(v43 + 8 * v42 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v45[0] = v7;
        v37(&v43, v45);
        swift_release();
        outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v56);
        v45[0] = v43;
        v31 = v26(v45);
        swift_release();
        swift_release();
        LOBYTE(v7) = 0;
        v9 = v35;
        v18 = v36;
        v20 = v41;
        v19 = v27;
      }
      while ((v31 & 1) == 0);
      *(_QWORD *)&v43 = v8;
      *((_QWORD *)&v43 + 1) = v9;
      v44 = v10;
      v4 = v19;
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
      MEMORY[0x1C3BBF49C](v45, v12, v18);
      if (v4 == v45[0])
        v14 = v25;
      else
        v14 = 0;
      LOBYTE(v7) = v25;
    }
    while ((v14 & 1) == 0);
  }
  return (_QWORD *)v4;
}

unint64_t specialized LazyFilterSequence<>.startIndex.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t *);
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  unint64_t v18;

  v1 = v0;
  v3 = *v0;
  v2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[1];
  v17[3] = v0[2];
  v18 = v3;
  v17[1] = v3;
  v17[2] = v2;
  v14 = v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  v5 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  MEMORY[0x1C3BBF490](v17, v4, v5);
  v6 = v17[0];
  if (v3 >> 62)
    goto LABEL_20;
  if (v17[0] != *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    do
    {
      v7 = (uint64_t (*)(uint64_t *))v1[3];
      v1 = (_QWORD *)v1[4];
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          swift_retain();
          outlined retain of [LNActionMetadata]((uint64_t)&v18);
          swift_retain();
          swift_retain();
          v9 = MEMORY[0x1C3BBF3F4](v6, v3);
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_18;
          if (v6 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_19;
          v9 = *(_QWORD *)(v3 + 8 * v6 + 32);
          swift_retain();
          outlined retain of [LNActionMetadata]((uint64_t)&v18);
          swift_retain();
          swift_retain();
          swift_retain();
        }
        v15 = v9;
        v14(&v16, &v15);
        swift_release();
        outlined release of [LNActionMetadata]((uint64_t)&v18);
        swift_release();
        swift_release();
        v15 = v16;
        v10 = v7(&v15);
        swift_release();
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
          return v6;
        v11 = v6 + 1;
        if (__OFADD__(v6, 1))
          break;
        if (v3 >> 62)
        {
          swift_bridgeObjectRetain();
          v8 = _CocoaArrayWrapper.endIndex.getter();
          outlined release of [LNActionMetadata]((uint64_t)&v18);
        }
        else
        {
          v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v6;
        if (v11 == v8)
          return v11;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [LNActionMetadata]((uint64_t)&v18);
    }
    while (v6 != v13);
  }
  return v6;
}

_QWORD *specialized LazyFilterSequence<>.formIndex(after:)(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void (*v9)(_QWORD *__return_ptr, __int128 *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *result;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t (*v31)(_QWORD *);
  char v32;
  char v33;
  void (*v35)(__int128 *__return_ptr, uint64_t *);
  void (*v36)(_QWORD *__return_ptr, __int128 *);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(__int128 *__return_ptr, _QWORD *);
  void (*v40)(__int128 *__return_ptr, _QWORD *);
  uint64_t v41;
  void (*v42)(uint64_t *__return_ptr, __int128 *);
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v2 = v1[5];
  v53 = v1[4];
  v54 = v2;
  v3 = v1[1];
  v50[0] = *v1;
  v50[1] = v3;
  v4 = v1[3];
  v6 = *v1;
  v5 = v1[1];
  v51 = v1[2];
  v52 = v4;
  v56 = v6;
  v57 = v5;
  v7 = *(_QWORD *)a1;
  v44 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = (void (*)(_QWORD *__return_ptr, __int128 *))*((_QWORD *)v1 + 13);
  v55 = *((_QWORD *)v1 + 12);
  v36 = v9;
  v35 = (void (*)(__int128 *__return_ptr, uint64_t *))*((_QWORD *)v1 + 15);
  v58 = v51;
  v59 = v4;
  v60 = *((_QWORD *)v1 + 8);
  v39 = (void (*)(__int128 *__return_ptr, _QWORD *))*((_QWORD *)&v53 + 1);
  v10 = *((_QWORD *)&v6 + 1);
  v11 = v6;
  v12 = v5;
  v41 = v4;
  v42 = (void (*)(uint64_t *__return_ptr, __int128 *))*((_QWORD *)&v51 + 1);
  v40 = (void (*)(__int128 *__return_ptr, _QWORD *))*((_QWORD *)&v4 + 1);
  v45 = v6;
  v46 = v5;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  v14 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  result = MEMORY[0x1C3BBF49C](v47, v13, v14);
  if (v7 == v47[0] && (v8 & 1) != 0)
    goto LABEL_28;
  v43 = v11;
  v38 = v13;
  while (2)
  {
    *(_QWORD *)&v45 = v11;
    *((_QWORD *)&v45 + 1) = v10;
    v46 = v12;
    result = MEMORY[0x1C3BBF49C](v47, v13, v14);
    if (v7 == v47[0] && (v8 & 1) != 0)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    while (1)
    {
      v7 = specialized FlattenSequence<>._index(after:)(v7, v44, v8 & 1);
      v44 = v16;
      *(_QWORD *)&v45 = v11;
      v18 = v17;
      *((_QWORD *)&v45 + 1) = v10;
      v46 = v12;
      MEMORY[0x1C3BBF49C](v47, v13, v14);
      v19 = (v7 == v47[0]) & v18;
      if (v19)
        break;
      v20 = v10;
      v21 = (uint64_t (*)(_QWORD *))*((_QWORD *)&v54 + 1);
      v22 = v7;
      v47[2] = v12;
      v48 = v7;
      v47[0] = v11;
      v47[1] = v20;
      v23 = v20;
      swift_retain();
      outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v50);
      v24 = LazyMapSequence<>.subscript.read(&v45, (uint64_t)&v48, v13);
      v26 = *v25;
      swift_bridgeObjectRetain();
      ((void (*)(__int128 *, _QWORD))v24)(&v45, 0);
      *(_QWORD *)&v45 = v26;
      v42(&v49, &v45);
      swift_bridgeObjectRelease();
      v47[0] = v49;
      v40(&v45, v47);
      result = (_QWORD *)swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
        goto LABEL_26;
      if ((v45 & 0xC000000000000001) != 0)
      {
        v27 = MEMORY[0x1C3BBF3F4](v44, v45);
        v11 = v43;
      }
      else
      {
        v11 = v43;
        if ((v44 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        if (v44 >= *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_25;
        v27 = *(_QWORD *)(v45 + 8 * v44 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      v47[0] = v27;
      v39(&v45, v47);
      swift_release();
      outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>((uint64_t)v50);
      v47[0] = v45;
      v28 = v21(v47);
      swift_release();
      swift_release();
      v8 = 0;
      v13 = v38;
      v10 = v23;
      v7 = v22;
      if ((v28 & 1) != 0)
      {
        v29 = 0;
        v19 = 0;
        goto LABEL_16;
      }
    }
    v29 = 1;
LABEL_16:
    *(_QWORD *)&v45 = v11;
    *((_QWORD *)&v45 + 1) = v10;
    v46 = v12;
    result = MEMORY[0x1C3BBF49C](v47, v13, v14);
    if (v7 == v47[0])
      v30 = v19;
    else
      v30 = 0;
    if ((v30 & 1) != 0)
    {
      v19 = 1;
    }
    else
    {
      v31 = *(uint64_t (**)(_QWORD *))(v37 + 136);
      outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v37);
      swift_retain();
      v47[0] = specialized FlattenSequence<>.subscript.getter(v7, v44, v29, v43, v10, v12, (void (*)(uint64_t *__return_ptr, _QWORD *))v42, v41, (void (*)(_QWORD *__return_ptr, _QWORD *))v40);
      v39(&v45, v47);
      swift_release();
      v36(v47, &v45);
      swift_release();
      v49 = v47[0];
      v35(&v45, &v49);
      swift_release();
      v13 = v38;
      outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(v37);
      v47[0] = v45;
      v32 = v31(v47);
      v11 = v43;
      v33 = v32;
      swift_release();
      result = (_QWORD *)swift_release();
      v8 = v19;
      if ((v33 & 1) == 0)
        continue;
    }
    break;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v44;
  *(_BYTE *)(a1 + 16) = v19;
  return result;
}

unint64_t *specialized LazyFilterSequence<>.formIndex(after:)(unint64_t *result)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t *);
  void (*v14)(_QWORD *__return_ptr, _QWORD);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(_QWORD *__return_ptr, _QWORD);
  unint64_t v21;
  unint64_t v22;

  v2 = (uint64_t)result;
  v3 = *v1;
  v4 = v1[2];
  v13 = (uint64_t (*)(uint64_t *))v1[3];
  v14 = (void (*)(_QWORD *__return_ptr, _QWORD))v1[1];
  v22 = v3;
  v19 = v3;
  v20 = v14;
  v21 = v4;
  v5 = *result;
  v18 = *result;
  v15 = v3 >> 62;
  if (v3 >> 62)
    goto LABEL_20;
  if (v5 != *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    do
    {
      v12 = (_QWORD *)v2;
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
      lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
      result = (unint64_t *)LazyMapSequence<>.formIndex(after:)();
      v6 = v18;
      if (v15)
      {
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        result = (unint64_t *)outlined release of [LNActionMetadata]((uint64_t)&v22);
        if (v6 == v7)
        {
LABEL_17:
          *v12 = v6;
          return result;
        }
      }
      else if (v18 == *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_17;
      }
      v5 = v3 & 0xC000000000000001;
      while (1)
      {
        if (v5)
        {
          swift_retain();
          outlined retain of [LNActionMetadata]((uint64_t)&v22);
          swift_retain();
          swift_retain();
          v8 = MEMORY[0x1C3BBF3F4](v6, v3);
          goto LABEL_14;
        }
        if ((v6 & 0x8000000000000000) != 0)
          break;
        if (v6 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_19;
        v8 = *(_QWORD *)(v3 + 32 + 8 * v6);
        swift_retain();
        outlined retain of [LNActionMetadata]((uint64_t)&v22);
        swift_retain();
        swift_retain();
        swift_retain();
LABEL_14:
        v16 = v8;
        v14(&v17, &v16);
        swift_release();
        outlined release of [LNActionMetadata]((uint64_t)&v22);
        swift_release();
        swift_release();
        v16 = v17;
        v9 = v13(&v16);
        swift_release();
        result = (unint64_t *)swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          goto LABEL_17;
        result = (unint64_t *)LazyMapSequence<>.formIndex(after:)();
        v6 = v18;
        if (v15)
        {
          swift_bridgeObjectRetain();
          v10 = _CocoaArrayWrapper.endIndex.getter();
          result = (unint64_t *)outlined release of [LNActionMetadata]((uint64_t)&v22);
          if (v6 == v10)
            goto LABEL_17;
        }
        else if (v18 == *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      outlined retain of [LNActionMetadata]((uint64_t)&v22);
      swift_retain();
      swift_retain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [LNActionMetadata]((uint64_t)&v22);
      swift_release();
      result = (unint64_t *)swift_release();
    }
    while (v5 != v11);
  }
  __break(1u);
  return result;
}

unint64_t specialized FlattenSequence<>.startIndex.getter()
{
  __int128 *v0;
  __int128 v1;
  void (*v2)(uint64_t *__return_ptr, __int128 *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t);
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(__int128 *__return_ptr, _QWORD *);
  void (*v16)(uint64_t *__return_ptr, __int128 *);
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[2];

  v1 = v0[1];
  v24 = *v0;
  v25 = v1;
  v2 = (void (*)(uint64_t *__return_ptr, __int128 *))*((_QWORD *)v0 + 5);
  v26 = *((_QWORD *)v0 + 4);
  v15 = (void (*)(__int128 *__return_ptr, _QWORD *))*((_QWORD *)v0 + 7);
  v16 = v2;
  v3 = v24;
  v4 = v1;
  v17 = *((_QWORD *)&v24 + 1);
  v18 = v24;
  v19 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  v6 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  MEMORY[0x1C3BBF49C](v20, v5, v6);
  v7 = v20[0];
  v8 = specialized LazyFilterSequence<>.startIndex.getter();
  v23 = v8;
  if (v8 == v7)
  {
LABEL_2:
    *(_QWORD *)&v18 = v3;
    *((_QWORD *)&v18 + 1) = v17;
    v19 = v4;
    MEMORY[0x1C3BBF49C](v20, v5, v6);
    return v20[0];
  }
  else
  {
    v9 = v8;
    while (1)
    {
      v20[2] = v4;
      v21 = v9;
      v20[0] = v3;
      v20[1] = v17;
      v10 = LazyMapSequence<>.subscript.read(&v18, (uint64_t)&v21, v5);
      v12 = *v11;
      swift_bridgeObjectRetain();
      ((void (*)(__int128 *, _QWORD))v10)(&v18, 0);
      *(_QWORD *)&v18 = v12;
      v16(&v22, &v18);
      swift_bridgeObjectRelease();
      v20[0] = v22;
      v15(&v18, v20);
      swift_bridgeObjectRelease();
      if ((unint64_t)v18 >> 62)
      {
        swift_bridgeObjectRetain();
        v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v13)
        break;
      v27[0] = v3;
      outlined retain of [LNActionMetadata]((uint64_t)v27);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized LazyFilterSequence<>.formIndex(after:)(&v23);
      outlined release of [LNActionMetadata]((uint64_t)v27);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v9 = v23;
      if (v23 == v7)
        goto LABEL_2;
    }
  }
  return v9;
}

uint64_t specialized FlattenSequence<>._index(after:)(unint64_t a1, uint64_t a2, char a3)
{
  __int128 *v3;
  __int128 v6;
  __int128 v7;
  void (*v8)(uint64_t *__return_ptr, unint64_t *);
  void (*v9)(unint64_t *__return_ptr, __int128 *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *);
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v6 = v3[3];
  v35 = v3[2];
  v36 = v6;
  v37 = *((_QWORD *)v3 + 8);
  v7 = v3[1];
  v33 = *v3;
  v34 = v7;
  v38 = v33;
  v39 = v7;
  v40 = *((_QWORD *)v3 + 4);
  v8 = (void (*)(uint64_t *__return_ptr, unint64_t *))*((_QWORD *)&v35 + 1);
  v9 = (void (*)(unint64_t *__return_ptr, __int128 *))*((_QWORD *)&v6 + 1);
  v24 = v33;
  v29 = v33;
  v22 = *((_QWORD *)&v33 + 1);
  v10 = v7;
  v30 = v7;
  v31 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  v23 = lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  v12 = LazyMapSequence<>.subscript.read(&v26, (uint64_t)&v31, v11);
  v14 = *v13;
  swift_bridgeObjectRetain();
  ((void (*)(unint64_t *, _QWORD))v12)(&v26, 0);
  v26 = v14;
  v8(&v32, &v26);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v29 = v32;
  v9(&v26, &v29);
  result = swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    __break(1u);
    return result;
  }
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v26 >> 62)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v16 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v17 = a1;
  swift_bridgeObjectRelease();
  if (a2 + 1 == v16)
  {
    *(_QWORD *)&v29 = v24;
    v26 = a1;
    outlined retain of [LNActionMetadata]((uint64_t)&v29);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    specialized LazyFilterSequence<>.formIndex(after:)(&v26);
    outlined release of [LNActionMetadata]((uint64_t)&v29);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v17 = v26;
    v32 = v26;
    v26 = v24;
    v27 = v22;
    v28 = v10;
    MEMORY[0x1C3BBF49C](&v31, v11, v23);
    if (v17 == v31)
    {
LABEL_10:
      v26 = v24;
      v27 = v22;
      v28 = v10;
      MEMORY[0x1C3BBF49C](&v31, v11, v23);
      return v31;
    }
    else
    {
      while (1)
      {
        outlined retain of [LNActionMetadata]((uint64_t)&v29);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>);
        lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>, lazy protocol witness table accessor for type LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>, MEMORY[0x1E0DEC860]);
        v18 = specialized protocol witness for Collection.subscript.read in conformance <> LazyMapSequence<A, B>(&v26, v17);
        v20 = *v19;
        swift_bridgeObjectRetain();
        ((void (*)(unint64_t *, _QWORD))v18)(&v26, 0);
        outlined release of [LNActionMetadata]((uint64_t)&v29);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (v20 >> 62)
        {
          swift_bridgeObjectRetain();
          v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v21)
          break;
        outlined retain of [LNActionMetadata]((uint64_t)&v29);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        specialized LazyFilterSequence<>.formIndex(after:)((unint64_t *)&v32);
        outlined release of [LNActionMetadata]((uint64_t)&v29);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v17 = v32;
        v26 = v24;
        v27 = v22;
        v28 = v10;
        MEMORY[0x1C3BBF49C](&v31, v11, v23);
        if (v17 == v31)
          goto LABEL_10;
      }
    }
  }
  return v17;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = a1[1];
  if (result)
  {
    *a2 = *a1;
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(_QWORD *a1)
{
  return *a1 != 0;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized CallBusinessNoResultsExperiencesResolver.getUsoTask(_:)()
{
  unint64_t result;
  unint64_t v1;
  uint64_t v2;

  result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v1 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = MEMORY[0x1C3BBF3F4](0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized CallBusinessNoResultsExperiencesResolver.convertToCommonPhoneCallEntity(task:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12[4];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE v16[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v16, (uint64_t)v14);
  if (v15)
  {
    outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Target<UsoEntity_common_PhoneCall>);
    if (swift_dynamicCast()
      || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Reference<UsoEntity_common_PhoneCall>),
          swift_dynamicCast())
      || (__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTarget<UsoEntity_common_PhoneCall>),
          swift_dynamicCast()))
    {
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      swift_release();
      outlined destroy of Any?((uint64_t)v16);
      v0 = v11;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    v12[0] = v5;
    *(_DWORD *)v4 = 136315394;
    v6 = UsoTask.verbString.getter();
    v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v8 = UsoTask.baseEntityAsString.getter();
    v13 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v2, v3, "Cannot transform UsoTask to task with common_PhoneCall: <UsoTask verbString: %s entityString: %s>", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v5, -1, -1);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of Any?((uint64_t)v16);
  v0 = 0;
LABEL_14:
  outlined destroy of Any?((uint64_t)v14);
  return v0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v4 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1C3BBF3F4](i - 4, a1);
          v5 = i - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_15;
        }
        else
        {
          swift_retain();
          v5 = i - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        v6 = specialized CallBusinessNoResultsExperiencesResolver.convertToCommonPhoneCallEntity(task:)();
        v7 = swift_release();
        if (v6)
        {
          MEMORY[0x1C3BBEE78](v7);
          if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v5 == v2)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

unint64_t lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UsoEntity_common_PhoneCall]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A]);
  }
  return result;
}

uint64_t outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>, UsoEntity_common_Person>, String?>>, String>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #9 in CallBusinessNoResultsExperiencesResolver.buildExperiences(from:with:)()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    swift_bridgeObjectRetain();
    return Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.setter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6FC88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams and conformance Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams);
  }
  return result;
}

ValueMetadata *type metadata accessor for CallBusinessNoResultsExperiencesResolver()
{
  return &type metadata for CallBusinessNoResultsExperiencesResolver;
}

uint64_t outlined retain of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized FlattenSequence<>.subscript.getter(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, _QWORD *), uint64_t a8, void (*a9)(_QWORD *__return_ptr, _QWORD *))
{
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[4];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v19[2] = a6;
  v20 = a1;
  v19[0] = a4;
  v19[1] = a5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>);
  lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A]();
  v13 = LazyMapSequence<>.subscript.read(v18, (uint64_t)&v20, v12);
  v15 = *v14;
  swift_bridgeObjectRetain();
  ((void (*)(_QWORD *, _QWORD))v13)(v18, 0);
  v18[0] = v15;
  a7(&v21, v18);
  swift_bridgeObjectRelease();
  v19[0] = v21;
  a9(v18, v19);
  result = swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
  {
    if ((v18[0] & 0xC000000000000001) != 0)
    {
      v17 = MEMORY[0x1C3BBF3F4](a2, v18[0]);
      goto LABEL_6;
    }
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v18[0] & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
    {
      v17 = *(_QWORD *)(v18[0] + 8 * a2 + 32);
      swift_retain();
LABEL_6:
      swift_bridgeObjectRelease();
      return v17;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LazyFilterSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<FlattenSequence<LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]>>, UsoEntity_common_Agent?>>, UsoEntity_common_Agent>, UsoEntity_common_Person?>>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>()
{
  return lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, lazy protocol witness table accessor for type LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>> and conformance <> LazyFilterSequence<A>, MEMORY[0x1E0DEC860]);
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1C3BBFE74](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>> and conformance <> LazyFilterSequence<A>()
{
  return lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>> and conformance <> LazyFilterSequence<A>, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, lazy protocol witness table accessor for type LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?> and conformance <> LazyMapSequence<A, B>, MEMORY[0x1E0DECCB0]);
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?> and conformance <> LazyMapSequence<A, B>()
{
  return lazy protocol witness table accessor for type LazyMapSequence<LazyMapSequence<LazyFilterSequence<LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>>, [CodeGenListEntry<UsoEntity_common_Agent>]>, [CodeGenListEntry<UsoEntity_common_Agent>]> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<[UsoEntity_common_PhoneCall], [CodeGenListEntry<UsoEntity_common_Agent>]?>, (uint64_t (*)(void))lazy protocol witness table accessor for type [UsoEntity_common_PhoneCall] and conformance [A], MEMORY[0x1E0DEC860]);
}

id AudioQueueStateManager.__allocating_init(queueStateObserver:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = __swift_mutable_project_boxed_opaque_existential_1(a1, v4);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  v10 = specialized AudioQueueStateManager.init(queueStateObserver:)((uint64_t)v8, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

void SOMediaNowPlayingObserver.register(_:)(uint64_t a1, uint64_t a2)
{
  SOMediaNowPlayingObserver.register(_:)(a1, a2, (SEL *)&selRef_addListener_, "SOMediaNowPlayingObserver : Nothing to register");
}

void SOMediaNowPlayingObserver.unregister(_:)(uint64_t a1, uint64_t a2)
{
  SOMediaNowPlayingObserver.register(_:)(a1, a2, (SEL *)&selRef_removeListener_, "SOMediaNowPlayingObserver : Nothing to unregister");
}

void SOMediaNowPlayingObserver.register(_:)(uint64_t a1, uint64_t a2, SEL *a3, const char *a4)
{
  void *v4;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  if (a1)
  {
    objc_msgSend(v4, *a3, a1);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    oslog = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1C2356000, oslog, v7, a4, v8, 2u);
      MEMORY[0x1C3BBFF64](v8, -1, -1);
    }

  }
}

id protocol witness for MediaNowPlayingObserving.playbackState.getter in conformance SOMediaNowPlayingObserver()
{
  id *v0;

  return objc_msgSend(*v0, sel_playbackState);
}

void protocol witness for MediaNowPlayingObserving.register(_:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2)
{
  SOMediaNowPlayingObserver.register(_:)(a1, a2);
}

void protocol witness for MediaNowPlayingObserving.unregister(_:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2)
{
  SOMediaNowPlayingObserver.unregister(_:)(a1, a2);
}

void *one-time initialization function for mediaTypeMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(unint64_t, uint64_t, uint64_t);
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType)>);
  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType));
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FE760;
  result = (void *)*MEMORY[0x1E0D4C908];
  if (!*MEMORY[0x1E0D4C908])
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = (uint64_t *)(v4 + v3);
  v7 = v4 + v3 + *(int *)(v0 + 48);
  *v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6[1] = v8;
  v9 = *MEMORY[0x1E0D6FDE8];
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType();
  v11 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104);
  v11(v7, v9, v10);
  result = (void *)*MEMORY[0x1E0D4C910];
  if (!*MEMORY[0x1E0D4C910])
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = (uint64_t *)((char *)v6 + v2);
  v13 = (char *)v6 + v2 + *(int *)(v0 + 48);
  *v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12[1] = v14;
  v11((unint64_t)v13, *MEMORY[0x1E0D6FDF0], v10);
  result = (void *)*MEMORY[0x1E0D4C8F0];
  if (!*MEMORY[0x1E0D4C8F0])
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = (uint64_t *)((char *)v6 + 2 * v2);
  v16 = (char *)v15 + *(int *)(v0 + 48);
  *v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15[1] = v17;
  v11((unint64_t)v16, *MEMORY[0x1E0D6FDF8], v10);
  result = (void *)*MEMORY[0x1E0D4C900];
  if (!*MEMORY[0x1E0D4C900])
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v18 = (uint64_t *)((char *)v6 + 3 * v2);
  v19 = (char *)v18 + *(int *)(v0 + 48);
  *v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18[1] = v20;
  v21 = *MEMORY[0x1E0D6FDE0];
  v11((unint64_t)v19, v21, v10);
  result = (void *)*MEMORY[0x1E0D4C8F8];
  if (*MEMORY[0x1E0D4C8F8])
  {
    v22 = (uint64_t *)((char *)v6 + 4 * v2);
    v23 = (char *)v22 + *(int *)(v0 + 48);
    *v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22[1] = v24;
    v11((unint64_t)v23, v21, v10);
    result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v4);
    static AudioQueueStateManager.mediaTypeMap = result;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

id AudioQueueStateManager.init(queueStateObserver:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized AudioQueueStateManager.init(queueStateObserver:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

Swift::Void __swiftcall AudioQueueStateManager.registerObserver()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 24);
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver), v2);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v3 + 32))(v0, &protocol witness table for AudioQueueStateManager, v2, v3);
    *(_BYTE *)(v0 + v1) = 1;
  }
}

Swift::Void __swiftcall AudioQueueStateManager.unregisterObserver()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;

  v1 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered) == 1)
  {
    v2 = v0;
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 24);
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver), v3);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v4 + 40))(v0, &protocol witness table for AudioQueueStateManager, v3, v4);
    *(_BYTE *)(v0 + v1) = 0;
    v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache;
    *(_QWORD *)v5 = 0;
    *(_BYTE *)(v5 + 8) = 1;
    v6 = *(void **)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache) = 0;

    *(_QWORD *)v5 = 0;
    *(_BYTE *)(v5 + 8) = 1;
    v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache);
    *v7 = 0;
    v7[1] = 0;
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall AudioQueueStateManager.wait()()
{
  OS_dispatch_group.wait()();
}

uint64_t AudioQueueStateManager.nowPlayingObserver(_:playbackStateDidChangeFrom:to:lastPlaying:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t);
  id v10;
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;

  if (a1)
  {
    *((_QWORD *)&v13 + 1) = type metadata accessor for SOMediaNowPlayingObserver();
    v14 = &protocol witness table for SOMediaNowPlayingObserver;
    *(_QWORD *)&v12 = a1;
  }
  else
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
  }
  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x130);
  v10 = a1;
  v9(&v12, a2, a3, a4);
  return outlined destroy of MediaUserStateCenter?((uint64_t)&v12, &demangling cache variable for type metadata for MediaNowPlayingObserving?);
}

id AudioQueueStateManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AudioQueueStateManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AudioQueueStateManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioQueueStateManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for MediaNowPlayingListening.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:) in conformance AudioQueueStateManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

id specialized AudioQueueStateManager.init(queueStateObserver:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  id v13;
  objc_super v15;
  uint64_t v16[5];

  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  v8 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup;
  v9 = a2;
  *(_QWORD *)&a2[v8] = dispatch_group_create();
  v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered] = 0;
  v10 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)&v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache] = 0;
  v11 = &v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  outlined init with copy of AppDataProviding((uint64_t)v16, (uint64_t)&v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver]);

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for AudioQueueStateManager();
  v13 = objc_msgSendSuper2(&v15, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v13;
}

uint64_t sub_1C249D69C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C249D6C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C249D768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for AudioQueueStateManager()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of MediaNowPlayingListening.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.playbackState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.getNowPlayingInfoForCurrentItem(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.getNowPlayingApplicationBundleIdentifier(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of MediaNowPlayingObserving.unregister(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t method lookup function for AudioQueueStateManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioQueueStateManager.__allocating_init(queueStateObserver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of AudioQueueStateManager.registerObserver()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AudioQueueStateManager.unregisterObserver()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AudioQueueStateManager.wait()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AudioQueueStateManager.wait(timeout:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))() & 1;
}

uint64_t dispatch thunk of AudioQueueStateManager.nowPlayingObserver(_:playbackStateDidChangeFrom:to:lastPlaying:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AudioQueueStateManager.currentQueueState()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

__n128 DefaultExperiencesResolver.init(sportsPersonalizationResolver:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t partial apply for closure #2 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = specialized static SportsPersonalizationExperiencesResolver.isSupportedPersonalizationInstruction(_:)(*(_QWORD *)(v1 + 16));
  *a1 = result & 1;
  return result;
}

uint64_t closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)(a1, (uint64_t)v6);
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for ClientExperienceSignals?);
  *a2 = v8;
  return result;
}

BOOL partial apply for closure #4 in DefaultExperiencesResolver.buildExperiences(from:with:)@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = static SportsPersonalizationExperiencesResolver.hasPersonalizationInstruction(_:)();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:)(*(_QWORD *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for DefaultExperiencesResolver()
{
  return &type metadata for DefaultExperiencesResolver;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVys10ArraySliceVySSGG_SS6itemId_SSSg5value10PegasusAPI39Apple_Parsec_Siri_V2alpha_AudioItemTypeO0hS0ts5NeverOTg5011_sSiS3SSg10k5API39m1_n1_o1_p1_qrs37OIgygoor_Si6offset_SS7elementtSS6itemi18_AA5valueAD0lI0ts5t192OIegnrzr_TR04_s21e19InformationSearch18gh74CandidateC14auxTitleFields33_39A65E8D769182CAD4F711B84F5C7A7FLL5title8itemi8SaySS0T2m13_SSSg5value10a6API013c1_d4_a9_F40_deU0OAGtGSS_AMtFZSSAH_AijmGtV19_SStXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (_QWORD *)((char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v11 = v35;
  v12 = a4 >> 1;
  v25[1] = a1;
  result = swift_unknownObjectRetain();
  if (a4 >> 1 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease();
    return v11;
  }
  else
  {
    v14 = 0;
    v27 = *MEMORY[0x1E0D6E9A0];
    v15 = (uint64_t *)(a2 + 16 * a3 + 8);
    v26 = a3 - v12;
    v28 = a4 >> 1;
    v29 = a3;
    while (a3 + v14 < v12)
    {
      if (__OFADD__(v14, 1))
        goto LABEL_11;
      v17 = *(v15 - 1);
      v16 = *v15;
      v18 = (char *)v10 + *(int *)(v31 + 64);
      v32 = v14;
      v33 = 0x656C746954787561;
      v34 = 0xE800000000000000;
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20 = v33;
      v21 = v34;
      v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v18, v27, v22);
      *v10 = v20;
      v10[1] = v21;
      v10[2] = v17;
      v10[3] = v16;
      v35 = v11;
      v24 = *(_QWORD *)(v11 + 16);
      v23 = *(_QWORD *)(v11 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v11 = v35;
      }
      *(_QWORD *)(v11 + 16) = v24 + 1;
      result = outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)((uint64_t)v10, v11+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v24);
      ++v14;
      v15 += 2;
      v12 = v28;
      a3 = v29;
      if (!(v26 + v14))
        goto LABEL_2;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t AudioItemCandidate.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioItemCandidate.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioItemCandidate.artist.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioItemCandidate.itemType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioItemCandidate.source.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source);
}

uint64_t AudioItemCandidate.requiresSubscription.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription);
}

uint64_t AudioItemCandidate.isDownloaded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded);
}

float AudioItemCandidate.score.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.score.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.score.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

id AudioItemCandidate.features.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features);
  swift_beginAccess();
  return *v1;
}

void AudioItemCandidate.features.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*AudioItemCandidate.features.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.fields(localizedTokenizer:)(void *a1)
{
  uint64_t v1;

  return specialized static AudioItemCandidate.internalFields(title:artist:itemType:localizedTokenizer:)(*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title), *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title + 8), *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist), *(uint8_t **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8), v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, a1);
}

uint64_t AudioItemCandidate.leetDecodedFields(localizedTokenizer:)(void *a1)
{
  uint64_t v1;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;

  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  v3 = *(uint8_t **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8);
  if (v3)
  {
    v5 = specialized static AudioItemCandidate.leetDecode(leetText:)(*(_QWORD *)(v1
                                                                               + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist));
    v7 = v6;
  }
  else
  {
    v7 = 0;
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  }
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title + 8);
  v11 = specialized static AudioItemCandidate.leetDecode(leetText:)(v8);
  v12 = v10;
  v13 = v11 == v8 && v10 == v9;
  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (v7)
    {
      if (v3)
      {
        v14 = v5 == v4 && v7 == v3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_19;
      }
    }
    else if (!v3)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  v15 = specialized static AudioItemCandidate.internalFields(title:artist:itemType:localizedTokenizer:)(v11, v12, v5, v7, v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t AudioItemCandidate.nonOptionalFieldCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D6E988], v2);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, v3, MEMORY[0x1E0D6E9D8]);
  LOBYTE(v3) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  if ((v3 & 1) == 0
    && (v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8)) != 0
    && ((v7 & 0x2000000000000000) != 0
      ? (v8 = HIBYTE(v7) & 0xF)
      : (v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist) & 0xFFFFFFFFFFFFLL),
        v8))
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

id AudioItemCandidate.Features.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AudioItemCandidate.init(backingItem:source:identifier:title:artist:itemType:requiresSubscription:isDownloaded:features:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, uint64_t a12)
{
  _BYTE *v12;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  objc_super v29;

  v20 = a2 & 1;
  *(_DWORD *)&v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score] = 1065353216;
  outlined init with copy of AudioItemCandidate.BackingItem(a1, (uint64_t)&v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_backingItem]);
  v21 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier];
  *v21 = a3;
  v21[1] = a4;
  v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source] = v20;
  v22 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title];
  *v22 = a5;
  v22[1] = a6;
  v23 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist];
  *v23 = a7;
  v23[1] = a8;
  v24 = &v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType];
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, a9, v25);
  v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription] = a10;
  v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded] = a11;
  *(_QWORD *)&v12[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features] = a12;
  v29.receiver = v12;
  v29.super_class = (Class)type metadata accessor for AudioItemCandidate(0);
  v27 = objc_msgSendSuper2(&v29, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a9, v25);
  outlined destroy of AudioItemCandidate.BackingItem(a1);
  return v27;
}

id AudioItemCandidate.__allocating_init(serverResult:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  swift_storeEnumTagMultiPayload();
  v10 = Apple_Parsec_Siri_V2alpha_AudioItem.identifier.getter();
  v24 = v11;
  v25 = v10;
  v23 = Apple_Parsec_Siri_V2alpha_AudioItem.title.getter();
  v13 = v12;
  v14 = Apple_Parsec_Siri_V2alpha_AudioItem.artist.getter();
  v16 = v15;
  Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
  v17 = Apple_Parsec_Siri_V2alpha_AudioItem.requiresSubscription.getter();
  v18 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate.Features()), sel_init);
  v19 = objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate(0));
  v20 = AudioItemCandidate.init(backingItem:source:identifier:title:artist:itemType:requiresSubscription:isDownloaded:features:)((uint64_t)v7, 0, v25, v24, v23, v13, v14, v16, (uint64_t)v4, v17 & 1, 0, (uint64_t)v18);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v20;
}

uint64_t AudioItemCandidate.deduplicationKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned __int128 v6;
  Swift::String v7;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  unsigned __int128 v19;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (unsigned __int128)String.lowercased()();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8))
  {
    v7 = String.lowercased()();
    countAndFlagsBits = v7._countAndFlagsBits;
    object = v7._object;
  }
  else
  {
    countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
  }
  v19 = v6;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = countAndFlagsBits;
  v10._object = object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = (Swift::String)v19;
  v12 = v13._object;
  v11 = v13._countAndFlagsBits;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, v2);
  v14 = String.init<A>(describing:)();
  v16 = v15;
  v19 = __PAIR128__((unint64_t)v12, v11);
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t AudioItemCandidate.toAudioResult()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t EnumCaseMultiPayload;
  void *v13;
  void (*v14)(void **, void **, uint64_t);
  char v15;
  uint64_t v16;
  void (*v17)(void **, void **, uint64_t);
  _BYTE v19[16];

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (void **)&v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = (void **)&v19[-v7];
  v9 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (void **)&v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of AudioItemCandidate.BackingItem(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_backingItem, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v13 = *v11;
    MEMORY[0x1E0C80A78](EnumCaseMultiPayload);
    *(_QWORD *)&v19[-16] = v1;
    *(_QWORD *)&v19[-8] = v13;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItem and conformance Apple_Parsec_Siri_V2alpha_AudioItem, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E058], MEMORY[0x1E0D6E000]);
    static Message.with(_:)();

    v14 = *(void (**)(void **, void **, uint64_t))(v3 + 32);
    v14(v6, v8, v2);
    v15 = *(_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded);
    type metadata accessor for AudioResult();
    v16 = swift_allocObject();
    *(_BYTE *)(v16 + 16) = 2;
    *(_QWORD *)(v16 + 24) = 0;
    *(_BYTE *)(v16 + 32) = 0;
    v14((void **)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem), v6, v2);
    *(_BYTE *)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = v15;
  }
  else
  {
    v17 = *(void (**)(void **, void **, uint64_t))(v3 + 32);
    v17(v8, v11, v2);
    type metadata accessor for AudioResult();
    v16 = swift_allocObject();
    *(_BYTE *)(v16 + 16) = 1;
    *(_QWORD *)(v16 + 24) = 0;
    *(_BYTE *)(v16 + 32) = 0;
    v17((void **)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem), v8, v2);
    *(_BYTE *)(v16 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = 0;
  }
  return v16;
}

uint64_t closure #1 in AudioItemCandidate.toAudioResult()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v9;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_AudioItem.identifier.setter();
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_AudioItem.title.setter();
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_AudioItem.artist.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, v3);
  Apple_Parsec_Siri_V2alpha_AudioItem.type.setter();
  v7 = (void *)ClientAudioResult.vocabularyResult.getter();
  VocabularyResult.userId.getter();

  return Apple_Parsec_Siri_V2alpha_AudioItem.sharedUserIDFromPlayableMusicAccount.setter();
}

float AudioItemCandidate.Features.audioTypeMatch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_audioTypeMatch;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.audioTypeMatch.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_audioTypeMatch);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.audioTypeMatch.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.glideModifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_glideModifier;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.glideModifier.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_glideModifier);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.glideModifier.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.sourceMatchFactor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceMatchFactor;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.sourceMatchFactor.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceMatchFactor);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.sourceMatchFactor.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.fieldMatchScores.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t AudioItemCandidate.Features.fieldMatchScores.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_fieldMatchScores);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AudioItemCandidate.Features.fieldMatchScores.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.maxFieldCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_maxFieldCount;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t AudioItemCandidate.Features.maxFieldCount.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_maxFieldCount);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.maxFieldCount.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.optionalFieldCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_optionalFieldCount;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t AudioItemCandidate.Features.optionalFieldCount.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_optionalFieldCount);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.optionalFieldCount.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.combinedTextMatchScore.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_combinedTextMatchScore;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.combinedTextMatchScore.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_combinedTextMatchScore);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.combinedTextMatchScore.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.sourceTypePriority.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceTypePriority;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.sourceTypePriority.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceTypePriority);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.sourceTypePriority.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

float AudioItemCandidate.Features.downloadedBoostFactor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_downloadedBoostFactor;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t AudioItemCandidate.Features.downloadedBoostFactor.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_downloadedBoostFactor);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AudioItemCandidate.Features.downloadedBoostFactor.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AudioItemCandidate.Features.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  _StringGuts.grow(_:)(223);
  v1._object = (void *)0x80000001C2508150;
  v1._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v1);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
  Float.write<A>(to:)();
  v3._countAndFlagsBits = 0xD000000000000014;
  v3._object = (void *)0x80000001C2508170;
  String.append(_:)(v3);
  (*(void (**)(void))((*v2 & *v0) + 0xB0))();
  Float.write<A>(to:)();
  v4._object = (void *)0x80000001C2508190;
  v4._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  (*(void (**)(void))((*v2 & *v0) + 0xC8))();
  Float.write<A>(to:)();
  v5._countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001C25081B0;
  String.append(_:)(v5);
  v6 = (*(uint64_t (**)(void))((*v2 & *v0) + 0xE0))();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (textMatchScore: Float, itemTypeMatchScore: Float));
  v8._countAndFlagsBits = MEMORY[0x1C3BBEE9C](v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000016;
  v9._object = (void *)0x80000001C25081D0;
  String.append(_:)(v9);
  (*(void (**)(void))((*v2 & *v0) + 0xF8))();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x3D74706F202CLL;
  v11._object = (void *)0xE600000000000000;
  String.append(_:)(v11);
  (*(void (**)(void))((*v2 & *v0) + 0x110))();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD00000000000001DLL;
  v13._object = (void *)0x80000001C25081F0;
  String.append(_:)(v13);
  (*(void (**)(void))((*v2 & *v0) + 0x128))();
  Float.write<A>(to:)();
  v14._countAndFlagsBits = 0xD000000000000019;
  v14._object = (void *)0x80000001C2508210;
  String.append(_:)(v14);
  (*(void (**)(void))((*v2 & *v0) + 0x140))();
  Float.write<A>(to:)();
  v15._countAndFlagsBits = 0xD00000000000001CLL;
  v15._object = (void *)0x80000001C2508230;
  String.append(_:)(v15);
  (*(void (**)(void))((*v2 & *v0) + 0x158))();
  Float.write<A>(to:)();
  v16._countAndFlagsBits = 2099257354;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  return 0;
}

id AudioItemCandidate.Features.init()()
{
  char *v0;
  objc_super v2;

  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_audioTypeMatch] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_glideModifier] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceMatchFactor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_fieldMatchScores] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_maxFieldCount] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_optionalFieldCount] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_combinedTextMatchScore] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_sourceTypePriority] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtCC21SiriInformationSearch18AudioItemCandidate8Features_downloadedBoostFactor] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioItemCandidate.Features();
  return objc_msgSendSuper2(&v2, sel_init);
}

id AudioItemCandidate.Features.__deallocating_deinit(uint64_t a1)
{
  return AudioItemCandidate.Features.__deallocating_deinit(a1, type metadata accessor for AudioItemCandidate.Features);
}

SiriInformationSearch::AudioItemCandidate::Source_optional __swiftcall AudioItemCandidate.Source.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriInformationSearch::AudioItemCandidate::Source_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AudioItemCandidate.Source.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriInformationSearch_AudioItemCandidate_Source_client;
  else
    v4.value = SiriInformationSearch_AudioItemCandidate_Source_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t AudioItemCandidate.Source.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E65696C63;
  else
    return 0x726576726573;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioItemCandidate.Source(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*a1)
    v2 = 0x746E65696C63;
  else
    v2 = 0x726576726573;
  if (*a2)
    v3 = 0x746E65696C63;
  else
    v3 = 0x726576726573;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioItemCandidate.Source()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioItemCandidate.Source()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioItemCandidate.Source()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AudioItemCandidate.Source@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AudioItemCandidate.Source.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AudioItemCandidate.Source(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x726576726573;
  if (*v1)
    v2 = 0x746E65696C63;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

id @objc AudioItemCandidate.Features.description.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  v8 = (void *)MEMORY[0x1C3BBEC44](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t AudioItemCandidate.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  _QWORD *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;

  _StringGuts.grow(_:)(43);
  v1._countAndFlagsBits = 0x74616469646E6163;
  v1._object = (void *)0xED0000207B203A65;
  String.append(_:)(v1);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3._countAndFlagsBits = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x65726F637320200ALL;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  (*(void (**)(void))((*v2 & *v0) + 0xA0))();
  Float.write<A>(to:)();
  v5._countAndFlagsBits = 0x757461656620200ALL;
  v5._object = (void *)0xEC0000003A736572;
  String.append(_:)(v5);
  v6 = (void *)(*(uint64_t (**)(void))((*v2 & *v0) + 0xB8))();
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32010;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t AudioItemCandidate.summary.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;

  v1 = v0;
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier);
  v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier + 8);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x656C74697420200ALL;
  v5._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v5);
  v6 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title);
  v7 = *(void **)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title + 8);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x7473697472612022;
  v9._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v9);
  v10 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8);
  if (v10)
    v11 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist);
  else
    v11 = 0;
  if (v10)
    v12 = *(void **)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist + 8);
  else
    v12 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6570797420200A22;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  _print_unlocked<A, B>(_:_:)();
  v15._countAndFlagsBits = 0xD00000000000001ALL;
  v15._object = (void *)0x80000001C2508250;
  String.append(_:)(v15);
  v28._countAndFlagsBits = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x6372756F7320200ALL;
  v17._object = (void *)0xEC000000203A2065;
  String.append(_:)(v17);
  v18 = *((_BYTE *)v0 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source);
  if (v18)
    v19 = 0x746E65696C63;
  else
    v19 = 0x726576726573;
  v20 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 0xD000000000000010;
      v28._object = (void *)0x80000001C2508270;
      v22 = *((_BYTE *)v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded) == 0;
      goto LABEL_15;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v23 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription);
  strcpy((char *)&v28, "\n  subReq'd : ");
  HIBYTE(v28._object) = -18;
  v22 = v23 == 0;
LABEL_15:
  if (v22)
    v24 = 0x65736C6166;
  else
    v24 = 1702195828;
  if (v22)
    v25 = 0xE500000000000000;
  else
    v25 = 0xE400000000000000;
  v26 = v25;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD **v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v21 = a11;
  v20 = a12;
  v22 = type metadata accessor for CharacterSet();
  v50 = *(_QWORD *)(v22 - 8);
  v51 = v22;
  MEMORY[0x1E0C80A78](v22);
  v24 = (uint64_t *)((char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = (_QWORD **)(a15 + 16);
  v26 = String.UTF16View.index(_:offsetBy:)();
  v27 = (_QWORD *)v26;
  if ((a10 & 1) == 0)
  {
    v52 = v26;
    swift_beginAccess();
    v28 = *(_QWORD *)(a13 + 16);
    v29 = a5;
    if (!a5)
    {
      swift_bridgeObjectRetain();
      a4 = a2;
      v29 = a3;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = specialized Set.contains(_:)(a4, v29, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = (_QWORD *)v52;
    if ((v30 & 1) != 0)
    {
      swift_beginAccess();
      v31 = *(_QWORD *)(a14 + 16);
      swift_beginAccess();
      v32 = *v25;
      if ((unint64_t)*v25 >> 14 >= v31 >> 14)
      {
        swift_bridgeObjectRetain();
        v33 = MEMORY[0x1C3BBEDDC](v31, v32, a11, a12);
        v35 = v34;
        v37 = v36;
        v39 = v38;
        swift_bridgeObjectRelease();
        v40 = MEMORY[0x1C3BBEE0C](v33, v35, v37, v39);
        v27 = (_QWORD *)v52;
        if (v41)
        {
          v53 = v40;
          v54 = v41;
          static CharacterSet.whitespacesAndNewlines.getter();
          lazy protocol witness table accessor for type String and conformance String();
          v21 = StringProtocol.trimmingCharacters(in:)();
          v20 = v42;
          (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v24, v51);
          swift_bridgeObjectRelease();
          v43 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0)
            v43 = v21 & 0xFFFFFFFFFFFFLL;
          if (v43)
          {
            v32 = (_QWORD *)(a16 + 16);
            swift_beginAccess();
            v24 = *(_QWORD **)(a16 + 16);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(a16 + 16) = v24;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
LABEL_11:
              v46 = v24[2];
              v45 = v24[3];
              if (v46 >= v45 >> 1)
              {
                v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v24);
                *v32 = v24;
              }
              v24[2] = v46 + 1;
              v47 = &v24[2 * v46];
              v47[4] = v21;
              v47[5] = v20;
              swift_endAccess();
              v27 = (_QWORD *)v52;
              goto LABEL_15;
            }
LABEL_18:
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
            *v32 = v24;
            goto LABEL_11;
          }
          swift_bridgeObjectRelease();
        }
LABEL_15:
        swift_beginAccess();
        *(_QWORD *)(a14 + 16) = v27;
        goto LABEL_16;
      }
      __break(1u);
      goto LABEL_18;
    }
  }
LABEL_16:
  result = swift_beginAccess();
  *v25 = v27;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UInt32, @guaranteed String, @guaranteed String?, @guaranteed [String]?, @unowned UInt32, @unowned UInt32, @unowned Bool, @unowned Bool) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, char a8, char a9)
{
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v20;

  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16))(a1 + 32);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;
  if (!a4)
  {
    v17 = 0;
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  a4 = v18;
  if (a5)
LABEL_3:
    a5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  swift_retain();
  HIBYTE(v20) = a9;
  LOBYTE(v20) = a8;
  v13(a2, v14, v16, v17, a4, a5, a6, a7, v20);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void AudioItemCandidate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AudioItemCandidate.__deallocating_deinit()
{
  return AudioItemCandidate.Features.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for AudioItemCandidate);
}

id AudioItemCandidate.Features.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = String.index(after:)();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = String.subscript.getter();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = String.index(after:)();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = String.subscript.getter();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AudioItemCandidate.BackingItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  void *v19;
  void *v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (void **)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v24 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem));
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void **)&v17[*(int *)(v15 + 48)];
  outlined init with copy of AudioItemCandidate.BackingItem(a1, (uint64_t)v17);
  outlined init with copy of AudioItemCandidate.BackingItem(a2, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AudioItemCandidate.BackingItem((uint64_t)v17, (uint64_t)v11);
    v19 = *v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = *v18;
      type metadata accessor for NSObject();
      v21 = static NSObject.== infix(_:_:)();

LABEL_9:
      outlined destroy of AudioItemCandidate.BackingItem((uint64_t)v17);
      return v21 & 1;
    }

  }
  else
  {
    outlined init with copy of AudioItemCandidate.BackingItem((uint64_t)v17, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v7, v18, v4);
      v21 = static Apple_Parsec_Siri_V2alpha_AudioItem.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v7, v4);
      v22(v13, v4);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }
  outlined destroy of (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem)((uint64_t)v17);
  v21 = 0;
  return v21 & 1;
}

uint64_t specialized static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(void *a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  BOOL v20;
  void *v21;
  BOOL v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int, unsigned int, char, char);
  void *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  _QWORD v60[2];
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  _QWORD *v67;
  id v68;
  uint64_t v69;
  uint64_t aBlock;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int, unsigned int, char, char);
  void *v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, char);
  _QWORD *v75;

  v65 = a3;
  v63 = type metadata accessor for CharacterSet();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v61 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v60 - v11;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = MEMORY[0x1E0DEE9D8];
  v14 = swift_allocObject();
  v68 = a1;
  v15 = objc_msgSend(a1, sel_locale);
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = Locale.languageCode.getter();
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v12, v6);
  v66 = v14;
  v67 = (_QWORD *)(v13 + 16);
  if (v18)
  {
    v20 = v16 == 28261 && v18 == 0xE200000000000000;
    if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = &outlined read-only object #0 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
LABEL_14:
      v23 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)v21);
      swift_arrayDestroy();
      *(_QWORD *)(v14 + 16) = v23;
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = 15;
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = 15;
      v26 = v25 + 16;
      v27 = a2;
      v28 = a2;
      v29 = v65;
      v30 = (void *)MEMORY[0x1C3BBEC44](v27, v65);
      v31 = (_QWORD *)swift_allocObject();
      v60[1] = v28;
      v31[2] = v28;
      v31[3] = v29;
      v31[4] = v14;
      v31[5] = v24;
      v31[6] = v25;
      v31[7] = v13;
      v74 = partial apply for closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      v75 = v31;
      aBlock = MEMORY[0x1E0C809B0];
      v71 = 1107296256;
      v72 = thunk for @escaping @callee_guaranteed (@unowned UInt32, @guaranteed String, @guaranteed String?, @guaranteed [String]?, @unowned UInt32, @unowned UInt32, @unowned Bool, @unowned Bool) -> ();
      v73 = &block_descriptor_17;
      v32 = v13;
      v33 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      v64 = v32;
      swift_retain();
      swift_release();
      objc_msgSend(v68, sel_enumerateTokensOfText_usingBlock_, v30, v33);
      _Block_release(v33);

      swift_beginAccess();
      v34 = *(_QWORD *)(v24 + 16);
      v35 = v67;
      if (v34 >= 0x4000)
      {
        swift_beginAccess();
        if (*(_QWORD *)(*v35 + 16))
        {
          swift_beginAccess();
          if (v34 >> 14 > *(_QWORD *)v26 >> 14)
          {
            __break(1u);
            goto LABEL_51;
          }
          aBlock = String.subscript.getter();
          v71 = v36;
          v72 = v37;
          v73 = v38;
          v39 = v61;
          static CharacterSet.whitespacesAndNewlines.getter();
          lazy protocol witness table accessor for type Substring and conformance Substring();
          v34 = StringProtocol.trimmingCharacters(in:)();
          v26 = (unint64_t)v40;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v39, v63);
          swift_bridgeObjectRelease();
          v41 = HIBYTE(v26) & 0xF;
          if ((v26 & 0x2000000000000000) == 0)
            v41 = v34 & 0xFFFFFFFFFFFFLL;
          if (v41)
          {
            swift_beginAccess();
            v33 = (_QWORD *)*v35;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v35 = v33;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
LABEL_21:
              v44 = v33[2];
              v43 = v33[3];
              if (v44 >= v43 >> 1)
              {
                v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v33);
                *v35 = v33;
              }
              v33[2] = v44 + 1;
              v45 = &v33[2 * v44];
              v45[4] = v34;
              v45[5] = v26;
              swift_endAccess();
              goto LABEL_25;
            }
LABEL_51:
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
            *v35 = v33;
            goto LABEL_21;
          }
          swift_bridgeObjectRelease();
        }
      }
LABEL_25:
      swift_beginAccess();
      v46 = *(_QWORD *)(v64 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_49;
    }
    v22 = v16 == 29541 && v18 == 0xE200000000000000;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = &outlined read-only object #1 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    if (v16 == 24938 && v18 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = &outlined read-only object #2 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    if (v16 == 26746 && v18 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = &outlined read-only object #3 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    if (v16 == 25956 && v18 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = &outlined read-only object #4 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    if (v16 == 29286 && v18 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_42:
      v21 = &outlined read-only object #5 of static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:);
      goto LABEL_14;
    }
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
      goto LABEL_42;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
  v49 = v68;
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = swift_slowAlloc();
    v64 = v13;
    v53 = (uint8_t *)v52;
    v68 = (id)swift_slowAlloc();
    aBlock = (uint64_t)v68;
    *(_DWORD *)v53 = 136315138;
    v65 = v53 + 4;
    v54 = objc_msgSend(v49, sel_locale);
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E70]);
    v55 = dispatch thunk of CustomStringConvertible.description.getter();
    v57 = v56;
    v19(v10, v6);
    v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v50, v51, "Unable to extract language code for locale %s", v53, 0xCu);
    v58 = v68;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v58, -1, -1);
    MEMORY[0x1C3BBFF64](v53, -1, -1);

  }
  else
  {

  }
  v46 = *v67;
  swift_deallocUninitializedObject();
  swift_bridgeObjectRetain();
LABEL_49:
  swift_release();
  return v46;
}

unint64_t specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(uint64_t a1, uint8_t *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t);
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  unsigned int v25;
  uint64_t v26;

  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  v6 = *(_QWORD *)(v26 - 8);
  v7 = MEMORY[0x1E0C80A78](v26);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (_QWORD *)((char *)v24 - v10);
  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  v12 = specialized static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(a3, a1, a2);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v25 = *MEMORY[0x1E0D6E988];
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v15 = *(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104);
  swift_bridgeObjectRetain();
  v24[1] = v12;
  v16 = (uint64_t *)(v12 + 40);
  v17 = MEMORY[0x1E0DEE9D8];
  do
  {
    v18 = *(v16 - 1);
    v19 = *v16;
    v20 = (char *)v11 + *(int *)(v26 + 64);
    *v11 = 0x747369747261;
    v11[1] = 0xE600000000000000;
    v11[2] = v18;
    v11[3] = v19;
    v15(v20, v25, v14);
    outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)((uint64_t)v11, (uint64_t)v9);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v22 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    if (v22 >= v21 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v17);
    v16 += 2;
    *(_QWORD *)(v17 + 16) = v22 + 1;
    outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)((uint64_t)v9, v17+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v22);
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease_n();
  return v17;
}

uint64_t specialized static AudioItemCandidate.processSubrange(openChars:field:partitions:firstOffset:lastOffset:parenStack:)(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v7 = *(_QWORD **)a7;
  v8 = *(_QWORD *)(*(_QWORD *)a7 + 16);
  if (v8 && (specialized Sequence<>.contains(_:)(v7[3 * v8 + 2], v7[3 * v8 + 3], a1) & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v15 = v7[2];
      if (v15)
        goto LABEL_5;
    }
    else
    {
      v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      v15 = v7[2];
      if (v15)
      {
LABEL_5:
        v7[2] = v15 - 1;
        swift_bridgeObjectRelease();
        *(_QWORD *)a7 = v7;
        if (v7[2])
          return 1;
        v16 = String.index(_:offsetBy:)();
        if (!__OFADD__(a6, 1))
        {
          a5 = v16;
          v17 = String.index(_:offsetBy:)();
          a6 = v17;
          v18 = HIBYTE(a3) & 0xF;
          if ((a3 & 0x2000000000000000) == 0)
            v18 = a2 & 0xFFFFFFFFFFFFLL;
          v19 = 4 * v18;
          v20 = v17 >> 14;
          if (v17 >> 14 != 4 * v18)
          {
            String.subscript.getter();
            v21 = Character.isWhitespace.getter();
            swift_bridgeObjectRelease();
            if ((v21 & 1) != 0)
            {
              while (1)
              {
                a6 = String.index(_:offsetBy:)();
                v20 = a6 >> 14;
                if (a6 >> 14 == v19)
                  break;
                String.subscript.getter();
                v22 = Character.isWhitespace.getter();
                swift_bridgeObjectRelease();
                if ((v22 & 1) == 0)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              v19 = v20;
            }
          }
          if (v19 >= a5 >> 14)
          {
            a3 = *a4;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_16:
              v24 = *(_QWORD *)(a3 + 16);
              v23 = *(_QWORD *)(a3 + 24);
              if (v24 >= v23 >> 1)
                a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, (_QWORD *)a3);
              *(_QWORD *)(a3 + 16) = v24 + 1;
              v25 = (_QWORD *)(a3 + 16 * v24);
              v25[4] = a5;
              v25[5] = a6;
              *a4 = a3;
              return 1;
            }
LABEL_25:
            a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a3 + 16) + 1, 1, (_QWORD *)a3);
            goto LABEL_16;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg5087_s21SiriInformationSearch18AudioItemCandidateC13splitOnParens5fieldSaySSGSS_tFZSSSnySS5D8VGXEfU0_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v27 = a2;
  v28 = a3;
  v5 = type metadata accessor for CharacterSet();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v24[1] = v3;
    v33 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v33;
    v10 = a1 + 40;
    do
    {
      v29 = String.subscript.getter();
      v30 = v11;
      v31 = v12;
      v32 = v13;
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v14 = StringProtocol.trimmingCharacters(in:)();
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
      swift_bridgeObjectRelease();
      v29 = v14;
      v30 = v16;
      v17 = String.init<A>(_:)();
      v19 = v18;
      v33 = v9;
      v21 = *(_QWORD *)(v9 + 16);
      v20 = *(_QWORD *)(v9 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v9 = v33;
      }
      v10 += 16;
      *(_QWORD *)(v9 + 16) = v21 + 1;
      v22 = v9 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t specialized static AudioItemCandidate.splitOnParens(field:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String_optional v9;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v12;
  char v13;
  BOOL v14;
  BOOL v15;
  char v16;
  BOOL v17;
  BOOL v18;
  char v19;
  BOOL v20;
  char v21;
  char v22;
  BOOL v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  Swift::String_optional v29;
  char v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  char v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;

  v4 = type metadata accessor for CharacterSet();
  v70 = *(_QWORD *)(v4 - 8);
  v71 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE9D8];
  v78 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v79 = MEMORY[0x1E0DEE9D8];
  if ((a2 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a2) & 0xF;
  else
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  v69 = a1;
  *(_QWORD *)&v75 = a1;
  *((_QWORD *)&v75 + 1) = a2;
  v76 = 0;
  v77 = v8;
  swift_bridgeObjectRetain();
  v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    countAndFlagsBits = v9.value._countAndFlagsBits;
    object = v9.value._object;
    v68 = v8;
    v12 = 0;
    while (1)
    {
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_115:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_98:
        swift_bridgeObjectRelease();
        return MEMORY[0x1E0DEE9D8];
      }
      if (countAndFlagsBits == 40 && object == (void *)0xE100000000000000)
        goto LABEL_45;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v14 = countAndFlagsBits == 91 && object == (void *)0xE100000000000000;
      v15 = v14;
      if ((v13 & 1) != 0 || v15)
        goto LABEL_45;
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v17 = countAndFlagsBits == 123 && object == (void *)0xE100000000000000;
      v18 = v17;
      if ((v16 & 1) != 0
        || v18
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || countAndFlagsBits == 8961263 && object == (void *)0xA300000000000000
        || ((v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 12303599)
          ? (v20 = object == (void *)0xA300000000000000)
          : (v20 = 0),
            !v20 ? (v21 = 0) : (v21 = 1),
            (v19 & 1) != 0
         || (v21 & 1) != 0
         || ((v22 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 9470179)
           ? (v23 = object == (void *)0xA300000000000000)
           : (v23 = 0),
             !v23 ? (v24 = 0) : (v24 = 1),
             (v22 & 1) != 0 || (v24 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
      {
LABEL_45:
        v25 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        v27 = v25[2];
        v26 = v25[3];
        if (v27 >= v26 >> 1)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
        v25[2] = v27 + 1;
        v28 = &v25[3 * v27];
        v28[4] = v12;
        v28[5] = countAndFlagsBits;
        v28[6] = object;
        v78 = v25;
        goto LABEL_50;
      }
      if (countAndFlagsBits == 41 && object == (void *)0xE100000000000000
        || ((v30 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 9026799)
          ? (v31 = object == (void *)0xA300000000000000)
          : (v31 = 0),
            !v31 ? (v32 = 0) : (v32 = 1),
            (v30 & 1) != 0 || (v32 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        v33 = v78[2];
        if (!v33)
          goto LABEL_115;
        v34 = v78[3 * v33 + 1];
        swift_bridgeObjectRetain();
        v35 = &outlined read-only object #0 of static AudioItemCandidate.splitOnParens(field:);
      }
      else if (countAndFlagsBits == 9535715 && object == (void *)0xA300000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v37 = v78[2];
        if (!v37)
          goto LABEL_115;
        v34 = v78[3 * v37 + 1];
        swift_bridgeObjectRetain();
        v35 = &outlined read-only object #1 of static AudioItemCandidate.splitOnParens(field:);
      }
      else if (countAndFlagsBits == 93 && object == (void *)0xE100000000000000
             || ((v38 = _stringCompareWithSmolCheck(_:_:expecting:)(), countAndFlagsBits == 12434671)
               ? (v39 = object == (void *)0xA300000000000000)
               : (v39 = 0),
                 !v39 ? (v40 = 0) : (v40 = 1),
                 (v38 & 1) != 0 || (v40 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        v41 = v78[2];
        if (!v41)
          goto LABEL_115;
        v34 = v78[3 * v41 + 1];
        swift_bridgeObjectRetain();
        v35 = &outlined read-only object #2 of static AudioItemCandidate.splitOnParens(field:);
      }
      else
      {
        if (countAndFlagsBits == 125 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v42 & 1) == 0)
            goto LABEL_50;
        }
        v43 = v78[2];
        if (!v43)
          goto LABEL_115;
        v34 = v78[3 * v43 + 1];
        swift_bridgeObjectRetain();
        v35 = &outlined read-only object #3 of static AudioItemCandidate.splitOnParens(field:);
      }
      v36 = specialized static AudioItemCandidate.processSubrange(openChars:field:partitions:firstOffset:lastOffset:parenStack:)(v35, v69, a2, &v79, v34, v12, (uint64_t)&v78);
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      if ((v36 & 1) == 0)
        goto LABEL_115;
LABEL_50:
      v29 = String.Iterator.next()();
      countAndFlagsBits = v29.value._countAndFlagsBits;
      object = v29.value._object;
      ++v12;
      if (!v29.value._object)
      {
        v7 = v79;
        v8 = v68;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v44 = *(uint64_t **)(v7 + 16);
  if (!v44 || *(_QWORD *)(v7 + 32) >= 0x4000uLL && *(_QWORD *)(v7 + 32 + 16 * (_QWORD)v44 - 8) >> 14 != 4 * v8)
  {
LABEL_97:
    swift_bridgeObjectRelease();
    goto LABEL_98;
  }
  v45 = 40;
  v46 = *(_QWORD *)(v7 + 16);
  while (--v46)
  {
    v47 = (_QWORD *)(v7 + v45);
    v45 += 16;
    if ((v47[1] ^ *v47) >= 0x4000)
      goto LABEL_97;
  }
  v73 = v69;
  v74 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = v7 + 16 * (_QWORD)v44 + 24;
  v50 = (char *)v44 - 1;
  do
  {
    if ((uint64_t)v50 >= *(_QWORD *)(v7 + 16))
    {
      __break(1u);
LABEL_111:
      swift_bridgeObjectRelease();
      a2 = v68;
      goto LABEL_113;
    }
    v44 = &v73;
    String.removeSubrange(_:)();
    v49 -= 16;
    --v50;
  }
  while (v50 != (char *)-1);
  v51 = swift_bridgeObjectRelease();
  v52 = v73;
  v53 = v74;
  *(_QWORD *)&v75 = 58;
  *((_QWORD *)&v75 + 1) = 0xE100000000000000;
  MEMORY[0x1E0C80A78](v51);
  *(&v67 - 2) = (uint64_t)&v75;
  swift_bridgeObjectRetain_n();
  v54 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)(&v67 - 4), v52, v53);
  swift_bridgeObjectRelease();
  v55 = *(_QWORD *)(v54 + 16);
  if (v55)
  {
    v68 = a2;
    v72 = (uint64_t *)MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55, 0);
    v67 = v54;
    v56 = (uint64_t *)(v54 + 56);
    do
    {
      v57 = *(v56 - 1);
      v58 = *v56;
      v75 = *(_OWORD *)(v56 - 3);
      v76 = v57;
      v77 = v58;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v59 = StringProtocol.trimmingCharacters(in:)();
      v61 = v60;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v6, v71);
      swift_bridgeObjectRelease();
      v44 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1);
        v44 = v72;
      }
      v63 = v44[2];
      v62 = v44[3];
      if (v63 >= v62 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
        v44 = v72;
      }
      v44[2] = v63 + 1;
      v64 = &v44[2 * v63];
      v64[4] = v59;
      v64[5] = v61;
      v56 += 4;
      --v55;
    }
    while (v55);
    goto LABEL_111;
  }
  swift_bridgeObjectRelease();
  v44 = (uint64_t *)MEMORY[0x1E0DEE9D8];
LABEL_113:
  swift_bridgeObjectRetain();
  v65 = swift_bridgeObjectRetain();
  v66 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg5087_s21SiriInformationSearch18AudioItemCandidateC13splitOnParens5fieldSaySSGSS_tFZSSSnySS5D8VGXEfU0_SSTf1cn_nTf4ng_n(v65, v69, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v75 = v44;
  specialized Array.append<A>(contentsOf:)(v66);
  swift_bridgeObjectRelease();
  return v75;
}

uint64_t specialized static AudioItemCandidate.auxTitleFields(title:itemType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v4 = (_QWORD *)specialized static AudioItemCandidate.splitOnParens(field:)(a1, a2);
  v5 = (uint64_t)v4;
  v6 = v4[2];
  if (v6)
  {
    v8 = v4[4];
    v7 = v4[5];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
    v11 = (v10 + 32) & ~v10;
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1C24FA1B0;
    v13 = (_QWORD *)(v12 + v11);
    v14 = v12 + v11 + *(int *)(v9 + 64);
    *v13 = 0x656C746974;
    v13[1] = 0xE500000000000000;
    v13[2] = v8;
    v13[3] = v7;
    v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, a3, v15);
    if (*(_QWORD *)(v5 + 16) < v6)
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      v17 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVys10ArraySliceVySSGG_SS6itemId_SSSg5value10PegasusAPI39Apple_Parsec_Siri_V2alpha_AudioItemTypeO0hS0ts5NeverOTg5011_sSiS3SSg10k5API39m1_n1_o1_p1_qrs37OIgygoor_Si6offset_SS7elementtSS6itemi18_AA5valueAD0lI0ts5t192OIegnrzr_TR04_s21e19InformationSearch18gh74CandidateC14auxTitleFields33_39A65E8D769182CAD4F711B84F5C7A7FLL5title8itemi8SaySS0T2m13_SSSg5value10a6API013c1_d4_a9_F40_deU0OAGtGSS_AMtFZSSAH_AijmGtV19_SStXEfU_Tf3nnnpf_nTf1cn_n(v5, v5 + 32, 1, (2 * v6) | 1);
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v17);
      return v12;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t specialized static AudioItemCandidate.internalFields(title:artist:itemType:localizedTokenizer:)(uint64_t a1, unint64_t a2, uint64_t a3, uint8_t *a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  unint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint8_t *v53;
  unint64_t v54;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;

  v62 = a1;
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v15(v14, a5, v11);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  v17 = v16 == *MEMORY[0x1E0D6E960] || v16 == *MEMORY[0x1E0D6E968];
  v63 = a3;
  v64 = a6;
  if (v17)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1C24FB7E0;
    v23 = (_QWORD *)(v22 + v21);
    v24 = (char *)v23 + *(int *)(v18 + 64);
    *v23 = 0x656C746974;
    v23[1] = 0xE500000000000000;
    v61 = (uint8_t *)v12;
    v25 = v62;
    v23[2] = v62;
    v23[3] = a2;
    v15(v24, a5, v11);
    v26 = (_QWORD *)((char *)v23 + v20);
    v27 = (char *)v23 + v20 + *(int *)(v18 + 64);
    *v26 = 0x747369747261;
    v26[1] = 0xE600000000000000;
    v28 = v63;
    v26[2] = v63;
    v26[3] = a4;
    (*((void (**)(char *, _QWORD, uint64_t))v61 + 13))(v27, *MEMORY[0x1E0D6E988], v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = specialized static AudioItemCandidate.auxTitleFields(title:itemType:)(v25, a2, a5);
    v65 = v22;
    specialized Array.append<A>(contentsOf:)(v29);
    v30 = v65;
    v31 = specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(v28, a4, v64);
    v65 = v30;
  }
  else
  {
    v32 = v16;
    v59 = v15;
    v60 = a5;
    v33 = v62;
    v58 = a2;
    v61 = a4;
    v34 = *MEMORY[0x1E0D6E988];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
    v36 = v35;
    v37 = *(_QWORD *)(v35 - 8);
    v38 = *(_QWORD *)(v37 + 72);
    v39 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    v57 = v34;
    if (v32 != v34)
    {
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_1C24FB7E0;
      v46 = (_QWORD *)(v45 + v39);
      v47 = (char *)v46 + *(int *)(v36 + 64);
      *v46 = 0x656C746974;
      v46[1] = 0xE500000000000000;
      v49 = v58;
      v48 = v59;
      v46[2] = v33;
      v46[3] = v49;
      v48(v47, v60, v11);
      v50 = (_QWORD *)((char *)v46 + v38);
      v51 = (char *)v46 + v38 + *(int *)(v36 + 64);
      *v50 = 0x747369747261;
      v50[1] = 0xE600000000000000;
      v52 = v63;
      v53 = v61;
      v50[2] = v63;
      v50[3] = v53;
      (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v51, v57, v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54 = specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(v52, v53, v64);
      v65 = v45;
      specialized Array.append<A>(contentsOf:)(v54);
      v44 = v65;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return v44;
    }
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1C24FA1B0;
    v41 = (_QWORD *)(v40 + v39);
    v42 = v40 + v39 + *(int *)(v36 + 64);
    *v41 = 0x747369747261;
    v41[1] = 0xE600000000000000;
    v43 = v58;
    v41[2] = v33;
    v41[3] = v43;
    v59((char *)v42, v60, v11);
    swift_bridgeObjectRetain();
    v31 = specialized static AudioItemCandidate.auxArtistFields(artist:localizedTokenizer:)(v63, v61, v64);
    v65 = v40;
  }
  specialized Array.append<A>(contentsOf:)(v31);
  return v65;
}

uint64_t specialized static AudioItemCandidate.leetDecode(leetText:)(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;

  v2 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static AudioItemCandidate.leetDecode(leetText:));
  v12 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_5;
    }
    v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v9 >= v6)
      goto LABEL_21;
    v10 = *(_QWORD *)(v12 + 8 * v9);
    ++v8;
    if (!v10)
    {
      v8 = v9 + 1;
      if (v9 + 1 >= v6)
        goto LABEL_21;
      v10 = *(_QWORD *)(v12 + 8 * v8);
      if (!v10)
      {
        v8 = v9 + 2;
        if (v9 + 2 >= v6)
          goto LABEL_21;
        v10 = *(_QWORD *)(v12 + 8 * v8);
        if (!v10)
          break;
      }
    }
LABEL_20:
    v5 = (v10 - 1) & v10;
LABEL_5:
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v11 = v9 + 3;
  if (v11 >= v6)
  {
LABEL_21:
    swift_release();
    return a1;
  }
  v10 = *(_QWORD *)(v12 + 8 * v11);
  if (v10)
  {
    v8 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v8 >= v6)
      goto LABEL_21;
    v10 = *(_QWORD *)(v12 + 8 * v8);
    ++v11;
    if (v10)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

id specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  id i;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint8_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v85 = a2;
  v3 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v6 = *(id *)(v84 - 8);
  v7 = MEMORY[0x1E0C80A78](v84);
  v83 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v74 - v9;
  type metadata accessor for ClientAudioResult();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {

    swift_release();
    return 0;
  }
  v12 = v11;
  v79 = v3;
  v13 = a1;
  v81 = v12;
  v14 = (id)ClientAudioResult.vocabularyResult.getter();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  v17 = v13;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  v20 = os_log_type_enabled(v18, v19);
  v82 = v14;
  if (v20)
  {
    v21 = swift_slowAlloc();
    v75 = v5;
    v77 = v16;
    v22 = (uint8_t *)v21;
    v76 = swift_slowAlloc();
    v87 = v76;
    v80 = v6;
    *(_DWORD *)v22 = 136315138;
    v74 = v22 + 4;
    v23 = v81;
    PommesResult.resultId.getter();
    v24 = String.debugDescription.getter();
    v78 = v10;
    v26 = v25;
    swift_bridgeObjectRelease();
    v14 = v82;
    v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v87);
    v6 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v10 = v78;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v18, v19, "Identifier being set as resultId: %s", v22, 0xCu);
    v27 = v76;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v27, -1, -1);
    v28 = v22;
    v16 = v77;
    v5 = v75;
    MEMORY[0x1C3BBFF64](v28, -1, -1);

  }
  else
  {

    v23 = v81;
  }
  v30 = v17;
  v31 = PommesResult.resultId.getter();
  v33 = v32;

  dispatch thunk of VocabularyResult.fieldType.getter();
  KVFieldType.audioType.getter();
  v34 = VocabularyResult.itemType.getter();
  v80 = v30;
  if (v34 == 16)
  {
    v77 = v33;
    v78 = (char *)v31;
    v38 = v10;
    v39 = VocabularyResult.fields.getter();
    if (v39)
    {
      v40 = v39;
      if (v39 >> 62)
        goto LABEL_62;
      v37 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v37)
        goto LABEL_36;
      goto LABEL_15;
    }
    while (1)
    {
LABEL_37:
      v16 = VocabularyResult.semanticValue.getter();
      v45 = v59;
      swift_bridgeObjectRelease();
      while (2)
      {
        v60 = VocabularyResult.fields.getter();
        v76 = v45;
        if (!v60)
          goto LABEL_46;
        v40 = v60;
        if (v60 >> 62)
        {
LABEL_65:
          swift_bridgeObjectRetain();
          v37 = _CocoaArrayWrapper.endIndex.getter();
          if (!v37)
          {
LABEL_66:
            swift_bridgeObjectRelease_n();
            v36 = 0;
LABEL_67:
            v10 = v38;
LABEL_68:
            v23 = v81;
LABEL_69:
            *v5 = v23;
            swift_storeEnumTagMultiPayload();
            (*((void (**)(uint64_t, char *, uint64_t))v6 + 2))(v83, v10, v84);
            if (v85)
              v68 = *(_BYTE *)(v85 + 34);
            else
              v68 = 0;
            v69 = objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate.Features());
            v70 = v80;
            v71 = objc_msgSend(v69, sel_init);
            v72 = objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate(0));
            v29 = AudioItemCandidate.init(backingItem:source:identifier:title:artist:itemType:requiresSubscription:isDownloaded:features:)((uint64_t)v5, 1, (uint64_t)v78, v77, v16, v76, v36, v37, v83, 0, v68, (uint64_t)v71);

            swift_release();
            (*((void (**)(char *, uint64_t))v6 + 1))(v10, v84);
            return v29;
          }
        }
        else
        {
          v37 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v37)
            goto LABEL_66;
        }
        if ((v40 & 0xC000000000000001) != 0)
          v61 = (id)MEMORY[0x1C3BBF3F4](0, v40);
        else
          v61 = *(id *)(v40 + 32);
        v41 = v61;
        if (VocabularyField.fieldType.getter() == 701)
        {
LABEL_59:
          swift_bridgeObjectRelease_n();
          v36 = VocabularyField.value.getter();
          v37 = v67;

          goto LABEL_67;
        }

        if (v37 == 1)
        {
          swift_bridgeObjectRelease_n();
LABEL_46:
          v36 = 0;
          v37 = 0;
          goto LABEL_67;
        }
        v75 = v5;
        if ((v40 & 0xC000000000000001) != 0)
        {
          v62 = 1;
          while (1)
          {
            v63 = MEMORY[0x1C3BBF3F4](v62, v40);
            v64 = v62 + 1;
            if (__OFADD__(v62, 1))
              goto LABEL_61;
            v41 = (id)v63;
            if (VocabularyField.fieldType.getter() == 701)
              goto LABEL_58;
            swift_unknownObjectRelease();
            ++v62;
            if (v64 == v37)
              goto LABEL_57;
          }
        }
        v65 = 5;
        while (1)
        {
          v66 = v65 - 3;
          if (__OFADD__(v65 - 4, 1))
            break;
          v41 = *(id *)(v40 + 8 * v65);
          if (VocabularyField.fieldType.getter() == 701)
          {
LABEL_58:
            v5 = v75;
            goto LABEL_59;
          }

          ++v65;
          if (v66 == v37)
          {
LABEL_57:
            swift_bridgeObjectRelease_n();
            v36 = 0;
            v37 = 0;
            v10 = v38;
            v5 = v75;
            goto LABEL_68;
          }
        }
        __break(1u);
LABEL_75:
        for (i = (id)MEMORY[0x1C3BBF3F4](0, v40); ; i = *(id *)(v40 + 32))
        {
          v43 = i;
          if (VocabularyField.fieldType.getter() == 700)
            break;

          if (v37 == 1)
            goto LABEL_36;
          if (!v41)
          {
            v57 = 5;
            while (1)
            {
              v58 = v57 - 3;
              if (__OFADD__(v57 - 4, 1))
                break;
              v43 = *(id *)(v40 + 8 * v57);
              if (VocabularyField.fieldType.getter() == 700)
                goto LABEL_18;

              ++v57;
              if (v58 == v37)
                goto LABEL_36;
            }
            __break(1u);
            goto LABEL_65;
          }
          v54 = 1;
          while (1)
          {
            v55 = MEMORY[0x1C3BBF3F4](v54, v40);
            v56 = v54 + 1;
            if (__OFADD__(v54, 1))
              break;
            v43 = (id)v55;
            if (VocabularyField.fieldType.getter() == 700)
              goto LABEL_18;
            swift_unknownObjectRelease();
            ++v54;
            if (v56 == v37)
              goto LABEL_36;
          }
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          swift_bridgeObjectRetain();
          v37 = _CocoaArrayWrapper.endIndex.getter();
          if (!v37)
          {
LABEL_36:
            swift_bridgeObjectRelease_n();
            goto LABEL_37;
          }
LABEL_15:
          v41 = (id)(v40 & 0xC000000000000001);
          if ((v40 & 0xC000000000000001) != 0)
            goto LABEL_75;
        }
LABEL_18:
        swift_bridgeObjectRelease_n();
        v16 = VocabularyField.value.getter();
        v45 = v44;

        if (v45)
          continue;
        break;
      }
    }
  }
  if (v34 == 5)
  {
    v77 = v33;
    v78 = (char *)v31;
    v16 = VocabularyResult.semanticValue.getter();
    v76 = v35;
    if (v85)
    {
      v36 = *(_QWORD *)(v85 + 16);
      v37 = *(_QWORD *)(v85 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v36 = 0;
      v37 = 0;
    }
    goto LABEL_69;
  }
  swift_bridgeObjectRelease();
  v46 = v14;
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v87 = v50;
    *(_DWORD *)v49 = 136315138;
    VocabularyResult.itemType.getter();
    v51 = KVItemType.description.getter();
    v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v47, v48, "AudioItemCandidate : initializer does not support item type : %s", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v50, -1, -1);
    MEMORY[0x1C3BBFF64](v49, -1, -1);
  }
  else
  {

  }
  v53 = v80;

  swift_release();
  (*((void (**)(char *, uint64_t))v6 + 1))(v10, v84);
  return 0;
}

uint64_t type metadata accessor for AudioItemCandidate.BackingItem(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioItemCandidate.BackingItem);
}

uint64_t type metadata accessor for AudioItemCandidate.Features()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AudioItemCandidate(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioItemCandidate);
}

uint64_t outlined init with copy of AudioItemCandidate.BackingItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AudioItemCandidate.toAudioResult()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AudioItemCandidate.toAudioResult()(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source;
  if (!lazy protocol witness table cache variable for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for AudioItemCandidate.Source, &type metadata for AudioItemCandidate.Source);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioItemCandidate.Source and conformance AudioItemCandidate.Source);
  }
  return result;
}

uint64_t sub_1C24A32D8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24A3318(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xC0))(*a1);
}

void sub_1C24A3358(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x98))();
}

uint64_t sub_1C24A3398(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xA0))(*a1);
}

void sub_1C24A33D4(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xB0))();
}

uint64_t sub_1C24A3414(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xB8))(*a1);
}

void sub_1C24A3450(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xC8))();
}

uint64_t sub_1C24A3490(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xD0))(*a1);
}

uint64_t sub_1C24A34CC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24A350C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xE8);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1C24A354C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24A358C(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x100))(*a1);
}

uint64_t sub_1C24A35C8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24A3608(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x118))(*a1);
}

void sub_1C24A3644(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x128))();
}

uint64_t sub_1C24A3684(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x130))(*a1);
}

void sub_1C24A36C0(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x140))();
}

uint64_t sub_1C24A3700(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x148))(*a1);
}

void sub_1C24A373C(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x158))();
}

uint64_t sub_1C24A377C(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x160))(*a1);
}

uint64_t ObjC metadata update function for AudioItemCandidate()
{
  return type metadata accessor for AudioItemCandidate(0);
}

uint64_t type metadata completion function for AudioItemCandidate()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AudioItemCandidate.BackingItem(319);
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AudioItemCandidate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioItemCandidate.score.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AudioItemCandidate.score.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AudioItemCandidate.score.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AudioItemCandidate.features.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AudioItemCandidate.features.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AudioItemCandidate.features.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AudioItemCandidate.fields(localizedTokenizer:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AudioItemCandidate.leetDecodedFields(localizedTokenizer:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AudioItemCandidate.nonOptionalFieldCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AudioItemCandidate.deduplicationKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AudioItemCandidate.toAudioResult()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AudioItemCandidate.summary.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t method lookup function for AudioItemCandidate.Features()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.audioTypeMatch.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.audioTypeMatch.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.audioTypeMatch.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.glideModifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.glideModifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.glideModifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceMatchFactor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceMatchFactor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceMatchFactor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.fieldMatchScores.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.fieldMatchScores.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.maxFieldCount.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.maxFieldCount.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.optionalFieldCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.optionalFieldCount.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.optionalFieldCount.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.combinedTextMatchScore.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.combinedTextMatchScore.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.combinedTextMatchScore.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceTypePriority.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceTypePriority.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.sourceTypePriority.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.downloadedBoostFactor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.downloadedBoostFactor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of AudioItemCandidate.Features.downloadedBoostFactor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t storeEnumTagSinglePayload for AudioItemCandidate.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C24A3CF8 + 4 * byte_1C24FFAD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C24A3D2C + 4 * asc_1C24FFAD0[v4]))();
}

uint64_t sub_1C24A3D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24A3D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24A3D3CLL);
  return result;
}

uint64_t sub_1C24A3D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24A3D50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C24A3D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24A3D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioItemCandidate.Source()
{
  return &type metadata for AudioItemCandidate.Source;
}

char *initializeBufferWithCopyOfBuffer for AudioItemCandidate.BackingItem(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *a2;
      *(_QWORD *)a1 = *a2;
      v7 = v6;
    }
    else
    {
      v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for AudioItemCandidate.BackingItem(id *a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
}

void **initializeWithCopy for AudioItemCandidate.BackingItem(void **a1, void **a2)
{
  void *v4;
  id v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *a2;
    *a1 = *a2;
    v5 = v4;
  }
  else
  {
    v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for AudioItemCandidate.BackingItem(void **a1, void **a2)
{
  void *v4;
  id v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of AudioItemCandidate.BackingItem((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = *a2;
      *a1 = *a2;
      v5 = v4;
    }
    else
    {
      v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of AudioItemCandidate.BackingItem(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for AudioItemCandidate.BackingItem(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AudioItemCandidate.BackingItem(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of AudioItemCandidate.BackingItem((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for AudioItemCandidate.BackingItem()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AudioItemCandidate.BackingItem, AudioItemCandidate.BackingItem));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_1C24A41FC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C24A4220()
{
  return swift_deallocObject();
}

uint64_t sub_1C24A4230()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t v10;

  return closure #1 in static AudioItemCandidate.splitStringByConjunctions(tokenizer:strToSplit:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), *(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56));
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t outlined init with take of (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *ContactProfileSliceResolver.__allocating_init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a6;
  v24 = a8;
  v14 = (uint64_t *)swift_allocObject();
  v16 = *(_QWORD *)(a7 + 24);
  v15 = *(_QWORD *)(a7 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a7, v16);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(a1, a2, a3, a4, a5, v23, (uint64_t)v19, v24, v14, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a7);
  return v21;
}

uint64_t protocol witness for ContactResolverProtocol.resolve(queries:config:) in conformance SiriKitContactResolver()
{
  return SiriKitContactResolver.resolve(queries:config:)();
}

void *ContactProfileSliceResolver.contactsBundleId.unsafeMutableAddressor()
{
  return &static ContactProfileSliceResolver.contactsBundleId;
}

unint64_t static ContactProfileSliceResolver.contactsBundleId.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t *ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a6;
  v24 = a8;
  v16 = *(_QWORD *)(a7 + 24);
  v15 = *(_QWORD *)(a7 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a7, v16);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(a1, a2, a3, a4, a5, v23, (uint64_t)v19, v24, v8, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a7);
  return v21;
}

uint64_t ContactProfileSliceResolver.resolveRelationship()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D6F170], v4);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil);
  v9 = *(_QWORD *)(v1 + 152);
  v10 = v1 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId;
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 128);
  v30 = *(_QWORD *)(v1 + 160);
  v12 = (void *)v11(v9);
  v13 = MEMORY[0x1C3BBC478]();
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = v13 & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    v29 = v9;
    v16 = specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(0, v13, v14);
    swift_bridgeObjectRelease();
    v17 = ContactProfileSliceResolver.searchContacts(contactQuery:)(v16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      swift_retain();
      v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(v17, v2);
      v28 = v10;
      v19 = a1;
      v20 = v18;
      swift_bridgeObjectRelease();
      swift_release();
      v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      v27 = (uint64_t)&v27;
      MEMORY[0x1E0C80A78](v21);
      *(&v27 - 2) = (uint64_t)v7;
      *(&v27 - 1) = v20;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, v22, MEMORY[0x1E0D6E838]);
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      v23 = v19;
      v10 = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v23, 0, 1, v21);
    }
    else
    {
      v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 1, 1, v25);
    }
    v9 = v29;
  }
  else
  {
    v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 1, 1, v24);
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v8 + 136))(v9, v30, v10, v12);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void ContactProfileSliceResolver.resolveNameSlice(label:)(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(void);
  unint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v45 = a2;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil);
  v10 = *(_QWORD *)(v3 + 152);
  v11 = *(uint64_t (**)(void))(*(_QWORD *)v9 + 128);
  v41 = *(_QWORD *)(v3 + 160);
  v42 = v10;
  v39 = v3;
  v40 = v3 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId;
  v44 = v9;
  v43 = v11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceLabel>);
  v12 = *(_QWORD *)(v6 + 72);
  v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C24FA1A0;
  v15 = v14 + v13;
  v16 = *(void (**)(void))(v6 + 104);
  ((void (*)(unint64_t, _QWORD, uint64_t))v16)(v15, *MEMORY[0x1E0D6F1B0], v5);
  v17 = v15 + v12;
  ((void (*)(unint64_t, _QWORD, uint64_t))v16)(v15 + v12, *MEMORY[0x1E0D6F1C0], v5);
  v38 = v15 + 2 * v12;
  v16();
  v18 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v18(v8, v15, v5);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F1D8], MEMORY[0x1E0D6F1E8]);
  LOBYTE(v12) = dispatch thunk of static Equatable.== infix(_:_:)();
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  v19(v8, v5);
  if ((v12 & 1) != 0
    || (v18(v8, v17, v5), v20 = dispatch thunk of static Equatable.== infix(_:_:)(), v19(v8, v5), (v20 & 1) != 0))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18(v8, v38, v5);
    v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19(v8, v5);
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v34 = (void *)v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 144))(v42, v41, v40, v43, 2);

      v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v45, 1, 1, v35);
      return;
    }
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  v21 = swift_deallocClassInstance();
  v22 = v39;
  v23 = MEMORY[0x1C3BBC478](v21);
  v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = v23 & 0xFFFFFFFFFFFFLL;
  if (v25)
  {
    v26 = specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(1, v23, v24);
    swift_bridgeObjectRelease();
    v27 = ContactProfileSliceResolver.searchContacts(contactQuery:)(v26);
    swift_bridgeObjectRelease();
    if (v27)
    {
      swift_retain();
      v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(v27, v22);
      swift_bridgeObjectRelease();
      swift_release();
      v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      MEMORY[0x1E0C80A78](v29);
      *(&v38 - 2) = a1;
      *(&v38 - 1) = v28;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, v30, MEMORY[0x1E0D6E838]);
      v31 = v45;
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v31, 0, 1, v29);
    }
    else
    {
      v36 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v45, 1, 1, v36);
    }
  }
  else
  {
    v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v45, 1, 1, v32);
    swift_bridgeObjectRelease();
  }
  v37 = (void *)v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 136))(v42, v41, v40, v43);

}

uint64_t closure #1 in closure #1 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Google_Protobuf_Any();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1E0C80A78](v13);
  (*(void (**)(char *, _QWORD))(v15 + 104))((char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6FCC0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0D70598], v9);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  outlined init with copy of Google_Protobuf_Any?(v18, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
}

uint64_t closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  swift_bridgeObjectRetain();
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

unint64_t ContactProfileSliceResolver.searchContacts(contactQuery:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  void (*v22)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  unint64_t v28;
  void *v29;
  id v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  _QWORD v48[2];
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;

  v56 = a1;
  v2 = type metadata accessor for Date();
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  MEMORY[0x1E0C80A78](v2);
  v57 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RecommenderType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SearchSuggestedContacts();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContactResolverDomain();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v15);
  v16 = type metadata accessor for ContactResolverConfig();
  v53 = *(_QWORD *)(v16 - 8);
  v54 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = (char *)(v1 + 16);
  static Locale.current.getter();
  static ContactResolverDomain.all.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0D98748], v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D98620], v4);
  v50 = 0;
  v51 = 0;
  v48[1] = v11;
  v49 = v7;
  v48[0] = v14;
  v19 = ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)();
  if (one-time initialization token for shared != -1)
    v19 = swift_once();
  v20 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v19);
  v21 = v57;
  v49 = v55;
  v50 = v56;
  v51 = v18;
  Date.init()();
  v22 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v20 + 200);
  v51 = (char *)v48;
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [INPerson]?);
  LOBYTE(v49) = 2;
  v22(&v61, 0xD000000000000029, 0x80000001C25086E0, 0, v21, "SiriInformationSearch/ContactProfileSliceResolver.swift", 55, 2, 130, "searchContacts(contactQuery:)", 29, (_DWORD)v49, partial apply for closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:));
  (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
  v23 = v61;
  if (v61)
  {
    v60 = MEMORY[0x1E0DEE9D8];
    if (v61 >> 62)
    {
      swift_bridgeObjectRetain();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      if (v24)
        goto LABEL_6;
    }
    else
    {
      v24 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v24)
      {
LABEL_6:
        if (v24 >= 1)
        {
          v25 = 0;
          v26 = MEMORY[0x1E0DEE9D8];
          do
          {
            if ((v23 & 0xC000000000000001) != 0)
              v30 = (id)MEMORY[0x1C3BBF3F4](v25, v23);
            else
              v30 = *(id *)(v23 + 8 * v25 + 32);
            v29 = v30;
            v31 = objc_msgSend(v30, sel_siriMatches);
            if (v31)
            {
              v27 = v31;
              type metadata accessor for INPerson();
              v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              v29 = v27;
            }
            else
            {
              v28 = v26;
            }

            ++v25;
            specialized Array.append<A>(contentsOf:)(v28);
          }
          while (v24 != v25);
          swift_bridgeObjectRelease_n();
          v32 = v60;
          goto LABEL_22;
        }
        __break(1u);
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease_n();
    v32 = MEMORY[0x1E0DEE9D8];
LABEL_22:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v41 = 134217984;
      if (v32 >> 62)
      {
        swift_bridgeObjectRetain();
        v42 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v42 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v60 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v39, v40, "NameProfileResolver: Resolved contacts %ld", v41, 0xCu);
      MEMORY[0x1C3BBFF64](v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v37 = specialized ContactProfileSliceResolver.dedupeContacts(matches:)(v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v45 = 134217984;
      if (v37 >> 62)
      {
        swift_bridgeObjectRetain();
        v46 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v46 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v60 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v43, v44, "NameProfileResolver: Deduped resolved contacts %ld", v45, 0xCu);
      MEMORY[0x1C3BBFF64](v45, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_34;
  }
  if (one-time initialization token for pommes != -1)
LABEL_36:
    swift_once();
  v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_1C2356000, v34, v35, "NameProfileResolver: No resolved contacts", v36, 2u);
    MEMORY[0x1C3BBFF64](v36, -1, -1);
  }

  v37 = 0;
LABEL_34:
  (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v54);
  return v37;
}

uint64_t closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a2, a3, v8, v9);
  if (v4)
  {

    result = 0;
  }
  *a4 = result;
  return result;
}

uint64_t static ContactProfileSliceResolver.toContactNode(occupantNode:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ContactQuery.init()();
  ContactQuery.givenName.setter();
  OccupantIntentNode.firstName.getter();
  if (v12)
    ContactQuery.givenName.setter();
  OccupantIntentNode.fullName.getter();
  if (v13)
  {
    v14 = ContactQuery.givenName.getter();
    v16 = v15;
    swift_bridgeObjectRelease();
    v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v17 = v14 & 0xFFFFFFFFFFFFLL;
    if (v17)
      swift_bridgeObjectRelease();
    else
      ContactQuery.givenName.setter();
  }
  OccupantIntentNode.fullName.getter();
  ContactQuery.fullName.setter();
  OccupantIntentNode.lastName.getter();
  ContactQuery.familyName.setter();
  OccupantIntentNode.nickname.getter();
  ContactQuery.nickname.setter();
  OccupantIntentNode.namePrefix.getter();
  v18 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePrefix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
  }
  ContactQuery.namePrefix.setter();
  OccupantIntentNode.namePostfix.getter();
  v20 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v20) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  }
  else
  {
    PersonOntologyNode.PersonNamePostfix.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
  }
  ContactQuery.nameSuffix.setter();
  OccupantIntentNode.company.getter();
  ContactQuery.organizationName.setter();
  OccupantIntentNode.relationship.getter();
  v22 = type metadata accessor for ContactQuery();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v2, 1, 1, v22);
  ContactRelationshipQuery.init(label:fromContact:)();
  v23 = type metadata accessor for ContactRelationshipQuery();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v5, 0, 1, v23);
  return ContactQuery.relationship.setter();
}

uint64_t closure #1 in ContactProfileSliceResolver.buildPerson(person:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  id v19;
  void *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  v28[1] = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PersonNameComponents();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v28[0] = (char *)v28 - v12;
  v13 = objc_msgSend(a2, sel_displayName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  v14 = objc_msgSend(a2, sel_contactIdentifier);
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.setter();
    ContactProfileSliceResolver.getAddresses(identifier:)(v16, v18);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_Person.addresses.setter();
  }
  v19 = objc_msgSend(a2, sel_nameComponents);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PersonNameComponents?);
  }
  v20 = v19;
  static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

  v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v21(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PersonNameComponents?);
  v22 = v28[0];
  v21((char *)v28[0], v6, v7);
  PersonNameComponents.givenName.getter();
  if (v23)
    Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  PersonNameComponents.familyName.getter();
  if (v24)
    Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  PersonNameComponents.middleName.getter();
  if (v25)
    Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  PersonNameComponents.nickname.getter();
  if (v26)
    Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
}

void ContactProfileSliceResolver.getAddresses(identifier:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void (*v17)(id *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)(_QWORD *@<X8>));
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  id v34;
  id *v35;
  uint64_t *v36;
  char *v37;
  id v38;

  v3 = v2;
  v36 = a2;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v34 - v9;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    v13 = swift_once();
  v35 = &v34;
  v16 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v13);
  v30 = v3;
  v31 = a1;
  v32 = v36;
  Date.init()();
  v17 = *(void (**)(id *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)(_QWORD *@<X8>)))(*(_QWORD *)v16 + 200);
  v32 = &v29;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNContact?);
  LOBYTE(v30) = 2;
  v17(&v38, 0xD00000000000003ALL, 0x80000001C2508640, 0, v15, "SiriInformationSearch/ContactProfileSliceResolver.swift", 55, 2, 219, "getAddresses(identifier:)", 25, v30, partial apply for closure #1 in ContactProfileSliceResolver.getAddresses(identifier:));
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (!v38)
    return;
  v18 = v38;
  v19 = objc_msgSend(v18, sel_postalAddresses);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNLabeledValue);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v34 = v18;
    if (v21)
      goto LABEL_6;
LABEL_19:
    v28 = v34;

    swift_bridgeObjectRelease();
    return;
  }
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  v34 = v18;
  if (!v21)
    goto LABEL_19;
LABEL_6:
  if (v21 >= 1)
  {
    v22 = 0;
    v35 = (id *)(v20 & 0xC000000000000001);
    v23 = MEMORY[0x1E0DEE9D8];
    v36 = (uint64_t *)v20;
    do
    {
      if (v35)
        v24 = (id)MEMORY[0x1C3BBF3F4](v22, v20);
      else
        v24 = *(id *)(v20 + 8 * v22 + 32);
      v25 = v24;
      v32 = (uint64_t *)MEMORY[0x1E0C80A78](v24);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ContactAddress and conformance Apple_Parsec_Siri_V2alpha_ContactAddress, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6ECC0], MEMORY[0x1E0D6EC98]);
      static Message.with(_:)();
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v37, v10, v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
      v27 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v23 + 24);
      if (v27 >= v26 >> 1)
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v23);
      ++v22;
      *(_QWORD *)(v23 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v27, v37, v5);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      v20 = (unint64_t)v36;
    }
    while (v21 != v22);
    goto LABEL_19;
  }
  __break(1u);
}

void closure #1 in ContactProfileSliceResolver.getAddresses(identifier:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  Class isa;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore);
  v6 = (void *)MEMORY[0x1C3BBEC44](a2, a3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C24FB5A0;
  v8 = (void *)*MEMORY[0x1E0C967F0];
  *(_QWORD *)(v7 + 32) = *MEMORY[0x1E0C967F0];
  specialized Array._endMutation()();
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15[0] = 0;
  v11 = objc_msgSend(v5, sel_unifiedContactWithIdentifier_keysToFetch_error_, v6, isa, v15);

  v12 = v15[0];
  if (!v11)
  {
    v13 = v12;
    v14 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v11 = 0;
  }
  *a4 = v11;
}

uint64_t closure #2 in ContactProfileSliceResolver.getAddresses(identifier:)(int a1, id a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = objc_msgSend(a2, sel_label);
  if (v3)
  {
    v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  v5 = objc_msgSend(a2, sel_value);
  v6 = objc_msgSend(v5, sel_street);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  v7 = objc_msgSend(a2, sel_value);
  v8 = objc_msgSend(v7, sel_city);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  v9 = objc_msgSend(a2, sel_value);
  v10 = objc_msgSend(v9, sel_ISOCountryCode);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.setter();
  v11 = objc_msgSend(a2, sel_value);
  v12 = objc_msgSend(v11, sel_postalCode);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  v13 = objc_msgSend(a2, sel_value);
  v14 = objc_msgSend(v13, sel_state);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
}

uint64_t *ContactProfileSliceResolver.deinit()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  outlined consume of AssistantDataSnapshot?(v0[7], v0[8], v0[9], v0[10]);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
  v1 = (char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  return v0;
}

uint64_t ContactProfileSliceResolver.__deallocating_deinit()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  outlined consume of AssistantDataSnapshot?(v0[7], v0[8], v0[9], v0[10]);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
  v1 = (char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t *specialized ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t *boxed_opaque_existential_1;
  char *v20;
  uint64_t v21;

  a9[5] = a10;
  a9[6] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a9 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(boxed_opaque_existential_1, a7, a10);
  outlined init with take of PommesSearchReason?(a1, (uint64_t)(a9 + 7), (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  a9[19] = a2;
  a9[20] = a3;
  outlined init with take of PommesSearchReason?(a4, (uint64_t)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
  v20 = (char *)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest;
  v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a5, v21);
  *(uint64_t *)((char *)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore) = a8;
  *(uint64_t *)((char *)a9 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil) = a6;
  return a9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40[5];
  uint64_t v41;

  v3 = v2;
  v36 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1E0C80A78](v5);
  v34 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
  v38 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v37 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v35 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_18;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    if (!v12)
      return v13;
    v41 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0)
      break;
    v39 = v3;
    v3 = 0;
    v13 = v41;
    v29 = v9;
    v30 = a1 & 0xC000000000000001;
    v32 = v7;
    v33 = a1;
    v31 = v12;
    while ((void *)v12 != v3)
    {
      if (v30)
        v15 = (id)MEMORY[0x1C3BBF3F4](v3, a1);
      else
        v15 = *(id *)(a1 + 8 * (_QWORD)v3 + 32);
      v16 = v15;
      v17 = MEMORY[0x1E0C80A78](v15);
      v18 = v36;
      *(&v29 - 2) = v17;
      *(&v29 - 1) = v18;
      v19 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6DD60], MEMORY[0x1E0D6DD28]);
      v20 = v37;
      v21 = v39;
      static Message.with(_:)();
      v40[3] = v7;
      v40[4] = v19;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v40);
      (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(boxed_opaque_existential_1, v20, v7);
      defaultAnyTypeURLPrefix.getter();
      v9 = (uint64_t)v34;
      Google_Protobuf_Any.init(message:partial:typePrefix:)();
      if (v21)
      {

        v23 = type metadata accessor for Google_Protobuf_Any();
        v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v9, 1, 1, v23);
      }
      else
      {
        v25 = type metadata accessor for Google_Protobuf_Any();
        v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v9, 0, 1, v25);
      }
      v26 = v29;
      MEMORY[0x1E0C80A78](v24);
      *(&v29 - 2) = v9;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
      static Message.with(_:)();
      v39 = 0;
      v7 = v32;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v32);
      outlined destroy of MediaUserStateCenter?(v9, &demangling cache variable for type metadata for Google_Protobuf_Any?);

      v41 = v13;
      v28 = *(_QWORD *)(v13 + 16);
      v27 = *(_QWORD *)(v13 + 24);
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v13 = v41;
      }
      v3 = (char *)v3 + 1;
      *(_QWORD *)(v13 + 16) = v28 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v13+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v28, v11, v26);
      v12 = v31;
      a1 = v33;
      if ((void *)v31 == v3)
        return v13;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *boxed_opaque_existential_1;
  void (*v31)(uint64_t *, char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  os_log_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78[2];

  v71 = type metadata accessor for ContactQuery();
  v67 = *(_QWORD *)(v71 - 8);
  v5 = MEMORY[0x1E0C80A78](v71);
  v65 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v76 = (char *)&v58 - v7;
  v8 = type metadata accessor for OccupantIntentNode();
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v60 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v62 = (char *)&v58 - v12;
  MEMORY[0x1E0C80A78](v11);
  v75 = (char *)&v58 - v13;
  v14 = type metadata accessor for NonTerminalIntentNode();
  v73 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v61 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v72 = (char *)&v58 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Value?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (os_log_t *)((char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for TerminalIntentNode();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v20 = a2;
  v20[1] = a3;
  v25 = *MEMORY[0x1E0DA0970];
  v26 = type metadata accessor for TerminalElement.Value();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v27 + 104))(v20, v25, v26);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v20, 0, 1, v26);
  swift_bridgeObjectRetain();
  TerminalIntentNode.init(name:value:semanticTags:)();
  type metadata accessor for AddressOntologyNode.OccupantNode();
  swift_allocObject();
  AddressOntologyNode.OccupantNode.init(name:multicardinal:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentNode>);
  v28 = swift_allocObject();
  v66 = xmmword_1C24FA1B0;
  *(_OWORD *)(v28 + 16) = xmmword_1C24FA1B0;
  v29 = MEMORY[0x1E0DA0E98];
  *(_QWORD *)(v28 + 56) = v21;
  *(_QWORD *)(v28 + 64) = v29;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v28 + 32));
  v68 = v24;
  v69 = v22;
  v31 = *(void (**)(uint64_t *, char *, uint64_t))(v22 + 16);
  v70 = v21;
  v31(boxed_opaque_existential_1, v24, v21);
  v32 = v72;
  v34 = v75;
  v33 = v76;
  NonTerminalIntentNode.init(name:childNodes:resultIDs:)();
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v61, v32, v74);
  swift_retain();
  OccupantIntentNode.init(intentNode:ontologyNode:)();
  type metadata accessor for ContactProfileSliceResolver();
  static ContactProfileSliceResolver.toContactNode(occupantNode:)();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
  v37 = v62;
  v36 = v63;
  v38 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v39 = v34;
  v40 = v64;
  v38(v62, v39, v64);
  v41 = v67;
  v42 = v65;
  v43 = v71;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v65, v33, v71);
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  LODWORD(v61) = v45;
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc();
    v59 = swift_slowAlloc();
    v78[0] = v59;
    *(_DWORD *)v46 = 136315394;
    v58 = v44;
    v38(v60, v37, v40);
    v47 = String.init<A>(describing:)();
    v48 = v37;
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v50 = *(void (**)(char *, uint64_t))(v36 + 8);
    v43 = v71;
    v50(v48, v40);
    *(_WORD *)(v46 + 12) = 2080;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98578], MEMORY[0x1E0D98588]);
    v51 = dispatch thunk of CustomStringConvertible.description.getter();
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    v44 = v58;
    _os_log_impl(&dword_1C2356000, v58, (os_log_type_t)v61, "NameProfileResolver: occupant node %s contactQuery %s", (uint8_t *)v46, 0x16u);
    v53 = v59;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v53, -1, -1);
    MEMORY[0x1C3BBFF64](v46, -1, -1);
  }
  else
  {
    v54 = v37;
    v50 = *(void (**)(char *, uint64_t))(v36 + 8);
    v50(v54, v40);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
  v55 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = v66;
  (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v56 + v55, v76, v43);
  swift_release();
  v50(v75, v40);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
  return v56;
}

uint64_t dispatch thunk of ContactResolverProtocol.resolve(queries:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t ObjC metadata update function for ContactProfileSliceResolver()
{
  return type metadata accessor for ContactProfileSliceResolver();
}

uint64_t type metadata accessor for ContactProfileSliceResolver()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContactProfileSliceResolver;
  if (!type metadata singleton initialization cache for ContactProfileSliceResolver)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ContactProfileSliceResolver()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for PommesCandidateId?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ContactProfileSliceResolver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContactProfileSliceResolver.__allocating_init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  uint64_t v9;
  __int16 v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_WORD *)(a1 + 88);
  v4 = *(uint64_t (**)(_OWORD *))(v1 + 136);
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v8[4] = *(_OWORD *)(a1 + 64);
  v9 = v2;
  v10 = v3;
  return v4(v8);
}

uint64_t dispatch thunk of ContactProfileSliceResolver.resolveRelationship()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ContactProfileSliceResolver.resolveNameSlice(label:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

void type metadata accessor for PommesCandidateId?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PommesCandidateId?)
  {
    type metadata accessor for PommesCandidateId();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PommesCandidateId?);
  }
}

void partial apply for closure #1 in ContactProfileSliceResolver.getAddresses(identifier:)(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  closure #1 in ContactProfileSliceResolver.getAddresses(identifier:)(v1[2], v1[3], v1[4], a1);
}

uint64_t partial apply for closure #2 in ContactProfileSliceResolver.getAddresses(identifier:)(int a1)
{
  uint64_t v1;

  return closure #2 in ContactProfileSliceResolver.getAddresses(identifier:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ContactProfileSliceResolver.buildPerson(person:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ContactProfileSliceResolver.buildPerson(person:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ContactProfileSliceResolver.searchContacts(contactQuery:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t specialized ContactProfileSliceResolver.dedupeContacts(matches:)(unint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v34 = v2;
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v32 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      v5 = 4;
      v30 = v4;
      v31 = isUniquelyReferenced_nonNull_native;
      while (1)
      {
        if (v32)
          v8 = (id)MEMORY[0x1C3BBF3F4](v5 - 4, isUniquelyReferenced_nonNull_native);
        else
          v8 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v5);
        v7 = v8;
        v9 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v10 = objc_msgSend(v8, sel_contactIdentifier);
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v14 = v13;

          v33 = v12;
          if (v3[2])
          {
            swift_bridgeObjectRetain();
            specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
            if ((v15 & 1) != 0)
            {

              swift_bridgeObjectRelease_n();
              goto LABEL_9;
            }
            swift_bridgeObjectRelease();
          }
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v17 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14);
          v18 = v3[2];
          v19 = (v16 & 1) == 0;
          v20 = v18 + v19;
          if (__OFADD__(v18, v19))
            goto LABEL_30;
          v21 = v16;
          if (v3[3] >= v20)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
            v22 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v14);
            if ((v21 & 1) != (v23 & 1))
            {
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            v17 = v22;
          }
          if ((v21 & 1) != 0)
          {
            *(_BYTE *)(v3[7] + v17) = 1;
            v6 = v7;
          }
          else
          {
            v3[(v17 >> 6) + 8] |= 1 << v17;
            v24 = (uint64_t *)(v3[6] + 16 * v17);
            *v24 = v33;
            v24[1] = v14;
            *(_BYTE *)(v3[7] + v17) = 1;
            v25 = v3[2];
            v26 = __OFADD__(v25, 1);
            v27 = v25 + 1;
            v6 = v7;
            if (v26)
              goto LABEL_31;
            v3[2] = v27;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = v6;
          MEMORY[0x1C3BBEE78]();
          v4 = v30;
          isUniquelyReferenced_nonNull_native = v31;
          if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }

LABEL_9:
        ++v5;
        if (v9 == v4)
        {
          swift_bridgeObjectRelease();
          v28 = v34;
          goto LABEL_34;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  v28 = MEMORY[0x1E0DEE9D8];
LABEL_34:
  swift_bridgeObjectRelease();
  return v28;
}

unint64_t type metadata accessor for INPerson()
{
  unint64_t result;

  result = lazy cache variable for type metadata for INPerson;
  if (!lazy cache variable for type metadata for INPerson)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INPerson);
  }
  return result;
}

uint64_t closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)partial apply(uint64_t a1)
{
  return partial apply for closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(a1);
}

uint64_t KVFieldType.mpMediaEntityType.getter(uint64_t a1)
{
  __int128 v1;
  uint64_t result;

  *((_QWORD *)&v1 + 1) = a1;
  *(_QWORD *)&v1 = a1 - 202;
  result = 7;
  switch((unint64_t)(v1 >> 1))
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 4;
      break;
    case 2uLL:
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
      result = 0;
      break;
    case 4uLL:
      result = 3;
      break;
    case 7uLL:
      result = 1;
      break;
    case 0xCuLL:
      result = 2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t (*default argument 0 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)())()
{
  return closure #1 in default argument 0 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:);
}

uint64_t PegasusProxy.__allocating_init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a7;
  v31 = a8;
  v28 = a3;
  v29 = a6;
  v27 = a1;
  v12 = swift_allocObject();
  v13 = *(_QWORD *)(a5 + 24);
  v26 = *(_QWORD *)(a5 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  v19 = *(_QWORD *)(a9 + 24);
  v18 = *(_QWORD *)(a9 + 32);
  v20 = __swift_mutable_project_boxed_opaque_existential_1(a9, v19);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  v24 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(v27, a2, v28, a4, (uint64_t)v16, v29, v30, v31, (uint64_t)v22, v12, v19, v13, v18, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v24;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v21 = v2;
    v28 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v28;
    v26 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v10 = a1 + v26;
    v11 = *(_QWORD *)(v5 + 72);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v25 = v11;
    v23 = xmmword_1C24FA1B0;
    v22 = v4;
    do
    {
      v24(v7, v10, v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RewrittenUtterance>);
      v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
      v13 = *(_QWORD *)(v12 - 8);
      v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = v23;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16))(v15 + v14, v27, v12);
      Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.setter();
      v28 = v9;
      v17 = *(_QWORD *)(v9 + 16);
      v16 = *(_QWORD *)(v9 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v9 = v28;
      }
      *(_QWORD *)(v9 + 16) = v17 + 1;
      v18 = v25;
      v19 = v9 + v26 + v17 * v25;
      v4 = v22;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19, v7, v22);
      v10 += v18;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t PegasusSearchResponse.init(request:response:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v7 = a3 + *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00], MEMORY[0x1E0C95E18]);
    result = Set.Iterator.init(_cocoa:)();
    v1 = v18;
    v17 = v19;
    v3 = v20;
    v4 = v21;
    v5 = v22;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v17 = a1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v4 << 6);
      v12 = v4;
      goto LABEL_29;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v13 >= v9)
      return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
    v14 = *(_QWORD *)(v17 + 8 * v13);
    v12 = v4 + 1;
    if (!v14)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v9)
        return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
      v14 = *(_QWORD *)(v17 + 8 * v12);
      if (!v14)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v9)
          return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
        v14 = *(_QWORD *)(v17 + 8 * v12);
        if (!v14)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v9)
            return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
          v14 = *(_QWORD *)(v17 + 8 * v12);
          if (!v14)
          {
            v12 = v4 + 5;
            if (v4 + 5 >= v9)
              return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
            v14 = *(_QWORD *)(v17 + 8 * v12);
            if (!v14)
            {
              v15 = v4 + 6;
              while (v9 != v15)
              {
                v14 = *(_QWORD *)(v17 + 8 * v15++);
                if (v14)
                {
                  v12 = v15 - 1;
                  goto LABEL_28;
                }
              }
              return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_29:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16)
      return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
    while (1)
    {
      AnyCancellable.cancel()();
      result = swift_release();
      v4 = v12;
      v5 = v10;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for AnyCancellable();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        v12 = v4;
        v10 = v5;
        if (v23)
          continue;
      }
      return outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
    }
  }
  __break(1u);
  return result;
}

uint64_t PegasusSearchResponse.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PegasusSearchResponse.response.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL static PegasusError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PegasusError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int PegasusError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t OnDeviceLabels.userSpanLabels.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*OnDeviceLabels.userSpanLabels.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t OnDeviceLabels.onScreenContextLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OnDeviceLabels.onScreenContextLabels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*OnDeviceLabels.onScreenContextLabels.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

SiriInformationSearch::OnDeviceLabels __swiftcall OnDeviceLabels.init()()
{
  void *v0;
  void *v1;
  void *v2;
  SiriInformationSearch::OnDeviceLabels result;

  v0 = (void *)MEMORY[0x1E0DEE9D8];
  v1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v2 = v0;
  result.onScreenContextLabels._rawValue = v1;
  result.userSpanLabels._rawValue = v2;
  return result;
}

uint64_t default argument 0 of OnDeviceLabels.init(userSpanLabels:onScreenContextLabels:)()
{
  return MEMORY[0x1E0DEE9D8];
}

unint64_t default argument 1 of OnDeviceLabels.init(userSpanLabels:onScreenContextLabels:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

unint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.summarizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  Swift::String v74;
  Swift::String v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  char *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;
  char *v94;
  uint64_t v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  Swift::String v115;
  void (*v116)(char *, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;

  v1 = type metadata accessor for Latencyinfopb_KfedLatencyInfo();
  v108 = *(_QWORD *)(v1 - 8);
  v109 = v1;
  MEMORY[0x1E0C80A78](v1);
  v107 = (char *)&v100 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v104 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v105 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.Error();
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v101 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v113 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v114 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v121 = *(_QWORD *)(v6 - 8);
  v122 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v111 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v100 - v9;
  v11 = (_QWORD *)type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v115._countAndFlagsBits = *(v11 - 1);
  v115._object = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v117 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v100 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  MEMORY[0x1E0C80A78](v20);
  v112 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v110 = (char *)&v100 - v27;
  v28 = v0;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  v29 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v118 = v14;
  v30 = v29(v19, v14);
  v31 = (_QWORD *)MEMORY[0x1C3BBC31C](v30);
  (*(void (**)(char *, void *))(v115._countAndFlagsBits + 8))(v13, v115._object);
  v32 = v31[2];
  v120 = v28;
  v116 = (void (*)(char *, uint64_t))v29;
  if (v32)
  {
    v33 = (char *)v31 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v34 = *(_QWORD *)(v23 + 72);
    v35 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v115._object = v31;
    swift_bridgeObjectRetain();
    while (1)
    {
      v35(v26, v33, v22);
      v36 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
      v37 = MEMORY[0x1C3BBC364](v36);
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v121 + 8))(v10, v122);
      swift_bridgeObjectRelease();
      v40 = HIBYTE(v39) & 0xF;
      if ((v39 & 0x2000000000000000) == 0)
        v40 = v37 & 0xFFFFFFFFFFFFLL;
      if (v40)
        break;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
      v33 += v34;
      if (!--v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    v44 = (uint64_t)v112;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v112, v26, v22);
    v41 = 0;
    v42 = v113;
    v43 = v114;
  }
  else
  {
LABEL_8:
    v41 = 1;
    v42 = v113;
    v43 = v114;
    v44 = (uint64_t)v112;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v44, v41, 1, v22);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v44, 1, v22) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
    v121 = 0;
    v45 = 0xE000000000000000;
    v115._countAndFlagsBits = 0;
    v115._object = (void *)0xE000000000000000;
  }
  else
  {
    v46 = v42;
    v47 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v110, v44, v22);
    v48 = v111;
    v49 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
    v115._countAndFlagsBits = MEMORY[0x1C3BBC370](v49);
    v115._object = v50;
    v51 = v122;
    v52 = *(void (**)(char *, uint64_t))(v121 + 8);
    v52(v48, v122);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
    v121 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
    v45 = v53;
    v52(v48, v51);
    v54 = v47;
    v42 = v46;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v54, v22);
  }
  v55 = v117;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  v56 = v118;
  v57 = v116;
  v58 = ((uint64_t (*)(char *, uint64_t))v116)(v55, v118);
  v59 = MEMORY[0x1C3BBC3A0](v58);
  v60 = *(void (**)(char *, uint64_t))(v42 + 8);
  v61 = v119;
  v60(v43, v119);
  v62 = *(_QWORD *)(v59 + 16);
  swift_bridgeObjectRelease();
  if (v62)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v124 = 0;
    v125 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v63._object = (void *)0x80000001C2508770;
    v64 = v61;
    v63._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v63);
    v65._countAndFlagsBits = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v66._countAndFlagsBits = 0xD00000000000001CLL;
    v66._object = (void *)0x80000001C2508790;
    String.append(_:)(v66);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
    v57(v55, v56);
    v67 = Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest.summarizedDescription.getter();
    v69 = v68;
    v60(v43, v64);
    v70._countAndFlagsBits = v67;
    v70._object = v69;
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    v71 = 0x5D202020200ALL;
    v72 = 0xE600000000000000;
  }
  else
  {
    v73 = v45;
    if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasError.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v124 = 0;
      v125 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v124 = 0xD000000000000013;
      v125 = 0x80000001C2508770;
      v74._countAndFlagsBits = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v75._countAndFlagsBits = 0x7265202020200A2CLL;
      v75._object = (void *)0xED0000203A726F72;
      String.append(_:)(v75);
      v76 = v101;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.error.getter();
      v77 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.Error.message.getter();
      v79 = v78;
      (*(void (**)(char *, uint64_t))(v102 + 8))(v76, v103);
      v80 = v77;
      v81 = v79;
    }
    else
    {
      v124 = 0;
      v125 = 0xE000000000000000;
      _StringGuts.grow(_:)(163);
      v82._object = (void *)0x80000001C2508770;
      v82._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v82);
      v83._countAndFlagsBits = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
      String.append(_:)(v83);
      swift_bridgeObjectRelease();
      v84._object = (void *)0x80000001C25087B0;
      v84._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v84);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
      Double.write<A>(to:)();
      v85._countAndFlagsBits = 0xD000000000000012;
      v85._object = (void *)0x80000001C25087D0;
      String.append(_:)(v85);
      v86 = v105;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
      v87 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
      v89 = v88;
      v90 = *(void (**)(char *, uint64_t))(v104 + 8);
      v91 = v106;
      v90(v86, v106);
      v92._countAndFlagsBits = v87;
      v92._object = v89;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v93._countAndFlagsBits = 0xD00000000000001DLL;
      v93._object = (void *)0x80000001C25087F0;
      String.append(_:)(v93);
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
      v94 = v107;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.latencyInfo.getter();
      v90(v86, v91);
      v95 = Latencyinfopb_KfedLatencyInfo.overallMs.getter();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v94, v109);
      v123 = v95;
      v96._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v96);
      swift_bridgeObjectRelease();
      v97._object = (void *)0x80000001C2508810;
      v97._countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v97);
      String.append(_:)(v115);
      swift_bridgeObjectRelease();
      v98._countAndFlagsBits = 0xD00000000000001BLL;
      v98._object = (void *)0x80000001C2508830;
      String.append(_:)(v98);
      v80 = v121;
      v81 = v73;
    }
    String.append(_:)(*(Swift::String *)&v80);
    swift_bridgeObjectRelease();
    v71 = 32010;
    v72 = 0xE200000000000000;
  }
  String.append(_:)(*(Swift::String *)&v71);
  return v124;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest.summarizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1C3BBC3A0](v2);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    v19[1] = v5;
    v8 = v5 + v7;
    v9 = *(_QWORD *)(v1 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    v21 = v9;
    v22 = v1;
    do
    {
      v20(v4, v8, v0);
      v23 = 9;
      v24 = 0xE100000000000000;
      v10._countAndFlagsBits = Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest.summarizedDescription.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11 = v23;
      v12 = v24;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
      v13 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = v25;
      }
      v15 = *(_QWORD *)(v13 + 16);
      v14 = *(_QWORD *)(v13 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v13 = v25;
      }
      *(_QWORD *)(v13 + 16) = v15 + 1;
      v16 = v13 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 40) = v12;
      v1 = v22;
      v8 += v21;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v23 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v17 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest.summarizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t result;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  MEMORY[0x1E0C80A78](v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v1);
  *(_QWORD *)&v46 = String.init<A>(describing:)();
  *((_QWORD *)&v46 + 1) = v4;
  v5 = lazy protocol witness table accessor for type String and conformance String();
  v6 = MEMORY[0x1C3BBF2F8](10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E0DEA968], v5);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 + 16);
  v42[1] = v6;
  if (v7)
  {
    v8 = lazy protocol witness table accessor for type Substring and conformance Substring();
    v9 = (uint64_t *)(v6 + 56);
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v42[2] = v8;
    v43 = v5;
    do
    {
      v11 = *(v9 - 3);
      v12 = *(v9 - 2);
      v13 = *(v9 - 1);
      v14 = *v9;
      *(_QWORD *)&v46 = v11;
      *((_QWORD *)&v46 + 1) = v12;
      v47 = v13;
      v48 = v14;
      v44 = 8250;
      v45 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v49 = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1);
          v10 = v49;
        }
        v17 = v10[2];
        v16 = v10[3];
        if (v17 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          v10 = v49;
        }
        v10[2] = v17 + 1;
        v18 = &v10[4 * v17];
        v18[4] = v11;
        v18[5] = v12;
        v18[6] = v13;
        v18[7] = v14;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v9 += 4;
      --v7;
    }
    while (v7);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v19 = v10[2];
  if (v19)
  {
    swift_retain();
    v43 = lazy protocol witness table accessor for type Substring and conformance Substring();
    v20 = v10 + 7;
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v22 = *(v20 - 1);
      v23 = *v20;
      v46 = *(_OWORD *)(v20 - 3);
      v47 = v22;
      v48 = v23;
      swift_bridgeObjectRetain();
      v24 = MEMORY[0x1C3BBF2F8](58, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E0DEBAF0], v43);
      v25 = *(_QWORD *)(v24 + 16);
      if (v25)
      {
        v26 = (uint64_t *)(v24 + 32 * v25);
        v28 = *v26;
        v27 = v26[1];
        v30 = v26[2];
        v29 = v26[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        v32 = v21[2];
        v31 = v21[3];
        if (v32 >= v31 >> 1)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v21);
        v21[2] = v32 + 1;
        v33 = &v21[4 * v32];
        v33[4] = v28;
        v33[5] = v27;
        v33[6] = v30;
        v33[7] = v29;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v20 += 4;
      --v19;
    }
    while (v19);
    swift_release();
  }
  else
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_release();
  if (!v21[2])
    goto LABEL_28;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (v21[2])
    {
LABEL_27:
      *(_QWORD *)&v46 = 58;
      *((_QWORD *)&v46 + 1) = 0xE100000000000000;
      v35 = MEMORY[0x1C3BBECC8](v21[4], v21[5], v21[6], v21[7]);
      v37 = v36;
      swift_bridgeObjectRelease();
      v44 = v35;
      v45 = v37;
      *((_OWORD *)v21 + 2) = xmmword_1C24FFD60;
      v21[6] = 0;
      v21[7] = 0xE000000000000000;
      String.append<A>(contentsOf:)();
      v21[4] = MEMORY[0x1C3BBF268](v44, v45);
      v21[5] = v38;
      v21[6] = v39;
      v21[7] = v40;
LABEL_28:
      *(_QWORD *)&v46 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Substring]);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type [Substring] and conformance [A], &demangling cache variable for type metadata for [Substring], MEMORY[0x1E0DEAF38]);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      v41 = Sequence<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v41;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
    v21 = (_QWORD *)result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t PegasusProxy.enablePromptContextLogging.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*PegasusProxy.enablePromptContextLogging.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t one-time initialization function for allowedClientEntityLabels()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for allowedClientEntityLabels);
  result = swift_arrayDestroy();
  static PegasusProxy.allowedClientEntityLabels = v0;
  return result;
}

id static PegasusProxy.defaultLocationManager()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  id result;
  id v6;
  _QWORD v7[5];

  v7[3] = &type metadata for FeatureFlag;
  v7[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v2 = swift_allocObject();
  v7[0] = v2;
  *(_QWORD *)(v2 + 16) = 4;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 3;
  v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if ((v3 & 1) != 0)
  {
    v4 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    result = (id)AssistantLocationProvider.init(serviceHelper:)(0);
    a1[3] = v4;
    a1[4] = &protocol witness table for AssistantLocationProvider;
    *a1 = result;
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v6 = (id)static PommesLocationManager.shared;
    a1[3] = type metadata accessor for PommesLocationManager(0);
    a1[4] = &protocol witness table for PommesLocationManager;
    *a1 = v6;
    return v6;
  }
  return result;
}

uint64_t key path setter for PegasusProxy.client : PegasusProxy(_OWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_beginAccess();
  *(_OWORD *)(v3 + 80) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t PegasusProxy.locationManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AppDataProviding(v1 + 96, a1);
}

uint64_t PegasusProxy.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t PegasusProxy.phoneCallStateManager.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = a1;
  return swift_release();
}

uint64_t (*PegasusProxy.phoneCallStateManager.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t closure #1 in variable initialization expression of PegasusProxy.requestCancellableQueue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v11 = *(_QWORD *)(v0 - 8);
  v12 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for DispatchQoS.QoSClass();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF540], v5);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  v13 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v2, *MEMORY[0x1E0DEF8D0], v12);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t PegasusProxy.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PegasusProxy.dataProviderManager.getter()
{
  return swift_retain();
}

uint64_t (*default argument 5 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)())()
{
  return closure #1 in default argument 5 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:);
}

uint64_t closure #1 in default argument 5 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)()
{
  type metadata accessor for PegasusProxyForAssistant();
  return static PegasusProxyForAssistant.shared.getter();
}

uint64_t PegasusProxy.__allocating_init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _BYTE v38[24];
  ValueMetadata *v39;
  _UNKNOWN **v40;
  __int128 v41;
  __int128 v42;
  _UNKNOWN **v43;
  _BYTE v44[40];
  _BYTE v45[48];

  outlined init with copy of AppDataProviding(a8, (uint64_t)v45);
  outlined init with copy of AppDataProviding(a12, (uint64_t)v44);
  swift_retain();
  v17 = a11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v18 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
  type metadata accessor for AppDataProvider();
  v19 = swift_allocObject();
  *((_QWORD *)&v42 + 1) = &type metadata for PommesSystemAppChecking;
  v43 = &protocol witness table for PommesSystemAppChecking;
  *(_QWORD *)(v19 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  outlined init with take of AppDataProviding(&v41, v19 + 16);
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v20 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v19, 0, 0, (uint64_t)&v41);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v41, &demangling cache variable for type metadata for AppSearchViewProvider?);
  swift_release();
  type metadata accessor for MarketplaceInfoDataProvider();
  v21 = swift_allocObject();
  v22 = v21 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  v23 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  v31 = specialized AnyDataProvider.init<A>(provider:)(v21);
  type metadata accessor for PairedDeviceDataProvider();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  v25 = specialized AnyDataProvider.init<A>(provider:)(v24);
  type metadata accessor for SiriEnvironment();
  v29 = static SiriEnvironment.default.getter();
  type metadata accessor for DataProviderManager();
  v26 = swift_allocObject();
  v30 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(a1, a2, a3, v18, v20, a4, v31, v25, a14, v17, v29, 0, 0, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined init with copy of AppDataProviding(a13, (uint64_t)&v41);
  v39 = &type metadata for PIMSEnablementProvider;
  v40 = &protocol witness table for PIMSEnablementProvider;
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _BYTE *, uint64_t, _BYTE *, uint64_t, __int128 *))(v33 + 496))(a6, a7, v45, a9, v38, a10, v44, v30, &v41);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a13);
  __swift_destroy_boxed_opaque_existential_1(a12);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v27;
}

uint64_t PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a7;
  v31 = a8;
  v27 = a1;
  v28 = a3;
  v13 = *(_QWORD *)(a5 + 24);
  v26 = *(_QWORD *)(a5 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  v19 = *(_QWORD *)(a9 + 24);
  v18 = *(_QWORD *)(a9 + 32);
  v20 = __swift_mutable_project_boxed_opaque_existential_1(a9, v19);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  v24 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(v27, a2, v28, a4, (uint64_t)v16, a6, v30, v31, (uint64_t)v22, v29, v19, v13, v18, v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a9);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v24;
}

uint64_t PegasusProxy.setServiceHelper(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)v1;
  (*(void (**)(void))(**(_QWORD **)(v1 + 184) + 272))();
  type metadata accessor for PommesPhoneCallStateManager();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 40) = 3;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = *(void (**)(uint64_t))(*v2 + 360);
  swift_unknownObjectRetain();
  v5(v4);
  v6 = v2 + 12;
  v8 = v2[15];
  v7 = v2[16];
  __swift_project_boxed_opaque_existential_1(v6, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, v8, v7);
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtSessionStart()()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;

  v1 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v20 - v5;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  swift_bridgeObjectRelease();
  Date.init()();
  v7 = &v6[v1[5]];
  *(_QWORD *)v7 = "SiriInformationSearch/PegasusProxy.swift";
  *((_QWORD *)v7 + 1) = 40;
  v7[16] = 2;
  *(_QWORD *)&v6[v1[6]] = 336;
  v8 = &v6[v1[7]];
  *(_QWORD *)v8 = "prepareForSearchAtSessionStart()";
  *((_QWORD *)v8 + 1) = 32;
  v8[16] = 2;
  v9 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000026);
  v10 = (uint64_t *)&v6[v1[8]];
  *v10 = v9;
  v10[1] = v11;
  (*(void (**)(void))(**(_QWORD **)(v0 + 184) + 296))();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v6, 0);
  Date.init()();
  v12 = &v4[v1[5]];
  *(_QWORD *)v12 = "SiriInformationSearch/PegasusProxy.swift";
  *((_QWORD *)v12 + 1) = 40;
  v12[16] = 2;
  *(_QWORD *)&v4[v1[6]] = 340;
  v13 = &v4[v1[7]];
  *(_QWORD *)v13 = "prepareForSearchAtSessionStart()";
  *((_QWORD *)v13 + 1) = 32;
  v13[16] = 2;
  v14 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000021);
  v15 = (uint64_t *)&v4[v1[8]];
  *v15 = v14;
  v15[1] = v16;
  (*(void (**)(void))(*(_QWORD *)v0 + 328))();
  v18 = v17;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v18 + 56))(ObjectType, v18);
  swift_unknownObjectRelease();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v4, 0);
  outlined destroy of PommesSearchRequest((uint64_t)v4, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PerformanceUtil.Ticket);
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtRequestStart()()
{
  _QWORD *v0;
  _QWORD *v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1C2356000, v6, v7, "Fetching location", v8, 2u);
    MEMORY[0x1C3BBFF64](v8, -1, -1);
  }

  Date.init()();
  v9 = &v4[v2[5]];
  *(_QWORD *)v9 = "SiriInformationSearch/PegasusProxy.swift";
  *((_QWORD *)v9 + 1) = 40;
  v9[16] = 2;
  *(_QWORD *)&v4[v2[6]] = 348;
  v10 = &v4[v2[7]];
  *(_QWORD *)v10 = "prepareForSearchAtRequestStart()";
  *((_QWORD *)v10 + 1) = 32;
  v10[16] = 2;
  v11 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000024);
  v12 = (uint64_t *)&v4[v2[8]];
  *v12 = v11;
  v12[1] = v13;
  v14 = v1 + 12;
  v16 = v1[15];
  v15 = v1[16];
  __swift_project_boxed_opaque_existential_1(v14, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
  swift_release();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v4, 0);
  outlined destroy of PommesSearchRequest((uint64_t)v4, type metadata accessor for PerformanceUtil.Ticket);
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtRequestStart(requestId:)(Swift::String requestId)
{
  uint64_t v1;

  (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v1 + 536))(requestId._countAndFlagsBits, requestId._object, 0);
}

Swift::Void __swiftcall PegasusProxy.tearDown()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  _QWORD v40[2];
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v1 = type metadata accessor for Google_Protobuf_Duration();
  v52 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v51 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Search_LRConversationThread();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v44 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v40 - v7;
  v9 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(**(_QWORD **)(v0 + 184) + 312))(v11);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext);
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext + 8);
  *(_OWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext) = xmmword_1C24FEDE0;
  outlined consume of Data?(v14, v15);
  v16 = v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  swift_beginAccess();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v45 = v16;
  v17(v13, v16, v9);
  v18 = Apple_Parsec_Search_SearchConversationContext.lrcThreads.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v20 = *(_QWORD *)(v18 + 16);
  if (v20)
  {
    v41 = v13;
    v42 = v10;
    v43 = v9;
    v21 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v40[1] = v18;
    v22 = v18 + v21;
    v50 = *(_QWORD *)(v4 + 72);
    v23 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16);
    *(_QWORD *)&v19 = 136315138;
    v47 = v19;
    v46 = MEMORY[0x1E0DEE9B8] + 8;
    v24 = v4;
    v53 = v4;
    v25 = v44;
    v48 = v1;
    v49 = v23;
    v23(v8, v18 + v21, v3);
    while (1)
    {
      v26 = v51;
      Apple_Parsec_Search_LRConversationThread.longPersistenceTtl.getter();
      v27 = Google_Protobuf_Duration.seconds.getter();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v1);
      if (v27 <= 0)
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v3);
      }
      else
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
        v23(v25, v8, v3);
        v29 = Logger.logObject.getter();
        v30 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = swift_slowAlloc();
          v32 = swift_slowAlloc();
          v54[0] = v32;
          *(_DWORD *)v31 = v47;
          v33 = Apple_Parsec_Search_LRConversationThread.id.getter();
          *(_QWORD *)(v31 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v54);
          swift_bridgeObjectRelease();
          v35 = *(void (**)(char *, uint64_t))(v53 + 8);
          v35(v25, v3);
          _os_log_impl(&dword_1C2356000, v29, v30, "Long-Running Conversation Thread %s requires disk persistence (currently unsupported).", (uint8_t *)v31, 0xCu);
          swift_arrayDestroy();
          v36 = v32;
          v24 = v53;
          MEMORY[0x1C3BBFF64](v36, -1, -1);
          v37 = v31;
          v1 = v48;
          MEMORY[0x1C3BBFF64](v37, -1, -1);

          v35(v8, v3);
        }
        else
        {

          v38 = *(void (**)(char *, uint64_t))(v53 + 8);
          v38(v25, v3);
          v38(v8, v3);
          v24 = v53;
        }
        v23 = v49;
      }
      v22 += v50;
      if (!--v20)
        break;
      v23(v8, v22, v3);
    }
    swift_bridgeObjectRelease();
    v10 = v42;
    v9 = v43;
    v13 = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  Apple_Parsec_Search_SearchConversationContext.init()();
  v39 = v45;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v39, v13, v9);
  swift_endAccess();
}

uint64_t closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, char *, uint64_t);
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, char *, uint64_t);
  void *v53;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t aBlock;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  uint64_t (*v85)();
  uint64_t v86;
  char v87;
  char v88;

  v59 = a6;
  v62 = a5;
  v61 = a4;
  v60 = a3;
  v72 = type metadata accessor for DispatchWorkItemFlags();
  v70 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v69 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS();
  v68 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v67 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  v66 = *(_QWORD *)(v79 - 8);
  v9 = *(_QWORD *)(v66 + 64);
  MEMORY[0x1E0C80A78](v79);
  v78 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for PommesCandidateId();
  v65 = *(_QWORD *)(v77 - 8);
  v10 = *(_QWORD *)(v65 + 64);
  MEMORY[0x1E0C80A78](v77);
  v76 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for UUID();
  v64 = *(_QWORD *)(v75 - 8);
  v11 = *(_QWORD *)(v64 + 64);
  MEMORY[0x1E0C80A78](v75);
  v74 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  v73 = (uint64_t)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v55 - v19;
  v63 = a1;
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter();
  v21 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v20, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
    v23 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v18, v21);
    v24 = v23 == *MEMORY[0x1E0D6CBC8];
    v58 = v18;
    v57 = v22;
    if (v24)
    {
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (!Strong)
      {
LABEL_10:
        (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v21);
        return outlined destroy of MediaUserStateCenter?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
      }
      v55[1] = *(id *)(Strong + 152);
      swift_release();
      v56 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      outlined init with copy of MediaUserStateCenter?(v60, v73, &demangling cache variable for type metadata for UUID?);
      v60 = v21;
      v26 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v74, v61, v75);
      v27 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v76, v62, v77);
      v28 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v78, v63, v79);
      v29 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v30 = (v14 + *(unsigned __int8 *)(v26 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      v31 = (v11 + *(unsigned __int8 *)(v27 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      v32 = (v10 + *(unsigned __int8 *)(v28 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v56;
      outlined init with take of PommesSearchReason?(v73, v33 + v29, &demangling cache variable for type metadata for UUID?);
      v34 = *(void (**)(unint64_t, char *, uint64_t))(v26 + 32);
      v21 = v60;
      v34(v33 + v30, v74, v75);
      (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v33 + v31, v76, v77);
      (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v33 + v32, v78, v79);
      *(_QWORD *)(v33 + ((v9 + v32 + 7) & 0xFFFFFFFFFFFFFFF8)) = v59;
      v85 = partial apply for closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:);
      v86 = v33;
      aBlock = MEMORY[0x1E0C809B0];
      v82 = 1107296256;
      v83 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v84 = &block_descriptor_48;
      v35 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      v36 = v67;
      static DispatchQoS.unspecified.getter();
      v80 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v37 = v69;
      v38 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v39 = v36;
      v40 = v37;
      v41 = v35;
      v42 = &v87;
    }
    else
    {
      if (v23 != *MEMORY[0x1E0D6CBC0])
        goto LABEL_10;
      swift_beginAccess();
      v43 = swift_weakLoadStrong();
      if (!v43)
        goto LABEL_10;
      v59 = *(id *)(v43 + 152);
      swift_release();
      v56 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      outlined init with copy of MediaUserStateCenter?(v60, v73, &demangling cache variable for type metadata for UUID?);
      v60 = v21;
      v44 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v74, v61, v75);
      v45 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v76, v62, v77);
      v46 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v78, v63, v79);
      v47 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v48 = (v14 + *(unsigned __int8 *)(v44 + 80) + v47) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
      v49 = (v11 + *(unsigned __int8 *)(v45 + 80) + v48) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      v50 = (v10 + *(unsigned __int8 *)(v46 + 80) + v49) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      v51 = swift_allocObject();
      *(_QWORD *)(v51 + 16) = v56;
      outlined init with take of PommesSearchReason?(v73, v51 + v47, &demangling cache variable for type metadata for UUID?);
      v52 = *(void (**)(unint64_t, char *, uint64_t))(v44 + 32);
      v21 = v60;
      v52(v51 + v48, v74, v75);
      (*(void (**)(unint64_t, char *, uint64_t))(v45 + 32))(v51 + v49, v76, v77);
      (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v51 + v50, v78, v79);
      v85 = partial apply for closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:);
      v86 = v51;
      aBlock = MEMORY[0x1E0C809B0];
      v82 = 1107296256;
      v83 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v84 = &block_descriptor_41;
      v35 = _Block_copy(&aBlock);
      swift_retain();
      v36 = v67;
      static DispatchQoS.unspecified.getter();
      v80 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v37 = v69;
      v38 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v39 = v36;
      v40 = v37;
      v41 = v35;
      v42 = &v88;
    }
    v53 = (void *)*((_QWORD *)v42 - 32);
    MEMORY[0x1C3BBF154](0, v39, v40, v41);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v36, v71);
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  return outlined destroy of MediaUserStateCenter?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback?);
}

uint64_t closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t started;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a5;
  started = type metadata accessor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback();
  v11 = *(_QWORD *)(started - 8);
  MEMORY[0x1E0C80A78](started);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v26 = a2;
    v18 = *(_QWORD *)(result + 176);
    swift_retain();
    swift_release();
    v19 = type metadata accessor for PommesCandidateId();
    v27 = started;
    v20 = a3;
    v21 = *(_QWORD *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, a4, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v16, 0, 1, v19);
    Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.getter();
    swift_beginAccess();
    v22 = *(_QWORD *)(a6 + 16);
    v23 = *(_QWORD *)(a6 + 24);
    v24 = *(void (**)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))(*(_QWORD *)v18 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v26, v20, v16, v13, v22, v23);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesCandidateId?);
  }
  return result;
}

uint64_t closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = type metadata accessor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = *(_QWORD *)(result + 176);
    swift_retain();
    swift_release();
    v16 = type metadata accessor for PommesCandidateId();
    v17 = a3;
    v18 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v13, a4, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v16);
    Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.getter();
    (*(void (**)(uint64_t, uint64_t, char *, char *))(*(_QWORD *)v15 + 184))(a2, v17, v13, v10);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
  }
  return result;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10, void (*a11)(_BYTE *), uint64_t a12)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  char *v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  char *v115;
  void (*v116)(char *, char *, uint64_t);
  void (*v117)(char *, uint64_t);
  int v118;
  int v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v134;
  int *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  void (*v144)(uint64_t, _QWORD, uint64_t, uint64_t);
  double v145;
  double v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  uint64_t v153;
  char v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  os_log_type_t v180;
  uint8_t *v181;
  uint8_t *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  uint8_t *v191;
  uint64_t v192;
  unint64_t v193;
  NSObject *v194;
  uint64_t v195;
  uint8_t *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  void (*v200)(char *, _QWORD, void (*)(char *, uint64_t));
  uint64_t v201;
  uint64_t v202;
  void (*v203)(char *, _QWORD *);
  char *v204;
  uint64_t v205;
  NSObject *v206;
  os_log_type_t v207;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  os_log_type_t v212;
  _BOOL4 v213;
  uint64_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  void (*v219)(char *, uint64_t);
  uint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  char *v223;
  NSObject *v224;
  os_log_type_t v225;
  uint8_t *v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  Swift::String v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  void *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v248;
  void (*v249)(char *, uint64_t, uint64_t);
  void (*v250)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  uint64_t v291;
  void (*v292)(_BYTE *);
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  void (*v301)(char *, char *, uint64_t);
  void (*v302)(char *, char *, uint64_t);
  char *v303;
  char *v304;
  void (*v305)(char *, uint64_t);
  uint64_t v306;
  uint64_t v307;
  uint8_t *v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t aBlock[6];

  v303 = a8;
  v267 = a7;
  v266 = a6;
  v306 = a5;
  v307 = a3;
  v308 = a4;
  v310 = a2;
  v302 = (void (*)(char *, char *, uint64_t))a1;
  v12 = 0;
  v291 = a12;
  v292 = a11;
  v288 = a10;
  v298 = type metadata accessor for DispatchWorkItemFlags();
  v297 = *(_QWORD *)(v298 - 8);
  MEMORY[0x1E0C80A78](v298);
  v296 = (char *)&v248 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v295 = type metadata accessor for DispatchQoS();
  v294 = *(_QWORD *)(v295 - 8);
  MEMORY[0x1E0C80A78](v295);
  v293 = (char *)&v248 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = type metadata accessor for PegasusProxyForAssistant.Error();
  v287 = *(_QWORD **)(v283 - 8);
  v15 = MEMORY[0x1E0C80A78](v283);
  v285 = (char *)&v248 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v284 = (char *)&v248 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v248 - v19;
  v289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  MEMORY[0x1E0C80A78](v289);
  v290 = (char *)&v248 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1E0C80A78](v253);
  v254 = (char *)&v248 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = type metadata accessor for JSONEncodingOptions();
  v276 = *(_QWORD *)(v277 - 8);
  MEMORY[0x1E0C80A78](v277);
  v280 = (char *)&v248 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v281 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  v286 = *(_QWORD *)(v281 - 8);
  v24 = MEMORY[0x1E0C80A78](v281);
  v279 = (char *)&v248 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v278 = (char *)&v248 - v26;
  v273 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v272 = *(_QWORD *)(v273 - 8);
  MEMORY[0x1E0C80A78](v273);
  v252 = (char *)&v248 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v28);
  v265 = (char *)&v248 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = type metadata accessor for Latencyinfopb_KfedLatencyInfo();
  v262 = *(_QWORD *)(v263 - 8);
  MEMORY[0x1E0C80A78](v263);
  v261 = (char *)&v248 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v258 = *(_QWORD *)(v274 - 8);
  v31 = MEMORY[0x1E0C80A78](v274);
  v259 = (char *)&v248 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v264 = (char *)&v248 - v33;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1E0C80A78](v34);
  v260 = (char *)&v248 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v256 = *(_QWORD *)(v257 - 8);
  MEMORY[0x1E0C80A78](v257);
  v255 = (char *)&v248 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v37);
  v309 = (char *)&v248 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = type metadata accessor for PerformanceUtil.Ticket(0);
  v39 = MEMORY[0x1E0C80A78](v300);
  v275 = (char *)&v248 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v304 = (char *)&v248 - v41;
  v305 = (void (*)(char *, uint64_t))type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  v301 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v305 - 1);
  v42 = MEMORY[0x1E0C80A78](v305);
  v282 = (char *)&v248 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42);
  v299 = (char *)&v248 - v45;
  MEMORY[0x1E0C80A78](v44);
  v47 = (char *)&v248 - v46;
  v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  v268 = (char *)&v248 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0C80A78](v50);
  v270 = (char *)&v248 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v56 = (char *)&v248 - v55;
  MEMORY[0x1E0C80A78](v54);
  v58 = (char *)&v248 - v57;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, PegasusProxyForAssistant.Error>);
  MEMORY[0x1E0C80A78](v59);
  v61 = (char *)&v248 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = swift_projectBox();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v302, (uint64_t)v61, &demangling cache variable for type metadata for Result<Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, PegasusProxyForAssistant.Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v62 = v287;
    v63 = (void (*)(char *, char *, uint64_t))v287[4];
    v64 = v283;
    v63(v20, v61, v283);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v65 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v65, (uint64_t)static Signposter.pommes);
    OSSignposter.end(token:message:)(v288, 0x726F727265, 0xE500000000000000);
    v66 = (uint64_t)v304;
    v67 = v284;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
    v69 = (void (*)(char *, char *, uint64_t))v62[2];
    v69(v67, v20, v64);
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = swift_slowAlloc();
      v302 = v63;
      v73 = v67;
      v74 = (uint8_t *)v72;
      v75 = swift_slowAlloc();
      v303 = v20;
      v301 = v69;
      v76 = v64;
      v77 = v75;
      aBlock[0] = v75;
      *(_DWORD *)v74 = 136315138;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type PegasusProxyForAssistant.Error and conformance PegasusProxyForAssistant.Error, (uint64_t (*)(uint64_t))MEMORY[0x1E0D70820], MEMORY[0x1E0D70830]);
      v78 = Error.localizedDescription.getter();
      v311 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v80 = v73;
      v63 = v302;
      v305 = (void (*)(char *, uint64_t))v287[1];
      v305(v80, v76);
      _os_log_impl(&dword_1C2356000, v70, v71, "Pegasus error on client.searchResponsePublisher: %s", v74, 0xCu);
      swift_arrayDestroy();
      v81 = v77;
      v64 = v76;
      v69 = v301;
      v20 = v303;
      MEMORY[0x1C3BBFF64](v81, -1, -1);
      MEMORY[0x1C3BBFF64](v74, -1, -1);
    }
    else
    {
      v305 = (void (*)(char *, uint64_t))v62[1];
      v305(v67, v64);
    }

    Date.init()();
    v98 = (int *)v300;
    v99 = v66 + *(int *)(v300 + 20);
    *(_QWORD *)v99 = "SiriInformationSearch/PegasusProxy.swift";
    *(_QWORD *)(v99 + 8) = 40;
    *(_BYTE *)(v99 + 16) = 2;
    *(_QWORD *)(v66 + v98[6]) = 561;
    v100 = v66 + v98[7];
    *(_QWORD *)v100 = "search(pommesSearchRequest:completion:)";
    *(_QWORD *)(v100 + 8) = 39;
    *(_BYTE *)(v100 + 16) = 2;
    v101 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
    v102 = (uint64_t *)(v66 + v98[8]);
    *v102 = v101;
    v102[1] = v103;
    v104 = v285;
    v69(v285, v20, v64);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type PegasusProxyForAssistant.Error and conformance PegasusProxyForAssistant.Error, (uint64_t (*)(uint64_t))MEMORY[0x1E0D70820], MEMORY[0x1E0D70830]);
    v105 = (void *)swift_allocError();
    v63(v106, v104, v64);
    v107 = (void *)_convertErrorToNSError(_:)();
    v108 = objc_msgSend(v107, sel_code);

    v109 = v310;
    v110 = *(_QWORD *)(v310 + 176);
    v111 = type metadata accessor for PommesCandidateId();
    v112 = *(_QWORD *)(v111 - 8);
    v113 = (uint64_t)v309;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v309, v306, v111);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v113, 0, 1, v111);
    (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, id, _QWORD))(*(_QWORD *)v110 + 152))(v307, v308, v113, 1, v108, 0);
    outlined destroy of MediaUserStateCenter?(v113, &demangling cache variable for type metadata for PommesCandidateId?);
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v66, 0);
    v114 = v290;
    *v290 = 3;
    swift_storeEnumTagMultiPayload();
    v292(v114);
    outlined destroy of MediaUserStateCenter?((uint64_t)v114, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    outlined destroy of PommesSearchRequest(v66, type metadata accessor for PerformanceUtil.Ticket);
    v305(v20, v64);
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v58, v61, v48);
  v82 = v48;
  v83 = v49;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v84 = type metadata accessor for Logger();
  v85 = __swift_project_value_buffer(v84, (uint64_t)static Logger.pommes);
  v86 = *(char **)(v49 + 16);
  v303 = v58;
  v285 = v86;
  ((void (*)(char *, char *, uint64_t))v86)(v56, v58, v82);
  v302 = (void (*)(char *, char *, uint64_t))v85;
  v87 = Logger.logObject.getter();
  v88 = static os_log_type_t.debug.getter();
  v89 = os_log_type_enabled(v87, v88);
  v269 = v82;
  v251 = v49;
  if (v89)
  {
    v90 = (uint8_t *)swift_slowAlloc();
    v91 = swift_slowAlloc();
    v287 = 0;
    v92 = v91;
    aBlock[0] = v91;
    *(_DWORD *)v90 = 136315138;
    v93 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.summarizedDescription.getter();
    v311 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, aBlock);
    v95 = v269;
    v96 = v310;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v56, v95);
    _os_log_impl(&dword_1C2356000, v87, v88, "Pegasus: PegasusResponse: %s", v90, 0xCu);
    swift_arrayDestroy();
    v97 = v92;
    v12 = v287;
    MEMORY[0x1C3BBFF64](v97, -1, -1);
    MEMORY[0x1C3BBFF64](v90, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v56, v82);

    v96 = v310;
  }
  v115 = v303;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
  v116 = v301;
  v117 = v305;
  v118 = (*((uint64_t (**)(char *, _QWORD *))v301 + 11))(v47, v305);
  v119 = *MEMORY[0x1E0D6E230];
  v287 = (_QWORD *)*((_QWORD *)v116 + 1);
  ((void (*)(char *, _QWORD))v287)(v47, v117);
  v120 = (uint64_t)v304;
  if (v118 != v119)
  {
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D1E0], MEMORY[0x1E0D6D198]);
    Message.serializedData(partial:)();
    if (!v12)
      __asm { BR              X10 }

    v12 = 0;
    v134 = v275;
    Date.init()();
    v135 = (int *)v300;
    v136 = &v134[*(int *)(v300 + 20)];
    *(_QWORD *)v136 = "SiriInformationSearch/PegasusProxy.swift";
    *((_QWORD *)v136 + 1) = 40;
    v136[16] = 2;
    *(_QWORD *)&v134[v135[6]] = 507;
    v137 = &v134[v135[7]];
    *(_QWORD *)v137 = "search(pommesSearchRequest:completion:)";
    *((_QWORD *)v137 + 1) = 39;
    v137[16] = 2;
    v138 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002ALL);
    v139 = (uint64_t *)&v134[v135[8]];
    *v139 = v138;
    v139[1] = v140;
    v304 = *(char **)(v96 + 176);
    v141 = type metadata accessor for PommesCandidateId();
    v142 = *(_QWORD *)(v141 - 8);
    v143 = v309;
    v249 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 16);
    v249(v309, v306, v141);
    v144 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v142 + 56);
    v283 = v141;
    v250 = v144;
    v144((uint64_t)v143, 0, 1, v141);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
    v146 = v145;
    v147 = v255;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
    v148 = (uint64_t)v260;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
    (*(void (**)(char *, uint64_t))(v256 + 8))(v147, v257);
    v149 = v264;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
    v284 = (char *)Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
    v151 = v150;
    v152 = *(void (**)(char *, uint64_t))(v258 + 8);
    v153 = v274;
    v152(v149, v274);
    v300 = (uint64_t)v152;
    v154 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasRewrittenUtteranceIdx.getter();
    v155 = v259;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
    v156 = v261;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.latencyInfo.getter();
    v152(v155, v153);
    v157 = v154 & 1;
    v158 = v303;
    v159 = (uint64_t)v309;
    v160 = v299;
    v161 = v304;
    (*(void (**)(uint64_t, uint8_t *, char *, char *, uint64_t, char *, uint64_t, uint64_t, double, double, char *))(*(_QWORD *)v304 + 144))(v307, v308, v309, v299, v148, v284, v151, v157, v146, (double)0 * 0.0009765625, v156);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v262 + 8))(v156, v263);
    outlined destroy of MediaUserStateCenter?(v148, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
    v162 = v160;
    v115 = v158;
    ((void (*)(char *, _QWORD))v287)(v162, v305);
    outlined destroy of MediaUserStateCenter?(v159, &demangling cache variable for type metadata for PommesCandidateId?);
    swift_bridgeObjectRetain();
    v163 = (uint64_t)v265;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
    v164 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusSelfOpaquePayloads.getter();
    v165 = v274;
    v166 = (void (*)(char *, uint64_t))v300;
    ((void (*)(char *, uint64_t))v300)(v149, v274);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v161 + 160))(v163, v164);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v163, &demangling cache variable for type metadata for UUID?);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
    v167 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
    v169 = v168;
    v166(v149, v165);
    if (v167 == 1936744813 && v169 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      v117 = v305;
    }
    else
    {
      v170 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v117 = v305;
      if ((v170 & 1) != 0 || v167 == 7300455 && v169 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v171 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v171 & 1) == 0)
        {
LABEL_32:
          if (one-time initialization token for shared != -1)
            swift_once();
          v120 = (uint64_t)v275;
          (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v275, 0);
          v96 = v310;
          v131 = v281;
          v132 = v286;
          goto LABEL_35;
        }
      }
    }
    v172 = (uint64_t)v309;
    v173 = v283;
    v249(v309, v306, v283);
    v250(v172, 0, 1, v173);
    v174 = v271;
    swift_beginAccess();
    v175 = v272;
    v176 = v252;
    v177 = v273;
    (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v252, v174, v273);
    v178 = type metadata accessor for PommesSearchRequest(0);
    (*(void (**)(uint64_t, uint8_t *, uint64_t, char *, char *, uint64_t))(*(_QWORD *)v304 + 168))(v307, v308, v172, v176, v115, a9 + *(int *)(v178 + 44));
    (*(void (**)(char *, uint64_t))(v175 + 8))(v176, v177);
    outlined destroy of MediaUserStateCenter?(v172, &demangling cache variable for type metadata for PommesCandidateId?);
    goto LABEL_32;
  }
  Date.init()();
  v121 = (int *)v300;
  v122 = v120 + *(int *)(v300 + 20);
  *(_QWORD *)v122 = "SiriInformationSearch/PegasusProxy.swift";
  *(_QWORD *)(v122 + 8) = 40;
  *(_BYTE *)(v122 + 16) = 2;
  *(_QWORD *)(v120 + v121[6]) = 497;
  v123 = v120 + v121[7];
  *(_QWORD *)v123 = "search(pommesSearchRequest:completion:)";
  *(_QWORD *)(v123 + 8) = 39;
  *(_BYTE *)(v123 + 16) = 2;
  v124 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
  v125 = (uint64_t *)(v120 + v121[8]);
  *v125 = v124;
  v125[1] = v126;
  v127 = *(_QWORD *)(v96 + 176);
  v128 = type metadata accessor for PommesCandidateId();
  v129 = *(_QWORD *)(v128 - 8);
  v130 = (uint64_t)v309;
  (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v309, v306, v128);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v129 + 56))(v130, 0, 1, v128);
  (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v127 + 152))(v307, v308, v130, 5, 0, 1);
  outlined destroy of MediaUserStateCenter?(v130, &demangling cache variable for type metadata for PommesCandidateId?);
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v120, 0);
  v131 = v281;
  v132 = v286;
LABEL_35:
  outlined destroy of PommesSearchRequest(v120, type metadata accessor for PerformanceUtil.Ticket);
  v179 = Logger.logObject.getter();
  v180 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v179, v180))
  {
    v181 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v181 = 0;
    _os_log_impl(&dword_1C2356000, v179, v180, "Saving SearchConversationContext from Pegasus response", v181, 2u);
    v182 = v181;
    v132 = v286;
    MEMORY[0x1C3BBFF64](v182, -1, -1);
  }

  v183 = v278;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchConversationContext.getter();
  v184 = v96 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v132 + 40))(v184, v183, v131);
  swift_endAccess();
  v185 = v279;
  (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v279, v184, v131);
  v186 = v280;
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Search_SearchConversationContext and conformance Apple_Parsec_Search_SearchConversationContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6CB98], MEMORY[0x1E0D6CB88]);
  v187 = Message.jsonString(options:)();
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v276 + 8))(v186, v277);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v185, v131);
    v189 = Logger.logObject.getter();
    v190 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v189, v190))
    {
      v191 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v191 = 0;
      _os_log_impl(&dword_1C2356000, v189, v190, "Could not convert SearchConversationContext to JSON after Pegasus response", v191, 2u);
      MEMORY[0x1C3BBFF64](v191, -1, -1);
    }

  }
  else
  {
    v192 = v187;
    v193 = v188;
    (*(void (**)(char *, uint64_t))(v276 + 8))(v186, v277);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v185, v131);
    swift_bridgeObjectRetain();
    v194 = Logger.logObject.getter();
    v195 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v194, (os_log_type_t)v195))
    {
      v196 = (uint8_t *)swift_slowAlloc();
      v197 = swift_slowAlloc();
      aBlock[0] = v197;
      *(_DWORD *)v196 = 136315138;
      swift_bridgeObjectRetain();
      v311 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v192, v193, aBlock);
      v117 = v305;
      v115 = v303;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v194, (os_log_type_t)v195, "SearchConversationContext JSON after Pegasus response: %s", v196, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v197, -1, -1);
      MEMORY[0x1C3BBFF64](v196, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  v198 = v282;
  v109 = v310;
  v199 = v299;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
  v200 = (void (*)(char *, _QWORD, _QWORD *))*((_QWORD *)v301 + 13);
  v200(v198, *MEMORY[0x1E0D6E248], v117);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E250], MEMORY[0x1E0D6E260]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v201 = aBlock[0];
  v202 = v311;
  v203 = (void (*)(char *, _QWORD *))v287;
  ((void (*)(char *, _QWORD))v287)(v198, v117);
  v203(v199, v117);
  if (v201 == v202)
  {
    v204 = v270;
    v205 = v269;
    ((void (*)(char *, char *, uint64_t))v285)(v270, v115, v269);
    v206 = Logger.logObject.getter();
    v207 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v206, v207))
    {
      *(_DWORD *)swift_slowAlloc() = 134217984;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
      __asm { BR              X10 }
    }
    v219 = *(void (**)(char *, uint64_t))(v251 + 8);
    v219(v204, v205);

    v223 = v268;
    ((void (*)(char *, char *, uint64_t))v285)(v268, v115, v205);
    v224 = Logger.logObject.getter();
    v225 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v224, v225))
    {
      v227 = (uint8_t *)swift_slowAlloc();
      v309 = (char *)swift_slowAlloc();
      aBlock[0] = (uint64_t)v309;
      *(_DWORD *)v227 = 136315138;
      v308 = v227 + 4;
      v228 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
      v230 = v229;
      v231 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v228, v230);
      v311 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v231._countAndFlagsBits, (unint64_t)v231._object, aBlock);
      v232 = v288;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v109 = v310;
      v115 = v303;
      swift_bridgeObjectRelease();
      v219(v268, v205);
      _os_log_impl(&dword_1C2356000, v224, v225, "Pegasus conversation context bytes: %s", v227, 0xCu);
      v233 = v309;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v233, -1, -1);
      MEMORY[0x1C3BBFF64](v227, -1, -1);

    }
    else
    {
      v219(v223, v205);

      v232 = v288;
    }
    v234 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
    v235 = (uint64_t *)(v109 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext);
    v236 = *(_QWORD *)(v109 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext);
    v237 = *(_QWORD *)(v109
                     + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext
                     + 8);
    *v235 = v234;
    v235[1] = v238;
    outlined consume of Data?(v236, v237);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v239 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v239, (uint64_t)static Signposter.pommes);
    OSSignposter.end(token:message:)(v232, 0x73736563637573, 0xE700000000000000);
    v240 = v271;
    swift_beginAccess();
    v241 = (uint64_t)v254;
    (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v254, v240, v273);
    ((void (*)(uint64_t, char *, uint64_t))v285)(v241 + *(int *)(v253 + 20), v115, v205);
    v242 = v290;
    outlined init with copy of PommesSearchRequest(v241, (uint64_t)v290, type metadata accessor for PegasusSearchResponse);
    swift_storeEnumTagMultiPayload();
    v292(v242);
    outlined destroy of MediaUserStateCenter?((uint64_t)v242, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    outlined destroy of PommesSearchRequest(v241, type metadata accessor for PegasusSearchResponse);
    v219(v115, v205);
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
    v200(v198, *MEMORY[0x1E0D6E240], v117);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v209 = aBlock[0];
    v210 = v311;
    v203(v198, v117);
    v203(v199, v117);
    if (v209 == v210)
    {
      v211 = Logger.logObject.getter();
      v212 = static os_log_type_t.debug.getter();
      v213 = os_log_type_enabled(v211, v212);
      v214 = v288;
      if (v213)
      {
        v215 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v215 = 0;
        _os_log_impl(&dword_1C2356000, v211, v212, "Pegasus returned no results", v215, 2u);
        MEMORY[0x1C3BBFF64](v215, -1, -1);
      }

      v216 = v269;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v217 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v217, (uint64_t)static Signposter.pommes);
      OSSignposter.end(token:message:)(v214, 0x746C757365526F6ELL, 0xE900000000000073);
      v218 = v290;
      *v290 = 10;
      swift_storeEnumTagMultiPayload();
      v292(v218);
      outlined destroy of MediaUserStateCenter?((uint64_t)v218, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
      (*(void (**)(char *, uint64_t))(v251 + 8))(v115, v216);
    }
    else
    {
      v220 = v288;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v221 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v221, (uint64_t)static Signposter.pommes);
      OSSignposter.end(token:message:)(v220, 0x4573757361676570, 0xEC000000726F7272);
      v222 = v290;
      *v290 = 0;
      swift_storeEnumTagMultiPayload();
      v292(v222);
      outlined destroy of MediaUserStateCenter?((uint64_t)v222, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
      (*(void (**)(char *, uint64_t))(v251 + 8))(v115, v269);
    }
  }
LABEL_63:
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:);
  aBlock[5] = v109;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_34;
  v243 = _Block_copy(aBlock);
  swift_retain();
  v244 = v293;
  static DispatchQoS.unspecified.getter();
  v312 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v245 = v296;
  v246 = v298;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C3BBF154](0, v244, v245, v243);
  _Block_release(v243);
  (*(void (**)(char *, uint64_t))(v297 + 8))(v245, v246);
  (*(void (**)(char *, uint64_t))(v294 + 8))(v244, v295);
  return swift_release();
}

uint64_t closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t closure #8 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)(&v4, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t closure #9 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a2, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  v12 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 592))(v9, v8);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  *a3 = v12;
  return result;
}

uint64_t closure #11 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  outlined init with copy of AppDataProviding(a1 + 24, (uint64_t)v8);
  v5 = v9;
  v6 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  *a3 = RRReferenceResolverProtocol.getEntitiesFromMarrsSpans(relevantTo:)(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  (*(void (**)(char *))(*(_QWORD *)v8 + 368))(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  PegasusProxy.appendMusicRankingInfluence(to:)(a2);
  return swift_endAccess();
}

uint64_t PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)(uint64_t VG_AHs5NeverOTg5, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v13[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    MEMORY[0x1E0C80A78](v11);
    *(_QWORD *)&v13[-16] = v10;
    VG_AHs5NeverOTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:), (uint64_t)&v13[-32], VG_AHs5NeverOTg5);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }
  return VG_AHs5NeverOTg5;
}

uint64_t closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, a1, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RewrittenUtterance>);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C24FA1B0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, a2, v7);
  return Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.setter();
}

uint64_t static PegasusProxy.pegausUserIdClassification(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  switch(a1)
  {
    case 0:
      v3 = (unsigned int *)MEMORY[0x1E0D6EF40];
      break;
    case 1:
      v3 = (unsigned int *)MEMORY[0x1E0D6EF58];
      break;
    case 2:
      v3 = (unsigned int *)MEMORY[0x1E0D6EF60];
      break;
    case 3:
      v3 = (unsigned int *)MEMORY[0x1E0D6EF48];
      break;
    case 4:
      v3 = (unsigned int *)MEMORY[0x1E0D6EF68];
      break;
    default:
      v3 = (unsigned int *)MEMORY[0x1E0D6EF50];
      break;
  }
  v4 = *v3;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext.UserIdentityClassification();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

void PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[2];
  id v29;
  uint64_t v30;
  unint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ASRContext();
  MEMORY[0x1E0C80A78](v6);
  v7 = *(void **)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 72));
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v8, sel_rawRecognition);
    if (v9
      && (v10 = v9,
          v11 = objc_msgSend(v9, sel_nBestTokenListsLossless),
          v10,
          v11))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AFSpeechToken]);
      v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v12 = MEMORY[0x1E0DEE9D8];
    }
    v13 = objc_msgSend(v8, sel_recognition);
    v29 = v8;
    v30 = v6;
    if (v13
      && (v14 = v13,
          v15 = objc_msgSend(v13, sel_nBestTokenListsLossless),
          v14,
          v15))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AFSpeechToken]);
      v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v16 = MEMORY[0x1E0DEE9D8];
    }
    v17 = *(_QWORD *)(v12 + 16);
    v18 = *(_QWORD *)(v16 + 16);
    if (v17 != v18)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v28[1] = a1;
        v22 = swift_slowAlloc();
        *(_DWORD *)v22 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2048;
        v31 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v20, v21, "Found ASR interpretation with mismatched token counts: %ld pre-ITN and %ld post-ITN. POMMES will send corresponding mismatched counts in Pegasus request.", (uint8_t *)v22, 0x16u);
        MEMORY[0x1C3BBFF64](v22, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    if (v18 <= v17)
      v23 = v17;
    else
      v23 = v18;
    swift_retain();
    v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ASRInterpretationVs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescx19VtFAG0l1_m1_a1_N18_J8VSiXEfU_SaySaySo13AFSpeechTokenCGG0hM6Search0dO0CAPTf1cn_nTf4nggg_n(0, v23, v12, v3, v16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v25 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescy21VtFAG0l1_m1_a1_n1_dC5K9VAMXEfU0_SayAF0f1_g1_h1_I18_ASRInterpretationVGTf1cn_nTf4ng_n(v25, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v26 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
    MEMORY[0x1E0C80A78](v26);
    v27 = v29;
    v28[-2] = v29;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ASRContext and conformance Apple_Parsec_Siri_V2alpha_ASRContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E280], MEMORY[0x1E0D6E278]);
    static Message.with(_:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.asrContext.setter();

  }
}

void closure #1 in closure #1 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;

  if (*(_QWORD *)(a3 + 16) > (int64_t)a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
      return;
    }
    v7 = swift_bridgeObjectRetain();
    specialized PegasusProxy.createASRInterpretationTokens(with:)(v7);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_ASRInterpretation.preItnToken.setter();
  }
  if (*(_QWORD *)(a5 + 16) > a2)
  {
    v8 = swift_bridgeObjectRetain();
    specialized PegasusProxy.createASRInterpretationTokens(with:)(v8);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_ASRInterpretation.postItnToken.setter();
  }
}

id closure #3 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(int a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = objc_msgSend(a2, sel_modelVersion);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    MEMORY[0x1C3BBB494](v5, v7);
  }
  result = objc_msgSend(a2, sel_acousticModelVersion);
  if (result)
  {
    v9 = result;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    return (id)MEMORY[0x1C3BBB4A0](v10, v12);
  }
  return result;
}

void closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)(int a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  void *v18;

  v3 = objc_msgSend(a2, sel_text);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    MEMORY[0x1C3BBC028](v5, v7);
  }
  v8 = objc_msgSend(a2, sel_phoneSequence);
  if (v8)
  {
    v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_InterpretationToken.phoneSequence.setter();
  }
  v10 = objc_msgSend(a2, sel_ipaPhoneSequence);
  if (v10)
  {
    v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_InterpretationToken.ipaPhoneSequence.setter();
  }
  objc_msgSend(a2, sel_removeSpaceBefore);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceRemovedBefore.setter();
  objc_msgSend(a2, sel_removeSpaceAfter);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceRemovedAfter.setter();
  objc_msgSend(a2, sel_removeSpaceAfter);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceAddedAfter.setter();
  objc_msgSend(a2, sel_startTime);
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  Apple_Parsec_Siri_V2alpha_InterpretationToken.startTime.setter();
  objc_msgSend(a2, sel_endTime);
  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  Apple_Parsec_Siri_V2alpha_InterpretationToken.endTime.setter();
  objc_msgSend(a2, sel_silenceStartTime);
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    return;
  }
  Apple_Parsec_Siri_V2alpha_InterpretationToken.silenceStartTime.setter();
  objc_msgSend(a2, sel_confidenceScore);
  Apple_Parsec_Siri_V2alpha_InterpretationToken.confidenceScore.setter();
  v15 = objc_msgSend(a2, sel_acousticCost);
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, sel_doubleValue);
    Apple_Parsec_Siri_V2alpha_InterpretationToken.acousticCost.setter();

  }
  v17 = objc_msgSend(a2, sel_graphCost);
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v17, sel_doubleValue);
    Apple_Parsec_Siri_V2alpha_InterpretationToken.graphCost.setter();

  }
}

uint64_t PegasusProxy.pegasusRewriteType(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;

  v4 = type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x1E0D9F558])
  {
    v9 = (unsigned int *)MEMORY[0x1E0D6E550];
LABEL_7:
    v11 = *v9;
    v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104);
    v14 = a2;
    v15 = v11;
    return v13(v14, v15, v12);
  }
  v10 = v8;
  if (v8 == *MEMORY[0x1E0D9F540])
  {
    v9 = (unsigned int *)MEMORY[0x1E0D6E538];
    goto LABEL_7;
  }
  if (v8 == *MEMORY[0x1E0D9F548])
  {
    v9 = (unsigned int *)MEMORY[0x1E0D6E540];
    goto LABEL_7;
  }
  v17 = *MEMORY[0x1E0D9F550];
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104);
  if (v10 != v17)
  {
    v13(a2, *MEMORY[0x1E0D6E550], v12);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v15 = *MEMORY[0x1E0D6E548];
  v14 = a2;
  return v13(v14, v15, v12);
}

uint64_t PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void (*v9)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(_QWORD *@<X8>), uint64_t, uint64_t);
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void (*v15)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v3 = v2;
  v22 = a2;
  v23 = a1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    swift_once();
  v8 = static PerformanceUtil.shared;
  Date.init()();
  v9 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(_QWORD *@<X8>), uint64_t, uint64_t))(*(_QWORD *)v8 + 200);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OnScreenContextType : [String]]);
  LOBYTE(v18) = 2;
  v9(&v24, 0xD000000000000021, 0x80000001C2508E80, 0, v7, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 1006, "addOnScreenContext(to:onDeviceLabels:)", 38, v18, partial apply for closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:), v3, v10);
  v11 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v12 = v11(v7, v4);
  v13 = v24;
  v14 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v12);
  v18 = v13;
  v19 = v22;
  v20 = v23;
  v21 = v3;
  Date.init()();
  v15 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v14 + 200);
  v20 = &v17;
  v21 = MEMORY[0x1E0DEE9C0] + 8;
  LOBYTE(v18) = 2;
  v15(0xD00000000000005BLL, 0x80000001C2508EB0, 0, v7, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 1010, "addOnScreenContext(to:onDeviceLabels:)", 38, v18, partial apply for closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:));
  v11(v7, v4);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  outlined init with copy of AppDataProviding(a1 + 24, (uint64_t)v7);
  v3 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  RRReferenceResolverProtocol.extractOnScreenContext()(v3, v4);
  *a2 = v5;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;

  v74 = a3;
  v75 = a4;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v71 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v70 = (char *)&v61 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContextType.GeneratedClientEntity?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OnScreenContextType.GeneratedClientEntity();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v77 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = 0;
  v18 = 0;
  v66 = xmmword_1C24FA1B0;
  v62 = a1;
  v68 = v15;
  v69 = v12;
  v67 = v14;
  v65 = a2;
  while (1)
  {
    if (v18 >= 2)
      goto LABEL_28;
    LODWORD(v20) = *((unsigned __int8 *)&outlined read-only object #0 of closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)
                   + v18
                   + 32);
    v21 = *(_QWORD *)(a1 + 16);
    v63 = v17;
    if (v21)
    {
      v22 = specialized __RawDictionaryStorage.find<A>(_:)((char)v20);
      v23 = MEMORY[0x1E0DEE9D8];
      if ((v24 & 1) != 0)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v22);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v23 = MEMORY[0x1E0DEE9D8];
    }
    v64 = v23;
    v25 = *(_QWORD *)(v23 + 16);
    if (v25)
      break;
LABEL_2:
    result = swift_bridgeObjectRelease();
    v17 = 1;
    v18 = 1u;
    a1 = v62;
    if ((v63 & 1) != 0)
      return result;
  }
  v26 = (uint64_t *)(v64 + 40);
  v78 = (int)v20;
  while (1)
  {
    v28 = *(v26 - 1);
    v27 = *v26;
    swift_bridgeObjectRetain();
    OnScreenContextType.generateClientEntity(context:)(v28, v27, (char)v20, (uint64_t)v12);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
      break;
    outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for OnScreenContextType.GeneratedClientEntity?);
LABEL_11:
    v26 += 2;
    if (!--v25)
      goto LABEL_2;
  }
  v76 = v25;
  v29 = v77;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v12, v77, (uint64_t (*)(_QWORD))type metadata accessor for OnScreenContextType.GeneratedClientEntity);
  v30 = (uint64_t *)(v29 + *(int *)(v13 + 24));
  v31 = (char)v20;
  v32 = *v30;
  v33 = v30[1];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v79 = *(_QWORD **)(a2 + 8);
  v35 = v79;
  v36 = a2;
  *(_QWORD *)(a2 + 8) = 0x8000000000000000;
  v38 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
  v39 = v35[2];
  v40 = (v37 & 1) == 0;
  v41 = v39 + v40;
  if (!__OFADD__(v39, v40))
  {
    v42 = v37;
    if (v35[3] < v41)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(v78);
      if ((v42 & 1) != (v44 & 1))
        goto LABEL_29;
      v38 = v43;
      v45 = v79;
      if ((v42 & 1) == 0)
        goto LABEL_22;
LABEL_20:
      v46 = (_QWORD *)(v45[7] + 16 * v38);
      swift_bridgeObjectRelease();
      *v46 = v32;
      v46[1] = v33;
LABEL_24:
      *(_QWORD *)(v36 + 8) = v45;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntity>);
      v51 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
      v52 = *(_QWORD *)(v51 - 8);
      v53 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = v66;
      v55 = v77;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v52 + 16))(v54 + v53, v77, v51);
      v20 = v71;
      v56 = v72;
      v58 = v73;
      v57 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v74, v73);
      v59 = v70;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v75 + 88))(v54, v20);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v58);
      outlined destroy of PommesSearchRequest(v55, (uint64_t (*)(_QWORD))type metadata accessor for OnScreenContextType.GeneratedClientEntity);
      v60 = v59;
      a2 = v65;
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 40))(v57, v60, v58);
      v13 = v68;
      v12 = v69;
      v14 = v67;
      LOBYTE(v20) = v78;
      v25 = v76;
      goto LABEL_11;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v45 = v79;
      if ((v37 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v45 = v79;
      if ((v42 & 1) != 0)
        goto LABEL_20;
    }
LABEL_22:
    v45[(v38 >> 6) + 8] |= 1 << v38;
    *(_BYTE *)(v45[6] + v38) = v78;
    v47 = (_QWORD *)(v45[7] + 16 * v38);
    *v47 = v32;
    v47[1] = v33;
    v48 = v45[2];
    v49 = __OFADD__(v48, 1);
    v50 = v48 + 1;
    if (v49)
      goto LABEL_27;
    v45[2] = v50;
    goto LABEL_24;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t RRCandidate.equivalentClientEntity()()
{
  type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientEntity and conformance Apple_Parsec_Siri_Context_ClientEntity, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E758], MEMORY[0x1E0D6E708]);
  return static Message.with(_:)();
}

uint64_t PegasusProxy.addResolvedEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v8 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v31 = a3;
    v15 = v14;
    v16 = swift_slowAlloc();
    v30 = v16;
    *(_DWORD *)v15 = 134218242;
    v33 = *(_QWORD *)(a1 + 16);
    v34 = v16;
    v32 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    v29[1] = v15 + 14;
    swift_bridgeObjectRetain();
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
    v18 = MEMORY[0x1C3BBEE9C](a1, v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v34);
    a2 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v12, v13, "Adding %ld resolvedSpanEntities to request: %s", (uint8_t *)v15, 0x16u);
    v21 = v30;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v21, -1, -1);
    MEMORY[0x1C3BBFF64](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Date.init()();
  v22 = &v10[v8[5]];
  *(_QWORD *)v22 = "SiriInformationSearch/PegasusProxy.swift";
  *((_QWORD *)v22 + 1) = 40;
  v22[16] = 2;
  *(_QWORD *)&v10[v8[6]] = 1073;
  v23 = &v10[v8[7]];
  *(_QWORD *)v23 = "addResolvedEntities(_:to:)";
  *((_QWORD *)v23 + 1) = 26;
  v23[16] = 2;
  v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000029);
  v25 = (uint64_t *)&v10[v8[8]];
  *v25 = v24;
  v25[1] = v26;
  MEMORY[0x1E0C80A78](v24);
  v29[-2] = v4;
  v29[-1] = a2;
  v27 = specialized Sequence.compactMap<A>(_:)(a1, (void (*)(_QWORD, _QWORD))partial apply for closure #1 in PegasusProxy.addResolvedEntities(_:to:), (uint64_t)&v29[-4]);
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v10, 0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v27, a2);
  swift_bridgeObjectRelease();
  return outlined destroy of PommesSearchRequest((uint64_t)v10, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t closure #1 in PegasusProxy.addResolvedEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a3;
  v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  RREntity.usoEntity.getter();
  static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  swift_release();
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v19[1] = a1;
  v20 = a2;
  v14 = v22;
  v21 = a4;
  swift_release();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F270], MEMORY[0x1E0D9F238]);
  Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)((_QWORD *)(v20 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore), v14, (uint64_t)v9);
  Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
  v17 = v23;
  v16 = v24;
  v18 = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v21, v9, v24);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
}

uint64_t Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  unsigned int *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[8];

  v48 = a1;
  v49 = a2;
  v5 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntityType();
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  MEMORY[0x1E0C80A78](v5);
  v55 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntitySource();
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  MEMORY[0x1E0C80A78](v7);
  v52 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  MEMORY[0x1E0C80A78](v9);
  v58 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v56 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v59 = (char *)&v47 - v14;
  v15 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v57 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v47 - v19;
  v21 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_Context_ClientEntity.init()();
  Siri_Nlu_External_Span.score.getter();
  Apple_Parsec_Siri_Context_ClientEntity.score.setter();
  if ((Siri_Nlu_External_Span.hasLabel.getter() & 1) != 0)
  {
    Siri_Nlu_External_Span.label.getter();
    Apple_Parsec_Siri_Context_ClientEntity.ontologyLabel.setter();
  }
  Date.init()();
  v24 = &v23[v21[5]];
  *(_QWORD *)v24 = "SiriInformationSearch/PegasusProxy.swift";
  *((_QWORD *)v24 + 1) = 40;
  v24[16] = 2;
  *(_QWORD *)&v23[v21[6]] = 1242;
  v25 = &v23[v21[7]];
  *(_QWORD *)v25 = "equivalentClientEntity(contactStore:request:)";
  *((_QWORD *)v25 + 1) = 45;
  v25[16] = 2;
  v26 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000012);
  v27 = (uint64_t *)&v23[v21[8]];
  *v27 = v26;
  v27[1] = v28;
  Siri_Nlu_External_Span.usoGraph.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F270], MEMORY[0x1E0D9F238]);
  v29 = v62;
  Message.serializedData(partial:)();
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    outlined destroy of PommesSearchRequest((uint64_t)v23, type metadata accessor for PerformanceUtil.Ticket);
    v30 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(a3, v30);
  }
  v62 = v3;
  v32 = *(char **)(v16 + 8);
  ((void (*)(char *, uint64_t))v32)(v20, v15);
  Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
  v47 = v15;
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v23, 0);
  v33 = Siri_Nlu_External_Span.matcherNames.getter();
  v34 = v60;
  v35 = v61;
  v36 = v59;
  if (*(_QWORD *)(v33 + 16))
  {
    v37 = (uint64_t)v58;
    (*(void (**)(char *, unint64_t, uint64_t))(v60 + 16))(v58, v33 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80)), v61);
    v38 = 0;
  }
  else
  {
    v38 = 1;
    v37 = (uint64_t)v58;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v37, v38, 1, v35);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v37, 1, v35) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v36, v37, v35);
    v39 = v56;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v56, v36, v35);
    v40 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v39, v35);
    if (v40 != *MEMORY[0x1E0D9F020])
    {
      if (v40 == *MEMORY[0x1E0D9F000])
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v52, *MEMORY[0x1E0D6E6B8], v51);
        Apple_Parsec_Siri_Context_ClientEntity.source.setter();
        (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v55, *MEMORY[0x1E0D6E698], v54);
        Apple_Parsec_Siri_Context_ClientEntity.type.setter();
        Siri_Nlu_External_Span.contactFlags(contactStore:request:)(v48, v49);
        v58 = v32;
        Apple_Parsec_Siri_Context_ClientEntity.hasAddress_p.setter();
        v32 = v58;
        Apple_Parsec_Siri_Context_ClientEntity.hasPhoneNumber_p.setter();
        goto LABEL_15;
      }
      if (v40 == *MEMORY[0x1E0D9F018] || v40 == *MEMORY[0x1E0D9F008])
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v52, *MEMORY[0x1E0D6E6C0], v51);
        Apple_Parsec_Siri_Context_ClientEntity.source.setter();
        v41 = (unsigned int *)MEMORY[0x1E0D6E6A8];
        goto LABEL_14;
      }
      if (v40 != *MEMORY[0x1E0D9F010])
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v52, *MEMORY[0x1E0D6E6C8], v51);
        Apple_Parsec_Siri_Context_ClientEntity.source.setter();
        (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v55, *MEMORY[0x1E0D6E6A0], v54);
        Apple_Parsec_Siri_Context_ClientEntity.type.setter();
        v46 = *(void (**)(char *, uint64_t))(v34 + 8);
        v46(v36, v35);
        v46(v56, v35);
        goto LABEL_16;
      }
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v52, *MEMORY[0x1E0D6E6C8], v51);
    Apple_Parsec_Siri_Context_ClientEntity.source.setter();
    v41 = (unsigned int *)MEMORY[0x1E0D6E6A0];
LABEL_14:
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v55, *v41, v54);
    Apple_Parsec_Siri_Context_ClientEntity.type.setter();
LABEL_15:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
    goto LABEL_16;
  }
  outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
LABEL_16:
  v42 = v57;
  v43 = v62;
  Siri_Nlu_External_Span.usoGraph.getter();
  v44 = Siri_Nlu_External_UsoGraph.alignments.getter();
  v45 = ((uint64_t (*)(char *, uint64_t))v32)(v42, v47);
  MEMORY[0x1E0C80A78](v45);
  *(&v47 - 2) = v43;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D32_Nlu_External_UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityI0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:), (uint64_t)(&v47 - 4), v44, (uint64_t)v63);
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_Context_PromptContext.domainHints.setter();
  return outlined destroy of PommesSearchRequest((uint64_t)v23, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t PegasusProxy.shouldAddUserVocabSpan(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t *v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  _QWORD v53[2];
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;

  v2 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v56 = *(_QWORD *)(v2 - 8);
  v57 = v2;
  MEMORY[0x1E0C80A78](v2);
  v55 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1E0C80A78](v4);
  v54 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)v53 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v53 - v20;
  v58 = a1;
  v22 = Siri_Nlu_External_Span.matcherNames.getter();
  if (*(_QWORD *)(v22 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v21, v22 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v23(v21, 0, 1, v6);
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v23(v21, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v19, *MEMORY[0x1E0D9F000], v6);
  v23(v19, 0, 1, v6);
  v24 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v24, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v25((uint64_t)v12, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    if (v25(v24, 1, v6) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      goto LABEL_12;
    }
LABEL_9:
    v26 = &demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?);
    v27 = v12;
LABEL_10:
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, v26);
    return 1;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  if (v25(v24, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v24, v6);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F028], MEMORY[0x1E0D9F040]);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v9, v6);
  outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v29(v16, v6);
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  if ((v28 & 1) == 0)
    return 1;
LABEL_12:
  if ((Siri_Nlu_External_Span.hasLabel.getter() & 1) == 0)
    return 1;
  if (one-time initialization token for allowedClientEntityLabels != -1)
    swift_once();
  v30 = static PegasusProxy.allowedClientEntityLabels;
  v31 = Siri_Nlu_External_Span.label.getter();
  LOBYTE(v30) = specialized Set.contains(_:)(v31, v32, v30);
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    if (Siri_Nlu_External_Span.label.getter() == 0x656D614E707061 && v33 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
        return 1;
    }
    v36 = v55;
    Siri_Nlu_External_Span.usoGraph.getter();
    v37 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v57);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
    v40 = *(_QWORD *)(v39 - 8);
    if (v38)
    {
      v41 = v54;
      (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v54, v37 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80)), v39);
      v42 = 0;
    }
    else
    {
      v42 = 1;
      v41 = v54;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, v42, 1, v39);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v41, 1, v39) == 1)
    {
      v26 = &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?;
      v27 = v41;
    }
    else
    {
      v44 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
      v45 = v41;
      v47 = v46;
      v48 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v45, v39);
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v53[1] + 184) + 248))(v59, v48);
      v49 = v60;
      if (v60)
      {
        v50 = v61;
        __swift_project_boxed_opaque_existential_1(v59, v60);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 8))(v44, v47, v49, v50);
        v52 = v51;
        swift_bridgeObjectRelease();
        v34 = (v52 & 0x100) == 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        swift_bridgeObjectRelease();
        return v34;
      }
      swift_bridgeObjectRelease();
      v26 = (uint64_t *)&demangling cache variable for type metadata for PommesAppChecking?;
      v27 = (char *)v59;
    }
    goto LABEL_10;
  }
  return 0;
}

void PegasusProxy.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PegasusProxy.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PegasusProxy.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  v2 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data?(*(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext), *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext + 8));
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType, &demangling cache variable for type metadata for InteractionType?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  return __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider);
}

uint64_t PegasusProxy.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  v2 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data?(*(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext), *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext + 8));
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType, &demangling cache variable for type metadata for InteractionType?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider);
  return v0;
}

uint64_t PegasusProxy.__deallocating_deinit()
{
  PegasusProxy.deinit();
  return swift_deallocClassInstance();
}

uint64_t Siri_Nlu_External_Span.contactFlags(contactStore:request:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char v41;
  char v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  char v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;

  v3 = v2;
  v81 = a2;
  v85 = a1;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_POMMESRequestContext();
  v82 = *(_QWORD *)(v4 - 8);
  v83 = v4;
  MEMORY[0x1E0C80A78](v4);
  v80 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v84);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Google_Protobuf_StringValue();
  v90 = *(_QWORD *)(v8 - 8);
  v91 = v8;
  MEMORY[0x1E0C80A78](v8);
  v88 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v96 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v95 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v77 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v97 = (char *)&v77 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v77 - v18;
  v20 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1E0C80A78](v24);
  v86 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((AFIsATV() & 1) != 0)
  {
LABEL_25:
    v51 = 0;
    v52 = 0;
    return v52 | v51;
  }
  v79 = v7;
  v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v89 = v26;
  Siri_Nlu_External_Span.usoGraph.getter();
  v27 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v28 = *(void (**)(char *, uint64_t))(v21 + 8);
  v29 = v27;
  v28(v23, v20);
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
  {
    v46 = 1;
LABEL_20:
    v47 = v96;
    v48 = (uint64_t)v86;
    goto LABEL_23;
  }
  v78 = v2;
  v31 = v29 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
  v87 = *MEMORY[0x1E0DA2C90];
  v92 = *(_QWORD *)(v96 + 72);
  v32 = *(void (**)(char *, unint64_t, uint64_t))(v96 + 16);
  v77 = v29;
  swift_bridgeObjectRetain();
  v93 = v15;
  while (1)
  {
    v32(v19, v31, v10);
    v33 = Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter();
    v34 = v97;
    v32(v97, (unint64_t)v19, v10);
    if ((v33 & 1) == 0)
    {
      v40 = *(void (**)(char *, uint64_t))(v96 + 8);
      v40(v34, v10);
      v32(v15, (unint64_t)v19, v10);
      v41 = 0;
      goto LABEL_13;
    }
    v35 = v88;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v36 = Google_Protobuf_StringValue.value.getter();
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v90 + 8))(v35, v91);
    if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
    {
      swift_bridgeObjectRelease_n();
      v40 = *(void (**)(char *, uint64_t))(v96 + 8);
      v40(v97, v10);
      v32(v15, (unint64_t)v19, v10);
    }
    else
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v40 = *(void (**)(char *, uint64_t))(v96 + 8);
      v40(v97, v10);
      v32(v15, (unint64_t)v19, v10);
      v41 = 0;
      if ((v42 & 1) == 0)
        goto LABEL_13;
    }
    v41 = Siri_Nlu_External_UsoEntityIdentifier.hasBackingAppBundleID.getter();
LABEL_13:
    v40(v15, v10);
    v43 = v95;
    v32(v95, (unint64_t)v19, v10);
    if ((v41 & 1) == 0)
    {
      v40(v43, v10);
      goto LABEL_5;
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter() == v94 && v44 == v89)
      break;
    v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v40(v43, v10);
    if ((v45 & 1) != 0)
      goto LABEL_22;
LABEL_5:
    v40(v19, v10);
    v15 = v93;
    v31 += v92;
    if (!--v30)
    {
      swift_bridgeObjectRelease();
      v46 = 1;
      v3 = v78;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  v40(v43, v10);
LABEL_22:
  swift_bridgeObjectRelease();
  v47 = v96;
  v48 = (uint64_t)v86;
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v86, v19, v10);
  v46 = 0;
  v3 = v78;
LABEL_23:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v48, v46, 1, v10);
  swift_bridgeObjectRelease();
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v10);
  v50 = (uint64_t)v79;
  if (v49 == 1)
  {
    outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v54 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  v56 = v55;
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v10);
  swift_bridgeObjectRelease();
  Date.init()();
  v57 = (int *)v84;
  v58 = v50 + *(int *)(v84 + 20);
  *(_QWORD *)v58 = "SiriInformationSearch/PegasusProxy.swift";
  *(_QWORD *)(v58 + 8) = 40;
  *(_BYTE *)(v58 + 16) = 2;
  *(_QWORD *)(v50 + v57[6]) = 1293;
  v59 = v50 + v57[7];
  *(_QWORD *)v59 = "contactFlags(contactStore:request:)";
  *(_QWORD *)(v59 + 8) = 35;
  *(_BYTE *)(v59 + 16) = 2;
  v60 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000023);
  v61 = (uint64_t *)(v50 + v57[8]);
  *v61 = v60;
  v61[1] = v62;
  if (!AFIsHorseman())
  {
    v68 = v85[3];
    v69 = v85[4];
    __swift_project_boxed_opaque_existential_1(v85, v68);
    v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 8))(v54, v56, v68, v69);
    if (v3)
    {
      outlined destroy of PommesSearchRequest(v50, type metadata accessor for PerformanceUtil.Ticket);
      return swift_bridgeObjectRelease();
    }
    v76 = v70;
    goto LABEL_42;
  }
  v98 = MEMORY[0x1E0DEE9D8];
  v63 = v80;
  v64 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.getter();
  v65 = MEMORY[0x1C3BBC100](v64);
  v67 = v66;
  (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v83);
  if (v65 == 0x656E6F6870 && v67 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0)
  {
LABEL_34:
    v72 = (id)*MEMORY[0x1E0C967C0];
    MEMORY[0x1C3BBEE78]();
    if (*(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v73 = v85[3];
  v74 = v85[4];
  __swift_project_boxed_opaque_existential_1(v85, v73);
  v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 16))(v54, v56, v98, v73, v74);
  if (!v3)
  {
    v76 = v75;
    swift_bridgeObjectRelease();
LABEL_42:
    swift_bridgeObjectRelease();
    v52 = v76 & 0x100;
    v51 = v76 & 1;
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v50, 0);
    outlined destroy of PommesSearchRequest(v50, type metadata accessor for PerformanceUtil.Ticket);
    return v52 | v51;
  }
  outlined destroy of PommesSearchRequest(v50, type metadata accessor for PerformanceUtil.Ticket);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UtteranceSpan?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v19 - v7;
  Apple_Parsec_Siri_Context_ClientEntityAlignment.init()();
  Siri_Nlu_External_UtteranceAlignment.asrHypothesisIndex.getter();
  Apple_Parsec_Siri_Context_ClientEntityAlignment.asrHypothesisIndex.setter();
  Siri_Nlu_External_Span.input.getter();
  Apple_Parsec_Siri_Context_ClientDisplayHints.displayHintsDomain.setter();
  v9 = Siri_Nlu_External_UtteranceAlignment.spans.getter();
  v10 = *(_QWORD *)(v9 + 16);
  v11 = type metadata accessor for Siri_Nlu_External_UtteranceSpan();
  v12 = *(_QWORD *)(v11 - 8);
  v19[1] = a2;
  if (v10)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v8, v9 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v11);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v14(v8, v13, 1, v11);
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UtteranceSpan();
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v15(v8, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_UtteranceSpan?);
  }
  else
  {
    Siri_Nlu_External_UtteranceSpan.startIndex.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v11);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.startTokenIndex.setter();
  v16 = Siri_Nlu_External_UtteranceAlignment.spans.getter();
  if (*(_QWORD *)(v16 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v6, v16 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v11);
    v17 = 0;
  }
  else
  {
    v17 = 1;
  }
  v14(v6, v17, 1, v11);
  swift_bridgeObjectRelease();
  if (v15(v6, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Siri_Nlu_External_UtteranceSpan?);
  }
  else
  {
    Siri_Nlu_External_UtteranceSpan.endIndex.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v11);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.endTokenIndex.setter();
  Siri_Nlu_External_Span.score.getter();
  return Apple_Parsec_Siri_Context_ClientEntityAlignment.score.setter();
}

uint64_t closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[8];

  v31 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntityType();
  v27 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v30 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntitySource();
  v5 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  v29 = v5;
  MEMORY[0x1E0C80A78](v4);
  v32 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RREntity();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  v14 = *(void (**)(char *, uint64_t))(v11 + 8);
  v14(v13, v10);
  v15 = static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  swift_release();
  RRCandidate.score.getter();
  Apple_Parsec_Siri_Context_ClientEntity.score.setter();
  v16 = v35;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  if (!v16)
  {
    v35 = v15;
    v25 = (uint64_t (*)(char *, uint64_t))v14;
    v26 = v10;
    v17 = v32;
    v24 = a2;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F270], MEMORY[0x1E0D9F238]);
    v18 = v34;
    Message.serializedData(partial:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v18);
    Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v17, *MEMORY[0x1E0D6E6C8], v28);
    Apple_Parsec_Siri_Context_ClientEntity.source.setter();
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v30, *MEMORY[0x1E0D6E6A8], v31);
    Apple_Parsec_Siri_Context_ClientEntity.type.setter();
    v20 = v24;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    v21 = v25(v13, v26);
    v22 = MEMORY[0x1C3BBD2F4](v21);
    v23 = swift_release();
    MEMORY[0x1E0C80A78](v23);
    *(&v24 - 2) = v20;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology18UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityG0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in closure #1 in RRCandidate.equivalentClientEntity(), (uint64_t)(&v24 - 4), v22, (uint64_t)v36);
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_Context_PromptContext.domainHints.setter();
  }
  return swift_release();
}

uint64_t closure #1 in closure #1 in RRCandidate.equivalentClientEntity()()
{
  type metadata accessor for Apple_Parsec_Siri_Context_ClientEntityAlignment();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientEntityAlignment and conformance Apple_Parsec_Siri_Context_ClientEntityAlignment, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F9F0], MEMORY[0x1E0D6F9D8]);
  return static Message.with(_:)();
}

uint64_t closure #1 in closure #1 in closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UtteranceSpan?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v21 - v8;
  UtteranceAlignment.asrHypothesisIndex.getter();
  Apple_Parsec_Siri_Context_ClientEntityAlignment.asrHypothesisIndex.setter();
  Apple_Parsec_Siri_Context_ClientDisplayHints.displayHintsDomain.setter();
  v10 = UtteranceAlignment.spans.getter();
  v11 = *(_QWORD *)(v10 + 16);
  v12 = type metadata accessor for UtteranceSpan();
  v13 = *(_QWORD *)(v12 - 8);
  v21[1] = a3;
  if (v11)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v9, v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v15(v9, v14, 1, v12);
  swift_bridgeObjectRelease();
  type metadata accessor for UtteranceSpan();
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v16(v9, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for UtteranceSpan?);
  }
  else
  {
    UtteranceSpan.startIndex.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.startTokenIndex.setter();
  v17 = UtteranceAlignment.spans.getter();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v7, v17+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * (v18 - 1), v12);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  v15(v7, v19, 1, v12);
  swift_bridgeObjectRelease();
  if (v16(v7, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for UtteranceSpan?);
  }
  else
  {
    UtteranceSpan.endIndex.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
  }
  Apple_Parsec_Siri_Context_ClientEntityAlignment.endTokenIndex.setter();
  RRCandidate.score.getter();
  return Apple_Parsec_Siri_Context_ClientEntityAlignment.score.setter();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_24;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  v14 = v10;
  v15 = (_QWORD *)*a5;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      v24 = (_QWORD *)*a5;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v24 = (_QWORD *)*a5;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    v26 = (uint64_t *)(v24[6] + 16 * v17);
    *v26 = v11;
    v26[1] = v12;
    v27 = (_QWORD *)(v24[7] + 16 * v17);
    *v27 = v13;
    v27[1] = v14;
    v28 = v24[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    v31 = specialized LazyMapSequence.Iterator.next()();
    if (v32)
    {
      v35 = v31;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      do
      {
        v43 = (_QWORD *)*a5;
        v45 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        v46 = v43[2];
        v47 = (v44 & 1) == 0;
        v48 = v46 + v47;
        if (__OFADD__(v46, v47))
          goto LABEL_25;
        v49 = v44;
        if (v43[3] < v48)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, 1);
          v50 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
          if ((v49 & 1) != (v51 & 1))
            goto LABEL_27;
          v45 = v50;
        }
        v52 = (_QWORD *)*a5;
        if ((v49 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v39 = (_QWORD *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease();
          *v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          v53 = (uint64_t *)(v52[6] + 16 * v45);
          *v53 = v35;
          v53[1] = v36;
          v54 = (_QWORD *)(v52[7] + 16 * v45);
          *v54 = v37;
          v54[1] = v38;
          v55 = v52[2];
          v29 = __OFADD__(v55, 1);
          v56 = v55 + 1;
          if (v29)
            goto LABEL_26;
          v52[2] = v56;
        }
        v35 = specialized LazyMapSequence.Iterator.next()();
        v36 = v40;
        v37 = v41;
        v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    v24 = (_QWORD *)*a5;
    if ((v21 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    v25 = (_QWORD *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease();
    *v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 16 * v6;
    v8 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v7);
    v12 = *v11;
    v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    v14 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      v18 = v0[1];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        v5 = (v19 - 1) & v19;
        v6 = __clz(__rbit64(v19)) + (v16 << 6);
        v4 = v16;
        goto LABEL_3;
      }
      v20 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          v16 = v20;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            v16 = v3 + 3;
            goto LABEL_7;
          }
          v20 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v20);
            if (v19)
              goto LABEL_10;
            v16 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v16);
              if (v19)
                goto LABEL_7;
              v4 = v17 - 1;
              v21 = v3 + 6;
              while (v17 != v21)
              {
                v19 = *(_QWORD *)(v18 + 8 * v21++);
                if (v19)
                {
                  v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  _BYTE v29[24];
  ValueMetadata *v30;
  _UNKNOWN **v31;

  v23 = a4;
  v24 = a1;
  v14 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  v26 = *(_QWORD *)(v14 - 8);
  v27 = v14;
  MEMORY[0x1E0C80A78](v14);
  v25 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = &type metadata for PIMSEnablementProvider;
  v31 = &protocol witness table for PIMSEnablementProvider;
  v28[3] = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CNContactStore);
  v28[4] = &protocol witness table for CNContactStore;
  v28[0] = a6;
  *(_BYTE *)(a7 + 16) = 1;
  *(_QWORD *)(a7 + 144) = 0;
  *(_QWORD *)(a7 + 64) = 0;
  *(_QWORD *)(a7 + 72) = 0;
  swift_retain();
  v16 = closure #1 in variable initialization expression of PegasusProxy.requestCancellableQueue();
  v17 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a7 + 152) = v16;
  *(_QWORD *)(a7 + 160) = v17;
  *(_QWORD *)(a7 + 168) = v17;
  *(_OWORD *)(a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext) = xmmword_1C24FEDE0;
  v18 = a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
  v19 = type metadata accessor for InteractionType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  type metadata accessor for PegasusProxyForAssistant();
  *(_QWORD *)(a7 + 80) = static PegasusProxyForAssistant.shared.getter();
  *(_QWORD *)(a7 + 88) = &protocol witness table for PegasusProxyForAssistant;
  outlined init with copy of AppDataProviding(a1, a7 + 96);
  *(_QWORD *)(a7 + 136) = a2;
  outlined init with copy of AppDataProviding((uint64_t)v29, a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider);
  *(_QWORD *)(a7 + 176) = a3;
  *(_QWORD *)(a7 + 184) = a5;
  outlined init with copy of AppDataProviding(a4, a7 + 24);
  outlined init with copy of AppDataProviding((uint64_t)v28, a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  type metadata accessor for DomainAffinityKVStoreManager();
  swift_retain();
  swift_retain();
  swift_retain();
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(0xD000000000000013);
  swift_release();
  swift_bridgeObjectRelease();
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(0x6E65657263536E6FLL);
  swift_release();
  swift_bridgeObjectRelease();
  v20 = v25;
  Apple_Parsec_Search_SearchConversationContext.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1(v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  __swift_destroy_boxed_opaque_existential_1(v24);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a7 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext, v20, v27);
  return a7;
}

uint64_t specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[5];
  uint64_t v41[6];

  v35 = a8;
  v36 = a7;
  v33 = a3;
  v34 = a6;
  v32[1] = a2;
  v18 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  v38 = *(_QWORD *)(v18 - 8);
  v39 = v18;
  MEMORY[0x1E0C80A78](v18);
  v37 = (char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[3] = a12;
  v41[4] = a14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a12 - 8) + 32))(boxed_opaque_existential_1, a5, a12);
  v40[3] = a11;
  v40[4] = a13;
  v21 = __swift_allocate_boxed_opaque_existential_1(v40);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 32))(v21, a9, a11);
  *(_BYTE *)(a10 + 16) = 1;
  *(_QWORD *)(a10 + 144) = 0;
  *(_QWORD *)(a10 + 64) = 0;
  *(_QWORD *)(a10 + 72) = 0;
  swift_retain();
  v22 = closure #1 in variable initialization expression of PegasusProxy.requestCancellableQueue();
  v23 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a10 + 152) = v22;
  *(_QWORD *)(a10 + 160) = v23;
  *(_QWORD *)(a10 + 168) = v23;
  *(_OWORD *)(a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext) = xmmword_1C24FEDE0;
  v24 = a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
  v25 = type metadata accessor for InteractionType();
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *(_QWORD *)(a10 + 80) = a1(v26);
  *(_QWORD *)(a10 + 88) = v27;
  outlined init with copy of AppDataProviding(a3, a10 + 96);
  *(_QWORD *)(a10 + 136) = a4;
  outlined init with copy of AppDataProviding((uint64_t)v41, a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider);
  v28 = v35;
  *(_QWORD *)(a10 + 176) = v34;
  *(_QWORD *)(a10 + 184) = v28;
  v29 = v36;
  outlined init with copy of AppDataProviding(v36, a10 + 24);
  outlined init with copy of AppDataProviding((uint64_t)v40, a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore);
  type metadata accessor for DomainAffinityKVStoreManager();
  swift_retain();
  swift_retain();
  swift_retain();
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(0xD000000000000013);
  swift_release();
  swift_bridgeObjectRelease();
  static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(0x6E65657263536E6FLL);
  swift_release();
  swift_bridgeObjectRelease();
  v30 = v37;
  Apple_Parsec_Search_SearchConversationContext.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  __swift_destroy_boxed_opaque_existential_1(v33);
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(a10 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext, v30, v39);
  return a10;
}

uint64_t sub_1C24B1C10()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  swift_retain();
  specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:)(21, v1, v2);
  return swift_release();
}

uint64_t partial apply for closure #3 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 184) + 304))();
}

uint64_t sub_1C24B1CCC()
{
  return objectdestroy_2Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1C24B1CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 72) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t _s21SiriInformationSearch14CurareDonationO06donateD4Info3for4intoy10PegasusAPI013Apple_Parsec_a9_V2alpha_aJ7RequestV_AA0D17InteractionStream_pSgtFZyyYacfU_TA_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest() - 8)
                          + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + 32;
  v8 = v1 + ((v4 + 72) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in static CurareDonation.donateCurareInfo(for:into:)(a1, v5, v6, v7, v8);
}

uint64_t sub_1C24B1DF0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C24B1E14()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void (*v9)(unint64_t, uint64_t);
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v14 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v13 = *(_QWORD *)(v4 + 64);
  v15 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v15 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  swift_release();
  v8 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3);
  v9 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  if (!v8)
    v9(v0 + v2, v3);
  v10 = (v2 + v14 + v5) & ~v5;
  v11 = (v10 + v13 + v7) & ~v7;
  v9(v0 + v10, v3);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v11, v15);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(type metadata accessor for PommesCandidateId() - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, v1 + v10, *(void **)(v1 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1C24B1FF8()
{
  return objectdestroy_2Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD, _QWORD, _QWORD);
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v5 = type metadata accessor for Siri_Nlu_External_Span();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v25 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v20 - v9;
  result = MEMORY[0x1E0DEE9D8];
  v26 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v20 = v2;
    v13 = *(_QWORD *)(v6 + 72);
    v22 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v23 = v6;
    v14 = a1 + v22;
    v15 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16);
    v24 = a2;
    v21 = v15;
    v15(v10, v14, v5);
    while (1)
    {
      if ((PegasusProxy.shouldAddUserVocabSpan(_:)((uint64_t)v10) & 1) != 0)
      {
        v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v16(v25, v10, v5);
        v17 = v26;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v26;
        }
        v19 = *(_QWORD *)(v17 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v17 = v26;
        }
        *(_QWORD *)(v17 + 16) = v19 + 1;
        v16((char *)(v17 + v22 + v19 * v13), v25, v5);
        v26 = v17;
        v6 = v23;
        v15 = v21;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      }
      v14 += v13;
      if (!--v12)
        break;
      v15(v10, v14, v5);
    }
    return v26;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  char v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  v46 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_Span();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v40 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v31 - v11;
  result = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9D8];
  v39 = *(_QWORD *)(a1 + 16);
  if (v39)
  {
    v14 = 0;
    v15 = *(_QWORD *)(v8 + 72);
    v32 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v33 = v15;
    v38 = a1 + v32;
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v36 = v7;
    v37 = v16;
    v47 = a2;
    v45 = a2 + 56;
    v34 = (char *)&v31 - v11;
    v35 = v8;
    v16(v12, a1 + v32, v7);
    while (1)
    {
      v17 = Siri_Nlu_External_Span.matcherNames.getter();
      v44 = *(_QWORD *)(v17 + 16);
      if (v44)
      {
        v41 = v17;
        v42 = v14;
        v18 = 0;
        v43 = v17 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
        v19 = *(_QWORD *)(v46 + 72);
        v20 = v47;
        while (1)
        {
          if (*(_QWORD *)(v20 + 16))
          {
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F028], MEMORY[0x1E0D9F038]);
            v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
            v20 = v47;
            v22 = -1 << *(_BYTE *)(v47 + 32);
            v23 = v21 & ~v22;
            if (((*(_QWORD *)(v45 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
              break;
          }
LABEL_9:
          if (++v18 == v44)
          {
            swift_bridgeObjectRelease();
            v8 = v35;
            v7 = v36;
            v15 = v33;
            v12 = v34;
            v14 = v42;
            goto LABEL_4;
          }
        }
        v24 = ~v22;
        v25 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 16);
        while (1)
        {
          v25(v6, *(_QWORD *)(v20 + 48) + v23 * v19, v4);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F028], MEMORY[0x1E0D9F040]);
          v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v4);
          if ((v26 & 1) != 0)
            break;
          v23 = (v23 + 1) & v24;
          v20 = v47;
          if (((*(_QWORD *)(v45 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        v12 = v34;
        v8 = v35;
        v27 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        v7 = v36;
        v27(v40, v34, v36);
        v28 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
          v28 = v48;
        }
        v30 = *(_QWORD *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          v28 = v48;
        }
        *(_QWORD *)(v28 + 16) = v30 + 1;
        v15 = v33;
        v27((char *)(v28 + v32 + v30 * v33), v40, v7);
        v48 = v28;
        v14 = v42;
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_4:
        (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      }
      if (++v14 == v39)
        return v48;
      v37(v12, v38 + v15 * v14, v7);
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescy21VtFAG0l1_m1_a1_n1_dC5K9VAMXEfU0_SayAF0f1_g1_h1_I18_ASRInterpretationVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v16[1] = v2;
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v21;
    v19 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v10 = a1 + v19;
    v11 = *(_QWORD *)(v5 + 72);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18 = v11;
    do
    {
      v17(v7, v10, v4);
      swift_bridgeObjectRetain();
      Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.asrInterpretations.setter();
      v21 = v9;
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = v21;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      v14 = v18;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v19 + v13 * v18, v7, v4);
      v10 += v14;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ASRInterpretationVs5NeverOTg504_s21h19InformationSearch12d59ProxyC21addASRInterpretations2to06pommesC7Requesty0D3API013f1_g4_a9_i19_adJ0Vz_AA06Pommescx19VtFAG0l1_m1_a1_N18_J8VSiXEfU_SaySaySo13AFSpeechTokenCGG0hM6Search0dO0CAPTf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a4;
  v22 = a5;
  v20 = a3;
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ASRInterpretation();
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = MEMORY[0x1E0DEE9D8];
  if (!v12)
    return v13;
  v24 = MEMORY[0x1E0DEE9D8];
  v23 = a2;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  v14 = v23;
  if (v23 >= a1 && (v12 & 0x8000000000000000) == 0)
  {
    v13 = v24;
    result = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ASRInterpretation and conformance Apple_Parsec_Siri_V2alpha_ASRInterpretation, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F100], MEMORY[0x1E0D6F0F8]);
    v19[1] = result;
    while (v14 != a1)
    {
      MEMORY[0x1E0C80A78](result);
      v15 = v20;
      v19[-4] = a1;
      v19[-3] = v15;
      v16 = v22;
      v19[-2] = v21;
      v19[-1] = v16;
      static Message.with(_:)();
      v24 = v13;
      v18 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v13 = v24;
      }
      *(_QWORD *)(v13 + 16) = v18 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v18, v11, v7);
      ++a1;
      v14 = v23;
      if (v23 == a1)
        return v13;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v31 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v32 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v29 = (char *)v26 - v13;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return MEMORY[0x1E0DEE9D8];
  v26[2] = v3;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
  v16 = *(_QWORD *)(v15 - 8);
  v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v30 = *(_QWORD *)(v16 + 72);
  v26[1] = a1;
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x1E0DEE9D8];
  v27 = v10;
  v28 = a2;
  do
  {
    a2(v17, v17 + *(int *)(v15 + 48));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
    }
    else
    {
      v19 = v15;
      v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v21 = v29;
      v20(v29, v8, v9);
      v20(v32, v21, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
      v23 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      if (v23 >= v22 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v18);
      *(_QWORD *)(v18 + 16) = v23 + 1;
      v24 = v18
          + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))
          + *(_QWORD *)(v27 + 72) * v23;
      v10 = v27;
      v20((char *)v24, v32, v9);
      a2 = v28;
      v15 = v19;
    }
    v17 += v30;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_1C24B2778()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v45 = type metadata accessor for PommesCandidateId();
  v8 = *(_QWORD *)(v45 - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (int *)type metadata accessor for PommesSearchRequest(0);
  v12 = *((_QWORD *)v11 - 1);
  v46 = (*(unsigned __int8 *)(v12 + 80) + v10 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v48 = *(_QWORD *)(v12 + 64);
  v49 = type metadata accessor for SignpostToken();
  v47 = *(unsigned __int8 *)(*(_QWORD *)(v49 - 8) + 80);
  swift_release();
  v13 = v0 + v2;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4);
  v15 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v14)
    v15(v13, v4);
  v15(v0 + v6, v4);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v9, v45);
  swift_bridgeObjectRelease();
  swift_release();
  v16 = v0 + v46;
  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v18 = v0;
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v16
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      v25 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v26 = *(_QWORD *)(v25 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
      swift_bridgeObjectRelease();
      v18 = v0;
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v16
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      v28 = type metadata accessor for TCUMappedNLResponse();
      v29 = *(_QWORD *)(v28 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
      break;
    case 0:
      v19 = v0;
      swift_bridgeObjectRelease();
      v20 = v16
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      swift_bridgeObjectRelease();
      v21 = v20 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
      v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v23 = *(_QWORD *)(v22 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      v18 = v19;
      break;
  }
  swift_bridgeObjectRelease();
  v30 = v16 + v11[6];
  v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v32 = *(_QWORD *)(v31 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v16 + v11[10];
  v34 = type metadata accessor for PommesContext();
  v35 = *(_QWORD *)(v34 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  v36 = v16 + v11[11];
  v37 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v38 = *(_QWORD *)(v37 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  swift_release();
  v39 = v16 + v11[14];
  v40 = type metadata accessor for InputOrigin();
  v41 = *(_QWORD *)(v40 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = v18 + ((v48 + v47 + v46) & ~v47) + *(int *)(v49 + 20);
  v43 = type metadata accessor for OSSignpostID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(type metadata accessor for PommesCandidateId() - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(type metadata accessor for PommesSearchRequest(0) - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + v12 + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 64);
  v16 = *(_QWORD *)(type metadata accessor for SignpostToken() - 8);
  v17 = (v15 + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (*(_QWORD *)(v16 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)(a1, *(_QWORD *)(v1 + 16), v1 + v4, (uint8_t *)(v1 + v7), v1 + v10, *(_QWORD *)(v1 + v11), *(_QWORD *)(v1 + v11 + 8), *(char **)(v1 + v12), v1 + v14, v1 + v17, *(void (**)(_BYTE *))(v1 + v18), *(_QWORD *)(v1 + v18 + 8));
}

uint64_t sub_1C24B2DDC()
{
  return objectdestroy_2Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_2Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for closure #8 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  return closure #8 in PegasusProxy.search(pommesSearchRequest:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #8 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 16) + 640))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #17 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = v2[23];
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*v2 + 104))(v1, v3);
  return swift_endAccess();
}

uint64_t partial apply for closure #10 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 584))();
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t partial apply for closure #9 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #9 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t outlined assign with take of InteractionType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id partial apply for closure #3 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(int a1)
{
  uint64_t v1;

  return closure #3 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(v1, a1);
}

uint64_t partial apply for closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)()
{
  uint64_t *v0;

  return closure #2 in PegasusProxy.addOnScreenContext(to:onDeviceLabels:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in RRCandidate.equivalentClientEntity()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #3 in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = Siri_Nlu_External_Span.equivalentClientEntity(contactStore:request:)((_QWORD *)(*(_QWORD *)(v2 + 16) + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_contactStore), *(_QWORD *)(v2 + 24), a2);
  if (v3)
    *a1 = v3;
  return result;
}

uint64_t sub_1C24B30F4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 256))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24B3128(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 264))(*a1);
}

uint64_t sub_1C24B3154@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 328))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24B3188@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 352))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24B31B8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 360);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for PegasusSearchResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t assignWithCopy for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PegasusSearchResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C24B3410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PegasusSearchResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C24B3490(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for PegasusSearchResponse()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PegasusError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1C24B35DC + 4 * byte_1C24FFD8A[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1C24B3610 + 4 * byte_1C24FFD85[v4]))();
}

uint64_t sub_1C24B3610(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24B3618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24B3620);
  return result;
}

uint64_t sub_1C24B362C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24B3634);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1C24B3638(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24B3640(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PegasusError()
{
  return &type metadata for PegasusError;
}

uint64_t destroy for OnDeviceLabels()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for OnDeviceLabels(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OnDeviceLabels(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for OnDeviceLabels(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeviceLabels(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeviceLabels(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnDeviceLabels()
{
  return &type metadata for OnDeviceLabels;
}

uint64_t dispatch thunk of PegasusProxyClient.metadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PegasusProxyClient.metadata.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PegasusProxyClient.metadata.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PegasusProxyClient.feedbackEventStream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PegasusProxyClient.constructSearchRequest(query:context:requestType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of PegasusProxyClient.searchResponsePublisher(usingSearchRequest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PegasusProxyClient.warmUpConnectionIfNeeded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t ObjC metadata update function for PegasusProxy()
{
  return type metadata accessor for PegasusProxy(0);
}

void type metadata completion function for PegasusProxy()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InteractionType?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PegasusProxy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PegasusProxy.enablePromptContextLogging.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PegasusProxy.enablePromptContextLogging.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of PegasusProxy.enablePromptContextLogging.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of PegasusProxy.client.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of PegasusProxy.phoneCallStateManager.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of PegasusProxy.phoneCallStateManager.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of PegasusProxy.phoneCallStateManager.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of PegasusProxy.__allocating_init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of PegasusProxy.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtSessionStart()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtRequestStart()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtRequestStart(requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of PegasusProxy.prepareForSearchAtRequestStart(requestId:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of PegasusProxy.tearDown()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of PegasusProxy.isUserDataShareOptIn()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of PegasusProxy.addRewrittenUtterances(to:delegatedUDA:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of PegasusProxy.addRewrittenUtterances(to:rewriteMessage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of PegasusProxy.addInteractionType(to:pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of PegasusProxy.addMultiUserContext(to:pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of PegasusProxy.pegasusRewriteType(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of PegasusProxy.addOnScreenContext(to:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of PegasusProxy.addPlaySRREntities(to:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of PegasusProxy.addPromptContext(to:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of PegasusProxy.clientExperienceSignals(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

void type metadata accessor for InteractionType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InteractionType?)
  {
    type metadata accessor for InteractionType();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InteractionType?);
  }
}

uint64_t partial apply for closure #1 in closure #1 in RRCandidate.equivalentClientEntity()()
{
  return closure #1 in closure #1 in RRCandidate.equivalentClientEntity()();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RRCandidate.equivalentClientEntity()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in RRCandidate.equivalentClientEntity()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in PegasusProxy.addASRInterpretations(to:pommesSearchRequest:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t specialized PegasusProxy.createASRInterpretationTokens(with:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_InterpretationToken();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v22 - v7;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = MEMORY[0x1E0DEE9D8];
  if (!v9)
    return v10;
  v23 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v12 = 0;
      do
      {
        v13 = MEMORY[0x1C3BBF3F4](v12, a1);
        *(&v22 - 2) = MEMORY[0x1E0C80A78](v13);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_InterpretationToken and conformance Apple_Parsec_Siri_V2alpha_InterpretationToken, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F828], MEMORY[0x1E0D6F800]);
        static Message.with(_:)();
        swift_unknownObjectRelease();
        v10 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
          v10 = v23;
        }
        v15 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        if (v15 >= v14 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
          v10 = v23;
        }
        ++v12;
        *(_QWORD *)(v10 + 16) = v15 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v15, v8, v2);
        v23 = v10;
      }
      while (v9 != v12);
    }
    else
    {
      v16 = a1 + 32;
      v17 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_InterpretationToken and conformance Apple_Parsec_Siri_V2alpha_InterpretationToken, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F828], MEMORY[0x1E0D6F800]);
      do
      {
        MEMORY[0x1E0C80A78](v17);
        *(&v22 - 2) = (uint64_t)v18;
        v19 = v18;
        static Message.with(_:)();

        v10 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
          v10 = v23;
        }
        v21 = *(_QWORD *)(v10 + 16);
        v20 = *(_QWORD *)(v10 + 24);
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          v10 = v23;
        }
        *(_QWORD *)(v10 + 16) = v21 + 1;
        v17 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(v10+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v21, v6, v2);
        v23 = v10;
        v16 += 8;
        --v9;
      }
      while (v9);
    }
    return v10;
  }
  __break(1u);
  return result;
}

void partial apply for closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)(int a1)
{
  uint64_t v1;

  closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PegasusProxy.addResolvedEntities(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PegasusProxy.addResolvedEntities(_:to:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  return closure #1 in closure #7 in PegasusProxy.search(pommesSearchRequest:completion:)();
}

uint64_t sub_1C24B3EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v17 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v16 = *(_QWORD *)(v4 + 64);
  v19 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v19 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 64);
  v18 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  v8 = *(_QWORD *)(v18 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  swift_release();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + ((v2 + 24) & ~v2), 1, v3);
  v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  if (!v10)
    v11(v0 + ((v2 + 24) & ~v2), v3);
  v12 = (((v2 + 24) & ~v2) + v17 + v5) & ~v5;
  v13 = (v12 + v16 + v7) & ~v7;
  v11(v0 + v12, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v13, v19);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + ((v13 + v15 + v9) & ~v9), v18);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = type metadata accessor for PommesCandidateId();
  v8 = (v5 + v6 + *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  return closure #2 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, v0 + v8);
}

uint64_t sub_1C24B40EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v17 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v16 = *(_QWORD *)(v4 + 64);
  v19 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v19 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 64);
  v18 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  v8 = *(_QWORD *)(v18 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  swift_release();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + ((v2 + 24) & ~v2), 1, v3);
  v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  if (!v10)
    v11(v0 + ((v2 + 24) & ~v2), v3);
  v12 = (((v2 + 24) & ~v2) + v17 + v5) & ~v5;
  v13 = (v12 + v16 + v7) & ~v7;
  v11(v0 + v12, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v13, v19);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + ((v13 + v15 + v9) & ~v9), v18);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for PommesCandidateId() - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload() - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  return closure #1 in closure #4 in PegasusProxy.search(pommesSearchRequest:completion:)(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, v0 + v8, v0 + v11, *(_QWORD *)(v0 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t closure #1 in RRCandidate.equivalentClientEntity()partial apply(uint64_t a1)
{
  return partial apply for closure #1 in RRCandidate.equivalentClientEntity()(a1);
}

void closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)partial apply(int a1)
{
  partial apply for closure #1 in closure #1 in PegasusProxy.createASRInterpretationTokens(with:)(a1);
}

void SageSearchRequestProcessorError.error.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SageSearchRequestProcessorError.debugMessage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static SageSearchRequestProcessorErrorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

SiriInformationSearch::SageSearchRequestProcessorError __swiftcall SageSearchRequestProcessorError.init(error:debugMessage:)(SiriInformationSearch::SageSearchRequestProcessorErrorType error, Swift::String_optional debugMessage)
{
  uint64_t v2;
  SiriInformationSearch::SageSearchRequestProcessorError result;

  *(_BYTE *)v2 = *(_BYTE *)error;
  *(Swift::String_optional *)(v2 + 8) = debugMessage;
  result.debugMessage = debugMessage;
  result.error = error;
  return result;
}

void SageSearchRequestProcessorErrorType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SageSearchRequestProcessorErrorType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized static SageSearchRequestProcessorError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (*a1 == *a2)
  {
    v3 = *((_QWORD *)a1 + 2);
    v4 = *((_QWORD *)a2 + 2);
    if (v3)
    {
      if (v4)
      {
        v5 = *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && v3 == v4;
        if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
    else if (!v4)
    {
      return 1;
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType;
  if (!lazy protocol witness table cache variable for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for SageSearchRequestProcessorErrorType, &type metadata for SageSearchRequestProcessorErrorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearchRequestProcessorErrorType and conformance SageSearchRequestProcessorErrorType);
  }
  return result;
}

ValueMetadata *type metadata accessor for SageSearchRequestProcessorError()
{
  return &type metadata for SageSearchRequestProcessorError;
}

uint64_t storeEnumTagSinglePayload for SageSearchRequestProcessorErrorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C24B4564 + 4 * byte_1C2500015[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C24B4598 + 4 * byte_1C2500010[v4]))();
}

uint64_t sub_1C24B4598(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24B45A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24B45A8);
  return result;
}

uint64_t sub_1C24B45B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24B45BCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C24B45C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24B45C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SageSearchRequestProcessorErrorType()
{
  return &type metadata for SageSearchRequestProcessorErrorType;
}

uint64_t String.nilIfEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v3 = a1;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v10 = a1[3];
  v11 = a1[4];
  v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  v13 = a4[3];
  v14 = a4[4];
  v15 = __swift_project_boxed_opaque_existential_1(a4, v13);
  return specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)((uint64_t)v12, a2, a3, (uint64_t)v15, a5, v5, v10, v13, v11, v14);
}

uint64_t static SiriKitAppInfoDataProvider.isEnabled()()
{
  return 1;
}

uint64_t closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider()
{
  uint64_t v0;

  type metadata accessor for LaunchServicesSatisfyingAppsDataProvider();
  swift_allocObject();
  v0 = LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)((uint64_t)closure #1 in closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider, 0);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider, (uint64_t (*)(uint64_t))type metadata accessor for LaunchServicesSatisfyingAppsDataProvider, (uint64_t)&protocol conformance descriptor for LaunchServicesSatisfyingAppsDataProvider);
  return v0;
}

uint64_t closure #1 in closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider(void *a1, void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t result;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(unint64_t, _QWORD, uint64_t);
  void (*v41)(unint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v42;
  id v43;
  BOOL v44;
  id v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(unint64_t, _QWORD, uint64_t);
  void (*v92)(unint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v93;
  id v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  char *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  id v116;
  uint64_t v117;
  id v118;
  char *v119;
  unint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;

  v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  v122 = *(_QWORD *)(v114 - 8);
  v6 = MEMORY[0x1E0C80A78](v114);
  v8 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (unint64_t)&v94 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v94 - v12;
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  v14 = *(_QWORD *)(v117 - 8);
  v15 = MEMORY[0x1E0C80A78](v117);
  v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (uint64_t)&v94 - v19;
  MEMORY[0x1E0C80A78](v18);
  v107 = (char *)&v94 - v21;
  v22 = objc_msgSend(a1, sel_developerType);
  result = 0;
  if (v22 != 1 && a2)
  {
    v102 = v17;
    v24 = a2;
    v25 = objc_msgSend(v24, sel_supportedMediaCategories);
    v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v25) = specialized Set.contains(_:)(0xD000000000000014, 0x80000001C2509480, v26);
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      v27 = objc_msgSend(v24, sel_supportedIntents);
      v28 = v20;
      v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      v30 = specialized Set.isSuperset<A>(of:)(outlined read-only object #0 of closure #1 in closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider, v29);
      swift_arrayDestroy();
      v20 = v28;
      swift_bridgeObjectRelease();
      if (v30)
      {

        return 1;
      }
    }
    v94 = v24;
    if (a3 >> 62)
      goto LABEL_59;
    v31 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v31)
    {
LABEL_8:
      v95 = (char *)v11;
      v96 = v8;
      v11 = 0;
      v120 = a3 & 0xC000000000000001;
      v112 = a3 + 32;
      v113 = a3 & 0xFFFFFFFFFFFFFF8;
      v118 = (id)*MEMORY[0x1E0D43A70];
      v105 = *MEMORY[0x1E0C911A8];
      v104 = *MEMORY[0x1E0C911B8];
      v103 = *MEMORY[0x1E0C911B0];
      v116 = (id)*MEMORY[0x1E0D43A58];
      v101 = *MEMORY[0x1E0C90A88];
      v100 = *MEMORY[0x1E0C90A80];
      v99 = *MEMORY[0x1E0C90A78];
      v110 = xmmword_1C24FA1A0;
      v32 = &demangling cache variable for type metadata for StringSearchScope?;
      v115 = a3;
      v111 = v13;
      v97 = v20;
      v106 = v14;
      v119 = (char *)v31;
      while (1)
      {
        if (v120)
        {
          v43 = (id)MEMORY[0x1C3BBF3F4](v11, a3);
          v44 = __OFADD__(v11++, 1);
          if (v44)
            goto LABEL_57;
        }
        else
        {
          if (v11 >= *(_QWORD *)(v113 + 16))
            goto LABEL_58;
          v43 = *(id *)(v112 + 8 * v11);
          v44 = __OFADD__(v11++, 1);
          if (v44)
          {
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            swift_bridgeObjectRetain();
            v31 = _CocoaArrayWrapper.endIndex.getter();
            if (!v31)
              goto LABEL_60;
            goto LABEL_8;
          }
        }
        v121 = v43;
        v45 = objc_msgSend(v43, sel_systemProtocolMetadata, v94);
        type metadata accessor for LNSystemProtocolIdentifier(0);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocolMetadata);
        v20 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
        v46 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if (!*(_QWORD *)(v46 + 16))
          goto LABEL_29;
        v47 = v118;
        v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47);
        if ((v49 & 1) == 0)
          break;
        v50 = *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v48);
        swift_unknownObjectRetain();

        swift_bridgeObjectRelease();
        objc_opt_self();
        v51 = (void *)swift_dynamicCastObjCClass();
        if (v51)
        {
          v109 = v50;
          v52 = objc_msgSend(v51, sel_searchScopes);
          v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v54 = *(_QWORD *)(v53 + 16);
          if (v54)
          {
            v123 = MEMORY[0x1E0DEE9D8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 0);
            v55 = v123;
            v108 = v53;
            v56 = v53 + 40;
            v57 = (uint64_t)v107;
            do
            {
              swift_bridgeObjectRetain();
              StringSearchScope.init(rawValue:)();
              v123 = v55;
              v59 = *(_QWORD *)(v55 + 16);
              v58 = *(_QWORD *)(v55 + 24);
              if (v59 >= v58 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
                v55 = v123;
              }
              v56 += 16;
              *(_QWORD *)(v55 + 16) = v59 + 1;
              outlined init with take of PommesSearchReason?(v57, v55+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v59, v32);
              --v54;
            }
            while (v54);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            v55 = MEMORY[0x1E0DEE9D8];
          }
          lazy protocol witness table accessor for type StringSearchScope? and conformance <A> A?();
          v123 = Set.init(minimumCapacity:)();
          v75 = *(_QWORD *)(v55 + 16);
          if (v75)
          {
            v108 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
            v76 = v55 + v108;
            v33 = *(_QWORD *)(v14 + 72);
            v77 = v32;
            v78 = (uint64_t)v102;
            v79 = v97;
            do
            {
              outlined init with copy of MediaUserStateCenter?(v76, v78, v77);
              specialized Set._Variant.insert(_:)(v79, v78);
              outlined destroy of MediaUserStateCenter?(v79, v77);
              v76 += v33;
              --v75;
            }
            while (v75);
            swift_bridgeObjectRelease();
            v32 = v77;
            v14 = v106;
            v34 = v108;
          }
          else
          {
            swift_bridgeObjectRelease();
            v33 = *(_QWORD *)(v14 + 72);
            v34 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
          }
          v108 = v123;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StringSearchScope?>);
          v35 = 2 * v33;
          v36 = swift_allocObject();
          *(_OWORD *)(v36 + 16) = v110;
          v37 = v36 + v34;
          v38 = type metadata accessor for StringSearchScope();
          v39 = *(_QWORD *)(v38 - 8);
          v40 = *(void (**)(unint64_t, _QWORD, uint64_t))(v39 + 104);
          v40(v37, v105, v38);
          v41 = *(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56);
          v41(v37, 0, 1, v38);
          v42 = v37 + v33;
          v40(v42, v104, v38);
          v41(v42, 0, 1, v38);
          v8 = (char *)(v37 + v35);
          v40(v37 + v35, v103, v38);
          v41(v37 + v35, 0, 1, v38);
          v20 = specialized Set._isDisjoint<A>(with:)(v36, v108);
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          swift_setDeallocating();
          goto LABEL_11;
        }
        swift_unknownObjectRelease();
        v60 = v121;
        a3 = v115;
LABEL_30:
        v8 = (char *)objc_msgSend(v60, sel_systemProtocolMetadata);
        v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if (!*(_QWORD *)(v61 + 16))
          goto LABEL_40;
        v62 = v116;
        v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
        if ((v64 & 1) == 0)
        {

LABEL_40:
          swift_bridgeObjectRelease();
LABEL_41:

          goto LABEL_12;
        }
        v65 = *(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * v63);
        swift_unknownObjectRetain();

        swift_bridgeObjectRelease();
        objc_opt_self();
        v66 = (void *)swift_dynamicCastObjCClass();
        if (!v66)
        {
          swift_unknownObjectRelease();
          goto LABEL_41;
        }
        v109 = v65;
        v67 = objc_msgSend(v66, sel_supportedCategories);
        v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v69 = *(_QWORD *)(v68 + 16);
        if (v69)
        {
          v123 = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69, 0);
          v70 = v123;
          v108 = v68;
          v71 = v68 + 40;
          do
          {
            swift_bridgeObjectRetain();
            VideoCategory.init(rawValue:)();
            v123 = v70;
            v72 = (uint64_t)v13;
            v74 = *(_QWORD *)(v70 + 16);
            v73 = *(_QWORD *)(v70 + 24);
            if (v74 >= v73 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
              v70 = v123;
            }
            v71 += 16;
            *(_QWORD *)(v70 + 16) = v74 + 1;
            outlined init with take of PommesSearchReason?(v72, v70+ ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80))+ *(_QWORD *)(v122 + 72) * v74, &demangling cache variable for type metadata for VideoCategory?);
            --v69;
            v13 = (char *)v72;
          }
          while (v69);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v70 = MEMORY[0x1E0DEE9D8];
        }
        lazy protocol witness table accessor for type VideoCategory? and conformance <A> A?();
        v123 = Set.init(minimumCapacity:)();
        v80 = *(_QWORD *)(v70 + 16);
        if (v80)
        {
          v98 = *(unsigned __int8 *)(v122 + 80);
          v108 = (v98 + 32) & ~v98;
          v81 = v70 + v108;
          v82 = *(_QWORD *)(v122 + 72);
          v83 = (uint64_t)v96;
          v84 = (uint64_t)v95;
          do
          {
            outlined init with copy of MediaUserStateCenter?(v81, v83, &demangling cache variable for type metadata for VideoCategory?);
            specialized Set._Variant.insert(_:)(v84, v83);
            outlined destroy of MediaUserStateCenter?(v84, &demangling cache variable for type metadata for VideoCategory?);
            v81 += v82;
            --v80;
          }
          while (v80);
          swift_bridgeObjectRelease();
          v14 = v106;
          v85 = v108;
        }
        else
        {
          swift_bridgeObjectRelease();
          v82 = *(_QWORD *)(v122 + 72);
          v85 = (*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
        }
        v108 = v123;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VideoCategory?>);
        v86 = 2 * v82;
        v87 = swift_allocObject();
        *(_OWORD *)(v87 + 16) = v110;
        v88 = v87 + v85;
        v89 = type metadata accessor for VideoCategory();
        v90 = *(_QWORD *)(v89 - 8);
        v91 = *(void (**)(unint64_t, _QWORD, uint64_t))(v90 + 104);
        v91(v88, v101, v89);
        v92 = *(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56);
        v92(v88, 0, 1, v89);
        v93 = v88 + v82;
        v91(v93, v100, v89);
        v92(v93, 0, 1, v89);
        v8 = (char *)(v88 + v86);
        v91(v88 + v86, v99, v89);
        v92(v88 + v86, 0, 1, v89);
        v20 = specialized Set._isDisjoint<A>(with:)(v87, v108);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

        swift_setDeallocating();
LABEL_11:
        swift_arrayDestroy();
        swift_deallocClassInstance();
        a3 = v115;
        v13 = v111;
        if ((v20 & 1) == 0)
        {

          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_12:
        if ((char *)v11 == v119)
          goto LABEL_60;
      }

LABEL_29:
      swift_bridgeObjectRelease();
      v60 = v121;
      goto LABEL_30;
    }
LABEL_60:

    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t *SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared;
}

uint64_t static SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared.getter()
{
  type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();
  return swift_initStaticObject();
}

uint64_t key path setter for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create : SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)a2 + 96);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed () -> (@out SatisfyingAppsDataProvider), v5);
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_release();
}

uint64_t (*SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

Swift::Void __swiftcall SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.reset()()
{
  uint64_t v0;

  (*(void (**)(uint64_t (*)(), _QWORD))(*(_QWORD *)v0 + 96))(closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider, 0);
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = closure #1 in variable initialization expression of kCreateSatisfyingAppsDataProvider;
  *(_QWORD *)(v0 + 24) = 0;
  return result;
}

void *one-time initialization function for intentValues()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  char *v11;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType)>);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType));
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FB7E0;
  v5 = (_QWORD *)(v4 + v3);
  v6 = v4 + v3 + *(int *)(v0 + 48);
  *v5 = 0xD000000000000011;
  v5[1] = 0x80000001C2502340;
  v7 = *MEMORY[0x1E0D6CD48];
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
  v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104);
  v9(v6, v7, v8);
  v10 = (_QWORD *)((char *)v5 + v2);
  v11 = (char *)v5 + v2 + *(int *)(v0 + 48);
  *v10 = 0xD000000000000016;
  v10[1] = 0x80000001C2502360;
  v9((unint64_t)v11, *MEMORY[0x1E0D6CD38], v8);
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v4);
  static SiriKitAppInfoDataProvider.intentValues = result;
  return result;
}

void *one-time initialization function for mediaCategoryValues()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory)>);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory));
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FE390;
  v5 = (_QWORD *)(v4 + v3);
  v6 = v4 + v3 + *(int *)(v0 + 48);
  *v5 = 0xD000000000000014;
  v5[1] = 0x80000001C25093E0;
  v7 = *MEMORY[0x1E0D6CD88];
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
  v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104);
  v9(v6, v7, v8);
  v10 = (_QWORD *)((char *)v5 + v2);
  v11 = (char *)v5 + v2 + *(int *)(v0 + 48);
  *v10 = 0xD000000000000017;
  v10[1] = 0x80000001C2509400;
  v9((unint64_t)v11, *MEMORY[0x1E0D6CDA8], v8);
  v12 = (_QWORD *)((char *)v5 + 2 * v2);
  v13 = (char *)v12 + *(int *)(v0 + 48);
  *v12 = 0xD000000000000019;
  v12[1] = 0x80000001C2509420;
  v9((unint64_t)v13, *MEMORY[0x1E0D6CD78], v8);
  v14 = (_QWORD *)((char *)v5 + 3 * v2);
  v15 = (char *)v14 + *(int *)(v0 + 48);
  *v14 = 0xD000000000000014;
  v14[1] = 0x80000001C2509440;
  v9((unint64_t)v15, *MEMORY[0x1E0D6CD90], v8);
  v16 = (_QWORD *)((char *)v5 + 4 * v2);
  v17 = (char *)v16 + *(int *)(v0 + 48);
  *v16 = 0xD000000000000016;
  v16[1] = 0x80000001C2509460;
  v9((unint64_t)v17, *MEMORY[0x1E0D6CDA0], v8);
  v18 = (_QWORD *)((char *)v5 + 5 * v2);
  v19 = (char *)v18 + *(int *)(v0 + 48);
  *v18 = 0xD000000000000014;
  v18[1] = 0x80000001C2509480;
  v9((unint64_t)v19, *MEMORY[0x1E0D6CD98], v8);
  v20 = (_QWORD *)((char *)v5 + 6 * v2);
  v21 = (char *)v20 + *(int *)(v0 + 48);
  *v20 = 0xD000000000000019;
  v20[1] = 0x80000001C25094A0;
  v9((unint64_t)v21, *MEMORY[0x1E0D6CD80], v8);
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v4);
  static SiriKitAppInfoDataProvider.mediaCategoryValues = result;
  return result;
}

uint64_t SiriKitAppInfoDataProvider.__allocating_init(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(__int128 *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = swift_allocObject();
  v11 = v10 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_BYTE *)(v10 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  v13 = v10 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  outlined init with take of AppDataProviding(a1, v10 + 16);
  *(_QWORD *)(v10 + 56) = a2;
  *(_QWORD *)(v10 + 64) = a3;
  outlined init with take of AppDataProviding(a4, v10 + 72);
  outlined init with take of PommesSearchReason?(a5, v10 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  return v10;
}

uint64_t SiriKitAppInfoDataProvider.init(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(__int128 *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = v5 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  v13 = v5 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  outlined init with take of AppDataProviding(a1, v5 + 16);
  *(_QWORD *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 64) = a3;
  outlined init with take of AppDataProviding(a4, v5 + 72);
  outlined init with take of PommesSearchReason?(a5, v5 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  return v5;
}

Swift::Void __swiftcall SiriKitAppInfoDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  SiriKitAppInfoDataProvider.getForegroundSiriKitAppInfo()((uint64_t)&v20 - v9);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  outlined init with take of PommesSearchReason?((uint64_t)v10, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  v12 = v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?((uint64_t)v8, v12);
  swift_endAccess();
  if (!AFIsATV())
  {
LABEL_4:
    v16 = *(_QWORD *)(v1 + 56);
    if (!v16)
      return;
    goto LABEL_5;
  }
  outlined init with copy of MediaUserStateCenter?(v1 + 112, (uint64_t)&v20, &demangling cache variable for type metadata for AppSearchViewProvider?);
  if (v21)
  {
    outlined init with take of AppDataProviding(&v20, (uint64_t)v22);
    v13 = v23;
    v14 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v15 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v14 + 8);
    swift_retain();
    v15(partial apply for closure #1 in SiriKitAppInfoDataProvider.prepare(), v1, v13, v14);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    goto LABEL_4;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)&v20, &demangling cache variable for type metadata for AppSearchViewProvider?);
  v16 = *(_QWORD *)(v1 + 56);
  if (!v16)
    return;
LABEL_5:
  v17 = *(_QWORD *)(v1 + 64);
  v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v4, 1, 1, v18);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = v16;
  v19[5] = v17;
  v19[6] = v1;
  swift_retain();
  swift_unknownObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #2 in SiriKitAppInfoDataProvider.prepare(), (uint64_t)v19);
  swift_release();
}

uint64_t closure #2 in SiriKitAppInfoDataProvider.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t closure #2 in SiriKitAppInfoDataProvider.prepare()()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  v0[5] = swift_getObjectType();
  v0[6] = *(_QWORD *)(v1 + 16);
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(uint64_t (*)(uint64_t), _QWORD, _QWORD, _QWORD))(v0 + 48))(partial apply for closure #1 in closure #2 in SiriKitAppInfoDataProvider.prepare(), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SiriKitAppInfoDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t SiriKitAppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  unint64_t v32;
  void (*v33)(uint64_t *, _QWORD);
  _DWORD *v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[5];

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v61 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v62 = v2;
  MEMORY[0x1E0C80A78](v2);
  v60 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  MEMORY[0x1E0C80A78](v4);
  v66 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v53 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  MEMORY[0x1E0C80A78](v8);
  v63 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1E0C80A78](v10);
  v51 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Google_Protobuf_Any();
  v69 = *(_QWORD *)(v12 - 8);
  v70 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v52 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v59 = (char *)&v50 - v15;
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v27, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps + 8) & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1C2356000, v29, v30, "SiriKitAppInfoDataProvider numThirdPartyVideoApps is missing", v31, 2u);
      MEMORY[0x1C3BBFF64](v31, -1, -1);
    }

    goto LABEL_16;
  }
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps))
  {
LABEL_16:
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    return 0;
  }
  Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.numSirikitVideoApps.setter();
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) & 1) == 0)
  {
LABEL_15:
    v71[3] = v23;
    v71[4] = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriKitAppInfo and conformance Apple_Parsec_Siri_V2alpha_SiriKitAppInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6CDE8], MEMORY[0x1E0D6CDD0]);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v71);
    (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 16))(boxed_opaque_existential_1, v26, v23);
    defaultAnyTypeURLPrefix.getter();
    v36 = v51;
    Google_Protobuf_Any.init(message:partial:typePrefix:)();
    v50 = v26;
    v39 = v69;
    v38 = v70;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v36, 0, 1, v70);
    v40 = v59;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v59, v36, v38);
    v41 = v63;
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, *MEMORY[0x1E0D6FCA8], v55);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v52, v40, v38);
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
    (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, *MEMORY[0x1E0D70598], v58);
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
    v42 = v66;
    Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
    (*(void (**)(char *, _QWORD, _QWORD))(v61 + 104))(v60, *MEMORY[0x1E0D6F190], v62);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
    v43 = v64;
    v44 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    v45 = swift_allocObject();
    v62 = xmmword_1C24FA1B0;
    *(_OWORD *)(v45 + 16) = xmmword_1C24FA1B0;
    v46 = v65;
    (*(void (**)(unint64_t, char *, uint64_t))(v43 + 16))(v45 + v44, v41, v65);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
    v47 = v67;
    v48 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = v62;
    (*(void (**)(unint64_t, char *, uint64_t))(v47 + 32))(v49 + v48, v42, v68);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v46);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v70);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v50, v23);
    return v49;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0D6CD20], v16);
  v32 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((v32 & 0x8000000000000000) == 0 && !HIDWORD(v32))
  {
    v33 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.appContext.modify();
    if (!__CFADD__(*v34, (_DWORD)v32))
    {
      *v34 += v32;
      v33(v71, 0);
      goto LABEL_15;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall SiriKitAppInfoDataProvider.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?((uint64_t)v3, v5);
  swift_endAccess();
  *(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  v6 = v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
}

uint64_t SiriKitAppInfoDataProvider.getForegroundSiriKitAppInfo()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  int *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t result;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD v58[5];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  _BYTE v64[16];
  uint64_t v65;

  v2 = v1;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.init()();
  if (!AFIsATV())
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  v57 = v7;
  v56 = v5;
  v12 = v2[12];
  v13 = v2[13];
  __swift_project_boxed_opaque_existential_1(v2 + 9, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  if (!v15)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  v16 = v14;
  v17 = v15;
  v18 = v2 + 2;
  v20 = v2[5];
  v19 = v2[6];
  __swift_project_boxed_opaque_existential_1(v18, v20);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 8))(v58, v16, v17, 0, v20, v19);
  swift_bridgeObjectRelease();
  outlined init with take of PommesSearchReason?((uint64_t)v58, (uint64_t)&v59, &demangling cache variable for type metadata for AppData?);
  if (!(_QWORD)v60)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  v62[0] = v59;
  v62[1] = v60;
  v63 = v61;
  v21 = v60;
  v22 = swift_bridgeObjectRetain();
  v23 = specialized Sequence.compactMap<A>(_:)(v22);
  v53[2] = v21;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  v55 = v8;
  v54 = v4;
  if (v24)
  {
    v53[1] = 0;
    v25 = a1;
    swift_bridgeObjectRetain();
    v26 = 0;
    v27 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v28 = *(_QWORD *)(v23 + 8 * v26 + 32);
      if (!HIDWORD(v28))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
        v30 = *((_QWORD *)v27 + 2);
        v29 = *((_QWORD *)v27 + 3);
        if (v30 >= v29 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v27);
        *((_QWORD *)v27 + 2) = v30 + 1;
        *(_DWORD *)&v27[4 * v30 + 32] = v28;
      }
      ++v26;
    }
    while (v24 != v26);
    swift_bridgeObjectRelease();
    a1 = v25;
    v8 = v55;
    v4 = v54;
  }
  else
  {
    v27 = (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v31 = *((_QWORD *)v27 + 2);
  if (v31)
  {
    v32 = 0;
    v33 = (int *)(v27 + 32);
    while (1)
    {
      v34 = *v33++;
      v35 = __CFADD__(v32, v34);
      v32 += v34;
      if (v35)
        break;
      if (!--v31)
        goto LABEL_19;
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.supportedIntents.setter();
  v36 = swift_bridgeObjectRetain();
  v37 = specialized Sequence.compactMap<A>(_:)(v36);
  outlined init with take of PommesSearchReason?((uint64_t)v62, (uint64_t)v64, &demangling cache variable for type metadata for String?);
  outlined release of String?((uint64_t)v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v65 = v63;
  outlined release of [LNActionMetadata]((uint64_t)&v65);
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v39 = a1;
    swift_bridgeObjectRetain();
    v40 = 0;
    v41 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v42 = *(_QWORD *)(v37 + 8 * v40 + 32);
      if (!HIDWORD(v42))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
        v44 = *((_QWORD *)v41 + 2);
        v43 = *((_QWORD *)v41 + 3);
        if (v44 >= v43 >> 1)
          v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v41);
        *((_QWORD *)v41 + 2) = v44 + 1;
        *(_DWORD *)&v41[4 * v44 + 32] = v42;
      }
      ++v40;
    }
    while (v38 != v40);
    swift_bridgeObjectRelease();
    a1 = v39;
    v8 = v55;
    v4 = v54;
  }
  else
  {
    v41 = (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v45 = *((_QWORD *)v41 + 2);
  v46 = v57;
  v47 = 0;
  if (!v45)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.supportedIntentMediaCategories.setter();
    v50 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v46, *MEMORY[0x1E0D6CD18], v4);
    v51 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v4);
    if ((v51 & 0x8000000000000000) != 0 || HIDWORD(v51))
      goto LABEL_40;
    Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.appContext.setter();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v11, v8);
  }
  v48 = (int *)(v41 + 32);
  while (1)
  {
    v49 = *v48++;
    v35 = __CFADD__(v47, v49);
    v47 += v49;
    if (v35)
      break;
    if (!--v45)
      goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SiriKitAppInfoDataProvider.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of MediaUserStateCenter?(v0 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  return v0;
}

uint64_t SiriKitAppInfoDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of MediaUserStateCenter?(v0 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance SiriKitAppInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance SiriKitAppInfoDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 232))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance SiriKitAppInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

uint64_t specialized Set._isDisjoint<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
  MEMORY[0x1E0C80A78](v49);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for VideoCategory();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v46 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoCategory?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v40 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v16);
  v47 = (char *)v40 - v19;
  v54 = a2;
  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v42 = *(_QWORD *)(a1 + 16);
  if (!v42)
    return 1;
  v52 = v6;
  v41 = v18;
  v43 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v53 = *(_QWORD *)(v17 + 72);
  v50 = v54 + 56;
  v40[1] = a1;
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = (uint64_t)v47;
  v45 = v15;
  while (1)
  {
    v44 = v20;
    outlined init with copy of MediaUserStateCenter?(v43 + v53 * v20, v21, &demangling cache variable for type metadata for VideoCategory?);
    if (*(_QWORD *)(v54 + 16))
    {
      Hasher.init(_seed:)();
      v22 = v41;
      outlined init with copy of MediaUserStateCenter?(v21, v41, &demangling cache variable for type metadata for VideoCategory?);
      v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
      v24 = v52;
      v25 = v23(v22, 1, v52);
      v51 = v23;
      if (v25 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v26 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v46, v22, v24);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AA8]);
        dispatch thunk of Hashable.hash(into:)();
        v27 = v26;
        v23 = v51;
        v21 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v24);
      }
      v28 = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v54 + 32);
      v30 = v28 & ~v29;
      if (((*(_QWORD *)(v50 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
        break;
    }
LABEL_4:
    v20 = v44 + 1;
    outlined destroy of MediaUserStateCenter?(v21, &demangling cache variable for type metadata for VideoCategory?);
    if (v20 == v42)
    {
      v38 = 1;
      goto LABEL_22;
    }
  }
  v48 = ~v29;
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v54 + 48) + v30 * v53, (uint64_t)v15, &demangling cache variable for type metadata for VideoCategory?);
    v31 = (uint64_t)&v5[*(int *)(v49 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
    outlined init with copy of MediaUserStateCenter?(v21, v31, &demangling cache variable for type metadata for VideoCategory?);
    v32 = v52;
    if (v23((uint64_t)v5, 1, v52) == 1)
      break;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v12, &demangling cache variable for type metadata for VideoCategory?);
    if (v23(v31, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v32);
      goto LABEL_12;
    }
    v33 = v12;
    v34 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v46, v31, v32);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AB0]);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37 = v34;
    v12 = v33;
    v15 = v45;
    v36(v37, v32);
    v36(v12, v32);
    v21 = (uint64_t)v47;
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for VideoCategory?);
    if ((v35 & 1) != 0)
      goto LABEL_21;
LABEL_13:
    v30 = (v30 + 1) & v48;
    v23 = v51;
    if (((*(_QWORD *)(v50 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
      goto LABEL_4;
  }
  if (v23(v31, 1, v32) != 1)
  {
LABEL_12:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (VideoCategory?, VideoCategory?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for VideoCategory?);
    goto LABEL_13;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for VideoCategory?);
  v21 = (uint64_t)v47;
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for VideoCategory?);
LABEL_21:
  outlined destroy of MediaUserStateCenter?(v21, &demangling cache variable for type metadata for VideoCategory?);
  v38 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  return v38;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
  MEMORY[0x1E0C80A78](v49);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StringSearchScope();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v46 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringSearchScope?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v40 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v16);
  v47 = (char *)v40 - v19;
  v54 = a2;
  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v42 = *(_QWORD *)(a1 + 16);
  if (!v42)
    return 1;
  v52 = v6;
  v41 = v18;
  v43 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v53 = *(_QWORD *)(v17 + 72);
  v50 = v54 + 56;
  v40[1] = a1;
  swift_bridgeObjectRetain();
  v20 = 0;
  v21 = (uint64_t)v47;
  v45 = v15;
  while (1)
  {
    v44 = v20;
    outlined init with copy of MediaUserStateCenter?(v43 + v53 * v20, v21, &demangling cache variable for type metadata for StringSearchScope?);
    if (*(_QWORD *)(v54 + 16))
    {
      Hasher.init(_seed:)();
      v22 = v41;
      outlined init with copy of MediaUserStateCenter?(v21, v41, &demangling cache variable for type metadata for StringSearchScope?);
      v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
      v24 = v52;
      v25 = v23(v22, 1, v52);
      v51 = v23;
      if (v25 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v26 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v46, v22, v24);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C911F8]);
        dispatch thunk of Hashable.hash(into:)();
        v27 = v26;
        v23 = v51;
        v21 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v24);
      }
      v28 = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v54 + 32);
      v30 = v28 & ~v29;
      if (((*(_QWORD *)(v50 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
        break;
    }
LABEL_4:
    v20 = v44 + 1;
    outlined destroy of MediaUserStateCenter?(v21, &demangling cache variable for type metadata for StringSearchScope?);
    if (v20 == v42)
    {
      v38 = 1;
      goto LABEL_22;
    }
  }
  v48 = ~v29;
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v54 + 48) + v30 * v53, (uint64_t)v15, &demangling cache variable for type metadata for StringSearchScope?);
    v31 = (uint64_t)&v5[*(int *)(v49 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
    outlined init with copy of MediaUserStateCenter?(v21, v31, &demangling cache variable for type metadata for StringSearchScope?);
    v32 = v52;
    if (v23((uint64_t)v5, 1, v52) == 1)
      break;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v12, &demangling cache variable for type metadata for StringSearchScope?);
    if (v23(v31, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v32);
      goto LABEL_12;
    }
    v33 = v12;
    v34 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v46, v31, v32);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C91200]);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37 = v34;
    v12 = v33;
    v15 = v45;
    v36(v37, v32);
    v36(v12, v32);
    v21 = (uint64_t)v47;
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for StringSearchScope?);
    if ((v35 & 1) != 0)
      goto LABEL_21;
LABEL_13:
    v30 = (v30 + 1) & v48;
    v23 = v51;
    if (((*(_QWORD *)(v50 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
      goto LABEL_4;
  }
  if (v23(v31, 1, v32) != 1)
  {
LABEL_12:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (StringSearchScope?, StringSearchScope?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for StringSearchScope?);
    goto LABEL_13;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for StringSearchScope?);
  v21 = (uint64_t)v47;
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for StringSearchScope?);
LABEL_21:
  outlined destroy of MediaUserStateCenter?(v21, &demangling cache variable for type metadata for StringSearchScope?);
  v38 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[40];
  __int128 v34[2];
  __int128 v35[2];
  uint64_t v36[5];
  uint64_t v37[5];

  v37[3] = a7;
  v37[4] = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(boxed_opaque_existential_1, a1, a7);
  v36[3] = a8;
  v36[4] = a10;
  v18 = __swift_allocate_boxed_opaque_existential_1(v36);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 16))(v18, a4, a8);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  swift_unknownObjectRetain();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    *(_DWORD *)v22 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 8) = 1024;
    LODWORD(v35[0]) = a2 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_1C2356000, v20, v21, "SiriKitAppInfoDataProvider make, isEnabled=%{BOOL}d, satisfyingAppsDataProvider specified=%{BOOL}d", (uint8_t *)v22, 0xEu);
    MEMORY[0x1C3BBFF64](v22, -1, -1);

    v23 = a2;
    if (!a2)
      goto LABEL_7;
  }
  else
  {

    swift_unknownObjectRelease();
    v23 = a2;
    if (!a2)
    {
LABEL_7:
      type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();
      inited = swift_initStaticObject();
      v25 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(_QWORD *)inited + 88))();
      v23 = v25();
      a3 = v26;
      swift_release();
    }
  }
  outlined init with copy of AppDataProviding((uint64_t)v37, (uint64_t)v35);
  outlined init with copy of AppDataProviding((uint64_t)v36, (uint64_t)v34);
  outlined init with copy of MediaUserStateCenter?(a5, (uint64_t)v33, &demangling cache variable for type metadata for AppSearchViewProvider?);
  type metadata accessor for SiriKitAppInfoDataProvider();
  v27 = swift_allocObject();
  v28 = v27 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  *(_BYTE *)(v27 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  v30 = v27 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  outlined init with take of AppDataProviding(v35, v27 + 16);
  *(_QWORD *)(v27 + 56) = v23;
  *(_QWORD *)(v27 + 64) = a3;
  outlined init with take of AppDataProviding(v34, v27 + 72);
  outlined init with take of PommesSearchReason?((uint64_t)v33, v27 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  swift_unknownObjectRetain();
  v31 = specialized AnyDataProvider.init<A>(provider:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return v31;
}

uint64_t type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator()
{
  return objc_opt_self();
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C24B7A84()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SiriKitAppInfoDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in SiriKitAppInfoDataProvider.prepare()(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = result;
  return result;
}

uint64_t sub_1C24B7B30@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned SatisfyingAppsDataProvider);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

uint64_t ObjC metadata update function for SiriKitAppInfoDataProvider()
{
  return type metadata accessor for SiriKitAppInfoDataProvider();
}

uint64_t type metadata accessor for SiriKitAppInfoDataProvider()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SiriKitAppInfoDataProvider;
  if (!type metadata singleton initialization cache for SiriKitAppInfoDataProvider)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SiriKitAppInfoDataProvider()
{
  unint64_t v0;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SiriKitAppInfoDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.__allocating_init(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))() & 1;
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 232);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo?);
  }
}

uint64_t method lookup function for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.create.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1C24B7DB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out SatisfyingAppsDataProvider)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned SatisfyingAppsDataProvider)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in SiriKitAppInfoDataProvider.prepare()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(_QWORD *)v2 = *(_QWORD *)(result + 16);
  *(_BYTE *)(v2 + 8) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoCategory? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type VideoCategory? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type VideoCategory? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VideoCategory?);
    v2 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type VideoCategory and conformance VideoCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0C90A98], MEMORY[0x1E0C90AA8]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoCategory? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StringSearchScope? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type StringSearchScope? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type StringSearchScope? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for StringSearchScope?);
    v2 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope and conformance StringSearchScope, (uint64_t (*)(uint64_t))MEMORY[0x1E0C911E0], MEMORY[0x1E0C911F8]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringSearchScope? and conformance <A> A?);
  }
  return result;
}

BOOL specialized Set.isSuperset<A>(of:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _BOOL8 result;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;

  v2 = a1[2];
  if (!v2)
    return 1;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = a1 + 4;
    v5 = a1 + 5;
    v6 = a2 + 56;
    v7 = 1;
    v22 = a1 + 4;
    while (1)
    {
      v8 = *v5;
      v9 = *v4;
      swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      v10 = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(a2 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        break;
      v13 = *(_QWORD *)(a2 + 48);
      v14 = (_QWORD *)(v13 + 16 * v12);
      v15 = *v14 == v9 && v14[1] == v8;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v17 = ~v11;
        for (i = v12 + 1; ; i = v19 + 1)
        {
          v19 = i & v17;
          if (((*(_QWORD *)(v6 + (((i & v17) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v17)) & 1) == 0)
            break;
          v20 = (_QWORD *)(v13 + 16 * v19);
          v21 = *v20 == v9 && v20[1] == v8;
          if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_10;
        }
        break;
      }
LABEL_10:
      swift_bridgeObjectRelease();
      result = v7 == v2;
      if (v7 == v2 || !*(_QWORD *)(a2 + 16))
        return result;
      v4 = &v22[2 * v7++];
      v5 = v4 + 1;
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t SourcePriorityFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  SourcePriorityFeaturiser.init(query:)(a1);
  return v2;
}

float static SourcePriorityFeaturiser.score(_:_:)(float a1, float a2)
{
  float v2;

  v2 = (float)((float)(a1 * a2) * 2.2) + 1.0;
  if (a1 < 0.001)
    return 1.0;
  else
    return v2;
}

uint64_t SourcePriorityFeaturiser.name.getter()
{
  type metadata accessor for SourcePriorityFeaturiser();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SourcePriorityFeaturiser.Type);
  return String.init<A>(describing:)();
}

uint64_t SourcePriorityFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(unint64_t, _QWORD, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(unint64_t, _QWORD, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void (*v54)(unint64_t, _QWORD, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(unint64_t, _QWORD, uint64_t);
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;

  v2 = v1;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v86 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v85 = v1;
    v15 = v14;
    v16 = swift_slowAlloc();
    v84 = v4;
    v82 = v16;
    v88 = v16;
    *(_DWORD *)v15 = 136315650;
    v17 = Apple_Parsec_Siri_V2alpha_RequestedMediaType.toString.getter();
    if (v18)
    {
      v19 = v18;
    }
    else
    {
      v17 = 0;
      v19 = 0xE000000000000000;
    }
    v83 = v8;
    v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    v20 = Apple_Parsec_Siri_V2alpha_AudioSort.toString.getter();
    if (v21)
    {
      v22 = v21;
    }
    else
    {
      v20 = 0;
      v22 = 0xE000000000000000;
    }
    v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v88);
    v8 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 1024;
    v23 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
    swift_release();
    LODWORD(v87) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2356000, v12, v13, "SourcePriorityFeaturiser :  requestedMediaType=%s,  sort=%s, isGlideEligible=%{BOOL}d", (uint8_t *)v15, 0x1Cu);
    v24 = v82;
    swift_arrayDestroy();
    v25 = v24;
    v4 = v84;
    MEMORY[0x1C3BBFF64](v25, -1, -1);
    v26 = v15;
    v2 = v85;
    MEMORY[0x1C3BBFF64](v26, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *(_BYTE *)(v2 + 32) = *(_BYTE *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
  v27 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v86, a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, v8);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v27, v8);
  if (v28 != *MEMORY[0x1E0D6E0A0] && v28 != *MEMORY[0x1E0D6E0D8])
  {
    if (v28 == *MEMORY[0x1E0D6E0D0]
      || v28 == *MEMORY[0x1E0D6E0F0]
      || v28 == *MEMORY[0x1E0D6E0A8]
      || v28 == *MEMORY[0x1E0D6E0B0]
      || v28 == *MEMORY[0x1E0D6E0B8]
      || v28 == *MEMORY[0x1E0D6E0C0]
      || v28 == *MEMORY[0x1E0D6E0C8]
      || v28 == *MEMORY[0x1E0D6E0E8]
      || v28 == *MEMORY[0x1E0D6E0E0])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      v49 = *(_QWORD *)(v48 - 8);
      v50 = *(_QWORD *)(v49 + 72);
      v51 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_1C25002C0;
      v53 = v52 + v51;
      v54 = *(void (**)(unint64_t, _QWORD, uint64_t))(v49 + 104);
      v54(v53, *MEMORY[0x1E0D6E960], v48);
      v54(v53 + v50, *MEMORY[0x1E0D6E968], v48);
      v54(v53 + 2 * v50, *MEMORY[0x1E0D6E988], v48);
      v54(v53 + 3 * v50, *MEMORY[0x1E0D6E970], v48);
      v54(v53 + 4 * v50, *MEMORY[0x1E0D6E9A8], v48);
      v54(v53 + 5 * v50, *MEMORY[0x1E0D6E918], v48);
      v54(v53 + 6 * v50, *MEMORY[0x1E0D6E938], v48);
      v54(v53 + 7 * v50, *MEMORY[0x1E0D6E948], v48);
      v54(v53 + 8 * v50, *MEMORY[0x1E0D6E920], v48);
      v54(v53 + 9 * v50, *MEMORY[0x1E0D6E9B8], v48);
      v54(v53 + 10 * v50, *MEMORY[0x1E0D6E978], v48);
      v54(v53 + 11 * v50, *MEMORY[0x1E0D6E990], v48);
      v54(v53 + 12 * v50, *MEMORY[0x1E0D6E930], v48);
      v54(v53 + 13 * v50, *MEMORY[0x1E0D6E910], v48);
      v54(v53 + 14 * v50, *MEMORY[0x1E0D6E940], v48);
      v54(v53 + 15 * v50, *MEMORY[0x1E0D6E928], v48);
      v54(v53 + 16 * v50, *MEMORY[0x1E0D6E998], v48);
      v54(v53 + 17 * v50, *MEMORY[0x1E0D6E980], v48);
      v54(v53 + 18 * v50, *MEMORY[0x1E0D6E950], v48);
      v54(v53 + 19 * v50, *MEMORY[0x1E0D6E958], v48);
      v55 = specialized Set.init(_nonEmptyArrayLiteral:)(v52);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      swift_release();
      *(_QWORD *)(v2 + 24) = v55;
      v39 = 1067030938;
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v4);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v30 != *MEMORY[0x1E0D6F580])
  {
    if (v30 == *MEMORY[0x1E0D6F538])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      v41 = *(_QWORD *)(v40 - 8);
      v42 = *(_QWORD *)(v41 + 72);
      v43 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_1C24FE760;
      v45 = v44 + v43;
      v46 = *(void (**)(unint64_t, _QWORD, uint64_t))(v41 + 104);
      v46(v45, *MEMORY[0x1E0D6E988], v40);
      v46(v45 + v42, *MEMORY[0x1E0D6E970], v40);
      v46(v45 + 2 * v42, *MEMORY[0x1E0D6E928], v40);
      v46(v45 + 3 * v42, *MEMORY[0x1E0D6E950], v40);
      v46(v45 + 4 * v42, *MEMORY[0x1E0D6E920], v40);
      v47 = specialized Set.init(_nonEmptyArrayLiteral:)(v44);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      swift_release();
      *(_QWORD *)(v2 + 24) = v47;
      v39 = 1061158912;
      goto LABEL_37;
    }
    if (v30 == *MEMORY[0x1E0D6F528])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      v57 = *(_QWORD *)(v56 - 8);
      v58 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1C24FA1B0;
      v60 = v59 + v58;
      v61 = (unsigned int *)MEMORY[0x1E0D6E968];
    }
    else
    {
      if (v30 != *MEMORY[0x1E0D6F548])
      {
        if (v30 == *MEMORY[0x1E0D6F4E8])
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
          v65 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
          v66 = *(_QWORD *)(v65 - 8);
          v67 = *(_QWORD *)(v66 + 72);
          v68 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
          v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = xmmword_1C24FB7E0;
          v70 = v69 + v68;
          v71 = *(void (**)(unint64_t, _QWORD, uint64_t))(v66 + 104);
          v71(v70, *MEMORY[0x1E0D6E928], v65);
          v72 = v70 + v67;
          v73 = (unsigned int *)MEMORY[0x1E0D6E950];
        }
        else
        {
          if (v30 == *MEMORY[0x1E0D6F4F8])
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
            v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
            v57 = *(_QWORD *)(v56 - 8);
            v74 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
            v59 = swift_allocObject();
            *(_OWORD *)(v59 + 16) = xmmword_1C24FA1B0;
            v60 = v59 + v74;
            v61 = (unsigned int *)MEMORY[0x1E0D6E940];
            goto LABEL_35;
          }
          if (v30 != *MEMORY[0x1E0D6F578])
          {
            if (v30 == *MEMORY[0x1E0D6F530])
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
              v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
              v57 = *(_QWORD *)(v56 - 8);
              v79 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
              v59 = swift_allocObject();
              *(_OWORD *)(v59 + 16) = xmmword_1C24FA1B0;
              v60 = v59 + v79;
              v61 = (unsigned int *)MEMORY[0x1E0D6E970];
            }
            else
            {
              if (v30 != *MEMORY[0x1E0D6F510])
              {
                swift_release();
                *(_QWORD *)(v2 + 24) = MEMORY[0x1E0DEE9E8];
                *(_DWORD *)(v2 + 16) = 0;
                (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                return v2;
              }
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
              v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
              v57 = *(_QWORD *)(v56 - 8);
              v80 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
              v59 = swift_allocObject();
              *(_OWORD *)(v59 + 16) = xmmword_1C24FA1B0;
              v60 = v59 + v80;
              v61 = (unsigned int *)MEMORY[0x1E0D6E958];
            }
            goto LABEL_35;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
          v65 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
          v75 = *(_QWORD *)(v65 - 8);
          v76 = *(_QWORD *)(v75 + 72);
          v77 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
          v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = xmmword_1C24FB7E0;
          v78 = v69 + v77;
          v71 = *(void (**)(unint64_t, _QWORD, uint64_t))(v75 + 104);
          v71(v78, *MEMORY[0x1E0D6E998], v65);
          v72 = v78 + v76;
          v73 = (unsigned int *)MEMORY[0x1E0D6E920];
        }
        v71(v72, *v73, v65);
        v63 = specialized Set.init(_nonEmptyArrayLiteral:)(v69);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        goto LABEL_36;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
      v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
      v57 = *(_QWORD *)(v56 - 8);
      v62 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1C24FA1B0;
      v60 = v59 + v62;
      v61 = (unsigned int *)MEMORY[0x1E0D6E988];
    }
LABEL_35:
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v57 + 104))(v60, *v61, v56);
    v63 = specialized Set.init(_nonEmptyArrayLiteral:)(v59);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
LABEL_36:
    swift_release();
    *(_QWORD *)(v2 + 24) = v63;
    v39 = 1065353216;
    goto LABEL_37;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
  v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 72);
  v34 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1C24FE390;
  v36 = v35 + v34;
  v37 = *(void (**)(unint64_t, _QWORD, uint64_t))(v32 + 104);
  v37(v36, *MEMORY[0x1E0D6E988], v31);
  v37(v36 + v33, *MEMORY[0x1E0D6E968], v31);
  v37(v36 + 2 * v33, *MEMORY[0x1E0D6E970], v31);
  v37(v36 + 3 * v33, *MEMORY[0x1E0D6E928], v31);
  v37(v36 + 4 * v33, *MEMORY[0x1E0D6E950], v31);
  v37(v36 + 5 * v33, *MEMORY[0x1E0D6E998], v31);
  v37(v36 + 6 * v33, *MEMORY[0x1E0D6E920], v31);
  v38 = specialized Set.init(_nonEmptyArrayLiteral:)(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_release();
  *(_QWORD *)(v2 + 24) = v38;
  v39 = 1057384038;
LABEL_37:
  *(_DWORD *)(v2 + 16) = v39;
  return v2;
}

uint64_t type metadata accessor for SourcePriorityFeaturiser()
{
  return objc_opt_self();
}

void SourcePriorityFeaturiser.featurise(candidate:rankedSlotIndex:)(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v1;
  v3 = *a1;
  if ((*((_BYTE *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) & 1) != 0)
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
      return;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v2 + 32) != 1
     || (*((_BYTE *)v3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription) & 1) == 0)
    && (specialized Set.contains(_:)((uint64_t)v3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, *(_QWORD *)(v2 + 24)) & 1) != 0)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v6 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xB8))();
    (*(void (**)(float))((*v5 & *v6) + 0x148))(*(float *)(v2 + 16));

  }
}

uint64_t SourcePriorityFeaturiser.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SourcePriorityFeaturiser.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t method lookup function for SourcePriorityFeaturiser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SourcePriorityFeaturiser.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SourcePriorityFeaturiser.__allocating_init(query:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SourcePriorityFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t PommesSearchClient.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v0 = swift_allocObject();
  v1 = specialized static PommesSearchClient.createXPCConnection()();
  if (v1)
  {
    *(_QWORD *)(v0 + 16) = v1;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1C2356000, v3, v4, "Cannot set up connection with PommesSearchService, client initialization fails...", v5, 2u);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

uint64_t PommesSearchClient.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  v2 = specialized static PommesSearchClient.createXPCConnection()();
  if (v2)
  {
    *(_QWORD *)(v0 + 16) = v2;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1C2356000, v4, v5, "Cannot set up connection with PommesSearchService, client initialization fails...", v6, 2u);
      MEMORY[0x1C3BBFF64](v6, -1, -1);
    }

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

uint64_t PommesSearchClient.searchInfiEntity(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch();
}

uint64_t PommesSearchClient.searchInfiEntity(request:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[16];
  v2 = *(void **)(v0[17] + 16);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = PommesSearchClient.searchInfiEntity(request:);
  v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PommesResponse?, @unowned NSError?) -> () with result type PommesResponse;
  v4[3] = &block_descriptor_19;
  v4[4] = v3;
  objc_msgSend(v2, sel_searchInfiEntityWithRequest_completionHandler_, v1, v4);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned PommesResponse?, @unowned NSError?) -> () with result type PommesResponse(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PommesSearchClient.invalidate(cachedResponse:)(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), sel_invalidateWithCachedResponse_, a1);
}

void closure #1 in static PommesSearchClient.createXPCConnection()()
{
  closure #1 in static PommesSearchClient.createXPCConnection()("Connection to PommesSearchService got interrupted");
}

void closure #2 in static PommesSearchClient.createXPCConnection()()
{
  closure #1 in static PommesSearchClient.createXPCConnection()("Connection to PommesSearchService got invalidated");
}

void closure #1 in static PommesSearchClient.createXPCConnection()(const char *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v3, a1, v4, 2u);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }

}

void closure #3 in static PommesSearchClient.createXPCConnection()(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = a1;
  v4 = a1;
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue();
    v8 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, oslog, v5, "Cannot set up connection with PommesSearchService, error: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v7, -1, -1);
    MEMORY[0x1C3BBFF64](v6, -1, -1);

  }
  else
  {

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t PommesSearchClient.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t PommesSearchClient.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PommesXPCSearching.searchInfiEntity(request:) in conformance PommesSearchClient(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for PommesXPCSearching.searchInfiEntity(request:) in conformance PommesSearchClient;
  v5[16] = a1;
  v5[17] = v4;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t specialized static PommesSearchClient.createXPCConnection()()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v19;
  NSObject *aBlock;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB3B38]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000028, 0x80000001C2505190);
  v2 = objc_msgSend(v0, sel_initWithMachServiceName_options_, v1, 0);

  v3 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EF77C260);
  objc_msgSend(v2, sel_setRemoteObjectInterface_, v3);

  v24 = closure #1 in static PommesSearchClient.createXPCConnection();
  v25 = 0;
  v4 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v23 = &block_descriptor_5;
  v5 = _Block_copy(&aBlock);
  objc_msgSend(v2, sel_setInterruptionHandler_, v5);
  _Block_release(v5);
  v24 = closure #2 in static PommesSearchClient.createXPCConnection();
  v25 = 0;
  aBlock = v4;
  v21 = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v23 = &block_descriptor_8;
  v6 = _Block_copy(&aBlock);
  objc_msgSend(v2, sel_setInvalidationHandler_, v6);
  _Block_release(v6);
  objc_msgSend(v2, sel_resume);
  v7 = objc_msgSend(v2, sel_endpoint);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  v9 = v7;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412290;
    aBlock = v9;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v9;

    _os_log_impl(&dword_1C2356000, v10, v11, "PommesSearchService XPC connection established to endpoint: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v15 = v13;
    v4 = MEMORY[0x1E0C809B0];
    MEMORY[0x1C3BBFF64](v15, -1, -1);
    MEMORY[0x1C3BBFF64](v12, -1, -1);
  }
  else
  {

    v10 = v9;
  }

  v24 = closure #3 in static PommesSearchClient.createXPCConnection();
  v25 = 0;
  aBlock = v4;
  v21 = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v23 = &block_descriptor_11_0;
  v16 = _Block_copy(&aBlock);
  v17 = objc_msgSend(v2, sel_remoteObjectProxyWithErrorHandler_, v16);
  _Block_release(v16);
  _bridgeAnyObjectToAny(_:)();

  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchOrchestrating);
  if (swift_dynamicCast())
    return v19;
  else
    return 0;
}

uint64_t dispatch thunk of PommesXPCSearching.searchInfiEntity(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v9(a1, a2, a3);
}

uint64_t type metadata accessor for PommesSearchClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesSearchClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesSearchClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized Sequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t *, id **), uint64_t a4, id *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  id *v11;
  uint64_t v12;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  id *v19;

  v18 = a2;
  v6 = (unint64_t)a5;
  v7 = a1;
  v17 = a1;
  if ((unint64_t)a5 >> 62)
    goto LABEL_14;
  v8 = *(_QWORD *)(((unint64_t)a5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    v14 = v6 & 0xC000000000000001;
    v9 = 4;
    v10 = (id *)v6;
    while (1)
    {
      v11 = v14 ? (id *)MEMORY[0x1C3BBF3F4](v9 - 4, v6) : (id *)*(id *)(v6 + 8 * v9);
      v6 = (unint64_t)v11;
      v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v19 = v11;
      a3(v16, &v17, &v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v5)
      {
        swift_bridgeObjectRelease();

        return v7;
      }

      v7 = v16[0];
      v17 = v16[0];
      v18 = v16[1];
      ++v9;
      v6 = (unint64_t)v10;
      if (v12 == v8)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t AudioPluginProcessor.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  SEL *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  _UNKNOWN **v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  v3 = (SEL *)&unk_1E7C11000;
  v4 = objc_msgSend(v2, sel_sharedPreferences);
  v5 = objc_msgSend(v4, sel_languageCode);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    *(_QWORD *)&v32 = v7;
    *((_QWORD *)&v32 + 1) = v9;
    v37 = 45;
    v38 = 0xE100000000000000;
    v35 = 95;
    v36 = 0xE100000000000000;
    v31 = lazy protocol witness table accessor for type String and conformance String();
    v30 = MEMORY[0x1E0DEA968];
    v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v12 = v11;

    swift_bridgeObjectRelease();
    type metadata accessor for PimsRuntimeLoggingHandler();
    v13 = (_QWORD *)swift_allocObject();
    getPimsRuntimeLogger()();
    outlined init with take of AppDataProviding(&v32, (uint64_t)(v13 + 2));
    v14 = type metadata accessor for MediaSuggestionManager();
    swift_allocObject();
    v15 = MediaSuggestionManager.init()();
    v13[10] = v14;
    v13[11] = &protocol witness table for MediaSuggestionManager;
    v13[7] = v15;
    v16 = one-time initialization token for pommes;
    swift_retain();
    if (v16 != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      *(_QWORD *)&v32 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v18, v19, "AudioPluginProcessor running with %s Locale", v20, 0xCu);
      swift_arrayDestroy();
      v22 = v21;
      v3 = (SEL *)&unk_1E7C11000;
      MEMORY[0x1C3BBFF64](v22, -1, -1);
      MEMORY[0x1C3BBFF64](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v28 = objc_msgSend((id)objc_opt_self(), sel_defaultMediaLibrary, v30, v31, v31, v31);
    v33 = type metadata accessor for MPMediaLibrary();
    v34 = &protocol witness table for MPMediaLibrary;
    *(_QWORD *)&v32 = v28;
    v29 = (*(uint64_t (**)(uint64_t, unint64_t, __int128 *, id, _QWORD *))(v1 + 144))(v10, v12, &v32, objc_msgSend(v2, v3[278]), v13);
    swift_release();
    return v29;
  }
  else
  {

    if (one-time initialization token for pommes != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1C2356000, v24, v25, "AudioPluginProcessor: Unable to obtain locale using en_US", v26, 2u);
      MEMORY[0x1C3BBFF64](v26, -1, -1);
    }

    return AudioPluginProcessor.__allocating_init(locale:)(0x53555F6E65, 0xE500000000000000);
  }
}

uint64_t AudioPluginProcessor.__allocating_init(locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  __int128 v14;
  unint64_t v15;
  _UNKNOWN **v16;

  v3 = v2;
  type metadata accessor for PimsRuntimeLoggingHandler();
  v6 = (_QWORD *)swift_allocObject();
  getPimsRuntimeLogger()();
  outlined init with take of AppDataProviding(&v14, (uint64_t)(v6 + 2));
  v7 = type metadata accessor for MediaSuggestionManager();
  swift_allocObject();
  v8 = MediaSuggestionManager.init()();
  v6[10] = v7;
  v6[11] = &protocol witness table for MediaSuggestionManager;
  v6[7] = v8;
  v9 = (void *)objc_opt_self();
  swift_retain();
  v10 = objc_msgSend(v9, sel_defaultMediaLibrary);
  v15 = type metadata accessor for MPMediaLibrary();
  v16 = &protocol witness table for MPMediaLibrary;
  *(_QWORD *)&v14 = v10;
  v11 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, id, _QWORD *))(v3 + 144))(a1, a2, &v14, v11, v6);
  swift_release();
  return v12;
}

uint64_t AudioPluginProcessor.__allocating_init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  AudioPluginProcessor.init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)(a1, a2, a3, a4, a5);
  return v10;
}

_QWORD *AudioPluginProcessor.init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v19;
  uint64_t v20;

  v6 = (_QWORD *)v5;
  v20 = a5;
  v9 = type metadata accessor for Locale();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v5 + 104) = 1059481190;
  v13 = type metadata accessor for AudioRanker();
  v14 = swift_allocObject();
  Locale.init(identifier:)();
  v15 = objc_allocWithZone(MEMORY[0x1E0D981D0]);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v15, sel_initWithLocale_, isa);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)(v14 + 16) = v17;
  v6[5] = v13;
  v6[6] = &protocol witness table for AudioRanker;
  v6[2] = v14;
  outlined init with take of AppDataProviding(a3, (uint64_t)(v6 + 7));
  v6[12] = a4;
  v6[14] = v20;
  return v6;
}

uint64_t AudioPluginProcessor.__allocating_init(ranker:mediaLibrary:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;

  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 104) = 1059481190;
  outlined init with copy of AppDataProviding(a1, v6 + 16);
  outlined init with copy of AppDataProviding(a2, v6 + 56);
  v7 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)(v6 + 96) = v7;
  *(_QWORD *)(v6 + 112) = a3;
  return v6;
}

uint64_t AudioPluginProcessor.init(ranker:mediaLibrary:pimsRuntimeLoggingHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;

  *(_DWORD *)(v3 + 104) = 1059481190;
  outlined init with copy of AppDataProviding(a1, v3 + 16);
  outlined init with copy of AppDataProviding(a2, v3 + 56);
  v7 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)(v3 + 96) = v7;
  *(_QWORD *)(v3 + 112) = a3;
  return v3;
}

uint64_t AudioPluginProcessor.process(experience:clientResults:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
    v4 = v2;
  else
    v4 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t AudioPluginProcessor.process(with:clientResults:)(void *a1, id *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD);
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)();
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  float v88;
  float v89;
  _QWORD *v90;
  NSObject *v91;
  NSObject *v92;
  os_log_type_t v93;
  int v94;
  uint8_t *v95;
  NSObject *v96;
  char *v97;
  char *v98;
  NSObject *v99;
  float v100;
  float v101;
  uint8_t *v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t result;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  void *v149;
  uint64_t v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD v154[2];
  uint8_t *v155;
  int v156;
  uint64_t v157;
  const char *v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  int v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t v169;
  int *v170;
  char *v171;
  id *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;

  v172 = a2;
  v182 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v163 = (char *)v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for UUID();
  v160 = *(_QWORD *)(v161 - 8);
  MEMORY[0x1E0C80A78](v161);
  v164 = (char *)v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  MEMORY[0x1E0C80A78](v5);
  v173 = (char *)v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientRankingOverrides();
  v167 = *(_QWORD **)(v175 - 8);
  MEMORY[0x1E0C80A78](v175);
  v174 = (char *)v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v178 = *(_QWORD *)(v183 - 8);
  MEMORY[0x1E0C80A78](v183);
  v176 = (char *)v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v9 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180);
  v179 = (char *)v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v154 - v16;
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v23 = MEMORY[0x1E0C80A78](v22);
  v171 = (char *)v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v154 - v25;
  Date.init()();
  v27 = &v26[v22[5]];
  *(_QWORD *)v27 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *((_QWORD *)v27 + 1) = 48;
  v27[16] = 2;
  *(_QWORD *)&v26[v22[6]] = 87;
  v28 = &v26[v22[7]];
  *(_QWORD *)v28 = "process(with:clientResults:)";
  *((_QWORD *)v28 + 1) = 28;
  v28[16] = 2;
  v29 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001ELL);
  v170 = v22;
  v30 = v22[8];
  v31 = (uint64_t)v182;
  v162 = v26;
  v32 = (uint64_t *)&v26[v30];
  *v32 = v29;
  v32[1] = v33;
  AudioExperience.audioUnderstanding.getter();
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.verb.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, *MEMORY[0x1E0D6E108], v11);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v35 = v185;
  v34 = v186;
  v36 = *(void (**)(_QWORD, _QWORD))(v12 + 8);
  v36(v15, v11);
  v36(v17, v11);
  v166 = (_QWORD *)v9;
  if (*(_QWORD *)&v34 == v35)
  {
    v37 = v179;
    AudioExperience.audioClientComponent.getter();
    v38 = v176;
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v37, v180);
    v39 = Apple_Parsec_Siri_V2alpha_ClientSignals.disableClientLibrarySearch.getter();
    (*(void (**)(char *, uint64_t))(v178 + 8))(v38, v183);
    v165 = v39 ^ 1;
  }
  else
  {
    v165 = 0;
  }
  v181 = specialized static AudioQuery.makeNormalQuery(audioExperience:mode:)(v31);
  v40 = dispatch thunk of AudioExperience.serverAudioResults.getter();
  v41 = specialized AudioPluginProcessor.extractServerCandidates(from:)(v40);
  swift_bridgeObjectRelease();
  v42 = (uint64_t)v171;
  if (v41 >> 62)
  {
    swift_bridgeObjectRetain();
    v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v44 = specialized AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)(v181, v43 != 0);
  v46 = v45;
  Date.init()();
  v47 = v170;
  v48 = v42 + v170[5];
  *(_QWORD *)v48 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *(_QWORD *)(v48 + 8) = 48;
  *(_BYTE *)(v48 + 16) = 2;
  *(_QWORD *)(v42 + v47[6]) = 236;
  v49 = v42 + v47[7];
  *(_QWORD *)v49 = "extractClientCandidates(from:resultFilterPred:)";
  *(_QWORD *)(v49 + 8) = 47;
  *(_BYTE *)(v49 + 16) = 2;
  v158 = "process(with:clientResults:)";
  v50 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000038);
  v51 = (uint64_t *)(v42 + v47[8]);
  *v51 = v50;
  v51[1] = v52;
  v53 = (_QWORD *)v184;
  v159 = *(id *)(v184 + 96);
  v54 = objc_msgSend(v159, sel_allowExplicitContent);
  v55 = _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch18AudioItemCandidateCG_SDySSAFG17orderedResultKeys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedjk31_SaySSGtAlM_ANt_AHtXEfU_SayAA18fgH6CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_nTf4nngg_nTm(MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9D8], v172, (uint64_t (*)(id *))closure #1 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:), 0, 0, 0, (void (*)(id, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t (*)(_QWORD, _QWORD), uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy, (void (*)(uint64_t (*)(_QWORD, _QWORD), uint64_t))outlined consume of (@escaping @callee_guaranteed () -> ())?, (void (*)(_QWORD))MEMORY[0x1E0D989C8]);
  v57 = v56;
  swift_bridgeObjectRetain();
  v58 = specialized Sequence.compactMap<A>(_:)(v57, (uint64_t)v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_retain();
  v59 = specialized Sequence.compactMap<A>(_:)(v58, (uint64_t (*)(uint64_t))v44, v46, v53, v54);
  swift_bridgeObjectRelease();
  swift_release();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v42, 1);
  outlined destroy of PommesSearchRequest(v42, type metadata accessor for PerformanceUtil.Ticket);
  swift_release();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v60 = type metadata accessor for Logger();
  v61 = __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v177 = v61;
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  v64 = os_log_type_enabled(v62, v63);
  v157 = 0;
  if (v64)
  {
    v65 = (uint8_t *)swift_slowAlloc();
    *(double *)&v66 = COERCE_DOUBLE(swift_slowAlloc());
    v186 = *(double *)&v66;
    *(_DWORD *)v65 = 136315138;
    v67 = type metadata accessor for AudioItemCandidate(0);
    v68 = MEMORY[0x1C3BBEEC0](v41, v67);
    v185 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, (uint64_t *)&v186);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v62, v63, "AudioPluginProcessor#process serverCandidates: %s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v66, -1, -1);
    MEMORY[0x1C3BBFF64](v65, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v169 = v41;
  swift_bridgeObjectRetain_n();
  v70 = Logger.logObject.getter();
  v71 = static os_log_type_t.debug.getter();
  v72 = os_log_type_enabled(v70, v71);
  v168 = v59;
  if (v72)
  {
    v73 = (uint8_t *)swift_slowAlloc();
    *(double *)&v74 = COERCE_DOUBLE(swift_slowAlloc());
    v186 = *(double *)&v74;
    *(_DWORD *)v73 = 136315138;
    v75 = type metadata accessor for AudioItemCandidate(0);
    v76 = MEMORY[0x1C3BBEEC0](v59, v75);
    v185 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)&v186);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v70, v71, "AudioPluginProcessor#process clientCandidates: %s", v73, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v74, -1, -1);
    MEMORY[0x1C3BBFF64](v73, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v78 = v182;
  v79 = v183;
  v81 = v179;
  v80 = v180;
  v82 = v178;
  v83 = v176;
  v84 = v167;
  v85 = v166;
  AudioExperience.audioClientComponent.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  v86 = (char *)v85[1];
  ((void (*)(char *, uint64_t))v86)(v81, v80);
  v87 = v174;
  Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
  v167 = *(_QWORD **)(v82 + 8);
  ((void (*)(char *, uint64_t))v167)(v83, v79);
  Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTextMatchMinScore.getter();
  v89 = v88;
  v90 = (_QWORD *)v84[1];
  ((void (*)(char *, uint64_t))v90)(v87, v175);
  if (v89 > 0.001)
  {
    v91 = v78;
    v92 = Logger.logObject.getter();
    v93 = static os_log_type_t.debug.getter();
    v94 = v93;
    if (os_log_type_enabled(v92, v93))
    {
      v156 = v94;
      v95 = (uint8_t *)swift_slowAlloc();
      v155 = v95;
      *(_DWORD *)v95 = 134217984;
      v154[1] = v95 + 4;
      v81 = v179;
      v166 = v90;
      v96 = v91;
      AudioExperience.audioClientComponent.getter();
      v97 = v176;
      Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
      v80 = v180;
      ((void (*)(char *, uint64_t))v86)(v81, v180);
      v98 = v174;
      Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
      v79 = v183;
      ((void (*)(char *, uint64_t))v167)(v97, v183);
      Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTextMatchMinScore.getter();
      v99 = v96;
      v90 = v166;
      v101 = v100;
      ((void (*)(char *, uint64_t))v166)(v98, v175);
      v186 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v102 = v155;
      _os_log_impl(&dword_1C2356000, v92, (os_log_type_t)v156, "AudioPluginProcessor setting server override for clientCandidateCombinedTextMatchScoreThreshold to %f", v155, 0xCu);
      MEMORY[0x1C3BBFF64](v102, -1, -1);
    }
    else
    {

      v92 = v91;
      v79 = v183;
      v81 = v179;
      v80 = v180;
      v98 = v174;
      v97 = v176;
    }

    AudioExperience.audioClientComponent.getter();
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
    ((void (*)(char *, uint64_t))v86)(v81, v80);
    Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
    ((void (*)(char *, uint64_t))v167)(v97, v79);
    Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTextMatchMinScore.getter();
    v104 = v103;
    ((void (*)(char *, uint64_t))v90)(v98, v175);
    *(_DWORD *)(v184 + 104) = v104;
  }
  AudioExperience.audioClientComponent.getter();
  v105 = (uint64_t)v173;
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  ((void (*)(char *, uint64_t))v86)(v81, v80);
  v178 = *(_QWORD *)(v178 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v178)(v105, 0, 1, v79);
  v106 = v168;
  v107 = AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(v181, v169, v168, 0xD000000000000019, (void *)0x80000001C25096E0, v105);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v105, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  v186 = MEMORY[0x1E0DEE9D8];
  if (v107 >> 62)
  {
    swift_bridgeObjectRetain();
    v108 = _CocoaArrayWrapper.endIndex.getter();
    if (v108)
      goto LABEL_23;
LABEL_36:
    swift_bridgeObjectRelease();
    v108 = MEMORY[0x1E0DEE9D8];
    goto LABEL_37;
  }
  v108 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v108)
    goto LABEL_36;
LABEL_23:
  if (v108 < 1)
  {
    __break(1u);
    goto LABEL_61;
  }
  v109 = 0;
  v110 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  do
  {
    if ((v107 & 0xC000000000000001) != 0)
      v111 = (_QWORD *)MEMORY[0x1C3BBF3F4](v109, v107);
    else
      v111 = *(id *)(v107 + 8 * v109 + 32);
    v112 = v111;
    v113 = (*(uint64_t (**)(void))((*v110 & *v111) + 0xF8))();

    if (v113)
    {
      MEMORY[0x1C3BBEE78]();
      if (*(_QWORD *)((*(_QWORD *)&v186 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v186 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    ++v109;
  }
  while (v108 != v109);
  swift_bridgeObjectRelease();
  v108 = *(_QWORD *)&v186;
LABEL_37:
  v176 = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v114 = Logger.logObject.getter();
  v115 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v114, v115))
  {
    v116 = (uint8_t *)swift_slowAlloc();
    *(double *)&v117 = COERCE_DOUBLE(swift_slowAlloc());
    v186 = *(double *)&v117;
    *(_DWORD *)v116 = 136315138;
    v118 = type metadata accessor for AudioResult();
    v119 = MEMORY[0x1C3BBEEC0](v108, v118);
    v185 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, (uint64_t *)&v186);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v105 = (uint64_t)v173;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v114, v115, "AudioPluginProcessor#process rankedResults: %s", v116, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v117, -1, -1);
    MEMORY[0x1C3BBFF64](v116, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v121 = v164;
  v122 = (uint64_t)v163;
  v123 = v183;
  v124 = *(_QWORD *)(v184 + 112);
  if (v124)
  {
    type metadata accessor for SiriEnvironment();
    swift_retain();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentRequest.getter();
    swift_release();
    CurrentRequest.executionRequestId.getter();
    swift_release();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    v125 = v160;
    v126 = v161;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v122, 1, v161) == 1)
    {
      UUID.init()();
      outlined destroy of MediaUserStateCenter?(v122, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v121, v122, v126);
    }
    v127 = v179;
    AudioExperience.audioClientComponent.getter();
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
    ((void (*)(char *, uint64_t))v176)(v127, v180);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v178)(v105, 0, 1, v123);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v124 + 112))(v121, v105, v108);
    swift_release();
    outlined destroy of MediaUserStateCenter?(v105, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v121, v126);
  }
  if ((v165 & 1) == 0)
  {
    swift_release();
    v151 = 0.0;
LABEL_64:
    type metadata accessor for PommesAudioPluginResults();
    v152 = swift_allocObject();
    *(_QWORD *)(v152 + 16) = v108;
    *(double *)(v152 + 24) = v151;
    v153 = (uint64_t)v162;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v162, 1);
    outlined destroy of PommesSearchRequest(v153, type metadata accessor for PerformanceUtil.Ticket);
    return v152;
  }
  v128 = specialized static AudioQuery.makePlaylistQuery(audioExperience:)();
  v129 = (uint64_t)v171;
  Date.init()();
  v130 = v170;
  v131 = v129 + v170[5];
  *(_QWORD *)v131 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *(_QWORD *)(v131 + 8) = 48;
  *(_BYTE *)(v131 + 16) = 2;
  *(_QWORD *)(v129 + v130[6]) = 236;
  v132 = v129 + v130[7];
  *(_QWORD *)v132 = "extractClientCandidates(from:resultFilterPred:)";
  *(_QWORD *)(v132 + 8) = 47;
  *(_BYTE *)(v132 + 16) = 2;
  v133 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000038);
  v134 = (uint64_t *)(v129 + v130[8]);
  *v134 = v133;
  v134[1] = v135;
  LOBYTE(v130) = objc_msgSend(v159, sel_allowExplicitContent);
  *(double *)&v136 = MEMORY[0x1E0DEE9D8];
  v137 = _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch12PommesResultCG_SDySSAFG07orderedG4Keys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedgi31_SaySSGtAlM_ANt_AHtXEfU_SayAA06F8K0CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_n04_s21cd145Search20AudioPluginProcessorC23extractClientCandidates33_B1E125C3E2EEE315F2EC4FC45BCA99444from16resultFilterPredSayAA0D13ItemCandidateCGSayAA12fG27CG_SbAA0hdZ0CXEtFSSSgALcfU_Tf1nncn_nTf4nng_n(MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9D8], v172, 0);
  v138 = v105;
  v140 = v139;
  swift_bridgeObjectRetain();
  v141 = specialized Sequence.compactMap<A>(_:)(v140, (uint64_t)v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v142 = (_QWORD *)v184;
  swift_retain();
  v143 = specialized Sequence.compactMap<A>(_:)(v141, v142, (char)v130);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v129, 1);
  outlined destroy of PommesSearchRequest(v129, type metadata accessor for PerformanceUtil.Ticket);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v178)(v138, 1, 1, v183);
  v183 = v128;
  v106 = AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(v128, v136, v143, 0xD000000000000010, (void *)0x80000001C2509700, v138);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v138, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  v186 = *(double *)&v136;
  if (!(v106 >> 62))
  {
    v144 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v144)
      goto LABEL_48;
LABEL_62:
    swift_bridgeObjectRelease();
    v151 = MEMORY[0x1E0DEE9D8];
LABEL_63:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_64;
  }
LABEL_61:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v144 = result;
  if (!result)
    goto LABEL_62;
LABEL_48:
  if (v144 >= 1)
  {
    v146 = 0;
    v147 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v106 & 0xC000000000000001) != 0)
        v148 = (_QWORD *)MEMORY[0x1C3BBF3F4](v146, v106);
      else
        v148 = *(id *)(v106 + 8 * v146 + 32);
      v149 = v148;
      v150 = (*(uint64_t (**)(void))((*v147 & *v148) + 0xF8))();

      if (v150)
      {
        MEMORY[0x1C3BBEE78]();
        if (*(_QWORD *)((*(_QWORD *)&v186 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v186 & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v146;
    }
    while (v144 != v146);
    swift_bridgeObjectRelease();
    v151 = v186;
    goto LABEL_63;
  }
  __break(1u);
  return result;
}

uint64_t AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  int *v13;
  uint64_t v14;
  char *v15;
  Swift::String v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t i;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t (*v45)();
  uint64_t v46;
  BOOL (*v47)(_QWORD **, _QWORD **);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v7 = v6;
  v43 = a6;
  v13 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  v50 = 0xD00000000000001ALL;
  v51 = 0x80000001C2509800;
  v42 = a4;
  v16._countAndFlagsBits = a4;
  v16._object = a5;
  String.append(_:)(v16);
  v17 = v50;
  Date.init()();
  v18 = &v15[v13[5]];
  *(_QWORD *)v18 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *((_QWORD *)v18 + 1) = 48;
  v18[16] = 2;
  *(_QWORD *)&v15[v13[6]] = 150;
  v19 = &v15[v13[7]];
  *(_QWORD *)v19 = "rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)";
  *((_QWORD *)v19 + 1) = 70;
  v19[16] = 2;
  v20 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v17);
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = (uint64_t *)&v15[v13[8]];
  *v23 = v20;
  v23[1] = v22;
  v24 = v7[5];
  v25 = v7[6];
  __swift_project_boxed_opaque_existential_1(v7 + 2, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8))(a1, a3, a2, v43, v24, v25);
  swift_retain();
  v27 = (id *)specialized _ArrayProtocol.filter(_:)(v26);
  swift_bridgeObjectRelease();
  swift_release();
  v45 = closure #3 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:);
  v46 = 0;
  v47 = closure #2 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:);
  v48 = 0;
  v28 = specialized Sequence.reduce<A>(_:_:)(MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9D8], (void (*)(_QWORD *__return_ptr, uint64_t *, id **))partial apply for specialized closure #1 in Collection<>.dedup(favoring:constructKey:), (uint64_t)v44, v27);
  v30 = v29;
  swift_bridgeObjectRetain();
  v31 = specialized Sequence.compactMap<A>(_:)(v30, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v50 = v36;
    *(_DWORD *)v35 = 136315138;
    swift_bridgeObjectRetain();
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, (unint64_t)a5, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v33, v34, "POMMES final ranked %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v36, -1, -1);
    MEMORY[0x1C3BBFF64](v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain_n();
    result = _CocoaArrayWrapper.endIndex.getter();
    v37 = result;
    if (!result)
      goto LABEL_15;
  }
  else
  {
    v37 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (!v37)
      goto LABEL_15;
  }
  if (v37 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v37; ++i)
  {
    if ((v31 & 0xC000000000000001) != 0)
      v40 = (id)MEMORY[0x1C3BBF3F4](i, v31);
    else
      v40 = *(id *)(v31 + 8 * i + 32);
    v41 = v40;
    closure #4 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(i, v40);

  }
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v15, 1);
  outlined destroy of PommesSearchRequest((uint64_t)v15, type metadata accessor for PerformanceUtil.Ticket);
  return v31;
}

BOOL closure #2 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  float v4;

  v2 = *a2;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xA0))();
  return (*(float (**)(void))((*v3 & *v2) + 0xA0))() <= v4;
}

uint64_t Collection<>.dedup(favoring:constructKey:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  Dictionary.init()();
  type metadata accessor for Dictionary();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
  swift_getTupleTypeMetadata2();
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v0 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void closure #4 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  v17 = a2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v18 = v8;
    *(_DWORD *)v7 = 136315394;
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else
    {
      v9 = v8;
      v10 = dispatch thunk of CustomStringConvertible.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v12 = v17;
      v13 = objc_msgSend(v12, sel_description);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v5, v6, "\n%s. %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v9, -1, -1);
      MEMORY[0x1C3BBFF64](v7, -1, -1);

    }
  }
  else
  {

  }
}

uint64_t AudioPluginProcessor.postRankFilter(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  _QWORD *v8;
  float v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v2 = v1;
  if (*((_BYTE *)a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) == 1)
  {
    v4 = swift_bridgeObjectRelease();
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v4 = swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      return 1;
  }
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xB8);
  v8 = (_QWORD *)((uint64_t (*)(uint64_t))v7)(v4);
  v9 = (*(float (**)(void))((*v6 & *v8) + 0x128))();

  if (*(float *)(v2 + 104) <= v9)
    return 1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  v11 = a1;
  swift_retain_n();
  v12 = v11;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v22 = v16;
    *(_DWORD *)v15 = 134218498;
    v17 = (_QWORD *)v7();
    (*(void (**)(void))((*v6 & *v17) + 0x128))();

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v18 = swift_release_n();
    *(_WORD *)(v15 + 22) = 2080;
    v19 = (*(uint64_t (**)(uint64_t))((*v6 & *v12) + 0x100))(v18);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v13, v14, "AudioPluginProcessor : rejecting candidate due to combined text match score minimum threshold : %f < %f : %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v16, -1, -1);
    MEMORY[0x1C3BBFF64](v15, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return 0;
}

uint64_t closure #3 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:)(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xF0))();
}

BOOL closure #1 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)ClientAudioResult.vocabularyResult.getter();
  v1 = dispatch thunk of VocabularyResult.fieldType.getter();

  return v1 != 216;
}

BOOL closure #3 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)ClientAudioResult.vocabularyResult.getter();
  v1 = dispatch thunk of VocabularyResult.fieldType.getter();

  return v1 != 210;
}

uint64_t closure #1 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)()
{
  return PommesResult.resultId.getter();
}

uint64_t specialized closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)@<X0>(void **a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  void *v7;
  uint64_t result;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  void *v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;

  v7 = *a1;
  type metadata accessor for ClientAudioResult();
  result = swift_dynamicCastClass();
  if (result)
  {
    v9 = v7;
    v10 = (void *)ClientAudioResult.vocabularyResult.getter();
    v11 = dispatch thunk of VocabularyResult.fieldType.getter();

    if (v11 != 216)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
      v20 = v9;
      v9 = Logger.logObject.getter();
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v21))
      {
        v22 = swift_slowAlloc();
        v86 = swift_slowAlloc();
        v88 = v86;
        *(_DWORD *)v22 = 136315138;
        v23 = (void *)ClientAudioResult.vocabularyResult.getter();
        v24 = objc_msgSend(v23, sel_description);

        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v27 = v26;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v9, v21, "AudioPluginProcessor : candidate predicate rejecting media item : %s", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        v28 = v86;
LABEL_13:
        MEMORY[0x1C3BBFF64](v28, -1, -1);
        MEMORY[0x1C3BBFF64](v22, -1, -1);

LABEL_33:
        goto LABEL_34;
      }
      goto LABEL_31;
    }
    v12 = (void *)ClientAudioResult.vocabularyResult.getter();
    v13 = VocabularyResult.itemId.getter();
    v15 = v14;

    swift_bridgeObjectRelease();
    v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v16 = v13 & 0xFFFFFFFFFFFFLL;
    if (!v16)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v30, v31))
      {

        goto LABEL_33;
      }
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v88 = v33;
      *(_DWORD *)v32 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C25096B0, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v30, v31, "%s vocabulary itemId is empty", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v33, -1, -1);
      MEMORY[0x1C3BBFF64](v32, -1, -1);

LABEL_34:
      result = 0;
      goto LABEL_35;
    }
    v17 = (void *)ClientAudioResult.vocabularyResult.getter();
    v18 = VocabularyResult.itemType.getter();

    if (v18 != 5)
    {
      if (v18 == 16)
      {
        result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v9, 0);
        goto LABEL_35;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
      v20 = v9;
      v9 = Logger.logObject.getter();
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v53))
      {
        v22 = swift_slowAlloc();
        v54 = swift_slowAlloc();
        v88 = v54;
        *(_DWORD *)v22 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C25096B0, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v22 + 12) = 2080;
        v55 = (void *)ClientAudioResult.vocabularyResult.getter();
        VocabularyResult.itemType.getter();

        v56 = KVItemType.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v9, v53, "%s unsupported vocabulary item type : %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        v28 = v54;
        goto LABEL_13;
      }
LABEL_31:

      goto LABEL_34;
    }
    v87 = a4;
    v34 = a2 + 7;
    v36 = a2[10];
    v35 = a2[11];
    __swift_project_boxed_opaque_existential_1(v34, v36);
    v37 = (void *)ClientAudioResult.vocabularyResult.getter();
    v38 = VocabularyResult.itemId.getter();
    v40 = v39;

    v41 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8))(v38, v40, v36, v35);
    swift_bridgeObjectRelease();
    if (v41)
    {
      if ((v41[32] & 1) != 0)
      {
        a4 = v87;
        if ((v41[35] & 1) != 0)
        {
          if ((a3 & 1) != 0 || (v41[33] & 1) == 0)
          {
            result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v9, (uint64_t)v41);
            goto LABEL_35;
          }
          if (one-time initialization token for pommes != -1)
            swift_once();
          v42 = type metadata accessor for Logger();
          __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
          v9 = v9;
          v43 = Logger.logObject.getter();
          v44 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v43, v44))
          {
            v45 = (uint8_t *)swift_slowAlloc();
            v84 = swift_slowAlloc();
            v88 = v84;
            *(_DWORD *)v45 = 136315138;
            v46 = (void *)ClientAudioResult.vocabularyResult.getter();
            v47 = objc_msgSend(v46, sel_description);

            v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v50 = v49;

            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, &v88);
            a4 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            v51 = "AudioPluginProcessor : rejecting explicit content for %s";
LABEL_49:
            _os_log_impl(&dword_1C2356000, v43, v44, v51, v45, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v84, -1, -1);
            MEMORY[0x1C3BBFF64](v45, -1, -1);

            swift_release();
            goto LABEL_34;
          }
        }
        else
        {
          if (one-time initialization token for pommes != -1)
            swift_once();
          v78 = type metadata accessor for Logger();
          __swift_project_value_buffer(v78, (uint64_t)static Logger.pommes);
          v9 = v9;
          v43 = Logger.logObject.getter();
          v44 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v43, v44))
          {
            v45 = (uint8_t *)swift_slowAlloc();
            v84 = swift_slowAlloc();
            v88 = v84;
            *(_DWORD *)v45 = 136315138;
            v79 = (void *)ClientAudioResult.vocabularyResult.getter();
            v80 = objc_msgSend(v79, sel_description);

            v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v83 = v82;

            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v83, &v88);
            a4 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            v51 = "AudioPluginProcessor : rejecting media item is not playable : %s";
            goto LABEL_49;
          }
        }

        swift_release();
        goto LABEL_33;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v69 = type metadata accessor for Logger();
      __swift_project_value_buffer(v69, (uint64_t)static Logger.pommes);
      v60 = v9;
      v70 = Logger.logObject.getter();
      v71 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc();
        v85 = swift_slowAlloc();
        v88 = v85;
        *(_DWORD *)v72 = 136315138;
        v73 = (void *)ClientAudioResult.vocabularyResult.getter();
        v74 = objc_msgSend(v73, sel_description);

        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v77 = v76;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v70, v71, "AudioPluginProcessor : rejecting media item not in library : %s", v72, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v85, -1, -1);
        MEMORY[0x1C3BBFF64](v72, -1, -1);

        swift_release();
LABEL_52:
        result = 0;
        a4 = v87;
        goto LABEL_35;
      }

      swift_release();
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
      v59 = v9;
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v60, v61))
      {

        goto LABEL_52;
      }
      v62 = (uint8_t *)swift_slowAlloc();
      v63 = swift_slowAlloc();
      v88 = v63;
      *(_DWORD *)v62 = 136315138;
      v64 = (void *)ClientAudioResult.vocabularyResult.getter();
      v65 = objc_msgSend(v64, sel_description);

      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v68 = v67;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v60, v61, "AudioPluginProcessor : media item ranking signals is nil : %s", v62, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v63, -1, -1);
      MEMORY[0x1C3BBFF64](v62, -1, -1);

    }
    goto LABEL_52;
  }
LABEL_35:
  *a4 = result;
  return result;
}

uint64_t closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)@<X0>(void **a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, _QWORD *a3@<X3>, char a4@<W4>, uint64_t *a5@<X8>)
{
  void *v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;

  v9 = *a1;
  type metadata accessor for ClientAudioResult();
  result = swift_dynamicCastClass();
  if (result)
  {
    v11 = result;
    v12 = v9;
    if ((a2(v11) & 1) == 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
      v39 = v12;
      v12 = Logger.logObject.getter();
      v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v40))
      {
        v41 = swift_slowAlloc();
        v89 = swift_slowAlloc();
        v90 = v89;
        *(_DWORD *)v41 = 136315138;
        v42 = (void *)ClientAudioResult.vocabularyResult.getter();
        v43 = objc_msgSend(v42, sel_description);

        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v45 = a5;
        v47 = v46;

        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v47, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a5 = v45;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v12, v40, "AudioPluginProcessor : candidate predicate rejecting media item : %s", (uint8_t *)v41, 0xCu);
        swift_arrayDestroy();
        v48 = v89;
LABEL_21:
        MEMORY[0x1C3BBFF64](v48, -1, -1);
        MEMORY[0x1C3BBFF64](v41, -1, -1);

LABEL_33:
        goto LABEL_34;
      }
      goto LABEL_31;
    }
    v13 = (void *)ClientAudioResult.vocabularyResult.getter();
    v14 = VocabularyResult.itemId.getter();
    v16 = v15;

    swift_bridgeObjectRelease();
    v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v17 = v14 & 0xFFFFFFFFFFFFLL;
    if (!v17)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
      v50 = Logger.logObject.getter();
      v51 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v50, v51))
      {

        goto LABEL_33;
      }
      v52 = (uint8_t *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      v90 = v53;
      *(_DWORD *)v52 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C25096B0, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v50, v51, "%s vocabulary itemId is empty", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v53, -1, -1);
      MEMORY[0x1C3BBFF64](v52, -1, -1);

LABEL_34:
      result = 0;
      goto LABEL_35;
    }
    v18 = (void *)ClientAudioResult.vocabularyResult.getter();
    v19 = VocabularyResult.itemType.getter();

    if (v19 != 16)
    {
      if (v19 == 5)
      {
        v88 = a5;
        v20 = a3 + 7;
        v22 = a3[10];
        v21 = a3[11];
        __swift_project_boxed_opaque_existential_1(v20, v22);
        v23 = (void *)ClientAudioResult.vocabularyResult.getter();
        v24 = VocabularyResult.itemId.getter();
        v26 = v25;

        v27 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 8))(v24, v26, v22, v21);
        swift_bridgeObjectRelease();
        if (v27)
        {
          if ((v27[32] & 1) != 0)
          {
            a5 = v88;
            if (v27[35] == 1)
            {
              if ((a4 & 1) != 0 || (v27[33] & 1) == 0)
              {
                result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v12, (uint64_t)v27);
                goto LABEL_35;
              }
              if (one-time initialization token for pommes != -1)
                swift_once();
              v28 = type metadata accessor for Logger();
              __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
              v12 = v12;
              v29 = Logger.logObject.getter();
              v30 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v29, v30))
              {
                v31 = (uint8_t *)swift_slowAlloc();
                v86 = swift_slowAlloc();
                v90 = v86;
                *(_DWORD *)v31 = 136315138;
                v32 = (void *)ClientAudioResult.vocabularyResult.getter();
                v33 = objc_msgSend(v32, sel_description);

                v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v36 = v35;

                getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                a5 = v88;
                swift_bridgeObjectRelease();
                v37 = "AudioPluginProcessor : rejecting explicit content for %s";
LABEL_49:
                _os_log_impl(&dword_1C2356000, v29, v30, v37, v31, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1C3BBFF64](v86, -1, -1);
                MEMORY[0x1C3BBFF64](v31, -1, -1);

                swift_release();
                goto LABEL_34;
              }
            }
            else
            {
              if (one-time initialization token for pommes != -1)
                swift_once();
              v80 = type metadata accessor for Logger();
              __swift_project_value_buffer(v80, (uint64_t)static Logger.pommes);
              v12 = v12;
              v29 = Logger.logObject.getter();
              v30 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v29, v30))
              {
                v31 = (uint8_t *)swift_slowAlloc();
                v86 = swift_slowAlloc();
                v90 = v86;
                *(_DWORD *)v31 = 136315138;
                v81 = (void *)ClientAudioResult.vocabularyResult.getter();
                v82 = objc_msgSend(v81, sel_description);

                v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v85 = v84;

                getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v85, &v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                a5 = v88;
                swift_bridgeObjectRelease();
                v37 = "AudioPluginProcessor : rejecting media item is not playable : %s";
                goto LABEL_49;
              }
            }

            swift_release();
            goto LABEL_33;
          }
          if (one-time initialization token for pommes != -1)
            swift_once();
          v71 = type metadata accessor for Logger();
          __swift_project_value_buffer(v71, (uint64_t)static Logger.pommes);
          v62 = v12;
          v72 = Logger.logObject.getter();
          v73 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v72, v73))
          {
            v74 = (uint8_t *)swift_slowAlloc();
            v87 = swift_slowAlloc();
            v90 = v87;
            *(_DWORD *)v74 = 136315138;
            v75 = (void *)ClientAudioResult.vocabularyResult.getter();
            v76 = objc_msgSend(v75, sel_description);

            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v79 = v78;

            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, &v90);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C2356000, v72, v73, "AudioPluginProcessor : rejecting media item not in library : %s", v74, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v87, -1, -1);
            MEMORY[0x1C3BBFF64](v74, -1, -1);

            swift_release();
LABEL_52:
            result = 0;
            a5 = v88;
            goto LABEL_35;
          }

          swift_release();
        }
        else
        {
          if (one-time initialization token for pommes != -1)
            swift_once();
          v60 = type metadata accessor for Logger();
          __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
          v61 = v12;
          v62 = Logger.logObject.getter();
          v63 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v62, v63))
          {

            goto LABEL_52;
          }
          v64 = (uint8_t *)swift_slowAlloc();
          v65 = swift_slowAlloc();
          v90 = v65;
          *(_DWORD *)v64 = 136315138;
          v66 = (void *)ClientAudioResult.vocabularyResult.getter();
          v67 = objc_msgSend(v66, sel_description);

          v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v70 = v69;

          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, &v90);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2356000, v62, v63, "AudioPluginProcessor : media item ranking signals is nil : %s", v64, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v65, -1, -1);
          MEMORY[0x1C3BBFF64](v64, -1, -1);

        }
        goto LABEL_52;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
      v39 = v12;
      v12 = Logger.logObject.getter();
      v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v55))
      {
        v41 = swift_slowAlloc();
        v56 = swift_slowAlloc();
        v90 = v56;
        *(_DWORD *)v41 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002FLL, 0x80000001C25096B0, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 12) = 2080;
        v57 = (void *)ClientAudioResult.vocabularyResult.getter();
        VocabularyResult.itemType.getter();

        v58 = KVItemType.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v12, v55, "%s unsupported vocabulary item type : %s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        v48 = v56;
        goto LABEL_21;
      }
LABEL_31:

      goto LABEL_34;
    }
    result = (uint64_t)specialized AudioItemCandidate.__allocating_init(clientResult:mediaItemRankingSignals:)(v12, 0);
  }
LABEL_35:
  *a5 = result;
  return result;
}

uint64_t AudioPluginProcessor.extractClientCandidatesForMacOS(from:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint8_t *v93;
  id v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  void *v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  char v106;
  void *v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[2];
  uint64_t v119;

  v2 = v1;
  v4 = type metadata accessor for CharacterSet();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v110 = (char *)&v107 - v9;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2356000, v12, v13, "AudioPluginProcessor#extractClientCandidatesForMacOS reached ranking beginning", v14, 2u);
    MEMORY[0x1C3BBFF64](v14, -1, -1);
  }

  v15 = (void *)ClientAudioResult.vocabularyResult.getter();
  v16 = dispatch thunk of VocabularyResult.fieldType.getter();

  *((_QWORD *)&v17 + 1) = v16;
  *(_QWORD *)&v17 = v16 - 202;
  v109 = v2;
  v113 = v4;
  switch((unint64_t)(v17 >> 1))
  {
    case 0uLL:
      v18 = 2;
      goto LABEL_11;
    case 1uLL:
      v18 = 4;
      goto LABEL_11;
    case 3uLL:
    case 7uLL:
      v18 = 1;
      goto LABEL_11;
    case 4uLL:
      v18 = 3;
LABEL_11:
      v119 = v18;
      break;
    default:
      v18 = 0;
      v119 = 0;
      break;
  }
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v111 = v5;
  v112 = v8;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v116 = v23;
    *(_DWORD *)v22 = 136315138;
    v118[0] = v18;
    type metadata accessor for MPMediaEntityType(0);
    v24 = String.init<A>(describing:)();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v19, v20, "AudioPluginProcessor#extractClientCandidatesForMacOS entityType: %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v23, -1, -1);
    MEMORY[0x1C3BBFF64](v22, -1, -1);
  }

  v26 = (void *)ClientAudioResult.vocabularyResult.getter();
  v27 = VocabularyResult.itemId.getter();
  v29 = v28;

  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v116 = v33;
    *(_DWORD *)v32 = 136315138;
    swift_bridgeObjectRetain();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v30, v31, "AudioPluginProcessor#extractClientCandidatesForMacOS itemId: %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v33, -1, -1);
    MEMORY[0x1C3BBFF64](v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v116 = v27;
  v117 = v29;
  v118[0] = 0x63697665642F2F3ALL;
  v118[1] = 0xEA00000000002F65;
  lazy protocol witness table accessor for type String and conformance String();
  v34 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
  if (v34[2] <= 1uLL)
  {
    v42 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      v116 = v46;
      *(_DWORD *)v45 = 136315138;
      swift_bridgeObjectRetain();
      v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v29, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v47 = "AudioPluginProcessor#extractClientCandidatesForMacOS itemId is of incorrect format: %s";
LABEL_74:
      _os_log_impl(&dword_1C2356000, v43, v44, v47, v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v46, -1, -1);
      v93 = v45;
LABEL_75:
      MEMORY[0x1C3BBFF64](v93, -1, -1);

      return 0;
    }
LABEL_76:

    swift_bridgeObjectRelease_n();
    return 0;
  }
  v35 = v34[6];
  v36 = v34[7];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  v114 = v11;
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.debug.getter();
  v39 = os_log_type_enabled(v37, v38);
  v107 = a1;
  v108 = v27;
  if (v39)
  {
    v40 = (uint8_t *)swift_slowAlloc();
    v41 = swift_slowAlloc();
    v116 = v41;
    *(_DWORD *)v40 = 136315138;
    swift_bridgeObjectRetain();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v37, v38, "AudioPluginProcessor#extractClientCandidatesForMacOS persistentIDUnTrimmed: %s", v40, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v41, -1, -1);
    MEMORY[0x1C3BBFF64](v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v48 = v111;
  v49 = v112;
  v50 = v110;
  v116 = v35;
  v117 = v36;
  CharacterSet.init(charactersIn:)();
  CharacterSet.inverted.getter();
  v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v52 = v113;
  v51(v50, v113);
  v53 = StringProtocol.trimmingCharacters(in:)();
  v55 = v54;
  v51(v49, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = swift_slowAlloc();
    v116 = v59;
    *(_DWORD *)v58 = 136315138;
    swift_bridgeObjectRetain();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v56, v57, "AudioPluginProcessor#extractClientCandidatesForMacOS persistentIDTrimmed: %s", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v59, -1, -1);
    MEMORY[0x1C3BBFF64](v58, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v61 = HIBYTE(v55) & 0xF;
  v62 = v53 & 0xFFFFFFFFFFFFLL;
  if ((v55 & 0x2000000000000000) != 0)
    v63 = HIBYTE(v55) & 0xF;
  else
    v63 = v53 & 0xFFFFFFFFFFFFLL;
  if (!v63)
  {
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
  if ((v55 & 0x1000000000000000) != 0)
  {
    v65 = (unint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v53, v55, 10);
    v67 = v106;
    goto LABEL_65;
  }
  if ((v55 & 0x2000000000000000) != 0)
  {
    v116 = v53;
    v117 = v55 & 0xFFFFFFFFFFFFFFLL;
    if (v53 == 43)
    {
      if (v61)
      {
        if (v61 != 1 && (BYTE1(v53) - 48) <= 9u)
        {
          v65 = (BYTE1(v53) - 48);
          v72 = v61 - 2;
          if (v72)
          {
            v73 = (unsigned __int8 *)&v116 + 2;
            while (1)
            {
              v74 = *v73 - 48;
              if (v74 > 9)
                goto LABEL_62;
              if (!is_mul_ok(v65, 0xAuLL))
                goto LABEL_62;
              v71 = __CFADD__(10 * v65, v74);
              v65 = 10 * v65 + v74;
              if (v71)
                goto LABEL_62;
              v67 = 0;
              ++v73;
              if (!--v72)
                goto LABEL_65;
            }
          }
          goto LABEL_64;
        }
        goto LABEL_62;
      }
    }
    else
    {
      if (v53 != 45)
      {
        if (v61 && (v53 - 48) <= 9u)
        {
          v65 = (v53 - 48);
          v75 = v61 - 1;
          if (v75)
          {
            v104 = (unsigned __int8 *)&v116 + 1;
            while (1)
            {
              v105 = *v104 - 48;
              if (v105 > 9)
                goto LABEL_62;
              if (!is_mul_ok(v65, 0xAuLL))
                goto LABEL_62;
              v71 = __CFADD__(10 * v65, v105);
              v65 = 10 * v65 + v105;
              if (v71)
                goto LABEL_62;
              v67 = 0;
              ++v104;
              if (!--v75)
                goto LABEL_65;
            }
          }
          goto LABEL_64;
        }
        goto LABEL_62;
      }
      if (v61)
      {
        if (v61 != 1 && (BYTE1(v53) - 48) <= 9u)
        {
          v60 = 0;
          v65 = -(uint64_t)(BYTE1(v53) - 48);
          if (BYTE1(v53) == 48)
          {
            v68 = v61 - 2;
            if (v68)
            {
              v69 = (unsigned __int8 *)&v116 + 2;
              while (1)
              {
                v70 = *v69 - 48;
                if (v70 > 9)
                  goto LABEL_62;
                if (!is_mul_ok(v65, 0xAuLL))
                  goto LABEL_62;
                v71 = 10 * v65 >= v70;
                v65 = 10 * v65 - v70;
                if (!v71)
                  goto LABEL_62;
                v67 = 0;
                ++v69;
                if (!--v68)
                  goto LABEL_65;
              }
            }
LABEL_64:
            v67 = 0;
            goto LABEL_65;
          }
LABEL_92:
          v67 = 1;
          v65 = v60;
          goto LABEL_65;
        }
LABEL_62:
        v65 = 0;
        v67 = 1;
        goto LABEL_65;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_92;
  }
  if ((v53 & 0x1000000000000000) != 0)
    v64 = (unsigned __int8 *)((v55 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v64 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  v65 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v64, v62, 10);
  v67 = v66 & 1;
LABEL_65:
  swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
  {
LABEL_72:
    swift_bridgeObjectRetain();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      v116 = v46;
      *(_DWORD *)v45 = 136315138;
      swift_bridgeObjectRetain();
      v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v29, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v47 = "AudioPluginProcessor#extractClientCandidatesForMacOS failed to extract persistentID from itemId: %s";
      goto LABEL_74;
    }
    goto LABEL_76;
  }
  swift_bridgeObjectRelease();
  v76 = Logger.logObject.getter();
  v77 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v76, v77))
  {
    v78 = (uint8_t *)swift_slowAlloc();
    v79 = swift_slowAlloc();
    v116 = v79;
    *(_DWORD *)v78 = 136315138;
    v118[0] = v65;
    v80 = dispatch thunk of CustomStringConvertible.description.getter();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v76, v77, "AudioPluginProcessor#extractClientCandidatesForMacOS persistentID: %s", v78, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v79, -1, -1);
    MEMORY[0x1C3BBFF64](v78, -1, -1);
  }

  v82 = v107;
  v83 = v109[10];
  v84 = v109[11];
  __swift_project_boxed_opaque_existential_1(v109 + 7, v83);
  swift_beginAccess();
  v85 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v84 + 16))(v65, v119, v83, v84);
  if (!v85)
  {
    v95 = v82;
    v43 = Logger.logObject.getter();
    v96 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v43, v96))
    {

      return 0;
    }
    v97 = (uint8_t *)swift_slowAlloc();
    v98 = swift_slowAlloc();
    v118[0] = v98;
    *(_DWORD *)v97 = 136315138;
    v99 = (void *)ClientAudioResult.vocabularyResult.getter();
    v100 = objc_msgSend(v99, sel_description);

    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v103 = v102;

    v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v103, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v43, v96, "AudioPluginProcessor#extractClientCandidatesForMacOS media item ranking signals is nil : %s", v97, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v98, -1, -1);
    v93 = v97;
    goto LABEL_75;
  }
  v86 = v85;
  v87 = Logger.logObject.getter();
  v88 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v87, v88))
  {
    v89 = (uint8_t *)swift_slowAlloc();
    v90 = swift_slowAlloc();
    v118[0] = v90;
    *(_DWORD *)v89 = 136315138;
    v115 = v65;
    v91 = dispatch thunk of CustomStringConvertible.description.getter();
    v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v87, v88, "AudioPluginProcessor#extractClientCandidates macOS mediaItemRankingSignals: %s", v89, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v90, -1, -1);
    MEMORY[0x1C3BBFF64](v89, -1, -1);
  }

  return v86;
}

uint64_t AudioPluginProcessor.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_release();
  return v0;
}

uint64_t AudioPluginProcessor.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(_QWORD *a1, _QWORD *a2, void *a3, uint64_t (*a4)(id *, id *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  id v37;
  char v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  os_log_type_t v58;
  uint64_t v59;
  os_log_type_t type;
  NSObject *typea;
  uint64_t v62;
  id v63;
  os_log_t log;
  os_log_t loga;
  _QWORD *v66;
  id v67;
  id v68;

  v68 = a3;
  swift_bridgeObjectRetain();
  v8 = PommesResult.resultId.getter();
  v10 = v9;
  if (!a1[2]
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v8, v10),
        v12 = v11,
        swift_bridgeObjectRelease(),
        (v12 & 1) == 0))
  {
    swift_bridgeObjectRetain();
    v31 = a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v67 = a1;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v31, v8, v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2[2] + 1, 1, a2);
    v34 = a2[2];
    v33 = a2[3];
    if (v34 >= v33 >> 1)
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v33 > 1), v34 + 1, 1, a2);
    a2[2] = v34 + 1;
    v35 = &a2[2 * v34];
    v35[4] = v8;
    v35[5] = v10;
    swift_bridgeObjectRelease();
    return a1;
  }
  if (!a4 || !a1[2])
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRetain();
  _sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy((uint64_t)a4);
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
    goto LABEL_17;
  }
  v15 = *(id *)(a1[7] + 8 * v13);
  swift_bridgeObjectRelease();
  v67 = v15;
  if ((a4(&v67, &v68) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    v17 = v67;
    v18 = v68;
    v19 = v17;
    v20 = v18;
    v21 = v19;
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      type = v23;
      v24 = swift_slowAlloc();
      v62 = swift_slowAlloc();
      v66 = (_QWORD *)v62;
      *(_DWORD *)v24 = 136315906;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C2509610, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C25097E0, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2080;
      type metadata accessor for PommesResult();
      v25 = v20;
      v26 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 32) = 2080;
      v28 = v21;
      v29 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v22, type, "%s#%s skip adding element: %s in favor of existing: %s", (uint8_t *)v24, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v62, -1, -1);
      MEMORY[0x1C3BBFF64](v24, -1, -1);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);

    }
    else
    {
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
      swift_bridgeObjectRelease();

    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v37 = a3;
  v38 = swift_isUniquelyReferenced_nonNull_native();
  v66 = a1;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v37, v8, v10, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  v40 = v68;
  v41 = v67;
  v42 = v40;
  v63 = v41;
  log = (os_log_t)v42;
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v58 = v44;
    v45 = swift_slowAlloc();
    v59 = swift_slowAlloc();
    v66 = (_QWORD *)v59;
    *(_DWORD *)v45 = 136315906;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C2509610, (uint64_t *)&v66);
    typea = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C25097E0, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 22) = 2080;
    type metadata accessor for PommesResult();
    v46 = v63;
    v47 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 32) = 2080;
    loga = log;
    v49 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, typea, v58, "%s#%s removing element: %s in favor of other: %s", (uint8_t *)v45, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v59, -1, -1);
    MEMORY[0x1C3BBFF64](v45, -1, -1);

  }
  else
  {

  }
  v66 = a2;
  v51 = specialized Collection<>.firstIndex(of:)(v8, v10, a2);
  if ((v52 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v53 = v51;
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v53);
    swift_bridgeObjectRelease();
  }
  v54 = v66;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
  v56 = v54[2];
  v55 = v54[3];
  if (v56 >= v55 >> 1)
    v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v55 > 1), v56 + 1, 1, v54);
  v54[2] = v56 + 1;
  v57 = &v54[2 * v56];
  v57[4] = v8;
  v57[5] = v10;
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a4);
  swift_bridgeObjectRelease();

  return a1;
}

NSObject *specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(NSObject *a1, _QWORD *a2, void *a3, uint64_t (*a4)(id *), uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD), uint64_t a7, void (*a8)(id, uint64_t, uint64_t, uint64_t), void (*a9)(uint64_t (*)(_QWORD, _QWORD), uint64_t), void (*a10)(uint64_t (*)(_QWORD, _QWORD), uint64_t), void (*a11)(_QWORD))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  char v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  unint64_t v40;
  NSObject *v41;
  id v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  id v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  void (*v67)(uint64_t (*)(_QWORD, _QWORD), uint64_t);
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  os_log_type_t type;
  uint64_t v73;
  uint64_t v74;
  os_log_t log;
  uint64_t (*v76)(_QWORD, _QWORD);
  _QWORD *p_isa;
  NSObject *v79;
  id v80;

  v80 = a3;
  swift_bridgeObjectRetain();
  v17 = a4(&v80);
  if (!v18)
    goto LABEL_19;
  v19 = v17;
  v20 = v18;
  if (!a1[2].isa
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v19, v20),
        v22 = v21,
        swift_bridgeObjectRelease(),
        (v22 & 1) == 0))
  {
    swift_bridgeObjectRetain();
    v42 = a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v79 = a1;
    a8(v42, v19, v20, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2[2] + 1, 1, a2);
    v45 = a2[2];
    v44 = a2[3];
    if (v45 >= v44 >> 1)
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, a2);
    a2[2] = v45 + 1;
    v46 = &a2[2 * v45];
    v46[4] = v19;
    v46[5] = v20;
    swift_bridgeObjectRelease();
    return a1;
  }
  if (!a6 || !a1[2].isa)
  {
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRetain();
  v76 = a6;
  a9(a6, a7);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a10(a6, a7);
    goto LABEL_18;
  }
  v25 = *((id *)a1[7].isa + v23);
  swift_bridgeObjectRelease();
  v79 = v25;
  if ((a6(&v79, &v80) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    v27 = v79;
    v28 = v80;
    v29 = v27;
    v30 = v28;
    v31 = v29;
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc();
      v73 = swift_slowAlloc();
      p_isa = (_QWORD *)v73;
      *(_DWORD *)v34 = 136315906;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C2509610, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C25097E0, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 22) = 2080;
      a11(0);
      v35 = v30;
      v36 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 32) = 2080;
      v38 = v31;
      v39 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v32, v33, "%s#%s skip adding element: %s in favor of existing: %s", (uint8_t *)v34, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v73, -1, -1);
      MEMORY[0x1C3BBFF64](v34, -1, -1);
      a10(a6, a7);

      v41 = v79;
    }
    else
    {
      a10(a6, a7);
      swift_bridgeObjectRelease();

      v41 = v32;
    }

    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v48 = a3;
  v49 = swift_isUniquelyReferenced_nonNull_native();
  p_isa = &a1->isa;
  a8(v48, v19, v20, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
  v51 = v80;
  v52 = v79;
  v53 = v51;
  log = v52;
  v54 = v53;
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc();
    v74 = swift_slowAlloc();
    p_isa = (_QWORD *)v74;
    *(_DWORD *)v57 = 136315906;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C2509610, (uint64_t *)&p_isa);
    type = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C25097E0, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 22) = 2080;
    a11(0);
    v58 = log;
    v59 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 32) = 2080;
    v61 = v54;
    v62 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v55, type, "%s#%s removing element: %s in favor of other: %s", (uint8_t *)v57, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v74, -1, -1);
    MEMORY[0x1C3BBFF64](v57, -1, -1);

  }
  else
  {

  }
  p_isa = a2;
  v64 = specialized Collection<>.firstIndex(of:)(v19, v20, a2);
  if ((v65 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v66 = v64;
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v66);
    swift_bridgeObjectRelease();
    a2 = p_isa;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2[2] + 1, 1, a2);
  v67 = a10;
  v69 = a2[2];
  v68 = a2[3];
  if (v69 >= v68 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, a2);
    v67 = a10;
    a2 = v71;
  }
  a2[2] = v69 + 1;
  v70 = &a2[2 * v69];
  v70[4] = v19;
  v70[5] = v20;
  v67(v76, a7);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t closure #1 in Collection<>.dedup(favoring:constructKey:)@<X0>(uint64_t *a1@<X0>, NSObject *a2@<X1>, uint64_t *a3@<X2>, NSObject *a4@<X3>, uint64_t (*a5)(_QWORD, _QWORD)@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  void (*v40)(char *, uint64_t);
  NSObject *v41;
  NSObject *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t isa;
  NSObject *v46;
  uint64_t result;
  uint64_t v48;
  uint64_t (*v49)(_QWORD, _QWORD);
  NSObject *v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  uint64_t v59;
  void (*v60)(char *, NSObject *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  os_log_t v78;
  NSObject *v79;
  NSObject *v80;
  void (*v81)(NSObject *, NSObject *, uint64_t);
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  int v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  unint64_t v101;
  NSObject *v102;
  NSObject *v103;
  uint64_t *v104;
  void (*v105)(char *, uint64_t);
  uint64_t *v106;
  NSObject *v107;
  uint64_t v108;
  char v109;
  unint64_t v110;
  NSObject *v111;
  unint64_t v112;
  unint64_t v113;
  NSObject *v114;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  os_log_t v126;
  uint64_t v127;
  NSObject *v128;
  uint64_t (*v129)(_QWORD, _QWORD);
  NSObject *v130;
  NSObject *v131;
  uint64_t *v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;

  v132 = a3;
  v127 = a6;
  v129 = a5;
  v131 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v123 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v119 = (char *)&v116 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v120 = (char *)&v116 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v122 = (char *)&v116 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v121 = (char *)&v116 - v21;
  MEMORY[0x1E0C80A78](v20);
  v125 = (char *)&v116 - v22;
  v23 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v126 = (os_log_t)((char *)&v116 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = MEMORY[0x1E0C80A78](v25);
  v128 = ((char *)&v116 - v28);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v116 - v29;
  v31 = *a1;
  v32 = a1[1];
  v136 = v31;
  swift_bridgeObjectRetain();
  v130 = a2;
  v33 = ((uint64_t (*))v132)(a2);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    *a7 = v31;
    a7[1] = (uint64_t)v32;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v131 = v32;
  v132 = a7;
  v134 = v33;
  v135 = v34;
  v35 = v11;
  v36 = v34;
  v37 = v33;
  swift_bridgeObjectRetain();
  v124 = v31;
  MEMORY[0x1C3BBEBD8](&v134, v31, MEMORY[0x1E0DEA968], AssociatedTypeWitness, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v39 = v38(v30, 1, AssociatedTypeWitness);
  v40 = *(void (**)(char *, uint64_t))(v24 + 8);
  v40(v30, v23);
  if (v39 == 1)
  {
    v41 = v128;
    (*(void (**)(NSObject *, NSObject *, uint64_t))(v35 + 16))(v128, v130, AssociatedTypeWitness);
    (*(void (**)(NSObject *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v41, 0, 1, AssociatedTypeWitness);
    v134 = v37;
    v135 = v36;
    type metadata accessor for Dictionary();
    swift_bridgeObjectRetain();
    Dictionary.subscript.setter();
    v42 = v131;
    v43 = v132;
    *v132 = v136;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v42[2].isa + 1, 1, v42);
    isa = (unint64_t)v42[2].isa;
    v44 = (unint64_t)v42[3].isa;
    if (isa >= v44 >> 1)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), isa + 1, 1, v42);
    v42[2].isa = (Class)(isa + 1);
    v46 = &v42[2 * isa];
    v46[4].isa = (Class)v37;
    v46[5].isa = (Class)v36;
    result = swift_bridgeObjectRelease();
    v43[1] = (uint64_t)v42;
    return result;
  }
  v116 = v35;
  v117 = AssociatedTypeWitness;
  v48 = v36;
  v118 = v37;
  v49 = v129;
  v50 = v130;
  if (!v129)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v51 = v23;
  v134 = v118;
  v135 = v48;
  swift_bridgeObjectRetain();
  _sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy((uint64_t)v49);
  v52 = v126;
  v53 = v117;
  MEMORY[0x1C3BBEBD8](&v134, v124, MEMORY[0x1E0DEA968], v117, MEMORY[0x1E0DEA978]);
  swift_bridgeObjectRelease();
  if (v38((char *)v52, 1, v53) == 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v49);
    swift_bridgeObjectRelease();
    v40((char *)v52, v51);
LABEL_13:
    v54 = v131;
    v55 = v132;
    *v132 = v124;
    v55[1] = (uint64_t)v54;
LABEL_14:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v56 = v116;
  v57 = v125;
  (*(void (**)(char *, os_log_t, uint64_t))(v116 + 32))(v125, v52, v53);
  v58 = v50;
  if ((v129(v57, v50) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
    v60 = *(void (**)(char *, NSObject *, uint64_t))(v56 + 16);
    v61 = v121;
    v62 = v117;
    v60(v121, v50, v117);
    v63 = v122;
    v60(v122, v57, v62);
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    v66 = v65;
    if (os_log_type_enabled(v64, v65))
    {
      v67 = swift_slowAlloc();
      LODWORD(v128) = v66;
      v68 = v67;
      v130 = swift_slowAlloc();
      v134 = v130;
      *(_DWORD *)v68 = 136315906;
      v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C2509610, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 12) = 2080;
      v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C25097E0, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 22) = 2080;
      v126 = v64;
      v70 = v120;
      v69 = v121;
      v60(v120, v121, v62);
      v71 = String.init<A>(describing:)();
      v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v73 = *(void (**)(char *, uint64_t))(v116 + 8);
      v73(v69, v62);
      *(_WORD *)(v68 + 32) = 2080;
      v74 = v122;
      v60(v70, v122, v62);
      v75 = String.init<A>(describing:)();
      v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v134);
      v77 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v73(v74, v62);
      v78 = v126;
      _os_log_impl(&dword_1C2356000, v126, (os_log_type_t)v128, "%s#%s skip adding element: %s in favor of existing: %s", (uint8_t *)v68, 0x2Au);
      v79 = v130;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v79, -1, -1);
      MEMORY[0x1C3BBFF64](v68, -1, -1);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v129);

      v73(v125, v62);
      v80 = v131;
    }
    else
    {
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v129);

      v105 = *(void (**)(char *, uint64_t))(v56 + 8);
      v105(v63, v62);
      v105(v61, v62);
      v105(v57, v62);
      swift_bridgeObjectRelease();
      v80 = v131;
      v77 = v124;
    }
    v106 = v132;
    *v132 = v77;
    v106[1] = (uint64_t)v80;
    goto LABEL_14;
  }
  v81 = *(void (**)(NSObject *, NSObject *, uint64_t))(v56 + 16);
  v82 = v128;
  v81(v128, v58, v53);
  (*(void (**)(NSObject *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v82, 0, 1, v53);
  v134 = v118;
  v135 = v48;
  v83 = v48;
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  Dictionary.subscript.setter();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v84 = type metadata accessor for Logger();
  __swift_project_value_buffer(v84, (uint64_t)static Logger.pommes);
  v85 = v119;
  v81(v119, v57, v53);
  v86 = v123;
  v81(v123, v58, v53);
  v87 = Logger.logObject.getter();
  v88 = static os_log_type_t.debug.getter();
  v89 = v88;
  v130 = v87;
  if (os_log_type_enabled(v87, v88))
  {
    v90 = (void (*)(char *, char *, uint64_t))v81;
    v91 = swift_slowAlloc();
    v128 = swift_slowAlloc();
    v134 = v128;
    *(_DWORD *)v91 = 136315906;
    v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x80000001C2509610, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v91 + 12) = 2080;
    v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001C25097E0, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v91 + 22) = 2080;
    v124 = v91 + 24;
    v92 = v85;
    v93 = v120;
    v90(v120, v92, v53);
    v94 = String.init<A>(describing:)();
    LODWORD(v126) = v89;
    v95 = v53;
    v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v96, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v97 = v90;
    v98 = *(void (**)(char *, uint64_t))(v116 + 8);
    v98(v92, v95);
    *(_WORD *)(v91 + 32) = 2080;
    v99 = v123;
    v97(v93, v123, v95);
    v100 = String.init<A>(describing:)();
    v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v53 = v95;
    swift_bridgeObjectRelease();
    v98(v99, v95);
    v102 = v130;
    _os_log_impl(&dword_1C2356000, v130, (os_log_type_t)v126, "%s#%s removing element: %s in favor of other: %s", (uint8_t *)v91, 0x2Au);
    v103 = v128;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v103, -1, -1);
    MEMORY[0x1C3BBFF64](v91, -1, -1);

  }
  else
  {
    v98 = *(void (**)(char *, uint64_t))(v116 + 8);
    v98(v85, v53);
    v98(v86, v53);

  }
  v104 = v132;
  v107 = v131;
  v134 = v131;
  v108 = specialized Collection<>.firstIndex(of:)((uint64_t)v118, v83, v131);
  if ((v109 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v110 = v108;
    swift_bridgeObjectRetain();
    specialized Array.remove(at:)(v110);
    swift_bridgeObjectRelease();
    v107 = v134;
  }
  swift_bridgeObjectRetain();
  v111 = v107;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v107[2].isa + 1, 1, v107);
  v113 = (unint64_t)v111[2].isa;
  v112 = (unint64_t)v111[3].isa;
  if (v113 >= v112 >> 1)
    v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v112 > 1), v113 + 1, 1, v111);
  v111[2].isa = (Class)(v113 + 1);
  v114 = &v111[2 * v113];
  v114[4].isa = (Class)v118;
  v114[5].isa = (Class)v83;
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v129);
  swift_bridgeObjectRelease();
  v134 = v111;
  result = ((uint64_t (*)(char *, uint64_t))v98)(v125, v53);
  v115 = v134;
  *v104 = v136;
  v104[1] = (uint64_t)v115;
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  v9 = 0;
  v10 = a3 + 7;
  v11 = 1;
  while (1)
  {
    if (v3 == v11)
      return 0;
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2)
      break;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0)
      return result;
  }
  return v9;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in Collection<>.dedup(favoring:constructKey:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  _QWORD v6[2];

  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x1C3BBEBD8](v6, a2, MEMORY[0x1E0DEA968], AssociatedTypeWitness, MEMORY[0x1E0DEA978]);
  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for MPMediaLibrary()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MPMediaLibrary;
  if (!lazy cache variable for type metadata for MPMediaLibrary)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MPMediaLibrary);
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1C3BBEDAC](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

double implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(float (*a1)(void))
{
  return a1();
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, int64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = String.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1C3BBECF8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1C3BBECF8);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1C3BBECF8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6E128], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb);
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (_QWORD *)MEMORY[0x1C3BBF3F4](v3, a1);
LABEL_9:
        v6 = v5;
        v7 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        if ((AudioPluginProcessor.postRankFilter(_:)(v5) & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v4 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v3;
        if (v7 == v2)
          return v9;
      }
      if (v3 < *(_QWORD *)(v4 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

_QWORD *_sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch12PommesResultCG_SDySSAFG07orderedG4Keys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedgi31_SaySSGtAlM_ANt_AHtXEfU_SayAA06F8K0CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_n04_s21cd145Search20AudioPluginProcessorC23extractClientCandidates33_B1E125C3E2EEE315F2EC4FC45BCA9944LL4from16resultFilterPredSayAA0D13ItemCandidateCGSayAA12fG27CG_SbAA0hdZ0CXEtFSSSgALcfU_Tf1nncn_nTf4nng_n(_QWORD *a1, _QWORD *a2, id *a3, uint64_t (*a4)(id *, id *))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  id *v17;
  unint64_t v18;

  v5 = (unint64_t)a3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)(((unint64_t)a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    v17 = (id *)v5;
    v18 = v5 & 0xC000000000000001;
    v9 = 4;
    while (1)
    {
      v10 = (_QWORD *)(v9 - 4);
      v11 = v18 ? (id *)MEMORY[0x1C3BBF3F4](v9 - 4, v5) : (id *)*(id *)(v5 + 8 * v9);
      v5 = (unint64_t)v11;
      v12 = v9 - 3;
      if (__OFADD__(v10, 1))
        break;
      v13 = specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(a1, a2, v11, a4);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v10;
      }
      v10 = v13;
      v15 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      ++v9;
      a2 = v15;
      a1 = v10;
      v5 = (unint64_t)v17;
      if (v12 == v8)
        goto LABEL_15;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v10 = a1;
LABEL_15:
  swift_bridgeObjectRelease();
  return v10;
}

NSObject *_sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch18AudioItemCandidateCG_SDySSAFG17orderedResultKeys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedjk31_SaySSGtAlM_ANt_AHtXEfU_SayAA18fgH6CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_nTf4nngg_nTm(NSObject *a1, _QWORD *a2, id *a3, uint64_t (*a4)(id *), uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD), uint64_t a7, void (*a8)(id, uint64_t, uint64_t, uint64_t), void (*a9)(uint64_t (*)(_QWORD, _QWORD), uint64_t), void (*a10)(uint64_t (*)(_QWORD, _QWORD), uint64_t), void (*a11)(_QWORD))
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id *v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  id *v24;
  unint64_t v25;

  v12 = (unint64_t)a3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_13;
  v15 = *(_QWORD *)(((unint64_t)a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v15; v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    v25 = v12 & 0xC000000000000001;
    v16 = 4;
    v24 = (id *)v12;
    while (1)
    {
      v17 = (v16 - 4);
      v18 = v25 ? (id *)MEMORY[0x1C3BBF3F4](v16 - 4, v12) : (id *)*(id *)(v12 + 8 * v16);
      v12 = (unint64_t)v18;
      v19 = v16 - 3;
      if (__OFADD__(v17, 1))
        break;
      v20 = specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(a1, a2, v18, a4, a5, a6, a7, a8, a9, a10, a11);
      if (v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v17;
      }
      v17 = v20;
      v22 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      ++v16;
      a2 = v22;
      a1 = v17;
      v12 = (unint64_t)v24;
      if (v19 == v15)
        goto LABEL_15;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v17 = a1;
LABEL_15:
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  LOBYTE(v4) = a3;
  v15 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v7 = 4;
    v8 = v4 & 1;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C3BBF3F4](v7 - 4, a1) : *(id *)(a1 + 8 * v7);
      v4 = v9;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v14 = v9;
      specialized closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)(&v14, a2, v8, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v13)
      {
        MEMORY[0x1C3BBEE78]();
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v7;
      if (v10 == v6)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  LOBYTE(v6) = a5;
  v18 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_17;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    v9 = 4;
    v10 = v6 & 1;
    while (1)
    {
      v11 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C3BBF3F4](v9 - 4, a1) : *(id *)(a1 + 8 * v9);
      v6 = v11;
      v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v17 = v11;
      closure #2 in AudioPluginProcessor.extractClientCandidates(from:resultFilterPred:)(&v17, a2, a4, v10, &v16);
      if (v5)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v16)
      {
        MEMORY[0x1C3BBEE78]();
        if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v9;
      if (v12 == v8)
      {
        swift_bridgeObjectRelease();
        return v18;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized AudioPluginProcessor.extractServerCandidates(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  objc_class *v34;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  objc_super v69;
  id *v70;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v60 = *(_QWORD *)(v2 - 8);
  v61 = v2;
  MEMORY[0x1E0C80A78](v2);
  v59 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for AudioItemCandidate.BackingItem(0);
  MEMORY[0x1E0C80A78](v58);
  v57 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v5 = *(_QWORD *)(v56 - 8);
  v6 = MEMORY[0x1E0C80A78](v56);
  v55 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v68 = (char *)&v50 - v8;
  v9 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  v12 = &v11[v9[5]];
  *(_QWORD *)v12 = "SiriInformationSearch/AudioPluginProcessor.swift";
  *((_QWORD *)v12 + 1) = 48;
  v12[16] = 2;
  *(_QWORD *)&v11[v9[6]] = 190;
  v13 = &v11[v9[7]];
  *(_QWORD *)v13 = "extractServerCandidates(from:)";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v14 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003DLL);
  v15 = (uint64_t *)&v11[v9[8]];
  *v15 = v14;
  v15[1] = v16;
  v17 = (id *)MEMORY[0x1E0DEE9D8];
  v70 = (id *)MEMORY[0x1E0DEE9D8];
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v51 = v11;
    v19 = (char *)(a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
    v53 = *(_QWORD *)(v5 + 72);
    v54 = v5;
    v52 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v50 = a1;
    swift_bridgeObjectRetain();
    v20 = v55;
    v21 = v56;
    v22 = (uint64_t)v57;
    v23 = v59;
    do
    {
      v67 = v18;
      v24 = v68;
      v25 = v52;
      v52(v68, v19, v21);
      v25(v20, v24, v21);
      v25((char *)v22, v20, v21);
      swift_storeEnumTagMultiPayload();
      v26 = Apple_Parsec_Siri_V2alpha_AudioItem.identifier.getter();
      v65 = v27;
      v66 = v26;
      v28 = Apple_Parsec_Siri_V2alpha_AudioItem.title.getter();
      v63 = v29;
      v64 = v28;
      v30 = Apple_Parsec_Siri_V2alpha_AudioItem.artist.getter();
      v32 = v31;
      Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
      v62 = Apple_Parsec_Siri_V2alpha_AudioItem.requiresSubscription.getter();
      v33 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudioItemCandidate.Features()), sel_init);
      v34 = (objc_class *)type metadata accessor for AudioItemCandidate(0);
      v35 = objc_allocWithZone(v34);
      *(_DWORD *)&v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_score] = 1065353216;
      outlined init with copy of AudioItemCandidate.BackingItem(v22, (uint64_t)&v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_backingItem]);
      v36 = (uint64_t *)&v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_identifier];
      v37 = v65;
      *v36 = v66;
      v36[1] = v37;
      v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source] = 0;
      v38 = (uint64_t *)&v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_title];
      v39 = v63;
      *v38 = v64;
      v38[1] = v39;
      v40 = (uint64_t *)&v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_artist];
      *v40 = v30;
      v40[1] = v32;
      v42 = v60;
      v41 = v61;
      (*(void (**)(_BYTE *, char *, uint64_t))(v60 + 16))(&v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType], v23, v61);
      v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_requiresSubscription] = v62 & 1;
      v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded] = 0;
      *(_QWORD *)&v35[OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_features] = v33;
      v69.receiver = v35;
      v69.super_class = v34;
      objc_msgSendSuper2(&v69, sel_init);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v41);
      outlined destroy of PommesSearchRequest(v22, type metadata accessor for AudioItemCandidate.BackingItem);
      v43 = *(void (**)(char *, uint64_t))(v54 + 8);
      v43(v20, v21);
      v44 = ((uint64_t (*)(char *, uint64_t))v43)(v68, v21);
      MEMORY[0x1C3BBEE78](v44);
      if (*(_QWORD *)(((unint64_t)v70 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v70 & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v19 += v53;
      v18 = v67 - 1;
    }
    while (v67 != 1);
    swift_bridgeObjectRelease();
    v17 = v70;
    v11 = v51;
  }
  v45 = _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSay21SiriInformationSearch18AudioItemCandidateCG_SDySSAFG17orderedResultKeys_SaySSGtTg506_sSl21cde47Si5IndexRtzrlE5dedup8favoring12constructKeySay7b41QzGSbAH_AHtcSg_SSSgAHctFSDySSAHG17orderedjk31_SaySSGtAlM_ANt_AHtXEfU_SayAA18fgH6CG_TG5xSSSgRi_zRi0_zlyAFIsegno_xq_SbRi_zRi0_zRi__Ri0__r0_lyA2FIsegnnd_SgTf1ncn_nTf4nngg_nTm(MEMORY[0x1E0DEE9E0], MEMORY[0x1E0DEE9D8], v17, (uint64_t (*)(id *))closure #3 in AudioPluginProcessor.rank(query:serverCandidates:clientCandidates:groupName:clientSignals:), 0, 0, 0, (void (*)(id, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t (*)(_QWORD, _QWORD), uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOy, (void (*)(uint64_t (*)(_QWORD, _QWORD), uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOe, (void (*)(_QWORD))type metadata accessor for AudioItemCandidate);
  v47 = v46;
  swift_bridgeObjectRetain();
  v48 = specialized Sequence.compactMap<A>(_:)(v47, (uint64_t)v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v11, 1);
  outlined destroy of PommesSearchRequest((uint64_t)v11, type metadata accessor for PerformanceUtil.Ticket);
  return v48;
}

uint64_t (*specialized AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:)(uint64_t a1, char a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  os_log_type_t v19;
  _QWORD v21[2];

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D6E108], v4);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioVerb and conformance Apple_Parsec_Siri_V2alpha_AudioVerb();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v9 = v21[0];
  v8 = v21[1];
  v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8 == v9)
  {
    if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) & 1) != 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v12, v13))
      {
        v15 = getEnumTag for AudioUsoIntent.IterationOptions;
        goto LABEL_22;
      }
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1C2356000, v12, v13, "AudioPluginProcessor : remove all candidates from library", v14, 2u);
      v15 = getEnumTag for AudioUsoIntent.IterationOptions;
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
      v12 = Logger.logObject.getter();
      v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v12, v19))
      {
        v15 = closure #1 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
        goto LABEL_22;
      }
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1C2356000, v12, v19, "AudioPluginProcessor : remove playlists candidates from library", v14, 2u);
      v15 = closure #1 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
    }
LABEL_18:
    MEMORY[0x1C3BBFF64](v14, -1, -1);
LABEL_22:

    return (uint64_t (*)())v15;
  }
  if ((a2 & 1) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(v10) & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    v12 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v17))
    {
      v15 = closure #3 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
      goto LABEL_22;
    }
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2356000, v12, v17, "AudioPluginProcessor : remove genre candidates from library", v14, 2u);
    v15 = closure #3 in AudioPluginProcessor.createClientResultFilterPred(for:haveCatalogCandidates:);
    goto LABEL_18;
  }
  return protocol witness for static Equatable.== infix(_:_:) in conformance AudioUsoIntent.IterationOptions;
}

uint64_t partial apply for closure #1 in Collection<>.dedup(favoring:constructKey:)@<X0>(uint64_t *a1@<X0>, NSObject *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in Collection<>.dedup(favoring:constructKey:)(a1, a2, *(uint64_t **)(v3 + 32), *(NSObject **)(v3 + 40), *(uint64_t (**)(_QWORD, _QWORD))(v3 + 48), *(_QWORD *)(v3 + 56), a3);
}

uint64_t partial apply for closure #2 in Collection<>.dedup(favoring:constructKey:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #2 in Collection<>.dedup(favoring:constructKey:)(a1, *(_QWORD *)(v1 + 32));
}

uint64_t type metadata accessor for AudioPluginProcessor()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioPluginProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioPluginProcessor.__allocating_init(locale:mediaLibrary:preferences:pimsRuntimeLoggingHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AudioPluginProcessor.__allocating_init(ranker:mediaLibrary:pimsRuntimeLoggingHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AudioPluginProcessor.process(experience:clientResults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AudioPluginProcessor.process(with:clientResults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of AudioPluginProcessor.extractClientCandidatesForMacOS(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t _sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch12PommesResultCACIsegnnd_SgWOy(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

NSObject *partial apply for specialized closure #1 in Collection<>.dedup(favoring:constructKey:)@<X0>(uint64_t a1@<X0>, void **a2@<X1>, NSObject **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *result;
  NSObject *v7;

  result = specialized closure #1 in Collection<>.dedup(favoring:constructKey:)(*(NSObject **)a1, *(_QWORD **)(a1 + 8), *a2, *(uint64_t (**)(id *))(v3 + 16), *(_QWORD *)(v3 + 24), *(uint64_t (**)(_QWORD, _QWORD))(v3 + 32), *(_QWORD *)(v3 + 40), (void (*)(id, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t (*)(_QWORD, _QWORD), uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOy, (void (*)(uint64_t (*)(_QWORD, _QWORD), uint64_t))_sxq_SbRi_zRi0_zRi__Ri0__r0_ly21SiriInformationSearch18AudioItemCandidateCACIsegnnd_SgWOe, (void (*)(_QWORD))type metadata accessor for AudioItemCandidate);
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }
  return result;
}

id PommesResourceDownloadInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void PommesResourceDownloadInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

void (*PommesResourceDownloadInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = PommesResourceDownloadInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t PommesResourceDownloadInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesResourceDownloadInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t PommesResourceDownloadInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void PommesResourceDownloadInstrumentationUtil.logStartOfPommesResourceDownload(requestId:pommesCandidateId:resourceType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *oslog;

  v5 = v4;
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A320]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A338]), sel_init);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setResourceType_, a4);
        objc_msgSend(v10, sel_setStartedOrChanged_, v12);
        objc_msgSend(v8, sel_setResourceDownloadContext_, v10);
        v13 = (void *)objc_opt_self();
        swift_retain();
        v14 = objc_msgSend(v13, sel_processInfo);
        v15 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v15 & 1) != 0)
          v16 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 96))();
        else
          v16 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v18, "Unable to log start of POMMES resource download", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

}

void PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)(a1, a2, a3, a4, (Class *)0x1E0D9A328, (SEL *)&selRef_setResourceDownloadSizeInBytes_, (SEL *)&selRef_setEnded_, "Unable to log end of POMMES resource download");
}

void PommesResourceDownloadInstrumentationUtil.logFailedPommesResourceDownload(requestId:pommesCandidateId:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)(a1, a2, a3, a4, (Class *)0x1E0D9A330, (SEL *)&selRef_setErrorCode_, (SEL *)&selRef_setFailed_, "Unable to log failed POMMES resource download");
}

void PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, Class *a5, SEL *a6, SEL *a7, const char *a8)
{
  uint64_t v8;
  uint64_t v13;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  char v23;
  id v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  NSObject *oslog;

  v13 = v8;
  v15 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A320]), sel_init);
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
      if (v19)
      {
        if ((a4 & 0x8000000000000000) != 0 || HIDWORD(a4))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        else
        {
          v20 = v19;
          objc_msgSend(v19, *a6, a4);
          objc_msgSend(v18, *a7, v20);
          objc_msgSend(v16, sel_setResourceDownloadContext_, v18);
          v21 = (void *)objc_opt_self();
          swift_retain();
          v22 = objc_msgSend(v21, sel_processInfo);
          v23 = NSProcessInfo.isRunningUnitTests.getter();

          if ((v23 & 1) != 0)
            v24 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 96))();
          else
            v24 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
          v28 = v24;
          swift_release();
          objc_msgSend(v28, sel_emitMessage_, v16);

          swift_unknownObjectRelease();
        }
        return;
      }

    }
    else
    {
      v18 = v16;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v26, a8, v27, 2u);
    MEMORY[0x1C3BBFF64](v27, -1, -1);
  }

}

uint64_t PommesResourceDownloadInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PommesResourceDownloadInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C24C3C8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24C3CBC(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PommesResourceDownloadInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesResourceDownloadInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.mockStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.mockStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.logStartOfPommesResourceDownload(requestId:pommesCandidateId:resourceType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.logEndOfPommesResourceDownload(requestId:pommesCandidateId:downloadSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PommesResourceDownloadInstrumentationUtil.logFailedPommesResourceDownload(requestId:pommesCandidateId:errorCode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t SagePegasusProxy.__allocating_init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;

  v27 = a5;
  v28 = a6;
  v25 = a3;
  v26 = a4;
  v10 = swift_allocObject();
  v12 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = *(_QWORD *)(a7 + 24);
  v18 = *(_QWORD *)(a7 + 32);
  v19 = __swift_mutable_project_boxed_opaque_existential_1(a7, v17);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  v23 = specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(a1, (uint64_t)v15, v25, v26, v27, v28, (uint64_t)v21, v10, v12, v17, v11, v18);
  __swift_destroy_boxed_opaque_existential_1(a7);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v23;
}

uint64_t key path setter for SagePegasusProxy.client : SagePegasusProxy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 72) = v2;
  swift_retain();
  return swift_release();
}

uint64_t SagePegasusProxy.client.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t SagePegasusProxy.locationManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AppDataProviding(v1 + 80, a1);
}

uint64_t SagePegasusProxy.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t SagePegasusProxy.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t SagePegasusProxy.dataProviderManager.getter()
{
  return swift_retain();
}

uint64_t SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a6;
  v25 = a4;
  v26 = a5;
  v12 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = *(_QWORD *)(a7 + 24);
  v18 = *(_QWORD *)(a7 + 32);
  v19 = __swift_mutable_project_boxed_opaque_existential_1(a7, v17);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  v23 = specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(a1, (uint64_t)v15, a3, v25, v26, v27, (uint64_t)v21, v28, v12, v17, v11, v18);
  __swift_destroy_boxed_opaque_existential_1(a7);
  __swift_destroy_boxed_opaque_existential_1(a2);
  return v23;
}

uint64_t SagePegasusProxy.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 136) + 272))();
}

Swift::Void __swiftcall SagePegasusProxy.prepareForSearchAtSessionStart()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  swift_bridgeObjectRelease();
  Date.init()();
  v5 = &v4[v2[5]];
  *(_QWORD *)v5 = "SiriInformationSearch/SagePegasusProxy.swift";
  *((_QWORD *)v5 + 1) = 44;
  v5[16] = 2;
  *(_QWORD *)&v4[v2[6]] = 62;
  v6 = &v4[v2[7]];
  *(_QWORD *)v6 = "prepareForSearchAtSessionStart()";
  *((_QWORD *)v6 + 1) = 32;
  v6[16] = 2;
  v7 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000026);
  v8 = (uint64_t *)&v4[v2[8]];
  *v8 = v7;
  v8[1] = v9;
  (*(void (**)(void))(**(_QWORD **)(v1 + 136) + 296))();
  if (one-time initialization token for shared != -1)
    swift_once();
  v10 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v4, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 248))(v10);
  dispatch thunk of BasePegasusProxy.warmUpConnectionIfNeeded()();
  swift_release();
  outlined destroy of PommesSearchRequest((uint64_t)v4, type metadata accessor for PerformanceUtil.Ticket);
}

Swift::Void __swiftcall SagePegasusProxy.prepareForSearchAtRequestStart(requestId:location:)(Swift::String requestId, CLLocation_optional location)
{
  _QWORD *v2;
  _QWORD *v3;
  Class isa;
  void *v5;
  objc_class *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  objc_class *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  isa = location.value.super.isa;
  v5 = (void *)v2[25];
  v2[25] = location.value.super.isa;
  v6 = location.value.super.isa;

  if (isa)
  {
    v7 = one-time initialization token for sage;
    v8 = v6;
    if (v7 != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.sage);
    v10 = v8;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      *(_DWORD *)v13 = 134218240;
      -[objc_class coordinate](v10, sel_coordinate);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2048;
      -[objc_class coordinate](v10, sel_coordinate);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2356000, v11, v12, "Received location: (%f, %f) from search tool", (uint8_t *)v13, 0x16u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);

    }
    else
    {

    }
    v14 = v3 + 10;
    v16 = v3[13];
    v15 = v3[14];
    __swift_project_boxed_opaque_existential_1(v14, v16);
    (*(void (**)(objc_class *, uint64_t, uint64_t))(v15 + 16))(v10, v16, v15);

  }
}

Swift::Void __swiftcall SagePegasusProxy.tearDown()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  (*(void (**)(void))(**(_QWORD **)(v0 + 136) + 312))();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 144) = xmmword_1C24FEDE0;
  outlined consume of Data?(v1, v2);
}

uint64_t SagePegasusProxy.search(searchRequest:clientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Context;
  uint64_t v9;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v5 = type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v4[17] = v6;
  v4[18] = *(_QWORD *)(v6 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v4[21] = v7;
  v4[22] = *(_QWORD *)(v7 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v4[26] = Context;
  v4[27] = *(_QWORD *)(Context - 8);
  v4[28] = swift_task_alloc();
  v9 = type metadata accessor for Date();
  v4[29] = v9;
  v4[30] = *(_QWORD *)(v9 - 8);
  v4[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SagePegasusProxy.search(searchRequest:clientEntities:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v29)(_QWORD, _QWORD);

  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = static PerformanceUtil.shared;
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)v5 + 200))(0xD00000000000003ALL, 0x80000001C2508A20, 0, v1, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 82, "search(searchRequest:clientEntities:)", 37, 2, partial apply for closure #1 in SagePegasusProxy.search(searchRequest:clientEntities:), v4, MEMORY[0x1E0DEE9C0] + 8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((dispatch thunk of NetworkAvailability.isAvailable.getter() & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD **)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = (void *)v7[25];
    v10 = v7[17];
    v11 = v9;
    static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)(v8, v9, v10, v6);

    (*(void (**)(uint64_t, uint64_t))(*v7 + 368))(v8, v6);
    v17 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 176);
    v19 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 88);
    v22 = *(_QWORD *)(v0 + 96);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
    *(_QWORD *)(v0 + 256) = v24;
    v24(v18, v17, v21);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 88))(v23, v18);
    v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    *(_QWORD *)(v0 + 264) = v25;
    v25(v18, v21);
    v26 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v24)(v18, v19, v21);
    *(_QWORD *)(v0 + 272) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 248))(v26);
    v29 = (uint64_t (*)(_QWORD, _QWORD))((int)*MEMORY[0x1E0D708A0] + MEMORY[0x1E0D708A0]);
    v27 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v27;
    *v27 = v0;
    v27[1] = SagePegasusProxy.search(searchRequest:clientEntities:);
    return v29(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 200));
  }
  else
  {
    if (one-time initialization token for sage != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.sage);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C2356000, v13, v14, "Network is unavailable, unable to complete search", v15, 2u);
      MEMORY[0x1C3BBFF64](v15, -1, -1);
    }

    lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
    swift_allocError();
    *v16 = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104);
  v5(v2, *MEMORY[0x1E0D6E248], v3);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v2, v3);
  v8(v1, v3);
  if (v6 == v7)
  {
    if (one-time initialization token for sage != -1)
      swift_once();
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 136);
    v12 = *(_QWORD *)(v0 + 144);
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.sage);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v10, v11);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    v16 = os_log_type_enabled(v14, v15);
    v18 = *(_QWORD *)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 208);
    v21 = *(_QWORD *)(v0 + 144);
    v20 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 136);
    if (v16)
    {
      v49 = *(_QWORD *)(v0 + 224);
      v23 = (uint8_t *)swift_slowAlloc();
      v48 = v22;
      v24 = swift_slowAlloc();
      v52 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.summarizedDescription.getter();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v48);
      _os_log_impl(&dword_1C2356000, v14, v15, "Pegasus: PegasusResponse: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v24, -1, -1);
      MEMORY[0x1C3BBFF64](v23, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v49, v19);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    v42 = *(_QWORD *)(v0 + 160);
    v43 = *(_QWORD *)(v0 + 144);
    v44 = *(_QWORD *)(v0 + 136);
    v45 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 256))(v45, *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 168));
    v46 = type metadata accessor for PegasusSearchResponse(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v45 + *(int *)(v46 + 20), v42, v44);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v41 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v50 = *(_QWORD *)(v0 + 144);
    v51 = *(_QWORD *)(v0 + 216);
    v28 = *(_QWORD *)(v0 + 120);
    v27 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 104);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter();
    v5(v28, *MEMORY[0x1E0D6E240], v29);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v31 = *(_QWORD *)(v0 + 48);
    v30 = *(_QWORD *)(v0 + 56);
    v8(v28, v29);
    v8(v27, v29);
    lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
    swift_allocError();
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v34 = *(_QWORD *)(v0 + 224);
    v36 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 208);
    v38 = *(_QWORD *)(v0 + 160);
    v37 = *(_QWORD *)(v0 + 168);
    v39 = *(_QWORD *)(v0 + 136);
    if (v31 == v30)
      v40 = 10;
    else
      v40 = 0;
    *v32 = v40;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v38, v39);
    v33(v36, v37);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v34, v35);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v41 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v41();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 168));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  void (*v26)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  void (*v31)(uint64_t *, _QWORD);
  void *v32;
  char *v33;
  void (*v34)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(_BYTE *@<X8>), _QWORD *, _QWORD);
  _QWORD *v35;
  char *v36;
  int *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD);
  void (*v47)(void (*)(_QWORD, _QWORD), char *, uint64_t);
  uint64_t v48;
  void (*v49)(_QWORD, uint64_t *);
  uint64_t *v50;
  uint64_t *v51;
  void (*v52)(_QWORD, uint64_t);
  uint64_t v53;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  void (*v60)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  void *v65;
  void (*v66)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  void (*v98)(_QWORD, _QWORD);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  char *v103;
  uint64_t *v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109[7];

  v94 = a3;
  v102 = a2;
  v104 = a1;
  v96 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v96);
  v103 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v8 = *(_QWORD *)(v108 - 8);
  v9 = MEMORY[0x1E0C80A78](v108);
  v93 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v90 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v90 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v90 - v17;
  v19 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for sage != -1)
    swift_once();
  v105 = v3;
  v106 = v7;
  v97 = (uint64_t *)v16;
  v98 = (void (*)(_QWORD, _QWORD))v13;
  v99 = v8;
  v22 = type metadata accessor for OSSignposter();
  v100 = __swift_project_value_buffer(v22, (uint64_t)static Signposter.sage);
  v101 = v21;
  v23 = OSSignposter.begin(name:context:)("proxy.constructSearchRequest", 28, 2u, 0, (uint64_t)v21);
  if (one-time initialization token for shared != -1)
    v23 = swift_once();
  v24 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v23);
  v86 = v105;
  v87 = (uint64_t)v104;
  v88 = v102;
  v25 = v106;
  Date.init()();
  v26 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v24 + 200);
  v88 = &v85;
  v89 = v108;
  LOBYTE(v86) = 2;
  v27 = v95;
  v26(0xD000000000000024, 0x80000001C2509980, 0, v25, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 125, "constructSearchRequest(pommesSearchRequest:queryContext:)", 57, (_DWORD)v86, partial apply for closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:));
  v28 = v25;
  v29 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29(v28, v107);
  type metadata accessor for PommesSearchRequest(0);
  v30 = v18;
  v31 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPushOffRequest.setter();
  v31(v109, 0);
  v32 = static PerformanceUtil.shared;
  v33 = v106;
  Date.init()();
  v34 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(_BYTE *@<X8>), _QWORD *, _QWORD))(*(_QWORD *)v32 + 200);
  v35 = v105;
  LOBYTE(v86) = 2;
  v34(v109, 0xD000000000000016, 0x80000001C2508B20, 0, v33, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 130, "constructSearchRequest(pommesSearchRequest:queryContext:)", 57, (_DWORD)v86, partial apply for closure #2 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:), v105, MEMORY[0x1E0DEAFA0]);
  v29(v33, v107);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.userDataShareOptIn.setter();
  AFIsHorseman();
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.setter();
  v36 = v103;
  Date.init()();
  v37 = (int *)v96;
  v38 = &v36[*(int *)(v96 + 20)];
  *(_QWORD *)v38 = "SiriInformationSearch/SagePegasusProxy.swift";
  *((_QWORD *)v38 + 1) = 44;
  v39 = (uint64_t)v36;
  v38[16] = 2;
  *(_QWORD *)&v36[v37[6]] = 135;
  v40 = &v36[v37[7]];
  *(_QWORD *)v40 = "constructSearchRequest(pommesSearchRequest:queryContext:)";
  *((_QWORD *)v40 + 1) = 57;
  v40[16] = 2;
  v41 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000031);
  v42 = (uint64_t *)&v36[v37[8]];
  *v42 = v41;
  v42[1] = v43;
  v44 = v35[17];
  v46 = v98;
  v45 = v99;
  v47 = *(void (**)(void (*)(_QWORD, _QWORD), char *, uint64_t))(v99 + 16);
  v96 = (uint64_t)v30;
  v48 = v108;
  v47(v98, v30, v108);
  v49 = *(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v44 + 328);
  v50 = v97;
  v92 = (void (*)(_QWORD, _QWORD))v29;
  v51 = v104;
  v95 = v44;
  v49(v46, v104);
  if (v27)
  {
    v52 = *(void (**)(_QWORD, uint64_t))(v45 + 8);
    v52(v46, v48);
    outlined destroy of PommesSearchRequest(v39, type metadata accessor for PerformanceUtil.Ticket);
    v52(v96, v48);
    v53 = (uint64_t)v101;
    OSSignposter.end(token:message:)((uint64_t)v101, 0, 0xE000000000000000);
    return outlined destroy of PommesSearchRequest(v53, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  }
  else
  {
    v91 = (void (*)(_QWORD, _QWORD, _QWORD))v47;
    v98 = *(void (**)(_QWORD, _QWORD))(v45 + 8);
    v98(v46, v48);
    v99 = *(_QWORD *)(v45 + 40);
    v55 = v96;
    ((void (*)(uint64_t, uint64_t *, uint64_t))v99)(v96, v50, v48);
    v56 = static PerformanceUtil.shared;
    v57 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v39, 0);
    v97 = &v90;
    MEMORY[0x1E0C80A78](v57);
    v59 = v105;
    v58 = v106;
    v86 = v105;
    v87 = v55;
    v88 = v51;
    v89 = (uint64_t)v102;
    Date.init()();
    v60 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v56 + 200);
    v88 = &v85;
    v89 = v48;
    LOBYTE(v86) = 2;
    v61 = v93;
    v60(0xD00000000000002DLL, 0x80000001C2508CE0, 0, v58, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 139, "constructSearchRequest(pommesSearchRequest:queryContext:)", 57, (_DWORD)v86, partial apply for closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:));
    v62 = v107;
    v63 = (void (*)(char *, uint64_t))v92;
    v92(v58, v107);
    ((void (*)(uint64_t, char *, uint64_t))v99)(v55, v61, v48);
    v64 = (*(uint64_t (**)(uint64_t))(*v59 + 80))(v55);
    v65 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v64);
    v88 = v59;
    v89 = v55;
    Date.init()();
    v66 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v65 + 200);
    v88 = (uint64_t *)&v86;
    v89 = MEMORY[0x1E0DEE9C0] + 8;
    LOBYTE(v86) = 2;
    v66(0xD000000000000018, 0x80000001C2508DB0, 0, v58, "SiriInformationSearch/SagePegasusProxy.swift", 44, 2, 149, "constructSearchRequest(pommesSearchRequest:queryContext:)", 57, (_DWORD)v86, partial apply for closure #4 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:));
    v63(v58, v62);
    (*(void (**)(uint64_t, uint64_t))(*v59 + 96))(v55, v95);
    v67 = specialized static PegasusOverrideUtil.requestFeatureFlag.getter();
    v104 = 0;
    if (v68)
    {
      v69 = v67;
      v70 = v68;
      if (one-time initialization token for sage != -1)
        swift_once();
      v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)static Logger.sage);
      swift_bridgeObjectRetain_n();
      v72 = Logger.logObject.getter();
      v73 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc();
        v75 = swift_slowAlloc();
        v109[0] = v75;
        *(_DWORD *)v74 = 136315138;
        swift_bridgeObjectRetain();
        v109[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2356000, v72, v73, "Using override Pegasus request feature flag “%s”", v74, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v75, -1, -1);
        MEMORY[0x1C3BBFF64](v74, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v84 = (uint64_t)v103;
      v81 = (uint64_t)v101;
      v82 = v91;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter();
      v80 = v108;
    }
    else
    {
      if (one-time initialization token for sage != -1)
        swift_once();
      v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.sage);
      v77 = Logger.logObject.getter();
      v78 = static os_log_type_t.debug.getter();
      v79 = os_log_type_enabled(v77, v78);
      v80 = v108;
      v81 = (uint64_t)v101;
      v82 = v91;
      if (v79)
      {
        v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v83 = 0;
        _os_log_impl(&dword_1C2356000, v77, v78, "Auto-inferring pirene7 for request with no override feature flag", v83, 2u);
        MEMORY[0x1C3BBFF64](v83, -1, -1);
      }

      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter();
      v84 = (uint64_t)v103;
    }
    outlined destroy of PommesSearchRequest(v84, type metadata accessor for PerformanceUtil.Ticket);
    v82(v94, v55, v80);
    v98(v55, v80);
    OSSignposter.end(token:message:)(v81, 0, 0xE000000000000000);
    return outlined destroy of PommesSearchRequest(v81, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  }
}

uint64_t closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)a1 + 248))();
  type metadata accessor for PommesSearchRequest(0);
  dispatch thunk of PegasusProxyForIntelligenceFlow.createRequest(query:context:)();
  return swift_release();
}

uint64_t closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 136);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v12 + 416))(v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Bool __swiftcall SagePegasusProxy.isUserDataShareOptIn()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 136) + 104), sel_siriDataSharingOptInStatus) == (id)1;
}

void SagePegasusProxy.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SagePegasusProxy.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SagePegasusProxy.__ivar_destroyer()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);

}

uint64_t SagePegasusProxy.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Data?(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);

  return v0;
}

uint64_t SagePegasusProxy.__deallocating_deinit()
{
  SagePegasusProxy.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v20;

  *(_QWORD *)(a8 + 104) = a9;
  *(_QWORD *)(a8 + 112) = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a8 + 80));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 32))(boxed_opaque_existential_1, a2, a9);
  *(_QWORD *)(a8 + 184) = a10;
  *(_QWORD *)(a8 + 192) = a12;
  v20 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a8 + 160));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(v20, a7, a10);
  *(_QWORD *)(a8 + 56) = 0;
  *(_QWORD *)(a8 + 64) = 0;
  *(_OWORD *)(a8 + 144) = xmmword_1C24FEDE0;
  *(_QWORD *)(a8 + 200) = 0;
  *(_QWORD *)(a8 + 72) = a1;
  *(_QWORD *)(a8 + 120) = a3;
  *(_QWORD *)(a8 + 128) = a4;
  *(_QWORD *)(a8 + 136) = a6;
  outlined init with take of AppDataProviding(a5, a8 + 16);
  return a8;
}

uint64_t partial apply for closure #1 in SagePegasusProxy.search(searchRequest:clientEntities:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 136) + 304))();
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6E260], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V1alpha_StatusCode and conformance Apple_Parsec_Siri_V1alpha_StatusCode);
  }
  return result;
}

uint64_t partial apply for closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  uint64_t v0;

  return closure #1 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #2 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 376))();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  uint64_t *v0;

  return closure #3 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #4 in SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 16) + 104))(*(_QWORD *)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 136));
}

uint64_t sub_1C24C5F94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for SagePegasusProxy()
{
  return objc_opt_self();
}

uint64_t method lookup function for SagePegasusProxy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SagePegasusProxy.client.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SagePegasusProxy.__allocating_init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of SagePegasusProxy.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of SagePegasusProxy.prepareForSearchAtSessionStart()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of SagePegasusProxy.prepareForSearchAtRequestStart(requestId:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of SagePegasusProxy.tearDown()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of SagePegasusProxy.search(searchRequest:clientEntities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 360)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 360));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of SagePegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of SagePegasusProxy.isUserDataShareOptIn()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

void RRReferenceResolverProtocol.extractOnScreenContext()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __n128 v56;
  __n128 v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74[3];
  _QWORD *v75;

  v61 = a2;
  v60 = a1;
  v2 = type metadata accessor for RREntity();
  v71 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for UsoEntityBuilder_common_ReferenceType();
  swift_allocObject();
  v9 = UsoEntityBuilder_common_ReferenceType.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DA1E60], v5);
  v65 = v9;
  MEMORY[0x1C3BBD228](v8);
  v10 = ((__n128 (*)(char *, uint64_t))*(_QWORD *)(v6 + 8))(v8, v5);
  v11 = 0;
  v12 = 0;
  v59 = &v73;
  v10.n128_u64[0] = 136315138;
  v56 = v10;
  v58 = (unint64_t)"learnedMediaEntity";
  v55 = 0x80000001C2501B90;
  v54 = MEMORY[0x1E0DEE9B8] + 8;
  v10.n128_u64[0] = 136315394;
  v57 = v10;
  v70 = v2;
  while (1)
  {
    v13 = v11;
    if (v12 >= 2)
      break;
    v14 = *((unsigned __int8 *)&outlined read-only object #0 of RRReferenceResolverProtocol.extractOnScreenContext()
          + v12
          + 32);
    if ((v14 & 1) != 0)
    {
      type metadata accessor for UsoEntityBuilder_common_Uri();
      swift_allocObject();
      v15 = UsoEntityBuilder_common_Uri.init()();
    }
    else
    {
      type metadata accessor for UsoEntityBuilder_common_App();
      swift_allocObject();
      v15 = UsoEntityBuilder_common_App.init()();
    }
    v16 = v15;
    swift_retain();
    dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)();
    swift_release();
    v17 = MEMORY[0x1C3BBCEB0](v16);
    if (v17)
    {
      v67 = v16;
      v68 = v13;
      v18 = MEMORY[0x1E0DEE9D8];
      v75 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v66 = v17;
      v19 = specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(v62, 1, v17, v60, v61);
      if (!v19)
        v19 = v18;
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        LODWORD(v64) = v14;
        v21 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        v63 = v19;
        v22 = v19 + v21;
        v23 = *(_QWORD *)(v71 + 72);
        v24 = *(void (**)(char *, unint64_t, uint64_t))(v71 + 16);
        do
        {
          v24(v4, v22, v2);
          v25 = RREntity.id.getter();
          v27 = v26;
          swift_beginAccess();
          v28 = v75;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
          v30 = v28[2];
          v29 = v28[3];
          if (v30 >= v29 >> 1)
            v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
          v28[2] = v30 + 1;
          v31 = &v28[2 * v30];
          v31[4] = v25;
          v31[5] = v27;
          v75 = v28;
          swift_endAccess();
          v2 = v70;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v4, v70);
          v22 += v23;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        v14 = v64;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      v40 = (uint64_t)v75;
      swift_bridgeObjectRetain();
      v41 = v69;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v74[0] = v41;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v40, v14, isUniquelyReferenced_nonNull_native);
      v69 = v74[0];
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1)
        swift_once();
      v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.pommes);
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = swift_slowAlloc();
        v64 = swift_slowAlloc();
        v74[0] = v64;
        *(_DWORD *)v46 = v57.n128_u32[0];
        if (v14)
          v47 = 0x6E65657263536E6FLL;
        else
          v47 = 0xD000000000000013;
        if (v14)
          v48 = 0xEB00000000495255;
        else
          v48 = v58 | 0x8000000000000000;
        v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2080;
        v49 = swift_bridgeObjectRetain();
        v50 = MEMORY[0x1C3BBEE9C](v49, MEMORY[0x1E0DEA968]);
        v52 = v51;
        swift_bridgeObjectRelease();
        v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v52, v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v44, v45, "[ExtractOnScreenContext][%s] Found %s", (uint8_t *)v46, 0x16u);
        v53 = v64;
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v53, -1, -1);
        MEMORY[0x1C3BBFF64](v46, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      swift_release();
      swift_bridgeObjectRelease();
      LOBYTE(v13) = v68;
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = v14;
        v36 = swift_slowAlloc();
        v37 = swift_slowAlloc();
        v74[0] = v37;
        *(_DWORD *)v36 = v56.n128_u32[0];
        if (v35)
          v38 = 0x6E65657263536E6FLL;
        else
          v38 = 0xD000000000000013;
        if (v35)
          v39 = 0xEB00000000495255;
        else
          v39 = v55;
        *(_QWORD *)(v36 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v74);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v33, v34, "[ExtractOnScreenContext][%s] Failed to extract context due to USO entity conversion failure", (uint8_t *)v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v37, -1, -1);
        MEMORY[0x1C3BBFF64](v36, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
    }
    v11 = 1;
    v12 = 1u;
    if ((v13 & 1) != 0)
    {
      swift_release();
      return;
    }
  }
  __break(1u);
}

Swift::String_optional __swiftcall RRReferenceResolverProtocol.retrieveOnScreenAppBundleId()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint8_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  void (*v80)(_QWORD, _QWORD, _QWORD);
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  const char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void (*v97)(_QWORD, _QWORD, _QWORD);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, _QWORD, uint64_t);
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  char v113;
  void (*v114)(char *, uint64_t);
  char *v115;
  char *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  char *v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  char *v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  char *v144;
  void *v145;
  Swift::String_optional result;
  unint64_t v147;
  void (*v148)(_QWORD, _QWORD, _QWORD);
  uint64_t v149;
  unint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint8_t *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint8_t *v175;
  void (*v176)(_QWORD, _QWORD, _QWORD);
  uint64_t v177;
  void (*v178)(_QWORD, _QWORD, _QWORD);
  unint64_t v179;

  v174 = v0;
  v157 = type metadata accessor for RRMetadata();
  v173 = *(_QWORD *)(v157 - 8);
  v1 = MEMORY[0x1E0C80A78](v157);
  v172 = (char *)&v147 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = MEMORY[0x1E0C80A78](v1);
  v156 = (char *)&v147 - v4;
  MEMORY[0x1E0C80A78](v3);
  v169 = (char *)&v147 - v5;
  v164 = type metadata accessor for RREntity();
  v6 = *(_QWORD *)(v164 - 8);
  v7 = MEMORY[0x1E0C80A78](v164);
  v161 = (char *)&v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v160 = (char *)&v147 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v158 = (uint64_t)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v165 = (uint64_t)&v147 - v13;
  v14 = type metadata accessor for RRCandidate();
  v167 = *(_QWORD *)(v14 - 8);
  v168 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v163 = (char *)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v166 = (char *)&v147 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v159 = (char *)&v147 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v170 = (char *)&v147 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v147 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v147 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  MEMORY[0x1E0C80A78](v28);
  v30 = (void **)((char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = type metadata accessor for RRResult();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (uint64_t *)((char *)&v147 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v33);
  v171 = (char *)&v147 - v36;
  type metadata accessor for UsoEntityBuilder_common_App();
  swift_allocObject();
  UsoEntityBuilder_common_App.init()();
  v37 = MEMORY[0x1C3BBCEB0]();
  swift_release();
  if (!v37)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_1C2356000, v49, v50, "#retrieveOnScreenAppBundleId failed to create App from builder", v51, 2u);
      MEMORY[0x1C3BBFF64](v51, -1, -1);
    }

    goto LABEL_70;
  }
  v162 = v6;
  v179 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for ResolveQuery();
  swift_allocObject();
  swift_retain();
  ResolveQuery.init(referenceEntity:alternativeEntityTypes:restrictedEntitiesKey:)();
  MEMORY[0x1C3BBE80C]();
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v38 = *v30;
    v178 = (void (*)(_QWORD, _QWORD, _QWORD))*v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
    v40 = v38;
    v41 = v38;
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      v178 = (void (*)(_QWORD, _QWORD, _QWORD))v45;
      *(_DWORD *)v44 = 136315138;
      swift_getErrorValue();
      v46 = Error.localizedDescription.getter();
      v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&v178);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v42, v43, "#retrieveOnScreenAppBundleId reference resolution failed with error: %s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v45, -1, -1);
      MEMORY[0x1C3BBFF64](v44, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();

    }
LABEL_70:
    v127 = 0;
    v128 = 0;
    goto LABEL_71;
  }
  v52 = v171;
  v53 = v31;
  (*(void (**)(char *, void **, uint64_t))(v32 + 32))(v171, v30, v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v32 + 16))(v35, v52, v31);
  v54 = (*(uint64_t (**)(uint64_t *, uint64_t))(v32 + 88))(v35, v31);
  v55 = v54 == *MEMORY[0x1E0DA3E88];
  v154 = v37;
  if (!v55)
  {
    v57 = v168;
    v67 = v163;
    if (v54 == *MEMORY[0x1E0DA3E98])
    {
      (*(void (**)(uint64_t *, uint64_t))(v32 + 96))(v35, v31);
      v68 = *v35;
      v69 = v165;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain_n();
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc();
        v176 = (void (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
        v178 = v176;
        *(_DWORD *)v73 = 136315138;
        v174 = (uint64_t)(v73 + 4);
        v175 = v73;
        v74 = swift_bridgeObjectRetain();
        v75 = MEMORY[0x1C3BBEE9C](v74, v168);
        v77 = v76;
        swift_bridgeObjectRelease();
        v78 = v75;
        v53 = v31;
        v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v77, (uint64_t *)&v178);
        v57 = v168;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v79 = v175;
        _os_log_impl(&dword_1C2356000, v71, v72, "#retrieveOnScreenAppBundleId found multiple matches: %s", v175, 0xCu);
        v80 = v176;
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v80, -1, -1);
        MEMORY[0x1C3BBFF64](v79, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v67 = v163;
      v82 = v164;
      specialized Array.append<A>(contentsOf:)(v68);
      goto LABEL_48;
    }
    v69 = v165;
    if (v54 == *MEMORY[0x1E0DA3E90])
    {
      (*(void (**)(uint64_t *, uint64_t))(v32 + 96))(v35, v31);
      swift_bridgeObjectRelease();
      v82 = v164;
    }
    else
    {
      v82 = v164;
      if (v54 == *MEMORY[0x1E0DA3EA0])
      {
        (*(void (**)(uint64_t *, uint64_t))(v32 + 96))(v35, v53);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v54 == *MEMORY[0x1E0DA3EA8])
        {
          if (one-time initialization token for pommes != -1)
            swift_once();
          v85 = type metadata accessor for Logger();
          __swift_project_value_buffer(v85, (uint64_t)static Logger.pommes);
          v86 = Logger.logObject.getter();
          v87 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v86, v87))
            goto LABEL_47;
          v88 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v88 = 0;
          v89 = "#retrieveOnScreenAppBundleId no app on screen";
          goto LABEL_46;
        }
        (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v35, v53);
      }
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v90 = type metadata accessor for Logger();
    __swift_project_value_buffer(v90, (uint64_t)static Logger.pommes);
    v86 = Logger.logObject.getter();
    v87 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v86, v87))
      goto LABEL_47;
    v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v88 = 0;
    v89 = "#retrieveOnScreenAppBundleId unknown/unsupported result type";
LABEL_46:
    _os_log_impl(&dword_1C2356000, v86, v87, v89, v88, 2u);
    MEMORY[0x1C3BBFF64](v88, -1, -1);
LABEL_47:

    goto LABEL_48;
  }
  (*(void (**)(uint64_t *, uint64_t))(v32 + 96))(v35, v31);
  v56 = v167;
  v57 = v168;
  v176 = *(void (**)(_QWORD, _QWORD, _QWORD))(v167 + 32);
  v176(v27, v35, v168);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v58 = type metadata accessor for Logger();
  __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
  v175 = *(uint8_t **)(v56 + 16);
  ((void (*)(char *, char *, uint64_t))v175)(v25, v27, v57);
  v59 = Logger.logObject.getter();
  v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    v174 = swift_slowAlloc();
    v178 = (void (*)(_QWORD, _QWORD, _QWORD))v174;
    *(_DWORD *)v61 = 136315138;
    v155 = v61 + 4;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3D70], MEMORY[0x1E0DA3D80]);
    v62 = dispatch thunk of CustomStringConvertible.description.getter();
    v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&v178);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v64 = *(void (**)(char *, uint64_t))(v56 + 8);
    v64(v25, v168);
    _os_log_impl(&dword_1C2356000, v59, v60, "#retrieveOnScreenAppBundleId found match: %s", v61, 0xCu);
    v65 = v174;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v65, -1, -1);
    v66 = v61;
    v57 = v168;
    MEMORY[0x1C3BBFF64](v66, -1, -1);
  }
  else
  {
    v64 = *(void (**)(char *, uint64_t))(v56 + 8);
    v64(v25, v57);
  }

  ((void (*)(char *, char *, uint64_t))v175)(v170, v27, v57);
  v81 = v179;
  v53 = v31;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v81 + 16) + 1, 1, v81);
  v82 = v164;
  v84 = *(_QWORD *)(v81 + 16);
  v83 = *(_QWORD *)(v81 + 24);
  if (v84 >= v83 >> 1)
    v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1, v81);
  *(_QWORD *)(v81 + 16) = v84 + 1;
  v176(v81+ ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80))+ *(_QWORD *)(v167 + 72) * v84, v170, v57);
  v179 = v81;
  v64(v27, v57);
  v67 = v163;
  v69 = v165;
LABEL_48:
  (*(void (**)(char *, uint64_t))(v32 + 8))(v171, v53);
  v91 = v166;
  v152 = *(_QWORD *)(v179 + 16);
  if (v152)
  {
    v92 = v69;
    v93 = v82;
    v94 = v167;
    v95 = v179 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    LODWORD(v171) = *MEMORY[0x1E0DA3DC0];
    v151 = *MEMORY[0x1E0DA3D48];
    LODWORD(v170) = *MEMORY[0x1E0DA3DB0];
    v96 = *(_QWORD *)(v167 + 72);
    v97 = *(void (**)(_QWORD, _QWORD, _QWORD))(v167 + 16);
    v147 = v179;
    v98 = v96;
    swift_bridgeObjectRetain_n();
    v99 = 0;
    v100 = v169;
    v150 = v95;
    v149 = v98;
    v148 = v97;
    while (1)
    {
      v153 = v99;
      v97(v91, v95 + v98 * v99, v57);
      v101 = v160;
      RRCandidate.entity.getter();
      v102 = RREntity.metadata.getter();
      (*(void (**)(char *, uint64_t))(v162 + 8))(v101, v93);
      v155 = (uint8_t *)v102;
      v103 = *(uint8_t **)(v102 + 16);
      if (v103)
        break;
      swift_bridgeObjectRelease();
LABEL_57:
      v118 = v153 + 1;
      v91 = v166;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v166, v57);
      v55 = v118 == v152;
      v99 = v118;
      v95 = v150;
      v98 = v149;
      v97 = v148;
      if (v55)
      {
        swift_bridgeObjectRelease();
        v119 = 1;
        v67 = v163;
        v120 = v162;
        v82 = v93;
        v69 = v92;
        goto LABEL_63;
      }
    }
    v104 = v173;
    v105 = (char *)&v155[(*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80)];
    swift_bridgeObjectRetain();
    v169 = *(char **)(v104 + 72);
    v176 = *(void (**)(_QWORD, _QWORD, _QWORD))(v104 + 16);
    v106 = v157;
    v107 = v156;
    v108 = v151;
    while (1)
    {
      v174 = (uint64_t)v105;
      v175 = v103;
      v176(v100, v105, v106);
      v109 = type metadata accessor for RRDataSourceMetadataValue();
      v110 = *(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v109 - 8) + 104);
      v110(v107, v171, v109);
      v111 = v173;
      v112 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 104);
      v112(v107, v108, v106);
      v113 = static RRMetadata.== infix(_:_:)();
      v114 = *(void (**)(char *, uint64_t))(v111 + 8);
      v114(v107, v106);
      v115 = v100;
      v116 = v172;
      v176(v172, v115, v106);
      if ((v113 & 1) != 0)
        break;
      v110(v107, v170, v109);
      v112(v107, v108, v106);
      v117 = static RRMetadata.== infix(_:_:)();
      v114(v107, v106);
      v114(v116, v106);
      v114(v115, v106);
      if ((v117 & 1) != 0)
        goto LABEL_62;
      v100 = v115;
      v105 = &v169[v174];
      v103 = v175 - 1;
      if (v175 == (uint8_t *)1)
      {
        swift_bridgeObjectRelease_n();
        v93 = v164;
        v92 = v165;
        v94 = v167;
        v57 = v168;
        goto LABEL_57;
      }
    }
    v114(v116, v106);
    v114(v115, v106);
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v94 = v167;
    v69 = v165;
    v57 = v168;
    (*(void (**)(uint64_t, char *, uint64_t))(v167 + 32))(v165, v166, v168);
    v119 = 0;
    v67 = v163;
    v82 = v164;
    v120 = v162;
LABEL_63:
    v121 = v161;
  }
  else
  {
    swift_bridgeObjectRetain();
    v119 = 1;
    v121 = v161;
    v94 = v167;
    v120 = v162;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v69, v119, 1, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v122 = v158;
  outlined init with copy of RRCandidate?(v69, v158);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v122, 1, v57) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v122, &demangling cache variable for type metadata for RRCandidate?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v123 = type metadata accessor for Logger();
    __swift_project_value_buffer(v123, (uint64_t)static Logger.pommes);
    v124 = Logger.logObject.getter();
    v125 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v124, v125))
    {
      v126 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v126 = 0;
      _os_log_impl(&dword_1C2356000, v124, v125, "#retrieveOnScreenAppBundleId foreground App not found", v126, 2u);
      MEMORY[0x1C3BBFF64](v126, -1, -1);
    }
    swift_release();

    outlined destroy of MediaUserStateCenter?(v69, &demangling cache variable for type metadata for RRCandidate?);
    goto LABEL_70;
  }
  v131 = v159;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v159, v122, v57);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v132 = type metadata accessor for Logger();
  __swift_project_value_buffer(v132, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v67, v131, v57);
  v133 = Logger.logObject.getter();
  v134 = static os_log_type_t.debug.getter();
  v135 = v67;
  if (os_log_type_enabled(v133, v134))
  {
    v136 = (uint8_t *)swift_slowAlloc();
    v137 = v82;
    v138 = swift_slowAlloc();
    v178 = (void (*)(_QWORD, _QWORD, _QWORD))v138;
    *(_DWORD *)v136 = 136315138;
    RRCandidate.entity.getter();
    v139 = RREntity.appBundleId.getter();
    v141 = v140;
    (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v137);
    v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v141, (uint64_t *)&v178);
    v120 = v162;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v121 = v161;
    swift_bridgeObjectRelease();
    v142 = *(void (**)(char *, uint64_t))(v167 + 8);
    v142(v135, v168);
    _os_log_impl(&dword_1C2356000, v133, v134, "#retrieveOnScreenAppBundleId onscreen app bundleId=%s", v136, 0xCu);
    swift_arrayDestroy();
    v143 = v138;
    v82 = v137;
    v57 = v168;
    MEMORY[0x1C3BBFF64](v143, -1, -1);
    MEMORY[0x1C3BBFF64](v136, -1, -1);
  }
  else
  {
    v142 = *(void (**)(char *, uint64_t))(v94 + 8);
    v142(v135, v57);
  }

  v144 = v159;
  RRCandidate.entity.getter();
  v127 = RREntity.appBundleId.getter();
  v128 = v145;
  swift_release();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v82);
  v142(v144, v57);
  outlined destroy of MediaUserStateCenter?(v165, &demangling cache variable for type metadata for RRCandidate?);
LABEL_71:
  v129 = v127;
  v130 = v128;
  result.value._object = v130;
  result.value._countAndFlagsBits = v129;
  return result;
}

uint64_t EmptyReferenceResolver.resolve(reference:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DA3EA8];
  v3 = type metadata accessor for RRResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  return swift_storeEnumTagMultiPayload();
}

uint64_t EmptyReferenceResolver.hasReference(usoEntity:)()
{
  return 0;
}

uint64_t protocol witness for RRReferenceResolverProtocol.resolve(reference:) in conformance EmptyReferenceResolver@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DA3EA8];
  v3 = type metadata accessor for RRResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  return swift_storeEnumTagMultiPayload();
}

uint64_t outlined init with take of (Siri_Nlu_External_Span, RREntity)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of RRCandidate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for EmptyReferenceResolver()
{
  return &type metadata for EmptyReferenceResolver;
}

uint64_t MusicDomain.__allocating_init()()
{
  uint64_t v0;
  id v1;
  _QWORD v3[5];

  v1 = objc_msgSend((id)objc_opt_self(), sel_indexMatcher);
  v3[3] = type metadata accessor for SEMSpanMatcher();
  v3[4] = &protocol witness table for SEMSpanMatcher;
  v3[0] = v1;
  return (*(uint64_t (**)(_QWORD *))(v0 + 104))(v3);
}

unint64_t type metadata accessor for SEMSpanMatcher()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SEMSpanMatcher;
  if (!lazy cache variable for type metadata for SEMSpanMatcher)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SEMSpanMatcher);
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v13 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_17;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C3BBF3F4](i - 4, a1) : *(id *)(a1 + 8 * i);
      v7 = v6;
      v8 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v12 = v6;
      closure #1 in MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)(&v12, a2, &v11);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v11)
      {
        MEMORY[0x1C3BBEE78]();
        if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t MusicDomain.client.getter()
{
  return swift_retain();
}

uint64_t MusicDomain.name.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t MusicDomain.__allocating_init(spanMatcher:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t MusicDomain.init(spanMatcher:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t MusicDomain.search(query:userIds:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void (*v11)(uint64_t *, uint64_t, unint64_t, void *, _QWORD, uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v16)(_QWORD, _QWORD);
  uint64_t v17;

  v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return a4(MEMORY[0x1E0DEE9D8], 0);
  v7 = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(a3 + 16);
  if (v8)
  {
    v16 = a4;
    v11 = *(void (**)(uint64_t *, uint64_t, unint64_t, void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 120);
    swift_bridgeObjectRetain();
    v12 = (uint64_t *)(a3 + 40);
    do
    {
      v13 = *(v12 - 1);
      v14 = *v12;
      swift_bridgeObjectRetain();
      v11(&v17, a1, a2, &outlined read-only object #0 of MusicDomain.search(query:userIds:completion:), MEMORY[0x1E0DEE9E8], v13, v14);
      v12 += 2;
      swift_bridgeObjectRelease();
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v7 = v17;
    a4 = v16;
  }
  a4(v7, 0);
  return swift_bridgeObjectRelease();
}

uint64_t MusicDomain.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint8_t *, uint64_t);
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  _BYTE *v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(void *, uint64_t);
  uint64_t v66;
  uint64_t v67;

  v57 = a4;
  v64 = a6;
  v65 = a5;
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v8 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  v61 = v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v56 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v59 = (char *)&v56 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v56 - v26;
  v62 = a2;
  MusicDomain.extractClientSignals(_:)((uint64_t)&v56 - v26);
  v63 = v27;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?((uint64_t)v27, (uint64_t)v25);
  v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v25, 1, v28) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  }
  else
  {
    v30 = Apple_Parsec_Siri_V2alpha_ClientSignals.disableClientLibrarySearch.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v28);
    if ((v30 & 1) != 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1C2356000, v32, v33, "client library search disabled by the server", v34, 2u);
        MEMORY[0x1C3BBFF64](v34, -1, -1);
      }

      v65((void *)MEMORY[0x1E0DEE9D8], 0);
      goto LABEL_21;
    }
  }
  Date.init()();
  v35 = &v21[v19[5]];
  *(_QWORD *)v35 = "SiriInformationSearch/MusicDomain.swift";
  *((_QWORD *)v35 + 1) = 39;
  v35[16] = 2;
  *(_QWORD *)&v21[v19[6]] = 426;
  v36 = &v21[v19[7]];
  *(_QWORD *)v36 = "search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)";
  *((_QWORD *)v36 + 1) = 71;
  v36[16] = 2;
  v37 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001BLL);
  v38 = (uint64_t *)&v21[v19[8]];
  *v38 = v37;
  v38[1] = v39;
  v40 = v62;
  MusicDomain.extractAudioUnderstanding(_:)((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
    v43 = v60;
    v42 = v61;
    v44 = *(void (**)(char *, uint8_t *, uint64_t))(v61 + 16);
    v45 = v59;
    v44(v59, v40, v60);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v67 = v49;
      *(_DWORD *)v48 = 136315138;
      v62 = v48 + 4;
      v44(v56, (uint8_t *)v45, v43);
      v50 = String.init<A>(describing:)();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v43);
      _os_log_impl(&dword_1C2356000, v46, v47, "Failed to extract audio understanding from the Pegasus response:\n  PireneResponse : %s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v49, -1, -1);
      MEMORY[0x1C3BBFF64](v48, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v43);
    }

    lazy protocol witness table accessor for type SearchError and conformance SearchError();
    v53 = (void *)swift_allocError();
    *v54 = 1;
    v65(v53, 1);

    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v21, 1);
    outlined destroy of PerformanceUtil.Ticket((uint64_t)v21);
LABEL_21:
    v52 = (uint64_t)v63;
    return outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  v52 = (uint64_t)v63;
  (*(void (**)(char *, char *, uint64_t, void (*)(void *, uint64_t), uint64_t))(*(_QWORD *)v58 + 136))(v18, v63, v57, v65, v64);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v21, 1);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v21);
  return outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
}

uint64_t MusicDomain.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MusicDomain.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized MusicDomain.init(spanMatcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *))(v7 + 32))((char *)&v16 - v11);
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of specialized MusicDomain.init(spanMatcher:));
  type metadata accessor for VocabularySearchClient();
  v13 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, a3);
  v14 = specialized VocabularySearchClient.init(spanMatcher:)((uint64_t)v10, v13, a3, a4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a3);
  *(_QWORD *)(a2 + 16) = v14;
  return a2;
}

uint64_t type metadata accessor for MusicDomain()
{
  return objc_opt_self();
}

uint64_t method lookup function for MusicDomain()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MusicDomain.__allocating_init(spanMatcher:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MusicDomain.search(query:userIds:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MusicDomain.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t EnvironmentNamePreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static EnvironmentNamePreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ELL;
}

void EnvironmentNamePreflightClient.handle(pommesSearchRequest:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t EnvironmentNamePreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t EnvironmentNamePreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t EnvironmentNamePreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance EnvironmentNamePreflightClient()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for EnvironmentNamePreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for EnvironmentNamePreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EnvironmentNamePreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of EnvironmentNamePreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t PommesSearchRequest.userParses.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  uint64_t v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v24 - v6;
  v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)&v13[*(int *)(v16 + 64)], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v17 = type metadata accessor for TCUMappedNLResponse();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v17) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v19 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v22 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v17);
        v19 = NLParseResponse.userParses.getter();

      }
      v21 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    }
    else
    {
      swift_bridgeObjectRelease();
      v19 = *((_QWORD *)v13 + 2);
      v7 = &v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                       + 64)];
      swift_bridgeObjectRelease();
      v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, v21);
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)&v13[*(int *)(v20 + 48)], (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v19 = *v10;
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  return v19;
}

Swift::Bool __swiftcall PommesSearchRequest.pscScoreIsAboveThreshold()()
{
  uint64_t v0;
  double v1;

  v1 = *(double *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 48));
  return specialized static PommesSearchRequest.pommesDUDAThreshold.getter() <= v1;
}

uint64_t PommesSearchRequest.pommesCandidateId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;

  v2 = v1;
  v4 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v27 = *(_OWORD *)v6;
      v9 = *((_QWORD *)v6 + 2);
      v10 = *((_QWORD *)v6 + 3);
      v11 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                       + 64)];
      *(_OWORD *)a1 = v27;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      v12 = *MEMORY[0x1E0D988D0];
      v13 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(a1, v12, v13);
      v14 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
      v15 = (uint64_t)v11;
    }
    else
    {
      v22 = *(_QWORD *)v6;
      v23 = *((_QWORD *)v6 + 1);
      swift_bridgeObjectRelease();
      v24 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                       + 64)];
      swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v23;
      v25 = *MEMORY[0x1E0D988C0];
      v26 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(a1, v25, v26);
      v14 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
      v15 = (uint64_t)v24;
    }
    return outlined destroy of MediaUserStateCenter?(v15, v14);
  }
  else
  {
    v16 = *(_QWORD *)v6;
    v17 = *((_QWORD *)v6 + 1);
    v18 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                              + 48)];
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v17;
    v19 = *MEMORY[0x1E0D988C8];
    v20 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(a1, v19, v20);
    return outlined destroy of PommesSearchRequest(v18, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, void *a11, unsigned __int8 a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  void *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a8;
  v68 = a7;
  v65 = a5;
  v59 = a3;
  v63 = a12;
  v64 = a11;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v61 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v60 = (char *)&v57 - v20;
  v21 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v21);
  v23 = (unint64_t *)((char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v62 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v57 - v27;
  v29 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v29[23]) = MEMORY[0x1E0DEE9D8];
  v30 = (_QWORD *)((char *)a9 + v29[5]);
  *v30 = a1;
  v30[1] = a2;
  v31 = (char *)a9 + v29[6];
  v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v66 = a6;
  v33 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v34 = (_QWORD *)((char *)a9 + v29[8]);
  *v34 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v34[1] = v33;
  v35 = (_QWORD *)((char *)a9 + v29[9]);
  *v35 = 0;
  v35[1] = 0;
  v58 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = v59;
  a9[1] = a4;
  v36 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v59 = *(_QWORD *)(v36 - 8);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
  v37(v28, 1, 1, v36);
  v38 = (uint64_t)v23 + *(int *)(v21 + 20);
  v37((char *)v38, 1, 1, v36);
  v39 = (unint64_t *)((char *)v23 + *(int *)(v21 + 24));
  *v39 = 0;
  v39[1] = 0;
  *v23 = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v28, v38, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v39 = 0;
  v39[1] = 0;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v23, v58, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v68, (uint64_t)a9 + v29[10], &demangling cache variable for type metadata for PommesContext?);
  v37(v28, 1, 1, v36);
  v40 = v60;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(a10, (uint64_t)v28, v60);
  v41 = (uint64_t)v28;
  v42 = (uint64_t)v61;
  outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v43 = (uint64_t)v40;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v40, v42, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v42, 1, v44) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v45 = 1;
    v46 = (uint64_t)v62;
  }
  else
  {
    v46 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v62, v42, v36);
    v45 = 0;
  }
  v37((char *)v46, v45, 1, v36);
  outlined init with take of PommesSearchReason?(v46, (uint64_t)a9 + v29[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v47 = v63 & 1;
  *(double *)((char *)a9 + v29[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)(v43, v63 & 1);
  v49 = v66;
  v48 = v67;
  v50 = *(_QWORD *)(v66 + 24);
  v51 = (_QWORD *)((char *)a9 + v29[7]);
  *v51 = *(_QWORD *)(v66 + 16);
  v51[1] = v50;
  *(_QWORD *)((char *)a9 + v29[13]) = v49;
  outlined init with copy of MediaUserStateCenter?(v48, (uint64_t)a9 + v29[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v29[15]) = v65 & 1;
  v52 = v64;
  *(_QWORD *)((char *)a9 + v29[18]) = v64;
  v53 = v52;
  swift_bridgeObjectRetain();
  swift_retain();
  v54 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(a10);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v68, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v29[19]) = v54;
  *((_BYTE *)a9 + v29[20]) = v47;
  v56 = (_QWORD *)((char *)a9 + v29[21]);
  *v56 = 0;
  v56[1] = 0;
  *(_QWORD *)((char *)a9 + v29[22]) = 0;
  *((_BYTE *)a9 + v29[16]) = 0;
  *((_BYTE *)a9 + v29[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:trpCandidateId:tcuId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, char *a16, char *a17)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  uint64_t result;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v78 = a7;
  v80 = a5;
  v81 = a6;
  v73 = a3;
  v74 = a4;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v76 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v72 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v27 = MEMORY[0x1E0C80A78](v26);
  v75 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v77 = (char *)&v72 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v31 = MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v72 - v34;
  v36 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v36[23]) = MEMORY[0x1E0DEE9D8];
  v37 = (_QWORD *)((char *)a9 + v36[5]);
  *v37 = a1;
  v37[1] = a2;
  v38 = (char *)a9 + v36[6];
  v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v79 = a8;
  v40 = *(_QWORD *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v41 = (_QWORD *)((char *)a9 + v36[8]);
  *v41 = *(_QWORD *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v41[1] = v40;
  v42 = (_QWORD *)((char *)a9 + v36[9]);
  *v42 = 0;
  v42[1] = 0;
  v43 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v44 = v74;
  *a9 = v73;
  a9[1] = v44;
  v45 = v81;
  a9[2] = v80;
  a9[3] = v45;
  outlined init with copy of MediaUserStateCenter?(a12, v43, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v46 = (uint64_t)a9 + v36[10];
  v80 = a10;
  outlined init with copy of MediaUserStateCenter?(a10, v46, &demangling cache variable for type metadata for PommesContext?);
  v81 = a12;
  outlined init with copy of MediaUserStateCenter?(a12, (uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v47 = type metadata accessor for TCUMappedNLResponse();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v35, 1, v47);
  swift_bridgeObjectRetain();
  if (v50 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v51 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v52 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v47);
    v51 = NLParseResponse.userParses.getter();

  }
  outlined init with copy of MediaUserStateCenter?(v81, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (v49(v33, 1, v47) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v53 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v25, 1, 1, v53);
  }
  else
  {
    v54 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v47);
    NLParseResponse.fallbackParse.getter();

  }
  v55 = v77;
  v56 = (uint64_t)v75;
  v77 = a17;
  v74 = a15;
  v75 = a16;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v51, (uint64_t)v25, v55);
  outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v55, v56, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v56, 1, v57) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v58 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v59 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v76, 1, 1, v58);
  }
  else
  {
    v60 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v61 = v56;
    v62 = v60;
    v63 = *(_QWORD *)(v60 - 8);
    v59 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v76, v61, v60);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v59, 0, 1, v62);
  }
  outlined init with take of PommesSearchReason?(v59, (uint64_t)a9 + v36[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v36[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v55, 0);
  v64 = v79;
  v65 = *(_QWORD *)(v79 + 24);
  v66 = (_QWORD *)((char *)a9 + v36[7]);
  *v66 = *(_QWORD *)(v79 + 16);
  v66[1] = v65;
  *(_QWORD *)((char *)a9 + v36[13]) = v64;
  outlined init with copy of MediaUserStateCenter?(a11, (uint64_t)a9 + v36[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v36[15]) = v78 & 1;
  *(_QWORD *)((char *)a9 + v36[18]) = a13;
  v67 = a13;
  swift_bridgeObjectRetain();
  swift_retain();
  v68 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v51);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v81, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?(a11, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v80, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v55, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v36[19]) = v68;
  *((_BYTE *)a9 + v36[20]) = a14 & 1;
  v70 = (_QWORD *)((char *)a9 + v36[21]);
  v71 = v75;
  *v70 = v74;
  v70[1] = v71;
  *(_QWORD *)((char *)a9 + v36[22]) = v77;
  *((_BYTE *)a9 + v36[16]) = 0;
  *((_BYTE *)a9 + v36[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v26 - v8;
  v10 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)&v15[*(int *)(v18 + 64)], (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v19 = type metadata accessor for TCUMappedNLResponse();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v21 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 1, 1, v21);
      }
      else
      {
        v25 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
        NLParseResponse.fallbackParse.getter();

        return outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = (uint64_t)&v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                                 + 64)];
      swift_bridgeObjectRelease();
      return outlined init with take of PommesSearchReason?(v24, a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)&v15[*(int *)(v23 + 48)], (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v12[*(int *)(v10 + 20)], a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    return outlined destroy of PommesSearchRequest((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesSearchRequest.responseVariantResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)&v13[*(int *)(v20 + 48)], (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v19 = *(_QWORD *)&v10[*(int *)(v8 + 24)];
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    return v19;
  }
  if (EnumCaseMultiPayload != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    v19 = *(_QWORD *)&v13[*(int *)(v21 + 80)];
    v22 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    v23 = (uint64_t)&v13[*(int *)(v21 + 64)];
LABEL_8:
    outlined destroy of MediaUserStateCenter?(v23, v22);
    return v19;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
  outlined init with take of PommesSearchReason?((uint64_t)&v13[*(int *)(v16 + 64)], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v17 = type metadata accessor for TCUMappedNLResponse();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v17) != 1)
  {
    v24 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v17);
    v19 = NLParseResponse.responseVariantResult.getter();

    v22 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    v23 = (uint64_t)v7;
    goto LABEL_8;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  return 0;
}

uint64_t PommesSearchRequest.init(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for PommesSearchRequest.Builder(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (uint64_t *)((char *)&v33 - v12);
  *v13 = 0;
  v13[1] = 0;
  v14 = (char *)&v33 + *(int *)(v11 + 20) - v12;
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (char *)v13 + v7[6];
  v17 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (_QWORD *)((char *)v13 + v7[7]);
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)((char *)v13 + v7[8]) = 0;
  *((_BYTE *)v13 + v7[9]) = 0;
  *((_BYTE *)v13 + v7[10]) = 0;
  v19 = (char *)v13 + v7[11];
  v20 = type metadata accessor for PommesContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = (char *)v13 + v7[12];
  v22 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = (char *)v13 + v7[13];
  v24 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_QWORD *)((char *)v13 + v7[14]) = MEMORY[0x1E0DEE9D8];
  v25 = (char *)v13 + v7[15];
  v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = (_QWORD *)((char *)v13 + v7[16]);
  *v27 = 0;
  v27[1] = 0;
  *(_QWORD *)((char *)v13 + v7[17]) = 0;
  *((_BYTE *)v13 + v7[18]) = 0;
  v28 = (_QWORD *)((char *)v13 + v7[19]);
  *v28 = 0;
  v28[1] = 0;
  *(_QWORD *)((char *)v13 + v7[20]) = 0;
  *((_BYTE *)v13 + v7[21]) = 0;
  a1(v13);
  outlined init with copy of PommesSearchRequest((uint64_t)v13, (uint64_t)v10, type metadata accessor for PommesSearchRequest.Builder);
  PommesSearchRequest.init(builder:)(v10, (uint64_t)v6);
  outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PommesSearchRequest.Builder);
  v29 = type metadata accessor for PommesSearchRequest(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1, v29))
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PommesSearchRequest?);
    v31 = 1;
  }
  else
  {
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v6, a2, type metadata accessor for PommesSearchRequest);
    v31 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(a2, v31, 1, v29);
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, void *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t result;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  void *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a8;
  v67 = a7;
  v64 = a5;
  v58 = a3;
  v63 = a11;
  v60 = a10;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v58 - v19;
  v20 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v20);
  v22 = (unint64_t *)((char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v62 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v58 - v26;
  v28 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v28[23]) = MEMORY[0x1E0DEE9D8];
  v29 = (_QWORD *)((char *)a9 + v28[5]);
  *v29 = a1;
  v29[1] = a2;
  v30 = (char *)a9 + v28[6];
  v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v65 = a6;
  v32 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v33 = (_QWORD *)((char *)a9 + v28[8]);
  *v33 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v33[1] = v32;
  v34 = (_QWORD *)((char *)a9 + v28[9]);
  *v34 = 0;
  v34[1] = 0;
  v35 = (char *)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = v58;
  a9[1] = a4;
  v36 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v58 = *(_QWORD *)(v36 - 8);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v37(v27, 1, 1, v36);
  v38 = (uint64_t)v22 + *(int *)(v20 + 20);
  v37((char *)v38, 1, 1, v36);
  v39 = (unint64_t *)((char *)v22 + *(int *)(v20 + 24));
  *v39 = 0;
  v39[1] = 0;
  v40 = v60;
  *v22 = v60;
  v41 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v27, v38, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v39 = 0;
  v39[1] = 0;
  v42 = (uint64_t)v35;
  v43 = v59;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v22, v42, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v67, (uint64_t)a9 + v28[10], &demangling cache variable for type metadata for PommesContext?);
  v37(v27, 1, 1, v36);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v41, (uint64_t)v27, v43);
  v44 = (uint64_t)v27;
  v45 = (uint64_t)v61;
  outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v43, v45, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v47 = 1;
    v48 = (uint64_t)v62;
  }
  else
  {
    v48 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v62, v45, v36);
    v47 = 0;
  }
  v37((char *)v48, v47, 1, v36);
  outlined init with take of PommesSearchReason?(v48, (uint64_t)a9 + v28[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v28[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v43, 0);
  v50 = v65;
  v49 = v66;
  v51 = *(_QWORD *)(v65 + 24);
  v52 = (_QWORD *)((char *)a9 + v28[7]);
  *v52 = *(_QWORD *)(v65 + 16);
  v52[1] = v51;
  *(_QWORD *)((char *)a9 + v28[13]) = v50;
  outlined init with copy of MediaUserStateCenter?(v49, (uint64_t)a9 + v28[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v28[15]) = v64 & 1;
  v53 = v63;
  *(_QWORD *)((char *)a9 + v28[18]) = v63;
  v54 = v53;
  swift_bridgeObjectRetain();
  swift_retain();
  v55 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v41);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v43, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v28[19]) = v55;
  *((_BYTE *)a9 + v28[20]) = 0;
  v57 = (_QWORD *)((char *)a9 + v28[21]);
  *v57 = 0;
  v57[1] = 0;
  *(_QWORD *)((char *)a9 + v28[22]) = 0;
  *((_BYTE *)a9 + v28[16]) = 0;
  *((_BYTE *)a9 + v28[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.parseState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PommesSearchRequest(v1, a1, type metadata accessor for PommesSearchRequest.ParseState);
}

uint64_t PommesSearchRequest.utterance.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.rewriteMessage.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.rewriteMessage.getter(type metadata accessor for PommesSearchRequest, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?, a1);
}

uint64_t PommesSearchRequest.assistantId.getter()
{
  return PommesSearchRequest.assistantId.getter(type metadata accessor for PommesSearchRequest);
}

uint64_t PommesSearchRequest.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.rootRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.pommesContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for PommesContext?);
}

uint64_t PommesSearchRequest.delegatedUDA.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.delegatedUDA.getter(type metadata accessor for PommesSearchRequest, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, a1);
}

double PommesSearchRequest.pscScore.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 48));
}

uint64_t PommesSearchRequest.requestContext.getter()
{
  type metadata accessor for PommesSearchRequest(0);
  return swift_retain();
}

uint64_t PommesSearchRequest.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for InputOrigin?);
}

uint64_t PommesSearchRequest.isMultiUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 60));
}

uint64_t PommesSearchRequest.isOnlyUserInHome.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 64));
}

uint64_t PommesSearchRequest.isGestureBased.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 68));
}

void *PommesSearchRequest.asrSpeechPackage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 72));
  v2 = v1;
  return v1;
}

uint64_t PommesSearchRequest.salientNLv4Parses.getter()
{
  type metadata accessor for PommesSearchRequest(0);
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequest.isFallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 80));
}

uint64_t PommesSearchRequest.sharedUserId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.userIdentityClassification.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 88));
}

uint64_t PommesSearchRequest.profileResolutionRequests.getter()
{
  type metadata accessor for PommesSearchRequest(0);
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequest.profileResolutionRequests.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PommesSearchRequest(0) + 92);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.profileResolutionRequests.modify())()
{
  type metadata accessor for PommesSearchRequest(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.init(utterance:requestId:resultCandidateId:interactionType:pommesContext:userParses:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;

  v59 = a8;
  v61 = a7;
  v55 = a3;
  v56 = a4;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v57 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v58 = (char *)&v54 - v18;
  v19 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v19);
  v21 = (unint64_t *)((char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v60 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v54 - v25;
  v27 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v27[23]) = MEMORY[0x1E0DEE9D8];
  v28 = (_QWORD *)((char *)a9 + v27[5]);
  *v28 = a1;
  v28[1] = a2;
  v29 = (char *)a9 + v27[6];
  v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = (_QWORD *)((char *)a9 + v27[8]);
  v32 = v56;
  *v31 = v55;
  v31[1] = v32;
  v33 = (_QWORD *)((char *)a9 + v27[9]);
  *v33 = 0;
  v33[1] = 0;
  v34 = (char *)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = a5;
  a9[1] = a6;
  v35 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v56 = *(_QWORD *)(v35 - 8);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
  v36(v26, 1, 1, v35);
  v37 = (char *)v21 + *(int *)(v19 + 20);
  v36(v37, 1, 1, v35);
  v38 = (unint64_t *)((char *)v21 + *(int *)(v19 + 24));
  *v38 = 0;
  v38[1] = 0;
  *v21 = a10;
  swift_bridgeObjectRetain();
  v39 = (uint64_t)v37;
  v40 = (uint64_t)v57;
  outlined assign with take of MediaUserStateCenter?((uint64_t)v26, v39, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v38 = 0;
  v38[1] = 0;
  v41 = (uint64_t)v21;
  v42 = (uint64_t)v34;
  v44 = v58;
  v43 = v59;
  outlined init with take of PerformanceUtil.Ticket(v41, v42, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v43, (uint64_t)a9 + v27[10], &demangling cache variable for type metadata for PommesContext?);
  v36(v26, 1, 1, v35);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(a10, (uint64_t)v26, v44);
  outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v44, v40, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v40, 1, v45) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v46 = 1;
    v47 = (uint64_t)v60;
  }
  else
  {
    v47 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v60, v40, v35);
    v46 = 0;
  }
  v36((char *)v47, v46, 1, v35);
  outlined init with take of PommesSearchReason?(v47, (uint64_t)a9 + v27[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v27[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v44, 0);
  v48 = (_QWORD *)((char *)a9 + v27[7]);
  *v48 = 0;
  v48[1] = 0;
  *(_QWORD *)((char *)a9 + v27[13]) = 0;
  v49 = (char *)a9 + v27[14];
  v50 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
  *((_BYTE *)a9 + v27[15]) = 0;
  *(_QWORD *)((char *)a9 + v27[18]) = 0;
  v51 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(a10);
  outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for PommesContext?);
  outlined destroy of MediaUserStateCenter?(v61, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v44, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v27[19]) = v51;
  *((_BYTE *)a9 + v27[20]) = 0;
  v53 = (_QWORD *)((char *)a9 + v27[21]);
  *v53 = 0;
  v53[1] = 0;
  *(_QWORD *)((char *)a9 + v27[22]) = 0;
  *((_BYTE *)a9 + v27[16]) = 0;
  *((_BYTE *)a9 + v27[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:requestId:resultCandidateId:interactionType:pommesContext:userParses:assistantId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v61 = a8;
  v57 = a3;
  v58 = a4;
  v64 = a12;
  v65 = a7;
  v63 = a11;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v60 = (char *)&v56 - v20;
  v21 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v21);
  v23 = (unint64_t *)((char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v62 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v56 - v27;
  v29 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v29[23]) = MEMORY[0x1E0DEE9D8];
  v30 = (_QWORD *)((char *)a9 + v29[5]);
  *v30 = a1;
  v30[1] = a2;
  v31 = (char *)a9 + v29[6];
  v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = (_QWORD *)((char *)a9 + v29[8]);
  v34 = v58;
  *v33 = v57;
  v33[1] = v34;
  v35 = (_QWORD *)((char *)a9 + v29[9]);
  *v35 = 0;
  v35[1] = 0;
  v36 = (char *)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  *a9 = a5;
  a9[1] = a6;
  v37 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v58 = *(_QWORD *)(v37 - 8);
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v38(v28, 1, 1, v37);
  v39 = (char *)v23 + *(int *)(v21 + 20);
  v38(v39, 1, 1, v37);
  v40 = (unint64_t *)((char *)v23 + *(int *)(v21 + 24));
  *v40 = 0;
  v40[1] = 0;
  *v23 = a10;
  swift_bridgeObjectRetain();
  v41 = (uint64_t)v39;
  v42 = (uint64_t)v59;
  outlined assign with take of MediaUserStateCenter?((uint64_t)v28, v41, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v40 = 0;
  v40[1] = 0;
  v43 = (uint64_t)v36;
  v45 = v60;
  v44 = v61;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v23, v43, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of MediaUserStateCenter?(v44, (uint64_t)a9 + v29[10], &demangling cache variable for type metadata for PommesContext?);
  v38(v28, 1, 1, v37);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(a10, (uint64_t)v28, v45);
  outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v45, v42, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v42, 1, v46) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v47 = 1;
    v48 = (uint64_t)v62;
  }
  else
  {
    v48 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v62, v42, v37);
    v47 = 0;
  }
  v38((char *)v48, v47, 1, v37);
  outlined init with take of PommesSearchReason?(v48, (uint64_t)a9 + v29[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v29[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v45, 0);
  v49 = (_QWORD *)((char *)a9 + v29[7]);
  v50 = v64;
  *v49 = v63;
  v49[1] = v50;
  *(_QWORD *)((char *)a9 + v29[13]) = 0;
  v51 = (char *)a9 + v29[14];
  v52 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 1, 1, v52);
  *((_BYTE *)a9 + v29[15]) = 0;
  *(_QWORD *)((char *)a9 + v29[18]) = 0;
  v53 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(a10);
  outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for PommesContext?);
  outlined destroy of MediaUserStateCenter?(v65, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v45, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v29[19]) = v53;
  *((_BYTE *)a9 + v29[20]) = 0;
  v55 = (_QWORD *)((char *)a9 + v29[21]);
  *v55 = 0;
  v55[1] = 0;
  *(_QWORD *)((char *)a9 + v29[22]) = 0;
  *((_BYTE *)a9 + v29[16]) = 0;
  *((_BYTE *)a9 + v29[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:trpCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  uint64_t result;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a8;
  v73 = a4;
  v69 = a5;
  v65 = a3;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v68 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v66 = (char *)&v64 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v67 = (uint64_t)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v70 = (char *)&v64 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v64 - v28;
  v30 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v30[23]) = MEMORY[0x1E0DEE9D8];
  v31 = (_QWORD *)((char *)a9 + v30[5]);
  *v31 = a1;
  v31[1] = a2;
  v32 = (char *)a9 + v30[6];
  v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v71 = a6;
  v34 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v35 = (_QWORD *)((char *)a9 + v30[8]);
  *v35 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v35[1] = v34;
  v36 = (_QWORD *)((char *)a9 + v30[9]);
  *v36 = 0;
  v36[1] = 0;
  v37 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v38 = v73;
  *a9 = v65;
  a9[1] = v38;
  a9[2] = 0;
  a9[3] = 0xE000000000000000;
  outlined init with copy of MediaUserStateCenter?(a10, v37, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v39 = (uint64_t)a9 + v30[10];
  v73 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v39, &demangling cache variable for type metadata for PommesContext?);
  outlined init with copy of MediaUserStateCenter?(a10, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v40 = type metadata accessor for TCUMappedNLResponse();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v29, 1, v40);
  swift_bridgeObjectRetain();
  if (v43 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v44 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v45 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v40);
    v44 = NLParseResponse.userParses.getter();

  }
  outlined init with copy of MediaUserStateCenter?(a10, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (v42(v27, 1, v40) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v46 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v47 = (uint64_t)v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v66, 1, 1, v46);
  }
  else
  {
    v48 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v40);
    v47 = (uint64_t)v66;
    NLParseResponse.fallbackParse.getter();

  }
  v49 = v70;
  v50 = (uint64_t)v68;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v44, v47, v70);
  outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v51 = v67;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v49, v67, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v51, 1, v52) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v53 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v50, 1, 1, v53);
  }
  else
  {
    v54 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v55 = *(_QWORD *)(v54 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v50, v51, v54);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v50, 0, 1, v54);
  }
  outlined init with take of PommesSearchReason?(v50, (uint64_t)a9 + v30[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v30[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v49, 0);
  v57 = v71;
  v56 = v72;
  v58 = *(_QWORD *)(v71 + 24);
  v59 = (_QWORD *)((char *)a9 + v30[7]);
  *v59 = *(_QWORD *)(v71 + 16);
  v59[1] = v58;
  *(_QWORD *)((char *)a9 + v30[13]) = v57;
  outlined init with copy of MediaUserStateCenter?(v56, (uint64_t)a9 + v30[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v30[15]) = v69 & 1;
  *(_QWORD *)((char *)a9 + v30[18]) = a11;
  v60 = a11;
  swift_bridgeObjectRetain();
  swift_retain();
  v61 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v44);
  swift_release();

  outlined destroy of MediaUserStateCenter?(a10, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v73, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v49, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v30[19]) = v61;
  *((_BYTE *)a9 + v30[20]) = 0;
  v63 = (_QWORD *)((char *)a9 + v30[21]);
  *v63 = 0;
  v63[1] = 0;
  *(_QWORD *)((char *)a9 + v30[22]) = 0;
  *((_BYTE *)a9 + v30[16]) = 0;
  *((_BYTE *)a9 + v30[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, void *a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t result;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  int v68;
  void *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v72 = a8;
  v70 = a5;
  v63 = a3;
  v64 = a4;
  v75 = a14;
  v76 = a15;
  v74 = a13;
  v68 = a12;
  v69 = a11;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v66 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v65 = (char *)&v62 - v23;
  v24 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v24);
  v26 = (unint64_t *)((char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v67 = (char *)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v62 - v30;
  v32 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v32[23]) = MEMORY[0x1E0DEE9D8];
  v33 = (_QWORD *)((char *)a9 + v32[5]);
  *v33 = a1;
  v33[1] = a2;
  v34 = (char *)a9 + v32[6];
  v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  v71 = a6;
  v36 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v37 = (_QWORD *)((char *)a9 + v32[8]);
  *v37 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v37[1] = v36;
  v38 = (_QWORD *)((char *)a9 + v32[9]);
  *v38 = 0;
  v38[1] = 0;
  v39 = (uint64_t)a9 + v32[10];
  v73 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v39, &demangling cache variable for type metadata for PommesContext?);
  v62 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  v40 = v64;
  *a9 = v63;
  a9[1] = v40;
  v41 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v64 = *(_QWORD *)(v41 - 8);
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56);
  v42(v31, 1, 1, v41);
  v43 = (uint64_t)v26 + *(int *)(v24 + 20);
  v42((char *)v43, 1, 1, v41);
  v44 = (unint64_t *)((char *)v26 + *(int *)(v24 + 24));
  *v44 = 0;
  v44[1] = 0;
  *v26 = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v31, v43, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v44 = 0;
  v44[1] = 0;
  v45 = v65;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v26, v62, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v42(v31, 1, 1, v41);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(a10, (uint64_t)v31, v45);
  v46 = (uint64_t)v31;
  v47 = (uint64_t)v66;
  outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v45, v47, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v47, 1, v48) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v49 = 1;
    v50 = (uint64_t)v67;
  }
  else
  {
    v50 = (uint64_t)v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v67, v47, v41);
    v49 = 0;
  }
  v42((char *)v50, v49, 1, v41);
  outlined init with take of PommesSearchReason?(v50, (uint64_t)a9 + v32[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v51 = v68 & 1;
  *(double *)((char *)a9 + v32[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v45, v68 & 1);
  v53 = v71;
  v52 = v72;
  v54 = *(_QWORD *)(v71 + 24);
  v55 = (_QWORD *)((char *)a9 + v32[7]);
  *v55 = *(_QWORD *)(v71 + 16);
  v55[1] = v54;
  *(_QWORD *)((char *)a9 + v32[13]) = v53;
  outlined init with copy of MediaUserStateCenter?(v52, (uint64_t)a9 + v32[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v32[15]) = v70 & 1;
  v56 = v69;
  *(_QWORD *)((char *)a9 + v32[18]) = v69;
  v57 = v56;
  swift_bridgeObjectRetain();
  swift_retain();
  v58 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(a10);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v73, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v45, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v32[19]) = v58;
  *((_BYTE *)a9 + v32[20]) = v51;
  v60 = (_QWORD *)((char *)a9 + v32[21]);
  v61 = v75;
  *v60 = v74;
  v60[1] = v61;
  *(_QWORD *)((char *)a9 + v32[22]) = v76;
  *((_BYTE *)a9 + v32[16]) = 0;
  *((_BYTE *)a9 + v32[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:trpCandidateId:tcuId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:isOnlyUserInHome:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, char *a17, unsigned __int8 a18)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  int *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  id v68;
  uint64_t v69;
  uint64_t result;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v79 = a7;
  v81 = a5;
  v82 = a6;
  v74 = a3;
  v75 = a4;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v77 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v73 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v76 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v78 = (char *)&v73 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v73 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v73 - v35;
  v37 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v37[23]) = MEMORY[0x1E0DEE9D8];
  v38 = (_QWORD *)((char *)a9 + v37[5]);
  *v38 = a1;
  v38[1] = a2;
  v39 = (char *)a9 + v37[6];
  v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  v80 = a8;
  v41 = *(_QWORD *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v42 = (_QWORD *)((char *)a9 + v37[8]);
  *v42 = *(_QWORD *)(a8 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v42[1] = v41;
  v43 = (_QWORD *)((char *)a9 + v37[9]);
  *v43 = 0;
  v43[1] = 0;
  v44 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v45 = v75;
  *a9 = v74;
  a9[1] = v45;
  v46 = v82;
  a9[2] = v81;
  a9[3] = v46;
  outlined init with copy of MediaUserStateCenter?(a12, v44, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v47 = (uint64_t)a9 + v37[10];
  v81 = a10;
  outlined init with copy of MediaUserStateCenter?(a10, v47, &demangling cache variable for type metadata for PommesContext?);
  v82 = a12;
  outlined init with copy of MediaUserStateCenter?(a12, (uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v48 = type metadata accessor for TCUMappedNLResponse();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v36, 1, v48);
  swift_bridgeObjectRetain();
  if (v51 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v52 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v53 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v48);
    v52 = NLParseResponse.userParses.getter();

  }
  outlined init with copy of MediaUserStateCenter?(v82, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  if (v50(v34, 1, v48) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v54 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v26, 1, 1, v54);
  }
  else
  {
    v55 = (void *)TCUMappedNLResponse.nlResponse.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v48);
    NLParseResponse.fallbackParse.getter();

  }
  v56 = v78;
  v57 = (uint64_t)v76;
  LODWORD(v78) = a18;
  v75 = a16;
  v76 = a17;
  v74 = a15;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v52, (uint64_t)v26, v56);
  outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v56, v57, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v57, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v59 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v60 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v77, 1, 1, v59);
  }
  else
  {
    v61 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v62 = v57;
    v63 = v61;
    v64 = *(_QWORD *)(v61 - 8);
    v60 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v77, v62, v61);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v60, 0, 1, v63);
  }
  outlined init with take of PommesSearchReason?(v60, (uint64_t)a9 + v37[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(double *)((char *)a9 + v37[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v56, 0);
  v65 = v80;
  v66 = *(_QWORD *)(v80 + 24);
  v67 = (_QWORD *)((char *)a9 + v37[7]);
  *v67 = *(_QWORD *)(v80 + 16);
  v67[1] = v66;
  *(_QWORD *)((char *)a9 + v37[13]) = v65;
  outlined init with copy of MediaUserStateCenter?(a11, (uint64_t)a9 + v37[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v37[15]) = v79 & 1;
  *(_QWORD *)((char *)a9 + v37[18]) = a13;
  v68 = a13;
  swift_bridgeObjectRetain();
  swift_retain();
  v69 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v52);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v82, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined destroy of MediaUserStateCenter?(a11, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v56, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v37[19]) = v69;
  *((_BYTE *)a9 + v37[20]) = a14 & 1;
  v71 = (_QWORD *)((char *)a9 + v37[21]);
  v72 = v75;
  *v71 = v74;
  v71[1] = v72;
  *(_QWORD *)((char *)a9 + v37[22]) = v76;
  *((_BYTE *)a9 + v37[16]) = v78 & 1;
  *((_BYTE *)a9 + v37[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:isOnlyUserInHome:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, void *a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t result;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  int v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;

  v74 = a8;
  v72 = a5;
  v65 = a3;
  v66 = a4;
  v79 = a16;
  v77 = a14;
  v78 = a15;
  v76 = a13;
  v70 = a12;
  v71 = a11;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v68 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v67 = (char *)&v63 - v24;
  v25 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v25);
  v27 = (unint64_t *)((char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v29 = MEMORY[0x1E0C80A78](v28);
  v69 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v63 - v31;
  v33 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v33[23]) = MEMORY[0x1E0DEE9D8];
  v34 = (_QWORD *)((char *)a9 + v33[5]);
  *v34 = a1;
  v34[1] = a2;
  v35 = (char *)a9 + v33[6];
  v36 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v73 = a6;
  v37 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v38 = (_QWORD *)((char *)a9 + v33[8]);
  *v38 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v38[1] = v37;
  v39 = (_QWORD *)((char *)a9 + v33[9]);
  *v39 = 0;
  v39[1] = 0;
  v40 = (uint64_t)a9 + v33[10];
  v75 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v40, &demangling cache variable for type metadata for PommesContext?);
  v64 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  v41 = v66;
  *a9 = v65;
  a9[1] = v41;
  v42 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v66 = *(_QWORD *)(v42 - 8);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
  v43(v32, 1, 1, v42);
  v44 = (uint64_t)v27 + *(int *)(v25 + 20);
  v43((char *)v44, 1, 1, v42);
  v45 = (unint64_t *)((char *)v27 + *(int *)(v25 + 24));
  *v45 = 0;
  v45[1] = 0;
  *v27 = a10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v32, v44, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v45 = 0;
  v45[1] = 0;
  v46 = v67;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v27, v64, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v43(v32, 1, 1, v42);
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(a10, (uint64_t)v32, v46);
  v47 = (uint64_t)v32;
  v48 = (uint64_t)v68;
  outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v46, v48, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v50 = 1;
    v51 = (uint64_t)v69;
  }
  else
  {
    v51 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v69, v48, v42);
    v50 = 0;
  }
  v43((char *)v51, v50, 1, v42);
  outlined init with take of PommesSearchReason?(v51, (uint64_t)a9 + v33[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v52 = v70 & 1;
  *(double *)((char *)a9 + v33[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v46, v70 & 1);
  v54 = v73;
  v53 = v74;
  v55 = *(_QWORD *)(v73 + 24);
  v56 = (_QWORD *)((char *)a9 + v33[7]);
  *v56 = *(_QWORD *)(v73 + 16);
  v56[1] = v55;
  *(_QWORD *)((char *)a9 + v33[13]) = v54;
  outlined init with copy of MediaUserStateCenter?(v53, (uint64_t)a9 + v33[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v33[15]) = v72 & 1;
  v57 = v71;
  *(_QWORD *)((char *)a9 + v33[18]) = v71;
  v58 = v57;
  swift_bridgeObjectRetain();
  swift_retain();
  v59 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(a10);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v75, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v46, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v33[19]) = v59;
  *((_BYTE *)a9 + v33[20]) = v52;
  v61 = (_QWORD *)((char *)a9 + v33[21]);
  v62 = v77;
  *v61 = v76;
  v61[1] = v62;
  *(_QWORD *)((char *)a9 + v33[22]) = v78;
  *((_BYTE *)a9 + v33[16]) = v79 & 1;
  *((_BYTE *)a9 + v33[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:isOnlyUserInHome:fallbackParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD, _QWORD, _QWORD, _QWORD)@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, void *a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t result;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v72;
  char *v73;
  char *v74;
  int v75;
  void *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  v79 = a8;
  v80 = a2;
  v77 = a5;
  v70 = a3;
  v71 = a4;
  v85 = a17;
  v84 = a16;
  v82 = a14;
  v83 = a15;
  v81 = a13;
  v75 = a12;
  v76 = a11;
  v69 = a10;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v72 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v73 = (char *)&v69 - v24;
  v25 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v25);
  v27 = (unint64_t *)((char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v29 = MEMORY[0x1E0C80A78](v28);
  v74 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v69 - v31;
  v33 = (int *)type metadata accessor for PommesSearchRequest(0);
  *(_QWORD *)((char *)a9 + v33[23]) = MEMORY[0x1E0DEE9D8];
  v34 = (_QWORD *)((char *)a9 + v33[5]);
  v35 = v80;
  *v34 = a1;
  v34[1] = v35;
  v36 = (char *)a9 + v33[6];
  v37 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v78 = a6;
  v38 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v39 = *(_QWORD *)(a6 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  v40 = (_QWORD *)((char *)a9 + v33[8]);
  *v40 = v38;
  v40[1] = v39;
  v41 = (_QWORD *)((char *)a9 + v33[9]);
  *v41 = 0;
  v41[1] = 0;
  v42 = (uint64_t)a9 + v33[10];
  v80 = a7;
  outlined init with copy of MediaUserStateCenter?(a7, v42, &demangling cache variable for type metadata for PommesContext?);
  v43 = (uint64_t)a9
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
               + 48);
  v44 = v71;
  *a9 = v70;
  a9[1] = v44;
  outlined init with copy of MediaUserStateCenter?(a17, (uint64_t)v32, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v45 = (char *)v27 + *(int *)(v25 + 20);
  v46 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v70 = *(_QWORD *)(v46 - 8);
  v71 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v70 + 56);
  v71(v45, 1, 1, v46);
  v47 = (unint64_t *)((char *)v27 + *(int *)(v25 + 24));
  *v47 = 0;
  v47[1] = 0;
  v48 = v69;
  *v27 = v69;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = (uint64_t)v32;
  v50 = (uint64_t)v72;
  v51 = (uint64_t)v45;
  v52 = v48;
  outlined assign with take of MediaUserStateCenter?(v49, v51, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v47 = 0;
  v47[1] = 0;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v27, v43, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v53 = v73;
  static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v48, v85, v73);
  v54 = (uint64_t)v53;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v53, v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v50, 1, v55) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    v56 = 1;
    v57 = (uint64_t)v74;
  }
  else
  {
    v57 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v74, v50, v46);
    v56 = 0;
  }
  v71(v57, v56, 1, v46);
  outlined init with take of PommesSearchReason?(v57, (uint64_t)a9 + v33[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v58 = v75 & 1;
  *(double *)((char *)a9 + v33[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)(v54, v75 & 1);
  v60 = v78;
  v59 = v79;
  v61 = *(_QWORD *)(v78 + 24);
  v62 = (_QWORD *)((char *)a9 + v33[7]);
  *v62 = *(_QWORD *)(v78 + 16);
  v62[1] = v61;
  *(_QWORD *)((char *)a9 + v33[13]) = v60;
  outlined init with copy of MediaUserStateCenter?(v59, (uint64_t)a9 + v33[14], &demangling cache variable for type metadata for InputOrigin?);
  *((_BYTE *)a9 + v33[15]) = v77 & 1;
  v63 = v76;
  *(_QWORD *)((char *)a9 + v33[18]) = v76;
  v64 = v63;
  swift_bridgeObjectRetain();
  swift_retain();
  v65 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v52);
  swift_release();

  outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of MediaUserStateCenter?(v80, &demangling cache variable for type metadata for PommesContext?);
  swift_bridgeObjectRelease();
  result = outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  *(_QWORD *)((char *)a9 + v33[19]) = v65;
  *((_BYTE *)a9 + v33[20]) = v58;
  v67 = (_QWORD *)((char *)a9 + v33[21]);
  v68 = v82;
  *v67 = v81;
  v67[1] = v68;
  *(_QWORD *)((char *)a9 + v33[22]) = v83;
  *((_BYTE *)a9 + v33[16]) = v84 & 1;
  *((_BYTE *)a9 + v33[17]) = 0;
  return result;
}

uint64_t PommesSearchRequest.Builder.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;

  v2 = (int *)type metadata accessor for PommesSearchRequest.Builder(0);
  *a1 = 0;
  a1[1] = 0;
  v3 = (char *)a1 + v2[5];
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + v2[6];
  v6 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (_QWORD *)((char *)a1 + v2[7]);
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)((char *)a1 + v2[8]) = 0;
  *((_BYTE *)a1 + v2[9]) = 0;
  *((_BYTE *)a1 + v2[10]) = 0;
  v8 = (char *)a1 + v2[11];
  v9 = type metadata accessor for PommesContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (char *)a1 + v2[12];
  v11 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (char *)a1 + v2[13];
  v13 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)((char *)a1 + v2[14]) = MEMORY[0x1E0DEE9D8];
  v14 = (char *)a1 + v2[15];
  v15 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v17 = (_QWORD *)((char *)a1 + v2[16]);
  *v17 = 0;
  v17[1] = 0;
  *(_QWORD *)((char *)a1 + v2[17]) = 0;
  *((_BYTE *)a1 + v2[18]) = 0;
  v18 = (_QWORD *)((char *)a1 + v2[19]);
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)((char *)a1 + v2[20]) = 0;
  *((_BYTE *)a1 + v2[21]) = 0;
  return result;
}

uint64_t PommesSearchRequest.init(builder:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  BOOL v49;
  uint64_t v50;
  int *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  char *v58;
  int v59;
  void (*v60)(uint64_t *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, char *);
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(uint64_t *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (*v94)(uint64_t *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  void *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char v139;
  id v140;
  uint64_t v141;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  void (*v157)(uint64_t, uint64_t, uint64_t, char *);
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  int *v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v167 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1E0C80A78](v3);
  v154 = (uint64_t)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v152 = (uint64_t)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v153 = (char *)&v147 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v157 = (void (*)(uint64_t, uint64_t, uint64_t, char *))((char *)&v147 - v11);
  v12 = MEMORY[0x1E0C80A78](v10);
  v155 = (char *)&v147 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v160 = (uint64_t)&v147 - v15;
  MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)&v161 = (char *)&v147 - v16;
  v17 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)((char *)&v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v151 = (char *)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v156 = (char *)&v147 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v159 = (char *)&v147 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v147 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v147 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for PommesCandidateId();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (uint64_t *)((char *)&v147 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v34);
  v164 = (char *)&v147 - v37;
  v38 = type metadata accessor for PommesSearchRequest(0);
  v166 = *(_QWORD *)(v38 - 8);
  v39 = MEMORY[0x1E0C80A78](v38);
  v41 = (uint64_t *)((char *)&v147 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v165 = *(int *)(v39 + 92);
  *(_QWORD *)((char *)v41 + v165) = MEMORY[0x1E0DEE9D8];
  v42 = a1[1];
  if (!v42)
  {
    v51 = (int *)v39;
    v53 = (uint64_t)a1;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_1C2356000, v55, v56, "Attempting to create a PommesSearchRequest without an utterance", v57, 2u);
      MEMORY[0x1C3BBFF64](v57, -1, -1);
    }

    outlined destroy of PommesSearchRequest(v53, type metadata accessor for PommesSearchRequest.Builder);
    goto LABEL_45;
  }
  v43 = *a1;
  v162 = (int *)v39;
  v44 = (_QWORD *)((char *)v41 + *(int *)(v39 + 20));
  *v44 = v43;
  v44[1] = v42;
  v158 = v44;
  v150 = (int *)type metadata accessor for PommesSearchRequest.Builder(0);
  v45 = v150[6];
  v163 = a1;
  outlined init with copy of MediaUserStateCenter?((uint64_t)a1 + v45, (uint64_t)v31, &demangling cache variable for type metadata for PommesCandidateId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) != 1)
  {
    v58 = v164;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v164, v31, v32);
    (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(v36, v58, v32);
    v59 = (*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 88))(v36, v32);
    if (v59 == *MEMORY[0x1E0D988C8])
    {
      v148 = v33;
      v60 = *(void (**)(uint64_t *, uint64_t))(v33 + 96);
      v149 = v32;
      v60(v36, v32);
      v62 = *v36;
      v61 = v36[1];
      v154 = (uint64_t)v41
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                    + 48);
      *v41 = v62;
      v41[1] = v61;
      v63 = v150;
      v64 = v150[15];
      v152 = v150[14];
      v65 = (uint64_t)v163;
      v66 = *(_QWORD *)((char *)v163 + v152);
      v155 = (char *)v163 + v64;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v163 + v64, (uint64_t)v28, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      v67 = v65 + v63[16];
      v68 = *(_QWORD *)(v67 + 8);
      v153 = *(char **)v67;
      v69 = (uint64_t)v19 + *(int *)(v17 + 20);
      v70 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v151 = *(char **)(v70 - 8);
      v71 = (void (*)(uint64_t, uint64_t, uint64_t, char *))*((_QWORD *)v151 + 7);
      v156 = (char *)v70;
      v157 = v71;
      ((void (*)(uint64_t, uint64_t, uint64_t))v71)(v69, 1, 1);
      v72 = (_QWORD *)((char *)v19 + *(int *)(v17 + 24));
      *v72 = 0;
      v72[1] = 0;
      *v19 = v66;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined assign with take of MediaUserStateCenter?((uint64_t)v28, v69, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      swift_bridgeObjectRelease();
      v73 = v154;
      *v72 = v153;
      v72[1] = v68;
      v74 = v65;
      v75 = (uint64_t)v19;
      v76 = v152;
      outlined init with take of PerformanceUtil.Ticket(v75, v73, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
      type metadata accessor for PommesSearchRequest.ParseState(0);
      swift_storeEnumTagMultiPayload();
      v77 = (char *)v161;
      static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(*(_QWORD *)(v65 + v76), (uint64_t)v155, (char *)v161);
      v78 = v160;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v77, v160, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 48))(v78, 1, v79) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v78, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        v80 = 1;
        v51 = v162;
        v81 = (uint64_t)v159;
        v82 = v156;
      }
      else
      {
        v81 = (uint64_t)v159;
        v92 = v78;
        v93 = v156;
        (*((void (**)(char *, uint64_t, char *))v151 + 4))(v159, v92, v156);
        v80 = 0;
        v51 = v162;
        v82 = v93;
      }
      v157(v81, v80, 1, v82);
      outlined init with take of PommesSearchReason?(v81, (uint64_t)v41 + v51[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      *(double *)((char *)v41 + v51[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v77, *(_BYTE *)(v74 + v63[18]));
      v91 = *(_QWORD *)(v74 + v76);
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
    if (v59 == *MEMORY[0x1E0D988D0])
    {
      v148 = v33;
      v83 = *(void (**)(uint64_t *, uint64_t))(v33 + 96);
      v149 = v32;
      v83(v36, v32);
      v161 = *(_OWORD *)v36;
      v84 = v36[2];
      v85 = v36[3];
      v86 = (uint64_t)v41
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      *(_OWORD *)v41 = v161;
      v41[2] = v84;
      v41[3] = v85;
      v63 = v150;
      v74 = (uint64_t)v163;
      v87 = (uint64_t)v163 + v150[13];
      outlined init with copy of MediaUserStateCenter?(v87, v86, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      type metadata accessor for PommesSearchRequest.ParseState(0);
      swift_storeEnumTagMultiPayload();
      v88 = v154;
      outlined init with copy of MediaUserStateCenter?(v87, v154, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v89 = type metadata accessor for TCUMappedNLResponse();
      v90 = *(_QWORD *)(v89 - 8);
      LODWORD(v87) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89);
      swift_bridgeObjectRetain();
      v51 = v162;
      if ((_DWORD)v87 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v88, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v91 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v108 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v88, v89);
        v91 = NLParseResponse.userParses.getter();

      }
      v107 = (uint64_t)v156;
      v109 = (uint64_t)v157;
      v77 = v155;
      static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v91, v74 + v63[15], v155);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v77, v109, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 48))(v109, 1, v110) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v109, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        v105 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56);
        goto LABEL_27;
      }
      v120 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v121 = *(_QWORD *)(v120 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 32))(v107, v109, v120);
    }
    else
    {
      v51 = v162;
      v74 = (uint64_t)v163;
      if (v59 != *MEMORY[0x1E0D988C0])
      {
        v113 = v33;
        v114 = one-time initialization token for pommes;
        swift_bridgeObjectRetain();
        if (v114 != -1)
          swift_once();
        v115 = type metadata accessor for Logger();
        __swift_project_value_buffer(v115, (uint64_t)static Logger.pommes);
        v116 = Logger.logObject.getter();
        v117 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v116, v117))
        {
          v118 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v118 = 0;
          _os_log_impl(&dword_1C2356000, v116, v117, "A new PommesCandidateId case was added and used to construct a PommesSearchRequest without updating the initializer", v118, 2u);
          MEMORY[0x1C3BBFF64](v118, -1, -1);
        }

        v119 = *(void (**)(char *, uint64_t))(v113 + 8);
        v119(v164, v32);
        outlined destroy of PommesSearchRequest(v74, type metadata accessor for PommesSearchRequest.Builder);
        v119((char *)v36, v32);
        goto LABEL_44;
      }
      v148 = v33;
      v94 = *(void (**)(uint64_t *, uint64_t))(v33 + 96);
      v149 = v32;
      v94(v36, v32);
      v95 = *v36;
      v96 = v36[1];
      v63 = v150;
      v91 = *(_QWORD *)(v74 + v150[14]);
      v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      v98 = (uint64_t)v41 + *(int *)(v97 + 64);
      v99 = (_QWORD *)((char *)v41 + *(int *)(v97 + 80));
      *v41 = v95;
      v41[1] = v96;
      v41[2] = v91;
      v100 = v74 + v63[15];
      outlined init with copy of MediaUserStateCenter?(v100, v98, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      v101 = (_QWORD *)(v74 + v63[16]);
      v102 = v101[1];
      *v99 = *v101;
      v99[1] = v102;
      type metadata accessor for PommesSearchRequest.ParseState(0);
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v77 = v153;
      static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)(v91, v100, v153);
      v103 = v152;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v77, v152, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48))(v103, 1, v104) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v103, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        v105 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56);
        v107 = (uint64_t)v151;
LABEL_27:
        v111 = v107;
        v112 = 1;
LABEL_36:
        v106(v111, v112, 1, v105);
        outlined init with take of PommesSearchReason?(v107, (uint64_t)v41 + v51[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        *(double *)((char *)v41 + v51[12]) = specialized static PommesSearchRequest.resolvedScore(_:isFallback:)((uint64_t)v77, *(_BYTE *)(v74 + v63[18]));
LABEL_37:
        v122 = specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(v91);
        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?((uint64_t)v77, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        *(_QWORD *)((char *)v41 + v51[19]) = v122;
        v123 = *(_QWORD *)(v74 + v63[8]);
        if (v123)
        {
          v124 = *(void (**)(char *, uint64_t))(v148 + 8);
          swift_retain();
          v124(v164, v149);
          *(_QWORD *)((char *)v41 + v51[13]) = v123;
          v125 = *(_QWORD *)(v123 + 24);
          v126 = (_QWORD *)((char *)v41 + v51[7]);
          *v126 = *(_QWORD *)(v123 + 16);
          v126[1] = v125;
          v127 = *(_QWORD *)(v123 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
          v128 = *(_QWORD *)(v123 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
          v129 = (_QWORD *)((char *)v41 + v51[8]);
          *v129 = v127;
          v129[1] = v128;
          v130 = (uint64_t *)(v74 + v63[7]);
          v131 = *v130;
          v132 = v130[1];
          v133 = (_QWORD *)((char *)v41 + v51[9]);
          *v133 = v131;
          v133[1] = v132;
          outlined init with copy of MediaUserStateCenter?(v74 + v63[11], (uint64_t)v41 + v51[10], &demangling cache variable for type metadata for PommesContext?);
          outlined init with copy of MediaUserStateCenter?(v74 + v63[12], (uint64_t)v41 + v51[14], &demangling cache variable for type metadata for InputOrigin?);
          v134 = *(void **)(v74 + v63[17]);
          *(_QWORD *)((char *)v41 + v51[18]) = v134;
          *((_BYTE *)v41 + v51[20]) = *(_BYTE *)(v74 + v63[18]);
          *((_BYTE *)v41 + v51[15]) = *(_BYTE *)(v74 + v63[9]);
          *((_BYTE *)v41 + v51[16]) = *(_BYTE *)(v74 + v63[10]);
          v135 = (uint64_t *)(v74 + v63[19]);
          v136 = *v135;
          v137 = v135[1];
          v138 = (_QWORD *)((char *)v41 + v51[21]);
          *v138 = v136;
          v138[1] = v137;
          *(_QWORD *)((char *)v41 + v51[22]) = *(_QWORD *)(v74 + v63[20]);
          outlined init with copy of MediaUserStateCenter?(v74 + v63[5], (uint64_t)v41 + v51[6], &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
          v139 = *(_BYTE *)(v74 + v63[21]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v140 = v134;
          outlined destroy of PommesSearchRequest(v74, type metadata accessor for PommesSearchRequest.Builder);
          *((_BYTE *)v41 + v51[17]) = v139;
          v141 = v167;
          outlined init with copy of PommesSearchRequest((uint64_t)v41, v167, type metadata accessor for PommesSearchRequest);
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v166 + 56))(v141, 0, 1, v51);
          return outlined destroy of PommesSearchRequest((uint64_t)v41, type metadata accessor for PommesSearchRequest);
        }
        if (one-time initialization token for pommes != -1)
          swift_once();
        v143 = type metadata accessor for Logger();
        __swift_project_value_buffer(v143, (uint64_t)static Logger.pommes);
        v144 = Logger.logObject.getter();
        v145 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v144, v145))
        {
          v146 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v146 = 0;
          _os_log_impl(&dword_1C2356000, v144, v145, "Attempting to create a PommesSearchRequest without a requestContext", v146, 2u);
          MEMORY[0x1C3BBFF64](v146, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v148 + 8))(v164, v149);
        outlined destroy of PommesSearchRequest(v74, type metadata accessor for PommesSearchRequest.Builder);
        outlined destroy of PommesSearchRequest((uint64_t)v41, type metadata accessor for PommesSearchRequest.ParseState);
        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?((uint64_t)v41 + v51[11], &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        goto LABEL_44;
      }
      v120 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v121 = *(_QWORD *)(v120 - 8);
      v107 = (uint64_t)v151;
      (*(void (**)(char *, uint64_t, uint64_t))(v121 + 32))(v151, v103, v120);
    }
    v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56);
    v111 = v107;
    v112 = 0;
    v105 = v120;
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  outlined destroy of MediaUserStateCenter?((uint64_t)v31, &demangling cache variable for type metadata for PommesCandidateId?);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.fault.getter();
  v49 = os_log_type_enabled(v47, v48);
  v51 = v162;
  v50 = (uint64_t)v163;
  if (v49)
  {
    v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v52 = 0;
    _os_log_impl(&dword_1C2356000, v47, v48, "Attempting to create a PommesSearchRequest without a candidateId", v52, 2u);
    MEMORY[0x1C3BBFF64](v52, -1, -1);
  }

  outlined destroy of PommesSearchRequest(v50, type metadata accessor for PommesSearchRequest.Builder);
LABEL_44:
  swift_bridgeObjectRelease();
LABEL_45:
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v166 + 56))(v167, 1, 1, v51);
}

uint64_t PommesSearchRequest.Builder.utterance.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.Builder.utterance.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.utterance.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.rewriteMessage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
}

uint64_t PommesSearchRequest.Builder.rewriteMessage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
}

uint64_t (*PommesSearchRequest.Builder.rewriteMessage.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.candidateId.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.rewriteMessage.getter(type metadata accessor for PommesSearchRequest.Builder, &demangling cache variable for type metadata for PommesCandidateId?, a1);
}

uint64_t PommesSearchRequest.rewriteMessage.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = a1(0);
  return outlined init with copy of MediaUserStateCenter?(v3 + *(int *)(v6 + 24), a3, a2);
}

uint64_t PommesSearchRequest.Builder.candidateId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for PommesCandidateId?);
}

uint64_t (*PommesSearchRequest.Builder.candidateId.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.rootRequestId.getter()
{
  return PommesSearchRequest.assistantId.getter(type metadata accessor for PommesSearchRequest.Builder);
}

uint64_t PommesSearchRequest.assistantId.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PommesSearchRequest.Builder.rootRequestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.rootRequestId.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.requestContext.getter()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return swift_retain();
}

uint64_t PommesSearchRequest.Builder.requestContext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 32);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.requestContext.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isMultiUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 36));
}

uint64_t PommesSearchRequest.Builder.isMultiUser.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isMultiUser.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isOnlyUserInHome.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 40));
}

uint64_t PommesSearchRequest.Builder.isOnlyUserInHome.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isOnlyUserInHome.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.pommesContext.getter@<X0>(uint64_t a1@<X8>)
{
  return PommesSearchRequest.delegatedUDA.getter(type metadata accessor for PommesSearchRequest.Builder, &demangling cache variable for type metadata for PommesContext?, a1);
}

uint64_t PommesSearchRequest.delegatedUDA.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = a1(0);
  return outlined init with copy of MediaUserStateCenter?(v3 + *(int *)(v6 + 44), a3, a2);
}

uint64_t PommesSearchRequest.Builder.pommesContext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 44), &demangling cache variable for type metadata for PommesContext?);
}

uint64_t (*PommesSearchRequest.Builder.pommesContext.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 48), a1, &demangling cache variable for type metadata for InputOrigin?);
}

uint64_t PommesSearchRequest.Builder.inputOrigin.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 48), &demangling cache variable for type metadata for InputOrigin?);
}

uint64_t (*PommesSearchRequest.Builder.inputOrigin.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.parseResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 52), a1, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
}

uint64_t PommesSearchRequest.Builder.parseResponse.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 52), (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
}

uint64_t (*PommesSearchRequest.Builder.parseResponse.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.userParses.getter()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequest.Builder.userParses.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 56);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.userParses.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 60), a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
}

uint64_t PommesSearchRequest.Builder.fallbackParse.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchRequest.Builder(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 60), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
}

uint64_t (*PommesSearchRequest.Builder.fallbackParse.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.responseVariantResult.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.Builder.responseVariantResult.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 64));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.responseVariantResult.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

void *PommesSearchRequest.Builder.asrSpeechPackage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 68));
  v2 = v1;
  return v1;
}

void PommesSearchRequest.Builder.asrSpeechPackage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 68);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*PommesSearchRequest.Builder.asrSpeechPackage.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isFallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 72));
}

uint64_t PommesSearchRequest.Builder.isFallback.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isFallback.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.sharedUserId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 76));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequest.Builder.sharedUserId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 76));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.sharedUserId.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.userIdentityClassification.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 80));
}

uint64_t PommesSearchRequest.Builder.userIdentityClassification.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(_QWORD *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.userIdentityClassification.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.Builder.isGestureBased.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesSearchRequest.Builder(0) + 84));
}

uint64_t PommesSearchRequest.Builder.isGestureBased.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesSearchRequest.Builder(0);
  *(_BYTE *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

uint64_t (*PommesSearchRequest.Builder.isGestureBased.modify())()
{
  type metadata accessor for PommesSearchRequest.Builder(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesSearchRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t (*v21)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  int *v53;
  uint64_t *v54;
  void *v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  Swift::String v86;
  Swift::String v87;
  id v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  Swift::String v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  Swift::String v98;
  id v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  _QWORD v114[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v109);
  v6 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v108);
  v8 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v106 - v13;
  v15 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (uint64_t *)((char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v20, v21);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v110 = v4;
  v111 = v2;
  v107 = v6;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v23 = *v20;
      v24 = (void *)v20[1];
      swift_bridgeObjectRelease();
      v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)v20 + *(int *)(v25 + 64), (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v114[0] = 0;
      v114[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v114[0] = 0xD000000000000010;
      v114[1] = 0x80000001C2509C90;
      v26._countAndFlagsBits = v23;
      v26._object = v24;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27 = (void *)v114[1];
      v106 = v114[0];
      v114[0] = 0;
      v114[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v114[0] = 0xD000000000000010;
      v114[1] = 0x80000001C2509CB0;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v28 = type metadata accessor for TCUMappedNLResponse();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v12, 1, v28) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v30 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v48 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v28);
        v30 = NLParseResponse.userParses.getter();

      }
      v49 = *(void **)(v30 + 16);
      swift_bridgeObjectRelease();
      v112 = v49;
      v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._countAndFlagsBits = 0x2973286D65746920;
      v51._object = (void *)0xE900000000000029;
      String.append(_:)(v51);
      v39 = v114[0];
      v38 = (void *)v114[1];
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v35 = v106;
    }
    else
    {
      v40 = *v20;
      v41 = (void *)v20[1];
      v42 = v20[2];
      v43 = (uint64_t)v20
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      swift_bridgeObjectRelease();
      strcpy((char *)v114, "refId: ");
      v114[1] = 0xE700000000000000;
      v44._countAndFlagsBits = v40;
      v44._object = v41;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v35 = v114[0];
      v27 = (void *)v114[1];
      v114[0] = 0;
      v114[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      strcpy((char *)v114, "userParses: (");
      HIWORD(v114[1]) = -4864;
      v45 = *(void **)(v42 + 16);
      swift_bridgeObjectRelease();
      v112 = v45;
      v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = 0x7328736D65746920;
      v47._object = (void *)0xEA00000000002929;
      String.append(_:)(v47);
      v39 = v114[0];
      v38 = (void *)v114[1];
      outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    v31 = *v20;
    v32 = (void *)v20[1];
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v20 + *(int *)(v33 + 48), (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v114[0] = 0;
    v114[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v114[0] = 0xD000000000000013;
    v114[1] = 0x80000001C2509CD0;
    v34._countAndFlagsBits = v31;
    v34._object = v32;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35 = v114[0];
    v27 = (void *)v114[1];
    v114[0] = 0;
    v114[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v114, "userParses: (");
    HIWORD(v114[1]) = -4864;
    v36._countAndFlagsBits = NLXResultCandidate.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 41;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    v39 = v114[0];
    v38 = (void *)v114[1];
    outlined destroy of PommesSearchRequest((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  v114[0] = 0;
  v114[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(252);
  v52._countAndFlagsBits = 0x636E617265747475;
  v52._object = (void *)0xEC00000022203A65;
  String.append(_:)(v52);
  v53 = (int *)type metadata accessor for PommesSearchRequest(0);
  v54 = (uint64_t *)(v1 + v53[5]);
  v56 = *v54;
  v55 = (void *)v54[1];
  swift_bridgeObjectRetain();
  v57._countAndFlagsBits = v56;
  v57._object = v55;
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v58._countAndFlagsBits = 0x6575716572202C22;
  v58._object = (void *)0xEE00203A64497473;
  String.append(_:)(v58);
  v59 = v1 + v53[8];
  v60 = *(_QWORD *)(v59 + 8);
  v112 = *(id *)v59;
  v113 = v60;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v61._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._countAndFlagsBits = 8236;
  v62._object = (void *)0xE200000000000000;
  String.append(_:)(v62);
  v63._countAndFlagsBits = v35;
  v63._object = v27;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  v64._object = (void *)0x80000001C2509B90;
  v64._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v64);
  outlined init with copy of MediaUserStateCenter?(v1 + v53[10], (uint64_t)v8, &demangling cache variable for type metadata for PommesContext?);
  v65._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  v66._object = (void *)0x80000001C2509BB0;
  v66._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v66);
  outlined init with copy of MediaUserStateCenter?(v1 + v53[11], (uint64_t)v107, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v67._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v68._countAndFlagsBits = 2108450;
  v68._object = (void *)0xE300000000000000;
  String.append(_:)(v68);
  v69._countAndFlagsBits = v39;
  v69._object = v38;
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  v70._countAndFlagsBits = 0x6F6353637370202CLL;
  v70._object = (void *)0xED000022203A6572;
  String.append(_:)(v70);
  v71._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  v72._object = (void *)0x80000001C2509BD0;
  v72._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v72);
  v73 = v1 + v53[7];
  v74 = *(_QWORD *)(v73 + 8);
  v112 = *(id *)v73;
  v113 = v74;
  swift_bridgeObjectRetain();
  v75._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  v76._countAndFlagsBits = 0x4F7475706E69202CLL;
  v76._object = (void *)0xEF203A6E69676972;
  String.append(_:)(v76);
  outlined init with copy of MediaUserStateCenter?(v1 + v53[14], (uint64_t)v110, &demangling cache variable for type metadata for InputOrigin?);
  v77._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  v78._countAndFlagsBits = 0x746C754D7369202CLL;
  v78._object = (void *)0xEF203A7265735569;
  String.append(_:)(v78);
  if (*(_BYTE *)(v1 + v53[15]))
    v79 = 1702195828;
  else
    v79 = 0x65736C6166;
  if (*(_BYTE *)(v1 + v53[15]))
    v80 = 0xE400000000000000;
  else
    v80 = 0xE500000000000000;
  v81 = v80;
  String.append(_:)(*(Swift::String *)&v79);
  swift_bridgeObjectRelease();
  v82._countAndFlagsBits = 0xD000000000000012;
  v82._object = (void *)0x80000001C2509BF0;
  String.append(_:)(v82);
  v83 = *(_QWORD *)(v1 + v53[13]);
  if (v83)
  {
    v84 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v83 + 240))();
  }
  else
  {
    v84 = 0;
    v85 = 0;
  }
  v112 = v84;
  v113 = v85;
  v86._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87._countAndFlagsBits = 0xD000000000000014;
  v87._object = (void *)0x80000001C2509C10;
  String.append(_:)(v87);
  v112 = *(id *)(v1 + v53[18]);
  v88 = v112;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFSpeechPackage?);
  v89._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._countAndFlagsBits = 0x6C6C61467369202CLL;
  v90._object = (void *)0xEE00203A6B636162;
  String.append(_:)(v90);
  if (*(_BYTE *)(v1 + v53[20]))
    v91 = 1702195828;
  else
    v91 = 0x65736C6166;
  if (*(_BYTE *)(v1 + v53[20]))
    v92 = 0xE400000000000000;
  else
    v92 = 0xE500000000000000;
  v93 = v92;
  String.append(_:)(*(Swift::String *)&v91);
  swift_bridgeObjectRelease();
  v94._object = (void *)0x80000001C2509C30;
  v94._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v94);
  if (*(_QWORD *)(v1 + v53[21] + 8))
    v95 = 0xD000000000000011;
  else
    v95 = 7104878;
  if (*(_QWORD *)(v1 + v53[21] + 8))
    v96 = 0x80000001C2509C70;
  else
    v96 = 0xE300000000000000;
  v97 = v96;
  String.append(_:)(*(Swift::String *)&v95);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = 0xD00000000000001ELL;
  v98._object = (void *)0x80000001C2509C50;
  String.append(_:)(v98);
  v99 = (id)AFUserIdentityClassficationGetName();
  if (v99)
  {
    v100 = v99;
    v101 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v103 = v102;

  }
  else
  {
    v101 = 0;
    v103 = 0;
  }
  v112 = v101;
  v113 = v103;
  v104._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v104);
  swift_bridgeObjectRelease();
  return v114[0];
}

Swift::String_optional __swiftcall PommesSearchRequest.aceReferenceID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(_QWORD);
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String_optional result;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for PommesSearchRequest(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t *)(v0 + *(int *)(v3 + 36));
  v7 = *v6;
  v8 = (void *)v6[1];
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v5, v9);
  if (v8)
  {
    v10 = v8;
  }
  else
  {
    v11 = (uint64_t *)&v5[*(int *)(v2 + 32)];
    v7 = *v11;
    v10 = (void *)v11[1];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  outlined destroy of PommesSearchRequest((uint64_t)v5, type metadata accessor for PommesSearchRequest);
  v12 = v7;
  v13 = v10;
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

uint64_t type metadata accessor for PommesSearchRequest.Builder(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequest.Builder);
}

_QWORD *initializeBufferWithCopyOfBuffer for PommesSearchRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  id v93;
  char *__dst;
  uint64_t v96;
  char *v97;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v17 = a2[1];
    *a1 = *a2;
    a1[1] = v17;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    v19 = *(int *)(v18 + 64);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v36 = *(int *)(v18 + 80);
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v25 = a2[1];
    *a1 = *a2;
    a1[1] = v25;
    swift_bridgeObjectRetain();
    v26 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
    v29 = type metadata accessor for NLXResultCandidate();
    v30 = *(int *)(v29 + 20);
    __dst = &v27[v30];
    v96 = v29;
    v31 = &v28[v30];
    v32 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    swift_bridgeObjectRetain();
    if (v34(v31, 1, v32))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
    }
    v39 = *(int *)(v96 + 24);
    v37 = &v27[v39];
    v38 = &v28[v39];
LABEL_16:
    v40 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v40;
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for TCUMappedNLResponse();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
LABEL_17:
  swift_storeEnumTagMultiPayload();
  v41 = a3[5];
  v42 = a3[6];
  v43 = (_QWORD *)((char *)a1 + v41);
  v44 = (_QWORD *)((char *)a2 + v41);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  v46 = (char *)a1 + v42;
  v47 = (char *)a2 + v42;
  v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  swift_bridgeObjectRetain();
  if (v50(v47, 1, v48))
  {
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  v52 = a3[7];
  v53 = a3[8];
  v54 = (_QWORD *)((char *)a1 + v52);
  v55 = (_QWORD *)((char *)a2 + v52);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = (_QWORD *)((char *)a1 + v53);
  v58 = (_QWORD *)((char *)a2 + v53);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  v60 = a3[9];
  v61 = a3[10];
  v62 = (_QWORD *)((char *)a1 + v60);
  v63 = (_QWORD *)((char *)a2 + v60);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v97 = (char *)a1 + v61;
  v65 = (char *)a2 + v61;
  v66 = type metadata accessor for PommesContext();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v68(v65, 1, v66))
  {
    v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v97, v65, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v97, v65, v66);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v97, 0, 1, v66);
  }
  v70 = a3[11];
  v71 = (char *)a1 + v70;
  v72 = (char *)a2 + v70;
  v73 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v74 = *(_QWORD *)(v73 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
  {
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  v76 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v76) = *(_QWORD *)((char *)a2 + v76);
  v77 = a3[14];
  v78 = (char *)a1 + v77;
  v79 = (char *)a2 + v77;
  v80 = type metadata accessor for InputOrigin();
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
  swift_retain();
  if (v82(v79, 1, v80))
  {
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v79, v80);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
  }
  v84 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + v84) = *((_BYTE *)a2 + v84);
  v85 = a3[18];
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  v86 = *(void **)((char *)a2 + v85);
  *(_QWORD *)((char *)a1 + v85) = v86;
  v87 = a3[20];
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  *((_BYTE *)a1 + v87) = *((_BYTE *)a2 + v87);
  v88 = a3[21];
  v89 = a3[22];
  v90 = (_QWORD *)((char *)a1 + v88);
  v91 = (_QWORD *)((char *)a2 + v88);
  v92 = v91[1];
  *v90 = *v91;
  v90[1] = v92;
  *(_QWORD *)((char *)a1 + v89) = *(_QWORD *)((char *)a2 + v89);
  *(_QWORD *)((char *)a1 + a3[23]) = *(_QWORD *)((char *)a2 + a3[23]);
  v93 = v86;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PommesSearchRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  id v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v90;
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest((uint64_t)a1, type metadata accessor for PommesSearchRequest.ParseState);
    type metadata accessor for PommesSearchRequest.ParseState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      v14 = *(int *)(v13 + 64);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v30 = *(int *)(v13 + 80);
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                    + 64);
        v8 = (char *)a1 + v7;
        v9 = (char *)a2 + v7;
        v10 = type metadata accessor for TCUMappedNLResponse();
        v11 = *(_QWORD *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        {
          v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        goto LABEL_16;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
      v23 = type metadata accessor for NLXResultCandidate();
      v24 = *(int *)(v23 + 20);
      v90 = v23;
      __dst = &v21[v24];
      v25 = &v22[v24];
      v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v27 = *(_QWORD *)(v26 - 8);
      v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      swift_bridgeObjectRetain();
      if (v28(v25, 1, v26))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      v33 = *(int *)(v90 + 24);
      v31 = &v21[v33];
      v32 = &v22[v33];
    }
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
    swift_bridgeObjectRetain();
LABEL_16:
    swift_storeEnumTagMultiPayload();
  }
  v34 = a3[5];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = a3[6];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v40);
LABEL_22:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 24))(v38, v39, v40);
LABEL_23:
  v46 = a3[7];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  *v47 = *v48;
  v47[1] = v48[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = a3[8];
  v50 = (_QWORD *)((char *)a1 + v49);
  v51 = (_QWORD *)((char *)a2 + v49);
  *v50 = *v51;
  v50[1] = v51[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = a3[9];
  v53 = (_QWORD *)((char *)a1 + v52);
  v54 = (_QWORD *)((char *)a2 + v52);
  *v53 = *v54;
  v53[1] = v54[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = a3[10];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = type metadata accessor for PommesContext();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
LABEL_28:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 24))(v56, v57, v58);
LABEL_29:
  v64 = a3[11];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  v67 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  v70 = v69(v65, 1, v67);
  v71 = v69(v66, 1, v67);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v66, v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v65, v67);
LABEL_34:
    v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v68 + 24))(v65, v66, v67);
LABEL_35:
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_retain();
  swift_release();
  v73 = a3[14];
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = type metadata accessor for InputOrigin();
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
  v79 = v78(v74, 1, v76);
  v80 = v78(v75, 1, v76);
  if (!v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v77 + 24))(v74, v75, v76);
      goto LABEL_41;
    }
    (*(void (**)(char *, uint64_t))(v77 + 8))(v74, v76);
    goto LABEL_40;
  }
  if (v80)
  {
LABEL_40:
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v75, v76);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
LABEL_41:
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  v82 = a3[18];
  v83 = *(void **)((char *)a1 + v82);
  v84 = *(void **)((char *)a2 + v82);
  *(_QWORD *)((char *)a1 + v82) = v84;
  v85 = v84;

  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  v86 = a3[21];
  v87 = (_QWORD *)((char *)a1 + v86);
  v88 = (_QWORD *)((char *)a2 + v86);
  *v87 = *v88;
  v87[1] = v88[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[22]) = *(_QWORD *)((char *)a2 + a3[22]);
  *(_QWORD *)((char *)a1 + a3[23]) = *(_QWORD *)((char *)a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PommesSearchRequest(uint64_t a1, uint64_t a2, int *a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *__dst;

  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    v15 = *(int *)(v14 + 64);
    v16 = (void *)(a1 + v15);
    v17 = (const void *)(a2 + v15);
    v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    *(_OWORD *)(a1 + *(int *)(v14 + 80)) = *(_OWORD *)(a2 + *(int *)(v14 + 80));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                + 64);
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    v11 = type metadata accessor for TCUMappedNLResponse();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    v22 = a1 + v21;
    v23 = a2 + v21;
    *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
    v24 = type metadata accessor for NLXResultCandidate();
    v25 = *(int *)(v24 + 20);
    __dst = (void *)(v22 + v25);
    v26 = (const void *)(v23 + v25);
    v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(__dst, v26, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
    *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
  }
  swift_storeEnumTagMultiPayload();
  v30 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  v33 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v36 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  v37 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v38 = (void *)(a1 + v37);
  v39 = (const void *)(a2 + v37);
  v40 = type metadata accessor for PommesContext();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v43 = a3[11];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  v46 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 32))(v44, v45, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v49 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
  v50 = a3[14];
  v51 = (void *)(a1 + v50);
  v52 = (const void *)(a2 + v50);
  v53 = type metadata accessor for InputOrigin();
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v54 + 32))(v51, v52, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  v56 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v56) = *(_BYTE *)(a2 + v56);
  v57 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v57) = *(_QWORD *)(a2 + v57);
  v58 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v58) = *(_BYTE *)(a2 + v58);
  v59 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + v59) = *(_QWORD *)(a2 + v59);
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  return a1;
}

uint64_t assignWithTake for PommesSearchRequest(uint64_t a1, uint64_t a2, int *a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(void *, uint64_t, uint64_t);
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *__dst;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest(a1, type metadata accessor for PommesSearchRequest.ParseState);
    type metadata accessor for PommesSearchRequest.ParseState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      v15 = *(int *)(v14 + 64);
      v16 = (void *)(a1 + v15);
      v17 = (const void *)(a2 + v15);
      v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      *(_OWORD *)(a1 + *(int *)(v14 + 80)) = *(_OWORD *)(a2 + *(int *)(v14 + 80));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      v9 = (void *)(a1 + v8);
      v10 = (const void *)(a2 + v8);
      v11 = type metadata accessor for TCUMappedNLResponse();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      v22 = a1 + v21;
      v23 = a2 + v21;
      *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
      v24 = type metadata accessor for NLXResultCandidate();
      v25 = *(int *)(v24 + 20);
      __dst = (void *)(v22 + v25);
      v26 = (const void *)(v23 + v25);
      v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(__dst, v26, v27);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
      }
      *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  v30 = a3[5];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[6];
  v36 = (void *)(a1 + v35);
  v37 = (void *)(a2 + v35);
  v38 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
LABEL_21:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 40))(v36, v37, v38);
LABEL_22:
  v44 = a3[7];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (uint64_t *)(a2 + v44);
  v48 = *v46;
  v47 = v46[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  v49 = a3[8];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  v54 = a3[9];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (uint64_t *)(a2 + v54);
  v58 = *v56;
  v57 = v56[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  v59 = a3[10];
  v60 = (void *)(a1 + v59);
  v61 = (void *)(a2 + v59);
  v62 = type metadata accessor for PommesContext();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 32))(v60, v61, v62);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v63 + 8))(v60, v62);
LABEL_27:
    v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v63 + 40))(v60, v61, v62);
LABEL_28:
  v68 = a3[11];
  v69 = (void *)(a1 + v68);
  v70 = (void *)(a2 + v68);
  v71 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
  v74 = v73(v69, 1, v71);
  v75 = v73(v70, 1, v71);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v72 + 32))(v69, v70, v71);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v75)
  {
    (*(void (**)(void *, uint64_t))(v72 + 8))(v69, v71);
LABEL_33:
    v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v72 + 40))(v69, v70, v71);
LABEL_34:
  v77 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v77) = *(_QWORD *)(a2 + v77);
  swift_release();
  v78 = a3[14];
  v79 = (void *)(a1 + v78);
  v80 = (void *)(a2 + v78);
  v81 = type metadata accessor for InputOrigin();
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 48);
  v84 = v83(v79, 1, v81);
  v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      (*(void (**)(void *, void *, uint64_t))(v82 + 40))(v79, v80, v81);
      goto LABEL_40;
    }
    (*(void (**)(void *, uint64_t))(v82 + 8))(v79, v81);
    goto LABEL_39;
  }
  if (v85)
  {
LABEL_39:
    v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_40;
  }
  (*(void (**)(void *, void *, uint64_t))(v82 + 32))(v79, v80, v81);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
LABEL_40:
  v87 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v87) = *(_BYTE *)(a2 + v87);
  v88 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v89 = *(void **)(a1 + v88);
  *(_QWORD *)(a1 + v88) = *(_QWORD *)(a2 + v88);

  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  swift_bridgeObjectRelease();
  v90 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v91 = (_QWORD *)(a1 + v90);
  v92 = (uint64_t *)(a2 + v90);
  v94 = *v92;
  v93 = v92[1];
  *v91 = v94;
  v91[1] = v93;
  swift_bridgeObjectRelease();
  v95 = a3[23];
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  *(_QWORD *)(a1 + v95) = *(_QWORD *)(a2 + v95);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C24D13B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for PommesSearchRequest.ParseState(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[10];
      }
      else
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
        {
          v8 = v17;
          v15 = a3[11];
        }
        else
        {
          v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
          v14 = *(_QWORD *)(v8 - 8);
          v15 = a3[14];
        }
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1C24D14D8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = type metadata accessor for PommesSearchRequest.ParseState(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return result;
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[10];
      }
      else
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[11];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[14];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PommesSearchRequest()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for PommesSearchRequest.ParseState(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?, (void (*)(uint64_t))MEMORY[0x1E0D6F5E0]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for PommesContext?, (void (*)(uint64_t))MEMORY[0x1E0D98A90]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, (void (*)(uint64_t))MEMORY[0x1E0D9F8F8]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for InputOrigin?, (void (*)(uint64_t))MEMORY[0x1E0DA7D50]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PommesSearchRequest.ParseState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      v18 = *(int *)(v17 + 64);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      v35 = *(int *)(v17 + 80);
      v36 = (uint64_t *)((char *)a1 + v35);
      v37 = (uint64_t *)((char *)a2 + v35);
      v38 = v37[1];
      *v36 = *v37;
      v36[1] = v38;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for TCUMappedNLResponse();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      swift_bridgeObjectRetain();
      v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      *(uint64_t *)((char *)a1 + v25) = *(uint64_t *)((char *)a2 + v25);
      v28 = type metadata accessor for NLXResultCandidate();
      v29 = *(int *)(v28 + 20);
      __dst = &v26[v29];
      v30 = &v27[v29];
      v31 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v32 = *(_QWORD *)(v31 - 8);
      v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      if (v33(v30, 1, v31))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(__dst, v30, v31);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
      }
      v39 = *(int *)(v28 + 24);
      v40 = &v26[v39];
      v41 = &v27[v39];
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = v42;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PommesSearchRequest.ParseState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                  + 64);
      v8 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v9 = *(_QWORD *)(v8 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = a1
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      v11 = type metadata accessor for TCUMappedNLResponse();
      v12 = *(_QWORD *)(v11 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      break;
    case 0:
      swift_bridgeObjectRelease();
      v3 = a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                  + 48);
      swift_bridgeObjectRelease();
      v4 = v3 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
      v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v6 = *(_QWORD *)(v5 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
      return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *assignWithCopy for PommesSearchRequest.ParseState(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest((uint64_t)a1, type metadata accessor for PommesSearchRequest.ParseState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      v12 = *(int *)(v11 + 64);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v28 = *(int *)(v11 + 80);
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                    + 64);
        v6 = (char *)a1 + v5;
        v7 = (char *)a2 + v5;
        v8 = type metadata accessor for TCUMappedNLResponse();
        v9 = *(_QWORD *)(v8 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
        }
        goto LABEL_16;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
      v21 = type metadata accessor for NLXResultCandidate();
      v22 = *(int *)(v21 + 20);
      __dst = &v19[v22];
      v23 = &v20[v22];
      v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_bridgeObjectRetain();
      if (v26(v23, 1, v24))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
      }
      v31 = *(int *)(v21 + 24);
      v29 = &v19[v31];
      v30 = &v20[v31];
    }
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
    swift_bridgeObjectRetain();
LABEL_16:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for PommesSearchRequest.ParseState(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    v13 = *(int *)(v12 + 64);
    v14 = (void *)(a1 + v13);
    v15 = (const void *)(a2 + v13);
    v16 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_OWORD *)(a1 + *(int *)(v12 + 80)) = *(_OWORD *)(a2 + *(int *)(v12 + 80));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                + 64);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    v9 = type metadata accessor for TCUMappedNLResponse();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    v20 = a1 + v19;
    v21 = a2 + v19;
    *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
    v22 = type metadata accessor for NLXResultCandidate();
    v23 = *(int *)(v22 + 20);
    v24 = (void *)(v20 + v23);
    v25 = (const void *)(v21 + v23);
    v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    *(_OWORD *)(v20 + *(int *)(v22 + 24)) = *(_OWORD *)(v21 + *(int *)(v22 + 24));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for PommesSearchRequest.ParseState(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest(a1, type metadata accessor for PommesSearchRequest.ParseState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
      v13 = *(int *)(v12 + 64);
      v14 = (void *)(a1 + v13);
      v15 = (const void *)(a2 + v13);
      v16 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      *(_OWORD *)(a1 + *(int *)(v12 + 80)) = *(_OWORD *)(a2 + *(int *)(v12 + 80));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      v7 = (void *)(a1 + v6);
      v8 = (const void *)(a2 + v6);
      v9 = type metadata accessor for TCUMappedNLResponse();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                   + 48);
      v20 = a1 + v19;
      v21 = a2 + v19;
      *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
      v22 = type metadata accessor for NLXResultCandidate();
      v23 = *(int *)(v22 + 20);
      v24 = (void *)(v20 + v23);
      v25 = (const void *)(v21 + v23);
      v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *(_OWORD *)(v20 + *(int *)(v22 + 24)) = *(_OWORD *)(v21 + *(int *)(v22 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata completion function for PommesSearchRequest.ParseState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  char v5;
  char *v6;
  char *v7;
  char *v8;

  type metadata accessor for NLXResultCandidate();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v6 = &v5;
    type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for TCUMappedNLResponse?, (void (*)(uint64_t))MEMORY[0x1E0D9ED00]);
    if (v1 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      v7 = &v4;
      type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, (void (*)(uint64_t))MEMORY[0x1E0D9F8F8]);
      if (v2 <= 0x3F)
      {
        swift_getTupleTypeLayout();
        v8 = &v3;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for PommesSearchRequest.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for PommesCandidateId();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v22 = a3[7];
    v23 = a3[8];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (_QWORD *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    *(_QWORD *)((char *)v4 + v23) = *(_QWORD *)((char *)a2 + v23);
    v27 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v27) = *((_BYTE *)a2 + v27);
    v28 = a3[11];
    v29 = (char *)v4 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for PommesContext();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v33(v30, 1, v31))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v35 = a3[12];
    v36 = (char *)v4 + v35;
    v37 = (char *)a2 + v35;
    v38 = type metadata accessor for InputOrigin();
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v41 = a3[13];
    v42 = (char *)v4 + v41;
    v43 = (char *)a2 + v41;
    v44 = type metadata accessor for TCUMappedNLResponse();
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v47 = a3[15];
    *(_QWORD *)((char *)v4 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
    v48 = (char *)v4 + v47;
    v49 = (char *)a2 + v47;
    v50 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain();
    if (v52(v49, 1, v50))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    v54 = a3[16];
    v55 = a3[17];
    v56 = (_QWORD *)((char *)v4 + v54);
    v57 = (_QWORD *)((char *)a2 + v54);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    v59 = *(void **)((char *)a2 + v55);
    *(_QWORD *)((char *)v4 + v55) = v59;
    v60 = a3[19];
    *((_BYTE *)v4 + a3[18]) = *((_BYTE *)a2 + a3[18]);
    v61 = (_QWORD *)((char *)v4 + v60);
    v62 = (_QWORD *)((char *)a2 + v60);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = a3[21];
    *(_QWORD *)((char *)v4 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
    *((_BYTE *)v4 + v64) = *((_BYTE *)a2 + v64);
    swift_bridgeObjectRetain();
    v65 = v59;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PommesSearchRequest.Builder(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for PommesCandidateId();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  v10 = a1 + a2[11];
  v11 = type metadata accessor for PommesContext();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v13 = a1 + a2[12];
  v14 = type metadata accessor for InputOrigin();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v16 = a1 + a2[13];
  v17 = type metadata accessor for TCUMappedNLResponse();
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_bridgeObjectRelease();
  v19 = a1 + a2[15];
  v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v21 = *(_QWORD *)(v20 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PommesSearchRequest.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for PommesCandidateId();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[7];
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v20);
  v23 = (_QWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  v25 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
  v26 = a3[11];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for PommesContext();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v31(v28, 1, v29))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v33 = a3[12];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for InputOrigin();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v39 = a3[13];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for TCUMappedNLResponse();
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v45 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  swift_bridgeObjectRetain();
  if (v50(v47, 1, v48))
  {
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  v52 = a3[16];
  v53 = a3[17];
  v54 = (_QWORD *)((char *)a1 + v52);
  v55 = (_QWORD *)((char *)a2 + v52);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = *(void **)((char *)a2 + v53);
  *(_QWORD *)((char *)a1 + v53) = v57;
  v58 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  v61 = v60[1];
  *v59 = *v60;
  v59[1] = v61;
  v62 = a3[21];
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  *((_BYTE *)a1 + v62) = *((_BYTE *)a2 + v62);
  swift_bridgeObjectRetain();
  v63 = v57;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PommesSearchRequest.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for PommesCandidateId();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_13:
  v24 = a3[7];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v27 = a3[11];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for PommesContext();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_18:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v28, v29, v30);
LABEL_19:
  v36 = a3[12];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for InputOrigin();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
LABEL_24:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
LABEL_25:
  v45 = a3[13];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for TCUMappedNLResponse();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
LABEL_30:
    v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 24))(v46, v47, v48);
LABEL_31:
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = a3[15];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 24))(v55, v56, v57);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v57);
    goto LABEL_36;
  }
  if (v61)
  {
LABEL_36:
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
LABEL_37:
  v63 = a3[16];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  *v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v66 = a3[17];
  v67 = *(void **)((char *)a1 + v66);
  v68 = *(void **)((char *)a2 + v66);
  *(_QWORD *)((char *)a1 + v66) = v68;
  v69 = v68;

  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v70 = a3[19];
  v71 = (_QWORD *)((char *)a1 + v70);
  v72 = (_QWORD *)((char *)a2 + v70);
  *v71 = *v72;
  v71[1] = v72[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  *((_BYTE *)a1 + a3[21]) = *((_BYTE *)a2 + a3[21]);
  return a1;
}

_OWORD *initializeWithTake for PommesSearchRequest.Builder(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for PommesCandidateId();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v19 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
  v20 = a3[11];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for PommesContext();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = a3[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for InputOrigin();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[13];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for TCUMappedNLResponse();
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v44 = a3[17];
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + v44) = *(_QWORD *)((char *)a2 + v44);
  v45 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *(_OWORD *)((char *)a1 + v45) = *(_OWORD *)((char *)a2 + v45);
  v46 = a3[21];
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  *((_BYTE *)a1 + v46) = *((_BYTE *)a2 + v46);
  return a1;
}

_QWORD *assignWithTake for PommesSearchRequest.Builder(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for PommesCandidateId();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  v25 = a3[7];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  v30 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
  v31 = a3[11];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for PommesContext();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
LABEL_18:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 40))(v32, v33, v34);
LABEL_19:
  v40 = a3[12];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = type metadata accessor for InputOrigin();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v43);
LABEL_24:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v44 + 40))(v41, v42, v43);
LABEL_25:
  v49 = a3[13];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = type metadata accessor for TCUMappedNLResponse();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
LABEL_30:
    v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
LABEL_31:
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  v58 = a3[15];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  v61 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  v64 = v63(v59, 1, v61);
  v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v59, v60, v61);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
    goto LABEL_36;
  }
  if (v65)
  {
LABEL_36:
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
LABEL_37:
  v67 = a3[16];
  v68 = (_QWORD *)((char *)a1 + v67);
  v69 = (_QWORD *)((char *)a2 + v67);
  v71 = *v69;
  v70 = v69[1];
  *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  v72 = a3[17];
  v73 = *(void **)((char *)a1 + v72);
  *(_QWORD *)((char *)a1 + v72) = *(_QWORD *)((char *)a2 + v72);

  v74 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v75 = (_QWORD *)((char *)a1 + v74);
  v76 = (_QWORD *)((char *)a2 + v74);
  v78 = *v76;
  v77 = v76[1];
  *v75 = v78;
  v75[1] = v77;
  swift_bridgeObjectRelease();
  v79 = a3[21];
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  *((_BYTE *)a1 + v79) = *((_BYTE *)a2 + v79);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequest.Builder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C24D3FDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v7 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v13;
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[15];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + a3[14]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesSearchRequest.Builder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C24D4134(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[11];
      }
      else
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
        v9 = *(_QWORD *)(v14 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v14;
          v11 = a4[12];
        }
        else
        {
          result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          v9 = *(_QWORD *)(result - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = result;
            v11 = a4[13];
          }
          else
          {
            if (a3 == 0x7FFFFFFF)
            {
              *(_QWORD *)(a1 + a4[14]) = (a2 - 1);
              return result;
            }
            v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
            v9 = *(_QWORD *)(v10 - 8);
            v11 = a4[15];
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void type metadata completion function for PommesSearchRequest.Builder()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?, (void (*)(uint64_t))MEMORY[0x1E0D6F5E0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for PommesCandidateId?, (void (*)(uint64_t))MEMORY[0x1E0D988D8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for PommesContext?, (void (*)(uint64_t))MEMORY[0x1E0D98A90]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for InputOrigin?, (void (*)(uint64_t))MEMORY[0x1E0DA7D50]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for TCUMappedNLResponse?, (void (*)(uint64_t))MEMORY[0x1E0D9ED00]);
          if (v4 <= 0x3F)
          {
            type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, (void (*)(uint64_t))MEMORY[0x1E0D9F8F8]);
            if (v5 <= 0x3F)
              swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    result = MEMORY[0x1C3BBFE74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF21SiriInformationSearch14PommesResponseC_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  type metadata accessor for PommesResponse();
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSo10CLLocationC_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocation);
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t PommesLocationInfo.init(location:accuracyAuthorization:locationNeedsUpdateForAccuracy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

void LocationStatus.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v1);
  outlined init with copy of LocationStatus(v0, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_1C24D4824 + 4 * byte_1C2500900[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1C24D4824()
{
  uint64_t v0;
  uint64_t v1;

  outlined destroy of PommesSearchRequest(v1, type metadata accessor for LocationStatus);
  return v0 + 13;
}

uint64_t type metadata accessor for LocationStatus(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for LocationStatus);
}

id PommesLocationInfo.location.getter()
{
  id *v0;

  return *v0;
}

uint64_t PommesLocationInfo.accuracyAuthorization.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PommesLocationInfo.locationNeedsUpdateForAccuracy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

void PommesLocationInfo.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(id *)v0;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

uint64_t static PommesLocationInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 16);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & (v2 == v4) & (v3 ^ v5 ^ 1);
}

Swift::Int PommesLocationInfo.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  void *v2;
  Swift::UInt8 v3;
  id v4;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  v4 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesLocationInfo()
{
  uint64_t v0;
  Swift::UInt v1;
  void *v2;
  Swift::UInt8 v3;
  id v4;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  v4 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PommesLocationInfo()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt8 v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(id *)v0;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesLocationInfo()
{
  uint64_t v0;
  Swift::UInt v1;
  void *v2;
  Swift::UInt8 v3;
  id v4;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  v4 = v2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 16);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & (v2 == v4) & (v3 ^ v5 ^ 1);
}

BOOL static LocationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LocationError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int LocationError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static LocationShiftingError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void LocationShiftingError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int LocationShiftingError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

id one-time initialization function for shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PommesLocationManager(0)), sel_init);
  static PommesLocationManager.shared = (uint64_t)result;
  return result;
}

id PommesLocationManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static PommesLocationManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static PommesLocationManager.shared;
}

id PommesLocationManager.locationShifter.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D27178]), sel_init);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void PommesLocationManager.locationShifter.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter) = a1;

}

void (*PommesLocationManager.locationShifter.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = PommesLocationManager.locationShifter.getter();
  return PommesLocationManager.locationShifter.modify;
}

void PommesLocationManager.locationShifter.modify(uint64_t *a1, uint64_t a2)
{
  PommesLocationManager.locationShifter.modify(a1, a2, &OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter);
}

id PommesLocationManager.locationShiftQueue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v15[4];

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v7);
  v8 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue;
  v9 = *(void **)(v0
                + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue);
  if (v9)
  {
    v10 = *(id *)(v0
                + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue);
  }
  else
  {
    v15[2] = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    static DispatchQoS.userInitiated.getter();
    v15[3] = MEMORY[0x1E0DEE9D8];
    v15[1] = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF8D0], v2);
    v11 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    v12 = *(void **)(v0 + v8);
    *(_QWORD *)(v1 + v8) = v11;
    v10 = v11;

    v9 = 0;
  }
  v13 = v9;
  return v10;
}

void PommesLocationManager.locationShiftQueue.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1
                + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue) = a1;

}

void (*PommesLocationManager.locationShiftQueue.modify(id *a1))(uint64_t *a1, uint64_t a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = PommesLocationManager.locationShiftQueue.getter();
  return PommesLocationManager.locationShiftQueue.modify;
}

void PommesLocationManager.locationShiftQueue.modify(uint64_t *a1, uint64_t a2)
{
  PommesLocationManager.locationShifter.modify(a1, a2, &OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue);
}

void PommesLocationManager.locationShifter.modify(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(void **)(v3 + *a3);
  *(_QWORD *)(v3 + *a3) = v4;

}

id PommesLocationManager.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  objc_class *ObjectType;
  objc_super v21;
  uint64_t v22;

  ObjectType = (objc_class *)swift_getObjectType();
  v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)&v0[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue] = 0;
  v18 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue;
  v17[1] = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v7 = v0;
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v19);
  *(_QWORD *)&v0[v18] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LocationStatus(0);
  swift_storeEnumTagMultiPayload();
  v8 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusPassthrough;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
  swift_allocObject();
  *(_QWORD *)&v7[v8] = PassthroughSubject.init()();
  *(_QWORD *)&v7[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait] = 0x4020000000000000;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager] = 0;

  v21.receiver = v7;
  v21.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v21, sel_init);
  v10 = one-time initialization token for pommes;
  v11 = v9;
  if (v10 != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1C2356000, v13, v14, "PommesLocationManager init successfully", v15, 2u);
    MEMORY[0x1C3BBFF64](v15, -1, -1);
  }

  return v11;
}

void PommesLocationManager.status.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  type metadata accessor for LocationStatus(0);
  v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();

}

void key path getter for PommesLocationManager.status : PommesLocationManager(_QWORD *a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*a1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  type metadata accessor for LocationStatus(0);
  v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();

}

uint64_t key path setter for PommesLocationManager.status : PommesLocationManager(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(a1, (uint64_t)v4);
  return PommesLocationManager.status.setter((uint64_t)v4);
}

uint64_t PommesLocationManager.status.setter(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocationStatus(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)&v1[OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue];
  outlined init with copy of LocationStatus(a1, (uint64_t)v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v1;
  outlined init with take of LocationStatus((uint64_t)v9, v12 + v11);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = partial apply for closure #1 in PommesLocationManager.status.setter;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_20;
  v14 = _Block_copy(aBlock);
  v15 = v10;
  v1;
  swift_retain();
  swift_release();
  dispatch_sync(v15, v14);

  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of LocationStatus(a1, (uint64_t)v5);
    swift_storeEnumTagMultiPayload();
    PassthroughSubject.send(_:)();
    outlined destroy of PommesSearchRequest(a1, type metadata accessor for LocationStatus);
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PommesLocationManager.status.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager__status;
  swift_beginAccess();
  outlined assign with copy of LocationStatus(a2, v3);
  return swift_endAccess();
}

void (*PommesLocationManager.status.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  id v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for LocationStatus(0) - 8) + 64);
  a1[1] = malloc(v3);
  a1[2] = malloc(v3);
  v4 = *(id *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  OS_dispatch_queue.sync<A>(execute:)();

  return PommesLocationManager.status.modify;
}

void PommesLocationManager.status.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of LocationStatus((uint64_t)v3, (uint64_t)v2);
    PommesLocationManager.status.setter((uint64_t)v2);
    outlined destroy of PommesSearchRequest((uint64_t)v3, type metadata accessor for LocationStatus);
  }
  else
  {
    PommesLocationManager.status.setter((uint64_t)v3);
  }
  free(v3);
  free(v2);
}

uint64_t PommesLocationManager.statusPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher);
  }
  else
  {
    v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<Result<LocationStatus, LocationError>, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>, MEMORY[0x1E0C95F48]);
    v2 = Publisher.eraseToAnyPublisher()();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t PommesLocationManager.statusPublisher.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher) = a1;
  return swift_release();
}

uint64_t (*PommesLocationManager.statusPublisher.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = PommesLocationManager.statusPublisher.getter();
  return PommesLocationManager.statusPublisher.modify;
}

uint64_t PommesLocationManager.statusPublisher.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher) = *a1;
  return swift_release();
}

double PommesLocationManager.locationRequestDebounceWait.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t PommesLocationManager.locationRequestDebounceWait.setter(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PommesLocationManager.locationRequestDebounceWait.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

id PommesLocationManager.manager.getter()
{
  int *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void (*v11)(void **__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(_QWORD *@<X8>));
  void *v12;
  void *v13;
  id v14;
  int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager;
  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  if (v8)
  {
    v9 = *(id *)((char *)v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  }
  else
  {
    if (one-time initialization token for shared != -1)
      v4 = swift_once();
    v10 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v4);
    v17 = v1;
    Date.init()();
    v11 = *(void (**)(void **__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(_QWORD *@<X8>)))(*(_QWORD *)v10 + 200);
    v17 = &v16;
    v18 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocationManager);
    LOBYTE(v16) = 2;
    v11(&v20, 0xD00000000000002FLL, 0x80000001C2509D40, 0, v6, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 157, "manager", 7, v16, partial apply for closure #1 in closure #1 in PommesLocationManager.manager.getter);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v12 = v20;
    v13 = *(void **)((char *)v1 + v7);
    *(_QWORD *)((char *)v1 + v7) = v20;
    v9 = v12;

    v8 = 0;
  }
  v14 = v8;
  return v9;
}

void key path setter for PommesLocationManager.manager : PommesLocationManager(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v2 = *a1;
  v3 = *a2;
  v4 = *(void **)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager) = *a1;
  v5 = v2;

  v6 = PommesLocationManager.manager.getter();
  objc_msgSend(v6, sel_setDelegate_, v3);

}

void PommesLocationManager.manager.setter(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager) = a1;
  v3 = a1;

  v4 = PommesLocationManager.manager.getter();
  objc_msgSend(v4, sel_setDelegate_, v1);

}

void closure #1 in closure #1 in PommesLocationManager.manager.getter(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v4 = (id)AFEffectiveSiriBundleForLocation();
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v5 = (void *)static OS_dispatch_queue.main.getter();
  v6 = objc_allocWithZone(MEMORY[0x1E0C9E3C8]);
  v7 = a1;
  v8 = objc_msgSend(v6, sel_initWithEffectiveBundle_delegate_onQueue_, v4, v7, v5);

  if (v8)
    *a2 = v8;
  else
    __break(1u);
}

void (*PommesLocationManager.manager.modify(id *a1))(uint64_t a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = PommesLocationManager.manager.getter();
  return PommesLocationManager.manager.modify;
}

void PommesLocationManager.manager.modify(uint64_t a1, char a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(void **)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___manager) = *(_QWORD *)a1;
  v6 = v3;
  v9 = v6;
  if ((a2 & 1) != 0)
  {
    v7 = v6;

    v8 = PommesLocationManager.manager.getter();
    objc_msgSend(v8, sel_setDelegate_, v4);

  }
  else
  {

    v7 = PommesLocationManager.manager.getter();
    objc_msgSend(v7, sel_setDelegate_, v4);
  }

}

uint64_t PommesLocationManager.fetchLocation()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v0;
  v6 = v0;
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in PommesLocationManager.fetchLocation(), (uint64_t)v5);
}

uint64_t closure #1 in PommesLocationManager.fetchLocation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[3] = a1;
  v4[4] = a4;
  v4[5] = type metadata accessor for LocationStatus(0);
  v4[6] = swift_task_alloc();
  v4[7] = type metadata accessor for PerformanceUtil.Ticket(0);
  v4[8] = swift_task_alloc();
  v5 = type metadata accessor for Date();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = swift_task_alloc();
  type metadata accessor for SignpostToken();
  v4[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PommesLocationManager.fetchLocation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void (*v19)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(_QWORD *@<X8>), uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  int v42;
  uint64_t v43;

  if (one-time initialization token for loc != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v3, (uint64_t)static Signposter.loc);
  OSSignposter.begin(name:context:)("locationManager.startup", 23, 2u, v2, v1);
  v4 = PommesLocationManager.manager.getter();
  LODWORD(v2) = objc_msgSend(v4, sel_locationServicesAvailable);

  if (!(_DWORD)v2)
  {
    v28 = *(_QWORD *)(v0 + 48);
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter(v28);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1C2356000, v30, v31, "Location Services not enabled", v32, 2u);
      MEMORY[0x1C3BBFF64](v32, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 96);

    v33 = v12;
    v34 = 0x616C696176616E75;
    v35 = 0xEB00000000656C62;
    goto LABEL_18;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v6 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = static PerformanceUtil.shared;
  v10 = swift_task_alloc();
  *(_QWORD *)(v10 + 16) = v8;
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, void (*)(BOOL *@<X8>), uint64_t, _QWORD))(*(_QWORD *)v9 + 200))(0xD000000000000031, 0x80000001C250A060, 0, v5, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 176, "fetchLocation()", 15, 2, partial apply for closure #1 in PommesLocationManager.setCachedLocation(location:), v10, MEMORY[0x1E0DEAFA0]);
  v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11(v5, v7);
  swift_task_dealloc();
  if (*(_BYTE *)(v0 + 104) != 1)
  {
    v36 = *(_QWORD *)(v0 + 48);
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter(v36);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1C2356000, v38, v39, "Location use is not authorized. This may be due to Siri location permission reset. POMMES will trigger an authorization prompt if AFFeatureFlags.isSiriLocationServicesPromptingEnabled() is enabled.", v40, 2u);
      MEMORY[0x1C3BBFF64](v40, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 96);

    v35 = 0x80000001C250A0B0;
    v33 = v12;
    v34 = 0xD000000000000018;
LABEL_18:
    OSSignposter.end(token:message:)(v33, v34, v35);
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 64);
  v43 = *(_QWORD *)(v0 + 72);
  v15 = *(int **)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 32);
  v17 = static PerformanceUtil.shared;
  v18 = swift_task_alloc();
  *(_QWORD *)(v18 + 16) = v16;
  Date.init()();
  v19 = *(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(_QWORD *@<X8>), uint64_t, uint64_t))(*(_QWORD *)v17 + 200);
  type metadata accessor for CLAccuracyAuthorization(0);
  LOBYTE(v42) = 2;
  v19(0xD00000000000002ELL, 0x80000001C250A0D0, 0, v13, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 180, "fetchLocation()", 15, v42, partial apply for closure #2 in closure #1 in PommesLocationManager.fetchLocation(), v18, v20);
  v11(v13, v43);
  swift_task_dealloc();
  v21 = *(_QWORD *)(v0 + 16);
  Date.init()();
  v22 = v14 + v15[5];
  *(_QWORD *)v22 = "SiriInformationSearch/PommesLocationManager.swift";
  *(_QWORD *)(v22 + 8) = 49;
  *(_BYTE *)(v22 + 16) = 2;
  *(_QWORD *)(v14 + v15[6]) = 181;
  v23 = v14 + v15[7];
  *(_QWORD *)v23 = "fetchLocation()";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000032);
  v25 = (uint64_t *)(v14 + v15[8]);
  *v25 = v24;
  v25[1] = v26;
  v27 = PommesLocationManager.manager.getter();
  PommesLocationManager.requestLocation(with:accuracyAuthorization:didAuthorizationChange:)(v27, v21, 0);

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v14, 0);
  outlined destroy of PommesSearchRequest(v14, type metadata accessor for PerformanceUtil.Ticket);
LABEL_19:
  outlined destroy of PommesSearchRequest(v12, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  **(_BYTE **)(v0 + 24) = 1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL PommesLocationManager.isLocationUseAuthorized(status:)(int a1)
{
  return (a1 - 3) < 2;
}

id PommesLocationManager.requestLocation(with:accuracyAuthorization:didAuthorizationChange:)(void *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  id v21;
  id v22;
  int EnumCaseMultiPayload;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v35;
  double v36;
  double v37;
  void (*v38)(char *, uint64_t);
  double *v39;
  double v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint8_t *v44;
  uint8_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v4 = v3;
  v51 = a3;
  v56 = a2;
  v6 = type metadata accessor for Date();
  v54 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v52 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v55 = (char *)&v49 - v9;
  v10 = type metadata accessor for LocationStatus(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (void **)((char *)&v49 - v14);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v53 = v6;
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, v17, v18, "Requesting location", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

  v20 = objc_msgSend(a1, sel_setDesiredAccuracy_, *MEMORY[0x1E0C9E4A8]);
  MEMORY[0x1E0C80A78](v20);
  *(&v49 - 2) = v4;
  v22 = v21;
  OS_dispatch_queue.sync<A>(execute:)();

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 2) < 4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
    *(_QWORD *)v13 = v56;
    v13[8] = 0;
    Date.init()();
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v13);
    return objc_msgSend(a1, sel_requestLocation);
  }
  v50 = v4;
  if (!EnumCaseMultiPayload)
  {
    v24 = *v15;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1C2356000, v25, v26, "Location is already available, keep cached location until we have update", v27, 2u);
      MEMORY[0x1C3BBFF64](v27, -1, -1);
    }

    v28 = v56;
    *(_QWORD *)v13 = v24;
    *((_QWORD *)v13 + 1) = v28;
    v13[16] = v51 & 1;
    swift_storeEnumTagMultiPayload();
    v29 = v24;
    PommesLocationManager.status.setter((uint64_t)v13);

    return objc_msgSend(a1, sel_requestLocation);
  }
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
  v31 = v53;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v55, (char *)v15 + *(int *)(v30 + 48), v53);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1C2356000, v32, v33, "Location fetch is already pending, checking to see if we should re-fetch", v34, 2u);
    MEMORY[0x1C3BBFF64](v34, -1, -1);
  }

  v35 = v52;
  Date.init()();
  Date.timeIntervalSince(_:)();
  v37 = v36;
  v38 = *(void (**)(char *, uint64_t))(v54 + 8);
  v38(v35, v31);
  v39 = (double *)(v50 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_locationRequestDebounceWait);
  swift_beginAccess();
  v40 = *v39;
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  v43 = os_log_type_enabled(v41, v42);
  if (v40 < v37)
  {
    if (v43)
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_1C2356000, v41, v42, "Pending request has timed out, requesting location again", v44, 2u);
      MEMORY[0x1C3BBFF64](v44, -1, -1);
    }

    *(_QWORD *)v13 = v56;
    v13[8] = 0;
    Date.init()();
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v13);
    v38(v55, v31);
    return objc_msgSend(a1, sel_requestLocation);
  }
  if (v43)
  {
    v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v46 = 0;
    _os_log_impl(&dword_1C2356000, v41, v42, "Pending request has not timed out, not requesting location again", v46, 2u);
    MEMORY[0x1C3BBFF64](v46, -1, -1);
  }

  v47 = &v13[*(int *)(v30 + 48)];
  v48 = v55;
  *(_QWORD *)v13 = v56;
  v13[8] = 0;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v47, v48, v31);
  swift_storeEnumTagMultiPayload();
  PommesLocationManager.status.setter((uint64_t)v13);
  return (id)((uint64_t (*)(char *, uint64_t))v38)(v48, v31);
}

uint64_t closure #2 in PommesLocationManager.setCachedLocation(location:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v9;

  v2 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1;
  v6 = PommesLocationManager.manager.getter();
  v7 = objc_msgSend(v6, sel_accuracyAuthorization);

  *(_QWORD *)v4 = v5;
  *((_QWORD *)v4 + 1) = v7;
  v4[16] = 0;
  swift_storeEnumTagMultiPayload();
  return PommesLocationManager.status.setter((uint64_t)v4);
}

uint64_t PommesLocationManager.shiftedLocation(for:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v10;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  v12 = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in PommesLocationManager.shiftedLocation(for:completion:)partial apply, (uint64_t)v11);
  swift_release();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
}

void PommesLocationManager.cachedLocationInfo()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  char *v3;

  v1 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v1);
  v2 = *(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  OS_dispatch_queue.sync<A>(execute:)();

  v3 = (char *)sub_1C24D6EC4 + 4 * byte_1C2500906[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1C24D6EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v2;
  *(_WORD *)(v0 + 16) = v3;
}

Swift::String_optional __swiftcall PommesLocationManager.countryCode()()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String_optional result;

  v0 = (id)_AFPreferencesCountryCode();
  if (v0)
  {
    v1 = v0;
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v3;

  }
  else
  {
    v2 = 0;
    v4 = 0;
  }
  v5 = v2;
  v6 = v4;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t PommesLocationManager.shiftedLocation(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t PommesLocationManager.shiftedLocation(for:)()
{
  _QWORD *v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  _QWORD *v18;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t (*v24)(uint64_t);

  v1 = (void *)v0[3];
  objc_msgSend(v1, sel_coordinate);
  v3 = v2;
  objc_msgSend(v1, sel_coordinate);
  v5 = v4;
  if (objc_msgSend(v1, sel_referenceFrame) == 2)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_17;
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    v10 = "Location shifting is not required for location, reference frame is set to ChinaShifted";
LABEL_16:
    _os_log_impl(&dword_1C2356000, v7, v8, v10, v9, 2u);
    MEMORY[0x1C3BBFF64](v9, -1, -1);
LABEL_17:
    v21 = (void *)v0[3];

    v22 = v0[3];
    v24 = (uint64_t (*)(uint64_t))v0[1];
    v23 = v21;
    return v24(v22);
  }
  if (!objc_msgSend((id)objc_opt_self(), sel_isLocationShiftRequiredForCoordinate_, v3, v5))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_17;
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    v10 = "Location shifting is not required for location";
    goto LABEL_16;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2356000, v12, v13, "Location shifting is required for location", v14, 2u);
    MEMORY[0x1C3BBFF64](v14, -1, -1);
  }
  v16 = v0[3];
  v15 = v0[4];

  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocation);
  v17 = (double *)swift_task_alloc();
  v0[5] = v17;
  *((_QWORD *)v17 + 2) = v15;
  v17[3] = v3;
  v17[4] = v5;
  *((_QWORD *)v17 + 5) = v16;
  v18 = (_QWORD *)swift_task_alloc();
  v0[6] = v18;
  *v18 = v0;
  v18[1] = PommesLocationManager.shiftedLocation(for:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 64) = a4;
  *(double *)(v6 + 48) = a5;
  *(double *)(v6 + 56) = a6;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 24) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v6 + 72) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (void *)v0[8];
  v1 = v0[9];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (void *)v0[5];
  v6 = type metadata accessor for TaskPriority();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v4;
  v8[6] = v3;
  v8[7] = v2;
  v9 = v5;
  v10 = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSo10CLLocationC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:), (uint64_t)v8);
  outlined destroy of MediaUserStateCenter?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFSo10CLLocationC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:), v11);
  outlined destroy of MediaUserStateCenter?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v12 = (_QWORD *)swift_task_alloc();
  v0[10] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<CLLocation, Error>);
  *v12 = v0;
  v12[1] = closure #1 in PommesLocationManager.shiftedLocation(for:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  id v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(uint64_t **)(v0 + 32);
    **(_QWORD **)(v0 + 24) = v1;
    v3 = *v2;
    v4 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocation);
  }
  else
  {
    v5 = *(void **)(v0 + 64);
    v6 = *(uint64_t **)(v0 + 32);
    **(_QWORD **)(v0 + 24) = v5;
    v3 = *v6;
    v4 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocation);
    v7 = v5;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1C3BBEFE0](v3, v4, v8, MEMORY[0x1E0DEDB38]);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(v0 + 32);
  v2 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocation);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1C3BBEFE0](v1, v2, v3, MEMORY[0x1E0DEDB38]);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 48) = a7;
  *(double *)(v7 + 32) = a2;
  *(double *)(v7 + 40) = a3;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a6;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[6];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[3];
  v5 = (_QWORD *)swift_task_alloc();
  v0[7] = v5;
  v5[2] = v4;
  v5[3] = v3;
  v5[4] = v2;
  v5[5] = v1;
  v6 = (_QWORD *)swift_task_alloc();
  v0[8] = v6;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocation);
  *v6 = v0;
  v6[1] = closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  double v17;
  double v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t aBlock;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2356000, v14, v15, "Calling Location shifting async API", v16, 2u);
    MEMORY[0x1C3BBFF64](v16, -1, -1);
  }

  v34 = PommesLocationManager.locationShifter.getter();
  objc_msgSend(a3, sel_horizontalAccuracy);
  v18 = v17;
  v33 = a2;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v32 = a1;
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a3;
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v22(v21 + ((v20 + 24) & ~v20), (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v39 = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  v40 = v21;
  aBlock = MEMORY[0x1E0C809B0];
  v36 = 1107296256;
  v37 = thunk for @escaping @callee_guaranteed (@unowned GEOLocationCoordinate2D, @unowned Double) -> ();
  v38 = &block_descriptor_79;
  v23 = _Block_copy(&aBlock);
  v24 = a3;
  swift_release();
  v39 = closure #2 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  v40 = 0;
  v25 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v36 = 1107296256;
  v37 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v38 = &block_descriptor_82;
  v26 = _Block_copy(&aBlock);
  v19((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v10);
  v27 = swift_allocObject();
  v22(v27 + ((v20 + 16) & ~v20), (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v39 = partial apply for closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  v40 = v27;
  aBlock = v25;
  v36 = 1107296256;
  v37 = thunk for @escaping @callee_guaranteed (@guaranteed AFSharedUserInfo?) -> ();
  v38 = &block_descriptor_88;
  v28 = _Block_copy(&aBlock);
  swift_release();
  v29 = PommesLocationManager.locationShiftQueue.getter();
  v30 = v34;
  objc_msgSend(v34, sel_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_, v23, v26, v28, v29, a4, a5, v18);

  _Block_release(v28);
  _Block_release(v26);
  _Block_release(v23);

}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(void *a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  id v21;
  Class isa;
  id v23;
  _QWORD v25[2];

  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1C2356000, v13, v14, "Received shifted coordinates", v15, 2u);
    MEMORY[0x1C3BBFF64](v15, -1, -1);
  }

  objc_msgSend(a1, sel_altitude);
  v17 = v16;
  objc_msgSend(a1, sel_verticalAccuracy);
  v19 = v18;
  v20 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v21 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v23 = objc_msgSend(v21, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, isa, a2, a3, v17, a4, v19);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  objc_msgSend(v23, sel_setReferenceFrame_, 2);
  v25[1] = v23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned GEOLocationCoordinate2D, @unowned Double) -> ()(uint64_t a1, double a2, double a3, double a4)
{
  void (*v7)(uint64_t, double, double, double);
  uint64_t v8;

  v7 = *(void (**)(uint64_t, double, double, double))(a1 + 32);
  v8 = swift_retain();
  v7(v8, a2, a3, a4);
  return swift_release();
}

void closure #2 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v1, "Location shifting must go to network...", v2, 2u);
    MEMORY[0x1C3BBFF64](v2, -1, -1);
  }

}

uint64_t closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v13;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = a1;
  v4 = a1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    if (a1)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v5, v6, "Error shifting location: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v8, -1, -1);
    MEMORY[0x1C3BBFF64](v7, -1, -1);
  }
  else
  {

  }
  lazy protocol witness table accessor for type LocationShiftingError and conformance LocationShiftingError();
  swift_allocError();
  *v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for ContinuousClock();
  v0[5] = v1;
  v0[6] = *(_QWORD *)(v1 - 8);
  v0[7] = swift_task_alloc();
  v2 = type metadata accessor for ContinuousClock.Instant();
  v0[8] = v2;
  v0[9] = *(_QWORD *)(v2 - 8);
  v0[10] = swift_task_alloc();
  v0[11] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  static ContinuousClock.Instant.now.getter();
  MEMORY[0x1C3BBF460](2000000000000000000, 0);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 96) = v4;
  v4(v1, v2);
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  ContinuousClock.init()();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v5;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  *v5 = v0;
  v5[1] = closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:);
  return static Task<>.sleep<A>(until:tolerance:clock:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  v3 = v2[11];
  v4 = (void (*)(uint64_t, uint64_t))v2[12];
  v5 = v2[8];
  (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
  v4(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  _BYTE *v1;

  lazy protocol witness table accessor for type LocationShiftingError and conformance LocationShiftingError();
  swift_allocError();
  *v1 = 1;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1C3BC0018](v1);
  *(_QWORD *)(v0 + 72) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v4;
    *v4 = v0;
    v4[1] = closure #1 in PommesLocationManager.shiftedLocation(for:completion:);
    v4[3] = *(_QWORD *)(v0 + 48);
    v4[4] = v3;
    return swift_task_switch();
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 56))(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 88);
  (*(void (**)(void *))(v0 + 56))(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 56))(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  swift_task_dealloc();
  v5 = *(void **)(v4 + 72);
  if (v1)
  {

  }
  else
  {

    *(_QWORD *)(v4 + 88) = a1;
  }
  return swift_task_switch();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = dispatch thunk of Actor.unownedExecutor.getter();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v5 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = a3;
  v7[16] = 0;
  swift_storeEnumTagMultiPayload();
  v8 = a1;
  return PommesLocationManager.status.setter((uint64_t)v7);
}

void PommesLocationManager.locationManager(_:didFailWithError:)(uint64_t a1, void *a2)
{
  specialized PommesLocationManager.locationManager(_:didFailWithError:)(a2);
}

id PommesLocationManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PommesLocationManaging.fetchLocation() in conformance PommesLocationManager()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  static TaskPriority.userInitiated.getter();
  v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 0, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v4;
  v7 = v4;
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5((uint64_t)v3, (uint64_t)&closure #1 in PommesLocationManager.fetchLocation()partial apply, (uint64_t)v6);
}

void protocol witness for PommesLocationManaging.status.getter in conformance PommesLocationManager()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  type metadata accessor for LocationStatus(0);
  v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();

}

uint64_t protocol witness for PommesLocationManaging.statusPublisher.getter in conformance PommesLocationManager()
{
  return PommesLocationManager.statusPublisher.getter();
}

void specialized static LocationStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[6];

  v4 = type metadata accessor for Date();
  v17[5] = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v17[4] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v17[3] = (char *)v17 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v9);
  v10 = type metadata accessor for LocationStatus(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (LocationStatus, LocationStatus));
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v17 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(a1, (uint64_t)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of LocationStatus(a2, (uint64_t)v15);
  v16 = (char *)sub_1C24D8C08 + 4 * byte_1C250090C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1C24D8C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  char v10;

  outlined init with copy of LocationStatus(v0, v1);
  v3 = *(void **)v1;
  if (swift_getEnumCaseMultiPayload())
  {

    outlined destroy of MediaUserStateCenter?(v0, (uint64_t *)&demangling cache variable for type metadata for (LocationStatus, LocationStatus));
    v4 = 0;
  }
  else
  {
    v5 = *(_BYTE *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 8);
    v7 = *(void **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    v9 = *(_BYTE *)(v2 + 16);
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v10 = static NSObject.== infix(_:_:)();

    v4 = v10 & (v6 == v8) & (v5 ^ v9 ^ 1);
    outlined destroy of PommesSearchRequest(v0, type metadata accessor for LocationStatus);
  }
  return v4 & 1;
}

uint64_t partial apply for closure #1 in PommesLocationManager.status.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in PommesLocationManager.status.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager__status;
  swift_beginAccess();
  return outlined init with copy of LocationStatus(v3, a1);
}

uint64_t sub_1C24D8ED0()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  int EnumCaseMultiPayload;
  char *v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationStatus(0) - 8) + 80);

  v2 = (id *)(v0 + ((v1 + 24) & ~v1));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v4 = (char *)v2
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    v5 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {

  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PommesLocationManager.status.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationStatus(0) - 8) + 80);
  return closure #1 in PommesLocationManager.status.setter(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1C24D8FB4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PommesLocationManager.manager.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in closure #1 in PommesLocationManager.manager.getter(*(void **)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in PommesLocationManager.fetchLocation()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in PommesLocationManager.fetchLocation()(a1, v4, v5, v6);
}

void partial apply for closure #1 in PommesLocationManager.setCachedLocation(location:)(BOOL *a1@<X8>)
{
  partial apply for closure #1 in PommesLocationManager.setCachedLocation(location:)(a1);
}

{
  id v2;
  unsigned int v3;

  v2 = PommesLocationManager.manager.getter();
  v3 = objc_msgSend(v2, sel_authorizationStatus);

  *a1 = v3 - 3 < 2;
}

uint64_t sub_1C24D9060()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PommesLocationManager.setCachedLocation(location:)(void *a1)
{
  return closure #2 in PommesLocationManager.setCachedLocation(location:)(a1);
}

uint64_t sub_1C24D908C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PommesLocationManager.shiftedLocation(for:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t closure #1 in PommesLocationManager.shiftedLocation(for:completion:)partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *((_QWORD *)v2 + 2);
  v7 = v2[3];
  v8 = v2[4];
  v9 = *((_QWORD *)v2 + 5);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in PommesLocationManager.shiftedLocation(for:)(a1, a2, v6, v9, v7, v8);
}

id partial apply for closure #1 in PommesLocationManager.locationManager(_:didUpdateLocations:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id result;

  result = objc_msgSend(*(id *)(v1 + 16), sel_accuracyAuthorization);
  *a1 = result;
  return result;
}

uint64_t sub_1C24D923C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:)(void *a1)
{
  uint64_t v1;

  return closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t objectdestroy_17Tm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void specialized PommesLocationManager.locationManager(_:didFailWithError:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v2 = type metadata accessor for LocationStatus(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v26 - v6;
  v31 = a1;
  v8 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for CLError(0);
  if (swift_dynamicCast())
  {
    v9 = (void *)v30;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    v11 = v9;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v30 = (uint64_t)v11;
      v31 = (void *)v27;
      v28 = v7;
      *(_DWORD *)v14 = 136315138;
      v26[1] = v14 + 4;
      v15 = v11;
      v16 = String.init<A>(describing:)();
      v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)&v31);
      v7 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v12, v13, "PommesLocationManager: Location Error: %s", v14, 0xCu);
      v18 = v27;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v18, -1, -1);
      MEMORY[0x1C3BBFF64](v14, -1, -1);
    }
    else
    {

    }
    v30 = (uint64_t)v11;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
    v19 = _BridgedStoredNSError.code.getter();
    if (v31 == (void *)1)
    {
      MEMORY[0x1E0C80A78](v19);
      v26[-2] = v20;
      v22 = v21;
      OS_dispatch_queue.sync<A>(execute:)();

      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v23 = &v7[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                         + 48)];
        v24 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
        if (one-time initialization token for loc != -1)
          swift_once();
        v25 = type metadata accessor for OSSignposter();
        __swift_project_value_buffer(v25, (uint64_t)static Signposter.loc);
        OSSignposter.end(name:context:message:)("locationManager.startup", 23, 2, v29, 0x726F727265, 0xE500000000000000);
      }
      else
      {
        outlined destroy of PommesSearchRequest((uint64_t)v7, type metadata accessor for LocationStatus);
      }
    }
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v5);

  }
  else
  {
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v5);
  }
}

unint64_t lazy protocol witness table accessor for type PommesLocationInfo and conformance PommesLocationInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesLocationInfo and conformance PommesLocationInfo;
  if (!lazy protocol witness table cache variable for type PommesLocationInfo and conformance PommesLocationInfo)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesLocationInfo, &type metadata for PommesLocationInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesLocationInfo and conformance PommesLocationInfo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocationShiftingError and conformance LocationShiftingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError;
  if (!lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for LocationShiftingError, &type metadata for LocationShiftingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError;
  if (!lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for LocationShiftingError, &type metadata for LocationShiftingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocationShiftingError and conformance LocationShiftingError);
  }
  return result;
}

id sub_1C24D9794@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = PommesLocationManager.locationShifter.getter();
  *a1 = result;
  return result;
}

void sub_1C24D97BC(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShifter);
}

id sub_1C24D97C8@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = PommesLocationManager.locationShiftQueue.getter();
  *a1 = result;
  return result;
}

void sub_1C24D97F0(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___locationShiftQueue);
}

void keypath_setTm(void **a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  id v6;
  id v7;

  v5 = *a1;
  v7 = *(id *)(*a2 + *a5);
  *(_QWORD *)(*a2 + *a5) = *a1;
  v6 = v5;

}

uint64_t sub_1C24D983C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = PommesLocationManager.statusPublisher.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C24D9864(_QWORD *a1, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager____lazy_storage___statusPublisher) = *a1;
  swift_retain();
  return swift_release();
}

id sub_1C24D989C@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = PommesLocationManager.manager.getter();
  *a1 = result;
  return result;
}

uint64_t dispatch thunk of PommesLocationManaging.fetchLocation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PommesLocationManaging.setCachedLocation(location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PommesLocationManaging.cachedLocationInfo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PommesLocationManaging.countryCode()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PommesLocationManaging.setServiceHelper(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PommesLocationManaging.status.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PommesLocationManaging.statusPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t initializeBufferWithCopyOfBuffer for PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PommesLocationInfo(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesLocationInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesLocationInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesLocationInfo()
{
  return &type metadata for PommesLocationInfo;
}

uint64_t storeEnumTagSinglePayload for LocationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C24D9AAC + 4 * byte_1C2500917[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C24D9AE0 + 4 * byte_1C2500912[v4]))();
}

uint64_t sub_1C24D9AE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24D9AE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24D9AF0);
  return result;
}

uint64_t sub_1C24D9AFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24D9B04);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C24D9B08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24D9B10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationError()
{
  return &type metadata for LocationError;
}

uint64_t storeEnumTagSinglePayload for LocationShiftingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C24D9B78 + 4 * byte_1C2500921[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C24D9BAC + 4 * byte_1C250091C[v4]))();
}

uint64_t sub_1C24D9BAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24D9BB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24D9BBCLL);
  return result;
}

uint64_t sub_1C24D9BC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24D9BD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C24D9BD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24D9BDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationShiftingError()
{
  return &type metadata for LocationShiftingError;
}

char *initializeBufferWithCopyOfBuffer for LocationStatus(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  void *v8;
  char *v9;
  id v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v11[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)a1 = *a2;
      a1[8] = *((_BYTE *)a2 + 8);
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                   + 48);
      v13 = &a1[v12];
      v14 = (uint64_t)a2 + v12;
      v15 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = *a2;
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v9;
      a1[16] = *((_BYTE *)a2 + 16);
      v10 = v8;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for LocationStatus(id *a1)
{
  int EnumCaseMultiPayload;
  char *v3;
  uint64_t v4;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v3 = (char *)a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    v4 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else if (!EnumCaseMultiPayload)
  {

  }
}

uint64_t initializeWithCopy for LocationStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                 + 48);
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *(void **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v9 = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for LocationStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest(a1, type metadata accessor for LocationStatus);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v9 = *(void **)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)a1 = v9;
      v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                   + 48);
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v8 = v7;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for LocationStatus(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[8] = a2[8];
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for LocationStatus(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest((uint64_t)a1, type metadata accessor for LocationStatus);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                  + 48);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for LocationStatus()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = &unk_1C2500BE8;
  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PommesLocationManager()
{
  return type metadata accessor for PommesLocationManager(0);
}

uint64_t type metadata accessor for PommesLocationManager(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesLocationManager);
}

uint64_t type metadata completion function for PommesLocationManager()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocationStatus(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t objectdestroy_6Tm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t closure #1 in PommesLocationManager.fetchLocation()partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in PommesLocationManager.fetchLocation()(a1, v4, v5, v6);
}

uint64_t sub_1C24DA31C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  v8[6] = v7;
  v8[4] = v5;
  v8[5] = v6;
  v8[2] = a1;
  v8[3] = v4;
  return swift_task_switch();
}

uint64_t sub_1C24DA3D4()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #2 in closure #1 in PommesLocationManager.shiftedLocation(for:)();
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 40), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t sub_1C24DA4F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(double a1, double a2, double a3)
{
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  return closure #1 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(*(void **)(v3 + 16), a1, a2, a3);
}

uint64_t sub_1C24DA5CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CLLocation, Error>);
  return closure #3 in closure #1 in closure #1 in closure #1 in PommesLocationManager.shiftedLocation(for:)(a1);
}

uint64_t sub_1C24DA670()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in PommesLocationManager.fetchLocation()(_QWORD *a1@<X8>)
{
  id v2;
  id v3;

  v2 = PommesLocationManager.manager.getter();
  v3 = objc_msgSend(v2, sel_accuracyAuthorization);

  *a1 = v3;
}

uint64_t outlined assign with copy of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t static NonSiriKitMediaAppLaunchPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000027;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.appDataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AppDataProviding(v1 + 16, a1);
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.supportedMediaIntents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.__allocating_init(appDataProvider:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NonSiriKitMediaAppLaunchPreflightClient.init(appDataProvider:)(a1);
  return v2;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.init(appDataProvider:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of NonSiriKitMediaAppLaunchPreflightClient.init(appDataProvider:));
  swift_arrayDestroy();
  *(_QWORD *)(v1 + 56) = v3;
  outlined init with take of AppDataProviding(a1, v1 + 16);
  return v1;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.isMediaIntent(bundleId:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v34;
  uint64_t v35[2];
  _QWORD v36[5];
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = v2[5];
  v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 8))(v36, a1, a2, 0, v5, v6);
  outlined init with take of AppData?((uint64_t)v36, (uint64_t)v37);
  v7 = v38;
  if (v38)
  {
    v34 = (uint64_t)v2;
    v8 = v37[0];
    v9 = v37[1];
    v11 = v39;
    v10 = v40;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    v41 = v11;
    v42 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v35[0] = v16;
      *(_DWORD *)v15 = 136315138;
      if (v9)
        v17 = v8;
      else
        v17 = 7104878;
      if (v9)
        v18 = v9;
      else
        v18 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      _os_log_impl(&dword_1C2356000, v13, v14, "App ID: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v16, -1, -1);
      MEMORY[0x1C3BBFF64](v15, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of [LNActionMetadata]((uint64_t)&v41);
    outlined retain of [LNActionMetadata]((uint64_t)&v42);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v35[0] = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain();
      v29 = Set.description.getter();
      v31 = v30;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      _os_log_impl(&dword_1C2356000, v25, v26, "Supported intents: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v28, -1, -1);
      MEMORY[0x1C3BBFF64](v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of [LNActionMetadata]((uint64_t)&v41);
      outlined release of [LNActionMetadata]((uint64_t)&v42);
    }

    swift_bridgeObjectRetain();
    swift_retain();
    v32 = specialized Sequence.contains(where:)(v7, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of [LNActionMetadata]((uint64_t)&v41);
    outlined release of [LNActionMetadata]((uint64_t)&v42);
    swift_bridgeObjectRelease();
    return v32 & 1;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v42 = v23;
      *(_DWORD *)v22 = 136315138;
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v20, v21, "Cannot look up the app %s on device, passing to Pegasus", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v23, -1, -1);
      MEMORY[0x1C3BBFF64](v22, -1, -1);

      return 2;
    }
    else
    {

      v24 = 2;
      swift_bridgeObjectRelease_n();
    }
  }
  return v24;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NonSiriKitMediaAppLaunchPreflightClient.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance NonSiriKitMediaAppLaunchPreflightClient()
{
  return 0xD000000000000027;
}

uint64_t specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(entity:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (*v54)(char *, unint64_t, uint64_t);
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1E0C80A78](v2);
  v77 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UsoIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v74 = (char *)&v70 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kind?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v70 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (edge: Edge, node: Node)?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Edge, Node));
  MEMORY[0x1E0C80A78](v79);
  v78 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Node();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  if (!a1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    v37 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1C2356000, v37, v41, "Received a nil UsoEntity when extracting bundle ID", v42, 2u);
      MEMORY[0x1C3BBFF64](v42, -1, -1);
    }
    goto LABEL_13;
  }
  v81 = v5;
  v75 = (char *)&v70 - v25;
  swift_retain();
  v76 = a1;
  CodeGenBase.entity.getter();
  UsoEntity.usoValue.getter();
  swift_release();
  UsoValue.graphNode.getter();
  swift_release();
  v26 = type metadata accessor for Kind();
  v27 = *(_QWORD *)(v26 - 8);
  v80 = v20;
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v29 = 1;
  v28(v15, 1, 1, v26);
  v28(v13, 1, 1, v26);
  v30 = Node.connectedNodes(nodeKind:edgeKind:)();
  outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for Kind?);
  v31 = v80;
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for Kind?);
  v72 = *(void (**)(char *, uint64_t))(v21 + 8);
  v73 = v21;
  v72(v24, v31);
  v32 = *(_QWORD *)(v30 + 16);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (edge: Edge, node: Node));
  v34 = *(_QWORD *)(v33 - 8);
  if (v32)
  {
    outlined init with copy of MediaUserStateCenter?(v30 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80)), (uint64_t)v18, &demangling cache variable for type metadata for (edge: Edge, node: Node));
    v29 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v18, v29, 1, v33);
  swift_bridgeObjectRelease();
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (edge: Edge, node: Node));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v18, 1, v35) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for (edge: Edge, node: Node)?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v37, v38))
    {

      swift_release();
      return 0;
    }
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_1C2356000, v37, v38, "Failed to retrieve the connected node, cannot lookup bundle ID", v39, 2u);
    MEMORY[0x1C3BBFF64](v39, -1, -1);
    swift_release();
LABEL_13:

    return 0;
  }
  v71 = &v18[*(int *)(v35 + 48)];
  v43 = v31;
  v44 = v78;
  v45 = v79;
  v46 = &v78[*(int *)(v79 + 48)];
  v47 = type metadata accessor for Edge();
  v48 = *(_QWORD *)(v47 - 8);
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v44, v18, v47);
  v49 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
  v49(v46, v71, v43);
  v49(v75, &v44[*(int *)(v45 + 48)], v43);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v44, v47);
  v50 = Node.identifiers.getter();
  v51 = *(_QWORD *)(v50 + 16);
  if (!v51)
  {
    v59 = 1;
    v56 = v81;
LABEL_25:
    v60 = (uint64_t)v77;
    goto LABEL_27;
  }
  v52 = v50 + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80));
  v53 = *(_QWORD *)(v81 + 72);
  v54 = *(void (**)(char *, unint64_t, uint64_t))(v81 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v54(v8, v52, v4);
    v57 = UsoIdentifier.namespace.getter();
    if (!v58)
      goto LABEL_17;
    if (v57 == 0x64695F6D657469 && v58 == 0xE700000000000000)
      break;
    v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v55 & 1) != 0)
      goto LABEL_26;
LABEL_17:
    v56 = v81;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v8, v4);
    v52 += v53;
    if (!--v51)
    {
      swift_bridgeObjectRelease();
      v59 = 1;
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
  v56 = v81;
  v60 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v77, v8, v4);
  v59 = 0;
LABEL_27:
  v61 = v72;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v60, v59, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v60, 1, v4) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v60, &demangling cache variable for type metadata for UsoIdentifier?);
    v62 = v80;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.pommes);
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      _os_log_impl(&dword_1C2356000, v64, v65, "Cannot find a node that contains the app bundle ID", v66, 2u);
      MEMORY[0x1C3BBFF64](v66, -1, -1);
    }
    swift_release();

    v61(v75, v62);
    return 0;
  }
  else
  {
    v69 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v74, v60, v4);
    v67 = UsoIdentifier.value.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v69, v4);
    v61(v75, v80);
  }
  return v67;
}

uint64_t specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(task:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[5];
  _BYTE v21[24];
  uint64_t v22;
  _BYTE v23[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v23, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v22)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v21, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
    type metadata accessor for UsoTask_open_common_App();
    if (swift_dynamicCast())
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v0 = type metadata accessor for Logger();
      __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
      v1 = Logger.logObject.getter();
      v2 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v1, v2))
      {
        v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v3 = 0;
        _os_log_impl(&dword_1C2356000, v1, v2, "Converting UsoTask_open_common_App to UsoEntity_common_App", v3, 2u);
        MEMORY[0x1C3BBFF64](v3, -1, -1);
      }

      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      swift_release();
      v4 = v19;
      goto LABEL_22;
    }
    type metadata accessor for UsoTask_start_uso_NoEntity();
    if (swift_dynamicCast())
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7))
        goto LABEL_19;
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      v9 = "Converting UsoTask_start_uso_NoEntity to UsoEntity_common_App";
LABEL_18:
      _os_log_impl(&dword_1C2356000, v6, v7, v9, v8, 2u);
      MEMORY[0x1C3BBFF64](v8, -1, -1);
LABEL_19:

      v11 = swift_retain();
      MEMORY[0x1C3BBD204](&v19, v11);
      swift_release();
      if (v19)
      {
        v4 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
      }
      else
      {
        v4 = 0;
      }
LABEL_22:
      v12 = specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(entity:)(v4);
      swift_release();
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      goto LABEL_29;
    }
    type metadata accessor for UsoTask_play_uso_NoEntity();
    if (swift_dynamicCast())
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v6, v7))
        goto LABEL_19;
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      v9 = "Converting UsoTask_play_uso_NoEntity to UsoEntity_common_App";
      goto LABEL_18;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v20[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v20[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C616E6F6974704FLL, 0xED00003E796E413CLL, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v14, v15, "Received an unsupported type of UsoTask %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v17, -1, -1);
    MEMORY[0x1C3BBFF64](v16, -1, -1);
  }

  outlined destroy of MediaUserStateCenter?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
  v12 = 0;
LABEL_29:
  outlined destroy of MediaUserStateCenter?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v12;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v26 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v27 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v25 = a2;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_23:
    v13 = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(v13 + 16))
    {
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
      v16 = *v14;
      v15 = v14[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v17 = Hasher._finalize()();
      v18 = -1 << *(_BYTE *)(v13 + 32);
      v19 = v17 & ~v18;
      if (((*(_QWORD *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
      {
        v20 = *(_QWORD *)(v13 + 48);
        v21 = (_QWORD *)(v20 + 16 * v19);
        v22 = *v21 == v16 && v21[1] == v15;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_36:
          swift_release();
          swift_bridgeObjectRelease();
          return 1;
        }
        while (1)
        {
          v19 = (v19 + 1) & ~v18;
          if (((*(_QWORD *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
            break;
          v23 = (_QWORD *)(v20 + 16 * v19);
          v24 = *v23 == v16 && v23[1] == v15;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_36;
        }
      }
      result = swift_bridgeObjectRelease();
      a2 = v25;
    }
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v10 >= v27)
    goto LABEL_37;
  v11 = *(_QWORD *)(v26 + 8 * v10);
  ++v7;
  if (v11)
    goto LABEL_22;
  v7 = v10 + 1;
  if (v10 + 1 >= v27)
    goto LABEL_37;
  v11 = *(_QWORD *)(v26 + 8 * v7);
  if (v11)
    goto LABEL_22;
  v7 = v10 + 2;
  if (v10 + 2 >= v27)
    goto LABEL_37;
  v11 = *(_QWORD *)(v26 + 8 * v7);
  if (v11)
    goto LABEL_22;
  v7 = v10 + 3;
  if (v10 + 3 >= v27)
    goto LABEL_37;
  v11 = *(_QWORD *)(v26 + 8 * v7);
  if (v11)
    goto LABEL_22;
  v12 = v10 + 4;
  if (v12 >= v27)
  {
LABEL_37:
    swift_release();
    return 0;
  }
  v11 = *(_QWORD *)(v26 + 8 * v12);
  v7 = v12;
  if (v11)
  {
LABEL_22:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v27)
      goto LABEL_37;
    v11 = *(_QWORD *)(v26 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NonSiriKitMediaAppLaunchPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for NonSiriKitMediaAppLaunchPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NonSiriKitMediaAppLaunchPreflightClient.__allocating_init(appDataProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of NonSiriKitMediaAppLaunchPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t SourceMatchFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized SourceMatchFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t SourceMatchFeaturiser.name.getter()
{
  type metadata accessor for SourceMatchFeaturiser();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SourceMatchFeaturiser.Type);
  return String.init<A>(describing:)();
}

uint64_t SourceMatchFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized SourceMatchFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void SourceMatchFeaturiser.featurise(candidate:rankedSlotIndex:)(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t *v24;
  _QWORD *v25;
  __n128 v26;
  _QWORD *v27;
  __n128 v28;
  _QWORD v29[2];

  v2 = v1;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *MEMORY[0x1E0D6E068];
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, v8, v4);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun, MEMORY[0x1E0D6E098]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v11 = v29[0];
  v10 = v29[1];
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  if (v10 == v11)
  {
    if ((*((_BYTE *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) & 1) != 0)
      v13 = 1;
    else
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  if ((*((_BYTE *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) & 1) != 0)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v15 = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v13 & 1) != 0)
        goto LABEL_16;
      goto LABEL_17;
    }
  }
  else
  {
    v15 = swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_isRequestingAppleMusic) != 1)
    goto LABEL_15;
  v9(v7, v8, v4);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun, MEMORY[0x1E0D6E090]);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15 = ((uint64_t (*)(char *, uint64_t))v12)(v7, v4);
  if ((v13 & 1) != 0)
  {
LABEL_16:
    v21 = **a1;
    v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & v21) + 0xB8))(v15);
    v23.n128_u32[0] = 1071225242;
    (*(void (**)(__n128))((*v22 & *v19) + 0xD0))(v23);
    goto LABEL_21;
  }
  if ((v16 & 1) == 0)
  {
    v17 = **a1;
    v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & v17) + 0xB8))(v15);
    v20.n128_u32[0] = 1074580685;
    (*(void (**)(__n128))((*v18 & *v19) + 0xD0))(v20);
    goto LABEL_21;
  }
LABEL_17:
  v24 = *a1;
  if ((*((_BYTE *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) & 1) != 0
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v15 & 1) != 0))
  {
    v25 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v24) + 0xB8))(v15);
    v26.n128_u32[0] = 1065437102;
    (*(void (**)(__n128))((*v25 & *v19) + 0xD0))(v26);
  }
  else
  {
    v27 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v19 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v24) + 0xB8))();
    v28.n128_u32[0] = 1.0;
    (*(void (**)(__n128))((*v27 & *v19) + 0xD0))(v28);
  }
LABEL_21:

}

uint64_t SourceMatchFeaturiser.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_noun;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SourceMatchFeaturiser.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_noun;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t specialized SourceMatchFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    *(_DWORD *)v7 = 134218240;
    Apple_Parsec_Siri_V2alpha_AudioNoun.rawValue.getter();
    v8 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 1024;
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2356000, v5, v6, "SourceMatchFeaturiser : noun=%ld, isRequestingAppleMusic=%{BOOL}d", (uint8_t *)v7, 0x12u);
    MEMORY[0x1C3BBFF64](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  v9 = a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  v10 = v2 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_noun;
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, v9, v11);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch21SourceMatchFeaturiser_isRequestingAppleMusic) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(v12) & 1;
  return v2;
}

uint64_t type metadata accessor for SourceMatchFeaturiser()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SourceMatchFeaturiser;
  if (!type metadata singleton initialization cache for SourceMatchFeaturiser)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
    result = MEMORY[0x1C3BBFE74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for SourceMatchFeaturiser()
{
  return type metadata accessor for SourceMatchFeaturiser();
}

uint64_t type metadata completion function for SourceMatchFeaturiser()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SourceMatchFeaturiser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SourceMatchFeaturiser.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SourceMatchFeaturiser.__allocating_init(query:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SourceMatchFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

id AFPreferences.siriLanguageCode.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_languageCode);
  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type String and conformance String();
    v1 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t SageSearchRequestProcessor.__allocating_init(remoteClient:pommesSearchRequest:clientEntities:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  swift_allocObject();
  v6 = specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(a1, a2, a3);
  swift_release();
  return v6;
}

uint64_t SageSearchRequestProcessor.remoteClient.getter()
{
  return swift_retain();
}

uint64_t SageSearchRequestProcessor.onDeviceSearchInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t key path setter for SageSearchRequestProcessor.pommesSearchRequest : SageSearchRequestProcessor(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v6);
  v7 = *a2 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  outlined assign with take of PommesSearchRequest((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t SageSearchRequestProcessor.pommesSearchRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  return outlined init with copy of PommesSearchRequest(v3, a1);
}

uint64_t key path setter for SageSearchRequestProcessor.clientEntities : SageSearchRequestProcessor(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_clientEntities);
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t SageSearchRequestProcessor.clientEntities.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t SageSearchRequestProcessor.search()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[2] = v0;
  type metadata accessor for PommesSearchRequest(0);
  v1[3] = swift_task_alloc();
  type metadata accessor for PegasusSearchResponse(0);
  v1[4] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t);

  v1 = (_QWORD *)v0[2];
  v2 = v1[2];
  v3 = (*(uint64_t (**)(void))(*v1 + 128))();
  v4 = (*(uint64_t (**)(uint64_t))(*v1 + 152))(v3);
  v0[5] = v4;
  v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t))(**(int **)(*(_QWORD *)v2 + 360)
                                                       + *(_QWORD *)(*(_QWORD *)v2 + 360));
  v5 = (_QWORD *)swift_task_alloc();
  v0[6] = v5;
  *v5 = v0;
  v5[1] = SageSearchRequestProcessor.search();
  return v7(v0[4], v0[3], v4);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v5;

  v2 = (*v1)[3];
  v3 = *v1;
  v3[7] = v0;
  swift_task_dealloc();
  outlined destroy of PommesSearchRequest(v2, type metadata accessor for PommesSearchRequest);
  swift_bridgeObjectRelease();
  if (v0)
    return swift_task_switch();
  v5 = (_QWORD *)swift_task_alloc();
  v3[8] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = SageSearchRequestProcessor.search();
  return SageSearchRequestProcessor.handlePegasusResponse(_:)(v3[4]);
}

{
  uint64_t v0;

  outlined destroy of PommesSearchRequest(*(_QWORD *)(v0 + 32), type metadata accessor for PegasusSearchResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined destroy of PommesSearchRequest(*(_QWORD *)(v0 + 32), type metadata accessor for PegasusSearchResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SageSearchRequestProcessor.search()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 80) = a1;
  return swift_task_switch();
}

uint64_t SageSearchRequestProcessor.handlePegasusResponse(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for Date();
  v2[18] = v3;
  v2[19] = *(_QWORD *)(v3 - 8);
  v2[20] = swift_task_alloc();
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v2[21] = v4;
  v2[22] = *(_QWORD *)(v4 - 8);
  v2[23] = swift_task_alloc();
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v2[24] = v5;
  v2[25] = *(_QWORD *)(v5 - 8);
  v2[26] = swift_task_alloc();
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v2[27] = v6;
  v2[28] = *(_QWORD *)(v6 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 272) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 280) = a1;
  return swift_task_switch();
}

uint64_t SageSearchRequestProcessor.handlePegasusResponse(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void (*v42)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(char **@<X8>), uint64_t, uint64_t);
  uint64_t v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t *v69;
  int8x16_t v70;
  id v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t (*v95)(void);
  uint64_t v96[2];

  v1 = *(_QWORD *)(v0 + 128);
  v91 = (uint64_t *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = type metadata accessor for PegasusSearchResponse(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1 + *(int *)(v5 + 20), v3);
  *(_QWORD *)(v0 + 40) = type metadata accessor for SportsResolver();
  *(_QWORD *)(v0 + 48) = &protocol witness table for SportsResolver;
  v94 = v0 + 16;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  SportsResolver.init()();
  if (one-time initialization token for sage != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 216);
  v90 = type metadata accessor for Logger();
  __swift_project_value_buffer(v90, (uint64_t)static Logger.sage);
  v6(v7, v8, v9);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 240);
  if (v12)
  {
    v14 = *(_QWORD *)(v0 + 232);
    v89 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 216);
    v16 = (uint8_t *)swift_slowAlloc();
    v92 = swift_slowAlloc();
    v96[0] = v92;
    *(_DWORD *)v16 = 136315138;
    v6(v14, v13, v15);
    v17 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v19(v13, v15);
    _os_log_impl(&dword_1C2356000, v10, v11, "PireneResponse: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v92, -1, -1);
    MEMORY[0x1C3BBFF64](v16, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 8);
    v19(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 216));
  }

  v93 = v19;
  *(_QWORD *)(v0 + 256) = v19;
  v21 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 192);
  v24 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 176);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  v27 = MEMORY[0x1C3BBC3A0](v26);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter() & 1) == 0 || !*(_QWORD *)(v27 + 16))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for shared != -1)
      swift_once();
    v36 = *(_QWORD *)(v0 + 248);
    v38 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 160);
    v39 = *(_QWORD *)(v0 + 144);
    v40 = static PerformanceUtil.shared;
    v41 = swift_task_alloc();
    *(_QWORD *)(v41 + 16) = v94;
    *(_QWORD *)(v41 + 24) = v36;
    Date.init()();
    v42 = *(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(char **@<X8>), uint64_t, uint64_t))(*(_QWORD *)v40 + 200);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
    v42(0xD00000000000002ALL, 0x80000001C2504380, 0, v37, "SiriInformationSearch/SageSearchRequestProcessor.swift", 54, 2, 58, "handlePegasusResponse(_:)", 25, 2, partial apply for closure #1 in SageSearchRequestProcessor.handlePegasusResponse(_:), v41, v43);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    swift_task_dealloc();
    v44 = *(_QWORD *)(v0 + 104);
    if (v44 >> 62)
    {
      swift_bridgeObjectRetain();
      v45 = (id)_CocoaArrayWrapper.endIndex.getter();
      if (v45)
      {
LABEL_16:
        if ((v44 & 0xC000000000000001) == 0)
        {
          if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            v45 = *(id *)(v44 + 32);
            swift_bridgeObjectRelease();
            v46 = dispatch thunk of Experience.pluginIdentifier.getter();
            v48 = v47;

            if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              v49 = *(id *)(v44 + 32);
LABEL_20:
              dispatch thunk of Experience.queryConfidence.getter();
              v51 = v50;

              goto LABEL_27;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
LABEL_43:
          swift_once();
LABEL_32:
          __swift_project_value_buffer(v90, (uint64_t)static Logger.pommes);
          v71 = v45;
          v72 = Logger.logObject.getter();
          v73 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v72, v73))
          {
            v74 = (uint8_t *)swift_slowAlloc();
            v75 = swift_slowAlloc();
            v96[0] = v75;
            *(_DWORD *)v74 = 136315138;
            v76 = objc_msgSend(v71, sel_debugDescription);
            v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v79 = v78;

            *v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, v96);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_1C2356000, v72, v73, "PommesSearchRequestProcessor#handleSuccess response: %s", v74, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v75, -1, -1);
            MEMORY[0x1C3BBFF64](v74, -1, -1);
          }
          else
          {

          }
          v84 = *(_QWORD *)(v0 + 248);
          v85 = *(_QWORD *)(v0 + 216);
          outlined destroy of DefaultExperiencesResolver(v94);
          v93(v84, v85);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(id))(v0 + 8))(v71);
        }
        v86 = (void *)MEMORY[0x1C3BBF3F4](0, v44);
        swift_bridgeObjectRelease();
        v46 = dispatch thunk of Experience.pluginIdentifier.getter();
        v48 = v87;

        swift_bridgeObjectRetain();
        v49 = (id)MEMORY[0x1C3BBF3F4](0, v44);
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    else
    {
      v45 = *(id *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v45)
        goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    v48 = 0xE700000000000000;
    v46 = 0x6E776F6E6B6E55;
    v51 = 0;
LABEL_27:
    v91 = (uint64_t *)(v0 + 88);
    swift_bridgeObjectRetain();
    v65 = Logger.logObject.getter();
    v66 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc();
      v88 = swift_slowAlloc();
      v96[0] = v88;
      *(_DWORD *)v67 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v67 + 12) = 2048;
      *(_QWORD *)(v0 + 96) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v65, v66, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v88, -1, -1);
      MEMORY[0x1C3BBFF64](v67, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v68 = *(_QWORD *)(v0 + 248);
    *(_BYTE *)(v0 + 288) = 0;
    type metadata accessor for PommesResponse();
    v69 = (int8x16_t *)swift_task_alloc();
    v70 = *(int8x16_t *)(v0 + 128);
    v69[1].i64[0] = v44;
    v69[1].i64[1] = v68;
    v69[2] = vextq_s8(v70, v70, 8uLL);
    v69[3].i64[0] = v0 + 288;
    v45 = (id)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    if (!v45)
    {
      v80 = Logger.logObject.getter();
      v81 = static os_log_type_t.error.getter();
      v29 = v93;
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v82 = 0;
        _os_log_impl(&dword_1C2356000, v80, v81, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v82, 2u);
        MEMORY[0x1C3BBFF64](v82, -1, -1);
      }
      v33 = *(_QWORD *)(v0 + 248);
      v34 = *(_QWORD *)(v0 + 216);

      lazy protocol witness table accessor for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError();
      swift_allocError();
      *(_BYTE *)v83 = 0;
      *(_QWORD *)(v83 + 8) = 0xD000000000000051;
      *(_QWORD *)(v83 + 16) = 0x80000001C250A2E0;
      goto LABEL_37;
    }
    if (one-time initialization token for pommes == -1)
      goto LABEL_32;
    goto LABEL_43;
  }
  v28 = *(_QWORD *)(v0 + 136);
  v29 = v93;
  if (*(_BYTE *)(v28
                + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_hasAttemptedProfileSliceResolution) == 1)
  {
    swift_bridgeObjectRelease();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1C2356000, v30, v31, "Already attempted profile slice resolution; yielding error response",
        v32,
        2u);
      MEMORY[0x1C3BBFF64](v32, -1, -1);
    }
    v33 = *(_QWORD *)(v0 + 248);
    v34 = *(_QWORD *)(v0 + 216);

    lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
    swift_allocError();
    *v35 = 5;
LABEL_37:
    swift_willThrow();
    outlined destroy of DefaultExperiencesResolver(v94);
    v29(v33, v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_BYTE *)(v28 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_hasAttemptedProfileSliceResolution) = 1;
  swift_bridgeObjectRetain_n();
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc();
    v55 = swift_slowAlloc();
    v96[0] = v55;
    *(_DWORD *)v54 = 136315138;
    v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
    v57 = swift_bridgeObjectRetain();
    v58 = MEMORY[0x1C3BBEE9C](v57, v56);
    v60 = v59;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v52, v53, "Adding profile slice resolution requests: %s", v54, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v55, -1, -1);
    MEMORY[0x1C3BBFF64](v54, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v61 = *(_QWORD *)(v0 + 136);
  v62 = v61 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  *(_QWORD *)(v62 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 92)) = v27;
  swift_bridgeObjectRelease();
  v95 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v61 + 208) + *(_QWORD *)(*(_QWORD *)v61 + 208));
  v63 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 264) = v63;
  *v63 = v0;
  v63[1] = SageSearchRequestProcessor.handlePegasusResponse(_:);
  return v95();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
  v3 = *(_QWORD *)(v0 + 216);
  outlined destroy of DefaultExperiencesResolver(v0 + 16);
  v2(v1, v3);
  v4 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
  v3 = *(_QWORD *)(v0 + 216);
  outlined destroy of DefaultExperiencesResolver(v0 + 16);
  v2(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SageSearchRequestProcessor.handlePegasusResponse(_:)@<X0>(uint64_t a1@<X1>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = DefaultExperiencesResolver.buildExperiences(from:with:)(a1, (uint64_t)v6);
  result = outlined destroy of ClientExperienceSignals?((uint64_t)v6);
  *a2 = v8;
  return result;
}

uint64_t closure #2 in SageSearchRequestProcessor.handlePegasusResponse(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  void (*v40)(char *, uint64_t);
  void (*v41)(void (*)(uint64_t), uint64_t);
  uint64_t result;
  id v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t);
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t Context;
  uint64_t v89;
  void (*v90)(uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;

  v89 = a6;
  v87 = a5;
  v93 = a4;
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v86 = *(_QWORD *)(Context - 8);
  MEMORY[0x1E0C80A78](Context);
  v85 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PommesSearchReason();
  v83 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  MEMORY[0x1E0C80A78](v10);
  v82 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v12);
  v80 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v92);
  v91 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  v95 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v90 = (void (*)(uint64_t))((char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v81 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v79 = (char *)&v79 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v79 - v23;
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  v25 = MEMORY[0x1E0DEE9D8];
  PommesResponse.Builder.clientResults.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  PommesResponse.Builder.conversationContext.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  v97 = *(void (**)(char *, uint64_t))(v18 + 8);
  v98 = v17;
  v97(v24, v17);
  PommesResponse.Builder.metadataDomainName.setter();
  v99 = v25;
  v26 = a1;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    v96 = a3;
    if (v27)
      goto LABEL_3;
LABEL_16:
    v38 = v15;
    swift_bridgeObjectRelease();
    v37 = v26;
    PommesResponse.Builder.renderedTexts.setter();
    goto LABEL_17;
  }
  v27 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v96 = a3;
  if (!v27)
    goto LABEL_16;
LABEL_3:
  if (v27 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  v28 = 0;
  v29 = a2 & 0xC000000000000001;
  do
  {
    if (v29)
      v30 = (id)MEMORY[0x1C3BBF3F4](v28, a2);
    else
      v30 = *(id *)(a2 + 8 * v28 + 32);
    v31 = v30;
    ++v28;
    v32 = dispatch thunk of Experience.renderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v32);
  }
  while (v27 != v28);
  swift_bridgeObjectRelease();
  PommesResponse.Builder.renderedTexts.setter();
  v99 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v33 = 0;
  do
  {
    if (v29)
      v34 = (id)MEMORY[0x1C3BBF3F4](v33, a2);
    else
      v34 = *(id *)(a2 + 8 * v33 + 32);
    v35 = v34;
    ++v33;
    v36 = dispatch thunk of Experience.redactedRenderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v36);
  }
  while (v27 != v33);
  v37 = a1;
  v38 = v15;
  swift_bridgeObjectRelease();
LABEL_17:
  v94 = v37;
  PommesResponse.Builder.redactedRenderedTexts.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v39 = v90;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v40 = v97;
  v97(v24, v98);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  v41 = *(void (**)(void (*)(uint64_t), uint64_t))(v95 + 8);
  v41(v39, v38);
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v40(v24, v98);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v41(v39, v38);
  result = PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  if (v27)
  {
    if ((a2 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v43 = *(id *)(a2 + 32);
      goto LABEL_21;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    v43 = (id)MEMORY[0x1C3BBF3F4](0, a2);
    swift_bridgeObjectRelease();
LABEL_21:
    dispatch thunk of Experience.listenAfterSpeaking.getter();

  }
  v44 = PommesResponse.Builder.listenAfterSpeaking.setter();
  v45 = *(void (**)(uint64_t))(*(_QWORD *)v93 + 128);
  v46 = (uint64_t)v91;
  v45(v44);
  swift_bridgeObjectRetain();
  outlined destroy of PommesSearchRequest(v46, type metadata accessor for PommesSearchRequest);
  v47 = PommesResponse.Builder.requestId.setter();
  v90 = v45;
  v45(v47);
  v48 = v80;
  PommesSearchRequest.pommesCandidateId.getter(v80);
  outlined destroy of PommesSearchRequest(v46, type metadata accessor for PommesSearchRequest);
  v49 = type metadata accessor for PommesCandidateId();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  v50 = v79;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v51 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v97(v50, v98);
  v52 = *(_QWORD *)(v51 + 16);
  if (v52)
  {
    v99 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
    v53 = v99;
    v54 = v51 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
    v55 = *(_QWORD *)(v95 + 72);
    do
    {
      v56 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      v58 = v57;
      v99 = v53;
      v60 = *(_QWORD *)(v53 + 16);
      v59 = *(_QWORD *)(v53 + 24);
      if (v60 >= v59 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        v53 = v99;
      }
      *(_QWORD *)(v53 + 16) = v60 + 1;
      v61 = v53 + 16 * v60;
      *(_QWORD *)(v61 + 32) = v56;
      *(_QWORD *)(v61 + 40) = v58;
      v54 += v55;
      --v52;
    }
    while (v52);
  }
  swift_bridgeObjectRelease();
  PommesResponse.Builder.taskStepLogs.setter();
  v62 = v81;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v63 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v97(v62, v98);
  v64 = *(_QWORD *)(v63 + 16);
  if (v64)
  {
    v99 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64, 0);
    v65 = v99;
    v66 = v63 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
    v67 = *(_QWORD *)(v95 + 72);
    do
    {
      v68 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      v70 = v69;
      v99 = v65;
      v72 = *(_QWORD *)(v65 + 16);
      v71 = *(_QWORD *)(v65 + 24);
      if (v72 >= v71 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
        v65 = v99;
      }
      *(_QWORD *)(v65 + 16) = v72 + 1;
      v73 = v65 + 16 * v72;
      *(_QWORD *)(v73 + 32) = v68;
      *(_QWORD *)(v73 + 40) = v70;
      v66 += v67;
      --v64;
    }
    while (v64);
  }
  swift_bridgeObjectRelease();
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  PommesResponse.Builder.componentsWarmedUp.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v82, *MEMORY[0x1E0D98920], v84);
  v74 = PommesResponse.Builder.searchReason.setter();
  v76 = v90;
  v75 = (uint64_t)v91;
  v90(v74);
  swift_bridgeObjectRetain();
  outlined destroy of PommesSearchRequest(v75, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.searchRequestUtterance.setter();
  v77 = v85;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.getter();
  Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v77, Context);
  PommesResponse.Builder.requestCountryCode.setter();
  v78 = PommesResponse.Builder.isCachedResponse.setter();
  v76(v78);
  swift_bridgeObjectRetain();
  outlined destroy of PommesSearchRequest(v75, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.sharedUserId.setter();
  return PommesResponse.Builder.isLowConfidenceKnowledgeResult.setter();
}

uint64_t SageSearchRequestProcessor.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t SageSearchRequestProcessor.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest(v0 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v4 = v3;
  v24 = a3;
  v25 = a2;
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  MEMORY[0x1E0C80A78](v7);
  v26 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v9);
  v10 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnalyticsComponentIdGenerator();
  v15 = swift_allocObject();
  type metadata accessor for OnDeviceSearchInstrumentationUtil();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = v15;
  *(_QWORD *)(v4 + 24) = v16;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_hasAttemptedProfileSliceResolution) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  outlined init with copy of PommesSearchRequest(a2, v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_pommesSearchRequest);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_clientEntities) = v24;
  v24 = type metadata accessor for OS_dispatch_queue();
  v29 = 0;
  v30 = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v29 = 0xD000000000000026;
  v30 = 0x80000001C250A340;
  UUID.init()();
  v17 = UUID.uuidString.getter();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  static DispatchQoS.userInitiated.getter();
  v29 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v26, *MEMORY[0x1E0DEF8D0], v28);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  outlined destroy of PommesSearchRequest(v25, type metadata accessor for PommesSearchRequest);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch26SageSearchRequestProcessor_requestQueue) = v21;
  return v4;
}

uint64_t sub_1C24DE928(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
}

uint64_t sub_1C24DE954@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t ObjC metadata update function for SageSearchRequestProcessor()
{
  return type metadata accessor for SageSearchRequestProcessor();
}

uint64_t type metadata accessor for SageSearchRequestProcessor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SageSearchRequestProcessor;
  if (!type metadata singleton initialization cache for SageSearchRequestProcessor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SageSearchRequestProcessor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PommesSearchRequest(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SageSearchRequestProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SageSearchRequestProcessor.pommesSearchRequest.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SageSearchRequestProcessor.clientEntities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SageSearchRequestProcessor.__allocating_init(remoteClient:pommesSearchRequest:clientEntities:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of SageSearchRequestProcessor.search()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 208) + *(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v4();
}

uint64_t partial apply for closure #1 in SageSearchRequestProcessor.handlePegasusResponse(_:)@<X0>(char **a1@<X8>)
{
  uint64_t v1;

  return closure #1 in SageSearchRequestProcessor.handlePegasusResponse(_:)(*(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in SageSearchRequestProcessor.handlePegasusResponse(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in SageSearchRequestProcessor.handlePegasusResponse(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

unint64_t lazy protocol witness table accessor for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError;
  if (!lazy protocol witness table cache variable for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for SageSearchRequestProcessorError, &type metadata for SageSearchRequestProcessorError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearchRequestProcessorError and conformance SageSearchRequestProcessorError);
  }
  return result;
}

uint64_t outlined destroy of ClientExperienceSignals?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id static PegasusOverrideUtil.overrideSupportsGenerativeModelSystems.getter()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  if (!AFIsInternalInstall())
    return 0;
  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0;
  v3 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000002CLL, 0x80000001C2507BA0);
  v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

id static PegasusOverrideUtil.overrideTreatRandomAsFirst.getter()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0;
  v3 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000020, 0x80000001C25091E0);
  v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

unint64_t static PegasusOverrideUtil.overridesDomain.getter()
{
  return 0xD000000000000011;
}

unint64_t static PegasusOverrideUtil.overrideFeatureFlagKey.getter()
{
  return 0xD000000000000027;
}

unint64_t static PegasusOverrideUtil.overrideTreatRandomAsFirstKey.getter()
{
  return 0xD000000000000020;
}

unint64_t static PegasusOverrideUtil.overrideSupportsGenerativeModelSystemsKey.getter()
{
  return 0xD00000000000002CLL;
}

char *PegasusOverrideUtil.enablePromptContextLogging.unsafeMutableAddressor()
{
  return &static PegasusOverrideUtil.enablePromptContextLogging;
}

uint64_t static PegasusOverrideUtil.enablePromptContextLogging.getter()
{
  swift_beginAccess();
  return static PegasusOverrideUtil.enablePromptContextLogging;
}

uint64_t static PegasusOverrideUtil.enablePromptContextLogging.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static PegasusOverrideUtil.enablePromptContextLogging = a1;
  return result;
}

uint64_t (*static PegasusOverrideUtil.enablePromptContextLogging.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

void *one-time initialization function for overrideKeyHeaderKeyDict()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for overrideKeyHeaderKeyDict);
  static PegasusOverrideUtil.overrideKeyHeaderKeyDict = result;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for PommesCandidateId();
  v33 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v34 = a2 + 64;
    result = _HashTable.previousHole(before:)();
    v11 = v34;
    if ((*(_QWORD *)(v34 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v33 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      do
      {
        v14 = v13 * v9;
        v32(v7, *(_QWORD *)(a2 + 48) + v13 * v9, v4);
        lazy protocol witness table accessor for type PommesCandidateId and conformance PommesCandidateId();
        v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        v16 = v15 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v16 < v12 || a1 < (uint64_t)v16)
            goto LABEL_6;
        }
        else if (v16 < v12 && a1 < (uint64_t)v16)
        {
          goto LABEL_6;
        }
        if (v13 * a1 < v14 || *(_QWORD *)(a2 + 48) + v13 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v14 + v13))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v13 * a1 != v14)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v19 = *(_QWORD *)(a2 + 56);
        v20 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for PommesBridgeResultCandidateState(0) - 8) + 72);
        v21 = v20 * a1;
        result = v19 + v20 * a1;
        v22 = v20 * v9;
        v23 = v19 + v20 * v9 + v20;
        if (v21 < v22 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v9;
          if (v21 == v22)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
        v11 = v34;
      }
      while (((*(_QWORD *)(v34 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v25 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v25;
    v27 = (-1 << a1) - 1;
  }
  else
  {
    v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v25;
    v26 = (-1 << a1) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized static PegasusOverrideUtil.pairedDeviceOverrideValue(forKey:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20[2];

  if (!AFIsInternalInstall())
    return 0;
  v20[1] = 0x80000001C250A3A0;
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v6 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (!v7)
    goto LABEL_14;
  v8 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000001BLL, 0x80000001C250A3A0);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_stringForKey_, v8);

  if (!v9)
  {

    return 0;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {

LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20[0] = v18;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v15, v16, "POMMES override enabled for paired device value %s header! Using value “%s”", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v18, -1, -1);
    MEMORY[0x1C3BBFF64](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

  }
  return v10;
}

uint64_t specialized static PegasusOverrideUtil.requestFeatureFlag.getter()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34[5];

  if (!AFIsInternalInstall())
    return 0;
  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    v3 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000027, 0x80000001C250A370);
    v4 = objc_msgSend(v2, sel_stringForKey_, v3);

    if (v4)
    {
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      if (one-time initialization token for pommes != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain_n();
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        v34[0] = v12;
        *(_DWORD *)v11 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2356000, v9, v10, "POMMES override enabled for Pegasus request feature flag! Using flag %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v12, -1, -1);
        MEMORY[0x1C3BBFF64](v11, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return v5;
    }

  }
  v34[3] = (uint64_t)&type metadata for FeatureFlag;
  v34[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v14 = swift_allocObject();
  v34[0] = v14;
  *(_QWORD *)(v14 + 16) = 7;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_BYTE *)(v14 + 48) = 3;
  v15 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  if ((v15 & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1C2356000, v17, v18, "Detected Device Expert support; adding implicit Pegasus feature flag “deviceexpert”",
        v19,
        2u);
      MEMORY[0x1C3BBFF64](v19, -1, -1);
    }

    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v22 = v20[2];
    v21 = v20[3];
    v5 = v22 + 1;
    if (v22 >= v21 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v20);
    v20[2] = v5;
    v23 = (char *)&v20[2 * v22];
    strcpy(v23 + 32, "deviceexpert");
    v23[45] = 0;
    *((_WORD *)v23 + 23) = -5120;
  }
  else
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v5 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 + 1, 1, v20);
  v25 = v20[2];
  v24 = v20[3];
  if (v25 >= v24 >> 1)
    v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v20);
  v20[2] = v25 + 1;
  v26 = &v20[2 * v25];
  v26[4] = 0x37656E65726970;
  v26[5] = 0xE700000000000000;
  v34[0] = (uint64_t)v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v5 = BidirectionalCollection<>.joined(separator:)();
  v28 = v27;
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v34[0] = v33;
    *(_DWORD *)v32 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v28, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v30, v31, "Inferred Pirene feature flags for internal build, based on client-side feature flags! Using “%s”", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v33, -1, -1);
    MEMORY[0x1C3BBFF64](v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v5;
}

uint64_t specialized static PegasusOverrideUtil.getHeaderOverrideValue(overrideKey:headerKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  if (!AFIsInternalInstall())
    return 0;
  v8 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v9 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v10 = objc_msgSend(v8, sel_initWithSuiteName_, v9);

  if (!v10)
    return 0;
  v11 = (void *)MEMORY[0x1C3BBEC44](a1, a2);
  v12 = objc_msgSend(v10, sel_stringForKey_, v11);

  if (!v12)
  {

    return 0;
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v16)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v23 = v21;
    *(_DWORD *)v20 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v18, v19, "POMMES override enabled for %s header! Using value “%s”", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v21, -1, -1);
    MEMORY[0x1C3BBFF64](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

  }
  return v13;
}

uint64_t specialized static PegasusOverrideUtil.headerOverrides.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  char *i;
  int64_t v43;

  v0 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  if (one-time initialization token for overrideKeyHeaderKeyDict != -1)
LABEL_43:
    swift_once();
  v1 = static PegasusOverrideUtil.overrideKeyHeaderKeyDict;
  v2 = (char *)static PegasusOverrideUtil.overrideKeyHeaderKeyDict + 64;
  v3 = 1 << *((_BYTE *)static PegasusOverrideUtil.overrideKeyHeaderKeyDict + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *((_QWORD *)static PegasusOverrideUtil.overrideKeyHeaderKeyDict + 8);
  v43 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  for (i = v2; ; v2 = i)
  {
    while (1)
    {
      if (v5)
      {
        v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v8 = v7 | (v6 << 6);
      }
      else
      {
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        if (v9 >= v43)
          goto LABEL_39;
        v10 = *(_QWORD *)&v2[8 * v9];
        ++v6;
        if (!v10)
        {
          v6 = v9 + 1;
          if (v9 + 1 >= v43)
            goto LABEL_39;
          v10 = *(_QWORD *)&v2[8 * v6];
          if (!v10)
          {
            v6 = v9 + 2;
            if (v9 + 2 >= v43)
              goto LABEL_39;
            v10 = *(_QWORD *)&v2[8 * v6];
            if (!v10)
            {
              v11 = v9 + 3;
              if (v11 >= v43)
              {
LABEL_39:
                swift_release();
                return (uint64_t)v0;
              }
              v10 = *(_QWORD *)&v2[8 * v11];
              if (!v10)
              {
                while (1)
                {
                  v6 = v11 + 1;
                  if (__OFADD__(v11, 1))
                    goto LABEL_41;
                  if (v6 >= v43)
                    goto LABEL_39;
                  v10 = *(_QWORD *)&v2[8 * v6];
                  ++v11;
                  if (v10)
                    goto LABEL_21;
                }
              }
              v6 = v11;
            }
          }
        }
LABEL_21:
        v5 = (v10 - 1) & v10;
        v8 = __clz(__rbit64(v10)) + (v6 << 6);
      }
      v12 = 16 * v8;
      v13 = (uint64_t *)(v1[6] + v12);
      v14 = *v13;
      v15 = v13[1];
      v16 = (uint64_t *)(v1[7] + v12);
      v18 = *v16;
      v17 = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = specialized static PegasusOverrideUtil.getHeaderOverrideValue(overrideKey:headerKey:)(v14, v15, v18, v17);
      v21 = v20;
      swift_bridgeObjectRelease();
      if (v21)
        break;
      swift_bridgeObjectRetain();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
      v24 = v23;
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized _NativeDictionary.copy()();
        swift_bridgeObjectRelease();
        specialized _NativeDictionary._delete(at:)(v22, (uint64_t)v0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    v28 = v0[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      goto LABEL_42;
    if (v0[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v26 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        v34 = v26;
        specialized _NativeDictionary.copy()();
        if ((v34 & 1) != 0)
          goto LABEL_34;
      }
    }
    else
    {
      v41 = v26;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
      if ((v41 & 1) != (v32 & 1))
        goto LABEL_45;
      v27 = v31;
      if ((v41 & 1) != 0)
      {
LABEL_34:
        v33 = (uint64_t *)(v0[7] + 16 * v27);
        swift_bridgeObjectRelease();
        *v33 = v19;
        v33[1] = v21;
        goto LABEL_38;
      }
    }
    v0[(v27 >> 6) + 8] |= 1 << v27;
    v35 = (uint64_t *)(v0[6] + 16 * v27);
    *v35 = v18;
    v35[1] = v17;
    v36 = (uint64_t *)(v0[7] + 16 * v27);
    *v36 = v19;
    v36[1] = v21;
    v37 = v0[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      break;
    v0[2] = v39;
    swift_bridgeObjectRetain();
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_45:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PegasusOverrideUtil()
{
  return &type metadata for PegasusOverrideUtil;
}

uint64_t sub_1C24E030C()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PommesCandidateId and conformance PommesCandidateId()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId;
  if (!lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId)
  {
    v1 = type metadata accessor for PommesCandidateId();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D988E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId);
  }
  return result;
}

uint64_t static NowPlayingInfo.createIdentifierUrl(scheme:host:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD v15[2];

  v8 = type metadata accessor for URLComponents();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  swift_bridgeObjectRetain();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  v15[0] = 47;
  v15[1] = 0xE100000000000000;
  v12._countAndFlagsBits = a5;
  v12._object = a6;
  String.append(_:)(v12);
  URLComponents.path.setter();
  v13 = URLComponents.string.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

_QWORD *NowPlayingInfo.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v10 = (_QWORD *)swift_allocObject();
  v11 = v10;
  if (a1)
  {
    if ((a3 & 1) != 0)
      v12 = 0;
    else
      v12 = a2;
    v10[2] = a1;
    v10[3] = v12;
    if (a5)
      v13 = a4;
    else
      v13 = 0;
    v14 = 0xE000000000000000;
    if (a5)
      v14 = a5;
    v10[4] = v13;
    v10[5] = v14;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v11;
}

uint64_t NowPlayingInfo.state.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t NowPlayingInfo.applicationBundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *NowPlayingInfo.init(_:_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;

  if (a1)
  {
    if ((a3 & 1) != 0)
      a2 = 0;
    v5[2] = a1;
    v5[3] = a2;
    if (a5)
      v7 = a4;
    else
      v7 = 0;
    v8 = 0xE000000000000000;
    if (a5)
      v8 = a5;
    v5[4] = v7;
    v5[5] = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for NowPlayingInfo();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v5;
}

uint64_t NowPlayingInfo.externalContentIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v7[2];
  _OWORD v8[2];
  _QWORD v9[4];

  v1 = type metadata accessor for CharacterSet();
  v2 = *(_QWORD *)(v1 - 8);
  result = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*MEMORY[0x1E0D4CA30])
  {
    if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v8, 0, sizeof(v8));
    }
    outlined init with take of PommesSearchReason?((uint64_t)v8, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v9[3])
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v9[0] = v7[0];
        v9[1] = v7[1];
        static CharacterSet.urlPathAllowed.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v6 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v9);
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t NowPlayingInfo.uniqueIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  void *v6;
  Class isa;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  _OWORD v24[2];
  _OWORD v25[2];

  v1 = type metadata accessor for CharacterSet();
  v2 = *(_QWORD *)(v1 - 8);
  result = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*MEMORY[0x1E0D4CB80])
  {
    if (!objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_))
      return 0;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v24, v25);
    outlined init with copy of Any((uint64_t)v25, (uint64_t)v24);
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    if (swift_dynamicCast())
    {
      v6 = (void *)v23[0];
      static CharacterSet.urlPathAllowed.getter();
      isa = CharacterSet._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      v8 = objc_msgSend(v6, sel_stringByAddingPercentEncodingWithAllowedCharacters_, isa);

      if (v8)
      {
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      else
      {

        v9 = 0;
      }
    }
    else
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (!swift_dynamicCast())
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
        outlined init with copy of Any((uint64_t)v25, (uint64_t)v23);
        v15 = Logger.logObject.getter();
        v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc();
          v18 = swift_slowAlloc();
          v22 = v18;
          *(_DWORD *)v17 = 136315138;
          __swift_project_boxed_opaque_existential_1(v23, v23[3]);
          swift_getDynamicType();
          v19 = _typeName(_:qualified:)();
          v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
          _os_log_impl(&dword_1C2356000, v15, v16, "Bad NowPlayingInfo, kMRMediaRemoteNowPlayingInfoUniqueIdentifier gave unexpected item of class %s", v17, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v18, -1, -1);
          MEMORY[0x1C3BBFF64](v17, -1, -1);

        }
        else
        {

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
        return 0;
      }
      v10 = (void *)v23[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1C24FA1B0;
      v12 = objc_msgSend(v10, sel_longLongValue);
      v13 = MEMORY[0x1E0DEDCD8];
      *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEDC60];
      *(_QWORD *)(v11 + 64) = v13;
      *(_QWORD *)(v11 + 32) = v12;
      v9 = String.init(format:_:)();

    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return v9;
  }
  __break(1u);
  return result;
}

void static NowPlayingInfo.addKVToListeningToContainer(key:value:container:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v6;
  uint64_t v7;
  char v9;
  __int128 v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[4];
  uint64_t v35[3];
  uint64_t v36;
  __int128 v37;

  outlined init with copy of Any(a1, (uint64_t)v35);
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    outlined init with copy of Any(a1, (uint64_t)v35);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v14))
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
LABEL_27:

      return;
    }
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    *(_QWORD *)&v33[0] = v16;
    *(_DWORD *)v15 = 136315138;
    outlined init with copy of Any((uint64_t)v35, (uint64_t)v34);
    v17 = String.init<A>(describing:)();
    *(_QWORD *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    _os_log_impl(&dword_1C2356000, v13, v14, "Ignoring non-string key: %s", v15, 0xCu);
    swift_arrayDestroy();
    v19 = v16;
    goto LABEL_14;
  }
  if (!*MEMORY[0x1E0D4C958])
  {
    __break(1u);
    return;
  }
  v6 = v34[0];
  if (*(_QWORD *)&v34[0] == static String._unconditionallyBridgeFromObjectiveC(_:)() && *((_QWORD *)&v34[0] + 1) == v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_17:
    outlined init with copy of Any(a2, (uint64_t)v35);
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
      v13 = Logger.logObject.getter();
      v28 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v13, v28))
        goto LABEL_27;
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1C2356000, v13, v28, "Unexpected non-dictionary value for kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers", v29, 2u);
      v20 = v29;
      goto LABEL_26;
    }
    v21 = *(void **)&v34[0];
    if (one-time initialization token for pommes != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v35[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, *((unint64_t *)&v6 + 1), v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v23, v24, "Processing kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers key: %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v26, -1, -1);
      MEMORY[0x1C3BBFF64](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    NSDictionary.makeIterator()();
    NSDictionary.Iterator.next()();
    outlined init with take of PommesSearchReason?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    while (v36)
    {
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v37, v33);
      static NowPlayingInfo.addKVToListeningToContainer(key:value:container:)(v34, v33, a3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      NSDictionary.Iterator.next()();
      outlined init with take of PommesSearchReason?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    }
    swift_release();

    return;
  }
  outlined init with copy of Any(a2, (uint64_t)v35);
  if (swift_dynamicCast())
  {
    v10 = v34[0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35[0] = *a3;
    *a3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, *((uint64_t *)&v10 + 1), v6, *((uint64_t *)&v6 + 1), isUniquelyReferenced_nonNull_native);
    *a3 = v35[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  v13 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v31))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v35[0] = v32;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, *((unint64_t *)&v6 + 1), v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v13, v31, "Could not make safe value for key: %s", v15, 0xCu);
    swift_arrayDestroy();
    v19 = v32;
LABEL_14:
    MEMORY[0x1C3BBFF64](v19, -1, -1);
    v20 = v15;
LABEL_26:
    MEMORY[0x1C3BBFF64](v20, -1, -1);
    goto LABEL_27;
  }

  swift_bridgeObjectRelease_n();
}

uint64_t NowPlayingInfo.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for NowPlayingInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NowPlayingInfo.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 128))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of NowPlayingInfo.title.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NowPlayingInfo.artist.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NowPlayingInfo.album.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of NowPlayingInfo.mediaType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NowPlayingInfo.externalContentIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NowPlayingInfo.uniqueIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NowPlayingInfo.isRadio.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NowPlayingInfo.queueIndex.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of NowPlayingInfo.totalQueueCount.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of NowPlayingInfo.collectionInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NowPlayingInfo.mediaItemIdURL.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t UsoTask.getArgumentsAsType<A>(arguments:asType:)()
{
  uint64_t v1;

  static Array._allocateUninitialized(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoTask.Arguments]);
  type metadata accessor for Array();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [UsoTask.Arguments] and conformance [A], &demangling cache variable for type metadata for [UsoTask.Arguments]);
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Siri_Nlu_External_UserParse.pommesUSOTasks()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[2];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  MEMORY[0x1E0C80A78](v6);
  v34 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Siri_Nlu_External_Span.matcherNames.getter();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v32[0] = a1;
    v10 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
    v11 = v8 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    v32[1] = v8;
    v33 = v12;
    swift_bridgeObjectRetain();
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v14 = v34;
      Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
      Siri_Nlu_External_UserStatedTask.task.getter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
      if (v1)
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v38);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v15 = v5;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v38);
      v16 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
      v18 = v17;
      v19 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      swift_bridgeObjectRetain();
      v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology7UsoTaskCG_0D17InformationSearch06PommesfG0Vs5NeverOTg504_s12d40NLUTypes0A23_Nlu_External_UserParseV0A17hi29E14pommesUSOTasksQryKFSayAD13jfG55VGAA0a1_c1_d1_E9DialogActVKXEfU_AG0A8Ontology0lM0CXEfU_SSTf1cn_nTf4ng_n(v19, v16, v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      v21 = *(_QWORD *)(v20 + 16);
      v22 = v13[2];
      v23 = v22 + v21;
      if (__OFADD__(v22, v21))
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v23 > v13[3] >> 1)
      {
        if (v22 <= v23)
          v25 = v22 + v21;
        else
          v25 = v22;
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v25, 1, v13);
      }
      v5 = v15;
      if (*(_QWORD *)(v20 + 16))
      {
        v26 = v13[2];
        if ((v13[3] >> 1) - v26 < v21)
          goto LABEL_25;
        v27 = (unint64_t)&v13[3 * v26 + 4];
        if (v20 + 32 < v27 + 24 * v21 && v27 < v20 + 32 + 24 * v21)
          goto LABEL_27;
        swift_arrayInitWithCopy();
        if (v21)
        {
          v28 = v13[2];
          v29 = __OFADD__(v28, v21);
          v30 = v28 + v21;
          if (v29)
            goto LABEL_26;
          v13[2] = v30;
        }
      }
      else if (v21)
      {
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
      v11 += v33;
      if (!--v9)
      {
        result = swift_bridgeObjectRelease_n();
        *(_QWORD *)v32[0] = v13;
        return result;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *a1 = MEMORY[0x1E0DEE9D8];
  }
  return result;
}

void UsoTask.userEntities.getter()
{
  UsoTask.userEntities.getter(byte_1E7BFD028);
}

void UsoTask.references.getter()
{
  UsoTask.userEntities.getter(byte_1E7BFD080);
}

void UsoTask.triggers.getter()
{
  UsoTask.userEntities.getter(byte_1E7BFD0A8);
}

uint64_t UsoTask.codeGenUserEntities.getter()
{
  uint64_t v0;
  _BYTE v2[24];
  uint64_t v3;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v3)
  {
    outlined destroy of Any?((uint64_t)v2);
    return MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for CodeGenTaskBase();
  if ((swift_dynamicCast() & 1) == 0)
    return MEMORY[0x1E0DEE9D8];
  type metadata accessor for UsoEntity_common_UserEntity();
  v0 = dispatch thunk of CodeGenTaskBase.getAsListHelper<A>(argumentName:entryType:)();
  swift_release();
  if (v0)
    return v0;
  else
    return MEMORY[0x1E0DEE9D8];
}

void UsoTask.referencedMediaItems()()
{
  UsoTask.userEntities.getter(byte_1E7BFD260);
}

uint64_t UsoTask.isWHARelevantTask.getter()
{
  _QWORD v1[4];
  _BYTE v2[24];
  uint64_t v3;
  _BYTE v4[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v4, (uint64_t)v2);
  if (!v3)
  {
    outlined destroy of Any?((uint64_t)v2);
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_play_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
    goto LABEL_7;
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
  if (v1[0])
  {
    swift_release();
    outlined destroy of Any?((uint64_t)v2);
    return 1;
  }
LABEL_7:
  outlined init with take of Any?((uint64_t)v2, (uint64_t)v1);
  if (v1[3])
  {
    type metadata accessor for UsoTask_update_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v1);
  }
  return 0;
}

void UsoTask.phoneCallEntities.getter()
{
  UsoTask.userEntities.getter(byte_1E7BFDDB8);
}

void UsoTask.userEntities.getter(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = *a1;
  UsoTask.arguments.getter();
  __asm { BR              X9 }
}

uint64_t sub_1C24E1A04()
{
  void (*v0)(uint64_t);
  uint64_t v1;
  void (*v2)(_QWORD);
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*(_QWORD *)(v1 + 16)
    || (v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000), (v4 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_5;
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_5:
      v2(0);
      if (v7 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C24E1C34);
      }
      for (i = 0; i != v7; ++i)
      {
        if ((v5 & 0xC000000000000001) != 0)
          v9 = MEMORY[0x1C3BBF3F4](i, v5);
        else
          v9 = swift_retain();
        dispatch thunk of UsoValue.getAsEntity()(v9);
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v13);
        swift_release();
        v10 = swift_release();
        if (v13)
        {
          MEMORY[0x1C3BBEE78](v10);
          if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v12 = v14;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  v12 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_bridgeObjectRelease();
  v14 = v6;
  swift_bridgeObjectRetain();
  v0(v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t UsoTask.Arguments.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C24E1C84 + 4 * byte_1C2500EC0[a1]))(0x69746E4572657375, 0xEC00000073656974);
}

uint64_t sub_1C24E1C84()
{
  return 0x746567726174;
}

uint64_t sub_1C24E1C98()
{
  return 0x636E657265666572;
}

uint64_t sub_1C24E1CB4()
{
  return 0x72656767697274;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance UsoTask.Arguments(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1C24E1D34@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C24E1D90 + 4 * byte_1C2500EC8[a1]))(0x746567726174);
}

uint64_t sub_1C24E1D90(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746567726174 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance UsoTask.Arguments()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1C24E1E8C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UsoTask.Arguments()
{
  __asm { BR              X10 }
}

uint64_t sub_1C24E1F40()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance UsoTask.Arguments()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1C24E1FEC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UsoTask.Arguments@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized UsoTask.Arguments.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoTask.Arguments()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1C24E20C0 + 4 * byte_1C2500ED8[*v0]))();
}

void sub_1C24E20C0(_QWORD *a1@<X8>)
{
  *a1 = 0x746567726174;
  a1[1] = 0xE600000000000000;
}

void sub_1C24E20D8(_QWORD *a1@<X8>)
{
  *a1 = 0x636E657265666572;
  a1[1] = 0xE900000000000065;
}

void sub_1C24E20F8(_QWORD *a1@<X8>)
{
  *a1 = 0x72656767697274;
  a1[1] = 0xE700000000000000;
}

void closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  v2 = *a2;
  UsoTask.arguments.getter();
  __asm { BR              X9 }
}

uint64_t sub_1C24E2188()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (*(_QWORD *)(v1 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7 = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 - 72) = v6;
    MEMORY[0x1E0C80A78](v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoValue]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [UsoValue] and conformance [A], &demangling cache variable for type metadata for [UsoValue]);
    Sequence.compactMap<A>(_:)();
    swift_bridgeObjectRelease();
    v8 = static Array.+ infix(_:_:)();
    result = swift_bridgeObjectRelease();
    *v0 = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v0 = v2;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t closure #1 in closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  dispatch thunk of UsoValue.getAsEntity()(a1);
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&v4);
  result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t PommesUsoTask.graphDescription.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t PommesUsoTask.description.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesUsoTask()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

void partial apply for closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)(uint64_t a1, unsigned __int8 *a2)
{
  closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology7UsoTaskCG_0D17InformationSearch06PommesfG0Vs5NeverOTg504_s12d40NLUTypes0A23_Nlu_External_UserParseV0A17hi29E14pommesUSOTasksQryKFSayAD13jfG55VGAA0a1_c1_d1_E9DialogActVKXEfU_AG0A8Ontology0lM0CXEfU_SSTf1cn_nTf4ng_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  if (a1 >> 62)
    goto LABEL_15;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    if (!v5)
      return v6;
    v14 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
      break;
    v8 = 0;
    v6 = v14;
    while (v5 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v9 = MEMORY[0x1C3BBF3F4](v8, a1);
      }
      else
      {
        v9 = *(_QWORD *)(a1 + 8 * v8 + 32);
        swift_retain();
      }
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      ++v8;
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = (_QWORD *)(v14 + 24 * v11);
      v12[4] = v9;
      v12[5] = a2;
      v12[6] = a3;
      if (v5 == v8)
        return v6;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t specialized UsoTask.Arguments.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UsoTask.Arguments.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type UsoTask.Arguments and conformance UsoTask.Arguments()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsoTask.Arguments and conformance UsoTask.Arguments;
  if (!lazy protocol witness table cache variable for type UsoTask.Arguments and conformance UsoTask.Arguments)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for UsoTask.Arguments, &type metadata for UsoTask.Arguments);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoTask.Arguments and conformance UsoTask.Arguments);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UsoTask.Arguments(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C24E2650 + 4 * byte_1C2500EE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C24E2684 + 4 * byte_1C2500EE0[v4]))();
}

uint64_t sub_1C24E2684(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24E268C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24E2694);
  return result;
}

uint64_t sub_1C24E26A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24E26A8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C24E26AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24E26B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UsoTask.Arguments()
{
  return &type metadata for UsoTask.Arguments;
}

uint64_t destroy for PommesUsoTask()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for PommesUsoTask(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PommesUsoTask(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for PommesUsoTask(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesUsoTask(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesUsoTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesUsoTask()
{
  return &type metadata for PommesUsoTask;
}

uint64_t sub_1C24E2878()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [PommesUsoTask] and conformance [A], &demangling cache variable for type metadata for [PommesUsoTask]);
}

uint64_t partial apply for closure #1 in closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in closure #1 in UsoTask.getArgumentsAsType<A>(arguments:asType:)(a1, a2);
}

unint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void (*v5)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  double v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD v32[3];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v57;
  uint64_t v58;

  v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioRadioType();
  v53 = *(char **)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v38 = (char *)v32 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = (void (*)(char *, uint64_t))Apple_Parsec_Siri_V2alpha_AudioUnderstanding.entity.getter();
  v56 = v5;
  v48 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.musicTitle.getter();
  v54 = v6;
  v47 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.album.getter();
  v52 = v7;
  v46 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.artist.getter();
  v50 = v8;
  v45 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.podcastTitle.getter();
  v49 = v9;
  v44 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.getter();
  v41 = v10;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.decade.getter();
  v42 = Apple_Parsec_Siri_V2alpha_AudioDecade.toString.getter();
  v57 = v11;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v58 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.activity.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v40 = BidirectionalCollection<>.joined(separator:)();
  v43 = v12;
  swift_bridgeObjectRelease();
  v58 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.genre.getter();
  v37 = BidirectionalCollection<>.joined(separator:)();
  v39 = v13;
  swift_bridgeObjectRelease();
  v58 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.mood.getter();
  v35 = BidirectionalCollection<>.joined(separator:)();
  v15 = v14;
  swift_bridgeObjectRelease();
  v33 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookAuthor.getter();
  v36 = v16;
  v17 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookTitle.getter();
  v19 = v18;
  v20 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationName.getter();
  v22 = v21;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
  v23 = 0;
  v24 = 0;
  if (v25 >= 0.01)
  {
    Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
    v23 = Double.description.getter();
    v24 = v26;
  }
  v27 = v38;
  v32[2] = v24;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audioRadioType.getter();
  v28 = Apple_Parsec_Siri_V2alpha_AudioRadioType.toString.getter();
  v30 = v29;
  v34 = v29;
  (*((void (**)(char *, unint64_t))v53 + 1))(v27, v55);
  v32[1] = v22;
  v53 = v15;
  v55 = specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(v51, v56, v48, v54, v47, v52, v46, v50, v45, v49, v44, v41, v42, v57, v40, v43, v37, v39, v35,
          v15,
          v33,
          v36,
          v17,
          v19,
          v20,
          v22,
          v23,
          v24,
          v28,
          v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v55;
}

unint64_t static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(void (*a1)(char *, uint64_t), void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, char *a18, uint64_t a19, char *a20,uint64_t a21,char *a22,uint64_t a23,char *a24,uint64_t a25,char *a26,uint64_t a27,char *a28,uint64_t a29,char *a30)
{
  return specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

unint64_t specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(void (*a1)(char *, uint64_t), void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, char *a18, uint64_t a19, char *a20,uint64_t a21,char *a22,uint64_t a23,char *a24,uint64_t a25,char *a26,uint64_t a27,char *a28,uint64_t a29,char *a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  void (*v84)(_QWORD);
  void (*v85)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v86)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int (*v167)(char *, uint64_t, uint64_t);
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t);
  char *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  unsigned int v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  void (*v203)(char *, uint64_t);
  void (*v204)(_QWORD);
  char *v205;
  uint64_t v206;
  char *v207;
  void (*v208)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v209;
  uint64_t v210;

  v185 = a8;
  v180 = a7;
  v183 = a6;
  v179 = a5;
  v182 = a4;
  v178 = a3;
  v208 = a2;
  v203 = a1;
  v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v207 = (char *)&v178 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v205 = (char *)&v178 - v34;
  v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  v35 = *(_QWORD *)(v198 - 8);
  v36 = MEMORY[0x1E0C80A78](v198);
  v38 = (char *)&v178 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v36);
  v41 = (char *)&v178 - v40;
  MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v178 - v42;
  v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = MEMORY[0x1E0C80A78](v44);
  v196 = (char *)&v178 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x1E0C80A78](v46);
  v195 = (char *)&v178 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v194 = (char *)&v178 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v193 = (char *)&v178 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v192 = (char *)&v178 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v191 = (char *)&v178 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v190 = (char *)&v178 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v189 = (char *)&v178 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v188 = (char *)&v178 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v186 = (char *)&v178 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v184 = (char *)&v178 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v200 = (char *)&v178 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v199 = (char *)&v178 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v181 = (char *)&v178 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v76 = (char *)&v178 - v75;
  MEMORY[0x1E0C80A78](v74);
  v78 = (char *)&v178 - v77;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?>);
  v79 = *(_QWORD *)(v35 + 72);
  v80 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v209 = v79;
  v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_1C2500FF0;
  v197 = v81;
  v82 = v81 + v80;
  v83 = *MEMORY[0x1E0D6E9A0];
  v202 = v45;
  v84 = *(void (**)(_QWORD))(v45 + 104);
  v187 = v83;
  v204 = v84;
  v84(v78);
  v210 = v31;
  v206 = v82;
  v201 = v76;
  if (v208)
  {
    v85 = v208;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v76, v78, v44);
    MEMORY[0x1C3BBBB54](v76);
    MEMORY[0x1C3BBBB6C](v203, v85);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v82 = v206;
    v86 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v31 + 56);
    v87 = v206;
    v88 = 0;
  }
  else
  {
    v86 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v31 + 56);
    v87 = v82;
    v88 = 1;
  }
  v208 = v86;
  v86(v87, v88, 1, v30);
  v89 = v202;
  v203 = *(void (**)(char *, uint64_t))(v202 + 8);
  v203(v78, v44);
  v90 = v82 + v209;
  v91 = v181;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v181, *MEMORY[0x1E0D6E960], v44);
  v92 = v182;
  if (v182)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    v93 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
    v94 = v201;
    v93(v201, v91, v44);
    MEMORY[0x1C3BBBB54](v94);
    MEMORY[0x1C3BBBB6C](v178, v92);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v95 = 0;
  }
  else
  {
    v95 = 1;
  }
  v96 = 1;
  v208(v90, v95, 1, v30);
  v203(v91, v44);
  v97 = v206 + 2 * v209;
  v98 = v199;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v199, *MEMORY[0x1E0D6E968], v44);
  v99 = v183;
  if (v183)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    v100 = v201;
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v199, v44);
    v101 = v100;
    v98 = v199;
    MEMORY[0x1C3BBBB54](v101);
    MEMORY[0x1C3BBBB6C](v179, v99);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v96 = 0;
  }
  v102 = 1;
  v208(v97, v96, 1, v30);
  v203(v98, v44);
  v103 = v206 + 3 * v209;
  v104 = v200;
  LODWORD(v199) = *MEMORY[0x1E0D6E988];
  v204(v200);
  v105 = v185;
  if (v185)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    v106 = v201;
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v200, v44);
    v107 = v106;
    v104 = v200;
    MEMORY[0x1C3BBBB54](v107);
    MEMORY[0x1C3BBBB6C](v180, v105);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v102 = 0;
  }
  v200 = a12;
  v108 = 1;
  v208(v103, v102, 1, v30);
  v203(v104, v44);
  v109 = v206 + 4 * v209;
  v110 = v184;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v184, *MEMORY[0x1E0D6E918], v44);
  if (a10)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    v111 = v201;
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v110, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a9, a10);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v108 = 0;
  }
  else
  {
    v111 = v201;
  }
  v112 = v110;
  v185 = a14;
  v113 = 1;
  v208(v109, v108, 1, v30);
  v203(v112, v44);
  v114 = v206 + 5 * v209;
  v115 = v186;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v186, *MEMORY[0x1E0D6E9A8], v44);
  if (v200)
  {
    v116 = v200;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v111, v115, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a11, v116);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v113 = 0;
  }
  v117 = v115;
  v186 = a16;
  v118 = 1;
  v208(v114, v113, 1, v30);
  v203(v117, v44);
  v119 = v206 + 6 * v209;
  v120 = v188;
  LODWORD(v200) = *MEMORY[0x1E0D6E970];
  v204(v188);
  if (v185)
  {
    v121 = v185;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v111, v120, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a13, v121);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v118 = 0;
  }
  v122 = v120;
  v188 = a18;
  v123 = 1;
  v208(v119, v118, 1, v30);
  v203(v122, v44);
  v124 = v206 - v209 + 8 * v209;
  v125 = v189;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v189, v187, v44);
  if (v186)
  {
    v126 = v186;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v111, v125, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a15, v126);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v123 = 0;
  }
  v127 = v125;
  v189 = a20;
  v128 = 1;
  v208(v124, v123, 1, v30);
  v203(v127, v44);
  v129 = v206 + 8 * v209;
  v130 = v190;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v190, v200, v44);
  if (v188)
  {
    v131 = v188;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v111, v130, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a17, v131);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v128 = 0;
  }
  v132 = v130;
  v190 = a22;
  v133 = 1;
  v208(v129, v128, 1, v30);
  v203(v132, v44);
  v134 = v206 + 9 * v209;
  v135 = v191;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v191, v200, v44);
  if (v189)
  {
    v136 = v189;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v111, v135, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a19, v136);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v133 = 0;
  }
  v137 = v135;
  v200 = a24;
  v138 = 1;
  v208(v134, v133, 1, v30);
  v203(v137, v44);
  v139 = v206 + 10 * v209;
  v140 = v192;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v192, v199, v44);
  if (v190)
  {
    v141 = v190;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v111, v140, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a21, v141);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v138 = 0;
  }
  v142 = v140;
  v199 = a26;
  v143 = 1;
  v208(v139, v138, 1, v30);
  v203(v142, v44);
  v144 = v206 + 11 * v209;
  v145 = v193;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v193, *MEMORY[0x1E0D6E9B8], v44);
  if (v200)
  {
    v146 = v200;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v111, v145, v44);
    MEMORY[0x1C3BBBB54](v111);
    MEMORY[0x1C3BBBB6C](a23, v146);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v143 = 0;
  }
  v147 = v145;
  v193 = a28;
  v148 = 1;
  v208(v144, v143, 1, v30);
  v203(v147, v44);
  v149 = v206 + 12 * v209;
  v150 = v194;
  LODWORD(v200) = *MEMORY[0x1E0D6E928];
  v204(v194);
  v151 = v199;
  if (v199)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    v152 = v201;
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v150, v44);
    MEMORY[0x1C3BBBB54](v152);
    MEMORY[0x1C3BBBB6C](a25, v151);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v148 = 0;
  }
  v153 = v195;
  v199 = a30;
  v154 = 1;
  v208(v149, v148, 1, v30);
  v203(v150, v44);
  v155 = v206 + 13 * v209;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v153, v200, v44);
  v156 = v193;
  if (v193)
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    v157 = v201;
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v153, v44);
    MEMORY[0x1C3BBBB54](v157);
    MEMORY[0x1C3BBBB6C](a27, v156);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v154 = 0;
  }
  v158 = 1;
  v208(v155, v154, 1, v30);
  v203(v153, v44);
  v159 = v206 + 14 * v209;
  v160 = v196;
  ((void (*)(char *, _QWORD, uint64_t))v204)(v196, v200, v44);
  if (v199)
  {
    v161 = v199;
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
    v162 = v201;
    (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v201, v160, v44);
    MEMORY[0x1C3BBBB54](v162);
    MEMORY[0x1C3BBBB6C](a29, v161);
    Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
    v158 = 0;
  }
  v208(v159, v158, 1, v30);
  v203(v160, v44);
  v163 = MEMORY[0x1E0DEE9D8];
  v164 = 15;
  v165 = v206;
  v166 = v210;
  do
  {
    outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(v165, (uint64_t)v43);
    outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?((uint64_t)v43, (uint64_t)v38);
    v167 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48);
    if (v167(v38, 1, v30) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?((uint64_t)v38);
    }
    else
    {
      v168 = MEMORY[0x1C3BBBB60]();
      v170 = v169;
      (*(void (**)(char *, uint64_t))(v210 + 8))(v38, v30);
      swift_bridgeObjectRelease();
      v171 = HIBYTE(v170) & 0xF;
      v172 = v168 & 0xFFFFFFFFFFFFLL;
      v166 = v210;
      if ((v170 & 0x2000000000000000) == 0)
        v171 = v172;
      if (v171)
      {
        outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?((uint64_t)v43, (uint64_t)v41);
        goto LABEL_44;
      }
    }
    v208(v41, 1, 1, v30);
LABEL_44:
    outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?((uint64_t)v43);
    if (v167(v41, 1, v30) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?((uint64_t)v41);
    }
    else
    {
      v173 = *(void (**)(char *, char *, uint64_t))(v166 + 32);
      v174 = v205;
      v173(v205, v41, v30);
      v173(v207, v174, v30);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v163 + 16) + 1, 1, v163);
      v176 = *(_QWORD *)(v163 + 16);
      v175 = *(_QWORD *)(v163 + 24);
      if (v176 >= v175 >> 1)
        v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v175 > 1, v176 + 1, 1, v163);
      *(_QWORD *)(v163 + 16) = v176 + 1;
      v166 = v210;
      v173((char *)(v163+ ((*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80))+ *(_QWORD *)(v210 + 72) * v176), v207, v30);
    }
    v165 += v209;
    --v164;
  }
  while (v164);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v163;
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FeatureChecker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FeatureChecker.isSystemAssistantExperienceEnabled.getter()
{
  return AFDeviceSupportsSAE();
}

uint64_t FeatureChecker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FeatureChecker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t FeatureChecker.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for FeatureChecking.isSystemAssistantExperienceEnabled.getter in conformance FeatureChecker()
{
  return AFDeviceSupportsSAE();
}

uint64_t dispatch thunk of FeatureChecking.isSystemAssistantExperienceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for FeatureChecker()
{
  return objc_opt_self();
}

uint64_t method lookup function for FeatureChecker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FeatureChecker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

Swift::Bool __swiftcall AudioIntent.hasResolvedReference()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(v0 + 256))();
  if (v1)
    swift_release();
  return v1 != 0;
}

Swift::Bool __swiftcall AudioIntent.isReferringToCurrentlyPlayingForAdd()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  v6 = *(_QWORD *)(v0 - 8);
  v7 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v23 - v11;
  v14 = (*(uint64_t (**)(uint64_t))(v13 + 280))(v10);
  if (v14 == 17)
  {
    return 0;
  }
  else
  {
    if (CommonAudio.Verb.rawValue.getter(v14) == 0x657461647075 && v16 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v15 = 0;
      if ((v18 & 1) == 0)
        return v15;
    }
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 256))(v5, v4);
    swift_release();
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v20(v12, v3, v5);
    if (v19)
      LOBYTE(v19) = AudioIntent.isWithoutTitlesAndArtist()();
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v12, v5);
    v20(v9, v3, v5);
    v15 = (v19 & 1) != 0 || AudioIntent.isWithoutTitlesAndArtistAndGenre()();
    v21(v9, v5);
  }
  return v15;
}

Swift::Bool __swiftcall AudioIntent.isWithoutTitlesAndArtist()()
{
  uint64_t v0;
  uint64_t (**v1)(_QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v23;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  v6 = *(_QWORD *)(v0 - 8);
  v7 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v23 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v23 - v14;
  v17 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(v16 + 136))(v13) + 16);
  swift_bridgeObjectRelease();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v18(v15, v3, v5);
  if (v17)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v4[25](v5, v4) + 16);
    swift_bridgeObjectRelease();
    LODWORD(v19) = v19 == 0;
  }
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v15, v5);
  v18(v12, v3, v5);
  if ((_DWORD)v19)
  {
    v21 = *(_QWORD *)(v4[12](v5, v4) + 16);
    swift_bridgeObjectRelease();
    v20(v12, v5);
    v18(v9, v3, v5);
    if (v21)
    {
      LOBYTE(v19) = 0;
    }
    else
    {
      v19 = *(_QWORD *)(v4[2](v5, v4) + 16);
      swift_bridgeObjectRelease();
      LOBYTE(v19) = v19 == 0;
    }
  }
  else
  {
    v20(v12, v5);
    v18(v9, v3, v5);
  }
  v20(v9, v5);
  return v19;
}

Swift::Bool __swiftcall AudioIntent.isWithoutTitlesAndArtistAndGenre()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  Swift::Bool v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  int v15;
  void (*v16)(char *, uint64_t);
  unsigned __int8 v17;
  uint64_t v18;
  char v20;
  uint64_t v22;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  v6 = *(_QWORD *)(v0 - 8);
  v7 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v22 - v10;
  v12 = AudioIntent.isWithoutTitlesAndArtist()();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v11, v3, v5);
  if (v12)
  {
    v14 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 152))(v5, v4) + 16);
    swift_bridgeObjectRelease();
    v15 = v14 == 0;
  }
  else
  {
    v15 = 0;
  }
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  v13(v9, v3, v5);
  if (v15)
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 168))(v5, v4);
    if (v17 == 28)
    {
      LOBYTE(v15) = 1;
    }
    else if (CommonAudio.MediaType.rawValue.getter(v17) == 0x65726E6567 && v18 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v15) = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      LOBYTE(v15) = v20 ^ 1;
    }
  }
  v16(v9, v5);
  return v15 & 1;
}

Swift::Bool __swiftcall AudioIntent.isBeats1Only()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::Bool v6;
  BOOL v7;
  uint64_t v9;

  v2 = v0;
  v3 = *(_QWORD *)(v0 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = AudioIntent.hasBeats1ItemOrRadioStationNameOnly()();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v7 = v6 || AudioIntent.hasBeats1NounOnly()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

Swift::Bool __swiftcall AudioIntent.hasBeats1ItemOrRadioStationNameOnly()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  char v17;

  v2 = v1;
  v3 = v0;
  v4 = (_QWORD *)(*(uint64_t (**)(void))(v1 + 136))();
  if (v4[2])
  {
    v6 = v4[4];
    v5 = v4[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = 0;
    v5 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 232))(v3, v2);
  if (v7[2])
  {
    v9 = v7[4];
    v8 = v7[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = 0;
    v8 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  v10 = v5 & 0x2000000000000000;
  v11 = HIBYTE(v5) & 0xF;
  v12 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v5) & 0xF;
  else
    v13 = v6 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = v8 & 0x2000000000000000;
    v11 = HIBYTE(v8) & 0xF;
    v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
    v14 = v11;
  else
    v14 = v12;
  if (v14)
  {
    v15 = String.lowercased()();
    swift_bridgeObjectRelease();
    v16 = String.lowercased()();
    if (v15._countAndFlagsBits == v16._countAndFlagsBits && v15._object == v16._object)
      v17 = 1;
    else
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0;
  }
  swift_bridgeObjectRelease();
  return v17 & 1;
}

Swift::Bool __swiftcall AudioIntent.hasBeats1NounOnly()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v3 = v1;
  v4 = v0;
  v5 = *(_QWORD *)(v0 - 8);
  v6 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(v9 + 136))(v6);
  if (v10[2])
  {
    v12 = v10[4];
    v11 = v10[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13 = v12 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = 0;
    v11 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  if ((v11 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v11) & 0xF;
  else
    v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, v4);
  if (!v14)
  {
    v15 = (char *)&loc_1C24E4728
        + 4 * byte_1C2501080[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 208))(v4, v3)];
    __asm { BR              X11 }
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return 0;
}

Swift::Bool __swiftcall AudioIntent.isAddToUpNext()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  unsigned __int8 v15;
  void (*v16)(char *, uint64_t, uint64_t);
  unsigned __int8 v17;
  char v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char v26;
  uint64_t v28;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  v6 = *(_QWORD *)(v0 - 8);
  v7 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v28 - v11;
  v14 = *(uint64_t (**)(uint64_t))(v13 + 280);
  v15 = v14(v10);
  if (v15 == 17)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v16(v12, v2, v5);
  }
  else
  {
    if (CommonAudio.Verb.rawValue.getter(v15) == 2036427888 && v19 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v16(v12, v2, v5);
      goto LABEL_18;
    }
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v16(v12, v2, v5);
    if ((v21 & 1) != 0)
      goto LABEL_18;
  }
  v17 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v5, v4);
  if (v17 == 17)
  {
    v18 = 0;
    goto LABEL_19;
  }
  if (CommonAudio.Verb.rawValue.getter(v17) != 0x657461647075 || v22 != 0xE600000000000000)
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  v18 = 1;
LABEL_19:
  v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24(v12, v5);
  v16(v9, v3, v5);
  if ((v18 & 1) != 0)
  {
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 104))(v5, v4);
    v26 = specialized Set.contains(_:)(3u, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = 0;
  }
  v24(v9, v5);
  return v26 & 1;
}

Swift::Bool __swiftcall AudioIntent.hasAttribute(_:)(SiriInformationSearch::CommonAudio::Attribute a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = (*(uint64_t (**)())(v1 + 104))();
  v4 = specialized Set.contains(_:)(a1, v3);
  swift_bridgeObjectRelease();
  return v4 & 1;
}

BOOL AudioIntent.hasAnyAttribute(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3);
  LOBYTE(a1) = specialized Set.isDisjoint(with:)(a1, v4);
  swift_bridgeObjectRelease();
  return (a1 & 1) == 0;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      if (v2 >= v3)
        v4 = a1;
      else
        v4 = a2;
      if (v2 >= v3)
        v5 = a2;
      else
        v5 = a1;
      v19 = v4 + 56;
      v6 = -1 << *(_BYTE *)(v4 + 32);
      if (-v6 < 64)
        v7 = ~(-1 << -(char)v6);
      else
        v7 = -1;
      v8 = v7 & *(_QWORD *)(v4 + 56);
      v18 = (unint64_t)(63 - v6) >> 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = 0;
      while (1)
      {
        while (1)
        {
          v10 = v9;
          if (!v8)
            break;
          v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
          v12 = v11 | (v9 << 6);
          if (*(_QWORD *)(v5 + 16))
            goto LABEL_30;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        if (v13 >= v18)
          goto LABEL_32;
        v14 = *(_QWORD *)(v19 + 8 * v13);
        ++v9;
        if (!v14)
        {
          v9 = v10 + 2;
          if (v10 + 2 >= v18)
            goto LABEL_32;
          v14 = *(_QWORD *)(v19 + 8 * v9);
          if (!v14)
          {
            v9 = v10 + 3;
            if (v10 + 3 >= v18)
              goto LABEL_32;
            v14 = *(_QWORD *)(v19 + 8 * v9);
            if (!v14)
            {
              v15 = v10 + 4;
              if (v10 + 4 >= v18)
              {
LABEL_32:
                swift_bridgeObjectRelease();
                outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
                return 1;
              }
              v14 = *(_QWORD *)(v19 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v9 >= v18)
                    goto LABEL_32;
                  v14 = *(_QWORD *)(v19 + 8 * v9);
                  ++v15;
                  if (v14)
                    goto LABEL_29;
                }
LABEL_34:
                __break(1u);
                JUMPOUT(0x1C24E5248);
              }
              v9 = v10 + 4;
            }
          }
        }
LABEL_29:
        v8 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v9 << 6);
        if (*(_QWORD *)(v5 + 16))
        {
LABEL_30:
          v16 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v12);
          Hasher.init(_seed:)();
          __asm { BR              X8 }
        }
      }
    }
  }
  return 1;
}

uint64_t dispatch thunk of AudioIntent.activities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AudioIntent.albums.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AudioIntent.appAudiobookAuthors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AudioIntent.appAudiobookTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AudioIntent.appMusicArtistNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AudioIntent.appName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AudioIntent.appPlaylistTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AudioIntent.appShowTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of AudioIntent.applePlaylistTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of AudioIntent.applePodcastTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AudioIntent.apps.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of AudioIntent.artists.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of AudioIntent.attributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of AudioIntent.confirmationState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of AudioIntent.dateTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of AudioIntent.decade.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of AudioIntent.entities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of AudioIntent.frequency.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of AudioIntent.genres.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of AudioIntent.mediaIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of AudioIntent.mediaType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of AudioIntent.targetMediaType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of AudioIntent.modifiers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of AudioIntent.moods.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of AudioIntent.musicTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of AudioIntent.noun.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of AudioIntent.playlistTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of AudioIntent.podcastTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of AudioIntent.radioStationNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of AudioIntent.radioType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of AudioIntent.reference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of AudioIntent.resolvedReference.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of AudioIntent.showTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t dispatch thunk of AudioIntent.sort.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t dispatch thunk of AudioIntent.verb.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t DomainWarmup.__allocating_init(warmupClients:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  DomainWarmup.init(warmupClients:)(a1);
  return v2;
}

_QWORD *DomainWarmup.init(warmupClients:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v14 = *(_QWORD *)(v2 - 8);
  v15 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for DispatchQoS.QoSClass();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF540], v7);
  v13[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static DispatchQoS.unspecified.getter();
  v11 = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v4, *MEMORY[0x1E0DEF8D0], v15);
  v1[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[3] = specialized Dictionary.init(dictionaryLiteral:)(v11);
  v1[4] = v16;
  v1[5] = 0;
  return v1;
}

uint64_t DomainWarmup.setServiceHelper(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

Swift::Bool __swiftcall DomainWarmup.warmupCalled(for:)(Swift::String a1)
{
  Swift::Bool v2;

  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

uint64_t closure #1 in DomainWarmup.warmupCalled(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v9;
  char v10;

  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    v10 = v9;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  *a4 = v10 & 1;
  return result;
}

uint64_t DomainWarmup.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t DomainWarmup.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in DomainWarmup.warmupCalled(for:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in DomainWarmup.warmupCalled(for:)(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1C24E584C()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of DomainWarmupHandling.warmup(request:serviceHelper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for DomainWarmup()
{
  return objc_opt_self();
}

uint64_t method lookup function for DomainWarmup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DomainWarmup.__allocating_init(warmupClients:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of DomainWarmup.warmupFirstExperience(request:response:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of DomainWarmup.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of DomainWarmup.warmup(request:domain:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of DomainWarmup.warmupCalled(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of DomainWarmup.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t outlined destroy of DomainWarmupHandling?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DomainWarmupHandling?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AudioQuery.queryFields.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL AudioQuery.removeLibraryGenreCandidates.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E080];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0D6E068], v0);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioNoun and conformance Apple_Parsec_Siri_V2alpha_AudioNoun, v1, MEMORY[0x1E0D6E090]);
  v5 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v0);
  return (v5 & 1) == 0;
}

uint64_t AudioQuery.requestedType.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F5A0], a1);
}

uint64_t AudioQuery.audioSort.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E0F8], a1);
}

uint64_t AudioQuery.verb.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E118], a1);
}

uint64_t AudioQuery.noun.getter@<X0>(uint64_t a1@<X8>)
{
  return AudioQuery.requestedType.getter(&OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E080], a1);
}

uint64_t AudioQuery.requestedType.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *a1;
  v6 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t AudioQuery.appName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioQuery.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioModifier?(v1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier, a1);
}

uint64_t AudioQuery.hasNonExplicitReference.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference);
}

uint64_t AudioQuery.isGlideEligible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
}

uint64_t AudioQuery.networkAvailableAtRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest);
}

uint64_t AudioQuery.isRequestingAppleMusic.getter()
{
  uint64_t v0;
  Swift::String v1;
  char v3;

  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName + 8))
    return 0;
  v1 = String.lowercased()();
  if (v1._countAndFlagsBits == 0x636973756DLL && v1._object == (void *)0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v3 & 1;
  }
}

uint64_t AudioQuery.__allocating_init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)(void (*a1)(char *, uint64_t), void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, char *a18, uint64_t a19, char *a20,uint64_t a21,char *a22,uint64_t a23,char *a24,uint64_t a25,char *a26,uint64_t a27,char *a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unsigned __int8 a38,unsigned __int8 a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v58;
  _QWORD v59[5];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v81 = a8;
  v80 = a7;
  v75 = a6;
  v79 = a5;
  v74 = a4;
  v77 = a3;
  v72 = a2;
  v76 = a1;
  v91 = a36;
  v92 = a35;
  v88 = a39;
  v89 = a38;
  v86 = a34;
  v87 = a37;
  v102 = a32;
  v100 = a33;
  v101 = a31;
  v73 = a9;
  v93 = a10;
  v71 = a11;
  v59[4] = a12;
  v69 = a13;
  v59[3] = a14;
  v68 = a15;
  v59[2] = a16;
  v67 = a17;
  v59[1] = a18;
  v66 = a19;
  v65 = a21;
  v64 = a23;
  v62 = a25;
  v61 = a27;
  v60 = a29;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  MEMORY[0x1E0C80A78](v39);
  v85 = (uint64_t)v59 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  v83 = *(_QWORD *)(v41 - 8);
  v84 = v41;
  MEMORY[0x1E0C80A78](v41);
  v82 = (char *)v59 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  v97 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v78 = (char *)v59 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  v98 = *(_QWORD *)(v44 - 8);
  v99 = v44;
  MEMORY[0x1E0C80A78](v44);
  v70 = (char *)v59 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v94 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v63 = (char *)v59 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = specialized static Apple_Parsec_Siri_V2alpha_AudioUnderstanding.makeLibrarySearchTerms(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:)(v76, v72, v77, v74, v79, v75, v80, v81, v73, v93, v71, a12, v69, a14, v68, a16, v67, a18, v66,
          a20,
          v65,
          a22,
          v64,
          a24,
          v62,
          a26,
          v61,
          a28,
          v60,
          a30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v63, v101, v96);
  v48 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v70, v102, v99);
  v49 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v78, v100, v95);
  v51 = v82;
  v50 = v83;
  v52 = v86;
  v53 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v86, v84);
  v54 = v87;
  v55 = v85;
  outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioModifier?(v87, v85);
  BYTE2(v58) = 1;
  BYTE1(v58) = v88;
  LOBYTE(v58) = v89;
  v56 = (*(uint64_t (**)(unint64_t, char *, char *, char *, char *, uint64_t, uint64_t, uint64_t, int))(v90 + 176))(v80, v47, v48, v49, v51, v92, v91, v55, v58);
  outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v53);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v100, v95);
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v102, v99);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v101, v96);
  return v56;
}

uint64_t AudioQuery.__allocating_init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  v20 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a2, v21);
  v22 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a3, v23);
  v24 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a4, v25);
  v26 = v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a5, v27);
  v28 = (_QWORD *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  *v28 = a6;
  v28[1] = a7;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(a8, v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = a9;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = a10;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = a11;
  return v19;
}

uint64_t AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, char a11)
{
  uint64_t v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  *(_QWORD *)(v11 + 16) = a1;
  v19 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a2, v20);
  v21 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a3, v22);
  v23 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a4, v24);
  v25 = v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a5, v26);
  v27 = (_QWORD *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  *v27 = a6;
  v27[1] = a7;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(a8, v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(_BYTE *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = a9;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = a10;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = a11;
  return v11;
}

unint64_t closure #1 in static AudioQuery.makeNormalQuery(audioExperience:mode:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v0 = *(_QWORD *)(Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter() + 16);
  swift_bridgeObjectRelease();
  if (v0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1C2356000, v2, v3, "AudioQuery : librarySearchTerms from ClientSignals", v4, 2u);
      MEMORY[0x1C3BBFF64](v4, -1, -1);
    }

    return Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1C2356000, v7, v8, "AudioQuery : librarySearchTerms from AudioUnderstanding", v9, 2u);
      MEMORY[0x1C3BBFF64](v9, -1, -1);
    }

    return Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter();
  }
}

unint64_t closure #1 in static AudioQuery.makePlaylistQuery(audioExperience:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *);
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD v52[2];
  uint64_t v53;
  char *v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v61 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v63 = *(_QWORD *)(v61 - 8);
  v0 = MEMORY[0x1E0C80A78](v61);
  v60 = (char *)v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v0);
  v62 = (char *)v52 - v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v59 = (char *)v52 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v54 = (char *)v52 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v52 - v15;
  v17 = *(_QWORD *)(Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    v44 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.getter();
    v46 = v45;
    swift_bridgeObjectRelease();
    v47 = HIBYTE(v46) & 0xF;
    if ((v46 & 0x2000000000000000) == 0)
      v47 = v44 & 0xFFFFFFFFFFFFLL;
    if (v47)
    {
      Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()();
      v48 = v62;
      (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, *MEMORY[0x1E0D6E9A8], v61);
      MEMORY[0x1C3BBBB54](v48);
      v49 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.getter();
      MEMORY[0x1C3BBBB6C](v49);
      Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LibrarySearchTerm>);
      v50 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1C24FA1B0;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v24 + v50, v10, v6);
      return v24;
    }
    return MEMORY[0x1E0DEE9D8];
  }
  v18 = Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter();
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v20 = *(unsigned __int8 *)(v7 + 80);
  v52[1] = v18;
  v53 = (v20 + 32) & ~v20;
  v21 = v18 + v53;
  v22 = *(_QWORD *)(v7 + 72);
  v58 = v7;
  v23 = *(uint64_t (**)(char *))(v7 + 16);
  v55 = *MEMORY[0x1E0D6E9A8];
  v24 = MEMORY[0x1E0DEE9D8];
  v56 = v22;
  v57 = v5;
  v25 = v63;
  v26 = v60;
  do
  {
    v65 = v19;
    v66 = v24;
    v64 = v21;
    v28 = v23(v16);
    v29 = v62;
    MEMORY[0x1C3BBBB48](v28);
    v30 = v16;
    v31 = v6;
    v32 = v61;
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v26, v55, v61);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9E0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v34 = v67;
    v33 = v68;
    v35 = *(void (**)(char *, uint64_t))(v25 + 8);
    v35(v26, v32);
    v35(v29, v32);
    if (v33 == v34)
    {
      v36 = (uint64_t)v57;
      ((void (*)(char *, char *, uint64_t))v23)(v57, v30, v31);
      v37 = 0;
    }
    else
    {
      v37 = 1;
      v36 = (uint64_t)v57;
    }
    v6 = v31;
    v16 = v30;
    v38 = v58;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v36, v37, 1, v6);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v6);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v6);
    v24 = v66;
    if (v39 == 1)
    {
      outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm?);
      v27 = v56;
    }
    else
    {
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 32);
      v41 = v54;
      v40(v54, v36, v6);
      v40(v59, (uint64_t)v41, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
      v43 = *(_QWORD *)(v24 + 16);
      v42 = *(_QWORD *)(v24 + 24);
      if (v43 >= v42 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v24);
      *(_QWORD *)(v24 + 16) = v43 + 1;
      v27 = v56;
      v40((char *)(v24 + v53 + v43 * v56), (uint64_t)v59, v6);
    }
    v21 = v64 + v27;
    v19 = v65 - 1;
  }
  while (v65 != 1);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t AudioQuery.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  return v0;
}

uint64_t AudioQuery.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  return swift_deallocClassInstance();
}

uint64_t specialized static AudioQuery.makeNormalQuery(audioExperience:mode:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  BOOL v30;
  int v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _BYTE v46[4];
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  MEMORY[0x1E0C80A78](v2);
  v67 = &v46[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  v65 = *(_QWORD *)(v4 - 8);
  v66 = v4;
  MEMORY[0x1E0C80A78](v4);
  v64 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  MEMORY[0x1E0C80A78](v6);
  v61 = &v46[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  MEMORY[0x1E0C80A78](v8);
  v57 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  MEMORY[0x1E0C80A78](v10);
  v54 = &v46[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioReference();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = &v46[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v21 = &v46[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v50 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v22 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v24 = &v46[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AudioExperience.audioUnderstanding.getter();
  v60 = a1;
  AudioExperience.audioClientComponent.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v19, v16);
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.reference.getter();
  v25 = (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 88))(v15, v12);
  v30 = v25 == *MEMORY[0x1E0D6EC60]
     || v25 == *MEMORY[0x1E0D6EC70]
     || v25 == *MEMORY[0x1E0D6EC68]
     || v25 == *MEMORY[0x1E0D6EC78]
     || v25 == *MEMORY[0x1E0D6EC58]
     || v25 == *MEMORY[0x1E0D6EC50];
  v31 = v30;
  v52 = v31;
  if (!v30)
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  v32 = closure #1 in static AudioQuery.makeNormalQuery(audioExperience:mode:)();
  v33 = v54;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.requestedMediaType.getter();
  v34 = v57;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.sort.getter();
  v35 = v61;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.verb.getter();
  v36 = v64;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.noun.getter();
  v37 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.getter();
  v48 = v38;
  v49 = v37;
  v39 = (uint64_t)v67;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.getter();
  v40 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
  v47 = dispatch thunk of AudioExperience.isGlideEligible.getter();
  v41 = dispatch thunk of AudioExperience.networkAvailableAtRequest.getter();
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v21, v53);
  (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v24, v50);
  type metadata accessor for AudioQuery();
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = v32;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v55 + 32))(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v33, v56);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v58 + 32))(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, v34, v59);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v62 + 32))(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb, v35, v63);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v65 + 32))(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun, v36, v66);
  v43 = (uint64_t *)(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  v44 = v48;
  *v43 = v49;
  v43[1] = v44;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(v39, v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(_BYTE *)(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = v52;
  *(_BYTE *)(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = v47 & 1;
  *(_BYTE *)(v42 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = v41 & 1;
  return v42;
}

uint64_t specialized static AudioQuery.makePlaylistQuery(audioExperience:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v49 = (char *)&v35 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  MEMORY[0x1E0C80A78](v1);
  v48 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  MEMORY[0x1E0C80A78](v3);
  v47 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v40 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v36 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = v8;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v43 = *(_QWORD *)(v13 - 8);
  v44 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v16 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AudioExperience.audioUnderstanding.getter();
  AudioExperience.audioClientComponent.getter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v37 = closure #1 in static AudioQuery.makePlaylistQuery(audioExperience:)();
  v19 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v8, *MEMORY[0x1E0D6F588], v6);
  v20 = v40;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.verb.getter();
  v21 = v47;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.noun.getter();
  v22 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.getter();
  v45 = v23;
  v46 = v22;
  v24 = (uint64_t)v48;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.getter();
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
  v41 = dispatch thunk of AudioExperience.isGlideEligible.getter();
  v26 = dispatch thunk of AudioExperience.networkAvailableAtRequest.getter();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v42);
  v27 = v51;
  v28 = v49;
  v29 = v53;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v49, *MEMORY[0x1E0D6E0D8], v53);
  type metadata accessor for AudioQuery();
  v30 = swift_allocObject();
  v31 = v38;
  *(_QWORD *)(v30 + 16) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v39, v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_audioSort, v28, v29);
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_verb, v20, v52);
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_noun, v21, v55);
  v32 = (uint64_t *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_appName);
  v33 = v45;
  *v32 = v46;
  v32[1] = v33;
  outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(v24, v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_modifier);
  *(_BYTE *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_hasNonExplicitReference) = 0;
  *(_BYTE *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible) = v41 & 1;
  *(_BYTE *)(v30 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest) = v26 & 1;
  return v30;
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioModifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_AudioModifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ObjC metadata update function for AudioQuery()
{
  return type metadata accessor for AudioQuery();
}

uint64_t type metadata accessor for AudioQuery()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AudioQuery;
  if (!type metadata singleton initialization cache for AudioQuery)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for AudioQuery()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun();
        if (v3 <= 0x3F)
        {
          type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier?();
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t method lookup function for AudioQuery()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioQuery.removeLibraryGenreCandidates.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AudioQuery.isRequestingAppleMusic.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of AudioQuery.__allocating_init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioModifier?);
  }
}

uint64_t AssistantDataCache.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, id, _UNKNOWN **, _QWORD))(v1 + 168))(a1, objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init), &protocol witness table for CNContactStore, 0);
}

uint64_t closure #1 in variable initialization expression of AssistantDataCache.contactsQueue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v11 = *(_QWORD *)(v0 - 8);
  v12 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for DispatchQoS.QoSClass();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF540], v5);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  v13 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v2, *MEMORY[0x1E0DEF8D0], v12);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t key path setter for AssistantDataCache.lastAssistantDataSnapshot : AssistantDataCache(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *a2;
  v11 = *(_WORD *)(a1 + 88);
  swift_beginAccess();
  v18 = *(_QWORD *)(v10 + 56);
  v19 = *(_QWORD *)(v10 + 48);
  v16 = *(_QWORD *)(v10 + 72);
  v17 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v10 + 48) = v15;
  *(_QWORD *)(v10 + 56) = v14;
  *(_QWORD *)(v10 + 64) = v13;
  *(_QWORD *)(v10 + 72) = v2;
  *(_QWORD *)(v10 + 80) = v3;
  *(_QWORD *)(v10 + 88) = v4;
  *(_QWORD *)(v10 + 96) = v5;
  *(_QWORD *)(v10 + 104) = v6;
  *(_QWORD *)(v10 + 112) = v7;
  *(_QWORD *)(v10 + 120) = v8;
  *(_QWORD *)(v10 + 128) = v9;
  *(_WORD *)(v10 + 136) = v11;
  outlined copy of AssistantDataSnapshot?(v15, v14, v13, v2);
  return outlined consume of AssistantDataSnapshot?(v19, v18, v17, v16);
}

void key path setter for AssistantDataCache.profileConnection : AssistantDataCache(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 144);
  *(_QWORD *)(v3 + 144) = v2;
  v5 = v2;

}

void *AssistantDataCache.profileConnection.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 144);
  v2 = v1;
  return v1;
}

uint64_t AssistantDataCache.__allocating_init(_:contactFetching:profileConnection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v8 = swift_allocObject();
  v9 = closure #1 in variable initialization expression of AssistantDataCache.contactsQueue();
  *(_QWORD *)(v8 + 144) = 0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 122) = 0u;
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  swift_beginAccess();
  v10 = *(void **)(v8 + 144);
  *(_QWORD *)(v8 + 144) = a4;

  return v8;
}

uint64_t AssistantDataCache.init(_:contactFetching:profileConnection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;

  v9 = closure #1 in variable initialization expression of AssistantDataCache.contactsQueue();
  *(_QWORD *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 122) = 0u;
  *(_QWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 40) = a3;
  swift_beginAccess();
  v10 = *(void **)(v4 + 144);
  *(_QWORD *)(v4 + 144) = a4;

  return v4;
}

void AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)(void *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  int *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, void *, void *);
  void *v59;
  void (*v60)(void *, void *);
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[12];
  char v64[24];
  uint64_t v65;

  v3 = v2;
  v55 = a1;
  v5 = type metadata accessor for PerformanceUtil.Ticket(0);
  v54 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v54 + 64);
  v7 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v48 - v8;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0
    && ((*(void (**)(_QWORD *__return_ptr, uint64_t))(*v3 + 120))(v63, v12),
        outlined init with take of AssistantDataSnapshot?((uint64_t)v63, (uint64_t)&v56),
        outlined init with take of AssistantDataSnapshot?((uint64_t)v63, (uint64_t)v64),
        v65)
    && (v15 = v56, outlined consume of AssistantDataSnapshot?(v56, v57, (uint64_t)v58, (uint64_t)v59), (v15 & 1) == 0))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.pommes);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1C2356000, v45, v46, "#AssistantData Skipping snapshot update", v47, 2u);
      MEMORY[0x1C3BBFF64](v47, -1, -1);
    }

  }
  else
  {
    v53 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init()();
    v50 = UUID.uuidString.getter();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v51 = (int *)v5;
    v52 = v6;
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v49 = v3;
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v56 = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain();
      v23 = v50;
      v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v17, &v56);
      v3 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v19, v20, "#AssistantData Updating snapshot from POMMES service helper (request aceId=%s)", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v22, -1, -1);
      MEMORY[0x1C3BBFF64](v21, -1, -1);

      v24 = v54;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v24 = v54;
      v23 = v50;
    }
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88090]), sel_init);
    v26 = (void *)MEMORY[0x1C3BBEC44](v23, v17);
    swift_bridgeObjectRelease();
    objc_msgSend(v25, sel_setAceId_, v26);

    objc_msgSend(v25, sel_setRefId_, 0);
    Date.init()();
    v27 = v51;
    v28 = &v9[v51[5]];
    *(_QWORD *)v28 = "SiriInformationSearch/AssistantDataCache.swift";
    *((_QWORD *)v28 + 1) = 46;
    v28[16] = 2;
    *(_QWORD *)&v9[v27[6]] = 74;
    v29 = &v9[v27[7]];
    *(_QWORD *)v29 = "updateSnapshot(on:onlyIfNeeded:)";
    *((_QWORD *)v29 + 1) = 32;
    v29[16] = 2;
    v30 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
    v31 = (uint64_t *)&v9[v27[8]];
    *v31 = v30;
    v31[1] = v32;
    v33 = (void *)v3[3];
    v34 = v53;
    outlined init with copy of PerformanceUtil.Ticket((uint64_t)v9, v53);
    v35 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v36 = v3;
    v37 = (v52 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    v39 = swift_allocObject();
    outlined init with take of PerformanceUtil.Ticket(v34, v39 + v35);
    *(_QWORD *)(v39 + v37) = v36;
    v40 = v55;
    *(_QWORD *)(v39 + v38) = v55;
    v60 = partial apply for closure #1 in AssistantDataCache.updateSnapshot(on:onlyIfNeeded:);
    v61 = v39;
    v56 = MEMORY[0x1E0C809B0];
    v57 = 1107296256;
    v58 = thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    v59 = &block_descriptor_22;
    v41 = _Block_copy(&v56);
    v42 = v25;
    swift_retain();
    v43 = v40;
    swift_release();
    objc_msgSend(v33, sel_handleCommand_completion_, v42, v41);
    _Block_release(v41);

    outlined destroy of PerformanceUtil.Ticket((uint64_t)v9);
  }
}

void closure #1 in AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *oslog;
  uint64_t v20;

  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(a3, 0);
  if (a2)
  {
    v9 = a2;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    v11 = a2;
    v12 = a2;
    oslog = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v20 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v17 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, oslog, v13, "#AssistantData Service helper returned an error: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v15, -1, -1);
      MEMORY[0x1C3BBFF64](v14, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(a1, a5);
  }
}

uint64_t AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t aBlock;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;

  v3 = v2;
  v33 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v34 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (objc_opt_self(), (v12 = swift_dynamicCastObjCClass()) != 0))
  {
    v13 = v12;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = v3;
    v40 = partial apply for closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:);
    v41 = v14;
    aBlock = MEMORY[0x1E0C809B0];
    v37 = 1107296256;
    v38 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v39 = &block_descriptor_23;
    v15 = _Block_copy(&aBlock);
    v16 = a1;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v35 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C3BBF154](0, v11, v8, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  }
  else
  {
    v32 = v6;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    v18 = a1;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v30[2] = v3;
      v22 = (uint8_t *)v21;
      v23 = swift_slowAlloc();
      v35 = (uint64_t)a1;
      aBlock = v23;
      v31 = v9;
      *(_DWORD *)v22 = 136315138;
      v30[1] = v22 + 4;
      v24 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      v25 = String.init<A>(describing:)();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &aBlock);
      v9 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v19, v20, "#AssistantData Service helper response was <%s>, not SASetAssistantData. Creating fallback snapshot.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v23, -1, -1);
      MEMORY[0x1C3BBFF64](v22, -1, -1);

    }
    else
    {

    }
    v27 = swift_allocObject();
    swift_weakInit();
    v40 = partial apply for closure #1 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:);
    v41 = v27;
    aBlock = MEMORY[0x1E0C809B0];
    v37 = 1107296256;
    v38 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v39 = &block_descriptor_17;
    v28 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v35 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C3BBF154](0, v11, v8, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t Strong;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    v3 = Strong;
    if (Strong)
    {
      AssistantDataCache.fallbackSnapshot()(&v24);
      v20 = v24;
      v4 = v25;
      v19 = *((_QWORD *)&v24 + 1);
      v5 = v26;
      v6 = v27;
      v7 = v28;
      v8 = v29;
      v9 = v30;
      v23 = v31;
      v21 = v33;
      v22 = v32;
      v10 = v34;
      v11 = v35;
      swift_release();
      if (v11)
        v12 = 256;
      else
        v12 = 0;
      v3 = v12 | v10;
      v14 = v19;
      v13 = v20;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v22 = 0;
      v23 = 0;
      v21 = 0;
    }
    swift_beginAccess();
    v15 = *(_QWORD *)(v1 + 48);
    v16 = *(_QWORD *)(v1 + 56);
    v17 = *(_QWORD *)(v1 + 64);
    v18 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 48) = v13;
    *(_QWORD *)(v1 + 56) = v14;
    *(_QWORD *)(v1 + 64) = v4;
    *(_QWORD *)(v1 + 72) = v5;
    *(_QWORD *)(v1 + 80) = v6;
    *(_QWORD *)(v1 + 88) = v7;
    *(_QWORD *)(v1 + 96) = v8;
    *(_QWORD *)(v1 + 104) = v9;
    *(_QWORD *)(v1 + 112) = v23;
    *(_QWORD *)(v1 + 120) = v22;
    *(_QWORD *)(v1 + 128) = v21;
    *(_WORD *)(v1 + 136) = v3;
    outlined consume of AssistantDataSnapshot?(v15, v16, v17, v18);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  int v14;
  _BOOL4 v15;
  char **v16;
  _DWORD *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  os_log_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  int *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  id v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  os_log_t v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  id v94;
  void *v95[2];
  uint64_t v96[2];

  v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  v5 = *(_QWORD *)(v4 - 8);
  v92 = (int *)v4;
  v93 = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v83 - v9;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  v15 = os_log_type_enabled(v13, (os_log_type_t)v14);
  v16 = &selRef_nlUserParses;
  v94 = v12;
  v91 = v6;
  if (!v15)
  {

    goto LABEL_30;
  }
  v87 = v14;
  v88 = v13;
  v17 = (_DWORD *)swift_slowAlloc();
  v86 = swift_slowAlloc();
  v96[0] = v86;
  v90 = v17;
  *v17 = 136316419;
  v18 = objc_msgSend(v12, sel_countryCode);
  if (v18)
  {
    v19 = v18;
    v20 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = v90;
  v95[0] = v20;
  v95[1] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v24 = String.init<A>(describing:)();
  v95[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *((_WORD *)v23 + 6) = 2085;
  v26 = objc_msgSend(v12, sel_meCards);
  v27 = (void *)MEMORY[0x1E0DEE9D8];
  if (v26)
  {
    v28 = v26;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v29 >> 62))
      goto LABEL_10;
LABEL_21:
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v89 = a2;
    if (v30)
      goto LABEL_11;
    goto LABEL_22;
  }
  v29 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
    goto LABEL_21;
LABEL_10:
  v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  v89 = a2;
  if (v30)
  {
LABEL_11:
    v95[0] = v27;
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30 & ~(v30 >> 63), 0);
    if (v30 < 0)
      goto LABEL_46;
    v84 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v85 = v10;
    v32 = 0;
    v33 = v95[0];
    do
    {
      if ((v29 & 0xC000000000000001) != 0)
        v34 = (id)MEMORY[0x1C3BBF3F4](v32, v29);
      else
        v34 = *(id *)(v29 + 8 * v32 + 32);
      v35 = v34;
      v36 = objc_msgSend(v34, sel_description);
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v39 = v38;

      v95[0] = v33;
      v41 = v33[2];
      v40 = v33[3];
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v33 = v95[0];
      }
      ++v32;
      v33[2] = v41 + 1;
      v42 = &v33[2 * v41];
      v42[4] = v37;
      v42[5] = v39;
    }
    while (v30 != v32);
    swift_bridgeObjectRelease();
    v8 = v84;
    v10 = v85;
    v6 = v91;
    goto LABEL_23;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_23:
  v43 = v90;
  v44 = MEMORY[0x1C3BBEE9C](v33, MEMORY[0x1E0DEA968]);
  v46 = v45;
  swift_bridgeObjectRelease();
  v95[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v47 = v94;

  swift_bridgeObjectRelease();
  *((_WORD *)v43 + 11) = 2080;
  v95[0] = objc_msgSend(v47, sel_mediaContentRatingRestrictions);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAMediaContentRatingRestrictions?);
  v48 = String.init<A>(describing:)();
  v95[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *((_WORD *)v43 + 16) = 2080;
  v95[0] = objc_msgSend(v47, sel_uiScale);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSNumber?);
  v50 = String.init<A>(describing:)();
  v95[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *((_WORD *)v43 + 21) = 2080;
  v52 = objc_msgSend(v47, sel_censorSpeech);
  v53 = v52 == 0;
  if (v52)
    v54 = 1702195828;
  else
    v54 = 0x65736C6166;
  if (v53)
    v55 = 0xE500000000000000;
  else
    v55 = 0xE400000000000000;
  v95[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v96);
  v12 = v47;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *((_WORD *)v43 + 26) = 2080;
  v95[0] = objc_msgSend(v47, sel_allowUserGeneratedContent);
  v56 = String.init<A>(describing:)();
  v95[0] = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  v58 = v88;
  _os_log_impl(&dword_1C2356000, v88, (os_log_type_t)v87, "#AssistantData Service helper response:\ncountryCode: %s\nmeCards: %{sensitive}s\ncontentRestrictions: %s\nuiScale: %s\ncensorSpeech: %s\nallowUserGeneratedContent: %s", (uint8_t *)v43, 0x3Eu);
  v59 = v86;
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v59, -1, -1);
  MEMORY[0x1C3BBFF64](v43, -1, -1);

  v16 = &selRef_nlUserParses;
  a2 = v89;
LABEL_30:
  v60 = objc_msgSend(v12, v16[13]);
  if (v60)
  {
    v61 = v60;
    v62 = v8;
    v63 = a2;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
    v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v64 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v65 = result;
      if (result)
        goto LABEL_33;
    }
    else
    {
      v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v65)
      {
LABEL_33:
        if (v65 >= 1)
        {
          v66 = 0;
          do
          {
            if ((v64 & 0xC000000000000001) != 0)
              v67 = (id)MEMORY[0x1C3BBF3F4](v66, v64);
            else
              v67 = *(id *)(v64 + 8 * v66 + 32);
            v68 = v67;
            ++v66;
            v95[0] = v67;
            closure #2 in closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(v95);

          }
          while (v65 != v66);
          goto LABEL_40;
        }
        __break(1u);
LABEL_46:
        __break(1u);
        return result;
      }
    }
LABEL_40:
    swift_bridgeObjectRelease_n();
    v12 = v94;
    a2 = v63;
    v8 = v62;
    v6 = v91;
  }
  Date.init()();
  v69 = v92;
  v70 = &v10[v92[5]];
  *(_QWORD *)v70 = "SiriInformationSearch/AssistantDataCache.swift";
  *((_QWORD *)v70 + 1) = 46;
  v70[16] = 2;
  *(_QWORD *)&v10[v69[6]] = 118;
  v71 = &v10[v69[7]];
  *(_QWORD *)v71 = "handleSASetAssistantData(_:updateQueue:)";
  *((_QWORD *)v71 + 1) = 40;
  v71[16] = 2;
  v72 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000043);
  v73 = (uint64_t *)&v10[v69[8]];
  *v73 = v72;
  v73[1] = v74;
  v75 = objc_msgSend(v12, v16[13]);
  if (v75)
  {
    v76 = v75;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
    v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v77 = 0;
  }
  outlined init with copy of PerformanceUtil.Ticket((uint64_t)v10, (uint64_t)v8);
  v78 = (*(unsigned __int8 *)(v93 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
  v79 = (v6 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
  v80 = swift_allocObject();
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v8, v80 + v78);
  v81 = v94;
  *(_QWORD *)(v80 + v79) = v94;
  *(_QWORD *)(v80 + ((v79 + 15) & 0xFFFFFFFFFFFFFFF8)) = a2;
  v82 = v81;
  swift_retain();
  AssistantDataCache.fetchReplacementMeCardsIfNeeded(for:completion:)(v77, (void (*)(unint64_t, _QWORD))partial apply for closure #3 in closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:), v80);
  swift_release();
  swift_bridgeObjectRelease();
  return outlined destroy of PerformanceUtil.Ticket((uint64_t)v10);
}

void closure #2 in closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  v7 = v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v36 = v11;
    *(_DWORD *)v10 = 136643331;
    v12 = objc_msgSend(v7, sel_identifier);
    v33 = v11;
    if (v12)
    {
      v13 = v12;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v14 = type metadata accessor for URL();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 0, 1, v14);
    }
    else
    {
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 1, 1, v15);
    }
    v16 = String.init<A>(describing:)();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2085;
    v18 = objc_msgSend(v7, sel_internalGUID);
    if (v18)
    {
      v19 = v18;
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v21;

    }
    else
    {
      v20 = 0;
      v22 = 0;
    }
    v34 = v20;
    v35 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v23 = String.init<A>(describing:)();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2085;
    v25 = objc_msgSend(v7, sel_fullDescription);
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v29 = v28;

    }
    else
    {
      v27 = 0;
      v29 = 0;
    }
    v34 = v27;
    v35 = v29;
    v30 = String.init<A>(describing:)();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v8, v9, "#AssistantData Service helper response Me card SAPerson:\nidentifier: %{sensitive}s\ninternal GUID: %{sensitive}s\nfull description: %{sensitive}s", (uint8_t *)v10, 0x20u);
    v32 = v33;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v32, -1, -1);
    MEMORY[0x1C3BBFF64](v10, -1, -1);

  }
  else
  {

  }
}

uint64_t closure #3 in closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5)
{
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned __int8 v59;

  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(a3, 0);
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&v48 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a4, sel_setMeCards_, isa);

  v11 = a4;
  specialized AssistantDataSnapshot.init(_:replacementMeCards:)(v11, &v48);
  v12 = v48;
  v13 = v49;
  v15 = v50;
  v14 = v51;
  v45 = v52;
  v46 = *((_QWORD *)&v48 + 1);
  v16 = v53;
  v17 = v55;
  v43 = v56;
  v44 = v54;
  v42 = v57;
  v40 = v59;
  v41 = v58;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  outlined retain of AssistantDataSnapshot((uint64_t)&v48);
  outlined retain of AssistantDataSnapshot((uint64_t)&v48);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v39 = v12;
    v21 = (uint8_t *)swift_slowAlloc();
    v38 = v16;
    v22 = swift_slowAlloc();
    v47[0] = v22;
    *(_DWORD *)v21 = 136642819;
    outlined retain of AssistantDataSnapshot((uint64_t)&v48);
    v23 = AssistantDataSnapshot.description.getter();
    v37 = v14;
    v24 = v15;
    v25 = v13;
    v27 = v26;
    outlined release of AssistantDataSnapshot((uint64_t)&v48);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v27, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v13 = v25;
    v15 = v24;
    v14 = v37;
    swift_bridgeObjectRelease();
    outlined release of AssistantDataSnapshot((uint64_t)&v48);
    outlined release of AssistantDataSnapshot((uint64_t)&v48);
    _os_log_impl(&dword_1C2356000, v19, v20, "#AssistantData Service helper updating with assistantData: %{sensitive}s", v21, 0xCu);
    swift_arrayDestroy();
    v28 = v22;
    v16 = v38;
    MEMORY[0x1C3BBFF64](v28, -1, -1);
    v29 = v21;
    v12 = v39;
    MEMORY[0x1C3BBFF64](v29, -1, -1);
  }
  else
  {
    outlined release of AssistantDataSnapshot((uint64_t)&v48);
    outlined release of AssistantDataSnapshot((uint64_t)&v48);
  }

  if (v40)
    v30 = 256;
  else
    v30 = 0;
  v31 = v30 | v41;
  swift_beginAccess();
  v32 = *(_QWORD *)(a5 + 48);
  v33 = *(_QWORD *)(a5 + 56);
  v34 = *(_QWORD *)(a5 + 64);
  v35 = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 48) = v12;
  *(_QWORD *)(a5 + 56) = v46;
  *(_QWORD *)(a5 + 64) = v13;
  *(_QWORD *)(a5 + 72) = v15;
  *(_QWORD *)(a5 + 80) = v14;
  *(_QWORD *)(a5 + 88) = v45;
  *(_QWORD *)(a5 + 96) = v16;
  *(_QWORD *)(a5 + 104) = v44;
  *(_QWORD *)(a5 + 112) = v17;
  *(_QWORD *)(a5 + 120) = v43;
  *(_QWORD *)(a5 + 128) = v42;
  *(_WORD *)(a5 + 136) = v31;
  return outlined consume of AssistantDataSnapshot?(v32, v33, v34, v35);
}

double AssistantDataCache.fallbackSnapshot()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  void (*v8)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>), uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  void *v12;
  int *v13;
  void (*v14)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>));
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  char v21;
  void *v22;
  void (*v23)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>));
  uint64_t v24;
  void *v25;
  void *v26;
  int *v27;
  void (*v28)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(BOOL *@<X8>));
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void (*v32)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(BOOL *@<X8>));
  __int128 v33;
  _OWORD *v34;
  double result;
  __int128 v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  int *v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD v45[4];
  _OWORD v46[2];

  v44 = a1;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D882C0]), sel_init);
  objc_msgSend(v6, sel_setMovieRestriction_, 1000);
  objc_msgSend(v6, sel_setTvRestriction_, 1000);
  if (one-time initialization token for shared != -1)
    swift_once();
  v7 = static PerformanceUtil.shared;
  Date.init()();
  v8 = *(void (**)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>), uint64_t, uint64_t))(*(_QWORD *)v7 + 200);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MCProfileConnection?);
  LOBYTE(v37) = 2;
  v8(v45, 0xD00000000000001CLL, 0x80000001C250A6D0, 0, v5, "SiriInformationSearch/AssistantDataCache.swift", 46, 2, 138, "fallbackSnapshot()", 18, v37, partial apply for closure #1 in AssistantDataCache.fallbackSnapshot(), v1, v9);
  v10 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v11 = v10(v5, v2);
  if (*(_QWORD *)&v45[0])
  {
    v41 = v6;
    v12 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v11);
    v42 = v13;
    v38 = v13;
    Date.init()();
    v14 = *(void (**)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>)))(*(_QWORD *)v12 + 200);
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSNumber?);
    v38 = &v37;
    v39 = v15;
    LOBYTE(v37) = 2;
    v14(v45, 0xD000000000000055, 0x80000001C250A710, 0, v5, "SiriInformationSearch/AssistantDataCache.swift", 46, 2, 142, "fallbackSnapshot()", 18, v37, partial apply for closure #2 in AssistantDataCache.fallbackSnapshot());
    v43 = v2;
    v16 = v10(v5, v2);
    v17 = *(void **)&v45[0];
    if (*(_QWORD *)&v45[0])
    {
      v18 = objc_msgSend(*(id *)&v45[0], sel_integerValue);
      v19 = v41;
      objc_msgSend(v41, sel_setMovieRestriction_, v18);

    }
    else
    {
      v19 = v41;
    }
    v22 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v16);
    v38 = v42;
    Date.init()();
    v23 = *(void (**)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>)))(*(_QWORD *)v22 + 200);
    v38 = &v37;
    v39 = v15;
    LOBYTE(v37) = 2;
    v23(v45, 0xD000000000000056, 0x80000001C250A770, 0, v5, "SiriInformationSearch/AssistantDataCache.swift", 46, 2, 148, "fallbackSnapshot()", 18, v37, partial apply for closure #3 in AssistantDataCache.fallbackSnapshot());
    v24 = v10(v5, v43);
    v25 = *(void **)&v45[0];
    if (*(_QWORD *)&v45[0])
    {
      objc_msgSend(v19, sel_setTvRestriction_, objc_msgSend(*(id *)&v45[0], sel_integerValue));

    }
    v26 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v24);
    v27 = v42;
    v38 = v42;
    Date.init()();
    v28 = *(void (**)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(BOOL *@<X8>)))(*(_QWORD *)v26 + 200);
    v38 = &v37;
    v39 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v37) = 2;
    v28(v45, 0xD000000000000055, 0x80000001C250A7D0, 0, v5, "SiriInformationSearch/AssistantDataCache.swift", 46, 2, 154, "fallbackSnapshot()", 18, v37, partial apply for closure #4 in AssistantDataCache.fallbackSnapshot());
    v29 = v43;
    v30 = v10(v5, v43);
    v20 = v45[0];
    v31 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v30);
    v38 = v27;
    Date.init()();
    v32 = *(void (**)(_OWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(BOOL *@<X8>)))(*(_QWORD *)v31 + 200);
    v38 = &v37;
    v39 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v37) = 2;
    v32(v45, 0xD000000000000055, 0x80000001C250A7D0, 0, v5, "SiriInformationSearch/AssistantDataCache.swift", 46, 2, 157, "fallbackSnapshot()", 18, v37, partial apply for closure #5 in AssistantDataCache.fallbackSnapshot());
    v10(v5, v29);

    v21 = v45[0];
    v6 = v41;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  specialized AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)(1, 0, 0, MEMORY[0x1E0DEE9D8], v6, 0, 1, v21, (uint64_t)v45, v20, 0, 0);
  v33 = v45[3];
  v34 = v44;
  v44[2] = v45[2];
  v34[3] = v33;
  v34[4] = v46[0];
  *(_OWORD *)((char *)v34 + 74) = *(_OWORD *)((char *)v46 + 10);
  result = *(double *)v45;
  v36 = v45[1];
  *v34 = v45[0];
  v34[1] = v36;
  return result;
}

id closure #1 in AssistantDataCache.fallbackSnapshot()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = (id)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 144))();
  if (!result)
    result = objc_msgSend((id)objc_opt_self(), sel_sharedConnection);
  *a2 = result;
  return result;
}

void AssistantDataCache.fetchReplacementMeCardsIfNeeded(for:completion:)(unint64_t a1, void (*a2)(unint64_t, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  void (*v36)(unint64_t, _QWORD);
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v37 = v13;
    v38 = v8;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_4:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v17 = (id)MEMORY[0x1C3BBF3F4](0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_26:
            swift_once();
LABEL_14:
            v27 = type metadata accessor for Logger();
            __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
            v28 = Logger.logObject.getter();
            v29 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v28, v29))
            {
              v30 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v30 = 0;
              _os_log_impl(&dword_1C2356000, v28, v29, "#AssistantData SAPerson Me cards likely have genuine data. Skipping Contacts fetch", v30, 2u);
              MEMORY[0x1C3BBFF64](v30, -1, -1);
            }

            a2(a1, 0);
            return;
          }
          v17 = *(id *)(a1 + 32);
        }
        v39 = v17;
        swift_bridgeObjectRelease();
        v18 = objc_msgSend(v39, sel_internalGUID);
        if (v18)
        {
          v19 = v18;
          v36 = a2;
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v22 = v21;

          if (v20 == 0xD000000000000012 && v22 == 0x80000001C250A6B0)
          {
            swift_bridgeObjectRelease();
            a2 = v36;
LABEL_12:
            v24 = swift_allocObject();
            *(_QWORD *)(v24 + 24) = *(_QWORD *)(v3 + 40);
            swift_unknownObjectWeakInit();
            v25 = (_QWORD *)swift_allocObject();
            v25[2] = v24;
            v25[3] = a2;
            v25[4] = a3;
            aBlock[4] = partial apply for closure #1 in AssistantDataCache.fetchReplacementMeCardsIfNeeded(for:completion:);
            aBlock[5] = v25;
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            aBlock[3] = &block_descriptor_11_1;
            v26 = _Block_copy(aBlock);
            swift_retain();
            swift_retain();
            static DispatchQoS.unspecified.getter();
            v40 = MEMORY[0x1E0DEE9D8];
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            dispatch thunk of SetAlgebra.init<A>(_:)();
            MEMORY[0x1C3BBF154](0, v15, v10, v26);
            _Block_release(v26);

            (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v7);
            (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v37);
            swift_release();
            swift_release();
            return;
          }
          v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          a2 = v36;
          if ((v23 & 1) != 0)
            goto LABEL_12;
        }
        if (one-time initialization token for pommes == -1)
          goto LABEL_14;
        goto LABEL_26;
      }
    }
    else
    {
      v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v16)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1C2356000, v32, v33, "#AssistantData No SAPerson Me cards. Skipping Contacts fetch", v34, 2u);
    MEMORY[0x1C3BBFF64](v34, -1, -1);
  }

  a2(MEMORY[0x1E0DEE9D8], 0);
}

uint64_t closure #1 in AssistantDataCache.fetchReplacementMeCardsIfNeeded(for:completion:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v4 = a1 + 16;
  swift_beginAccess();
  if (MEMORY[0x1C3BC0018](v4))
  {
    v5 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
    a2();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1C2356000, v8, v9, "#AssistantData No fallback contact-fetching helper. Skipping Contacts fetch", v10, 2u);
      MEMORY[0x1C3BBFF64](v10, -1, -1);
    }

    return ((uint64_t (*)(_QWORD, _QWORD))a2)(MEMORY[0x1E0DEE9D8], 0);
  }
}

uint64_t AssistantDataCache.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined consume of AssistantDataSnapshot?(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));

  return v0;
}

uint64_t AssistantDataCache.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined consume of AssistantDataSnapshot?(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));

  return swift_deallocClassInstance();
}

uint64_t sub_1C24EAAD0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v4 = v0 + v2;
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t outlined init with take of AssistantDataSnapshot?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C24EAC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[12];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 120))(v4);
  return outlined init with take of AssistantDataSnapshot?((uint64_t)v4, a2);
}

uint64_t sub_1C24EAC84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AssistantDataCache()
{
  return objc_opt_self();
}

uint64_t method lookup function for AssistantDataCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssistantDataCache.lastAssistantDataSnapshot.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AssistantDataCache.profileConnection.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AssistantDataCache.__allocating_init(_:contactFetching:profileConnection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t sub_1C24EAD10()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C24EAD34()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AssistantDataCache.fetchReplacementMeCardsIfNeeded(for:completion:)()
{
  uint64_t v0;

  return closure #1 in AssistantDataCache.fetchReplacementMeCardsIfNeeded(for:completion:)(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

id partial apply for closure #1 in AssistantDataCache.fallbackSnapshot()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AssistantDataCache.fallbackSnapshot()(v1, a1);
}

id partial apply for closure #2 in AssistantDataCache.fallbackSnapshot()@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #2 in AssistantDataCache.fallbackSnapshot()(MEMORY[0x1E0D470C0], a1);
}

id partial apply for closure #3 in AssistantDataCache.fallbackSnapshot()@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #2 in AssistantDataCache.fallbackSnapshot()(MEMORY[0x1E0D470C8], a1);
}

id partial apply for closure #2 in AssistantDataCache.fallbackSnapshot()@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;

  result = objc_msgSend(*(id *)(v2 + 16), sel_effectiveValueForSetting_, *a1);
  *a2 = result;
  return result;
}

id partial apply for closure #4 in AssistantDataCache.fallbackSnapshot()@<X0>(BOOL *a1@<X8>)
{
  return partial apply for closure #4 in AssistantDataCache.fallbackSnapshot()(MEMORY[0x1E0D46F28], a1);
}

id partial apply for closure #5 in AssistantDataCache.fallbackSnapshot()@<X0>(BOOL *a1@<X8>)
{
  return partial apply for closure #4 in AssistantDataCache.fallbackSnapshot()(MEMORY[0x1E0D46F38], a1);
}

id partial apply for closure #4 in AssistantDataCache.fallbackSnapshot()@<X0>(_QWORD *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;
  id result;

  result = objc_msgSend(*(id *)(v2 + 16), sel_effectiveBoolValueForSetting_, *a1);
  *a2 = (_DWORD)result == 1;
  return result;
}

uint64_t sub_1C24EAE84()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)()
{
  return closure #1 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)();
}

uint64_t sub_1C24EAEB0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)()
{
  uint64_t v0;

  return closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1C24EAEE4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v0 + v2;
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #3 in closure #2 in AssistantDataCache.handleSASetAssistantData(_:updateQueue:)(a1, v4, v2 + v6, *(void **)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t outlined retain of AssistantDataSnapshot(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AssistantDataSnapshot(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *PimsRuntimeLoggingHandler.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (_QWORD *)swift_allocObject();
  getPimsRuntimeLogger()();
  v1 = type metadata accessor for MediaSuggestionManager();
  swift_allocObject();
  v2 = MediaSuggestionManager.init()();
  v0[10] = v1;
  v0[11] = &protocol witness table for MediaSuggestionManager;
  v0[7] = v2;
  return v0;
}

_QWORD *PimsRuntimeLoggingHandler.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  getPimsRuntimeLogger()();
  outlined init with take of AppDataProviding(&v4, (uint64_t)(v0 + 2));
  v1 = type metadata accessor for MediaSuggestionManager();
  swift_allocObject();
  v2 = MediaSuggestionManager.init()();
  v0[10] = v1;
  v0[11] = &protocol witness table for MediaSuggestionManager;
  v0[7] = v2;
  return v0;
}

uint64_t PimsRuntimeLoggingHandler.__allocating_init(pimsRuntimeLogger:suggestionManager:)(__int128 *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  outlined init with take of AppDataProviding(a1, v4 + 16);
  outlined init with take of AppDataProviding(a2, v4 + 56);
  return v4;
}

uint64_t PimsRuntimeLoggingHandler.init(pimsRuntimeLogger:suggestionManager:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2;

  outlined init with take of AppDataProviding(a1, v2 + 16);
  outlined init with take of AppDataProviding(a2, v2 + 56);
  return v2;
}

void PimsRuntimeLoggingHandler.logPIMSCandidates(requestId:serverStateSignals:rankedResults:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t isa;
  void (*v38)(char *, unint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD v54[2];
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  NSObject *v67;
  _QWORD v68[3];
  uint64_t v69;
  _QWORD *v70;

  v61 = a1;
  v62 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v64 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v66 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v63 = (char *)v54 - v10;
  v11 = type metadata accessor for PimsSuggestionMetadata();
  v67 = *(NSObject **)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v65 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MediaSuggestionManager.EnablementStatus();
  v58 = *(_QWORD *)(v13 - 8);
  v59 = v13;
  MEMORY[0x1E0C80A78](v13);
  v60 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo();
  v15 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v55 = (char *)v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v50)
    {
LABEL_3:
      outlined init with copy of MediaUserStateCenter?(v62, (uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
        if ((Apple_Parsec_Siri_V2alpha_ClientSignals.hasMusicRankingInfluenceImpactInfo.getter() & 1) != 0)
        {
          v24 = v55;
          Apple_Parsec_Siri_V2alpha_ClientSignals.musicRankingInfluenceImpactInfo.getter();
          v25 = Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.suggestionImpactInfo.getter();
          (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v56);
          swift_bridgeObjectRetain();
          v26 = v57;
          swift_retain();
          v27 = specialized Sequence.compactMap<A>(_:)(v25, (uint64_t)v26, a3);
          swift_release();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
          swift_bridgeObjectRelease();
LABEL_13:
          __swift_project_boxed_opaque_existential_1(v26 + 2, v26[5]);
          dispatch thunk of PimsRuntimeLogging.logSuggestionMetadata(requestId:suggestions:)();
          outlined init with copy of AppDataProviding((uint64_t)(v26 + 2), (uint64_t)v68);
          v32 = v69;
          v57 = v70;
          v56 = (uint64_t)__swift_project_boxed_opaque_existential_1(v68, v69);
          v33 = v26[10];
          v34 = v26[11];
          __swift_project_boxed_opaque_existential_1(v26 + 7, v33);
          (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
          v35 = *(_QWORD *)(v27 + 16);
          if (v35)
          {
            v54[1] = v32;
            v55 = (char *)v27;
            v36 = v27 + ((LOBYTE(v67[10].isa) + 32) & ~(unint64_t)LOBYTE(v67[10].isa));
            isa = (uint64_t)v67[9].isa;
            v38 = (void (*)(char *, unint64_t, uint64_t))v67[2].isa;
            swift_bridgeObjectRetain();
            v39 = MEMORY[0x1E0DEE9D8];
            v62 = isa;
            v40 = v64;
            do
            {
              v41 = v65;
              v38(v65, v36, v11);
              PimsSuggestionMetadata.pimsId.getter();
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v6, 0, 1, v7);
              ((void (*)(char *, uint64_t))v67[1].isa)(v41, v11);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v6, 1, v7) == 1)
              {
                outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
              }
              else
              {
                v42 = v40;
                v43 = v11;
                v44 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
                v45 = v63;
                v44(v63, v6, v7);
                v44(v66, v45, v7);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v39 + 16) + 1, 1, v39);
                v47 = *(_QWORD *)(v39 + 16);
                v46 = *(_QWORD *)(v39 + 24);
                if (v47 >= v46 >> 1)
                  v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v39);
                *(_QWORD *)(v39 + 16) = v47 + 1;
                v48 = v64;
                v44((char *)(v39+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v64 + 72) * v47), v66, v7);
                v11 = v43;
                v40 = v48;
                isa = v62;
              }
              v36 += isa;
              --v35;
            }
            while (v35);
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v49 = v60;
          dispatch thunk of PimsRuntimeLogging.logCandidateSuggestions(requestId:enablementStatus:pimsIds:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v59);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
          return;
        }
        (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
      }
      v26 = v57;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1C2356000, v29, v30, "PimsRuntimeLoggingHandler: Missing signals from server, unable to get information about suggestion match if any", v31, 2u);
        MEMORY[0x1C3BBFF64](v31, -1, -1);
      }

      v27 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v51 = type metadata accessor for Logger();
  __swift_project_value_buffer(v51, (uint64_t)static Logger.pommes);
  v67 = Logger.logObject.getter();
  v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v53 = 0;
    _os_log_impl(&dword_1C2356000, v67, v52, "PimsRuntimeLoggingHandler: There is no candidate in the ranked results", v53, 2u);
    MEMORY[0x1C3BBFF64](v53, -1, -1);
  }

}

uint64_t PimsRuntimeLoggingHandler.mapPimsMatchToSuggestionMetadata(match:rankedResults:)@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t result;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v80 = a1;
  v85 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PLUSSuggestionRedundancyState?);
  MEMORY[0x1E0C80A78](v2);
  v73 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PLUSSuggestionNoveltyState?);
  MEMORY[0x1E0C80A78](v4);
  v72 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PLUSSuggestionSurfacedState?);
  MEMORY[0x1E0C80A78](v6);
  v79 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsLocality?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v77 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v84 = (uint64_t)&v69 - v11;
  v78 = type metadata accessor for PLUSSuggestionSurfacedState();
  v76 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v83 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsClientTreatment?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v82 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v86 = (uint64_t)&v69 - v16;
  v17 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsServerTreatment?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v75 = (uint64_t)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v74 = (uint64_t)&v69 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v69 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v81 = (char *)&v69 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v69 - v35;
  Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo.clientMusicSuggestionID.getter();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) != 1)
  {
    v71 = v32;
    v45 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v46 = v31;
    v45(v36, v30, v31);
    Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo.impact.getter();
    PimsRuntimeLoggingHandler.mapServerImpactToPimsServerTreatment(impact:)((uint64_t)v20, (uint64_t)v27);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v47 = v80;
    v48 = (uint64_t)v27;
    if (v80 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v49 = result;
      v50 = v84;
      if (result)
      {
LABEL_9:
        if ((v47 & 0xC000000000000001) != 0)
        {
          v49 = MEMORY[0x1C3BBF3F4](0, v47);
        }
        else
        {
          if (!*(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          v49 = *(_QWORD *)(v47 + 32);
          swift_retain();
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      v50 = v84;
      if (v49)
        goto LABEL_9;
    }
    v51 = v36;
    swift_bridgeObjectRelease();
    v52 = v86;
    PimsRuntimeLoggingHandler.mapClientImpactToPimsClientTreatment(finalTopCandidate:serverTreatment:)(v49, v48, v86);
    swift_release();
    PimsRuntimeLoggingHandler.extractSurfacedState(serverTreatment:clientTreatment:rankedResults:)(v48, v52, v47, v83);
    v53 = v74;
    outlined init with copy of MediaUserStateCenter?(v48, v74, &demangling cache variable for type metadata for PimsServerTreatment?);
    v54 = type metadata accessor for PimsServerTreatment();
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v53, 1, v54);
    outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for PimsServerTreatment?);
    if (v55 == 1)
    {
      v56 = type metadata accessor for PimsLocality();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v50, 1, 1, v56);
    }
    else
    {
      v57 = *MEMORY[0x1E0DA3A38];
      v58 = type metadata accessor for PimsLocality();
      v59 = *(_QWORD *)(v58 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 104))(v50, v57, v58);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v50, 0, 1, v58);
    }
    v60 = (uint64_t)v72;
    v61 = (uint64_t)v73;
    v69 = v51;
    v70 = v46;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v81, v51, v46);
    outlined init with copy of MediaUserStateCenter?(v50, v77, &demangling cache variable for type metadata for PimsLocality?);
    outlined init with copy of MediaUserStateCenter?(v48, v75, &demangling cache variable for type metadata for PimsServerTreatment?);
    outlined init with copy of MediaUserStateCenter?(v86, v82, &demangling cache variable for type metadata for PimsClientTreatment?);
    v62 = v48;
    v63 = v76;
    v64 = v78;
    v65 = v79;
    v66 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v79, v83, v78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v65, 0, 1, v64);
    PimsRuntimeLoggingHandler.extractNoveltyState(serverTreatment:)(v62, v60);
    PimsRuntimeLoggingHandler.extractRedundancyState(serverTreatment:)(v62, v61);
    v67 = v85;
    PimsSuggestionMetadata.init(pimsId:locality:serverTreatment:clientTreatment:suggestionSurfaced:noveltyState:redundancyState:)();
    outlined destroy of MediaUserStateCenter?(v84, &demangling cache variable for type metadata for PimsLocality?);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v64);
    outlined destroy of MediaUserStateCenter?(v86, &demangling cache variable for type metadata for PimsClientTreatment?);
    outlined destroy of MediaUserStateCenter?(v62, &demangling cache variable for type metadata for PimsServerTreatment?);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v70);
    v68 = type metadata accessor for PimsSuggestionMetadata();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 0, 1, v68);
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.debug.getter();
  v40 = os_log_type_enabled(v38, v39);
  v41 = v85;
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1C2356000, v38, v39, "PimsRuntimeLoggingHandler: There is no pims id in the response", v42, 2u);
    MEMORY[0x1C3BBFF64](v42, -1, -1);
  }

  v43 = type metadata accessor for PimsSuggestionMetadata();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v41, 1, 1, v43);
}

uint64_t PimsRuntimeLoggingHandler.mapServerImpactToPimsServerTreatment(impact:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x1E0D703C0])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AB0];
  }
  else if (v8 == *MEMORY[0x1E0D703D0])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AC0];
  }
  else if (v8 == *MEMORY[0x1E0D703C8])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AB8];
  }
  else if (v8 == *MEMORY[0x1E0D703D8])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AC8];
  }
  else if (v8 == *MEMORY[0x1E0D703F8])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AE8];
  }
  else if (v8 == *MEMORY[0x1E0D70408])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AF8];
  }
  else if (v8 == *MEMORY[0x1E0D703F0])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AE0];
  }
  else if (v8 == *MEMORY[0x1E0D703E0])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AD0];
  }
  else if (v8 == *MEMORY[0x1E0D703E8])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AD8];
  }
  else if (v8 == *MEMORY[0x1E0D70400])
  {
    v9 = (unsigned int *)MEMORY[0x1E0DA3AF0];
  }
  else
  {
    if (v8 != *MEMORY[0x1E0D703B8])
    {
      v14 = type metadata accessor for PimsServerTreatment();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    v9 = (unsigned int *)MEMORY[0x1E0DA3AA8];
  }
  v10 = *v9;
  v11 = type metadata accessor for PimsServerTreatment();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a2, v10, v11);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
}

uint64_t PimsRuntimeLoggingHandler.mapClientImpactToPimsClientTreatment(finalTopCandidate:serverTreatment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, _QWORD, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  char v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsServerTreatment?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PimsServerTreatment();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v28 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v28 - v17;
  if (!a1 || *(_BYTE *)(a1 + 16) != 2)
    goto LABEL_9;
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v8, &demangling cache variable for type metadata for PimsServerTreatment?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PimsServerTreatment?);
LABEL_9:
    v23 = (unsigned int *)MEMORY[0x1E0DA3A78];
    goto LABEL_10;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
  v19(v16, *MEMORY[0x1E0DA3AC0], v9);
  swift_retain();
  v20 = MEMORY[0x1C3BBE8A8](v18, v16);
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v16, v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v18, v9);
  if ((v20 & 1) != 0)
  {
    swift_release();
    v21(v13, v9);
    v21(v18, v9);
  }
  else
  {
    v19(v16, *MEMORY[0x1E0DA3AB8], v9);
    v22 = MEMORY[0x1C3BBE8A8](v13, v16);
    swift_release();
    v21(v16, v9);
    v21(v13, v9);
    v21(v18, v9);
    if ((v22 & 1) == 0)
      goto LABEL_9;
  }
  v23 = (unsigned int *)MEMORY[0x1E0DA3A88];
LABEL_10:
  v24 = *v23;
  v25 = type metadata accessor for PimsClientTreatment();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 104))(a3, v24, v25);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(a3, 0, 1, v25);
}

uint64_t PimsRuntimeLoggingHandler.extractSurfacedState(serverTreatment:clientTreatment:rankedResults:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;

  v50 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsClientTreatment?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PimsClientTreatment();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v51 = (char *)&v48 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsServerTreatment?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v48 - v20;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)&v48 - v20, &demangling cache variable for type metadata for PimsServerTreatment?);
  v22 = type metadata accessor for PimsServerTreatment();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
    goto LABEL_19;
  v49 = a4;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for PimsServerTreatment?);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v19, v22);
  if (v24 != *MEMORY[0x1E0DA3AC0] && v24 != *MEMORY[0x1E0DA3AB8])
  {
    if (v24 == *MEMORY[0x1E0DA3AC8])
    {
      v26 = *MEMORY[0x1E0DA39F8];
      v27 = type metadata accessor for PLUSSuggestionSurfacedState();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v49, v26, v27);
      return outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for PimsServerTreatment?);
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v22);
    a4 = v49;
LABEL_19:
    v34 = *MEMORY[0x1E0DA39E8];
    v35 = type metadata accessor for PLUSSuggestionSurfacedState();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(a4, v34, v35);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for PimsServerTreatment?);
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for PimsServerTreatment?);
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v9, &demangling cache variable for type metadata for PimsClientTreatment?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for PimsClientTreatment?);
LABEL_22:
    v37 = v49;
    v38 = *MEMORY[0x1E0DA39F0];
    v39 = type metadata accessor for PLUSSuggestionSurfacedState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v37, v38, v39);
  }
  v28 = v51;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v51, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x1E0DA3A88], v10);
  v29 = MEMORY[0x1C3BBE890](v28, v14);
  v30 = *(void (**)(char *, uint64_t))(v11 + 8);
  v30(v14, v10);
  if ((v29 & 1) == 0)
  {
    v30(v28, v10);
    goto LABEL_22;
  }
  v31 = v50;
  if (v50 >> 62)
    goto LABEL_32;
  v32 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v32)
    goto LABEL_28;
  while ((v31 & 0xC000000000000001) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v31 + 32) + 16) == 1)
    {
LABEL_16:
      swift_bridgeObjectRelease();
LABEL_17:
      v30(v28, v10);
      v33 = (unsigned int *)MEMORY[0x1E0DA39F8];
      goto LABEL_30;
    }
    if (v32 != 1)
    {
      v40 = 5;
      while (1)
      {
        v41 = v40 - 3;
        if (__OFADD__(v40 - 4, 1))
          break;
        if (*(_BYTE *)(*(_QWORD *)(v31 + 8 * v40) + 16) == 1)
          goto LABEL_16;
        ++v40;
        if (v41 == v32)
          goto LABEL_28;
      }
      __break(1u);
LABEL_32:
      swift_bridgeObjectRetain();
      v32 = _CocoaArrayWrapper.endIndex.getter();
      if (v32)
        continue;
    }
    goto LABEL_28;
  }
  v44 = *(unsigned __int8 *)(MEMORY[0x1C3BBF3F4](0, v31) + 16);
  swift_unknownObjectRelease();
  if (v44 == 1)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    v28 = v51;
    goto LABEL_17;
  }
  v28 = v51;
  if (v32 == 1)
  {
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    v30(v28, v10);
    v33 = (unsigned int *)MEMORY[0x1E0DA39E8];
LABEL_30:
    v42 = *v33;
    v43 = type metadata accessor for PLUSSuggestionSurfacedState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v49, v42, v43);
  }
  else
  {
    v45 = 1;
    while (1)
    {
      result = MEMORY[0x1C3BBF3F4](v45, v50);
      v46 = v45 + 1;
      if (__OFADD__(v45, 1))
        break;
      v47 = *(unsigned __int8 *)(result + 16);
      swift_unknownObjectRelease();
      if (v47 == 1)
        goto LABEL_35;
      ++v45;
      if (v46 == v32)
      {
        swift_bridgeObjectRelease();
        v28 = v51;
        goto LABEL_29;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t PimsRuntimeLoggingHandler.extractNoveltyState(serverTreatment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  int v15;
  unsigned int *v17;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsServerTreatment?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PimsServerTreatment();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v26 - v12;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, &demangling cache variable for type metadata for PimsServerTreatment?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PimsServerTreatment?);
LABEL_23:
    v17 = (unsigned int *)MEMORY[0x1E0DA39C0];
    goto LABEL_24;
  }
  v14 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v14(v13, v6, v7);
  v14(v11, v13, v7);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v15 == *MEMORY[0x1E0DA3AA0])
    goto LABEL_23;
  if (v15 != *MEMORY[0x1E0DA3AC0] && v15 != *MEMORY[0x1E0DA3AB0])
  {
    if (v15 == *MEMORY[0x1E0DA3AB8]
      || v15 == *MEMORY[0x1E0DA3AC8]
      || v15 == *MEMORY[0x1E0DA3AE8]
      || v15 == *MEMORY[0x1E0DA3AF8])
    {
      goto LABEL_23;
    }
    if (v15 == *MEMORY[0x1E0DA3AE0])
    {
      v17 = (unsigned int *)MEMORY[0x1E0DA39C8];
      goto LABEL_24;
    }
    if (v15 == *MEMORY[0x1E0DA3AD0])
      goto LABEL_23;
    if (v15 != *MEMORY[0x1E0DA3AF0])
    {
      if (v15 != *MEMORY[0x1E0DA3AD8] && v15 != *MEMORY[0x1E0DA3AA8])
      {
        v25 = type metadata accessor for PLUSSuggestionNoveltyState();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 1, 1, v25);
        return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }
      goto LABEL_23;
    }
  }
  v17 = (unsigned int *)MEMORY[0x1E0DA39D0];
LABEL_24:
  v21 = *v17;
  v22 = type metadata accessor for PLUSSuggestionNoveltyState();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104))(a2, v21, v22);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(a2, 0, 1, v22);
}

uint64_t PimsRuntimeLoggingHandler.extractRedundancyState(serverTreatment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v16)(char *, char *, uint64_t);
  int v17;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PimsServerTreatment?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PimsServerTreatment();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v29 - v12;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, &demangling cache variable for type metadata for PimsServerTreatment?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PimsServerTreatment?);
    v14 = type metadata accessor for PLUSSuggestionRedundancyState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v13, v6, v7);
  v16(v11, v13, v7);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v17 == *MEMORY[0x1E0DA3AC0]
    || v17 == *MEMORY[0x1E0DA3AB0]
    || v17 == *MEMORY[0x1E0DA3AB8]
    || v17 == *MEMORY[0x1E0DA3AC8]
    || v17 == *MEMORY[0x1E0DA3AE8]
    || v17 == *MEMORY[0x1E0DA3AF8]
    || v17 == *MEMORY[0x1E0DA3AE0])
  {
    v24 = (unsigned int *)MEMORY[0x1E0DA3A10];
  }
  else
  {
    if (v17 != *MEMORY[0x1E0DA3AF0])
    {
      v28 = type metadata accessor for PLUSSuggestionRedundancyState();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a2, 1, 1, v28);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    v24 = (unsigned int *)MEMORY[0x1E0DA3A18];
  }
  v25 = *v24;
  v26 = type metadata accessor for PLUSSuggestionRedundancyState();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 104))(a2, v25, v26);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(a2, 0, 1, v26);
}

uint64_t PimsRuntimeLoggingHandler.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t PimsRuntimeLoggingHandler.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PIMSManagerWrapper.fetchStatus() in conformance MediaSuggestionManager()
{
  return dispatch thunk of MediaSuggestionManager.fetchStatus()();
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  v29 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PimsSuggestionMetadata?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PimsSuggestionMetadata();
  v28 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v30 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v27 = (char *)v25 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return MEMORY[0x1E0DEE9D8];
  v25[1] = v3;
  v14 = *(_QWORD *)(type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo()
                  - 8);
  v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v25[0] = a1;
  swift_bridgeObjectRetain();
  v17 = MEMORY[0x1E0DEE9D8];
  v26 = a3;
  v18 = v28;
  do
  {
    PimsRuntimeLoggingHandler.mapPimsMatchToSuggestionMetadata(match:rankedResults:)(a3, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v9) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PimsSuggestionMetadata?);
    }
    else
    {
      v19 = v16;
      v20 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
      v21 = v27;
      v20(v27, v8, v9);
      v20(v30, v21, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
      v23 = *(_QWORD *)(v17 + 16);
      v22 = *(_QWORD *)(v17 + 24);
      if (v23 >= v22 >> 1)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v17);
      *(_QWORD *)(v17 + 16) = v23 + 1;
      v18 = v28;
      v20((char *)(v17+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v28 + 72) * v23), v30, v9);
      a3 = v26;
      v16 = v19;
    }
    v15 += v16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t type metadata accessor for PimsRuntimeLoggingHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for PimsRuntimeLoggingHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PimsRuntimeLoggingHandler.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PimsRuntimeLoggingHandler.__allocating_init(pimsRuntimeLogger:suggestionManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of PimsRuntimeLoggingHandler.logPIMSCandidates(requestId:serverStateSignals:rankedResults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PIMSManagerWrapper.fetchStatus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t PommesPhoneCallStateManager.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 3;
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t one-time initialization function for phoneCallStateQueryTimeoutInMillis()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static PommesPhoneCallStateManager.phoneCallStateQueryTimeoutInMillis);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static PommesPhoneCallStateManager.phoneCallStateQueryTimeoutInMillis) = 20;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t PommesPhoneCallStateManager.phoneCallStateQueryTimeoutInMillis.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  return __swift_project_value_buffer(v0, (uint64_t)static PommesPhoneCallStateManager.phoneCallStateQueryTimeoutInMillis);
}

uint64_t static PommesPhoneCallStateManager.phoneCallStateQueryTimeoutInMillis.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1)
    swift_once();
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static PommesPhoneCallStateManager.phoneCallStateQueryTimeoutInMillis);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PommesPhoneCallStateManager.Status(uint64_t a1)
{
  return specialized static PommesPhoneCallStateManager.Status.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t PommesPhoneCallStateManager.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 3;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v0[2];
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[6] = v5;
  *v5 = v0;
  v5[1] = PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 56));
}

uint64_t closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t))(*(_QWORD *)a2 + 128))(a3, a4, partial apply for closure #1 in closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:), v12);
  return swift_release();
}

uint64_t PommesPhoneCallStateManager.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of PommesPhoneCallStateManager.Status(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return v0;
}

uint64_t PommesPhoneCallStateManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of PommesPhoneCallStateManager.Status(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocClassInstance();
}

uint64_t specialized static PommesPhoneCallStateManager.Status.== infix(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_1C24ED6C4 + 4 * byte_1C25012E4[a3]))();
}

uint64_t sub_1C24ED6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
    return 0;
  if (a1 == a4 && a2 == a5)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1C24ED760()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for PommesPhoneCallStateManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesPhoneCallStateManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesPhoneCallStateManager.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 136) + *(_QWORD *)(*(_QWORD *)v2 + 136));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of SageSearch.search(query:location:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of PommesPhoneCallStateManager.cachedIsUserOnPhoneCall(requestId:conservative:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t outlined copy of PommesPhoneCallStateManager.Status(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for PommesPhoneCallStateManager.Status(uint64_t a1)
{
  return outlined consume of PommesPhoneCallStateManager.Status(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PommesPhoneCallStateManager.Status(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PommesPhoneCallStateManager.Status(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PommesPhoneCallStateManager.Status(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PommesPhoneCallStateManager.Status(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PommesPhoneCallStateManager.Status(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PommesPhoneCallStateManager.Status(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of PommesPhoneCallStateManager.Status(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesPhoneCallStateManager.Status(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesPhoneCallStateManager.Status(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PommesPhoneCallStateManager.Status(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for PommesPhoneCallStateManager.Status(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void *type metadata accessor for PommesPhoneCallStateManager.Status()
{
  return &unk_1E7C04D00;
}

uint64_t sub_1C24EDA34()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7369332;
  else
    v3 = 25458;
  if (v2)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7369332;
  else
    v5 = 25458;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE200000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C24EDBD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C24EDCB0 + 4 * byte_1C2501398[a2]))(0xD000000000000011);
}

uint64_t sub_1C24EDCB0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x80000001C25023F0)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C24EDE28()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1C24EDF44()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PommesSearchRequestXPC.pommesCandidateId.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for ParseStateXPC(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ParseStateXPC(v1 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_parseState, (uint64_t)v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v8 = *v5;
  v7 = v5[1];
  if (EnumCaseMultiPayload == 1)
  {
    v9 = v5[2];
    v10 = v5[3];
    v11 = (uint64_t)v5
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool))
                 + 64);
    *a1 = v8;
    a1[1] = v7;
    a1[2] = v9;
    a1[3] = v10;
    v12 = *MEMORY[0x1E0D988D0];
    v13 = type metadata accessor for PommesCandidateId();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(a1, v12, v13);
    return outlined destroy of MediaUserStateCenter?(v11, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }
  else
  {
    swift_bridgeObjectRelease();
    *a1 = v8;
    a1[1] = v7;
    v15 = *MEMORY[0x1E0D988C8];
    v16 = type metadata accessor for PommesCandidateId();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a1, v15, v16);
  }
}

uint64_t type metadata accessor for ParseStateXPC(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, type metadata singleton initialization cache for ParseStateXPC);
}

uint64_t outlined init with copy of ParseStateXPC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ParseStateXPC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PommesSearchRequestXPC.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_domain);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequestXPC.listenAfterSpeaking.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_listenAfterSpeaking);
}

uint64_t PommesSearchRequestXPC.assistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequestXPC.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequestXPC.isMultiUser.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser);
}

uint64_t PommesSearchRequestXPC.parseState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ParseStateXPC(v1 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_parseState, a1);
}

uint64_t PommesSearchRequestXPC.utterance.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesSearchRequestXPC.audioSource.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource);
}

uint64_t PommesSearchRequestXPC.audioDestination.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination);
}

uint64_t PommesSearchRequestXPC.responseMode.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode);
}

uint64_t PommesSearchRequestXPC.isEyesFree.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isEyesFree);
}

uint64_t PommesSearchRequestXPC.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isVoiceTriggerEnabled);
}

uint64_t PommesSearchRequestXPC.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTextToSpeechEnabled);
}

uint64_t PommesSearchRequestXPC.isTriggerlessFollowup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTriggerlessFollowup);
}

uint64_t PommesSearchRequestXPC.isPushOffRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isPushOffRequest);
}

uint64_t PommesSearchRequestXPC.deviceRestrictions.getter()
{
  return swift_bridgeObjectRetain();
}

id PommesSearchRequestXPC.__allocating_init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:deviceRestrictions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  objc_class *v11;
  id v19;

  v19 = objc_allocWithZone(v11);
  return PommesSearchRequestXPC.init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:deviceRestrictions:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, a11);
}

id PommesSearchRequestXPC.init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:deviceRestrictions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _BYTE *v12;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  id v28;
  objc_class *ObjectType;
  objc_super v31;

  ObjectType = (objc_class *)swift_getObjectType();
  v21 = &v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_domain];
  *v21 = a1;
  v21[1] = a2;
  v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_listenAfterSpeaking] = a3;
  v22 = &v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId];
  *v22 = a4;
  v22[1] = a5;
  v23 = &v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId];
  *v23 = a6;
  v23[1] = a7;
  v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser] = a8;
  outlined init with copy of ParseStateXPC(a9, (uint64_t)&v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_parseState]);
  v24 = &v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
  *v24 = a10;
  v24[1] = a11;
  v25 = &v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource];
  *v25 = 0;
  v25[1] = 0;
  v26 = &v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination];
  *v26 = 0;
  v26[1] = 0;
  v27 = &v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode];
  *v27 = 0;
  v27[1] = 0;
  v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isEyesFree] = 0;
  v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isVoiceTriggerEnabled] = 0;
  v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTextToSpeechEnabled] = 0;
  v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTriggerlessFollowup] = 0;
  v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isPushOffRequest] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_deviceRestrictions] = a12;
  v31.receiver = v12;
  v31.super_class = ObjectType;
  v28 = objc_msgSendSuper2(&v31, sel_init);
  outlined destroy of ParseStateXPC(a9);
  return v28;
}

uint64_t outlined destroy of ParseStateXPC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ParseStateXPC(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id PommesSearchRequestXPC.__allocating_init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:isPushOffRequest:deviceRestrictions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, uint64_t a13, char a14, char a15, char a16, char a17, char a18, uint64_t a19)
{
  objc_class *v19;
  id v22;

  v22 = objc_allocWithZone(v19);
  return PommesSearchRequestXPC.init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:isPushOffRequest:deviceRestrictions:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, a14, a15,
           a16,
           a17,
           a18,
           a19);
}

id PommesSearchRequestXPC.init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:isPushOffRequest:deviceRestrictions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char a19, char a20,char a21,char a22,uint64_t a23)
{
  _BYTE *v23;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  id v37;
  objc_class *ObjectType;
  objc_super v42;

  ObjectType = (objc_class *)swift_getObjectType();
  v30 = &v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_domain];
  *v30 = a1;
  v30[1] = a2;
  v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_listenAfterSpeaking] = a3;
  v31 = &v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId];
  *v31 = a4;
  v31[1] = a5;
  v32 = &v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId];
  *v32 = a6;
  v32[1] = a7;
  v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser] = a8;
  outlined init with copy of ParseStateXPC(a9, (uint64_t)&v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_parseState]);
  v33 = &v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
  *v33 = a10;
  v33[1] = a11;
  v34 = &v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource];
  *v34 = a12;
  v34[1] = a13;
  v35 = &v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination];
  *v35 = a14;
  v35[1] = a15;
  v36 = &v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode];
  *v36 = a16;
  v36[1] = a17;
  v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isEyesFree] = a18;
  v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isVoiceTriggerEnabled] = a19;
  v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTextToSpeechEnabled] = a20;
  v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTriggerlessFollowup] = a21;
  v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isPushOffRequest] = a22;
  *(_QWORD *)&v23[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_deviceRestrictions] = a23;
  v42.receiver = v23;
  v42.super_class = ObjectType;
  v37 = objc_msgSendSuper2(&v42, sel_init);
  outlined destroy of ParseStateXPC(a9);
  return v37;
}

uint64_t static PommesSearchRequestXPC.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static PommesSearchRequestXPC.supportsSecureCoding;
}

uint64_t static PommesSearchRequestXPC.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static PommesSearchRequestXPC.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static PommesSearchRequestXPC.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

Swift::Void __swiftcall PommesSearchRequestXPC.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Class isa;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  Class v37;
  void *v38;

  v2 = v1;
  v4 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_domain), *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_domain + 8));
  v5 = (void *)MEMORY[0x1C3BBEC44](0x6E69616D6F64, 0xE600000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  v6 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_listenAfterSpeaking);
  v7 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000013, 0x80000001C250AA20);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v6, v7);

  v8 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId), *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId + 8));
  v9 = (void *)MEMORY[0x1C3BBEC44](0x6E61747369737361, 0xEB00000000644974);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);

  v10 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId), *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId + 8));
  v11 = (void *)MEMORY[0x1C3BBEC44](0x4974736575716572, 0xE900000000000064);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10, v11);

  v12 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser);
  v13 = (void *)MEMORY[0x1C3BBEC44](0x5569746C754D7369, 0xEB00000000726573);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v12, v13);

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  type metadata accessor for ParseStateXPC(0);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ParseStateXPC and conformance ParseStateXPC, type metadata accessor for ParseStateXPC, (uint64_t)&protocol conformance descriptor for ParseStateXPC);
  v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v16 = v15;
  outlined copy of Data._Representation(v14, v15);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v14, v16);
  v18 = (void *)MEMORY[0x1C3BBEC44](0x6174536573726170, 0xEA00000000006574);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v18);
  swift_unknownObjectRelease();

  v19 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance), *(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8));
  v20 = (void *)MEMORY[0x1C3BBEC44](0x636E617265747475, 0xE900000000000065);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v19, v20);

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource + 8))
  {
    v21 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v2
                                                + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource));
    v22 = (void *)MEMORY[0x1C3BBEC44](0x756F536F69647561, 0xEB00000000656372);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v21, v22);

  }
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination + 8))
  {
    v23 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v2
                                                + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination));
    v24 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000010, 0x80000001C2504F60);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);

  }
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode + 8))
  {
    v25 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v2
                                                + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode));
    v26 = (void *)MEMORY[0x1C3BBEC44](0x65736E6F70736572, 0xEC00000065646F4DLL);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v25, v26);

  }
  v27 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isEyesFree);
  v28 = (void *)MEMORY[0x1C3BBEC44](0x7246736579457369, 0xEA00000000006565);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v27, v28);

  v29 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isVoiceTriggerEnabled);
  v30 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C2504F80);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v29, v30);

  v31 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTextToSpeechEnabled);
  v32 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C2504FA0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v31, v32);

  v33 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTriggerlessFollowup);
  v34 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C2504FC0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v33, v34);

  v35 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isPushOffRequest);
  v36 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000010, 0x80000001C2504FE0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v35, v36);

  v37 = Array._bridgeToObjectiveC()().super.isa;
  v38 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000012, 0x80000001C2505020);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v37, v38);

  outlined consume of Data?(v14, v16);
  swift_release();
}

id PommesSearchRequestXPC.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PommesSearchRequestXPC.init(coder:)(a1);
}

id PommesSearchRequestXPC.init(coder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  uint64_t v52;
  id v53;
  _BYTE v54[12];
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  Class v74;
  uint64_t v75;
  __int128 v76;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParseStateXPC?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for ParseStateXPC(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v54[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v54[-v12];
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v14 = v1;
  v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v15
    || (v16 = (void *)v15,
        v74 = ObjectType,
        v76 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v16,
        (v17 = *((_QWORD *)&v76 + 1)) == 0))
  {

LABEL_22:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v73 = v76;
  v18 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v18
    || (v19 = (void *)v18,
        v76 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v19,
        !*((_QWORD *)&v76 + 1)))
  {

    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v72 = v17;
  v71 = v76;
  v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v20
    || (v21 = (void *)v20,
        v76 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v21,
        !*((_QWORD *)&v76 + 1)))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v70 = v76;
  v22 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v22
    || (v23 = (void *)v22,
        v76 = 0uLL,
        static String._conditionallyBridgeFromObjectiveC(_:result:)(),
        v23,
        (v24 = *((_QWORD *)&v76 + 1)) == 0))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v66 = v76;
  v25 = NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)();
  v69 = v24;
  if (v25)
  {
    *(_QWORD *)&v76 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSString]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v26 = swift_dynamicCast();
    v27 = v75;
    if (!v26)
      v27 = 0;
    v68 = v27;
  }
  else
  {
    v68 = 0;
  }
  v28 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000013, 0x80000001C250AA20);
  v65 = objc_msgSend(a1, sel_decodeBoolForKey_, v28);

  v29 = (void *)MEMORY[0x1C3BBEC44](0x5569746C754D7369, 0xEB00000000726573);
  v64 = objc_msgSend(a1, sel_decodeBoolForKey_, v29);

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v30 = PropertyListDecoder.init()();
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSData);
  v31 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v31
    || (v32 = (void *)v31,
        v67 = v30,
        v76 = xmmword_1C24FEDE0,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v32,
        v33 = *((_QWORD *)&v76 + 1),
        *((_QWORD *)&v76 + 1) >> 60 == 15))
  {

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v34 = v76;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ParseStateXPC and conformance ParseStateXPC, type metadata accessor for ParseStateXPC, (uint64_t)&protocol conformance descriptor for ParseStateXPC);
  v62 = v34;
  v63 = v33;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  outlined init with take of ParseStateXPC((uint64_t)v6, (uint64_t)v13);
  v37 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v37)
  {
    v38 = (void *)v37;
    v76 = 0uLL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    v60 = *((_QWORD *)&v76 + 1);
    v61 = v76;
  }
  else
  {
    v60 = 0;
    v61 = 0;
  }
  v39 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v39)
  {
    v40 = (void *)v39;
    v76 = 0uLL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    v58 = *((_QWORD *)&v76 + 1);
    v59 = v76;
  }
  else
  {
    v59 = 0;
    v58 = 0;
  }
  v41 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v41)
  {
    v42 = (void *)v41;
    v76 = 0uLL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    v56 = *((_QWORD *)&v76 + 1);
    v57 = v76;
  }
  else
  {
    v57 = 0;
    v56 = 0;
  }
  v43 = (void *)MEMORY[0x1C3BBEC44](0x7246736579457369, 0xEA00000000006565);
  v55 = objc_msgSend(a1, sel_decodeBoolForKey_, v43);

  v44 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C2504F80);
  v45 = objc_msgSend(a1, sel_decodeBoolForKey_, v44);

  v46 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C2504FA0);
  v47 = objc_msgSend(a1, sel_decodeBoolForKey_, v46);

  v48 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C2504FC0);
  v49 = objc_msgSend(a1, sel_decodeBoolForKey_, v48);

  v50 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000010, 0x80000001C2504FE0);
  v51 = objc_msgSend(a1, sel_decodeBoolForKey_, v50);

  outlined init with copy of ParseStateXPC((uint64_t)v13, (uint64_t)v11);
  if (v68)
    v52 = v68;
  else
    v52 = MEMORY[0x1E0DEE9D8];
  v53 = objc_allocWithZone(v74);
  v35 = PommesSearchRequestXPC.init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:isPushOffRequest:deviceRestrictions:)(v73, v72, v65, v71, *((uint64_t *)&v71 + 1), v70, *((uint64_t *)&v70 + 1), v64, (uint64_t)v11, v66, v69, v61, v60, v59, v58, v57, v56, v55, v45,
          v47,
          v49,
          v51,
          v52);
  swift_release();
  outlined consume of Data?(v62, v63);

  outlined destroy of ParseStateXPC((uint64_t)v13);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v35;
}

uint64_t outlined init with take of ParseStateXPC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ParseStateXPC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id PommesSearchRequestXPC.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PommesSearchRequestXPC.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PommesSearchRequestXPC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ParseStateXPC.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C24EFBB4 + 4 * byte_1C25013B0[a1]))(1702060386, 0xE400000000000000);
}

unint64_t sub_1C24EFBB4()
{
  return 0xD000000000000011;
}

uint64_t sub_1C24EFBD0()
{
  return 0x736573726170;
}

unint64_t sub_1C24EFBE4()
{
  return 0xD000000000000014;
}

uint64_t sub_1C24EFC04()
{
  return 0x69646E6143707274;
}

uint64_t sub_1C24EFC28()
{
  return 0x6449756374;
}

uint64_t sub_1C24EFC3C()
{
  return 0x65736E6F70736572;
}

uint64_t sub_1C24EFC54()
{
  return 0x7365525454736168;
}

uint64_t ParseStateXPC.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C24EFCA4 + 4 * byte_1C25013B8[a1]))(1702060386, 0xE400000000000000);
}

unint64_t sub_1C24EFCA4()
{
  return 0xD000000000000011;
}

uint64_t sub_1C24EFCC0()
{
  return 0x736573726170;
}

unint64_t sub_1C24EFCD4()
{
  return 0xD000000000000014;
}

uint64_t sub_1C24EFCF4()
{
  return 0x69646E6143707274;
}

uint64_t sub_1C24EFD18()
{
  return 0x6449756374;
}

uint64_t sub_1C24EFD2C()
{
  return 0x65736E6F70736572;
}

uint64_t sub_1C24EFD44()
{
  return 0x7365525454736168;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ParseStateXPC.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ParseStateXPC.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance ParseStateXPC.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ParseStateXPC.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ParseStateXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ParseStateXPC.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ParseStateXPC.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ParseStateXPC.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParseStateXPC.CodingKeys()
{
  unsigned __int8 *v0;

  return ParseStateXPC.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParseStateXPC.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ParseStateXPC.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParseStateXPC.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParseStateXPC.CodingKeys()
{
  lazy protocol witness table accessor for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParseStateXPC.CodingKeys()
{
  lazy protocol witness table accessor for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParseStateXPC.Base(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParseStateXPC.Base()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ParseStateXPC.Base()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParseStateXPC.Base()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ParseStateXPC.Base@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ParseStateXPC.Base.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ParseStateXPC.Base(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 25458;
  if (*v1)
    v2 = 7369332;
  v3 = 0xE200000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParseStateXPC.Base()
{
  lazy protocol witness table accessor for type ParseStateXPC.Base and conformance ParseStateXPC.Base();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParseStateXPC.Base()
{
  lazy protocol witness table accessor for type ParseStateXPC.Base and conformance ParseStateXPC.Base();
  return RawRepresentable<>.encode(to:)();
}

uint64_t ParseStateXPC.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;

  v81 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1E0C80A78](v3);
  v77 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v5);
  v78 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v7);
  v79 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for Siri_Nlu_External_UserParse();
  v83 = *(_QWORD *)(v80 - 8);
  v9 = MEMORY[0x1E0C80A78](v80);
  v82 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v67 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParseStateXPC.CodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ParseStateXPC(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = a1[3];
  v84 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  lazy protocol witness table accessor for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys();
  v21 = v90;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    v23 = (uint64_t)v84;
  }
  else
  {
    v90 = v12;
    v74 = v17;
    v75 = v19;
    v76 = v14;
    LOBYTE(v88) = 0;
    lazy protocol witness table accessor for type ParseStateXPC.Base and conformance ParseStateXPC.Base();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v22 = v13;
    if ((v85 & 1) != 0)
    {
      LOBYTE(v85) = 4;
      v25 = KeyedDecodingContainer.decode(_:forKey:)();
      v27 = v26;
      LOBYTE(v85) = 5;
      v32 = KeyedDecodingContainer.decode(_:forKey:)();
      v34 = v33;
      type metadata accessor for TCUMappedNLResponse();
      LOBYTE(v85) = 6;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type TCUMappedNLResponse and conformance TCUMappedNLResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ED00], MEMORY[0x1E0D9ED18]);
      v35 = v77;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      LOBYTE(v85) = 7;
      v58 = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v16, v22);
      v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
      v60 = (uint64_t)v35;
      v61 = v75;
      v62 = (uint64_t)v75 + *(int *)(v59 + 64);
      v63 = *(int *)(v59 + 80);
      *v75 = v25;
      v61[1] = v27;
      v61[2] = v32;
      v61[3] = v34;
      outlined init with take of TCUMappedNLResponse?(v60, v62);
      *((_BYTE *)v61 + v63) = v58 & 1;
      v64 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
      v65 = (uint64_t)v84;
      v66 = v81;
    }
    else
    {
      LOBYTE(v85) = 1;
      v28 = KeyedDecodingContainer.decode(_:forKey:)();
      v66 = v81;
      v29 = v28;
      v31 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
      LOBYTE(v88) = 2;
      lazy protocol witness table accessor for type [Data] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x1E0DEAF40]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v70 = v16;
      v68 = v29;
      v69 = v31;
      v36 = *(_QWORD *)(v85 + 16);
      v71 = v85;
      v72 = v22;
      v37 = MEMORY[0x1E0DEE9D8];
      if (v36)
      {
        v38 = (unint64_t *)(v85 + 40);
        v39 = v80;
        do
        {
          v40 = *(v38 - 1);
          v41 = *v38;
          v88 = v40;
          v89 = v41;
          v87 = 0;
          v85 = 0u;
          v86 = 0u;
          outlined copy of Data._Representation(v40, v41);
          outlined copy of Data._Representation(v40, v41);
          BinaryDecodingOptions.init()();
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F2E0]);
          v42 = v79;
          Message.init<A>(contiguousBytes:extensions:partial:options:)();
          v73 = v36;
          v43 = v41;
          v44 = v83;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v42, 0, 1, v39);
          v45 = v37;
          v46 = v90;
          v77 = *(char **)(v44 + 32);
          ((void (*)(char *, char *, uint64_t))v77)(v90, v42, v39);
          v47 = v46;
          v37 = v45;
          (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v82, v47, v39);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
          v49 = *(_QWORD *)(v37 + 16);
          v48 = *(_QWORD *)(v37 + 24);
          v50 = v43;
          if (v49 >= v48 >> 1)
            v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v37);
          v51 = v73;
          v38 += 2;
          *(_QWORD *)(v37 + 16) = v49 + 1;
          v52 = v83;
          v39 = v80;
          ((void (*)(unint64_t, char *, uint64_t))v77)(v37+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v83 + 72) * v49, v82, v80);
          outlined consume of Data._Representation(v40, v50);
          (*(void (**)(char *, uint64_t))(v52 + 8))(v90, v39);
          v36 = v51 - 1;
          v66 = v81;
        }
        while (v36);
      }
      v53 = v37;
      swift_bridgeObjectRelease();
      LOBYTE(v85) = 3;
      v54 = v72;
      v55 = v70;
      v56 = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v54);
      v64 = (uint64_t)v75;
      v57 = v69;
      *v75 = v68;
      *(_QWORD *)(v64 + 8) = v57;
      *(_QWORD *)(v64 + 16) = v53;
      *(_BYTE *)(v64 + 24) = v56 & 1;
      swift_storeEnumTagMultiPayload();
      v65 = (uint64_t)v84;
    }
    outlined init with take of ParseStateXPC(v64, v66);
    v23 = v65;
  }
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

unint64_t lazy protocol witness table accessor for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.CodingKeys, &unk_1E7C04FD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.CodingKeys, &unk_1E7C04FD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.CodingKeys, &unk_1E7C04FD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.CodingKeys, &unk_1E7C04FD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParseStateXPC.Base and conformance ParseStateXPC.Base()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.Base, &unk_1E7C04F48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.Base, &unk_1E7C04F48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.Base, &unk_1E7C04F48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base;
  if (!lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ParseStateXPC.Base, &unk_1E7C04F48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParseStateXPC.Base and conformance ParseStateXPC.Base);
  }
  return result;
}

uint64_t ParseStateXPC.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  MEMORY[0x1E0C80A78](v7);
  v41 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ParseStateXPC(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParseStateXPC.CodingKeys>);
  v44 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParseStateXPC.CodingKeys and conformance ParseStateXPC.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ParseStateXPC(v2, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v43 = *((_QWORD *)v11 + 2);
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
    v16 = (uint64_t)&v11[*(int *)(v15 + 64)];
    v17 = v11[*(int *)(v15 + 80)];
    outlined init with take of TCUMappedNLResponse?(v16, (uint64_t)v6);
    LOBYTE(v46) = 1;
    v47 = 0;
    lazy protocol witness table accessor for type ParseStateXPC.Base and conformance ParseStateXPC.Base();
    v18 = v45;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v18)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      LODWORD(v45) = v17;
      LOBYTE(v46) = 4;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      LOBYTE(v46) = 5;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      LOBYTE(v46) = 6;
      type metadata accessor for TCUMappedNLResponse();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type TCUMappedNLResponse and conformance TCUMappedNLResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ED00], MEMORY[0x1E0D9ED10]);
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      LOBYTE(v46) = 7;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v14, v12);
  }
  else
  {
    v20 = *((_QWORD *)v11 + 2);
    LOBYTE(v46) = 0;
    v47 = 0;
    lazy protocol witness table accessor for type ParseStateXPC.Base and conformance ParseStateXPC.Base();
    v21 = v45;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v21)
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v12);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      LOBYTE(v46) = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      LOBYTE(v46) = 3;
      KeyedEncodingContainer.encode(_:forKey:)();
      v38 = v14;
      v39 = v12;
      v22 = *(_QWORD *)(v20 + 16);
      if (v22)
      {
        v23 = v42;
        v24 = v20 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
        v45 = *(_QWORD *)(v42 + 72);
        v40 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
        v37 = v20;
        swift_bridgeObjectRetain();
        v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v26 = v43;
        v27 = v41;
        do
        {
          v40(v27, v24, v26);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F2E0]);
          v28 = Message.serializedData(partial:)();
          v30 = v29;
          (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v26);
          v31 = v25;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
          v33 = v31[2];
          v32 = v31[3];
          v25 = v31;
          if (v33 >= v32 >> 1)
            v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
          v25[2] = v33 + 1;
          v34 = &v25[2 * v33];
          v34[4] = v28;
          v34[5] = v30;
          v23 = v42;
          v26 = v43;
          v24 += v45;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v46 = v25;
      v47 = 2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
      lazy protocol witness table accessor for type [Data] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x1E0DEAF10]);
      v35 = v38;
      v36 = v39;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v35, v36);
    }
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Siri_Nlu_External_UserParse();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = *(_QWORD *)(v8 + 72);
      v23 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F360]);
        v17 = dispatch thunk of static Equatable.== infix(_:_:)();
        v18 = *(void (**)(char *, uint64_t))(v23 + 8);
        v18(v7, v4);
        v18(v10, v4);
        v20 = v14-- != 0;
        if ((v17 & 1) == 0)
          break;
        v12 += v22;
        a2 = v16;
        a1 = v15;
      }
      while (v20);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParseStateXPC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParseStateXPC.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParseStateXPC(_QWORD *a1)
{
  return ParseStateXPC.encode(to:)(a1);
}

uint64_t static NLParseResponse.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v15[2];

  v0 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F520];
  v2 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x1E0C80A78](v0);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v15 - v6;
  NLParseResponse.responseStatusCode.getter();
  NLParseResponse.responseStatusCode.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode, v1, MEMORY[0x1E0D9F538]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v9 = v15[0];
  v8 = v15[1];
  v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v5, v0);
  v10(v7, v0);
  if (v8 == v9)
  {
    v11 = NLParseResponse.userParses.getter();
    v12 = NLParseResponse.userParses.getter();
    v13 = specialized static Array<A>.== infix(_:_:)(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t key path setter for PommesSearchRequestXPCBuilder.domain : PommesSearchRequestXPCBuilder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PommesSearchRequestXPCBuilder.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for PommesSearchRequestXPCBuilder.assistantId : PommesSearchRequestXPCBuilder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 40) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PommesSearchRequestXPCBuilder.assistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for PommesSearchRequestXPCBuilder.requestId : PommesSearchRequestXPCBuilder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = v3;
  *(_QWORD *)(v4 + 56) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PommesSearchRequestXPCBuilder.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for PommesSearchRequestXPCBuilder.parseState : PommesSearchRequestXPCBuilder(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for ParseStateXPC(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ParseStateXPC(a1, (uint64_t)v6);
  v7 = *a2 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_parseState;
  swift_beginAccess();
  outlined assign with take of ParseStateXPC((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t PommesSearchRequestXPCBuilder.parseState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_parseState;
  swift_beginAccess();
  return outlined init with copy of ParseStateXPC(v3, a1);
}

uint64_t key path setter for PommesSearchRequestXPCBuilder.utterance : PommesSearchRequestXPCBuilder(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_utterance);
  swift_beginAccess();
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PommesSearchRequestXPCBuilder.utterance.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_utterance);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PommesSearchRequestXPCBuilder.listenAfterSpeaking.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_listenAfterSpeaking);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesSearchRequestXPCBuilder.isMultiUser.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isMultiUser);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesSearchRequestXPCBuilder.audioSource.getter()
{
  return PommesSearchRequestXPCBuilder.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioSource);
}

uint64_t PommesSearchRequestXPCBuilder.audioDestination.getter()
{
  return PommesSearchRequestXPCBuilder.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioDestination);
}

uint64_t key path setter for PommesSearchRequestXPCBuilder.audioSource : PommesSearchRequestXPCBuilder(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v7 = v6;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PommesSearchRequestXPCBuilder.responseMode.getter()
{
  return PommesSearchRequestXPCBuilder.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_responseMode);
}

uint64_t PommesSearchRequestXPCBuilder.audioSource.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t PommesSearchRequestXPCBuilder.isEyesFree.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isEyesFree);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesSearchRequestXPCBuilder.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isVoiceTriggerEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesSearchRequestXPCBuilder.isTextToSpeechEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTextToSpeechEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesSearchRequestXPCBuilder.isTriggerlessFollowup.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTriggerlessFollowup);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesSearchRequestXPCBuilder.isPushOffRequest.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isPushOffRequest);
  swift_beginAccess();
  return *v1;
}

uint64_t key path setter for PommesSearchRequestXPCBuilder.deviceRestrictions : PommesSearchRequestXPCBuilder(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_deviceRestrictions);
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PommesSearchRequestXPCBuilder.deviceRestrictions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequestXPCBuilder.__allocating_init(domain:assistantId:requestId:parseState:utterance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  v17 = swift_allocObject();
  PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

_QWORD *PommesSearchRequestXPCBuilder.init(domain:assistantId:requestId:parseState:utterance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v12 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioSource);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioDestination);
  *v13 = 0;
  v13[1] = 0;
  v14 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_responseMode);
  *v14 = 0;
  v14[1] = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = a5;
  v9[7] = a6;
  outlined init with copy of ParseStateXPC(a7, (uint64_t)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_parseState);
  v15 = (_QWORD *)((char *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_utterance);
  *v15 = a8;
  v15[1] = a9;
  *((_BYTE *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_listenAfterSpeaking) = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isMultiUser) = 0;
  swift_beginAccess();
  *v12 = 0;
  v12[1] = 0;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *v13 = 0;
  v13[1] = 0;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *v14 = 0;
  v14[1] = 0;
  swift_bridgeObjectRelease();
  *((_BYTE *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isEyesFree) = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isVoiceTriggerEnabled) = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTextToSpeechEnabled) = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTriggerlessFollowup) = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isPushOffRequest) = 0;
  outlined destroy of ParseStateXPC(a7);
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_deviceRestrictions) = MEMORY[0x1E0DEE9D8];
  return v9;
}

uint64_t PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(char a1)
{
  return PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(a1, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_listenAfterSpeaking);
}

uint64_t PommesSearchRequestXPCBuilder.withIsMultiUser(_:)(char a1)
{
  return PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(a1, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isMultiUser);
}

uint64_t PommesSearchRequestXPCBuilder.withAudioSource(_:)(uint64_t a1, uint64_t a2)
{
  return PommesSearchRequestXPCBuilder.withAudioSource(_:)(a1, a2, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioSource);
}

uint64_t PommesSearchRequestXPCBuilder.withAudioDestination(_:)(uint64_t a1, uint64_t a2)
{
  return PommesSearchRequestXPCBuilder.withAudioSource(_:)(a1, a2, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioDestination);
}

uint64_t PommesSearchRequestXPCBuilder.withResponseMode(_:)(uint64_t a1, uint64_t a2)
{
  return PommesSearchRequestXPCBuilder.withAudioSource(_:)(a1, a2, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_responseMode);
}

uint64_t PommesSearchRequestXPCBuilder.withAudioSource(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_retain();
}

uint64_t PommesSearchRequestXPCBuilder.withIsEyesFree(_:)(char a1)
{
  return PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(a1, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isEyesFree);
}

uint64_t PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)(char a1)
{
  return PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(a1, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isVoiceTriggerEnabled);
}

uint64_t PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)(char a1)
{
  return PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(a1, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTextToSpeechEnabled);
}

uint64_t PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)(char a1)
{
  return PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(a1, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTriggerlessFollowup);
}

uint64_t PommesSearchRequestXPCBuilder.withIsPushOffRequest(_:)(char a1)
{
  return PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(a1, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isPushOffRequest);
}

uint64_t PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)(char a1, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v4;

  v4 = (_BYTE *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_retain();
}

uint64_t PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_deviceRestrictions);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_retain();
}

id PommesSearchRequestXPCBuilder.build()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  v1 = type metadata accessor for ParseStateXPC(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 208))(v2);
  v41 = v6;
  v42 = v5;
  v40 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
  v38 = v8;
  v39 = v7;
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
  v36 = v10;
  v37 = v9;
  v35 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
  v11 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 304))(v11);
  v33 = v13;
  v34 = v12;
  v14 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
  v31 = v15;
  v32 = v14;
  v30 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
  v17 = v16;
  v18 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
  v20 = v19;
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
  v22 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
  v23 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
  v24 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
  v25 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
  v26 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
  v27 = objc_allocWithZone((Class)type metadata accessor for PommesSearchRequestXPC(0));
  return PommesSearchRequestXPC.init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:isPushOffRequest:deviceRestrictions:)(v42, v41, v40 & 1, v39, v38, v37, v36, v35 & 1, (uint64_t)v4, v34, v33, v32, v31, v30, v17, v18, v20, v21 & 1, v22 & 1,
           v23 & 1,
           v24 & 1,
           v25 & 1,
           v26);
}

uint64_t PommesSearchRequestXPCBuilder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ParseStateXPC(v0 + OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_parseState);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PommesSearchRequestXPCBuilder.__deallocating_deinit()
{
  PommesSearchRequestXPCBuilder.deinit();
  return swift_deallocClassInstance();
}

uint64_t lazy protocol witness table accessor for type [Data] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v8 = a2();
    result = MEMORY[0x1C3BBFE74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static ParseStateXPC.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  id v92;
  char v93;
  id v94;
  char v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v104 = (uint64_t)&v96 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v107 = (uint64_t)&v96 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v96 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v105 = (uint64_t)&v96 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v106 = (uint64_t)&v96 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v110 = (uint64_t)&v96 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v108 = (uint64_t)&v96 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v109 = (uint64_t)&v96 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v96 - v25;
  v27 = type metadata accessor for ParseStateXPC(0);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (uint64_t *)((char *)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v96 - v31;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ParseStateXPC, ParseStateXPC));
  v34 = MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v96 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &v36[*(int *)(v34 + 48)];
  outlined init with copy of ParseStateXPC(a1, (uint64_t)v36);
  outlined init with copy of ParseStateXPC(a2, (uint64_t)v37);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v100 = v7;
    v102 = v14;
    v103 = v26;
    outlined init with copy of ParseStateXPC((uint64_t)v36, (uint64_t)v30);
    v39 = *v30;
    v38 = v30[1];
    v40 = v30[3];
    v101 = v30[2];
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
    v42 = *(int *)(v41 + 64);
    v43 = (uint64_t)v30 + v42;
    v44 = *(int *)(v41 + 80);
    v45 = *((unsigned __int8 *)v30 + v44);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v97 = v45;
      v46 = *(_QWORD *)v37;
      v47 = *((_QWORD *)v37 + 1);
      v48 = *((_QWORD *)v37 + 3);
      v98 = *((_QWORD *)v37 + 2);
      v99 = v48;
      v49 = v37[v44];
      outlined init with take of TCUMappedNLResponse?(v43, (uint64_t)v103);
      v50 = (uint64_t)&v37[v42];
      v51 = v109;
      outlined init with take of TCUMappedNLResponse?(v50, v109);
      if (v39 == v46 && v38 == v47)
      {
        swift_bridgeObjectRelease_n();
        v52 = (uint64_t)v102;
      }
      else
      {
        v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v52 = (uint64_t)v102;
        if ((v64 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v65 = (uint64_t)v103;
          v66 = v108;
          outlined init with copy of TCUMappedNLResponse?((uint64_t)v103, v108);
          v69 = v110;
          outlined init with copy of TCUMappedNLResponse?(v51, v110);
          goto LABEL_34;
        }
      }
      v65 = (uint64_t)v103;
      v66 = v108;
      if (v101 == v98 && v40 == v99)
      {
        swift_bridgeObjectRelease_n();
        outlined init with copy of TCUMappedNLResponse?(v65, v66);
        outlined init with copy of TCUMappedNLResponse?(v51, v110);
LABEL_22:
        v70 = v106;
        outlined init with copy of TCUMappedNLResponse?(v66, v106);
        v71 = type metadata accessor for TCUMappedNLResponse();
        v72 = *(_QWORD *)(v71 - 8);
        v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
        v74 = v73(v70, 1, v71);
        v96 = v49;
        if (v74 == 1)
        {
          outlined destroy of MediaUserStateCenter?(v70, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          v75 = 0;
          v76 = 0;
        }
        else
        {
          v75 = TCUMappedNLResponse.tcuId.getter();
          v76 = v77;
          (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
        }
        v78 = v105;
        outlined init with copy of TCUMappedNLResponse?(v110, v105);
        v79 = v73(v78, 1, v71);
        v102 = (char *)v71;
        if (v79 == 1)
        {
          outlined destroy of MediaUserStateCenter?(v78, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          if (!v76)
          {
            v80 = 0;
            goto LABEL_36;
          }
        }
        else
        {
          v81 = TCUMappedNLResponse.tcuId.getter();
          v82 = v71;
          v83 = v81;
          v80 = v84;
          (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v78, v82);
          if (!v76)
          {
LABEL_36:
            outlined destroy of MediaUserStateCenter?(v110, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
            outlined destroy of MediaUserStateCenter?(v108, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
            v85 = v107;
            v51 = v109;
            if (v80)
            {
              swift_bridgeObjectRelease();
              goto LABEL_38;
            }
            goto LABEL_43;
          }
          if (v80)
          {
            if (v75 != v83 || v76 != v80)
            {
              v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              outlined destroy of MediaUserStateCenter?(v110, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
              outlined destroy of MediaUserStateCenter?(v108, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
              swift_bridgeObjectRelease();
              outlined init with copy of TCUMappedNLResponse?(v65, v52);
              v51 = v109;
              v85 = v107;
              outlined init with copy of TCUMappedNLResponse?(v109, v107);
              if ((v95 & 1) == 0)
                goto LABEL_39;
LABEL_44:
              v87 = v104;
              outlined init with copy of TCUMappedNLResponse?(v52, v104);
              v88 = v102;
              if (v73(v87, 1, (uint64_t)v102) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v87, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                v89 = 0;
              }
              else
              {
                v89 = (void *)TCUMappedNLResponse.nlResponse.getter();
                (*(void (**)(uint64_t, char *))(v72 + 8))(v87, v88);
              }
              v90 = (uint64_t)v100;
              outlined init with copy of TCUMappedNLResponse?(v85, (uint64_t)v100);
              if (v73(v90, 1, (uint64_t)v88) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v90, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                if (!v89)
                {
                  v91 = 0;
                  goto LABEL_55;
                }
              }
              else
              {
                v91 = (void *)TCUMappedNLResponse.nlResponse.getter();
                (*(void (**)(uint64_t, char *))(v72 + 8))(v90, v88);
                if (!v89)
                {
LABEL_55:
                  outlined destroy of MediaUserStateCenter?(v85, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                  outlined destroy of MediaUserStateCenter?(v52, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                  outlined destroy of MediaUserStateCenter?(v51, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                  outlined destroy of MediaUserStateCenter?(v65, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                  if (v91)
                  {

                    goto LABEL_40;
                  }
                  goto LABEL_59;
                }
                if (v91)
                {
                  type metadata accessor for NLParseResponse();
                  v92 = v89;
                  v93 = static NSObject.== infix(_:_:)();
                  outlined destroy of MediaUserStateCenter?(v85, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                  outlined destroy of MediaUserStateCenter?(v52, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                  outlined destroy of MediaUserStateCenter?(v51, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
                  outlined destroy of MediaUserStateCenter?(v65, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);

                  if ((v93 & 1) == 0)
                    goto LABEL_40;
LABEL_59:
                  v63 = v97 ^ v96 ^ 1u;
                  goto LABEL_41;
                }
              }
              v94 = v89;
              outlined destroy of MediaUserStateCenter?(v85, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
              outlined destroy of MediaUserStateCenter?(v52, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
              outlined destroy of MediaUserStateCenter?(v51, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
              outlined destroy of MediaUserStateCenter?(v65, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);

              goto LABEL_40;
            }
            swift_bridgeObjectRelease();
            outlined destroy of MediaUserStateCenter?(v110, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
            outlined destroy of MediaUserStateCenter?(v108, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
            swift_bridgeObjectRelease();
            v85 = v107;
            v51 = v109;
LABEL_43:
            outlined init with copy of TCUMappedNLResponse?(v65, v52);
            outlined init with copy of TCUMappedNLResponse?(v51, v85);
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRetain();
        outlined destroy of MediaUserStateCenter?(v110, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?(v108, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        swift_bridgeObjectRelease_n();
        v85 = v107;
        v51 = v109;
LABEL_38:
        outlined init with copy of TCUMappedNLResponse?(v65, v52);
        outlined init with copy of TCUMappedNLResponse?(v51, v85);
LABEL_39:
        outlined destroy of MediaUserStateCenter?(v85, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?(v52, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?(v51, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?(v65, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        goto LABEL_40;
      }
      v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of TCUMappedNLResponse?(v65, v66);
      v69 = v110;
      outlined init with copy of TCUMappedNLResponse?(v51, v110);
      if ((v68 & 1) != 0)
        goto LABEL_22;
LABEL_34:
      outlined destroy of MediaUserStateCenter?(v69, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined destroy of MediaUserStateCenter?(v66, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v85 = v107;
      goto LABEL_38;
    }
    outlined destroy of MediaUserStateCenter?(v43, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }
  else
  {
    outlined init with copy of ParseStateXPC((uint64_t)v36, (uint64_t)v32);
    v53 = *(_QWORD *)v32;
    v54 = *((_QWORD *)v32 + 1);
    v55 = *((_QWORD *)v32 + 2);
    v56 = v32[24];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v57 = *(_QWORD *)v37;
      v58 = *((_QWORD *)v37 + 1);
      v59 = *((_QWORD *)v37 + 2);
      v60 = v37[24];
      if (v53 == v57 && v54 == v58)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v62 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_40:
          v63 = 0;
          goto LABEL_41;
        }
      }
      v67 = specialized static Array<A>.== infix(_:_:)(v55, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = v67 & (v56 ^ v60 ^ 1u);
LABEL_41:
      outlined destroy of ParseStateXPC((uint64_t)v36);
      return v63;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for (ParseStateXPC, ParseStateXPC));
  return 0;
}

uint64_t type metadata accessor for PommesSearchRequestXPC(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequestXPC);
}

uint64_t sub_1C24F2AB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24F2AE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 232))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24F2B1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 256))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24F2B50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 280))();
}

uint64_t sub_1C24F2B7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 304))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24F2BB0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 328))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24F2BE4(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_listenAfterSpeaking);
}

uint64_t sub_1C24F2BF0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 352))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24F2C24(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isMultiUser);
}

uint64_t sub_1C24F2C30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 376))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24F2C60(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PommesSearchRequestXPCBuilder.audioSource : PommesSearchRequestXPCBuilder(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioSource);
}

uint64_t sub_1C24F2C7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 400))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24F2CAC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PommesSearchRequestXPCBuilder.audioSource : PommesSearchRequestXPCBuilder(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_audioDestination);
}

uint64_t sub_1C24F2CC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 424))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C24F2CF8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PommesSearchRequestXPCBuilder.audioSource : PommesSearchRequestXPCBuilder(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_responseMode);
}

uint64_t sub_1C24F2D14@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 448))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24F2D48(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isEyesFree);
}

uint64_t sub_1C24F2D54@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 472))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24F2D88(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isVoiceTriggerEnabled);
}

uint64_t sub_1C24F2D94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 496))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24F2DC8(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTextToSpeechEnabled);
}

uint64_t sub_1C24F2DD4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 520))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24F2E08(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isTriggerlessFollowup);
}

uint64_t sub_1C24F2E14@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 544))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24F2E48(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC21SiriInformationSearch29PommesSearchRequestXPCBuilder_isPushOffRequest);
}

uint64_t keypath_set_10Tm(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t sub_1C24F2E9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 568))();
  *a2 = result;
  return result;
}

uint64_t ObjC metadata update function for PommesSearchRequestXPC()
{
  return type metadata accessor for PommesSearchRequestXPC(0);
}

uint64_t type metadata completion function for PommesSearchRequestXPC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ParseStateXPC(319);
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for PommesSearchRequestXPC()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesSearchRequestXPC.__allocating_init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:deviceRestrictions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PommesSearchRequestXPC.__allocating_init(domain:listenAfterSpeaking:assistantId:requestId:isMultiUser:parseState:utterance:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:isPushOffRequest:deviceRestrictions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of PommesSearchRequestXPC.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

_QWORD *initializeBufferWithCopyOfBuffer for ParseStateXPC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
      v10 = *(int *)(v9 + 64);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for TCUMappedNLResponse();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *((_BYTE *)a1 + *(int *)(v9 + 80)) = *((_BYTE *)a2 + *(int *)(v9 + 80));
    }
    else
    {
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ParseStateXPC(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload != 1)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool))
              + 64);
  v4 = type metadata accessor for TCUMappedNLResponse();
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return result;
}

_QWORD *initializeWithCopy for ParseStateXPC(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
    v8 = *(int *)(v7 + 64);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for TCUMappedNLResponse();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)a1 + *(int *)(v7 + 80)) = *((_BYTE *)a2 + *(int *)(v7 + 80));
  }
  else
  {
    a1[2] = a2[2];
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for ParseStateXPC(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of ParseStateXPC((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
      v6 = *(int *)(v5 + 64);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for TCUMappedNLResponse();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      *((_BYTE *)a1 + *(int *)(v5 + 80)) = *((_BYTE *)a2 + *(int *)(v5 + 80));
    }
    else
    {
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for ParseStateXPC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
    v8 = *(int *)(v7 + 64);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for TCUMappedNLResponse();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)a1 + *(int *)(v7 + 80)) = *((_BYTE *)a2 + *(int *)(v7 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for ParseStateXPC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of ParseStateXPC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
      v8 = *(int *)(v7 + 64);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for TCUMappedNLResponse();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *((_BYTE *)a1 + *(int *)(v7 + 80)) = *((_BYTE *)a2 + *(int *)(v7 + 80));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for ParseStateXPC()
{
  unint64_t v0;
  char v1;
  void *v2;
  char *v3;

  v2 = &unk_1C25014F0;
  type metadata accessor for TCUMappedNLResponse?();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    v3 = &v1;
    swift_initEnumMetadataMultiPayload();
  }
}

void type metadata accessor for TCUMappedNLResponse?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TCUMappedNLResponse?)
  {
    type metadata accessor for TCUMappedNLResponse();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TCUMappedNLResponse?);
  }
}

uint64_t ObjC metadata update function for PommesSearchRequestXPCBuilder()
{
  return type metadata accessor for PommesSearchRequestXPCBuilder(0);
}

uint64_t type metadata accessor for PommesSearchRequestXPCBuilder(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequestXPCBuilder);
}

uint64_t type metadata completion function for PommesSearchRequestXPCBuilder()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ParseStateXPC(319);
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for PommesSearchRequestXPCBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.domain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.assistantId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.requestId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.parseState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.utterance.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.listenAfterSpeaking.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.isMultiUser.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.audioSource.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.audioDestination.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.responseMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.isEyesFree.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.isTriggerlessFollowup.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.isPushOffRequest.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.deviceRestrictions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.__allocating_init(domain:assistantId:requestId:parseState:utterance:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 592))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withListenAfterSpeaking(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsMultiUser(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withAudioSource(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withAudioDestination(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withResponseMode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsEyesFree(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsVoiceTriggerEnabled(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsTextToSpeechEnabled(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsTriggerlessFollowup(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withIsPushOffRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.withDeviceRestrictions(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of PommesSearchRequestXPCBuilder.build()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t storeEnumTagSinglePayload for ParseStateXPC.Base(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C24F3ADC + 4 * byte_1C25013C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C24F3B10 + 4 * byte_1C25013C0[v4]))();
}

uint64_t sub_1C24F3B10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24F3B18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24F3B20);
  return result;
}

uint64_t sub_1C24F3B2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24F3B34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C24F3B38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24F3B40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParseStateXPC.Base()
{
  return &unk_1E7C04F48;
}

uint64_t getEnumTagSinglePayload for ParseStateXPC.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParseStateXPC.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1C24F3C38 + 4 * byte_1C25013CF[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1C24F3C6C + 4 * byte_1C25013CA[v4]))();
}

uint64_t sub_1C24F3C6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24F3C74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24F3C7CLL);
  return result;
}

uint64_t sub_1C24F3C88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24F3C90);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1C24F3C94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24F3C9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParseStateXPC.CodingKeys()
{
  return &unk_1E7C04FD8;
}

unint64_t specialized ParseStateXPC.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ParseStateXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t outlined assign with take of ParseStateXPC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ParseStateXPC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t PommesResponse.pommesContext.getter()
{
  int *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v0 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for PommesContext.Source();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = PommesResponse.conversationContext.getter();
  v7[1] = v8;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0D98A58], v4);
  PommesResponse.metadataDomainName.getter();
  dispatch thunk of PommesResponse.listenAfterSpeaking.getter();
  PommesContext.init(source:domain:listenAfterSpeaking:)();
  dispatch thunk of PommesResponse.primaryInstructionIntent()();
  PommesContext.instructionIntent.setter();
  Date.init()();
  v9 = &v2[v0[5]];
  *(_QWORD *)v9 = "SiriInformationSearch/PommesResponse+Context.swift";
  *((_QWORD *)v9 + 1) = 50;
  v9[16] = 2;
  *(_QWORD *)&v2[v0[6]] = 18;
  v10 = &v2[v0[7]];
  *(_QWORD *)v10 = "pommesContext";
  *((_QWORD *)v10 + 1) = 13;
  v10[16] = 2;
  v11 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000022);
  v12 = (uint64_t *)&v2[v0[8]];
  *v12 = v11;
  v12[1] = v13;
  v14 = dispatch thunk of PommesResponse.renderedTexts.getter();
  PommesContext.addRenderedTexts(_:)((Swift::OpaquePointer)v14);
  swift_bridgeObjectRelease();
  v15 = dispatch thunk of PommesResponse.redactedRenderedTexts.getter();
  PommesContext.addRedactedRenderedTexts(_:)((Swift::OpaquePointer)v15);
  swift_bridgeObjectRelease();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v2, 0);
  return outlined destroy of PerformanceUtil.Ticket((uint64_t)v2);
}

uint64_t VideoCategory.init(rawValue:)()
{
  return MEMORY[0x1E0C90A90]();
}

uint64_t type metadata accessor for VideoCategory()
{
  return MEMORY[0x1E0C90A98]();
}

uint64_t StringSearchScope.init(rawValue:)()
{
  return MEMORY[0x1E0C911D0]();
}

uint64_t type metadata accessor for StringSearchScope()
{
  return MEMORY[0x1E0C911E0]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return MEMORY[0x1E0CAE3A0]();
}

uint64_t static CharacterSet.urlPathAllowed.getter()
{
  return MEMORY[0x1E0CAE3D0]();
}

NSCharacterSet __swiftcall CharacterSet._bridgeToObjectiveC()()
{
  return (NSCharacterSet)MEMORY[0x1E0CAE410]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t CharacterSet.inverted.getter()
{
  return MEMORY[0x1E0CAE490]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x1E0CAE5D0]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CAE618]();
}

uint64_t Notification.userInfo.getter()
{
  return MEMORY[0x1E0CAE638]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x1E0CAE648]();
}

uint64_t URLComponents.host.setter()
{
  return MEMORY[0x1E0CAE7F0]();
}

uint64_t URLComponents.path.setter()
{
  return MEMORY[0x1E0CAE808]();
}

uint64_t URLComponents.scheme.setter()
{
  return MEMORY[0x1E0CAE848]();
}

uint64_t URLComponents.string.getter()
{
  return MEMORY[0x1E0CAE860]();
}

uint64_t URLComponents.init()()
{
  return MEMORY[0x1E0CAE878]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x1E0CAE890]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1E0CAE910]();
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  return (NSDateComponents)MEMORY[0x1E0CAE9A0]();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return MEMORY[0x1E0CAEA80]();
}

uint64_t type metadata accessor for DateComponents()
{
  return MEMORY[0x1E0CAEAB0]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x1E0CAF628]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return MEMORY[0x1E0CAF6F0]();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return MEMORY[0x1E0CAF700]();
}

uint64_t PersonNameComponents.middleName.getter()
{
  return MEMORY[0x1E0CAF710]();
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CAF768]();
}

uint64_t PersonNameComponents.nickname.getter()
{
  return MEMORY[0x1E0CAF770]();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return MEMORY[0x1E0CAF790]();
}

uint64_t _BridgedStoredNSError._getEmbeddedNSError()()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t _BridgedStoredNSError.init(_bridgedNSError:)()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t _BridgedStoredNSError.errorUserInfo.getter()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t static _BridgedStoredNSError.== infix(_:_:)()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return MEMORY[0x1E0CAF910]();
}

uint64_t _BridgedStoredNSError.hash(into:)()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t _BridgedStoredNSError.errorCode.getter()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x1E0CAFB58]();
}

uint64_t URL.absoluteURL.getter()
{
  return MEMORY[0x1E0CAFD38]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x1E0CAFDA0]();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return MEMORY[0x1E0CAFDD8]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t URL.hasDirectoryPath.getter()
{
  return MEMORY[0x1E0CAFDF8]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x1E0CAFE38](retstr);
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x1E0CAFE78]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t URL.host.getter()
{
  return MEMORY[0x1E0CAFF20]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t Data.description.getter()
{
  return MEMORY[0x1E0CB0110]();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return MEMORY[0x1E0CB0138]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1E0CB0140]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1E0CB01F0]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x1E0CB01F8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB0220]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x1E0CB03C0]();
}

uint64_t static Date.distantPast.getter()
{
  return MEMORY[0x1E0CB0588]();
}

uint64_t Date.init(timeInterval:since:)()
{
  return MEMORY[0x1E0CB0598]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x1E0CB05D8]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x1E0CB0680]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x1E0CB06B8]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x1E0CB06D0]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x1E0CB06D8]();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return MEMORY[0x1E0CB0708]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x1E0CB0900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1E0CB0910]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x1E0CB0930]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x1E0CB0A80]();
}

uint64_t Locale.identifier.getter()
{
  return MEMORY[0x1E0CB0A90]();
}

uint64_t Locale.LanguageCode.identifier.getter()
{
  return MEMORY[0x1E0CB0AC0]();
}

uint64_t type metadata accessor for Locale.LanguageCode()
{
  return MEMORY[0x1E0CB0AE8]();
}

uint64_t Locale.languageCode.getter()
{
  return MEMORY[0x1E0CB0B28]();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)MEMORY[0x1E0CB0BE0]();
}

uint64_t static Locale.canonicalLanguageIdentifier(from:)()
{
  return MEMORY[0x1E0CB0C18]();
}

uint64_t static Locale._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0C30]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x1E0CB0CC8]();
}

uint64_t Locale.Language.languageCode.getter()
{
  return MEMORY[0x1E0CB0D80]();
}

uint64_t type metadata accessor for Locale.Language()
{
  return MEMORY[0x1E0CB0DB8]();
}

uint64_t Locale.language.getter()
{
  return MEMORY[0x1E0CB0DF0]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return MEMORY[0x1E0CB0F00]();
}

uint64_t Calendar.init(identifier:)()
{
  return MEMORY[0x1E0CB0F20]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t Selector.init(_:)()
{
  return MEMORY[0x1E0DEFCD0]();
}

Swift::Void __swiftcall Apple_Parsec_Search_PegasusQueryContext.augment(withLocation:)(CLLocation withLocation)
{
  MEMORY[0x1E0D70740](withLocation.super.isa, withLocation._internal);
}

uint64_t type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat()
{
  return MEMORY[0x1E0D6C9F0]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter()
{
  return MEMORY[0x1E0D6C9F8]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.siriLocale.getter()
{
  return MEMORY[0x1E0D6CA08]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.siriLocale.setter()
{
  return MEMORY[0x1E0D6CA10]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.storeFront.getter()
{
  return MEMORY[0x1E0D6CA18]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.storeFront.setter()
{
  return MEMORY[0x1E0D6CA20]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.countryCode.getter()
{
  return MEMORY[0x1E0D6CA28]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.countryCode.setter()
{
  return MEMORY[0x1E0D6CA38]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit()
{
  return MEMORY[0x1E0D6CA70]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.companionDevice.setter()
{
  return MEMORY[0x1E0D6CA78]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.marketplaceInfo.setter()
{
  return MEMORY[0x1E0D6CA80]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.getter()
{
  return MEMORY[0x1E0D6CA88]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter()
{
  return MEMORY[0x1E0D6CA90]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.MeasurementSystem()
{
  return MEMORY[0x1E0D6CAB8]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.measurementSystem.getter()
{
  return MEMORY[0x1E0D6CAC0]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.getter()
{
  return MEMORY[0x1E0D6CAD8]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.isGenerativeModelDevice.setter()
{
  return MEMORY[0x1E0D6CAE0]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.siriResponseLanguageVariant.setter()
{
  return MEMORY[0x1E0D6CAE8]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.uiScale.getter()
{
  return MEMORY[0x1E0D6CB10]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.uiScale.setter()
{
  return MEMORY[0x1E0D6CB18]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.location.modify()
{
  return MEMORY[0x1E0D6CB28]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.location.getter()
{
  return MEMORY[0x1E0D6CB30]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.location.setter()
{
  return MEMORY[0x1E0D6CB38]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.hsEnabled.getter()
{
  return MEMORY[0x1E0D6CB40]();
}

uint64_t Apple_Parsec_Search_PegasusQueryContext.init()()
{
  return MEMORY[0x1E0D6CB60]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_PegasusQueryContext()
{
  return MEMORY[0x1E0D6CB70]();
}

uint64_t Apple_Parsec_Search_SearchConversationContext.lrcThreads.getter()
{
  return MEMORY[0x1E0D6CB80]();
}

uint64_t Apple_Parsec_Search_SearchConversationContext.init()()
{
  return MEMORY[0x1E0D6CB90]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_SearchConversationContext()
{
  return MEMORY[0x1E0D6CB98]();
}

uint64_t type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback()
{
  return MEMORY[0x1E0D6CBD8]();
}

uint64_t Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.getter()
{
  return MEMORY[0x1E0D6CBF0]();
}

uint64_t Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.getter()
{
  return MEMORY[0x1E0D6CC00]();
}

uint64_t Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter()
{
  return MEMORY[0x1E0D6CC08]();
}

uint64_t type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload()
{
  return MEMORY[0x1E0D6CC30]();
}

uint64_t Apple_Parsec_Siri_Context_PegasusDisplayHint.displayValue.setter()
{
  return MEMORY[0x1E0D6CC60]();
}

uint64_t Apple_Parsec_Siri_Context_PegasusDisplayHint.idValue.setter()
{
  return MEMORY[0x1E0D6CC70]();
}

uint64_t Apple_Parsec_Siri_Context_PegasusSemanticValue.label.setter()
{
  return MEMORY[0x1E0D6CC90]();
}

uint64_t Apple_Parsec_Siri_Context_PegasusSemanticValue.value.setter()
{
  return MEMORY[0x1E0D6CC98]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_PegasusSemanticValue()
{
  return MEMORY[0x1E0D6CCA0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.modify()
{
  return MEMORY[0x1E0D6CCB0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.getter()
{
  return MEMORY[0x1E0D6CCB8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.asrInterpretations.setter()
{
  return MEMORY[0x1E0D6CCC0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.getter()
{
  return MEMORY[0x1E0D6CCC8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.setter()
{
  return MEMORY[0x1E0D6CCD0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery()
{
  return MEMORY[0x1E0D6CCF0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter()
{
  return MEMORY[0x1E0D6CD00]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter()
{
  return MEMORY[0x1E0D6CD08]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog()
{
  return MEMORY[0x1E0D6CD10]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter()
{
  return MEMORY[0x1E0D6CD28]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext()
{
  return MEMORY[0x1E0D6CD30]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType.rawValue.getter()
{
  return MEMORY[0x1E0D6CD40]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType()
{
  return MEMORY[0x1E0D6CD50]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.appContext.modify()
{
  return MEMORY[0x1E0D6CD60]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.appContext.setter()
{
  return MEMORY[0x1E0D6CD68]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.supportedIntents.setter()
{
  return MEMORY[0x1E0D6CD70]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory.rawValue.getter()
{
  return MEMORY[0x1E0D6CDB0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory()
{
  return MEMORY[0x1E0D6CDB8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.numSirikitVideoApps.setter()
{
  return MEMORY[0x1E0D6CDC8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.supportedIntentMediaCategories.setter()
{
  return MEMORY[0x1E0D6CDD8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.init()()
{
  return MEMORY[0x1E0D6CDE0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo()
{
  return MEMORY[0x1E0D6CDE8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter()
{
  return MEMORY[0x1E0D6CE20]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams()
{
  return MEMORY[0x1E0D6CE38]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter()
{
  return MEMORY[0x1E0D6CE48]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.phoneCall.getter()
{
  return MEMORY[0x1E0D6CE50]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder()
{
  return MEMORY[0x1E0D6CE58]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.multiUserContext.setter()
{
  return MEMORY[0x1E0D6CE68]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType()
{
  return MEMORY[0x1E0D6CE88]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.assistantID.setter()
{
  return MEMORY[0x1E0D6CE98]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.getter()
{
  return MEMORY[0x1E0D6CEA8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.setter()
{
  return MEMORY[0x1E0D6CEB0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isSaeRequest.setter()
{
  return MEMORY[0x1E0D6CEB8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify()
{
  return MEMORY[0x1E0D6CEC0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.getter()
{
  return MEMORY[0x1E0D6CEC8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.interactionID.setter()
{
  return MEMORY[0x1E0D6CED0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isNavigationMode.getter()
{
  return MEMORY[0x1E0D6CED8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isNavigationMode.setter()
{
  return MEMORY[0x1E0D6CEE0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPushOffRequest.setter()
{
  return MEMORY[0x1E0D6CEE8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPhoneCallActive.setter()
{
  return MEMORY[0x1E0D6CEF0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.resultCandidateID.setter()
{
  return MEMORY[0x1E0D6CEF8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.treatRandomAsFirst.setter()
{
  return MEMORY[0x1E0D6CF00]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.getter()
{
  return MEMORY[0x1E0D6CF08]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.setter()
{
  return MEMORY[0x1E0D6CF10]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.userGroundingNeeded.setter()
{
  return MEMORY[0x1E0D6CF18]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.getter()
{
  return MEMORY[0x1E0D6CF20]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.setter()
{
  return MEMORY[0x1E0D6CF28]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusContext.person.setter()
{
  return MEMORY[0x1E0D6CF30]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext()
{
  return MEMORY[0x1E0D6CF40]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.getter()
{
  return MEMORY[0x1E0D6CF48]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.setter()
{
  return MEMORY[0x1E0D6CF50]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify()
{
  return MEMORY[0x1E0D6CF60]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter()
{
  return MEMORY[0x1E0D6CF68]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.setter()
{
  return MEMORY[0x1E0D6CF70]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.modify()
{
  return MEMORY[0x1E0D6CF78]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.getter()
{
  return MEMORY[0x1E0D6CF80]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.asrContext.setter()
{
  return MEMORY[0x1E0D6CF88]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.getter()
{
  return MEMORY[0x1E0D6CF90]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter()
{
  return MEMORY[0x1E0D6CF98]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.modify()
{
  return MEMORY[0x1E0D6CFA8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.getter()
{
  return MEMORY[0x1E0D6CFB0]();
}

Swift::Void __swiftcall Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clearAsrContext()()
{
  MEMORY[0x1E0D6CFC0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.userDataShareOptIn.setter()
{
  return MEMORY[0x1E0D6CFD0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.conversationContextBytes.getter()
{
  return MEMORY[0x1E0D6CFE0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.conversationContextBytes.setter()
{
  return MEMORY[0x1E0D6CFE8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.searchConversationContext.setter()
{
  return MEMORY[0x1E0D6CFF0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify()
{
  return MEMORY[0x1E0D6CFF8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter()
{
  return MEMORY[0x1E0D6D000]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter()
{
  return MEMORY[0x1E0D6D010]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter()
{
  return MEMORY[0x1E0D6D018]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.init()()
{
  return MEMORY[0x1E0D6D020]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest()
{
  return MEMORY[0x1E0D6D028]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter()
{
  return MEMORY[0x1E0D6D038]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter()
{
  return MEMORY[0x1E0D6D040]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasResponseCacheControl.getter()
{
  return MEMORY[0x1E0D6D048]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter()
{
  return MEMORY[0x1E0D6D050]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.modify()
{
  return MEMORY[0x1E0D6D058]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter()
{
  return MEMORY[0x1E0D6D060]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter()
{
  return MEMORY[0x1E0D6D068]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience()
{
  return MEMORY[0x1E0D6D080]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter()
{
  return MEMORY[0x1E0D6D090]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter()
{
  return MEMORY[0x1E0D6D098]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter()
{
  return MEMORY[0x1E0D6D0A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter()
{
  return MEMORY[0x1E0D6D0A8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter()
{
  return MEMORY[0x1E0D6D0B0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter()
{
  return MEMORY[0x1E0D6D0B8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter()
{
  return MEMORY[0x1E0D6D0C0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.responseCacheControl.getter()
{
  return MEMORY[0x1E0D6D0C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter()
{
  return MEMORY[0x1E0D6D0D0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter()
{
  return MEMORY[0x1E0D6D0D8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction()
{
  return MEMORY[0x1E0D6D0E0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter()
{
  return MEMORY[0x1E0D6D0F0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter()
{
  return MEMORY[0x1E0D6D0F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.latencyInfo.getter()
{
  return MEMORY[0x1E0D6D100]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.isFallbackTriggered.getter()
{
  return MEMORY[0x1E0D6D108]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter()
{
  return MEMORY[0x1E0D6D118]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter()
{
  return MEMORY[0x1E0D6D120]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusSelfOpaquePayloads.getter()
{
  return MEMORY[0x1E0D6D128]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata()
{
  return MEMORY[0x1E0D6D130]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter()
{
  return MEMORY[0x1E0D6D138]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.setter()
{
  return MEMORY[0x1E0D6D140]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchStatus.getter()
{
  return MEMORY[0x1E0D6D148]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.serviceDebug.getter()
{
  return MEMORY[0x1E0D6D150]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter()
{
  return MEMORY[0x1E0D6D158]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter()
{
  return MEMORY[0x1E0D6D160]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.modify()
{
  return MEMORY[0x1E0D6D168]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter()
{
  return MEMORY[0x1E0D6D170]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.setter()
{
  return MEMORY[0x1E0D6D178]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent()
{
  return MEMORY[0x1E0D6D180]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter()
{
  return MEMORY[0x1E0D6D188]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.setter()
{
  return MEMORY[0x1E0D6D190]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter()
{
  return MEMORY[0x1E0D6D1A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasRewrittenUtteranceIdx.getter()
{
  return MEMORY[0x1E0D6D1A8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.searchConversationContext.getter()
{
  return MEMORY[0x1E0D6D1B0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.Error.message.getter()
{
  return MEMORY[0x1E0D6D1B8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.Error()
{
  return MEMORY[0x1E0D6D1C0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.error.getter()
{
  return MEMORY[0x1E0D6D1C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasError.getter()
{
  return MEMORY[0x1E0D6D1D0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.init()()
{
  return MEMORY[0x1E0D6D1D8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse()
{
  return MEMORY[0x1E0D6D1E0]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.strictPrompt.setter()
{
  return MEMORY[0x1E0D6D498]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.previousSiriExecutedDomain.setter()
{
  return MEMORY[0x1E0D6D4A0]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.previousSiriNlDomain.setter()
{
  return MEMORY[0x1E0D6D4A8]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.dictationPrompt.setter()
{
  return MEMORY[0x1E0D6D4B0]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.domainHints.setter()
{
  return MEMORY[0x1E0D6D4B8]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.ambiguityTarget.setter()
{
  return MEMORY[0x1E0D6D4C0]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.alertDomainHints.setter()
{
  return MEMORY[0x1E0D6D4C8]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.promptTargetHints.setter()
{
  return MEMORY[0x1E0D6D4D0]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.listenAfterSpeaking.setter()
{
  return MEMORY[0x1E0D6D4D8]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.objectDisambiguation.setter()
{
  return MEMORY[0x1E0D6D4E0]();
}

uint64_t Apple_Parsec_Siri_Context_PromptContext.backgroundDomainHints.setter()
{
  return MEMORY[0x1E0D6D4F0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_PromptContext()
{
  return MEMORY[0x1E0D6D4F8]();
}

uint64_t Apple_Parsec_Siri_Context_OnDeviceContext.musicRankingInfluence.setter()
{
  return MEMORY[0x1E0D6D500]();
}

uint64_t Apple_Parsec_Siri_Context_OnDeviceContext.entities.modify()
{
  return MEMORY[0x1E0D6D508]();
}

uint64_t Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter()
{
  return MEMORY[0x1E0D6D518]();
}

uint64_t Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.rawResponseSize.getter()
{
  return MEMORY[0x1E0D6D538]();
}

uint64_t Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.decompressedResponseSize.getter()
{
  return MEMORY[0x1E0D6D548]();
}

uint64_t type metadata accessor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback()
{
  return MEMORY[0x1E0D6D580]();
}

uint64_t Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.rawRequestSize.getter()
{
  return MEMORY[0x1E0D6D588]();
}

uint64_t Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.compressedRequestSize.getter()
{
  return MEMORY[0x1E0D6D5A0]();
}

uint64_t Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.bodyData.getter()
{
  return MEMORY[0x1E0D6D5D0]();
}

uint64_t type metadata accessor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback()
{
  return MEMORY[0x1E0D6D5F8]();
}

uint64_t Apple_Parsec_Siri_Context_ClientConversationContextInfo.hasClientDisplayHints.getter()
{
  return MEMORY[0x1E0D6D608]();
}

uint64_t Apple_Parsec_Siri_Context_ClientConversationContextInfo.promptContext.getter()
{
  return MEMORY[0x1E0D6D610]();
}

uint64_t Apple_Parsec_Siri_Context_ClientConversationContextInfo.promptContext.setter()
{
  return MEMORY[0x1E0D6D618]();
}

uint64_t Apple_Parsec_Siri_Context_ClientConversationContextInfo.onDeviceContext.modify()
{
  return MEMORY[0x1E0D6D620]();
}

uint64_t Apple_Parsec_Siri_Context_ClientConversationContextInfo.hasPromptContext.getter()
{
  return MEMORY[0x1E0D6D628]();
}

uint64_t Apple_Parsec_Siri_Context_ClientConversationContextInfo.clientDisplayHints.getter()
{
  return MEMORY[0x1E0D6D630]();
}

uint64_t Apple_Parsec_Siri_Context_ClientConversationContextInfo.clientDisplayHints.setter()
{
  return MEMORY[0x1E0D6D638]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ClientConversationContextInfo()
{
  return MEMORY[0x1E0D6D640]();
}

uint64_t Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementResponse.init()()
{
  return MEMORY[0x1E0D6D6A8]();
}

uint64_t type metadata accessor for Typespb_Domain()
{
  return MEMORY[0x1E0D6D6F8]();
}

uint64_t type metadata accessor for Searchfoundation_Card()
{
  return MEMORY[0x1E0D6D7A8]();
}

uint64_t Useragentpb_UserAgent.buildOsVersion.setter()
{
  return MEMORY[0x1E0D6D7E8]();
}

uint64_t Useragentpb_UserAgent.productVersion.setter()
{
  return MEMORY[0x1E0D6D7F0]();
}

uint64_t type metadata accessor for Useragentpb_UserAgent()
{
  return MEMORY[0x1E0D6D800]();
}

uint64_t Debuglevelspb_AnyArray.anyMessages.getter()
{
  return MEMORY[0x1E0D6D808]();
}

uint64_t type metadata accessor for Debuglevelspb_AnyArray()
{
  return MEMORY[0x1E0D6D810]();
}

uint64_t Useragentpb_DeviceMetadata.regulatoryDeviceModel.setter()
{
  return MEMORY[0x1E0D6D8B8]();
}

uint64_t type metadata accessor for Useragentpb_DeviceMetadata()
{
  return MEMORY[0x1E0D6D8C8]();
}

uint64_t Useragentpb_CompanionDevice.deviceMetadata.setter()
{
  return MEMORY[0x1E0D6D910]();
}

uint64_t Useragentpb_CompanionDevice.companionUserAgent.setter()
{
  return MEMORY[0x1E0D6D918]();
}

uint64_t type metadata accessor for Useragentpb_CompanionDevice()
{
  return MEMORY[0x1E0D6D928]();
}

uint64_t Latencyinfopb_KfedLatencyInfo.banyanMs.getter()
{
  return MEMORY[0x1E0D6DA58]();
}

uint64_t Latencyinfopb_KfedLatencyInfo.overallMs.getter()
{
  return MEMORY[0x1E0D6DA60]();
}

uint64_t type metadata accessor for Latencyinfopb_KfedLatencyInfo()
{
  return MEMORY[0x1E0D6DA68]();
}

uint64_t Apple_Parsec_Search_V2_Location.preciseStatus.getter()
{
  return MEMORY[0x1E0D6DBB0]();
}

uint64_t Apple_Parsec_Search_V2_Location.preciseStatus.setter()
{
  return MEMORY[0x1E0D6DBB8]();
}

uint64_t Apple_Parsec_Search_V2_Location.age.getter()
{
  return MEMORY[0x1E0D6DBD0]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_V2_Location.Source()
{
  return MEMORY[0x1E0D6DC28]();
}

uint64_t Apple_Parsec_Search_V2_Location.source.getter()
{
  return MEMORY[0x1E0D6DC30]();
}

uint64_t Apple_Parsec_Search_V2_Location.source.setter()
{
  return MEMORY[0x1E0D6DC38]();
}

uint64_t Apple_Parsec_Search_V2_Location.latitude.getter()
{
  return MEMORY[0x1E0D6DC48]();
}

uint64_t Apple_Parsec_Search_V2_Location.latitude.setter()
{
  return MEMORY[0x1E0D6DC50]();
}

uint64_t Apple_Parsec_Search_V2_Location.longitude.getter()
{
  return MEMORY[0x1E0D6DC58]();
}

uint64_t Apple_Parsec_Search_V2_Location.longitude.setter()
{
  return MEMORY[0x1E0D6DC60]();
}

uint64_t Apple_Parsec_Search_V2_Location.init()()
{
  return MEMORY[0x1E0D6DC68]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_V2_Location()
{
  return MEMORY[0x1E0D6DC70]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.familyName.setter()
{
  return MEMORY[0x1E0D6DD10]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.middleName.setter()
{
  return MEMORY[0x1E0D6DD18]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.setter()
{
  return MEMORY[0x1E0D6DD20]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.fullName.setter()
{
  return MEMORY[0x1E0D6DD30]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.nickname.getter()
{
  return MEMORY[0x1E0D6DD38]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.nickname.setter()
{
  return MEMORY[0x1E0D6DD40]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.addresses.setter()
{
  return MEMORY[0x1E0D6DD48]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.givenName.getter()
{
  return MEMORY[0x1E0D6DD50]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Person.givenName.setter()
{
  return MEMORY[0x1E0D6DD58]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_Person()
{
  return MEMORY[0x1E0D6DD60]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.hasSiriIntegration_p.setter()
{
  return MEMORY[0x1E0D6DD78]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.vocabConcepts.setter()
{
  return MEMORY[0x1E0D6DD80]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.supportedIntents.setter()
{
  return MEMORY[0x1E0D6DD88]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.appIntentsProtocolMetadata.setter()
{
  return MEMORY[0x1E0D6DD98]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.appName.setter()
{
  return MEMORY[0x1E0D6DDA0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.getter()
{
  return MEMORY[0x1E0D6DDA8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.setter()
{
  return MEMORY[0x1E0D6DDB0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppInfo.init()()
{
  return MEMORY[0x1E0D6DDB8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo()
{
  return MEMORY[0x1E0D6DDC0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.identifier.getter()
{
  return MEMORY[0x1E0D6DFE8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.identifier.setter()
{
  return MEMORY[0x1E0D6DFF0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.requiresSubscription.getter()
{
  return MEMORY[0x1E0D6DFF8]();
}

uint64_t static Apple_Parsec_Siri_V2alpha_AudioItem.== infix(_:_:)()
{
  return MEMORY[0x1E0D6E008]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.sharedUserIDFromPlayableMusicAccount.setter()
{
  return MEMORY[0x1E0D6E010]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.type.getter()
{
  return MEMORY[0x1E0D6E018]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.type.setter()
{
  return MEMORY[0x1E0D6E020]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.title.getter()
{
  return MEMORY[0x1E0D6E028]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.title.setter()
{
  return MEMORY[0x1E0D6E030]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.artist.getter()
{
  return MEMORY[0x1E0D6E038]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.artist.setter()
{
  return MEMORY[0x1E0D6E040]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.assetInfo.setter()
{
  return MEMORY[0x1E0D6E048]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItem.init()()
{
  return MEMORY[0x1E0D6E050]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem()
{
  return MEMORY[0x1E0D6E058]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioNoun.rawValue.getter()
{
  return MEMORY[0x1E0D6E078]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioNoun()
{
  return MEMORY[0x1E0D6E080]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort()
{
  return MEMORY[0x1E0D6E0F8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioVerb()
{
  return MEMORY[0x1E0D6E118]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RouteInfo.originalWaypointRoute.setter()
{
  return MEMORY[0x1E0D6E130]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RouteInfo.sessionState.setter()
{
  return MEMORY[0x1E0D6E138]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RouteInfo.evChargingMetadata.setter()
{
  return MEMORY[0x1E0D6E140]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RouteInfo.routeID.setter()
{
  return MEMORY[0x1E0D6E150]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RouteInfo.etaFilter.setter()
{
  return MEMORY[0x1E0D6E158]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RouteInfo()
{
  return MEMORY[0x1E0D6E160]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_V2_PreciseStatus()
{
  return MEMORY[0x1E0D6E228]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode()
{
  return MEMORY[0x1E0D6E250]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ASRContext.modelVersion.setter()
{
  return MEMORY[0x1E0D6E268]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ASRContext.acousticModelVersion.setter()
{
  return MEMORY[0x1E0D6E270]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ASRContext()
{
  return MEMORY[0x1E0D6E280]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioState()
{
  return MEMORY[0x1E0D6E298]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade()
{
  return MEMORY[0x1E0D6E420]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.deviceName.setter()
{
  return MEMORY[0x1E0D6E428]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isEyesFree.getter()
{
  return MEMORY[0x1E0D6E430]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isEyesFree.setter()
{
  return MEMORY[0x1E0D6E438]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.inputOrigin.setter()
{
  return MEMORY[0x1E0D6E440]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isMultiUser.getter()
{
  return MEMORY[0x1E0D6E448]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isMultiUser.setter()
{
  return MEMORY[0x1E0D6E450]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.companionName.getter()
{
  return MEMORY[0x1E0D6E458]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.companionName.setter()
{
  return MEMORY[0x1E0D6E460]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderMale.setter()
{
  return MEMORY[0x1E0D6E468]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderFemale.setter()
{
  return MEMORY[0x1E0D6E470]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.getter()
{
  return MEMORY[0x1E0D6E478]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.setter()
{
  return MEMORY[0x1E0D6E480]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderUnknown.setter()
{
  return MEMORY[0x1E0D6E488]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x1E0D6E490]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isTextToSpeechEnabled.setter()
{
  return MEMORY[0x1E0D6E498]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceTriggerEnabled.getter()
{
  return MEMORY[0x1E0D6E4A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceTriggerEnabled.setter()
{
  return MEMORY[0x1E0D6E4A8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isCarDnd.getter()
{
  return MEMORY[0x1E0D6E4B0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isCarDnd.setter()
{
  return MEMORY[0x1E0D6E4B8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.getter()
{
  return MEMORY[0x1E0D6E4C0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.setter()
{
  return MEMORY[0x1E0D6E4C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DeviceState.init()()
{
  return MEMORY[0x1E0D6E4D0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceState()
{
  return MEMORY[0x1E0D6E4D8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestType()
{
  return MEMORY[0x1E0D6E4F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Restriction.reason.setter()
{
  return MEMORY[0x1E0D6E508]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Restriction.category.getter()
{
  return MEMORY[0x1E0D6E510]();
}

uint64_t Apple_Parsec_Siri_V2alpha_Restriction.category.setter()
{
  return MEMORY[0x1E0D6E518]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_Restriction()
{
  return MEMORY[0x1E0D6E520]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType()
{
  return MEMORY[0x1E0D6E558]();
}

uint64_t Apple_Parsec_Search_V2_MarketplaceInfo.isMarketplaceEligible.getter()
{
  return MEMORY[0x1E0D6E648]();
}

uint64_t Apple_Parsec_Search_V2_MarketplaceInfo.isMarketplaceEligible.setter()
{
  return MEMORY[0x1E0D6E650]();
}

uint64_t Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace.id.setter()
{
  return MEMORY[0x1E0D6E660]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace()
{
  return MEMORY[0x1E0D6E668]();
}

uint64_t Apple_Parsec_Search_V2_MarketplaceInfo.supportedMarketplaces.setter()
{
  return MEMORY[0x1E0D6E680]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo()
{
  return MEMORY[0x1E0D6E688]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntityType()
{
  return MEMORY[0x1E0D6E6B0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity.ClientEntitySource()
{
  return MEMORY[0x1E0D6E6D0]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.alignments.getter()
{
  return MEMORY[0x1E0D6E6D8]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.alignments.setter()
{
  return MEMORY[0x1E0D6E6E0]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.hasAddress_p.setter()
{
  return MEMORY[0x1E0D6E6E8]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.ontologyLabel.getter()
{
  return MEMORY[0x1E0D6E6F0]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.ontologyLabel.setter()
{
  return MEMORY[0x1E0D6E6F8]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.hasPhoneNumber_p.setter()
{
  return MEMORY[0x1E0D6E700]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.type.getter()
{
  return MEMORY[0x1E0D6E710]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.type.setter()
{
  return MEMORY[0x1E0D6E718]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.score.getter()
{
  return MEMORY[0x1E0D6E720]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.score.setter()
{
  return MEMORY[0x1E0D6E728]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.source.getter()
{
  return MEMORY[0x1E0D6E730]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.source.setter()
{
  return MEMORY[0x1E0D6E738]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.usoGraph.getter()
{
  return MEMORY[0x1E0D6E740]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter()
{
  return MEMORY[0x1E0D6E748]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntity.init()()
{
  return MEMORY[0x1E0D6E750]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity()
{
  return MEMORY[0x1E0D6E758]();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter()
{
  return MEMORY[0x1E0D6E768]();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.mapsEncryptedMuid.getter()
{
  return MEMORY[0x1E0D6E778]();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.name.getter()
{
  return MEMORY[0x1E0D6E780]();
}

uint64_t Apple_Parsec_Siri_Context_ResultEntity.domain.getter()
{
  return MEMORY[0x1E0D6E788]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity()
{
  return MEMORY[0x1E0D6E790]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.isUserHistoryModifiable.setter()
{
  return MEMORY[0x1E0D6E7A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.getter()
{
  return MEMORY[0x1E0D6E7A8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.setter()
{
  return MEMORY[0x1E0D6E7B0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.isDefaultUser.setter()
{
  return MEMORY[0x1E0D6E7B8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.itfeCookie.setter()
{
  return MEMORY[0x1E0D6E7C0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.xpAbCookie.setter()
{
  return MEMORY[0x1E0D6E7C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.eligibleOffers.setter()
{
  return MEMORY[0x1E0D6E7D0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.tokenErrorCode.setter()
{
  return MEMORY[0x1E0D6E7D8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.isSubscribedToGlide.setter()
{
  return MEMORY[0x1E0D6E7E0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.getter()
{
  return MEMORY[0x1E0D6E7F0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.setter()
{
  return MEMORY[0x1E0D6E7F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.getter()
{
  return MEMORY[0x1E0D6E800]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.setter()
{
  return MEMORY[0x1E0D6E808]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.getter()
{
  return MEMORY[0x1E0D6E810]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.setter()
{
  return MEMORY[0x1E0D6E818]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AmpUserState.init()()
{
  return MEMORY[0x1E0D6E820]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState()
{
  return MEMORY[0x1E0D6E828]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter()
{
  return MEMORY[0x1E0D6E840]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter()
{
  return MEMORY[0x1E0D6E848]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSlice.values.getter()
{
  return MEMORY[0x1E0D6E850]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter()
{
  return MEMORY[0x1E0D6E858]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSlice.init()()
{
  return MEMORY[0x1E0D6E860]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice()
{
  return MEMORY[0x1E0D6E868]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioItemType.rawValue.getter()
{
  return MEMORY[0x1E0D6E9B0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType()
{
  return MEMORY[0x1E0D6E9C0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier()
{
  return MEMORY[0x1E0D6E9F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientSignals.disableClientLibrarySearch.getter()
{
  return MEMORY[0x1E0D6EA08]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter()
{
  return MEMORY[0x1E0D6EA10]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.setter()
{
  return MEMORY[0x1E0D6EA18]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter()
{
  return MEMORY[0x1E0D6EA20]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientSignals.musicRankingInfluenceImpactInfo.getter()
{
  return MEMORY[0x1E0D6EA28]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientSignals.hasMusicRankingInfluenceImpactInfo.getter()
{
  return MEMORY[0x1E0D6EA30]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientSignals.init()()
{
  return MEMORY[0x1E0D6EA38]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals()
{
  return MEMORY[0x1E0D6EA40]();
}

uint64_t Apple_Parsec_Search_LRConversationThread.longPersistenceTtl.getter()
{
  return MEMORY[0x1E0D6EB88]();
}

uint64_t Apple_Parsec_Search_LRConversationThread.id.getter()
{
  return MEMORY[0x1E0D6EB90]();
}

uint64_t type metadata accessor for Apple_Parsec_Search_LRConversationThread()
{
  return MEMORY[0x1E0D6EB98]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioAttribute()
{
  return MEMORY[0x1E0D6EC08]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioRadioType()
{
  return MEMORY[0x1E0D6EC48]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioReference()
{
  return MEMORY[0x1E0D6EC80]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.setter()
{
  return MEMORY[0x1E0D6EC88]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.addressLabel.setter()
{
  return MEMORY[0x1E0D6EC90]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.city.setter()
{
  return MEMORY[0x1E0D6ECA0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.state.setter()
{
  return MEMORY[0x1E0D6ECA8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.street.setter()
{
  return MEMORY[0x1E0D6ECB0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ContactAddress.zipCode.setter()
{
  return MEMORY[0x1E0D6ECB8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress()
{
  return MEMORY[0x1E0D6ECC0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience()
{
  return MEMORY[0x1E0D6ECD0]();
}

uint64_t Apple_Parsec_Siri_Context_ResponseOptions.options.setter()
{
  return MEMORY[0x1E0D6EDD0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ResponseOptions()
{
  return MEMORY[0x1E0D6EDD8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component()
{
  return MEMORY[0x1E0D6EDE8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter()
{
  return MEMORY[0x1E0D6EDF8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientComponent.component.getter()
{
  return MEMORY[0x1E0D6EE00]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent()
{
  return MEMORY[0x1E0D6EE08]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ParkingLocation.notes.setter()
{
  return MEMORY[0x1E0D6EE20]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ParkingLocation.location.setter()
{
  return MEMORY[0x1E0D6EE28]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation()
{
  return MEMORY[0x1E0D6EE30]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PlaybackSignals.init()()
{
  return MEMORY[0x1E0D6EE40]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals()
{
  return MEMORY[0x1E0D6EE48]();
}

uint64_t Apple_Parsec_Feedback_V2_NetworkTimingData.requestEnd.getter()
{
  return MEMORY[0x1E0D6EE78]();
}

uint64_t Apple_Parsec_Feedback_V2_NetworkTimingData.responseEnd.getter()
{
  return MEMORY[0x1E0D6EE80]();
}

uint64_t Apple_Parsec_Feedback_V2_NetworkTimingData.requestStart.getter()
{
  return MEMORY[0x1E0D6EE88]();
}

uint64_t Apple_Parsec_Feedback_V2_NetworkTimingData.responseStart.getter()
{
  return MEMORY[0x1E0D6EE90]();
}

uint64_t type metadata accessor for Apple_Parsec_Feedback_V2_NetworkTimingData()
{
  return MEMORY[0x1E0D6EEA8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MultiUserContext.sharedUserID.setter()
{
  return MEMORY[0x1E0D6EF38]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext.UserIdentityClassification()
{
  return MEMORY[0x1E0D6EF70]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MultiUserContext.userIdentificationClassification.setter()
{
  return MEMORY[0x1E0D6EF78]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MultiUserContext.init()()
{
  return MEMORY[0x1E0D6EF80]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext()
{
  return MEMORY[0x1E0D6EF88]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion()
{
  return MEMORY[0x1E0D6EFA0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SingleExperience.components.getter()
{
  return MEMORY[0x1E0D6EFB0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter()
{
  return MEMORY[0x1E0D6EFB8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter()
{
  return MEMORY[0x1E0D6EFC0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience()
{
  return MEMORY[0x1E0D6EFC8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ASRInterpretation.preItnToken.setter()
{
  return MEMORY[0x1E0D6F0E8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ASRInterpretation.postItnToken.setter()
{
  return MEMORY[0x1E0D6F0F0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ASRInterpretation()
{
  return MEMORY[0x1E0D6F100]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioEntitySource()
{
  return MEMORY[0x1E0D6F120]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.getter()
{
  return MEMORY[0x1E0D6F128]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.setter()
{
  return MEMORY[0x1E0D6F130]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.itemType.getter()
{
  return MEMORY[0x1E0D6F138]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.itemType.setter()
{
  return MEMORY[0x1E0D6F140]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.queryStr.getter()
{
  return MEMORY[0x1E0D6F148]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.queryStr.setter()
{
  return MEMORY[0x1E0D6F150]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.init()()
{
  return MEMORY[0x1E0D6F158]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm()
{
  return MEMORY[0x1E0D6F160]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceLabel.rawValue.getter()
{
  return MEMORY[0x1E0D6F1D0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel()
{
  return MEMORY[0x1E0D6F1D8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter()
{
  return MEMORY[0x1E0D6F1F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.label.getter()
{
  return MEMORY[0x1E0D6F208]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.label.setter()
{
  return MEMORY[0x1E0D6F210]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.getter()
{
  return MEMORY[0x1E0D6F218]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter()
{
  return MEMORY[0x1E0D6F220]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.getter()
{
  return MEMORY[0x1E0D6F228]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter()
{
  return MEMORY[0x1E0D6F230]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()()
{
  return MEMORY[0x1E0D6F238]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue()
{
  return MEMORY[0x1E0D6F240]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionReason()
{
  return MEMORY[0x1E0D6F278]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType()
{
  return MEMORY[0x1E0D6F298]();
}

uint64_t Apple_Parsec_Siri_V2alpha_UserPromptSignals.promptTypes.getter()
{
  return MEMORY[0x1E0D6F2A0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals()
{
  return MEMORY[0x1E0D6F2A8]();
}

uint64_t Apple_Parsec_Siri_Context_ClientDisplayHints.displayHints.setter()
{
  return MEMORY[0x1E0D6F360]();
}

uint64_t Apple_Parsec_Siri_Context_ClientDisplayHints.displayHintsDomain.setter()
{
  return MEMORY[0x1E0D6F368]();
}

uint64_t Apple_Parsec_Siri_Context_ClientDisplayHints.responseOptions.setter()
{
  return MEMORY[0x1E0D6F370]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ClientDisplayHints()
{
  return MEMORY[0x1E0D6F380]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.attributes.setter()
{
  return MEMORY[0x1E0D6F388]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.musicTitle.getter()
{
  return MEMORY[0x1E0D6F390]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.podcastTitle.getter()
{
  return MEMORY[0x1E0D6F398]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.getter()
{
  return MEMORY[0x1E0D6F3A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.setter()
{
  return MEMORY[0x1E0D6F3A8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audioRadioType.getter()
{
  return MEMORY[0x1E0D6F3B0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audioRadioType.setter()
{
  return MEMORY[0x1E0D6F3B8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookTitle.getter()
{
  return MEMORY[0x1E0D6F3C0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookTitle.setter()
{
  return MEMORY[0x1E0D6F3C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookAuthor.getter()
{
  return MEMORY[0x1E0D6F3D0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookAuthor.setter()
{
  return MEMORY[0x1E0D6F3D8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationName.getter()
{
  return MEMORY[0x1E0D6F3E0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.requestedMediaType.getter()
{
  return MEMORY[0x1E0D6F3E8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter()
{
  return MEMORY[0x1E0D6F3F0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.mood.getter()
{
  return MEMORY[0x1E0D6F3F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.noun.getter()
{
  return MEMORY[0x1E0D6F400]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.sort.getter()
{
  return MEMORY[0x1E0D6F408]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.verb.getter()
{
  return MEMORY[0x1E0D6F410]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.album.getter()
{
  return MEMORY[0x1E0D6F418]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.album.setter()
{
  return MEMORY[0x1E0D6F420]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.genre.getter()
{
  return MEMORY[0x1E0D6F428]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.genre.setter()
{
  return MEMORY[0x1E0D6F430]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.artist.getter()
{
  return MEMORY[0x1E0D6F438]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.artist.setter()
{
  return MEMORY[0x1E0D6F440]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.decade.getter()
{
  return MEMORY[0x1E0D6F448]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.decade.setter()
{
  return MEMORY[0x1E0D6F450]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.entity.getter()
{
  return MEMORY[0x1E0D6F458]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.entity.setter()
{
  return MEMORY[0x1E0D6F460]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.getter()
{
  return MEMORY[0x1E0D6F468]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.setter()
{
  return MEMORY[0x1E0D6F470]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.activity.getter()
{
  return MEMORY[0x1E0D6F478]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.getter()
{
  return MEMORY[0x1E0D6F480]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.setter()
{
  return MEMORY[0x1E0D6F488]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.reference.getter()
{
  return MEMORY[0x1E0D6F490]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init()()
{
  return MEMORY[0x1E0D6F498]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding()
{
  return MEMORY[0x1E0D6F4A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_CatDialogComponent.catID.getter()
{
  return MEMORY[0x1E0D6F4B0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent()
{
  return MEMORY[0x1E0D6F4B8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent()
{
  return MEMORY[0x1E0D6F4C0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType()
{
  return MEMORY[0x1E0D6F5A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewrittenUtterance.setter()
{
  return MEMORY[0x1E0D6F5C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewriteType.setter()
{
  return MEMORY[0x1E0D6F5D0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RewrittenUtterance.init()()
{
  return MEMORY[0x1E0D6F5D8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance()
{
  return MEMORY[0x1E0D6F5E0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter()
{
  return MEMORY[0x1E0D6F5F0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams()
{
  return MEMORY[0x1E0D6F5F8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent()
{
  return MEMORY[0x1E0D6F6B8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.nowPlayingQueueCount.setter()
{
  return MEMORY[0x1E0D6F6C0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.nowPlayingQueueIndex.setter()
{
  return MEMORY[0x1E0D6F6C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.hasAudioQueueStateItem.getter()
{
  return MEMORY[0x1E0D6F6D0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.audioQueueStateItem.setter()
{
  return MEMORY[0x1E0D6F6D8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.applicationIdentifier.setter()
{
  return MEMORY[0x1E0D6F6E8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.currentListeningToContainer.setter()
{
  return MEMORY[0x1E0D6F6F0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.state.getter()
{
  return MEMORY[0x1E0D6F6F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.state.setter()
{
  return MEMORY[0x1E0D6F700]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.source.setter()
{
  return MEMORY[0x1E0D6F708]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.init()()
{
  return MEMORY[0x1E0D6F710]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo()
{
  return MEMORY[0x1E0D6F718]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.audioQueueStateItemType.setter()
{
  return MEMORY[0x1E0D6F728]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.identifier.setter()
{
  return MEMORY[0x1E0D6F730]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.album.setter()
{
  return MEMORY[0x1E0D6F738]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.title.setter()
{
  return MEMORY[0x1E0D6F740]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.artist.setter()
{
  return MEMORY[0x1E0D6F748]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.init()()
{
  return MEMORY[0x1E0D6F750]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem()
{
  return MEMORY[0x1E0D6F758]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter()
{
  return MEMORY[0x1E0D6F770]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component()
{
  return MEMORY[0x1E0D6F780]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter()
{
  return MEMORY[0x1E0D6F798]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.catDialog.getter()
{
  return MEMORY[0x1E0D6F7A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter()
{
  return MEMORY[0x1E0D6F7A8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent()
{
  return MEMORY[0x1E0D6F7B0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.acousticCost.setter()
{
  return MEMORY[0x1E0D6F7C0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.phoneSequence.setter()
{
  return MEMORY[0x1E0D6F7C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.confidenceScore.setter()
{
  return MEMORY[0x1E0D6F7D0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.ipaPhoneSequence.setter()
{
  return MEMORY[0x1E0D6F7D8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.silenceStartTime.setter()
{
  return MEMORY[0x1E0D6F7E0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceAddedAfter.setter()
{
  return MEMORY[0x1E0D6F7E8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceRemovedAfter.setter()
{
  return MEMORY[0x1E0D6F7F0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.isSpaceRemovedBefore.setter()
{
  return MEMORY[0x1E0D6F7F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.text.setter()
{
  return MEMORY[0x1E0D6F808]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.endTime.setter()
{
  return MEMORY[0x1E0D6F810]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.graphCost.setter()
{
  return MEMORY[0x1E0D6F818]();
}

uint64_t Apple_Parsec_Siri_V2alpha_InterpretationToken.startTime.setter()
{
  return MEMORY[0x1E0D6F820]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_InterpretationToken()
{
  return MEMORY[0x1E0D6F828]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionCategory()
{
  return MEMORY[0x1E0D6F860]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter()
{
  return MEMORY[0x1E0D6F870]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter()
{
  return MEMORY[0x1E0D6F878]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding()
{
  return MEMORY[0x1E0D6F880]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppVocabularyConcept.identifier.setter()
{
  return MEMORY[0x1E0D6F8E8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppVocabularyConcept.vocabPhrase.setter()
{
  return MEMORY[0x1E0D6F8F0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppVocabularyConcept.userIdentificationNeeded.setter()
{
  return MEMORY[0x1E0D6F8F8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppVocabularyConcept.init()()
{
  return MEMORY[0x1E0D6F900]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppVocabularyConcept()
{
  return MEMORY[0x1E0D6F908]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.clientSignals.getter()
{
  return MEMORY[0x1E0D6F918]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.understanding.setter()
{
  return MEMORY[0x1E0D6F928]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioClientComponent.init()()
{
  return MEMORY[0x1E0D6F930]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent()
{
  return MEMORY[0x1E0D6F938]();
}

uint64_t Apple_Parsec_Siri_V2alpha_POMMESRequestContext.personalDomainFallback.getter()
{
  return MEMORY[0x1E0D6F948]();
}

uint64_t Apple_Parsec_Siri_V2alpha_POMMESRequestContext.personalDomainFallback.setter()
{
  return MEMORY[0x1E0D6F950]();
}

uint64_t Apple_Parsec_Siri_V2alpha_POMMESRequestContext.requestID.getter()
{
  return MEMORY[0x1E0D6F958]();
}

uint64_t Apple_Parsec_Siri_V2alpha_POMMESRequestContext.requestID.setter()
{
  return MEMORY[0x1E0D6F960]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_POMMESRequestContext()
{
  return MEMORY[0x1E0D6F968]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ResponseCacheControl.canCacheDomainResponse.getter()
{
  return MEMORY[0x1E0D6F970]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ResponseCacheControl.ttl.getter()
{
  return MEMORY[0x1E0D6F978]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseCacheControl()
{
  return MEMORY[0x1E0D6F980]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent()
{
  return MEMORY[0x1E0D6F988]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntityAlignment.endTokenIndex.setter()
{
  return MEMORY[0x1E0D6F9B0]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntityAlignment.startTokenIndex.setter()
{
  return MEMORY[0x1E0D6F9B8]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntityAlignment.asrHypothesisIndex.setter()
{
  return MEMORY[0x1E0D6F9C0]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntityAlignment.utteranceSubstring.getter()
{
  return MEMORY[0x1E0D6F9C8]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntityAlignment.utteranceSubstring.setter()
{
  return MEMORY[0x1E0D6F9D0]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntityAlignment.score.setter()
{
  return MEMORY[0x1E0D6F9E0]();
}

uint64_t Apple_Parsec_Siri_Context_ClientEntityAlignment.init()()
{
  return MEMORY[0x1E0D6F9E8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_ClientEntityAlignment()
{
  return MEMORY[0x1E0D6F9F0]();
}

uint64_t Apple_Parsec_Siri_Context_MusicRankingInfluence.rawValue.getter()
{
  return MEMORY[0x1E0D6FA18]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_Context_MusicRankingInfluence()
{
  return MEMORY[0x1E0D6FA20]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus()
{
  return MEMORY[0x1E0D6FA38]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DomainClientComponent.audioClientComponent.getter()
{
  return MEMORY[0x1E0D6FA48]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent()
{
  return MEMORY[0x1E0D6FA78]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter()
{
  return MEMORY[0x1E0D6FA88]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter()
{
  return MEMORY[0x1E0D6FA90]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent()
{
  return MEMORY[0x1E0D6FA98]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.latitude.setter()
{
  return MEMORY[0x1E0D6FAC0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LocationBuilderParams.longitude.setter()
{
  return MEMORY[0x1E0D6FAC8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams()
{
  return MEMORY[0x1E0D6FAD0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientDrivenExperience.components.getter()
{
  return MEMORY[0x1E0D6FC20]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience()
{
  return MEMORY[0x1E0D6FC28]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTextMatchMinScore.getter()
{
  return MEMORY[0x1E0D6FC30]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultTypedScoreMultipliers.getter()
{
  return MEMORY[0x1E0D6FC38]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultUniversalScoreMultiplier.getter()
{
  return MEMORY[0x1E0D6FC40]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientRankingOverrides()
{
  return MEMORY[0x1E0D6FC48]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter()
{
  return MEMORY[0x1E0D6FC50]();
}

uint64_t Apple_Parsec_Siri_V2alpha_DelayedActionComponent.preserveResultSpaceIfPossible.getter()
{
  return MEMORY[0x1E0D6FC58]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent()
{
  return MEMORY[0x1E0D6FC60]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.phoneNumber.getter()
{
  return MEMORY[0x1E0D6FC80]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.getter()
{
  return MEMORY[0x1E0D6FC90]();
}

uint64_t Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams.name.setter()
{
  return MEMORY[0x1E0D6FC98]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams()
{
  return MEMORY[0x1E0D6FCA0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel()
{
  return MEMORY[0x1E0D6FCE0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter()
{
  return MEMORY[0x1E0D6FCF0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter()
{
  return MEMORY[0x1E0D6FCF8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter()
{
  return MEMORY[0x1E0D6FD00]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.components.getter()
{
  return MEMORY[0x1E0D6FD08]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.alternateExperiences.getter()
{
  return MEMORY[0x1E0D6FD10]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.preserveResultSpaceIfPossible.getter()
{
  return MEMORY[0x1E0D6FD18]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience()
{
  return MEMORY[0x1E0D6FD20]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType()
{
  return MEMORY[0x1E0D6FE00]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter()
{
  return MEMORY[0x1E0D6FE10]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.print.getter()
{
  return MEMORY[0x1E0D6FE18]();
}

uint64_t Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.speak.getter()
{
  return MEMORY[0x1E0D6FE20]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent()
{
  return MEMORY[0x1E0D6FE28]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams.bundleID.getter()
{
  return MEMORY[0x1E0D6FF00]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams()
{
  return MEMORY[0x1E0D6FF08]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest.requests.getter()
{
  return MEMORY[0x1E0D6FF10]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest()
{
  return MEMORY[0x1E0D6FF18]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.OneOf_Metadata()
{
  return MEMORY[0x1E0D6FF98]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.StringSearchScope()
{
  return MEMORY[0x1E0D6FFD0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.searchScopes.setter()
{
  return MEMORY[0x1E0D6FFE0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.init()()
{
  return MEMORY[0x1E0D6FFE8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata()
{
  return MEMORY[0x1E0D6FFF0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.VideoCategory()
{
  return MEMORY[0x1E0D70018]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.supportedCategories.setter()
{
  return MEMORY[0x1E0D70028]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.init()()
{
  return MEMORY[0x1E0D70030]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata()
{
  return MEMORY[0x1E0D70038]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.metadata.setter()
{
  return MEMORY[0x1E0D70048]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata()
{
  return MEMORY[0x1E0D70050]();
}

uint64_t type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact()
{
  return MEMORY[0x1E0D70410]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams()
{
  return MEMORY[0x1E0D70478]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent()
{
  return MEMORY[0x1E0D70488]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus()
{
  return MEMORY[0x1E0D704C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest.sliceLabel.getter()
{
  return MEMORY[0x1E0D704D8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest.reference.getter()
{
  return MEMORY[0x1E0D704E0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest()
{
  return MEMORY[0x1E0D704E8]();
}

uint64_t Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.suggestionImpactInfo.getter()
{
  return MEMORY[0x1E0D704F8]();
}

uint64_t Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo.clientMusicSuggestionID.getter()
{
  return MEMORY[0x1E0D70500]();
}

uint64_t Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo.impact.getter()
{
  return MEMORY[0x1E0D70508]();
}

uint64_t type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo()
{
  return MEMORY[0x1E0D70510]();
}

uint64_t type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo()
{
  return MEMORY[0x1E0D70520]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.countryCode.setter()
{
  return MEMORY[0x1E0D70548]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.tvRestriction.getter()
{
  return MEMORY[0x1E0D70550]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.tvRestriction.setter()
{
  return MEMORY[0x1E0D70558]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.movieRestriction.getter()
{
  return MEMORY[0x1E0D70560]();
}

uint64_t Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.movieRestriction.setter()
{
  return MEMORY[0x1E0D70568]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions()
{
  return MEMORY[0x1E0D70578]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState()
{
  return MEMORY[0x1E0D705A0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibraryResultTypedScoreMultiplier.type.getter()
{
  return MEMORY[0x1E0D705A8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_LibraryResultTypedScoreMultiplier.multipler.getter()
{
  return MEMORY[0x1E0D705B0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_LibraryResultTypedScoreMultiplier()
{
  return MEMORY[0x1E0D705B8]();
}

uint64_t dispatch thunk of BasePegasusProxy.feedbackEventStream.getter()
{
  return MEMORY[0x1E0D70788]();
}

uint64_t dispatch thunk of BasePegasusProxy.warmUpConnectionIfNeeded()()
{
  return MEMORY[0x1E0D70798]();
}

uint64_t dispatch thunk of BasePegasusProxy.metadata.modify()
{
  return MEMORY[0x1E0D707A8]();
}

uint64_t dispatch thunk of BasePegasusProxy.metadata.getter()
{
  return MEMORY[0x1E0D707B0]();
}

uint64_t dispatch thunk of BasePegasusProxy.metadata.setter()
{
  return MEMORY[0x1E0D707B8]();
}

uint64_t dispatch thunk of PegasusProxyForAssistant.constructSearchRequest(query:context:requestType:)()
{
  return MEMORY[0x1E0D70810]();
}

uint64_t dispatch thunk of PegasusProxyForAssistant.searchResponsePublisher(usingSearchRequest:)()
{
  return MEMORY[0x1E0D70818]();
}

uint64_t type metadata accessor for PegasusProxyForAssistant.Error()
{
  return MEMORY[0x1E0D70820]();
}

uint64_t static PegasusProxyForAssistant.shared.getter()
{
  return MEMORY[0x1E0D70838]();
}

uint64_t type metadata accessor for PegasusProxyForAssistant()
{
  return MEMORY[0x1E0D70840]();
}

uint64_t dispatch thunk of PegasusProxyForIntelligenceFlow.createRequest(query:context:)()
{
  return MEMORY[0x1E0D70898]();
}

uint64_t static PegasusProxyForIntelligenceFlow.shared.getter()
{
  return MEMORY[0x1E0D708A8]();
}

uint64_t type metadata accessor for PegasusProxyForIntelligenceFlow()
{
  return MEMORY[0x1E0D708B0]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x1E0D20EF8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Span.MatcherName()
{
  return MEMORY[0x1E0D9F028]();
}

uint64_t Siri_Nlu_External_Span.matcherNames.getter()
{
  return MEMORY[0x1E0D9F048]();
}

uint64_t Siri_Nlu_External_Span.input.getter()
{
  return MEMORY[0x1E0D9F050]();
}

uint64_t Siri_Nlu_External_Span.label.getter()
{
  return MEMORY[0x1E0D9F058]();
}

uint64_t Siri_Nlu_External_Span.score.getter()
{
  return MEMORY[0x1E0D9F060]();
}

uint64_t Siri_Nlu_External_Span.hasLabel.getter()
{
  return MEMORY[0x1E0D9F068]();
}

uint64_t Siri_Nlu_External_Span.usoGraph.getter()
{
  return MEMORY[0x1E0D9F070]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Span()
{
  return MEMORY[0x1E0D9F078]();
}

uint64_t Siri_Nlu_External_UUID.init()()
{
  return MEMORY[0x1E0D9F0D8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UUID()
{
  return MEMORY[0x1E0D9F0E0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier()
{
  return MEMORY[0x1E0D9F140]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser.AlgorithmType()
{
  return MEMORY[0x1E0D9F180]();
}

uint64_t Siri_Nlu_External_Parser.parserID.getter()
{
  return MEMORY[0x1E0D9F188]();
}

uint64_t Siri_Nlu_External_Parser.algorithm.getter()
{
  return MEMORY[0x1E0D9F190]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser()
{
  return MEMORY[0x1E0D9F198]();
}

uint64_t Siri_Nlu_External_UsoGraph.alignments.getter()
{
  return MEMORY[0x1E0D9F228]();
}

uint64_t Siri_Nlu_External_UsoGraph.identifiers.getter()
{
  return MEMORY[0x1E0D9F230]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x1E0D9F270]();
}

uint64_t Siri_Nlu_External_UserParse.probability.getter()
{
  return MEMORY[0x1E0D9F298]();
}

uint64_t Siri_Nlu_External_UserParse.probability.setter()
{
  return MEMORY[0x1E0D9F2A0]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return MEMORY[0x1E0D9F2B8]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.setter()
{
  return MEMORY[0x1E0D9F2C8]();
}

uint64_t Siri_Nlu_External_UserParse.comparableProbability.getter()
{
  return MEMORY[0x1E0D9F2E8]();
}

uint64_t Siri_Nlu_External_UserParse.comparableProbability.setter()
{
  return MEMORY[0x1E0D9F2F0]();
}

uint64_t Siri_Nlu_External_UserParse.parser.getter()
{
  return MEMORY[0x1E0D9F318]();
}

uint64_t Siri_Nlu_External_UserParse.parser.setter()
{
  return MEMORY[0x1E0D9F320]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return MEMORY[0x1E0D9F340]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.probability.setter()
{
  return MEMORY[0x1E0D9F390]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.id.setter()
{
  return MEMORY[0x1E0D9F398]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.asrTokens.setter()
{
  return MEMORY[0x1E0D9F3A0]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.utterance.getter()
{
  return MEMORY[0x1E0D9F3A8]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.utterance.setter()
{
  return MEMORY[0x1E0D9F3B0]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.init()()
{
  return MEMORY[0x1E0D9F3B8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_AsrHypothesis()
{
  return MEMORY[0x1E0D9F3C0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return MEMORY[0x1E0D9F3E8]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return MEMORY[0x1E0D9F400]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return MEMORY[0x1E0D9F410]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return MEMORY[0x1E0D9F418]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasDelegated.getter()
{
  return MEMORY[0x1E0D9F428]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return MEMORY[0x1E0D9F448]();
}

uint64_t Siri_Nlu_External_UserDialogAct.delegated.getter()
{
  return MEMORY[0x1E0D9F498]();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return MEMORY[0x1E0D9F4A8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x1E0D9F4B0]();
}

uint64_t Siri_Nlu_External_UtteranceSpan.startIndex.getter()
{
  return MEMORY[0x1E0D9F4F0]();
}

uint64_t Siri_Nlu_External_UtteranceSpan.endIndex.getter()
{
  return MEMORY[0x1E0D9F4F8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UtteranceSpan()
{
  return MEMORY[0x1E0D9F500]();
}

uint64_t type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode()
{
  return MEMORY[0x1E0D9F520]();
}

uint64_t type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType()
{
  return MEMORY[0x1E0D9F560]();
}

uint64_t Siri_Nlu_External_RewriteMessage.rewriteType.getter()
{
  return MEMORY[0x1E0D9F568]();
}

uint64_t Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter()
{
  return MEMORY[0x1E0D9F570]();
}

uint64_t type metadata accessor for Siri_Nlu_External_RewriteMessage()
{
  return MEMORY[0x1E0D9F578]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return MEMORY[0x1E0D9F5C8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x1E0D9F5E8]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.responseSemanticValues.getter()
{
  return MEMORY[0x1E0D9F648]();
}

uint64_t type metadata accessor for Siri_Nlu_External_LegacyNLContext()
{
  return MEMORY[0x1E0D9F660]();
}

uint64_t Siri_Nlu_External_UtteranceAlignment.asrHypothesisIndex.getter()
{
  return MEMORY[0x1E0D9F758]();
}

uint64_t Siri_Nlu_External_UtteranceAlignment.spans.getter()
{
  return MEMORY[0x1E0D9F760]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.beginIndex.getter()
{
  return MEMORY[0x1E0D9F770]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.beginIndex.setter()
{
  return MEMORY[0x1E0D9F778]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.postItnText.getter()
{
  return MEMORY[0x1E0D9F780]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.postItnText.setter()
{
  return MEMORY[0x1E0D9F788]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.getter()
{
  return MEMORY[0x1E0D9F790]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.setter()
{
  return MEMORY[0x1E0D9F798]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.phoneSequence.setter()
{
  return MEMORY[0x1E0D9F7A0]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.confidenceScore.setter()
{
  return MEMORY[0x1E0D9F7A8]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.endMilliSeconds.setter()
{
  return MEMORY[0x1E0D9F7B0]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.ipaPhoneSequence.setter()
{
  return MEMORY[0x1E0D9F7B8]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.getter()
{
  return MEMORY[0x1E0D9F7C0]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.setter()
{
  return MEMORY[0x1E0D9F7C8]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.getter()
{
  return MEMORY[0x1E0D9F7D0]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.setter()
{
  return MEMORY[0x1E0D9F7D8]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.startMilliSeconds.setter()
{
  return MEMORY[0x1E0D9F7E0]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.endIndex.getter()
{
  return MEMORY[0x1E0D9F7E8]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.endIndex.setter()
{
  return MEMORY[0x1E0D9F7F0]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.init()()
{
  return MEMORY[0x1E0D9F7F8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_AsrTokenInformation()
{
  return MEMORY[0x1E0D9F800]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter()
{
  return MEMORY[0x1E0D9F860]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter()
{
  return MEMORY[0x1E0D9F870]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.hasBackingAppBundleID.getter()
{
  return MEMORY[0x1E0D9F878]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.value.getter()
{
  return MEMORY[0x1E0D9F880]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.namespace.getter()
{
  return MEMORY[0x1E0D9F888]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier()
{
  return MEMORY[0x1E0D9F890]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.matchingSpans.getter()
{
  return MEMORY[0x1E0D9F8C0]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter()
{
  return MEMORY[0x1E0D9F8C8]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter()
{
  return MEMORY[0x1E0D9F8D0]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter()
{
  return MEMORY[0x1E0D9F8F0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct()
{
  return MEMORY[0x1E0D9F8F8]();
}

uint64_t static SiriNLUTypesPrintUtils.printableProtoObject(object:)()
{
  return MEMORY[0x1E0D9F908]();
}

uint64_t type metadata accessor for SiriNLUTypesPrintUtils()
{
  return MEMORY[0x1E0D9F910]();
}

uint64_t static ConversionUtils.convertUuidToProto(uuid:)()
{
  return MEMORY[0x1E0D9F930]();
}

uint64_t static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)()
{
  return MEMORY[0x1E0D9F938]();
}

uint64_t static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)()
{
  return MEMORY[0x1E0D9F950]();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return MEMORY[0x1E0D9F960]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter()
{
  return MEMORY[0x1E0DA0040]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter()
{
  return MEMORY[0x1E0DA0050]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter()
{
  return MEMORY[0x1E0DA0068]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.displayHints.getter()
{
  return MEMORY[0x1E0DA0078]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.ambiguityTarget.getter()
{
  return MEMORY[0x1E0DA0088]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.responseOptions.getter()
{
  return MEMORY[0x1E0DA0098]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.alertDomainHints.getter()
{
  return MEMORY[0x1E0DA00A8]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.promptTargetHints.getter()
{
  return MEMORY[0x1E0DA00B0]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.getter()
{
  return MEMORY[0x1E0DA00C0]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.getter()
{
  return MEMORY[0x1E0DA00D0]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.objectDisambiguation.getter()
{
  return MEMORY[0x1E0DA00D8]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.previousNldomainName.getter()
{
  return MEMORY[0x1E0DA00E8]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.backgroundDomainHints.getter()
{
  return MEMORY[0x1E0DA00F0]();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext()
{
  return MEMORY[0x1E0DA0100]();
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter()
{
  return MEMORY[0x1E0DA0110]();
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.getter()
{
  return MEMORY[0x1E0DA0128]();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue()
{
  return MEMORY[0x1E0DA0140]();
}

uint64_t type metadata accessor for UsoEntity_uso_NoEntity()
{
  return MEMORY[0x1E0DA0178]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.userEntities.getter()
{
  return MEMORY[0x1E0DA0188]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter()
{
  return MEMORY[0x1E0DA0190]();
}

uint64_t dispatch thunk of UsoEntity_common_UserEntity.associatedUserEntities.getter()
{
  return MEMORY[0x1E0DA01A0]();
}

uint64_t dispatch thunk of UsoEntity_common_UserEntity.definedValue.getter()
{
  return MEMORY[0x1E0DA01A8]();
}

uint64_t type metadata accessor for UsoEntity_common_UserEntity.DefinedValues()
{
  return MEMORY[0x1E0DA01B8]();
}

uint64_t type metadata accessor for UsoEntity_common_UserEntity()
{
  return MEMORY[0x1E0DA01E0]();
}

uint64_t UsoEntityBuilder_uso_NoEntity.init()()
{
  return MEMORY[0x1E0DA01F0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_uso_NoEntity()
{
  return MEMORY[0x1E0DA01F8]();
}

uint64_t PersonOntologyNode.PersonNamePrefix.rawValue.getter()
{
  return MEMORY[0x1E0DA0268]();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePrefix()
{
  return MEMORY[0x1E0DA0270]();
}

uint64_t PersonOntologyNode.PersonNamePostfix.rawValue.getter()
{
  return MEMORY[0x1E0DA0280]();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePostfix()
{
  return MEMORY[0x1E0DA0288]();
}

uint64_t AddressOntologyNode.OccupantNode.init(name:multicardinal:)()
{
  return MEMORY[0x1E0DA02E0]();
}

uint64_t type metadata accessor for AddressOntologyNode.OccupantNode()
{
  return MEMORY[0x1E0DA02E8]();
}

uint64_t dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)()
{
  return MEMORY[0x1E0DA0410]();
}

uint64_t dispatch thunk of CodeGenBase.usoIdentifiers.getter()
{
  return MEMORY[0x1E0DA0420]();
}

uint64_t CodeGenBase.entity.getter()
{
  return MEMORY[0x1E0DA0428]();
}

uint64_t SpanProperty.valueString.getter()
{
  return MEMORY[0x1E0DA04C0]();
}

uint64_t SpanProperty.key.getter()
{
  return MEMORY[0x1E0DA04D8]();
}

uint64_t type metadata accessor for SpanProperty()
{
  return MEMORY[0x1E0DA04E8]();
}

uint64_t ListOperators.rawValue.getter()
{
  return MEMORY[0x1E0DA0500]();
}

uint64_t type metadata accessor for ListOperators()
{
  return MEMORY[0x1E0DA0508]();
}

uint64_t type metadata accessor for UsoEntitySpan.SpanSource()
{
  return MEMORY[0x1E0DA0530]();
}

uint64_t UsoEntitySpan.properties.getter()
{
  return MEMORY[0x1E0DA0548]();
}

uint64_t UsoEntitySpan.sourceComponent.getter()
{
  return MEMORY[0x1E0DA0578]();
}

uint64_t type metadata accessor for UsoEntitySpan()
{
  return MEMORY[0x1E0DA05B0]();
}

uint64_t UsoIdentifier.appBundleId.getter()
{
  return MEMORY[0x1E0DA05E0]();
}

uint64_t type metadata accessor for UsoIdentifier.NluComponent()
{
  return MEMORY[0x1E0DA0620]();
}

uint64_t UsoIdentifier.sourceComponent.getter()
{
  return MEMORY[0x1E0DA0638]();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:)()
{
  return MEMORY[0x1E0DA0670]();
}

uint64_t UsoIdentifier.value.getter()
{
  return MEMORY[0x1E0DA0678]();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return MEMORY[0x1E0DA0680]();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return MEMORY[0x1E0DA0688]();
}

uint64_t static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)()
{
  return MEMORY[0x1E0DA0698]();
}

uint64_t UtteranceSpan.startIndex.getter()
{
  return MEMORY[0x1E0DA06A8]();
}

uint64_t UtteranceSpan.endIndex.getter()
{
  return MEMORY[0x1E0DA06D0]();
}

uint64_t type metadata accessor for UtteranceSpan()
{
  return MEMORY[0x1E0DA06D8]();
}

uint64_t dispatch thunk of CodeGenTaskBase.getAsListHelper<A>(argumentName:entryType:)()
{
  return MEMORY[0x1E0DA0738]();
}

uint64_t type metadata accessor for CodeGenTaskBase()
{
  return MEMORY[0x1E0DA0740]();
}

uint64_t type metadata accessor for TerminalElement.Value()
{
  return MEMORY[0x1E0DA0978]();
}

uint64_t dispatch thunk of CodeGenListEntry.entryAsExpression.getter()
{
  return MEMORY[0x1E0DA0C98]();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return MEMORY[0x1E0DA0CA0]();
}

uint64_t dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)()
{
  return MEMORY[0x1E0DA0CD8]();
}

uint64_t dispatch thunk of CodeGenExpression.operatorAsString.getter()
{
  return MEMORY[0x1E0DA0D80]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter()
{
  return MEMORY[0x1E0DA0D88]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter()
{
  return MEMORY[0x1E0DA0D90]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter()
{
  return MEMORY[0x1E0DA0D98]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter()
{
  return MEMORY[0x1E0DA0DA0]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)()
{
  return MEMORY[0x1E0DA0DA8]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter()
{
  return MEMORY[0x1E0DA0DB0]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return MEMORY[0x1E0DA0DB8]();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return MEMORY[0x1E0DA0DC8]();
}

uint64_t OccupantIntentNode.init(intentNode:ontologyNode:)()
{
  return MEMORY[0x1E0DA0E20]();
}

uint64_t OccupantIntentNode.namePrefix.getter()
{
  return MEMORY[0x1E0DA0E28]();
}

uint64_t OccupantIntentNode.namePostfix.getter()
{
  return MEMORY[0x1E0DA0E30]();
}

uint64_t OccupantIntentNode.relationship.getter()
{
  return MEMORY[0x1E0DA0E38]();
}

uint64_t OccupantIntentNode.company.getter()
{
  return MEMORY[0x1E0DA0E40]();
}

uint64_t OccupantIntentNode.fullName.getter()
{
  return MEMORY[0x1E0DA0E48]();
}

uint64_t OccupantIntentNode.lastName.getter()
{
  return MEMORY[0x1E0DA0E50]();
}

uint64_t OccupantIntentNode.nickname.getter()
{
  return MEMORY[0x1E0DA0E58]();
}

uint64_t OccupantIntentNode.firstName.getter()
{
  return MEMORY[0x1E0DA0E60]();
}

uint64_t type metadata accessor for OccupantIntentNode()
{
  return MEMORY[0x1E0DA0E70]();
}

uint64_t TerminalIntentNode.init(name:value:semanticTags:)()
{
  return MEMORY[0x1E0DA0E80]();
}

uint64_t type metadata accessor for TerminalIntentNode()
{
  return MEMORY[0x1E0DA0EA0]();
}

uint64_t static UsoConversionUtils.extractFirstEntityFromGraph(graph:)()
{
  return MEMORY[0x1E0DA0EC0]();
}

uint64_t UtteranceAlignment.asrHypothesisIndex.getter()
{
  return MEMORY[0x1E0DA0EE8]();
}

uint64_t UtteranceAlignment.spans.getter()
{
  return MEMORY[0x1E0DA0EF0]();
}

uint64_t dispatch thunk of UsoEntity_common_App.name.getter()
{
  return MEMORY[0x1E0DA0F90]();
}

uint64_t type metadata accessor for UsoEntity_common_App()
{
  return MEMORY[0x1E0DA0F98]();
}

uint64_t NonTerminalIntentNode.init(name:childNodes:resultIDs:)()
{
  return MEMORY[0x1E0DA1010]();
}

uint64_t type metadata accessor for NonTerminalIntentNode()
{
  return MEMORY[0x1E0DA1018]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.name.getter()
{
  return MEMORY[0x1E0DA1278]();
}

uint64_t type metadata accessor for UsoEntity_common_Person()
{
  return MEMORY[0x1E0DA1280]();
}

uint64_t type metadata accessor for UsoTask_open_common_App()
{
  return MEMORY[0x1E0DA1298]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Target.target.getter()
{
  return MEMORY[0x1E0DA12A0]();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return MEMORY[0x1E0DA12F8]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)()
{
  return MEMORY[0x1E0DA1318]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityToRootedEntityGraph(entity:options:)()
{
  return MEMORY[0x1E0DA1328]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityToGraph(entity:)()
{
  return MEMORY[0x1E0DA1330]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_App()
{
  return MEMORY[0x1E0DA1468]();
}

uint64_t type metadata accessor for UsoTask_play_uso_NoEntity()
{
  return MEMORY[0x1E0DA1480]();
}

uint64_t dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)()
{
  return MEMORY[0x1E0DA14F8]();
}

uint64_t static UsoEntity_CodeGenConverter.convert(entity:)()
{
  return MEMORY[0x1E0DA1500]();
}

_QWORD *static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)@<X0>(_QWORD *__return_ptr a1@<X8>)
{
  return MEMORY[0x1E0DA1510](a1);
}

uint64_t dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter()
{
  return MEMORY[0x1E0DA1570]();
}

uint64_t dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter()
{
  return MEMORY[0x1E0DA1578]();
}

uint64_t dispatch thunk of UsoEntity_common_MediaItem.totalDuration.getter()
{
  return MEMORY[0x1E0DA1580]();
}

uint64_t dispatch thunk of UsoEntity_common_MediaItem.associatedPerson.getter()
{
  return MEMORY[0x1E0DA1588]();
}

uint64_t dispatch thunk of UsoEntity_common_MediaItem.name.getter()
{
  return MEMORY[0x1E0DA1590]();
}

uint64_t dispatch thunk of UsoEntity_common_MediaItem.dateTime.getter()
{
  return MEMORY[0x1E0DA1598]();
}

uint64_t type metadata accessor for UsoEntity_common_MediaItem()
{
  return MEMORY[0x1E0DA15A0]();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter()
{
  return MEMORY[0x1E0DA15B0]();
}

uint64_t type metadata accessor for UsoEntity_common_PhoneCall()
{
  return MEMORY[0x1E0DA15B8]();
}

uint64_t type metadata accessor for UsoTask_start_uso_NoEntity()
{
  return MEMORY[0x1E0DA1608]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter()
{
  return MEMORY[0x1E0DA1618]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return MEMORY[0x1E0DA1620]();
}

uint64_t UsoEntityBuilder_common_App.init()()
{
  return MEMORY[0x1E0DA1630]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_App()
{
  return MEMORY[0x1E0DA1638]();
}

uint64_t UsoEntityBuilder_common_Uri.init()()
{
  return MEMORY[0x1E0DA1640]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Uri()
{
  return MEMORY[0x1E0DA1648]();
}

uint64_t dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter()
{
  return MEMORY[0x1E0DA16A8]();
}

uint64_t type metadata accessor for UsoEntity_common_Quantifier.DefinedValues()
{
  return MEMORY[0x1E0DA16D0]();
}

uint64_t dispatch thunk of UsoEntity_common_Similarity.definedValue.getter()
{
  return MEMORY[0x1E0DA16E8]();
}

uint64_t type metadata accessor for UsoEntity_common_Similarity.DefinedValues()
{
  return MEMORY[0x1E0DA16F8]();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter()
{
  return MEMORY[0x1E0DA1710]();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItem.name.getter()
{
  return MEMORY[0x1E0DA1718]();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItem.type.getter()
{
  return MEMORY[0x1E0DA1720]();
}

uint64_t type metadata accessor for UsoEntity_common_SportsItem()
{
  return MEMORY[0x1E0DA1728]();
}

uint64_t type metadata accessor for UsoTask_resume_uso_NoEntity()
{
  return MEMORY[0x1E0DA1768]();
}

uint64_t type metadata accessor for UsoEntity_common_EventTrigger()
{
  return MEMORY[0x1E0DA1960]();
}

uint64_t dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter()
{
  return MEMORY[0x1E0DA19A8]();
}

uint64_t type metadata accessor for UsoEntity_common_ListPosition.DefinedValues()
{
  return MEMORY[0x1E0DA1AC0]();
}

uint64_t dispatch thunk of UsoEntity_common_RadioStation.name.getter()
{
  return MEMORY[0x1E0DA1AE8]();
}

uint64_t type metadata accessor for UsoEntity_common_RadioStation()
{
  return MEMORY[0x1E0DA1AF0]();
}

uint64_t type metadata accessor for UsoTask_call_common_PhoneCall()
{
  return MEMORY[0x1E0DA1B08]();
}

uint64_t type metadata accessor for UsoTask_like_common_MediaItem()
{
  return MEMORY[0x1E0DA1B20]();
}

uint64_t type metadata accessor for UsoTask_play_common_MediaItem()
{
  return MEMORY[0x1E0DA1B50]();
}

uint64_t dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter()
{
  return MEMORY[0x1E0DA1D20]();
}

uint64_t type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues()
{
  return MEMORY[0x1E0DA1E28]();
}

uint64_t dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter()
{
  return MEMORY[0x1E0DA1E50]();
}

uint64_t type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues()
{
  return MEMORY[0x1E0DA1E68]();
}

uint64_t dispatch thunk of UsoEntity_common_SortDirection.definedValue.getter()
{
  return MEMORY[0x1E0DA1E80]();
}

uint64_t type metadata accessor for UsoEntity_common_SortDirection.DefinedValues()
{
  return MEMORY[0x1E0DA1ED0]();
}

uint64_t type metadata accessor for UsoTask_start_common_MediaItem()
{
  return MEMORY[0x1E0DA1F20]();
}

uint64_t dispatch thunk of UsoEntity_common_SportsItemType.name.getter()
{
  return MEMORY[0x1E0DA1F88]();
}

uint64_t type metadata accessor for UsoTask_follow_common_MediaItem()
{
  return MEMORY[0x1E0DA1FA8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_MediaItem()
{
  return MEMORY[0x1E0DA1FC8]();
}

uint64_t type metadata accessor for UsoTask_repeat_common_MediaItem()
{
  return MEMORY[0x1E0DA1FD8]();
}

uint64_t type metadata accessor for UsoTask_resume_common_MediaItem()
{
  return MEMORY[0x1E0DA1FF8]();
}

uint64_t type metadata accessor for UsoTask_unlike_common_MediaItem()
{
  return MEMORY[0x1E0DA2018]();
}

uint64_t type metadata accessor for UsoTask_update_common_MediaItem()
{
  return MEMORY[0x1E0DA2030]();
}

uint64_t dispatch thunk of UsoEntity_common_SearchQualifier.similarity.getter()
{
  return MEMORY[0x1E0DA20C0]();
}

uint64_t dispatch thunk of UsoEntity_common_SearchQualifier.definedValue.getter()
{
  return MEMORY[0x1E0DA20C8]();
}

uint64_t type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues()
{
  return MEMORY[0x1E0DA20E0]();
}

uint64_t dispatch thunk of UsoEntity_common_SearchQualifier.sortDirections.getter()
{
  return MEMORY[0x1E0DA20F8]();
}

uint64_t type metadata accessor for UsoTask_play_common_RadioStation()
{
  return MEMORY[0x1E0DA2188]();
}

uint64_t type metadata accessor for UsoTask_request_common_MediaItem()
{
  return MEMORY[0x1E0DA21A0]();
}

uint64_t type metadata accessor for UsoTask_shuffle_common_MediaItem()
{
  return MEMORY[0x1E0DA21C0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.userEntities.getter()
{
  return MEMORY[0x1E0DA21F0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter()
{
  return MEMORY[0x1E0DA21F8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter()
{
  return MEMORY[0x1E0DA2200]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.userEntities.getter()
{
  return MEMORY[0x1E0DA2208]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter()
{
  return MEMORY[0x1E0DA2210]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter()
{
  return MEMORY[0x1E0DA2218]();
}

uint64_t UsoEntityBuilder_common_MediaItem.init()()
{
  return MEMORY[0x1E0DA2228]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_MediaItem()
{
  return MEMORY[0x1E0DA2230]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceControl.userEntities.getter()
{
  return MEMORY[0x1E0DA2290]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter()
{
  return MEMORY[0x1E0DA22A0]();
}

uint64_t type metadata accessor for UsoTask_subscribe_common_MediaItem()
{
  return MEMORY[0x1E0DA23B0]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_MediaItem()
{
  return MEMORY[0x1E0DA23C0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_ReferenceType.setDefinedValue(value:)()
{
  return MEMORY[0x1E0DA2558]();
}

uint64_t UsoEntityBuilder_common_ReferenceType.init()()
{
  return MEMORY[0x1E0DA2568]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_ReferenceType()
{
  return MEMORY[0x1E0DA2570]();
}

uint64_t type metadata accessor for Edge()
{
  return MEMORY[0x1E0DA27F8]();
}

uint64_t type metadata accessor for Kind()
{
  return MEMORY[0x1E0DA2838]();
}

uint64_t Node.identifiers.getter()
{
  return MEMORY[0x1E0DA28A8]();
}

uint64_t Node.connectedNodes(nodeKind:edgeKind:)()
{
  return MEMORY[0x1E0DA28C8]();
}

uint64_t type metadata accessor for Node()
{
  return MEMORY[0x1E0DA2900]();
}

uint64_t UsoTask.verbString.getter()
{
  return MEMORY[0x1E0DA2A48]();
}

uint64_t UsoTask.baseEntityAsString.getter()
{
  return MEMORY[0x1E0DA2A50]();
}

uint64_t UsoTask.arguments.getter()
{
  return MEMORY[0x1E0DA2A58]();
}

uint64_t type metadata accessor for UsoTask()
{
  return MEMORY[0x1E0DA2A60]();
}

uint64_t dispatch thunk of UsoValue.getAsEntity()(void)
{
  return MEMORY[0x1E0DA2AB8]();
}

uint64_t UsoValue.graphNode.getter()
{
  return MEMORY[0x1E0DA2AD0]();
}

uint64_t UsoEntity.attributes.getter()
{
  return MEMORY[0x1E0DA2BA8]();
}

uint64_t UsoEntity.usoIdentifiers.getter()
{
  return MEMORY[0x1E0DA2BB8]();
}

uint64_t UsoEntity.valueTypeString.getter()
{
  return MEMORY[0x1E0DA2BC0]();
}

uint64_t dispatch thunk of UsoEntity.utteranceAlignments.getter()
{
  return MEMORY[0x1E0DA2BC8]();
}

uint64_t UsoEntity.usoValue.getter()
{
  return MEMORY[0x1E0DA2BD0]();
}

uint64_t AppProtectionFeatures.enabled.getter()
{
  return MEMORY[0x1E0CF9628]();
}

uint64_t type metadata accessor for AppProtectionFeatures()
{
  return MEMORY[0x1E0CF9630]();
}

uint64_t SiriKitContactResolver.resolve(queries:config:)()
{
  return MEMORY[0x1E0D98498]();
}

uint64_t SiriKitContactResolver.init()()
{
  return MEMORY[0x1E0D984A0]();
}

uint64_t type metadata accessor for SiriKitContactResolver()
{
  return MEMORY[0x1E0D984A8]();
}

uint64_t SportsItem.athleteQId.setter()
{
  return MEMORY[0x1E0D984B8]();
}

uint64_t static SportsItem.partiallyEqual(lhs:rhs:)()
{
  return MEMORY[0x1E0D984C0]();
}

uint64_t SportsItem.team.setter()
{
  return MEMORY[0x1E0D984C8]();
}

uint64_t SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)()
{
  return MEMORY[0x1E0D984D0]();
}

uint64_t SportsItem.sport.setter()
{
  return MEMORY[0x1E0D984D8]();
}

uint64_t SportsItem.league.setter()
{
  return MEMORY[0x1E0D984E0]();
}

uint64_t SportsItem.athlete.setter()
{
  return MEMORY[0x1E0D984E8]();
}

uint64_t SportsItem.teamQId.setter()
{
  return MEMORY[0x1E0D984F0]();
}

uint64_t SportsItem.sportQId.setter()
{
  return MEMORY[0x1E0D984F8]();
}

uint64_t SportsItem.leagueQId.setter()
{
  return MEMORY[0x1E0D98500]();
}

uint64_t type metadata accessor for SportsItem()
{
  return MEMORY[0x1E0D98508]();
}

uint64_t ContactQuery.familyName.setter()
{
  return MEMORY[0x1E0D98518]();
}

uint64_t ContactQuery.namePrefix.setter()
{
  return MEMORY[0x1E0D98528]();
}

uint64_t ContactQuery.nameSuffix.setter()
{
  return MEMORY[0x1E0D98530]();
}

uint64_t ContactQuery.relationship.setter()
{
  return MEMORY[0x1E0D98538]();
}

uint64_t ContactQuery.organizationName.setter()
{
  return MEMORY[0x1E0D98540]();
}

uint64_t ContactQuery.fullName.setter()
{
  return MEMORY[0x1E0D98550]();
}

uint64_t ContactQuery.nickname.setter()
{
  return MEMORY[0x1E0D98558]();
}

uint64_t ContactQuery.givenName.getter()
{
  return MEMORY[0x1E0D98560]();
}

uint64_t ContactQuery.givenName.setter()
{
  return MEMORY[0x1E0D98568]();
}

uint64_t ContactQuery.init()()
{
  return MEMORY[0x1E0D98570]();
}

uint64_t type metadata accessor for ContactQuery()
{
  return MEMORY[0x1E0D98578]();
}

uint64_t Recommendation.description.getter()
{
  return MEMORY[0x1E0D985D0]();
}

uint64_t SportsResolver.makeRecommendation(query:)()
{
  return MEMORY[0x1E0D985F8]();
}

uint64_t SportsResolver.init()()
{
  return MEMORY[0x1E0D98600]();
}

uint64_t type metadata accessor for SportsResolver()
{
  return MEMORY[0x1E0D98608]();
}

uint64_t type metadata accessor for RecommenderType()
{
  return MEMORY[0x1E0D98628]();
}

uint64_t type metadata accessor for PersonalizationLevel()
{
  return MEMORY[0x1E0D98680]();
}

uint64_t SportsResolverConfig.init(intentTypeName:bundleId:)()
{
  return MEMORY[0x1E0D98690]();
}

uint64_t type metadata accessor for SportsResolverConfig()
{
  return MEMORY[0x1E0D98698]();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:recommender:customGenerator:)()
{
  return MEMORY[0x1E0D986A8]();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return MEMORY[0x1E0D986B0]();
}

uint64_t static ContactResolverDomain.all.getter()
{
  return MEMORY[0x1E0D986C0]();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return MEMORY[0x1E0D986C8]();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SportsResolverMetrics.logSportsMetric()()
{
  MEMORY[0x1E0D986E8]();
}

uint64_t SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)()
{
  return MEMORY[0x1E0D986F0]();
}

uint64_t type metadata accessor for SportsResolverMetrics()
{
  return MEMORY[0x1E0D986F8]();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return MEMORY[0x1E0D98750]();
}

uint64_t ContactRelationshipQuery.init(label:fromContact:)()
{
  return MEMORY[0x1E0D98758]();
}

uint64_t type metadata accessor for ContactRelationshipQuery()
{
  return MEMORY[0x1E0D98760]();
}

uint64_t SportsRecommendationQuery.init(sportsPersonalizationEntities:)()
{
  return MEMORY[0x1E0D98798]();
}

uint64_t type metadata accessor for SportsRecommendationQuery()
{
  return MEMORY[0x1E0D987A0]();
}

uint64_t SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)()
{
  return MEMORY[0x1E0D987B8]();
}

uint64_t SportsPersonalizationEntity.sportsItem.getter()
{
  return MEMORY[0x1E0D987C0]();
}

uint64_t type metadata accessor for SportsPersonalizationEntity()
{
  return MEMORY[0x1E0D987C8]();
}

uint64_t SiriEnvironment.currentRequest.getter()
{
  return MEMORY[0x1E0D981D8]();
}

uint64_t SiriEnvironment.currentDevice.getter()
{
  return MEMORY[0x1E0DA7AB0]();
}

uint64_t SiriEnvironment.networkAvailability.getter()
{
  return MEMORY[0x1E0DA7AD0]();
}

uint64_t static SiriEnvironment.default.getter()
{
  return MEMORY[0x1E0DA7AE8]();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return MEMORY[0x1E0DA7AF8]();
}

uint64_t type metadata accessor for SiriVoiceGender()
{
  return MEMORY[0x1E0DA7B28]();
}

uint64_t AudioSource.init(aceValue:)()
{
  return MEMORY[0x1E0DA7B78]();
}

uint64_t type metadata accessor for DeviceClass()
{
  return MEMORY[0x1E0DA7C28]();
}

uint64_t InputOrigin.init(aceValue:)()
{
  return MEMORY[0x1E0DA7D38]();
}

uint64_t InputOrigin.rawValue.getter()
{
  return MEMORY[0x1E0DA7D48]();
}

uint64_t type metadata accessor for InputOrigin()
{
  return MEMORY[0x1E0DA7D50]();
}

{
  return MEMORY[0x1E0D9E7E0]();
}

uint64_t static ResponseMode.displayOnly.getter()
{
  return MEMORY[0x1E0DA7DB8]();
}

uint64_t static ResponseMode.voiceForward.getter()
{
  return MEMORY[0x1E0DA7DC0]();
}

uint64_t static ResponseMode.displayForward.getter()
{
  return MEMORY[0x1E0DA7DC8]();
}

uint64_t ResponseMode.init(aceValue:)()
{
  return MEMORY[0x1E0DA7DD0]();
}

uint64_t static ResponseMode.voiceOnly.getter()
{
  return MEMORY[0x1E0DA7DE0]();
}

uint64_t type metadata accessor for ResponseMode()
{
  return MEMORY[0x1E0DA7DE8]();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.getter()
{
  return MEMORY[0x1E0DA7E60]();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.getter()
{
  return MEMORY[0x1E0DA7E88]();
}

uint64_t type metadata accessor for InteractionType()
{
  return MEMORY[0x1E0DA8038]();
}

uint64_t AudioDestination.init(aceValue:)()
{
  return MEMORY[0x1E0DA8060]();
}

uint64_t static DeviceRestrictions.carDNDMode.getter()
{
  return MEMORY[0x1E0DA80C0]();
}

uint64_t DeviceRestrictions.init(aceValue:)()
{
  return MEMORY[0x1E0DA80E8]();
}

uint64_t static DeviceRestrictions.starkMode.getter()
{
  return MEMORY[0x1E0DA8100]();
}

uint64_t type metadata accessor for DeviceRestrictions()
{
  return MEMORY[0x1E0DA8108]();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.getter()
{
  return MEMORY[0x1E0DA8138]();
}

uint64_t static AppDistributor.distributorPriorityList.getter()
{
  return MEMORY[0x1E0CF8860]();
}

uint64_t type metadata accessor for EndRequestMessageBase()
{
  return MEMORY[0x1E0D9C888]();
}

uint64_t MUXContextMessage.isRMVEnabled.getter()
{
  return MEMORY[0x1E0D9C928]();
}

uint64_t MUXContextMessage.userIdToHomeMember.getter()
{
  return MEMORY[0x1E0D9C930]();
}

uint64_t type metadata accessor for MUXContextMessage()
{
  return MEMORY[0x1E0D9C938]();
}

uint64_t TTResponseMessage.MitigationDecision.rawValue.getter()
{
  return MEMORY[0x1E0D9C960]();
}

uint64_t type metadata accessor for TTResponseMessage.MitigationDecision()
{
  return MEMORY[0x1E0D9C978]();
}

uint64_t TTResponseMessage.mitigationDecision.getter()
{
  return MEMORY[0x1E0D9C998]();
}

uint64_t TTResponseMessage.tcuMappedNLResponse.getter()
{
  return MEMORY[0x1E0D9C9A0]();
}

uint64_t type metadata accessor for TTResponseMessage()
{
  return MEMORY[0x1E0D9C9F8]();
}

uint64_t type metadata accessor for SessionEndedMessage()
{
  return MEMORY[0x1E0D9CA20]();
}

uint64_t StartRequestMessageBase.optionalRequestContextData.getter()
{
  return MEMORY[0x1E0D9CA28]();
}

uint64_t StartRequestMessageBase.inputOrigin.getter()
{
  return MEMORY[0x1E0D9CA30]();
}

uint64_t RequestContextMessage.isEyesFree.getter()
{
  return MEMORY[0x1E0D9CC50]();
}

uint64_t RequestContextMessage.audioSource.getter()
{
  return MEMORY[0x1E0D9CC58]();
}

uint64_t RequestContextMessage.bargeInModes.getter()
{
  return MEMORY[0x1E0D9CC68]();
}

uint64_t RequestContextMessage.responseMode.getter()
{
  return MEMORY[0x1E0D9CC70]();
}

uint64_t RequestContextMessage.audioDestination.getter()
{
  return MEMORY[0x1E0D9CC78]();
}

uint64_t RequestContextMessage.deviceRestrictions.getter()
{
  return MEMORY[0x1E0D9CC80]();
}

uint64_t RequestContextMessage.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x1E0D9CC90]();
}

uint64_t RequestContextMessage.isTriggerlessFollowup.getter()
{
  return MEMORY[0x1E0D9CC98]();
}

uint64_t RequestContextMessage.isVoiceTriggerEnabled.getter()
{
  return MEMORY[0x1E0D9CCA0]();
}

uint64_t RequestContextMessage.approximatePreviousTTSInterval.getter()
{
  return MEMORY[0x1E0D9CCC0]();
}

uint64_t type metadata accessor for RequestContextMessage()
{
  return MEMORY[0x1E0D9CCC8]();
}

uint64_t type metadata accessor for SessionStartedMessage()
{
  return MEMORY[0x1E0D9CD88]();
}

uint64_t FallbackToPommesMessage.pommesCandidateId.getter()
{
  return MEMORY[0x1E0D9CE58]();
}

uint64_t FallbackToPommesMessage.delegatedUserDialogActs.getter()
{
  return MEMORY[0x1E0D9CE60]();
}

uint64_t FallbackToPommesMessage.userId.getter()
{
  return MEMORY[0x1E0D9CE70]();
}

uint64_t type metadata accessor for FallbackToPommesMessage()
{
  return MEMORY[0x1E0D9CEB8]();
}

uint64_t type metadata accessor for StartTextRequestMessage()
{
  return MEMORY[0x1E0D9CF68]();
}

uint64_t NLResultCandidateMessage.voiceIdClassification.getter()
{
  return MEMORY[0x1E0D9D040]();
}

uint64_t type metadata accessor for NLResultCandidateMessage()
{
  return MEMORY[0x1E0D9D0A8]();
}

uint64_t NLResultCandidateMessageBase.userParses.getter()
{
  return MEMORY[0x1E0D9D0B8]();
}

uint64_t NLResultCandidateMessageBase.fallbackParse.getter()
{
  return MEMORY[0x1E0D9D0C0]();
}

uint64_t NLResultCandidateMessageBase.responseVariantResult.getter()
{
  return MEMORY[0x1E0D9D0D8]();
}

uint64_t RunPommesResponseMessage.init(build:)()
{
  return MEMORY[0x1E0D9D1C0]();
}

uint64_t RunPommesResponseMessage.Builder.nlResponse.setter()
{
  return MEMORY[0x1E0D9D1D0]();
}

uint64_t RunPommesResponseMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1E0D9D1D8]();
}

uint64_t RunPommesResponseMessage.Builder.pommesResult.setter()
{
  return MEMORY[0x1E0D9D1E0]();
}

uint64_t RunPommesResponseMessage.Builder.pommesSearchReason.setter()
{
  return MEMORY[0x1E0D9D1E8]();
}

uint64_t RunPommesResponseMessage.Builder.source.setter()
{
  return MEMORY[0x1E0D9D1F0]();
}

uint64_t RunPommesResponseMessage.Builder.requestId.setter()
{
  return MEMORY[0x1E0D9D1F8]();
}

uint64_t RunPommesResponseMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1E0D9D200]();
}

uint64_t RunPommesResponseMessage.Builder.userInput.setter()
{
  return MEMORY[0x1E0D9D208]();
}

uint64_t type metadata accessor for RunPommesResponseMessage.UserInput()
{
  return MEMORY[0x1E0D9D220]();
}

uint64_t type metadata accessor for RunPommesResponseMessage()
{
  return MEMORY[0x1E0D9D238]();
}

uint64_t type metadata accessor for StartLocalRequestMessage()
{
  return MEMORY[0x1E0D9D248]();
}

uint64_t AsrResultCandidateMessage.speechPackage.getter()
{
  return MEMORY[0x1E0D9D280]();
}

uint64_t type metadata accessor for AsrResultCandidateMessage()
{
  return MEMORY[0x1E0D9D2D0]();
}

uint64_t PommesTRPCandidateMessage.init(build:)()
{
  return MEMORY[0x1E0D9D418]();
}

uint64_t PommesTRPCandidateMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1E0D9D428]();
}

uint64_t PommesTRPCandidateMessage.Builder.pommesResult.setter()
{
  return MEMORY[0x1E0D9D430]();
}

uint64_t PommesTRPCandidateMessage.Builder.searchReason.setter()
{
  return MEMORY[0x1E0D9D438]();
}

uint64_t PommesTRPCandidateMessage.Builder.trpCandidateId.setter()
{
  return MEMORY[0x1E0D9D440]();
}

uint64_t PommesTRPCandidateMessage.Builder.tcuId.setter()
{
  return MEMORY[0x1E0D9D448]();
}

uint64_t PommesTRPCandidateMessage.Builder.source.setter()
{
  return MEMORY[0x1E0D9D450]();
}

uint64_t PommesTRPCandidateMessage.Builder.userId.setter()
{
  return MEMORY[0x1E0D9D458]();
}

uint64_t PommesTRPCandidateMessage.Builder.requestId.setter()
{
  return MEMORY[0x1E0D9D460]();
}

uint64_t PommesTRPCandidateMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1E0D9D468]();
}

uint64_t type metadata accessor for PommesTRPCandidateMessage()
{
  return MEMORY[0x1E0D9D470]();
}

uint64_t StartSpeechRequestMessage.location.getter()
{
  return MEMORY[0x1E0D9D4E0]();
}

uint64_t type metadata accessor for StartSpeechRequestMessage()
{
  return MEMORY[0x1E0D9D4E8]();
}

uint64_t TRPCandidateRequestMessage.tcuToContextList.getter()
{
  return MEMORY[0x1E0D9D520]();
}

uint64_t type metadata accessor for TRPCandidateRequestMessage()
{
  return MEMORY[0x1E0D9D568]();
}

uint64_t TRPCandidateRequestMessageBase.trpCandidateId.getter()
{
  return MEMORY[0x1E0D9D578]();
}

uint64_t TRPCandidateRequestMessageBase.userId.getter()
{
  return MEMORY[0x1E0D9D580]();
}

uint64_t PommesResultCandidateMessage.init(build:)()
{
  return MEMORY[0x1E0D9D778]();
}

uint64_t PommesResultCandidateMessage.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1E0D9D788]();
}

uint64_t PommesResultCandidateMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1E0D9D790]();
}

uint64_t PommesResultCandidateMessage.Builder.searchReason.setter()
{
  return MEMORY[0x1E0D9D798]();
}

uint64_t PommesResultCandidateMessage.Builder.pommesResponse.setter()
{
  return MEMORY[0x1E0D9D7A0]();
}

uint64_t PommesResultCandidateMessage.Builder.error.setter()
{
  return MEMORY[0x1E0D9D7A8]();
}

uint64_t PommesResultCandidateMessage.Builder.source.setter()
{
  return MEMORY[0x1E0D9D7B0]();
}

uint64_t PommesResultCandidateMessage.Builder.requestId.setter()
{
  return MEMORY[0x1E0D9D7B8]();
}

uint64_t PommesResultCandidateMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1E0D9D7C0]();
}

uint64_t type metadata accessor for PommesResultCandidateMessage()
{
  return MEMORY[0x1E0D9D7C8]();
}

uint64_t type metadata accessor for StartCandidateRequestMessage()
{
  return MEMORY[0x1E0D9D800]();
}

uint64_t type metadata accessor for StartChildTextRequestMessage()
{
  return MEMORY[0x1E0D9D878]();
}

uint64_t TextBasedTRPCandidateMessage.tcuId.getter()
{
  return MEMORY[0x1E0D9D890]();
}

uint64_t TextBasedTRPCandidateMessage.utterance.getter()
{
  return MEMORY[0x1E0D9D8D8]();
}

uint64_t type metadata accessor for TextBasedTRPCandidateMessage()
{
  return MEMORY[0x1E0D9D8E0]();
}

uint64_t ResultCandidateRequestMessageBase.resultCandidateId.getter()
{
  return MEMORY[0x1E0D9D9C8]();
}

uint64_t type metadata accessor for StartChildSpeechRequestMessage()
{
  return MEMORY[0x1E0D9DBF8]();
}

uint64_t TextBasedResultCandidateMessage.utterance.getter()
{
  return MEMORY[0x1E0D9DC98]();
}

uint64_t type metadata accessor for TextBasedResultCandidateMessage()
{
  return MEMORY[0x1E0D9DCA0]();
}

uint64_t UserIdAwareResultCandidateMessageBase.userId.getter()
{
  return MEMORY[0x1E0D9DE00]();
}

uint64_t GestureBasedResultCandidateMessage.gesture.getter()
{
  return MEMORY[0x1E0D9DE68]();
}

uint64_t type metadata accessor for GestureBasedResultCandidateMessage()
{
  return MEMORY[0x1E0D9DE70]();
}

uint64_t type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason()
{
  return MEMORY[0x1E0D9DF10]();
}

uint64_t RewrittenUtteranceCandidateMessage.rewriteReason.getter()
{
  return MEMORY[0x1E0D9DF20]();
}

uint64_t RewrittenUtteranceCandidateMessage.originalUserInput.getter()
{
  return MEMORY[0x1E0D9DF28]();
}

uint64_t type metadata accessor for RewrittenUtteranceCandidateMessage()
{
  return MEMORY[0x1E0D9DF90]();
}

uint64_t RequestMessageBase.requestId.getter()
{
  return MEMORY[0x1E0D9E4F8]();
}

uint64_t SessionMessageBase.sessionId.getter()
{
  return MEMORY[0x1E0D9E528]();
}

uint64_t type metadata accessor for SiriUserInput()
{
  return MEMORY[0x1E0D9E5A0]();
}

uint64_t dispatch thunk of MessagePublishing.postMessage(_:)()
{
  return MEMORY[0x1E0D9E5F0]();
}

uint64_t MessageBase.assistantId.getter()
{
  return MEMORY[0x1E0D9E5F8]();
}

uint64_t type metadata accessor for MessageSource()
{
  return MEMORY[0x1E0D9E670]();
}

uint64_t InputOrigin.aceInputOrigin.getter()
{
  return MEMORY[0x1E0D9E7C0]();
}

uint64_t PommesError.rawValue.getter()
{
  return MEMORY[0x1E0D9E830]();
}

uint64_t type metadata accessor for PommesError()
{
  return MEMORY[0x1E0D9E848]();
}

uint64_t GestureInput.utterance.getter()
{
  return MEMORY[0x1E0D9E908]();
}

uint64_t type metadata accessor for GestureInput()
{
  return MEMORY[0x1E0D9E910]();
}

uint64_t NLParseResponse.userParses.getter()
{
  return MEMORY[0x1E0D9EAD8]();
}

uint64_t NLParseResponse.fallbackParse.getter()
{
  return MEMORY[0x1E0D9EAE0]();
}

uint64_t NLParseResponse.responseStatusCode.getter()
{
  return MEMORY[0x1E0D9EAE8]();
}

uint64_t NLParseResponse.serverFallbackReason.getter()
{
  return MEMORY[0x1E0D9EAF0]();
}

uint64_t NLParseResponse.responseVariantResult.getter()
{
  return MEMORY[0x1E0D9EB00]();
}

uint64_t NLParseResponse.init(build:)()
{
  return MEMORY[0x1E0D9EB08]();
}

uint64_t NLParseResponse.Builder.userParses.setter()
{
  return MEMORY[0x1E0D9EB10]();
}

uint64_t NLParseResponse.Builder.fallbackParse.setter()
{
  return MEMORY[0x1E0D9EB18]();
}

uint64_t NLParseResponse.Builder.responseStatusCode.setter()
{
  return MEMORY[0x1E0D9EB20]();
}

uint64_t type metadata accessor for NLParseResponse()
{
  return MEMORY[0x1E0D9EB28]();
}

uint64_t RequestContextData.isEyesFree.getter()
{
  return MEMORY[0x1E0D9EBF8]();
}

uint64_t RequestContextData.audioSource.getter()
{
  return MEMORY[0x1E0D9EC00]();
}

uint64_t RequestContextData.bargeInModes.getter()
{
  return MEMORY[0x1E0D9EC10]();
}

uint64_t RequestContextData.responseMode.getter()
{
  return MEMORY[0x1E0D9EC18]();
}

uint64_t RequestContextData.audioDestination.getter()
{
  return MEMORY[0x1E0D9EC30]();
}

uint64_t RequestContextData.deviceRestrictions.getter()
{
  return MEMORY[0x1E0D9EC38]();
}

uint64_t RequestContextData.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x1E0D9EC48]();
}

uint64_t RequestContextData.isTriggerlessFollowup.getter()
{
  return MEMORY[0x1E0D9EC50]();
}

uint64_t RequestContextData.isVoiceTriggerEnabled.getter()
{
  return MEMORY[0x1E0D9EC58]();
}

uint64_t RequestContextData.approximatePreviousTTSInterval.getter()
{
  return MEMORY[0x1E0D9EC80]();
}

uint64_t TCUMappedNLResponse.nlResponse.getter()
{
  return MEMORY[0x1E0D9ECE8]();
}

uint64_t TCUMappedNLResponse.init(tcuId:nlResponse:)()
{
  return MEMORY[0x1E0D9ECF0]();
}

uint64_t TCUMappedNLResponse.tcuId.getter()
{
  return MEMORY[0x1E0D9ECF8]();
}

uint64_t type metadata accessor for TCUMappedNLResponse()
{
  return MEMORY[0x1E0D9ED00]();
}

uint64_t type metadata accessor for ServerFallbackReason()
{
  return MEMORY[0x1E0D9ED60]();
}

uint64_t type metadata accessor for ConversationSessionKey()
{
  return MEMORY[0x1E0D9EE08]();
}

uint64_t dispatch thunk of ConversationSessionState.value(forKey:userId:)()
{
  return MEMORY[0x1E0D9EEF0]();
}

uint64_t dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)()
{
  return MEMORY[0x1E0D9EF18]();
}

uint64_t UserID.init(sharedUserId:)()
{
  return MEMORY[0x1E0D9EF68]();
}

uint64_t UserID.sharedUserId.getter()
{
  return MEMORY[0x1E0D9EF70]();
}

uint64_t static UserID.defaultUserId.getter()
{
  return MEMORY[0x1E0D9EF78]();
}

uint64_t type metadata accessor for UserID()
{
  return MEMORY[0x1E0D9EF80]();
}

uint64_t dispatch thunk of Location.toCLLocation()()
{
  return MEMORY[0x1E0D9EFA8]();
}

uint64_t CurrentRequest.executionRequestId.getter()
{
  return MEMORY[0x1E0D98258]();
}

uint64_t InteractionTypeHelper.mapInteractionType(inputOrigin:isEyesFree:isDeviceInStarkMode:isDeviceInCarDND:audioSource:audioDestination:previousInteractionType:)()
{
  return MEMORY[0x1E0D983F8]();
}

uint64_t static InteractionTypeHelper.shared.getter()
{
  return MEMORY[0x1E0D98400]();
}

uint64_t type metadata accessor for InteractionTypeHelper()
{
  return MEMORY[0x1E0D98408]();
}

uint64_t type metadata accessor for WarmupComponent()
{
  return MEMORY[0x1E0D988B0]();
}

uint64_t type metadata accessor for PommesCandidateId()
{
  return MEMORY[0x1E0D988D8]();
}

uint64_t PommesSearchReason.toInt.getter()
{
  return MEMORY[0x1E0D98918]();
}

uint64_t type metadata accessor for PommesSearchReason()
{
  return MEMORY[0x1E0D98930]();
}

uint64_t AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)()
{
  return MEMORY[0x1E0D98948]();
}

uint64_t type metadata accessor for AppLaunchExperience()
{
  return MEMORY[0x1E0D98950]();
}

uint64_t DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)()
{
  return MEMORY[0x1E0D98958]();
}

uint64_t type metadata accessor for DeviceExpertExperience()
{
  return MEMORY[0x1E0D98960]();
}

uint64_t Google_Protobuf_Int32Value.value.getter()
{
  return MEMORY[0x1E0DA35D8]();
}

{
  return MEMORY[0x1E0D3E620]();
}

uint64_t type metadata accessor for Google_Protobuf_Int32Value()
{
  return MEMORY[0x1E0DA35F8]();
}

{
  return MEMORY[0x1E0D3E640]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x1E0DA3738]();
}

{
  return MEMORY[0x1E0D3EA60]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x1E0DA3740]();
}

{
  return MEMORY[0x1E0D3EA68]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x1E0DA3820]();
}

{
  return MEMORY[0x1E0D3EC50]();
}

uint64_t Google_Protobuf_Int32Value.value.setter()
{
  return MEMORY[0x1E0D3E628]();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return MEMORY[0x1E0D3E720]();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return MEMORY[0x1E0D3E740]();
}

uint64_t Google_Protobuf_Any.value.getter()
{
  return MEMORY[0x1E0D3E7F8]();
}

uint64_t Google_Protobuf_Any.init(message:partial:typePrefix:)()
{
  return MEMORY[0x1E0D3E800]();
}

uint64_t Google_Protobuf_Any.typeURL.getter()
{
  return MEMORY[0x1E0D3E808]();
}

uint64_t static Google_Protobuf_Any.register(messageType:)()
{
  return MEMORY[0x1E0D3E810]();
}

uint64_t Google_Protobuf_Any.init()()
{
  return MEMORY[0x1E0D3E820]();
}

uint64_t type metadata accessor for Google_Protobuf_Any()
{
  return MEMORY[0x1E0D3E828]();
}

uint64_t Google_Protobuf_Duration.seconds.getter()
{
  return MEMORY[0x1E0D3E8A8]();
}

uint64_t type metadata accessor for Google_Protobuf_Duration()
{
  return MEMORY[0x1E0D3E8C0]();
}

uint64_t JSONEncodingOptions.init()()
{
  return MEMORY[0x1E0D3EA48]();
}

uint64_t type metadata accessor for JSONEncodingOptions()
{
  return MEMORY[0x1E0D3EA50]();
}

uint64_t defaultAnyTypeURLPrefix.getter()
{
  return MEMORY[0x1E0D3EA78]();
}

uint64_t Message.jsonString(options:)()
{
  return MEMORY[0x1E0D3EC20]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x1E0D3EC58]();
}

uint64_t Message.init<A>(contiguousBytes:extensions:partial:options:)()
{
  return MEMORY[0x1E0D3EC60]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x1E0D3EC68]();
}

Swift::String __swiftcall Message.textFormatString()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0D3EC78]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static Message.with(_:)()
{
  return MEMORY[0x1E0D3EC88]();
}

uint64_t dispatch thunk of Experience.renderOptions.getter()
{
  return MEMORY[0x1E0D98968]();
}

uint64_t dispatch thunk of Experience.renderedTexts.getter()
{
  return MEMORY[0x1E0D98970]();
}

uint64_t Experience.userDialogAct.getter()
{
  return MEMORY[0x1E0D98978]();
}

uint64_t dispatch thunk of Experience.queryConfidence.getter()
{
  return MEMORY[0x1E0D98980]();
}

uint64_t dispatch thunk of Experience.pluginIdentifier.getter()
{
  return MEMORY[0x1E0D98988]();
}

uint64_t dispatch thunk of Experience.associatedEntities.getter()
{
  return MEMORY[0x1E0D98990]();
}

uint64_t dispatch thunk of Experience.associatedEntities.setter()
{
  return MEMORY[0x1E0D98998]();
}

uint64_t dispatch thunk of Experience.listenAfterSpeaking.getter()
{
  return MEMORY[0x1E0D989A0]();
}

uint64_t dispatch thunk of Experience.redactedRenderedTexts.getter()
{
  return MEMORY[0x1E0D989A8]();
}

uint64_t type metadata accessor for Experience()
{
  return MEMORY[0x1E0D989B0]();
}

uint64_t PommesResult.resultId.getter()
{
  return MEMORY[0x1E0D989C0]();
}

uint64_t type metadata accessor for PommesResult()
{
  return MEMORY[0x1E0D989C8]();
}

uint64_t GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)()
{
  return MEMORY[0x1E0D989D8]();
}

uint64_t type metadata accessor for GeoExperience()
{
  return MEMORY[0x1E0D989E0]();
}

uint64_t PommesContext.exportPromptContext()()
{
  return MEMORY[0x1E0D989E8]();
}

uint64_t PommesContext.exportPegasusConversationContext()()
{
  return MEMORY[0x1E0D98A00]();
}

uint64_t PommesContext.promptContext.getter()
{
  return MEMORY[0x1E0D98A08]();
}

Swift::Void __swiftcall PommesContext.addRenderedTexts(_:)(Swift::OpaquePointer a1)
{
  MEMORY[0x1E0D98A30](a1._rawValue);
}

uint64_t PommesContext.instructionIntent.setter()
{
  return MEMORY[0x1E0D98A38]();
}

uint64_t PommesContext.exportLegacyNLContext()()
{
  return MEMORY[0x1E0D98A40]();
}

Swift::Void __swiftcall PommesContext.addRedactedRenderedTexts(_:)(Swift::OpaquePointer a1)
{
  MEMORY[0x1E0D98A48](a1._rawValue);
}

uint64_t type metadata accessor for PommesContext.Source()
{
  return MEMORY[0x1E0D98A68]();
}

uint64_t PommesContext.domain.getter()
{
  return MEMORY[0x1E0D98A70]();
}

uint64_t PommesContext.init(source:domain:listenAfterSpeaking:)()
{
  return MEMORY[0x1E0D98A78]();
}

uint64_t PommesContext.source.getter()
{
  return MEMORY[0x1E0D98A80]();
}

uint64_t PommesContext.update(with:)()
{
  return MEMORY[0x1E0D98A88]();
}

uint64_t type metadata accessor for PommesContext()
{
  return MEMORY[0x1E0D98A90]();
}

uint64_t dispatch thunk of PommesResponse.setSearchReason(_:)()
{
  return MEMORY[0x1E0D98AB8]();
}

uint64_t PommesResponse.isCachedResponse.getter()
{
  return MEMORY[0x1E0D98AC0]();
}

uint64_t dispatch thunk of PommesResponse.experiences.getter()
{
  return MEMORY[0x1E0D98AC8]();
}

uint64_t PommesResponse.__allocating_init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)()
{
  return MEMORY[0x1E0D98AD0]();
}

uint64_t dispatch thunk of PommesResponse.searchReason.getter()
{
  return MEMORY[0x1E0D98AD8]();
}

uint64_t PommesResponse.sharedUserId.getter()
{
  return MEMORY[0x1E0D98AE0]();
}

uint64_t dispatch thunk of PommesResponse.taskStepLogs.getter()
{
  return MEMORY[0x1E0D98AE8]();
}

uint64_t dispatch thunk of PommesResponse.clientResults.getter()
{
  return MEMORY[0x1E0D98AF0]();
}

uint64_t dispatch thunk of PommesResponse.primaryCatIds()()
{
  return MEMORY[0x1E0D98AF8]();
}

uint64_t dispatch thunk of PommesResponse.renderedTexts.getter()
{
  return MEMORY[0x1E0D98B00]();
}

uint64_t PommesResponse.pommesCandidateId.getter()
{
  return MEMORY[0x1E0D98B08]();
}

uint64_t PommesResponse.metadataDomainName.getter()
{
  return MEMORY[0x1E0D98B10]();
}

uint64_t PommesResponse.conversationContext.getter()
{
  return MEMORY[0x1E0D98B18]();
}

uint64_t dispatch thunk of PommesResponse.listenAfterSpeaking.getter()
{
  return MEMORY[0x1E0D98B20]();
}

uint64_t PommesResponse.isHandledByPreflight.getter()
{
  return MEMORY[0x1E0D98B28]();
}

uint64_t dispatch thunk of PommesResponse.redactedRenderedTexts.getter()
{
  return MEMORY[0x1E0D98B30]();
}

uint64_t dispatch thunk of PommesResponse.primaryQueryConfidence()()
{
  return MEMORY[0x1E0D98B38]();
}

uint64_t PommesResponse.searchRequestUtterance.getter()
{
  return MEMORY[0x1E0D98B40]();
}

uint64_t dispatch thunk of PommesResponse.userSensitiveTier1Logs.getter()
{
  return MEMORY[0x1E0D98B48]();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter()
{
  return MEMORY[0x1E0D98B60]();
}

uint64_t dispatch thunk of PommesResponse.primaryInstructionIntent()()
{
  return MEMORY[0x1E0D98B68]();
}

uint64_t PommesResponse.preflightClientHandlerIdentifier.getter()
{
  return MEMORY[0x1E0D98B78]();
}

uint64_t dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter()
{
  return MEMORY[0x1E0D98B80]();
}

uint64_t dispatch thunk of PommesResponse.encode(cachingCoder:)()
{
  return MEMORY[0x1E0D98B88]();
}

uint64_t PommesResponse.Builder.isCachedResponse.setter()
{
  return MEMORY[0x1E0D98B90]();
}

uint64_t PommesResponse.Builder.experiences.setter()
{
  return MEMORY[0x1E0D98B98]();
}

uint64_t PommesResponse.Builder.searchReason.setter()
{
  return MEMORY[0x1E0D98BA0]();
}

uint64_t PommesResponse.Builder.sharedUserId.setter()
{
  return MEMORY[0x1E0D98BA8]();
}

uint64_t PommesResponse.Builder.taskStepLogs.setter()
{
  return MEMORY[0x1E0D98BB0]();
}

uint64_t PommesResponse.Builder.clientResults.setter()
{
  return MEMORY[0x1E0D98BB8]();
}

uint64_t PommesResponse.Builder.renderedTexts.setter()
{
  return MEMORY[0x1E0D98BC0]();
}

uint64_t PommesResponse.Builder.asrRecognition.setter()
{
  return MEMORY[0x1E0D98BC8]();
}

uint64_t PommesResponse.Builder.pommesCandidateId.setter()
{
  return MEMORY[0x1E0D98BD0]();
}

uint64_t PommesResponse.Builder.componentsWarmedUp.setter()
{
  return MEMORY[0x1E0D98BD8]();
}

uint64_t PommesResponse.Builder.metadataDomainName.setter()
{
  return MEMORY[0x1E0D98BE0]();
}

uint64_t PommesResponse.Builder.requestCountryCode.setter()
{
  return MEMORY[0x1E0D98BE8]();
}

uint64_t PommesResponse.Builder.conversationContext.setter()
{
  return MEMORY[0x1E0D98BF0]();
}

uint64_t PommesResponse.Builder.encodedNLUserParses.setter()
{
  return MEMORY[0x1E0D98BF8]();
}

uint64_t PommesResponse.Builder.listenAfterSpeaking.setter()
{
  return MEMORY[0x1E0D98C00]();
}

uint64_t PommesResponse.Builder.isHandledByPreflight.setter()
{
  return MEMORY[0x1E0D98C08]();
}

uint64_t PommesResponse.Builder.redactedRenderedTexts.setter()
{
  return MEMORY[0x1E0D98C10]();
}

uint64_t PommesResponse.Builder.responseVariantResult.setter()
{
  return MEMORY[0x1E0D98C18]();
}

uint64_t PommesResponse.Builder.encodedNLFallbackParse.setter()
{
  return MEMORY[0x1E0D98C20]();
}

uint64_t PommesResponse.Builder.searchRequestUtterance.setter()
{
  return MEMORY[0x1E0D98C28]();
}

uint64_t PommesResponse.Builder.userSensitiveTier1Logs.setter()
{
  return MEMORY[0x1E0D98C30]();
}

uint64_t PommesResponse.Builder.pegasusDomainFlowStepLog.setter()
{
  return MEMORY[0x1E0D98C38]();
}

uint64_t PommesResponse.Builder.metadataFallbackTriggered.setter()
{
  return MEMORY[0x1E0D98C40]();
}

uint64_t PommesResponse.Builder.isLowConfidenceKnowledgeResult.setter()
{
  return MEMORY[0x1E0D98C48]();
}

uint64_t PommesResponse.Builder.preflightClientHandlerIdentifier.setter()
{
  return MEMORY[0x1E0D98C50]();
}

uint64_t PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter()
{
  return MEMORY[0x1E0D98C58]();
}

uint64_t PommesResponse.Builder.requestId.setter()
{
  return MEMORY[0x1E0D98C60]();
}

uint64_t PommesResponse.requestId.getter()
{
  return MEMORY[0x1E0D98C68]();
}

uint64_t type metadata accessor for PommesResponse()
{
  return MEMORY[0x1E0D98C70]();
}

uint64_t PommesResponse.__allocating_init(_:)()
{
  return MEMORY[0x1E0D98C80]();
}

uint64_t AudioExperience.init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:pluginId:queryConfidence:userDialogAct:isGlideEligible:networkAvailableAtRequest:matchingSpans:multiUserContext:)()
{
  return MEMORY[0x1E0D98C88]();
}

uint64_t dispatch thunk of AudioExperience.serverAudioResults.getter()
{
  return MEMORY[0x1E0D98C90]();
}

uint64_t AudioExperience.pegasusAudioType.getter()
{
  return MEMORY[0x1E0D98C98]();
}

uint64_t dispatch thunk of AudioExperience.internalSignals.getter()
{
  return MEMORY[0x1E0D98CA0]();
}

uint64_t dispatch thunk of AudioExperience.isGlideEligible.getter()
{
  return MEMORY[0x1E0D98CA8]();
}

uint64_t AudioExperience.playbackSignals.getter()
{
  return MEMORY[0x1E0D98CB0]();
}

uint64_t AudioExperience.audioUnderstanding.getter()
{
  return MEMORY[0x1E0D98CB8]();
}

uint64_t AudioExperience.boltProxiedBundleID.getter()
{
  return MEMORY[0x1E0D98CC0]();
}

uint64_t AudioExperience.audioClientComponent.getter()
{
  return MEMORY[0x1E0D98CC8]();
}

uint64_t AudioExperience.systemExtensionBundleID.getter()
{
  return MEMORY[0x1E0D98CD0]();
}

uint64_t dispatch thunk of AudioExperience.networkAvailableAtRequest.getter()
{
  return MEMORY[0x1E0D98CD8]();
}

uint64_t AudioExperience.shouldPerformAppSelection.getter()
{
  return MEMORY[0x1E0D98CE0]();
}

uint64_t AudioExperience.Builder.serverAudioResults.setter()
{
  return MEMORY[0x1E0D98CE8]();
}

uint64_t AudioExperience.Builder.pegasusAudioType.setter()
{
  return MEMORY[0x1E0D98CF0]();
}

uint64_t AudioExperience.Builder.internalSignals.setter()
{
  return MEMORY[0x1E0D98CF8]();
}

uint64_t AudioExperience.Builder.isGlideEligible.setter()
{
  return MEMORY[0x1E0D98D00]();
}

uint64_t AudioExperience.Builder.playbackSignals.setter()
{
  return MEMORY[0x1E0D98D08]();
}

uint64_t AudioExperience.Builder.audioUnderstanding.setter()
{
  return MEMORY[0x1E0D98D10]();
}

uint64_t AudioExperience.Builder.boltProxiedBundleID.setter()
{
  return MEMORY[0x1E0D98D18]();
}

uint64_t AudioExperience.Builder.audioClientComponent.setter()
{
  return MEMORY[0x1E0D98D20]();
}

uint64_t AudioExperience.Builder.systemExtensionBundleID.setter()
{
  return MEMORY[0x1E0D98D28]();
}

uint64_t AudioExperience.Builder.networkAvailableAtRequest.setter()
{
  return MEMORY[0x1E0D98D30]();
}

uint64_t AudioExperience.Builder.shouldPerformAppSelection.setter()
{
  return MEMORY[0x1E0D98D38]();
}

uint64_t AudioExperience.Builder.launchID.setter()
{
  return MEMORY[0x1E0D98D40]();
}

uint64_t AudioExperience.launchID.getter()
{
  return MEMORY[0x1E0D98D48]();
}

uint64_t AudioExperience.init(pluginId:queryConfidence:userDialogAct:builder:)()
{
  return MEMORY[0x1E0D98D50]();
}

uint64_t AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)()
{
  return MEMORY[0x1E0D98D58]();
}

uint64_t type metadata accessor for AudioExperience()
{
  return MEMORY[0x1E0D98D60]();
}

uint64_t VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)()
{
  return MEMORY[0x1E0D98D68]();
}

uint64_t type metadata accessor for VideoExperience()
{
  return MEMORY[0x1E0D98D70]();
}

uint64_t VocabularyField.init(label:value:fieldType:)()
{
  return MEMORY[0x1E0D98D78]();
}

uint64_t VocabularyField.value.getter()
{
  return MEMORY[0x1E0D98D80]();
}

uint64_t VocabularyField.fieldType.getter()
{
  return MEMORY[0x1E0D98D88]();
}

uint64_t type metadata accessor for VocabularyField()
{
  return MEMORY[0x1E0D98D90]();
}

uint64_t VocabularyResult.semanticValue.getter()
{
  return MEMORY[0x1E0D98DA0]();
}

uint64_t dispatch thunk of VocabularyResult.__allocating_init(appId:itemId:itemType:fieldTypes:score:spanBegin:spanEnd:semanticValue:fields:userId:)()
{
  return MEMORY[0x1E0D98DA8]();
}

uint64_t VocabularyResult.fields.getter()
{
  return MEMORY[0x1E0D98DB0]();
}

uint64_t VocabularyResult.itemId.getter()
{
  return MEMORY[0x1E0D98DB8]();
}

uint64_t VocabularyResult.userId.getter()
{
  return MEMORY[0x1E0D98DC0]();
}

uint64_t VocabularyResult.itemType.getter()
{
  return MEMORY[0x1E0D98DC8]();
}

uint64_t dispatch thunk of VocabularyResult.fieldType.getter()
{
  return MEMORY[0x1E0D98DD0]();
}

uint64_t type metadata accessor for VocabularyResult()
{
  return MEMORY[0x1E0D98DD8]();
}

uint64_t ClientAudioResult.vocabularyResult.getter()
{
  return MEMORY[0x1E0D98DE8]();
}

Swift::String __swiftcall ClientAudioResult.Scheme.buildDeviceID(withId:)(Swift::String withId)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x1E0D98DF0](withId._countAndFlagsBits, withId._object);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static ClientAudioResult.Scheme.from(_:)()
{
  return MEMORY[0x1E0D98DF8]();
}

uint64_t type metadata accessor for ClientAudioResult.Scheme()
{
  return MEMORY[0x1E0D98E00]();
}

uint64_t ClientAudioResult.init(domain:vocabularyResult:)()
{
  return MEMORY[0x1E0D98E08]();
}

uint64_t type metadata accessor for ClientAudioResult()
{
  return MEMORY[0x1E0D98E10]();
}

uint64_t dispatch thunk of GenericExperience.sageExperience.setter()
{
  return MEMORY[0x1E0D98E20]();
}

uint64_t GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)()
{
  return MEMORY[0x1E0D98E28]();
}

uint64_t dispatch thunk of GenericExperience.serverSuggestions.setter()
{
  return MEMORY[0x1E0D98E40]();
}

uint64_t type metadata accessor for GenericExperience()
{
  return MEMORY[0x1E0D98E48]();
}

uint64_t PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:)()
{
  return MEMORY[0x1E0D98E58]();
}

uint64_t type metadata accessor for PhoneCallExperience()
{
  return MEMORY[0x1E0D98E60]();
}

uint64_t type metadata accessor for PommesRenderOptions.PromptType()
{
  return MEMORY[0x1E0D98E80]();
}

uint64_t PommesRenderOptions.promptTypes.getter()
{
  return MEMORY[0x1E0D98E90]();
}

uint64_t PommesRenderOptions.Builder.promptTypes.setter()
{
  return MEMORY[0x1E0D98E98]();
}

uint64_t PommesRenderOptions.Builder.switchProfile.setter()
{
  return MEMORY[0x1E0D98EA0]();
}

uint64_t PommesRenderOptions.Builder.isSquawkResponse.setter()
{
  return MEMORY[0x1E0D98EA8]();
}

uint64_t PommesRenderOptions.Builder.isPhoneCallActive.setter()
{
  return MEMORY[0x1E0D98EB0]();
}

uint64_t PommesRenderOptions.Builder.isImmersiveExperience.setter()
{
  return MEMORY[0x1E0D98EB8]();
}

uint64_t PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter()
{
  return MEMORY[0x1E0D98EC0]();
}

uint64_t type metadata accessor for PommesRenderOptions()
{
  return MEMORY[0x1E0D98EC8]();
}

uint64_t PommesRenderOptions.init(_:)()
{
  return MEMORY[0x1E0D98ED0]();
}

uint64_t ClientExperienceSignals.matchingSpans.setter()
{
  return MEMORY[0x1E0D98ED8]();
}

uint64_t ClientExperienceSignals.init(isGlideEligible:networkAvailableAtRequest:isPhoneCallActive:)()
{
  return MEMORY[0x1E0D98EE0]();
}

uint64_t ClientExperienceSignals.isGlideEligible.setter()
{
  return MEMORY[0x1E0D98EE8]();
}

uint64_t ClientExperienceSignals.multiUserContext.setter()
{
  return MEMORY[0x1E0D98EF0]();
}

uint64_t ClientExperienceSignals.isPhoneCallActive.getter()
{
  return MEMORY[0x1E0D98EF8]();
}

uint64_t ClientExperienceSignals.isPhoneCallActive.setter()
{
  return MEMORY[0x1E0D98F00]();
}

uint64_t ClientExperienceSignals.glideEligibilityPerSharedId.modify()
{
  return MEMORY[0x1E0D98F08]();
}

uint64_t type metadata accessor for ClientExperienceSignals()
{
  return MEMORY[0x1E0D98F10]();
}

uint64_t static InsightRequestSummaryKey.bridgeName.getter()
{
  return MEMORY[0x1E0DA4410]();
}

uint64_t static InsightRequestSummaryKey.assistantId.getter()
{
  return MEMORY[0x1E0DA4418]();
}

uint64_t static InsightRequestSummaryKey.resultCandidateId.getter()
{
  return MEMORY[0x1E0DA4430]();
}

uint64_t static InsightRequestSummaryKey.messageDescription.getter()
{
  return MEMORY[0x1E0DA4438]();
}

uint64_t InsightRequestSummaryKey.init(rawValue:)()
{
  return MEMORY[0x1E0DA4450]();
}

uint64_t static InsightRequestSummaryKey.requestId.getter()
{
  return MEMORY[0x1E0DA4458]();
}

uint64_t static InsightRequestSummaryKey.sessionId.getter()
{
  return MEMORY[0x1E0DA4460]();
}

uint64_t static InsightRequestSummaryKey.utterance.getter()
{
  return MEMORY[0x1E0DA4468]();
}

uint64_t type metadata accessor for InsightRequestSummaryKey()
{
  return MEMORY[0x1E0DA4470]();
}

uint64_t InsightRequestSummaryLogger.emitDebug(_:)()
{
  return MEMORY[0x1E0DA4488]();
}

uint64_t InsightRequestSummaryLogger.init()()
{
  return MEMORY[0x1E0DA4490]();
}

uint64_t type metadata accessor for InsightRequestSummaryLogger()
{
  return MEMORY[0x1E0DA4498]();
}

uint64_t dispatch thunk of CandidateRequestAwareBridgeBase.requestIdToCandidateRequestProcessor.modify()
{
  return MEMORY[0x1E0DA44A0]();
}

uint64_t dispatch thunk of CandidateRequestAwareBridgeBase.activeRequestProcessor.getter()
{
  return MEMORY[0x1E0DA44B8]();
}

uint64_t dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)()
{
  return MEMORY[0x1E0DA44D8]();
}

uint64_t CandidateRequestAwareBridgeBase.init(name:messagePublisher:serviceHelper:queue:conversationSessionsManager:logger:waitBeforeReplacingActiveRequest:)()
{
  return MEMORY[0x1E0DA44E0]();
}

uint64_t CandidateRequestAwareBridgeBase.deinit()
{
  return MEMORY[0x1E0DA44F0]();
}

uint64_t dispatch thunk of RequestProcessorBase.handleEndRequest(_:)()
{
  return MEMORY[0x1E0DA44F8]();
}

uint64_t RequestProcessorBase.rootLevelRequestId.getter()
{
  return MEMORY[0x1E0DA4500]();
}

uint64_t RequestProcessorBase.init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootLevelRequestId:)()
{
  return MEMORY[0x1E0DA4508]();
}

uint64_t RequestProcessorBase.assistantId.getter()
{
  return MEMORY[0x1E0DA4510]();
}

uint64_t RequestProcessorBase.requestQueue.getter()
{
  return MEMORY[0x1E0DA4518]();
}

uint64_t RequestProcessorBase.messagePublisher.getter()
{
  return MEMORY[0x1E0DA4528]();
}

uint64_t RequestProcessorBase.requestId.getter()
{
  return MEMORY[0x1E0DA4538]();
}

uint64_t RequestProcessorBase.sessionId.getter()
{
  return MEMORY[0x1E0DA4540]();
}

uint64_t RequestProcessorBase.deinit()
{
  return MEMORY[0x1E0DA4550]();
}

uint64_t type metadata accessor for MessageHandlerType()
{
  return MEMORY[0x1E0DA45E0]();
}

uint64_t dispatch thunk of InstrumentationUtil.powerLogger()()
{
  return MEMORY[0x1E0DA45F0]();
}

uint64_t dispatch thunk of InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)()
{
  return MEMORY[0x1E0DA4600]();
}

uint64_t InstrumentationUtil.init()()
{
  return MEMORY[0x1E0DA4610]();
}

uint64_t type metadata accessor for InstrumentationUtil()
{
  return MEMORY[0x1E0DA4618]();
}

uint64_t dispatch thunk of MessageDispatchingBridgeBase.registerMessageHandler<A>(_:)()
{
  return MEMORY[0x1E0DA4668]();
}

uint64_t MessageDispatchingBridgeBase.serviceHelper.getter()
{
  return MEMORY[0x1E0DA4670]();
}

uint64_t MessageDispatchingBridgeBase.messagePublisher.getter()
{
  return MEMORY[0x1E0DA4678]();
}

uint64_t dispatch thunk of MessageDispatchingBridgeBase.registerCommandHandler<A>(_:)()
{
  return MEMORY[0x1E0DA4680]();
}

uint64_t MessageDispatchingBridgeBase.conversationSessionsManaging.getter()
{
  return MEMORY[0x1E0DA4688]();
}

uint64_t MessageDispatchingBridgeBase.name.getter()
{
  return MEMORY[0x1E0DA4690]();
}

uint64_t static MUXUtils.singleKnownUserInHome(muxContextMessage:)()
{
  return MEMORY[0x1E0DA4700]();
}

uint64_t ReferenceResolutionClient.__allocating_init()()
{
  return MEMORY[0x1E0DA3CD0]();
}

uint64_t type metadata accessor for ReferenceResolutionClient()
{
  return MEMORY[0x1E0DA3CD8]();
}

uint64_t dispatch thunk of RRReferenceResolverProtocol.resolve(query:)()
{
  return MEMORY[0x1E0DA3D08]();
}

uint64_t dispatch thunk of RRReferenceResolverProtocol.resolve(reference:)()
{
  return MEMORY[0x1E0DA3D10]();
}

uint64_t RRReferenceResolverProtocol.retrieveEntityType(query:)()
{
  return MEMORY[0x1E0DA3D18]();
}

uint64_t RRReferenceResolverProtocol.resolve(query:)()
{
  return MEMORY[0x1E0DA3D20]();
}

uint64_t type metadata accessor for ExperimentationAnalyticsManager()
{
  return MEMORY[0x1E0CF1370]();
}

uint64_t type metadata accessor for PLUSSuggestionNoveltyState()
{
  return MEMORY[0x1E0DA39D8]();
}

uint64_t type metadata accessor for PLUSSuggestionSurfacedState()
{
  return MEMORY[0x1E0DA3A00]();
}

uint64_t type metadata accessor for PLUSSuggestionRedundancyState()
{
  return MEMORY[0x1E0DA3A20]();
}

uint64_t type metadata accessor for PimsLocality()
{
  return MEMORY[0x1E0DA3A40]();
}

uint64_t dispatch thunk of PimsRuntimeLogging.logSuggestionMetadata(requestId:suggestions:)()
{
  return MEMORY[0x1E0DA3A68]();
}

uint64_t dispatch thunk of PimsRuntimeLogging.logCandidateSuggestions(requestId:enablementStatus:pimsIds:)()
{
  return MEMORY[0x1E0DA3A70]();
}

uint64_t static PimsClientTreatment.== infix(_:_:)()
{
  return MEMORY[0x1E0DA3A80]();
}

uint64_t type metadata accessor for PimsClientTreatment()
{
  return MEMORY[0x1E0DA3A90]();
}

uint64_t static PimsServerTreatment.== infix(_:_:)()
{
  return MEMORY[0x1E0DA3B00]();
}

uint64_t type metadata accessor for PimsServerTreatment()
{
  return MEMORY[0x1E0DA3B08]();
}

uint64_t getPimsRuntimeLogger()()
{
  return MEMORY[0x1E0DA3B50]();
}

uint64_t dispatch thunk of MediaSuggestionManager.fetchStatus()()
{
  return MEMORY[0x1E0DA3B80]();
}

uint64_t type metadata accessor for MediaSuggestionManager.EnablementStatus()
{
  return MEMORY[0x1E0DA3BA0]();
}

uint64_t MediaSuggestionManager.init()()
{
  return MEMORY[0x1E0DA3BA8]();
}

uint64_t type metadata accessor for MediaSuggestionManager()
{
  return MEMORY[0x1E0DA3BB0]();
}

uint64_t PimsSuggestionMetadata.pimsId.getter()
{
  return MEMORY[0x1E0DA3BC0]();
}

uint64_t PimsSuggestionMetadata.init(pimsId:locality:serverTreatment:clientTreatment:suggestionSurfaced:noveltyState:redundancyState:)()
{
  return MEMORY[0x1E0DA3BC8]();
}

uint64_t type metadata accessor for PimsSuggestionMetadata()
{
  return MEMORY[0x1E0DA3BD0]();
}

uint64_t OSSignpostID.init(log:object:)()
{
  return MEMORY[0x1E0DF20F8]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1E0DF2100]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1E0DF2108]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x1E0DF2110]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x1E0DF2130]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1E0DF2150]();
}

uint64_t OSSignposter.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF2158]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1E0DF2198]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1E0DF2218]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1E0DF2220]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1E0DF2228]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1E0DF2238]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t static RRMetadata.== infix(_:_:)()
{
  return MEMORY[0x1E0DA3D50]();
}

uint64_t type metadata accessor for RRMetadata()
{
  return MEMORY[0x1E0DA3D58]();
}

uint64_t RRCandidate.score.getter()
{
  return MEMORY[0x1E0DA3D60]();
}

uint64_t RRCandidate.entity.getter()
{
  return MEMORY[0x1E0DA3D68]();
}

uint64_t type metadata accessor for RRCandidate()
{
  return MEMORY[0x1E0DA3D70]();
}

uint64_t ResolveQuery.init(referenceEntity:alternativeEntityTypes:restrictedEntitiesKey:)()
{
  return MEMORY[0x1E0DA3D88]();
}

uint64_t type metadata accessor for ResolveQuery()
{
  return MEMORY[0x1E0DA3D90]();
}

uint64_t type metadata accessor for RRDataSourceMetadataValue()
{
  return MEMORY[0x1E0DA3DC8]();
}

uint64_t type metadata accessor for RRQuery()
{
  return MEMORY[0x1E0DA3DE8]();
}

uint64_t RREntity.appBundleId.getter()
{
  return MEMORY[0x1E0DA3E08]();
}

uint64_t RREntity.id.getter()
{
  return MEMORY[0x1E0DA3E20]();
}

uint64_t RREntity.metadata.getter()
{
  return MEMORY[0x1E0DA3E40]();
}

uint64_t RREntity.usoEntity.getter()
{
  return MEMORY[0x1E0DA3E48]();
}

uint64_t type metadata accessor for RREntity()
{
  return MEMORY[0x1E0DA3E50]();
}

uint64_t type metadata accessor for RRResult()
{
  return MEMORY[0x1E0DA3EB0]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  MEMORY[0x1E0C95DE8]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x1E0C95E00]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x1E0C95F08]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x1E0C95F20]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x1E0C961D0]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x1E0C96410]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return MEMORY[0x1E0DEF4B8]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return MEMORY[0x1E0DEF560]();
}

uint64_t static DispatchQoS.background.getter()
{
  return MEMORY[0x1E0DEF570]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x1E0DEF580]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t DispatchTime.advanced(by:)()
{
  return MEMORY[0x1E0DEF6A0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x1E0DEF750]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1E0DE9D60]();
}

uint64_t Array.init()()
{
  return MEMORY[0x1E0DE9D70]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1E0CB17D8]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB17F8]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1E0DE9E38]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DE9E60](a1);
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t Character.isWhitespace.getter()
{
  return MEMORY[0x1E0DEA258]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x1E0DF1FA0]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1E0DEA5F8]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEA610]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t String.removeSubrange(_:)()
{
  return MEMORY[0x1E0DEA668]();
}

uint64_t String.init(validatingUTF8:)()
{
  return MEMORY[0x1E0DEA678]();
}

uint64_t String.debugDescription.getter()
{
  return MEMORY[0x1E0DEA698]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x1E0DEA7C8]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA7D8]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x1E0DEA7F0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

uint64_t String.remove(at:)()
{
  return MEMORY[0x1E0DEA820]();
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1E0DEA828]();
}

{
  return MEMORY[0x1E0DEA830]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x1E0DEA840]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t String.UTF16View.subscript.getter()
{
  return MEMORY[0x1E0DEA938]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1E0DEA940](a1._countAndFlagsBits, a1._object);
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x1E0DEA950]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1E0DEAA08]();
}

{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t String.init(_:)()
{
  return MEMORY[0x1E0DEAA20]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1E0DEAAA8]();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return MEMORY[0x1E0DEAB28]();
}

uint64_t Sequence<>.joined(separator:)()
{
  return MEMORY[0x1E0DEABB0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEADA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1E0CB1AC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t Array.debugDescription.getter()
{
  return MEMORY[0x1E0DEADF0]();
}

uint64_t static Array.+ infix(_:_:)()
{
  return MEMORY[0x1E0DEADF8]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x1E0DEAF78]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t static TaskPriority.background.getter()
{
  return MEMORY[0x1E0DF06F8]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x1E0DF0700]();
}

uint64_t static TaskPriority.low.getter()
{
  return MEMORY[0x1E0DF0728]();
}

uint64_t static TaskPriority.high.getter()
{
  return MEMORY[0x1E0DF0730]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1E0DF0750]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x1E0DF0870]();
}

uint64_t Task<>.value.getter()
{
  return MEMORY[0x1E0DF08A8]();
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x1E0DF08B8]();
}

uint64_t static Task<>.sleep(nanoseconds:)()
{
  return MEMORY[0x1E0DF08D0]();
}

uint64_t static Task<>.sleep<A>(until:tolerance:clock:)()
{
  return MEMORY[0x1E0DF08E0]();
}

uint64_t ThrowingTaskGroup.next(isolation:)()
{
  return MEMORY[0x1E0DF0958]();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
  MEMORY[0x1E0DF09A8]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x1E0DEAFE8]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x1E0DEB160]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1E0CB1BB0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t KVItemType.description.getter()
{
  return MEMORY[0x1E0D98F20]();
}

uint64_t KVFieldType.audioType.getter()
{
  return MEMORY[0x1E0D98F28]();
}

uint64_t KVFieldType.description.getter()
{
  return MEMORY[0x1E0D98F30]();
}

uint64_t NSDictionary.makeIterator()()
{
  return MEMORY[0x1E0CB1CA8]();
}

uint64_t NSDictionary.Iterator.next()()
{
  return MEMORY[0x1E0CB1CB8]();
}

uint64_t NSEnumerator.makeIterator()()
{
  return MEMORY[0x1E0CB1CD0]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t SASRecognition.toAFSpeechPackage(utteranceStart:processedAudioDuration:isFinal:)()
{
  return MEMORY[0x1E0DA4708]();
}

uint64_t OS_dispatch_group.wait(timeout:)()
{
  return MEMORY[0x1E0DEF7D8]();
}

Swift::Void __swiftcall OS_dispatch_group.wait()()
{
  MEMORY[0x1E0DEF7E0]();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return MEMORY[0x1E0DEF800]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x1E0DEF840]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x1E0DEF8F8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return MEMORY[0x1E0DEF920]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1E0DF22A0]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x1E0DEFA60]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x1E0DEFA68]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t SISchemaComponentName.description.getter()
{
  return MEMORY[0x1E0D99108]();
}

uint64_t IQFMapsPersonalizationRanker.rankedEvents(for:completion:)()
{
  return MEMORY[0x1E0D3AAC8]();
}

uint64_t POMMESSchemaPOMMESPegasusRequestGeoAppResolutionType.description.getter()
{
  return MEMORY[0x1E0D99158]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x1E0CB2020]();
}

uint64_t NSCoder.decodeArrayOfObjects<A>(ofClass:forKey:)()
{
  return MEMORY[0x1E0CB2050]();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x1E0CB20E0](integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEFCD8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x1E0DEB930]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEBA00]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEBA80]();
}

uint64_t Substring.init(_:)()
{
  return MEMORY[0x1E0DEBB50]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return MEMORY[0x1E0CB2400]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x1E0CB2410]();
}

uint64_t StringProtocol.lowercased(with:)()
{
  return MEMORY[0x1E0CB2418]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)()
{
  return MEMORY[0x1E0CB24B0]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return MEMORY[0x1E0DEFF58]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x1E0DEBFC0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1E0DEC110]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEC168](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1E0DEC280]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1E0DEC338]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t static ContinuousClock.Instant.now.getter()
{
  return MEMORY[0x1E0DF0B48]();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return MEMORY[0x1E0DF0B50]();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return MEMORY[0x1E0DF0B60]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x1E0DF0B98]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x1E0DF0BA0]();
}

uint64_t LazyMapSequence<>.startIndex.getter()
{
  return MEMORY[0x1E0DEC820]();
}

uint64_t LazyMapSequence<>.endIndex.getter()
{
  return MEMORY[0x1E0DEC838]();
}

uint64_t LazyMapSequence<>.formIndex(after:)()
{
  return MEMORY[0x1E0DEC840]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x1E0DECBF8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t LazySequenceProtocol.filter(_:)()
{
  return MEMORY[0x1E0DECE30]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x1E0DECE70]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)()
{
  return MEMORY[0x1E0DF0D38]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1E0DECFC0]();
}

{
  return MEMORY[0x1E0DECFC8]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED0F0]();
}

{
  return MEMORY[0x1E0DED0F8]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DED1A0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1E0DED1B0](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x1E0DED768]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t Clock.measure(_:)()
{
  return MEMORY[0x1E0DF0F08]();
}

uint64_t Error<>._code.getter()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t Error<>._domain.getter()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x1E0DEDF18](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t Duration.description.getter()
{
  return MEMORY[0x1E0DEE758]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t AFDeviceSupportsSAE()
{
  return MEMORY[0x1E0CFE438]();
}

uint64_t AFDeviceSupportsSystemAssistantExperience()
{
  return MEMORY[0x1E0CFE468]();
}

uint64_t AFEffectiveSiriBundleForLocation()
{
  return MEMORY[0x1E0CFE498]();
}

uint64_t AFIsATV()
{
  return MEMORY[0x1E0CFE4B0]();
}

uint64_t AFIsHorseman()
{
  return MEMORY[0x1E0CFE4C0]();
}

uint64_t AFIsInternalInstall()
{
  return MEMORY[0x1E0CFE4D0]();
}

uint64_t AFNavigationStateIsNavigating()
{
  return MEMORY[0x1E0CFE578]();
}

uint64_t AFSupportsMultiUser()
{
  return MEMORY[0x1E0CFE740]();
}

uint64_t AFSupportsSiriInCall()
{
  return MEMORY[0x1E0CFE750]();
}

uint64_t AFUserIdentityClassficationGetName()
{
  return MEMORY[0x1E0CFE788]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

uint64_t KVFieldTypeToNumber()
{
  return MEMORY[0x1E0D42AB0]();
}

uint64_t KVItemTypeToNumber()
{
  return MEMORY[0x1E0D42AF8]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

uint64_t _AFPreferencesCountryCode()
{
  return MEMORY[0x1E0CFEAE0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1E0DEEA50]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1E0C84678]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8640](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_db_filename(sqlite3 *db, const char *zDbName)
{
  return (const char *)MEMORY[0x1E0DE8740](db, zDbName);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x1E0DE8780](db);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1E0DE8790](*(_QWORD *)&a1);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocBox()
{
  return MEMORY[0x1E0DEEB48]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x1E0DEEB70]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1E0DEEB78]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x1E0DEED00]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1E0DEED10]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1E0DEED80]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_isCancelled()
{
  return MEMORY[0x1E0DF1020]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1E0C85D80](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
  MEMORY[0x1E0C85DB0](activity, criteria);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

void xpc_activity_unregister(const char *identifier)
{
  MEMORY[0x1E0C85DD0](identifier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

