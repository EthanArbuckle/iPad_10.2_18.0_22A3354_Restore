void sub_19382B1EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19382B6DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19382B948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19382BF6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19382C0EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19382C700(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__51(uint64_t a1)
{

}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

id MRGetOriginFromUserInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOriginUserInfoKey"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("kMRNowPlayingPlayerPathUserInfoKey"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "origin");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

id MRGetClientFromUserInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("kMRNowPlayingClientUserInfoKey"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("kMRNowPlayingPlayerPathUserInfoKey"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "client");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

id MRGetPlayerFromUserInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("kMRNowPlayingPlayerUserInfoKey"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("kMRNowPlayingPlayerPathUserInfoKey"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "player");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

void MRNotificationServiceClientPostNotificationCallback(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;

  v7 = a1;
  v8 = a4;
  v9 = a3;
  MRCreateDecodedUserInfo(a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "objectForKey:", CFSTR("kMRActiveNowPlayingPlayerPathUserInfoKey"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setActivePlayerPath:", v12);

  }
  objc_msgSend(v9, "notificationClient");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "notificationQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __MRNotificationServiceClientPostNotificationCallback_block_invoke;
  v20[3] = &unk_1E30CB280;
  v21 = v9;
  v22 = v7;
  v23 = v11;
  v24 = v8;
  v15 = v8;
  v16 = v11;
  v17 = v7;
  v18 = v9;
  MRCreateDonatedQosBlock(v20);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  dispatch_async(v14, v19);

}

id MRCreateDonatedQosBlock(void *a1)
{
  id v1;
  qos_class_t v2;
  dispatch_block_t v3;

  v1 = a1;
  v2 = qos_class_self();
  v3 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, v2, 0, v1);

  return v3;
}

char *MRCreateStringFromXPCMessage(void *a1, const char *a2)
{
  char *string;

  string = (char *)xpc_dictionary_get_string(a1, a2);
  if (string)
    string = (char *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", string);
  return string;
}

uint64_t MRCreatePropertyListFromXPCMessage(void *a1, const char *a2)
{
  UInt8 *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  id v7;

  v2 = (UInt8 *)MRCreateDataFromXPCMessage(a1, a2);
  if (v2)
  {
    v7 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v2, 0, 0, &v7);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = v7;
    if (v4)
    {
      _MRLogForCategory(0);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        MRCreatePropertyListFromXPCMessage_cold_1();

    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

const UInt8 *MRCreateDataFromXPCMessage(void *a1, const char *a2)
{
  const UInt8 *result;
  size_t length;

  length = 0;
  result = (const UInt8 *)xpc_dictionary_get_data(a1, a2, &length);
  if (result)
    return (const UInt8 *)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], result, length);
  return result;
}

uint64_t MRGetPlayerPathFromUserInfo(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("kMRNowPlayingPlayerPathUserInfoKey"));
}

void sub_19382F178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19382F328(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id MRCreateDecodedUserInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFData *v13;
  const __CFData *v14;
  const __CFData *ErrorFromExternalRepresentation;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  void *v56;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)objc_msgSend(v1, "mutableCopy");
    v4 = v3;
    if (v3)
    {
      _MRDecodeObjectForKey(v3, (uint64_t)CFSTR("kMRNowPlayingPlayerPathUserInfoKey"), (uint64_t)CFSTR("kMRNowPlayingPlayerPathDataUserInfoKey"), &__block_literal_global_76_0);
      objc_msgSend(v4, "objectForKey:", CFSTR("kMRNowPlayingPlayerPathUserInfoKey"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      if (v5)
      {
        objc_msgSend(v5, "origin");
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (v7)
        {
          objc_msgSend(v6, "origin");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKey:", v8, CFSTR("kMRMediaRemoteOriginUserInfoKey"));

        }
        objc_msgSend(v6, "client");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          objc_msgSend(v4, "setObject:forKey:", v9, CFSTR("kMRNowPlayingClientUserInfoKey"));
          objc_msgSend(v9, "displayName");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (v10)
            objc_msgSend(v4, "setObject:forKey:", v10, CFSTR("kMRMediaRemoteNowPlayingApplicationDisplayNameUserInfoKey"));

        }
        objc_msgSend(v6, "player");
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v11)
        {
          objc_msgSend(v6, "player");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKey:", v12, CFSTR("kMRNowPlayingPlayerUserInfoKey"));

        }
      }
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRActiveNowPlayingPlayerPathUserInfoKey"), (uint64_t)CFSTR("kMRActiveNowPlayingPlayerPathDataUserInfoKey"), &__block_literal_global_77);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMROriginActiveNowPlayingPlayerPathUserInfoKey"), (uint64_t)CFSTR("kMROriginActiveNowPlayingPlayerPathDataUserInfoKey"), &__block_literal_global_78_0);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRNowPlayingClientUserInfoKey"), (uint64_t)CFSTR("kMRNowPlayingClientDataUserInfoKey"), &__block_literal_global_79_1);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRNowPlayingPlayerUserInfoKey"), (uint64_t)CFSTR("kMRNowPlayingPlayerDataUserInfoKey"), &__block_literal_global_80);
      objc_msgSend(v4, "objectForKey:", CFSTR("_kMRMediaRemotePlaybackErrorDataUserInfoKey"));
      v13 = (const __CFData *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        ErrorFromExternalRepresentation = MRMediaRemoteCreateErrorFromExternalRepresentation(v13);
        if (ErrorFromExternalRepresentation)
        {
          objc_msgSend(v4, "setObject:forKey:", ErrorFromExternalRepresentation, CFSTR("kMRMediaRemotePlaybackErrorUserInfoKey"));
        }
        else
        {
          _MRLogForCategory(0);
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            MRCreateDecodedUserInfo_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);

        }
      }
      objc_msgSend(v4, "removeObjectForKey:", CFSTR("_kMRMediaRemotePlaybackErrorDataUserInfoKey"));

      objc_msgSend(v4, "objectForKey:", CFSTR("kMRApplicationActivityUserInfoDataKey"));
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = (void *)v24;
      if (v24)
      {
        v26 = (void *)_MRApplicationActivityCreateWithExternalRepresentation(v24);
        if (v26)
        {
          objc_msgSend(v4, "setObject:forKey:", v26, CFSTR("kMRApplicationActivityUserInfoKey"));
        }
        else
        {
          _MRLogForCategory(0);
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            MRCreateDecodedUserInfo_cold_2(v27, v28, v29, v30, v31, v32, v33, v34);

        }
      }
      objc_msgSend(v4, "removeObjectForKey:", CFSTR("kMRApplicationActivityUserInfoDataKey"));

      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRPairedDeviceUserInfoKey"), (uint64_t)CFSTR("kMRPairedDeviceUserInfoDataKey"), &__block_literal_global_82);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRPreviousPairedDeviceUserInfoKey"), (uint64_t)CFSTR("kMRPreviousPairedDeviceUserInfoDataKey"), &__block_literal_global_84);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRMediaRemoteOriginUserInfoKey"), (uint64_t)CFSTR("kMRMediaRemoteOriginDataUserInfoKey"), &__block_literal_global_86);
      objc_msgSend(v4, "objectForKey:", CFSTR("kMRMediaRemoteUpdatedContentItemsDataUserInfoKey"));
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v35;
      if (v35)
      {
        v37 = MRContentItemsCreateFromExternalRepresentation(v35);
        if (v37)
        {
          objc_msgSend(v4, "setObject:forKey:", v37, CFSTR("kMRMediaRemoteUpdatedContentItemsUserInfoKey"));
        }
        else
        {
          _MRLogForCategory(0);
          v38 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            MRCreateDecodedUserInfo_cold_1(v38, v39, v40, v41, v42, v43, v44, v45);

        }
      }
      objc_msgSend(v4, "removeObjectForKey:", CFSTR("kMRMediaRemoteUpdatedContentItemsDataUserInfoKey"));

      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackSessionRequestUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackSessionRequestDataUserInfoKey"), &__block_literal_global_89);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackSessionUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackSessionDataUserInfoKey"), &__block_literal_global_92);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackQueueRequestUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackQueueRequestDataUserInfoKey"), &__block_literal_global_94);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackQueueUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackQueueDataUserInfoKey"), &__block_literal_global_96);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("kMRSupportedCommandsUserInfoKey"), (uint64_t)CFSTR("kMRSupportedCommandsDataUserInfoKey"), &__block_literal_global_98);
      _MRDecodeObjectForKey(v4, (uint64_t)CFSTR("MRAVEndpointOutputDeviceUserInfoKey"), (uint64_t)CFSTR("MRAVEndpointOutputDeviceDataUserInfoKey"), &__block_literal_global_99);
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      _MRUnarchiveObjectForKey(v4, v46, (uint64_t)CFSTR("MRActiveGroupSessionInfoUserInfoKey"), (uint64_t)CFSTR("_MRGroupSessionInfoDataUserInfoKey"));

      v47 = (void *)MEMORY[0x1E0C99E60];
      v48 = objc_opt_class();
      v49 = objc_opt_class();
      objc_msgSend(v47, "setWithObjects:", v48, v49, objc_opt_class(), 0);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      _MRUnarchiveObjectForKey(v4, v50, (uint64_t)CFSTR("MRGroupSessionEligibilityStatusUserInfoKey"), (uint64_t)CFSTR("_MRGroupSessionEligibilityStatusDataUserInfoKey"));

      objc_msgSend(v4, "objectForKey:", CFSTR("kMRNowPlayingClientUserInfoKey"));
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      if ((int)objc_msgSend(v51, "processIdentifier") >= 1)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v51, "processIdentifier"));
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setObject:forKey:", v52, CFSTR("kMRMediaRemoteNowPlayingApplicationPIDUserInfoKey"));

      }
      objc_msgSend(v4, "objectForKey:", CFSTR("kMRMediaRemotePlaybackStateUserInfoKey"));
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = v53;
      if (v53)
      {
        v55 = objc_msgSend(v53, "intValue");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", MRMediaRemotePlaybackStateIsAdvancing(v55));
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setObject:forKey:", v56, CFSTR("kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey"));

      }
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void _MRDecodeObjectForKey(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void (**v8)(id, void *);
  void *v9;
  void *v10;
  NSObject *v11;

  v7 = a1;
  v8 = a4;
  objc_msgSend(v7, "objectForKey:", a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v8[2](v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_msgSend(v7, "setObject:forKey:", v10, a2);
    }
    else
    {
      _MRLogForCategory(0);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        _MRDecodeObjectForKey_cold_1();

    }
  }
  objc_msgSend(v7, "removeObjectForKey:", a3);

}

void _MRUnarchiveObjectForKey(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a2;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___MRUnarchiveObjectForKey_block_invoke;
  v9[3] = &unk_1E30CA210;
  v10 = v7;
  v8 = v7;
  _MRDecodeObjectForKey(a1, a3, a4, v9);

}

BOOL MRMediaRemotePlaybackStateIsAdvancing(int a1)
{
  return (a1 & 0xFFFFFFFB) == 1;
}

void sub_193830E2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *MRContentItemsCreateFromExternalRepresentation(void *result)
{
  if (result)
  {
    MRCreateArrayFromData(result, &__block_literal_global_95);
    return (void *)objc_claimAutoreleasedReturnValue();
  }
  return result;
}

uint64_t MRGetContentItemsFromUserInfo(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteUpdatedContentItemsUserInfoKey"));
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x194036C44](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x194036C44](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x194036C44](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x194036C44](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t MRContentItemCopyUserInfo(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  return v3;
}

uint64_t MRContentItemCopyDeviceSpecificUserInfo(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "deviceSpecificUserInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  return v3;
}

id MREncodeObjectWithEncoding(void *a1, uint64_t a2)
{
  void *v2;
  id v4;
  uint64_t v5;

  v4 = a1;
  if (v4)
  {
    if (a2 == 1)
    {
      objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v4, 0, 0);
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
    if (!a2)
    {
      MSVArchivedDataWithRootObject();
      v5 = objc_claimAutoreleasedReturnValue();
LABEL_7:
      v2 = (void *)v5;
    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t MRContentItemGetNumberOfSections(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "numberOfSections");

  return v2;
}

uint64_t MRContentItemGetITunesStoreSubscriptionIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "iTunesStoreSubscriptionIdentifier");

  return v2;
}

uint64_t MRContentItemGetIsExplicitItem(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isExplicitItem");

  return v2;
}

uint64_t MRContentItemGetReportingAdamID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "reportingAdamID");

  return v2;
}

uint64_t MRContentItemGetLyricsAdamID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "lyricsAdamID");

  return v2;
}

uint64_t MRContentItemGetSeasonNumber(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "seasonNumber");

  return v2;
}

uint64_t MRContentItemGetEpisodeNumber(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "episodeNumber");

  return v2;
}

uint64_t MRContentItemGetPlayCount(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "playCount");

  return v2;
}

uint64_t MRContentItemGetIsContainer(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isContainer");

  return v2;
}

uint64_t MRNowPlayingClientCopyBundleIdentifierHierarchy(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFArrayRef MRNowPlayingClientCopyBundleIdentifierHierarchy(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 190, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "bundleIdentifierHierarchy");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

void _onQueue_MRInvokeClientAssetCallbacks(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id *v49;
  _QWORD *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  _QWORD block[4];
  id v60;
  _QWORD v61[4];
  NSObject *v62;
  _QWORD v63[4];
  NSObject *v64;
  _QWORD v65[4];
  NSObject *v66;
  _QWORD v67[4];
  NSObject *v68;
  _QWORD v69[4];
  NSObject *v70;
  _QWORD v71[4];
  NSObject *v72;
  _QWORD v73[4];
  NSObject *v74;
  _QWORD v75[4];
  NSObject *v76;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  _MRLogForCategory(1uLL);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    _onQueue_MRInvokeClientCallbacks_cold_1((uint64_t)v10, v11, v14);

  if (v9)
  {
    if (v10)
      goto LABEL_5;
LABEL_30:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientAssetCallbacks(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "handleFailureInFunction:file:lineNumber:description:", v55, CFSTR("MRPlaybackQueueServiceClient.m"), 115, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

    if (v11)
      goto LABEL_6;
    goto LABEL_31;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientAssetCallbacks(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "handleFailureInFunction:file:lineNumber:description:", v53, CFSTR("MRPlaybackQueueServiceClient.m"), 114, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientState"));

  if (!v10)
    goto LABEL_30;
LABEL_5:
  if (v11)
    goto LABEL_6;
LABEL_31:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientAssetCallbacks(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "handleFailureInFunction:file:lineNumber:description:", v57, CFSTR("MRPlaybackQueueServiceClient.m"), 116, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("item"));

LABEL_6:
  v15 = dispatch_group_create();
  if (objc_msgSend(v10, "includeMetadata"))
  {
    objc_msgSend(v10, "skeleton");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setIncludeMetadata:", 1);
    dispatch_group_enter(v15);
    objc_msgSend(v9, "clientCallbacks");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "metadataCallbacks");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "callbacks");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v75[0] = MEMORY[0x1E0C809B0];
    v75[1] = 3221225472;
    v75[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke;
    v75[3] = &unk_1E30C8040;
    v76 = v15;
    _onQueue_MRInvokeClientCallbacks(v9, v19, v16, v11, 1, v12, v75);

  }
  if (objc_msgSend(v10, "includeLanguageOptions"))
  {
    objc_msgSend(v10, "skeleton");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setIncludeLanguageOptions:", 1);
    dispatch_group_enter(v15);
    objc_msgSend(v9, "clientCallbacks");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "languageOptionsCallbacks");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "callbacks");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v73[0] = MEMORY[0x1E0C809B0];
    v73[1] = 3221225472;
    v73[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_2;
    v73[3] = &unk_1E30C8040;
    v74 = v15;
    _onQueue_MRInvokeClientCallbacks(v9, v23, v20, v11, 0, v12, v73);

  }
  if (objc_msgSend(v10, "includeInfo"))
  {
    objc_msgSend(v10, "skeleton");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setIncludeInfo:", 1);
    dispatch_group_enter(v15);
    objc_msgSend(v9, "clientCallbacks");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "infoCallbacks");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "callbacks");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v71[0] = MEMORY[0x1E0C809B0];
    v71[1] = 3221225472;
    v71[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_3;
    v71[3] = &unk_1E30C8040;
    v72 = v15;
    _onQueue_MRInvokeClientCallbacks(v9, v27, v24, v11, 0, v12, v71);

  }
  if (objc_msgSend(v10, "includeAlignments"))
  {
    objc_msgSend(v10, "skeleton");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setIncludeAlignments:", 1);
    dispatch_group_enter(v15);
    objc_msgSend(v9, "clientCallbacks");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "transcriptAlignmentsCallbacks");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "callbacks");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v69[0] = MEMORY[0x1E0C809B0];
    v69[1] = 3221225472;
    v69[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_4;
    v69[3] = &unk_1E30C8040;
    v70 = v15;
    _onQueue_MRInvokeClientCallbacks(v9, v31, v28, v11, 0, v12, v69);

  }
  if (objc_msgSend(v10, "includeLyrics"))
  {
    objc_msgSend(v10, "skeleton");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setIncludeLyrics:", 1);
    dispatch_group_enter(v15);
    objc_msgSend(v9, "clientCallbacks");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "lyricsCallbacks");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "callbacks");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v67[0] = MEMORY[0x1E0C809B0];
    v67[1] = 3221225472;
    v67[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_5;
    v67[3] = &unk_1E30C8040;
    v68 = v15;
    _onQueue_MRInvokeClientCallbacks(v9, v35, v32, v11, 0, v12, v67);

  }
  if (objc_msgSend(v10, "includeAvailableArtworkFormats"))
  {
    objc_msgSend(v10, "skeleton");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setIncludeAvailableArtworkFormats:", 1);
    dispatch_group_enter(v15);
    objc_msgSend(v9, "clientCallbacks");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "availableArtworkFormatsCallbacks");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "callbacks");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v65[0] = MEMORY[0x1E0C809B0];
    v65[1] = 3221225472;
    v65[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_6;
    v65[3] = &unk_1E30C8040;
    v66 = v15;
    _onQueue_MRInvokeClientCallbacks(v9, v39, v36, v11, 0, v12, v65);

  }
  if ((objc_msgSend(v10, "includeArtwork") & 1) != 0 || objc_msgSend(v10, "includeRemoteArtwork"))
  {
    objc_msgSend(v10, "skeleton");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "artworkWidth");
    objc_msgSend(v40, "setArtworkWidth:");
    objc_msgSend(v10, "artworkHeight");
    objc_msgSend(v40, "setArtworkHeight:");
    objc_msgSend(v10, "requestedArtworkFormats");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setRequestedArtworkFormats:", v41);

    objc_msgSend(v10, "requestedRemoteArtworkFormats");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setRequestedRemoteArtworkFormats:", v42);

    objc_msgSend(v40, "requestedArtworkFormats");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = v13;
    if (objc_msgSend(v43, "count"))
    {

    }
    else
    {
      objc_msgSend(v40, "requestedRemoteArtworkFormats");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v44, "count");

      if (!v45)
      {
        if (!objc_msgSend(v40, "includeArtwork"))
          goto LABEL_25;
        dispatch_group_enter(v15);
        objc_msgSend(v9, "clientCallbacks");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "artworkCallbacks");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "callbacks");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v61[0] = MEMORY[0x1E0C809B0];
        v61[1] = 3221225472;
        v61[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_8;
        v61[3] = &unk_1E30C8040;
        v49 = (id *)&v62;
        v62 = v15;
        v50 = v61;
LABEL_24:
        _onQueue_MRInvokeClientCallbacks(v9, v48, v40, v11, 0, v12, v50);

        v13 = v58;
LABEL_25:

        goto LABEL_26;
      }
    }
    dispatch_group_enter(v15);
    objc_msgSend(v9, "clientCallbacks");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "formattedArtworkCallbacks");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "callbacks");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v63[0] = MEMORY[0x1E0C809B0];
    v63[1] = 3221225472;
    v63[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_7;
    v63[3] = &unk_1E30C8040;
    v49 = (id *)&v64;
    v64 = v15;
    v50 = v63;
    goto LABEL_24;
  }
LABEL_26:
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___onQueue_MRInvokeClientAssetCallbacks_block_invoke_9;
  block[3] = &unk_1E30C6770;
  v60 = v13;
  v51 = v13;
  dispatch_group_notify(v15, v12, block);

}

void _onQueue_MRInvokeClientCallbacks(void *a1, void *a2, void *a3, void *a4, char a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *SkeletonFrom;
  void *v22;
  NSObject *v23;
  id v24;
  id Error;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char v36;
  _QWORD block[4];
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  char v47;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a6;
  v18 = a7;
  if (v13)
  {
    if (v15)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientCallbacks(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, _Bool, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("MRPlaybackQueueServiceClient.m"), 73, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientState"));

    if (v15)
    {
LABEL_3:
      if (v16)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientCallbacks(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, _Bool, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, CFSTR("MRPlaybackQueueServiceClient.m"), 74, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

  if (v16)
  {
LABEL_4:
    if (v17)
      goto LABEL_5;
LABEL_15:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientCallbacks(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, _Bool, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, CFSTR("MRPlaybackQueueServiceClient.m"), 76, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("queue"));

    if (v18)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_14:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientCallbacks(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, _Bool, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "handleFailureInFunction:file:lineNumber:description:", v31, CFSTR("MRPlaybackQueueServiceClient.m"), 75, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("item"));

  if (!v17)
    goto LABEL_15;
LABEL_5:
  if (v18)
    goto LABEL_6;
LABEL_16:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRInvokeClientCallbacks(MRNowPlayingPlayerClient *__strong, NSArray<MSVCallback *> *__strong, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, _Bool, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", v35, CFSTR("MRPlaybackQueueServiceClient.m"), 77, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_6:
  _MRLogForCategory(1uLL);
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    _onQueue_MRInvokeClientCallbacks_cold_1((uint64_t)v15, v16, v19);

  objc_msgSend(v14, "firstObject");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    SkeletonFrom = (void *)MRContentItemCreateSkeletonFrom(v16);
    v22 = (void *)objc_msgSend(v15, "copy");
    objc_msgSend(v20, "queue");
    v36 = a5;
    v23 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___onQueue_MRInvokeClientCallbacks_block_invoke;
    block[3] = &unk_1E30CFB08;
    v38 = v13;
    v39 = v20;
    v40 = v22;
    v41 = SkeletonFrom;
    v42 = v17;
    v43 = v16;
    v44 = v14;
    v47 = v36;
    v45 = v15;
    v46 = v18;
    v24 = SkeletonFrom;
    Error = v22;
    dispatch_sync(v23, block);

  }
  else
  {
    Error = (id)MRMediaRemoteCreateError(14);
    (*((void (**)(id, id))v18 + 2))(v18, Error);
  }

}

void sub_193839010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _MRLogForCategory(unint64_t a1)
{
  if (a1 >= 0xF)
    _MRLogForCategory_cold_1();
  if (_MRLogForCategory_onceToken != -1)
    dispatch_once(&_MRLogForCategory_onceToken, &__block_literal_global_11);
  return (id)_MRLogForCategory___logs[a1];
}

uint64_t MRProcessIsMediaRemoteDaemon()
{
  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  return MRProcessIsMediaRemoteDaemon_isDaemon;
}

uint64_t MRMediaRemoteCreateError(uint64_t a1)
{
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithMRError:", a1);
}

CFStringRef MRMediaRemoteErrorCopyDescription(unint64_t a1)
{
  const __CFString *v1;

  if (a1 > 0xCA)
    v1 = CFSTR("Unknown Error");
  else
    v1 = off_1E30CC838[a1];
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

uint64_t MRContentItemCreateSkeletonFrom(void *a1)
{
  objc_msgSend(a1, "skeleton");
  return objc_claimAutoreleasedReturnValue();
}

void *MRContentItemCreateFromRequest(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t j;
  void *v33;
  void *v34;
  MRDataArtwork *v35;
  double v36;
  double v37;
  double v38;
  double v40;
  double v41;
  double v42;
  void *v43;
  MRDataArtwork *v44;
  void *v45;
  void *v46;
  void *v48;
  void *v49;
  MRDataArtwork *v50;
  void *v51;
  MRArtwork *v53;
  void *v54;
  void *v55;
  MRArtwork *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  void *v71;
  void *v72;
  MRArtwork *v73;
  id v74;
  void *v75;
  BOOL v76;
  id obj;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    v5 = 0;
    goto LABEL_66;
  }
  v5 = (void *)MRContentItemCopy(v3);
  if (v4)
  {
    if ((MRPlaybackQueueRequestGetIncludeMetadata(v4) & 1) == 0)
      objc_msgSend(v5, "setMetadata:", 0);
    if ((MRPlaybackQueueRequestGetIncludeLanguageOptions(v4) & 1) == 0)
    {
      objc_msgSend(v5, "setCurrentLanguageOptions:", 0);
      objc_msgSend(v5, "setAvailableLanguageOptions:", 0);
    }
    if ((MRPlaybackQueueRequestGetIncludeInfo(v4) & 1) == 0)
      objc_msgSend(v5, "setInfo:", 0);
    if (MRPlaybackQueueRequestGetIncludeSections(v4))
    {
      objc_msgSend(v5, "sections");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(v3, "sections");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = (void *)MRContentItemsCreateFromRequest(v7, v4);

        v9 = (void *)objc_msgSend(v8, "mutableCopy");
        objc_msgSend(v5, "setSections:", v9);

      }
    }
    else
    {
      objc_msgSend(v5, "setSections:", 0);
    }
    if ((objc_msgSend(v4, "includeAvailableArtworkFormats") & 1) == 0)
      objc_msgSend(v5, "setAvailableArtworkFormats:", 0);
    v75 = v5;
    if ((objc_msgSend(v4, "includeRemoteArtwork") & 1) != 0)
    {
      if (objc_msgSend(v4, "includeRemoteArtwork"))
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = 0u;
        v83 = 0u;
        v84 = 0u;
        v85 = 0u;
        v11 = v4;
        objc_msgSend(v4, "requestedRemoteArtworkFormats");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v82, v87, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v83;
          do
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v83 != v15)
                objc_enumerationMutation(v12);
              v17 = *(_QWORD *)(*((_QWORD *)&v82 + 1) + 8 * i);
              objc_msgSend(v3, "remoteArtworks");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "objectForKeyedSubscript:", v17);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "setObject:forKeyedSubscript:", v19, v17);

            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v82, v87, 16);
          }
          while (v14);
        }

        v20 = (void *)objc_msgSend(v10, "copy");
        v5 = v75;
        objc_msgSend(v75, "setRemoteArtworks:", v20);

        v4 = v11;
      }
    }
    else
    {
      objc_msgSend(v5, "setRemoteArtworks:", 0);
    }
    if (!MRPlaybackQueueRequestGetIncludeArtwork(v4))
    {
      objc_msgSend(v5, "setArtwork:", 0);
      objc_msgSend(v5, "setArtworks:", 0);
      goto LABEL_66;
    }
    if (MRPlaybackQueueRequestGetIncludeArtwork(v4))
    {
      objc_msgSend(v4, "requestedArtworkFormats");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "count");

      if (v22)
      {
        objc_msgSend(v4, "artworkWidth");
        v24 = v23;
        objc_msgSend(v4, "artworkHeight");
        v26 = v25;
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v74 = v4;
        objc_msgSend(v4, "requestedArtworkFormats");
        obj = (id)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v86, 16);
        if (v28)
        {
          v29 = v28;
          v30 = *(_QWORD *)v79;
          v31 = v24 == -1.0;
          if (v26 != -1.0)
            v31 = 0;
          v76 = v31;
          do
          {
            for (j = 0; j != v29; ++j)
            {
              if (*(_QWORD *)v79 != v30)
                objc_enumerationMutation(obj);
              v33 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * j);
              objc_msgSend(v5, "artworks");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "objectForKeyedSubscript:", v33);
              v35 = (MRDataArtwork *)objc_claimAutoreleasedReturnValue();

              if (v35)
                goto LABEL_38;
              if (objc_msgSend(v33, "isEqualToString:", CFSTR("MRContentItemArtworkFormatStandard")))
              {
                objc_msgSend(v3, "artwork");
                v43 = (void *)objc_claimAutoreleasedReturnValue();

                if (v43)
                {
                  v44 = [MRDataArtwork alloc];
                  objc_msgSend(v3, "artwork");
                  v45 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v45, "imageData");
                  v46 = (void *)objc_claimAutoreleasedReturnValue();
                  v35 = -[MRDataArtwork initWithImageData:](v44, "initWithImageData:", v46);

                  v5 = v75;
                  if (v35)
                  {
LABEL_38:
                    -[MRDataArtwork dimensions](v35, "dimensions");
                    v37 = v36;
                    -[MRDataArtwork dimensions](v35, "dimensions");
                    if (v24 + 0.5 >= v37 && v26 + 0.5 >= v38)
                      goto LABEL_60;
                    v40 = v38;
                    v41 = v37;
                    if (!v76)
                    {
                      v42 = v37 / v38;
                      if (v24 == -1.0)
                      {
                        v41 = v26 * v42;
                        v40 = v26;
                      }
                      else
                      {
                        v40 = v26;
                        v41 = v24;
                        if (v26 == -1.0)
                        {
                          v41 = v24;
                          v40 = v24 / v42;
                        }
                      }
                    }
                    if (v41 + 0.5 < v37 || v40 + 0.5 < v38)
                    {
                      -[MRDataArtwork imageData](v35, "imageData", v41 + 0.5);
                      v48 = (void *)objc_claimAutoreleasedReturnValue();
                      +[MRImageUtilities resizeImageData:forFittingSize:error:](MRImageUtilities, "resizeImageData:forFittingSize:error:", v48, 0, v41, v40);
                      v49 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v49)
                      {
                        v50 = -[MRDataArtwork initWithImageData:]([MRDataArtwork alloc], "initWithImageData:", v49);
                        objc_msgSend(v27, "setObject:forKeyedSubscript:", v50, v33);

                        v5 = v75;
                      }

                    }
                    else
                    {
LABEL_60:
                      objc_msgSend(v27, "setObject:forKeyedSubscript:", v35, v33);
                    }

                  }
                }
              }
            }
            v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v86, 16);
          }
          while (v29);
        }

        v51 = (void *)objc_msgSend(v27, "copy");
        objc_msgSend(v75, "setArtworks:", v51);

        v5 = v75;
        objc_msgSend(v75, "setArtwork:", 0);

        v4 = v74;
        goto LABEL_66;
      }
      objc_msgSend(v3, "artwork");
      v53 = (MRArtwork *)objc_claimAutoreleasedReturnValue();
      if (!v53)
      {
        objc_msgSend(v3, "artworks");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "objectForKeyedSubscript:", CFSTR("MRContentItemArtworkFormatStandard"));
        v55 = (void *)objc_claimAutoreleasedReturnValue();

        if (v55)
        {
          v56 = [MRArtwork alloc];
          objc_msgSend(v3, "artworks");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v57, "objectForKeyedSubscript:", CFSTR("MRContentItemArtworkFormatStandard"));
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "imageData");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v53 = -[MRArtwork initWithImageData:height:width:](v56, "initWithImageData:height:width:", v59, 0, 0);

        }
        else
        {
          v53 = 0;
        }

        v5 = v75;
      }
      v60 = -[MRArtwork width](v53, "width");
      v61 = -[MRArtwork height](v53, "height");
      if (!v53
        || v60 < 1
        || v61 < 1
        || (v64 = (double)v60,
            v65 = (double)v61,
            MRPlaybackQueueRequestGetArtworkWidth(v4),
            v67 = v66,
            MRPlaybackQueueRequestGetArtworkHeight(v4),
            v67 + 0.5 >= (double)v60)
        && (v63 = v62 + 0.5, v62 + 0.5 >= v65))
      {
LABEL_89:
        objc_msgSend(v5, "setArtwork:", v53, v62, v63);
        objc_msgSend(v5, "setArtworks:", 0);

        goto LABEL_66;
      }
      if (v67 != -1.0 || (v68 = (double)v60, v69 = v65, v62 != -1.0))
      {
        v70 = v64 / v65;
        if (v67 == -1.0)
        {
          v68 = v70 * v62;
        }
        else
        {
          if (v62 == -1.0)
          {
            v68 = v67;
            v69 = v67 / v70;
            goto LABEL_84;
          }
          v68 = v67;
        }
        v69 = v62;
      }
LABEL_84:
      v63 = v68 + 0.5;
      if (v68 + 0.5 < v64 || (v62 = v69 + 0.5, v69 + 0.5 < v65))
      {
        MRContentItemSetArtworkData(v5, 0);
        MRContentItemSetArtworkDataSize(v5, 0, 0);
        -[MRArtwork imageData](v53, "imageData");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        +[MRImageUtilities resizeImageData:forFittingSize:error:](MRImageUtilities, "resizeImageData:forFittingSize:error:", v71, 0, v68, v69);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        if (v72)
        {
          v73 = -[MRArtwork initWithImageData:height:width:]([MRArtwork alloc], "initWithImageData:height:width:", v72, (uint64_t)v69, (uint64_t)v68);

          v53 = v73;
          v5 = v75;
        }

      }
      goto LABEL_89;
    }
  }
LABEL_66:

  return v5;
}

uint64_t MRPlaybackQueueRequestGetIncludeSections(void *a1)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRPlaybackQueueRequestGetIncludeSections(MRPlaybackQueueRequestRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 227, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  return objc_msgSend(a1, "includeSections");
}

uint64_t MRPlaybackQueueRequestGetIncludeMetadata(void *a1)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRPlaybackQueueRequestGetIncludeMetadata(MRPlaybackQueueRequestRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 211, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  return objc_msgSend(a1, "includeMetadata");
}

uint64_t MRPlaybackQueueRequestGetIncludeLanguageOptions(void *a1)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRPlaybackQueueRequestGetIncludeLanguageOptions(MRPlaybackQueueRequestRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 243, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  return objc_msgSend(a1, "includeLanguageOptions");
}

uint64_t MRPlaybackQueueRequestGetIncludeInfo(void *a1)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRPlaybackQueueRequestGetIncludeInfo(MRPlaybackQueueRequestRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 235, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  return objc_msgSend(a1, "includeInfo");
}

BOOL MRPlaybackQueueRequestGetIncludeArtwork(void *a1)
{
  id v2;
  double v3;
  double v4;
  _BOOL8 v5;
  void *v7;
  void *v8;
  uint64_t v9;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRPlaybackQueueRequestGetIncludeArtwork(MRPlaybackQueueRequestRef)");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_opt_class();
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 251, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

    }
  }
  v2 = a1;
  objc_msgSend(v2, "artworkHeight");
  if (fabs(v3) <= 2.22044605e-16)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v2, "artworkWidth");
    v5 = fabs(v4) > 2.22044605e-16;
  }

  return v5;
}

void sub_19383CBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id MRCreateFromData(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = (void *)MEMORY[0x194036A64]();
    MSVUnarchivedObjectOfClasses();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t _MRDeviceInfoMessageProtobuf_DeviceClassFromModel(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xD)
    return result;
  else
    return 0xFFFFFFFFLL;
}

id MRCreateDataFromObject(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)MEMORY[0x194036A64]();
    MSVArchivedDataWithRootObject();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t MRMediaRemoteCommandInfoGetEnabled(void *a1)
{
  return objc_msgSend(a1, "isEnabled");
}

void MRContentItemSetElapsedTime(void *a1, double a2)
{
  id v4;
  void *v5;
  double v6;
  void *v7;
  char v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  void *v14;
  char v15;
  void *v16;
  id v17;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    return;
  }
  MRCreateItemMetadataIfNotPresent(a1);
  v4 = a1;
  objc_msgSend(v4, "metadata");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "elapsedTime");
  if (v6 != a2)
  {

    goto LABEL_7;
  }
  objc_msgSend(v4, "metadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hasElapsedTime");

  if ((v8 & 1) == 0)
  {
LABEL_7:
    objc_msgSend(v4, "metadata");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setElapsedTime:", a2);

  }
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v11 = v10;
  MRCreateItemMetadataIfNotPresent(v4);
  v17 = v4;
  objc_msgSend(v17, "metadata");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "elapsedTimeTimestamp");
  if (v13 == v11)
  {
    objc_msgSend(v17, "metadata");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "hasElapsedTimeTimestamp");

    if ((v15 & 1) != 0)
      goto LABEL_13;
  }
  else
  {

  }
  objc_msgSend(v17, "metadata");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setElapsedTimeTimestamp:", v11);

LABEL_13:
}

void MRSupportedCommandsCalculateDeltas(void *a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v28 = a4;
  v29 = a5;
  v27 = a3;
  v40 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v6, "count"));
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v35 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        objc_msgSend(v14, "dictionaryRepresentation");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v14, "command"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v15, v16);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    }
    while (v11);
  }
  v26 = v9;

  v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v7, "count"));
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v18 = v7;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v31;
    do
    {
      for (j = 0; j != v20; ++j)
      {
        if (*(_QWORD *)v31 != v21)
          objc_enumerationMutation(v18);
        v23 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
        objc_msgSend(v23, "dictionaryRepresentation", v26, v27, v28, v29, (_QWORD)v30);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v23, "command"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v24, v25);

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v20);
  }

  MRDictionaryCalculateDeltas(v8, v17, v27, v28, v29);
}

void *MRMediaRemoteCopyCommandDescription(uint64_t a1)
{
  int v1;
  void *result;
  const __CFString *v3;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<Unrecognized Command: %u>"), a1);
  result = (void *)objc_claimAutoreleasedReturnValue();
  v3 = CFSTR("Play");
  switch(v1)
  {
    case 0:
      goto LABEL_75;
    case 1:
      v3 = CFSTR("Pause");
      goto LABEL_75;
    case 2:
      v3 = CFSTR("TogglePlayPause");
      goto LABEL_75;
    case 3:
      v3 = CFSTR("Stop");
      goto LABEL_75;
    case 4:
      v3 = CFSTR("NextTrack");
      goto LABEL_75;
    case 5:
      v3 = CFSTR("PreviousTrack");
      goto LABEL_75;
    case 6:
      v3 = CFSTR("AdvanceShuffleMode");
      goto LABEL_75;
    case 7:
      v3 = CFSTR("AdvanceRepeatMode");
      goto LABEL_75;
    case 8:
      v3 = CFSTR("BeginFastForward");
      goto LABEL_75;
    case 9:
      v3 = CFSTR("EndFastForward");
      goto LABEL_75;
    case 10:
      v3 = CFSTR("BeginRewind");
      goto LABEL_75;
    case 11:
      v3 = CFSTR("EndRewind");
      goto LABEL_75;
    case 12:
      v3 = CFSTR("Rewind15Seconds");
      goto LABEL_75;
    case 13:
      v3 = CFSTR("FastForward15Seconds");
      goto LABEL_75;
    case 14:
      v3 = CFSTR("Rewind30Seconds");
      goto LABEL_75;
    case 15:
      v3 = CFSTR("FastForward30Seconds");
      goto LABEL_75;
    case 16:
      v3 = CFSTR("ToggleRecord");
      goto LABEL_75;
    case 17:
      v3 = CFSTR("SkipForward");
      goto LABEL_75;
    case 18:
      v3 = CFSTR("SkipBackward");
      goto LABEL_75;
    case 19:
      v3 = CFSTR("ChangePlaybackRateCommand");
      goto LABEL_75;
    case 20:
      v3 = CFSTR("RateTrack");
      goto LABEL_75;
    case 21:
      v3 = CFSTR("LikeTrack");
      goto LABEL_75;
    case 22:
      v3 = CFSTR("DislikeTrack");
      goto LABEL_75;
    case 23:
      v3 = CFSTR("BookmarkTrack");
      goto LABEL_75;
    case 24:
      v3 = CFSTR("SeekToPlaybackPosition");
      goto LABEL_75;
    case 25:
      v3 = CFSTR("SetRepeatMode");
      goto LABEL_75;
    case 26:
      v3 = CFSTR("SetShuffleMode");
      goto LABEL_75;
    case 27:
      v3 = CFSTR("EnableLanguageOption");
      goto LABEL_75;
    case 28:
      v3 = CFSTR("DisableLanguageOption");
      goto LABEL_75;
    case 100:
      v3 = CFSTR("NextChapter");
      goto LABEL_75;
    case 101:
      v3 = CFSTR("PreviousChapter");
      goto LABEL_75;
    case 102:
      v3 = CFSTR("NextAlbum");
      goto LABEL_75;
    case 103:
      v3 = CFSTR("PreviousAlbum");
      goto LABEL_75;
    case 104:
      v3 = CFSTR("NextPlaylist");
      goto LABEL_75;
    case 105:
      v3 = CFSTR("PreviousPlaylist");
      goto LABEL_75;
    case 106:
      v3 = CFSTR("BanTrack");
      goto LABEL_75;
    case 107:
      v3 = CFSTR("AddTrackToWishList");
      goto LABEL_75;
    case 108:
      v3 = CFSTR("RemoveTrackFromWishList");
      goto LABEL_75;
    case 109:
      v3 = CFSTR("NextInContext");
      goto LABEL_75;
    case 110:
      v3 = CFSTR("PreviousInContext");
      goto LABEL_75;
    case 111:
      v3 = CFSTR("Menu");
      goto LABEL_75;
    case 112:
      v3 = CFSTR("Select");
      goto LABEL_75;
    case 113:
      v3 = CFSTR("UpArrow");
      goto LABEL_75;
    case 114:
      v3 = CFSTR("DownArrow");
      goto LABEL_75;
    case 115:
      v3 = CFSTR("BacklightOff");
      goto LABEL_75;
    case 116:
      v3 = CFSTR("ResetPlaybackTimeout");
      goto LABEL_75;
    case 117:
      v3 = CFSTR("BuyTrack");
      goto LABEL_75;
    case 118:
      v3 = CFSTR("BuyAlbum");
      goto LABEL_75;
    case 119:
      v3 = CFSTR("PreOrderAlbum");
      goto LABEL_75;
    case 120:
      v3 = CFSTR("CancelDownload");
      goto LABEL_75;
    case 121:
      v3 = CFSTR("CreateRadioStation");
      goto LABEL_75;
    case 122:
      v3 = CFSTR("SetPlaybackQueue");
      goto LABEL_75;
    case 123:
      v3 = CFSTR("PresentUpNext");
      goto LABEL_75;
    case 124:
      v3 = CFSTR("SetSleepTimer");
      goto LABEL_75;
    case 125:
      v3 = CFSTR("InsertIntoPlaybackQueue");
      goto LABEL_75;
    case 126:
      v3 = CFSTR("PresentSharingOptions");
      goto LABEL_75;
    case 127:
      v3 = CFSTR("AddNowPlayingItemToLibrary");
      goto LABEL_75;
    case 128:
      v3 = CFSTR("AddItemToLibrary");
      goto LABEL_75;
    case 129:
      v3 = CFSTR("RemoveFromPlaybackQueue");
      goto LABEL_75;
    case 130:
      v3 = CFSTR("ReorderPlaybackQueue");
      goto LABEL_75;
    case 131:
      v3 = CFSTR("PlayItemInPlaybackQueue");
      goto LABEL_75;
    case 132:
      v3 = CFSTR("PrepareForSetQueue");
      goto LABEL_75;
    case 133:
      v3 = CFSTR("SetPlaybackSession");
      goto LABEL_75;
    case 134:
      v3 = CFSTR("Reshuffle");
      goto LABEL_75;
    case 135:
      v3 = CFSTR("ChangeQueueEndAction");
      goto LABEL_75;
    case 136:
      v3 = CFSTR("PreloadPlaybackSession");
      goto LABEL_75;
    case 137:
      v3 = CFSTR("SetPriorityForPlaybackSession");
      goto LABEL_75;
    case 138:
      v3 = CFSTR("DiscardPlaybackSession");
      goto LABEL_75;
    case 139:
      v3 = CFSTR("LeaveSharedPlaybackSession");
      goto LABEL_75;
    case 140:
      v3 = CFSTR("PostEventNotice");
      goto LABEL_75;
    case 142:
      v3 = CFSTR("VocalsControl");
      goto LABEL_75;
    case 143:
      v3 = CFSTR("PrepareVocalsControl");
      goto LABEL_75;
    case 144:
      v3 = CFSTR("ClearUpNextQueue");
      goto LABEL_75;
    case 145:
      v3 = CFSTR("PerformDialogAction");
LABEL_75:

      result = (void *)v3;
      break;
    default:
      return result;
  }
  return result;
}

void MRContentItemSetPlaybackRate(void *a1, float a2)
{
  id v4;
  void *v5;
  float v6;
  void *v7;
  char v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  char v16;
  void *v17;
  id v18;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    return;
  }
  MRCreateItemMetadataIfNotPresent(a1);
  v4 = a1;
  objc_msgSend(v4, "metadata");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "playbackRate");
  if (v6 != a2)
  {

    goto LABEL_7;
  }
  objc_msgSend(v4, "metadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hasPlaybackRate");

  if ((v8 & 1) == 0)
  {
LABEL_7:
    objc_msgSend(v4, "metadata");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(float *)&v10 = a2;
    objc_msgSend(v9, "setPlaybackRate:", v10);

  }
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v12 = v11;
  MRCreateItemMetadataIfNotPresent(v4);
  v18 = v4;
  objc_msgSend(v18, "metadata");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "elapsedTimeTimestamp");
  if (v14 == v12)
  {
    objc_msgSend(v18, "metadata");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "hasElapsedTimeTimestamp");

    if ((v16 & 1) != 0)
      goto LABEL_13;
  }
  else
  {

  }
  objc_msgSend(v18, "metadata");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setElapsedTimeTimestamp:", v12);

LABEL_13:
}

void MRContentItemSetMetadataRef(void *a1, uint64_t a2, void *a3)
{
  void (**v5)(id, void *, _QWORD);

  v5 = a3;
  if (a2)
    MRCreateItemMetadataIfNotPresent(a1);
  v5[2](v5, a1, a2);

}

void MRCreateItemMetadataIfNotPresent(void *a1)
{
  void *v1;
  MRContentItemMetadata *v2;
  id v3;

  v3 = a1;
  objc_msgSend(v3, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v1)
  {
    v2 = objc_alloc_init(MRContentItemMetadata);
    objc_msgSend(v3, "setMetadata:", v2);

  }
}

void MRContentItemMerge(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a1 == a2)
    {
      _MRLogForCategory(0);
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        MRContentItemMerge_cold_1((uint64_t)a2, v3);
    }
    else
    {
      v3 = a1;
      v4 = (void *)objc_msgSend(a2, "copy");
      -[NSObject identifier](v3, "identifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v5, "isEqualToString:", v6);

      if ((v7 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemMerge(MRContentItemRef, MRContentItemRef)");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, CFSTR("MRContentItem_Deprecated.m"), 1542, CFSTR("Trying to Merge incompatible ContentItems %@ != %@"), v3, a2);

      }
      objc_msgSend(v4, "sections");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        v9 = objc_alloc(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v4, "sections");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = (void *)objc_msgSend(v9, "initWithCapacity:", objc_msgSend(v10, "count"));

        v12 = objc_alloc(MEMORY[0x1E0C99E08]);
        -[NSObject sections](v3, "sections");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)objc_msgSend(v12, "initWithCapacity:", objc_msgSend(v13, "count"));

        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        -[NSObject sections](v3, "sections");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v39;
          do
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_QWORD *)v39 != v18)
                objc_enumerationMutation(v15);
              objc_msgSend(v14, "setObject:forKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i), MRContentItemGetIdentifier(*(void **)(*((_QWORD *)&v38 + 1) + 8 * i)));
            }
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
          }
          while (v17);
        }

        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        objc_msgSend(v4, "sections");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
        if (v21)
        {
          v22 = v21;
          v23 = *(_QWORD *)v35;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v35 != v23)
                objc_enumerationMutation(v20);
              v25 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * j);
              objc_msgSend(v14, "objectForKeyedSubscript:", MRContentItemGetIdentifier(v25));
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = (void *)v26;
              if (v26)
              {
                MRContentItemMerge(v26, v25);
                v28 = v11;
                v29 = v27;
              }
              else
              {
                v28 = v11;
                v29 = v25;
              }
              objc_msgSend(v28, "addObject:", v29);

            }
            v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
          }
          while (v22);
        }

        -[NSObject setSections:](v3, "setSections:", 0);
        objc_msgSend(v4, "setSections:", v11);

      }
      objc_msgSend(v4, "currentLanguageOptions");
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      if (v30)
        -[NSObject setCurrentLanguageOptions:](v3, "setCurrentLanguageOptions:", 0);
      objc_msgSend(v4, "availableLanguageOptions");
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      if (v31)
        -[NSObject setAvailableLanguageOptions:](v3, "setAvailableLanguageOptions:", 0);
      -[NSObject mergeFrom:](v3, "mergeFrom:", v4);

    }
  }
}

void sub_193840DDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MRContentItemIdentifierIsEqual(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  if (a1 == a2)
    return 1;
  v3 = a2;
  objc_msgSend(a1, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v4, "isEqualToString:", v5);
  return v6;
}

CFTypeRef MRContentItemGetIdentifier(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "identifier");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

uint64_t MRCreateDurationStringRepresentation(double a1)
{
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%02d:%02d:%02d (%lf)"), ((int)a1 / 3600), ((int)a1 / 60 % 60), ((int)a1 % 60), *(_QWORD *)&a1);
}

void MRDictionaryCalculateDeltas(void *a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;

  v9 = a1;
  v10 = a2;
  v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v14 = MEMORY[0x1E0C809B0];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __MRDictionaryCalculateDeltas_block_invoke;
  v23[3] = &unk_1E30CC788;
  v19 = v10;
  v24 = v19;
  v15 = v13;
  v25 = v15;
  v16 = v12;
  v26 = v16;
  objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v23);
  v20[0] = v14;
  v20[1] = 3221225472;
  v20[2] = __MRDictionaryCalculateDeltas_block_invoke_5;
  v20[3] = &unk_1E30CC7B0;
  v21 = v9;
  v17 = v11;
  v22 = v17;
  v18 = v9;
  objc_msgSend(v19, "enumerateKeysAndObjectsUsingBlock:", v20);
  if (a3)
    *a3 = objc_retainAutorelease(v17);
  if (a4)
    *a4 = objc_retainAutorelease(v16);
  if (a5)
    *a5 = objc_retainAutorelease(v15);

}

uint64_t MRContentItemGetMediaType(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "mediaType");

  return v2;
}

uint64_t MRContentItemGetMediaSubType(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "mediaSubType");

  return v2;
}

BOOL _MRNowPlayingPlayerPathProtobufReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRNowPlayingPlayerProtobuf *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_MRNowPlayingPlayerProtobuf);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || (_MRNowPlayingPlayerProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_MROriginProtobuf);
        objc_storeStrong(a1 + 2, v18);
        if (!PBReaderPlaceMark() || (_MROriginProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_34;
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_31:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_MRNowPlayingClientProtobuf);
    objc_storeStrong(a1 + 1, v18);
    if (!PBReaderPlaceMark() || (_MRNowPlayingClientProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
      goto LABEL_34;
    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MROriginProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _MRDeviceInfoMessageProtobuf *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_47;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_49:
        v38 = 28;
        goto LABEL_54;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v24;

        goto LABEL_59;
      case 3u:
        v26 = 0;
        v27 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v19 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_53:
        v38 = 24;
LABEL_54:
        *(_DWORD *)(a1 + v38) = v19;
        goto LABEL_59;
      case 4u:
        v31 = objc_alloc_init(_MRDeviceInfoMessageProtobuf);
        objc_storeStrong((id *)(a1 + 8), v31);
        if (PBReaderPlaceMark() && (_MRDeviceInfoMessageProtobufReadFrom((uint64_t)v31, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_59:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 5u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_58:
        *(_BYTE *)(a1 + 32) = v34 != 0;
        goto LABEL_59;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_59;
    }
  }
}

uint64_t _MRNowPlayingClientProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  _MRColorProtobuf *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_61;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_63;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_61:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_63:
        v44 = 56;
        goto LABEL_72;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
        goto LABEL_59;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 48;
        goto LABEL_59;
      case 4u:
        v26 = 0;
        v27 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 76) |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v19 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_67:
        v44 = 60;
        goto LABEL_72;
      case 5u:
        v31 = 0;
        v32 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v19 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_71:
        v44 = 40;
LABEL_72:
        *(_DWORD *)(a1 + v44) = v19;
        goto LABEL_77;
      case 6u:
        v36 = objc_alloc_init(_MRColorProtobuf);
        objc_storeStrong((id *)(a1 + 64), v36);
        if (PBReaderPlaceMark() && _MRColorProtobufReadFrom((uint64_t)v36, a2))
        {
          PBReaderRecallMark();
LABEL_50:

LABEL_77:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 7u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
        goto LABEL_59;
      case 8u:
        PBReaderReadString();
        v36 = (_MRColorProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v36)
          objc_msgSend((id)a1, "addExtendedBundleIdentifierHierarchy:", v36);
        goto LABEL_50;
      case 9u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 76) |= 8u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_76:
        *(_BYTE *)(a1 + 72) = v39 != 0;
        goto LABEL_77;
      case 0xAu:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 32;
LABEL_59:
        v43 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_77;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_77;
    }
  }
}

uint64_t _MRNowPlayingPlayerProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 56;
              goto LABEL_51;
            case 2u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 40;
              goto LABEL_51;
            case 4u:
              v20 = 0;
              v21 = 0;
              v22 = 0;
              *(_BYTE *)(a1 + 64) |= 2u;
              while (2)
              {
                v23 = *v3;
                v24 = *(_QWORD *)(a2 + v23);
                if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
                  *(_QWORD *)(a2 + v23) = v24 + 1;
                  v22 |= (unint64_t)(v25 & 0x7F) << v20;
                  if (v25 < 0)
                  {
                    v20 += 7;
                    v14 = v21++ >= 9;
                    if (v14)
                    {
                      LODWORD(v22) = 0;
                      goto LABEL_55;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v22) = 0;
LABEL_55:
              v38 = 36;
              goto LABEL_60;
            case 5u:
              if (v16 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v26 = 0;
                  v27 = 0;
                  v28 = 0;
                  while (1)
                  {
                    v29 = *v3;
                    v30 = *(_QWORD *)(a2 + v29);
                    if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
                    *(_QWORD *)(a2 + v29) = v30 + 1;
                    v28 |= (unint64_t)(v31 & 0x7F) << v26;
                    if (v31 < 0)
                    {
                      v26 += 7;
                      v14 = v27++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_42;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
                  PBRepeatedInt64Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                v39 = 0;
                v40 = 0;
                v41 = 0;
                while (1)
                {
                  v42 = *v3;
                  v43 = *(_QWORD *)(a2 + v42);
                  if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
                  *(_QWORD *)(a2 + v42) = v43 + 1;
                  v41 |= (unint64_t)(v44 & 0x7F) << v39;
                  if (v44 < 0)
                  {
                    v39 += 7;
                    v14 = v40++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_72;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_72:
                PBRepeatedInt64Add();
              }
LABEL_61:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            case 6u:
              v32 = 0;
              v33 = 0;
              v22 = 0;
              *(_BYTE *)(a1 + 64) |= 1u;
              while (2)
              {
                v34 = *v3;
                v35 = *(_QWORD *)(a2 + v34);
                if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
                  *(_QWORD *)(a2 + v34) = v35 + 1;
                  v22 |= (unint64_t)(v36 & 0x7F) << v32;
                  if (v36 < 0)
                  {
                    v32 += 7;
                    v14 = v33++ >= 9;
                    if (v14)
                    {
                      LODWORD(v22) = 0;
                      goto LABEL_59;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v22) = 0;
LABEL_59:
              v38 = 32;
LABEL_60:
              *(_DWORD *)(a1 + v38) = v22;
              goto LABEL_61;
            case 7u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 48;
LABEL_51:
              v37 = *(void **)(a1 + v19);
              *(_QWORD *)(a1 + v19) = v18;

              goto LABEL_61;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_61;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

float MRContentItemGetPlaybackRate(void *a1)
{
  void *v1;
  float v2;
  float v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "playbackRate");
  v3 = v2;

  return v3;
}

uint64_t MRContentItemGetLyrics()
{
  return 0;
}

uint64_t MRAVOutputDeviceGetType(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "deviceType");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyLocalDeviceLocalizedName()
{
  void *v0;
  void *v1;
  uint64_t v2;

  v0 = (void *)MEMORY[0x194036A64]();
  +[MRAVOutputDevice localDeviceLocalizedName](MRAVOutputDevice, "localDeviceLocalizedName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  objc_autoreleasePoolPop(v0);
  return v2;
}

void sub_193846564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938467B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193846A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193846B38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void MRAddPlayerPathToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = a2;
  if (a1 && v3)
  {
    v9 = v3;
    v4 = a1;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRAddPlayerPathToXPCMessage(__strong xpc_object_t, MRNowPlayingPlayerPathRef)");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_opt_class();
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRSerializationUtility.m"), 208, CFSTR("Type mismatch, expecting %@ found %@"), v8, objc_opt_class());

    }
    objc_msgSend(v9, "data");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    xpc_dictionary_set_data(v4, "MRXPC_NOWPLAYING_PLAYER_PATH_DATA_KEY", (const void *)objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"));

    v3 = v9;
  }

}

id MRCreateEncodedUserInfo(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *ExternalRepresentation;
  NSObject *v7;
  __CFError *v8;
  CFDataRef ErrorExternalRepresentation;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  id v14;
  _QWORD v16[4];
  id v17;

  v1 = a1;
  v2 = v1;
  if (v1)
    v3 = (id)objc_msgSend(v1, "mutableCopy");
  else
    v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v4 = v3;
  _MREncodeObjectForKey(v3, (uint64_t)CFSTR("kMRMediaRemoteOriginUserInfoKey"), (uint64_t)CFSTR("kMRMediaRemoteOriginDataUserInfoKey"), &__block_literal_global_109_0);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRNowPlayingClientUserInfoKey"), (uint64_t)CFSTR("kMRNowPlayingClientDataUserInfoKey"), &__block_literal_global_111);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRNowPlayingPlayerUserInfoKey"), (uint64_t)CFSTR("kMRNowPlayingPlayerDataUserInfoKey"), &__block_literal_global_113);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRNowPlayingPlayerPathUserInfoKey"), (uint64_t)CFSTR("kMRNowPlayingPlayerPathDataUserInfoKey"), &__block_literal_global_115);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRActiveNowPlayingPlayerPathUserInfoKey"), (uint64_t)CFSTR("kMRActiveNowPlayingPlayerPathDataUserInfoKey"), &__block_literal_global_116);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMROriginActiveNowPlayingPlayerPathUserInfoKey"), (uint64_t)CFSTR("kMROriginActiveNowPlayingPlayerPathDataUserInfoKey"), &__block_literal_global_117);
  v5 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("kMRMediaRemoteUpdatedContentItemsUserInfoKey"));
  if (v5)
  {
    ExternalRepresentation = MRContentItemsCreateExternalRepresentation(v5);
    if (ExternalRepresentation)
    {
      objc_msgSend(v4, "setObject:forKey:", ExternalRepresentation, CFSTR("kMRMediaRemoteUpdatedContentItemsDataUserInfoKey"));
    }
    else
    {
      _MRLogForCategory(0);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        _MREncodeObjectForKey_cold_1();

    }
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("kMRMediaRemoteUpdatedContentItemsUserInfoKey"));

  }
  v8 = (__CFError *)objc_msgSend(v4, "objectForKey:", CFSTR("kMRMediaRemotePlaybackErrorUserInfoKey"));
  if (v8)
  {
    ErrorExternalRepresentation = MRMediaRemoteCreateErrorExternalRepresentation(v8);
    if (ErrorExternalRepresentation)
    {
      objc_msgSend(v4, "setObject:forKey:", ErrorExternalRepresentation, CFSTR("_kMRMediaRemotePlaybackErrorDataUserInfoKey"));
    }
    else
    {
      _MRLogForCategory(0);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        _MREncodeObjectForKey_cold_1();

    }
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("kMRMediaRemotePlaybackErrorUserInfoKey"));

  }
  v11 = objc_msgSend(v4, "objectForKey:", CFSTR("kMRApplicationActivityUserInfoKey"));
  if (v11)
  {
    v12 = (void *)_MRApplicationActivityCreateExternalRepresentation(v11);
    if (v12)
    {
      objc_msgSend(v4, "setObject:forKey:", v12, CFSTR("kMRApplicationActivityUserInfoDataKey"));
    }
    else
    {
      _MRLogForCategory(0);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _MREncodeObjectForKey_cold_1();

    }
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("kMRApplicationActivityUserInfoKey"));

  }
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRPairedDeviceUserInfoKey"), (uint64_t)CFSTR("kMRPairedDeviceUserInfoDataKey"), &__block_literal_global_120);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRPreviousPairedDeviceUserInfoKey"), (uint64_t)CFSTR("kMRPreviousPairedDeviceUserInfoDataKey"), &__block_literal_global_122_0);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackSessionRequestUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackSessionRequestDataUserInfoKey"), &__block_literal_global_125);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackSessionUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackSessionDataUserInfoKey"), &__block_literal_global_128);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackQueueRequestUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackQueueRequestDataUserInfoKey"), &__block_literal_global_131);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRPlaybackQueueUserInfoKey"), (uint64_t)CFSTR("kMRPlaybackQueueDataUserInfoKey"), &__block_literal_global_134_1);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("kMRSupportedCommandsUserInfoKey"), (uint64_t)CFSTR("kMRSupportedCommandsDataUserInfoKey"), &__block_literal_global_136_0);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("MRAVEndpointOutputDeviceUserInfoKey"), (uint64_t)CFSTR("MRAVEndpointOutputDeviceDataUserInfoKey"), &__block_literal_global_138_0);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("MRActiveGroupSessionInfoUserInfoKey"), (uint64_t)CFSTR("_MRGroupSessionInfoDataUserInfoKey"), &__block_literal_global_140_0);
  _MREncodeObjectForKey(v4, (uint64_t)CFSTR("MRGroupSessionEligibilityStatusUserInfoKey"), (uint64_t)CFSTR("_MRGroupSessionEligibilityStatusDataUserInfoKey"), &__block_literal_global_142_0);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRCreateEncodedUserInfo_block_invoke_11;
  v16[3] = &unk_1E30CA498;
  v14 = v4;
  v17 = v14;
  objc_msgSend(v14, "enumerateKeysAndObjectsUsingBlock:", v16);

  return v14;
}

void _MREncodeObjectForKey(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void (**v8)(id, void *);
  void *v9;
  void *v10;
  NSObject *v11;

  v7 = a1;
  v8 = a4;
  objc_msgSend(v7, "objectForKey:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v8[2](v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_msgSend(v7, "setObject:forKey:", v10, a3);
    }
    else
    {
      _MRLogForCategory(0);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        _MREncodeObjectForKey_cold_1();

    }
    objc_msgSend(v7, "removeObjectForKey:", a2);

  }
}

void MRAddPropertyListToXPCMessage(void *a1, uint64_t a2, const char *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;

  v5 = a1;
  if (a2)
  {
    v9 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", a2, 200, 0, &v9);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v9;
    if (v6)
    {
      MRAddDataToXPCMessage(v5, v6, a3);
    }
    else
    {
      _MRLogForCategory(0);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        MRAddPropertyListToXPCMessage_cold_1();

    }
  }

}

void MRAddDataToXPCMessage(void *a1, id a2, const char *a3)
{
  id v5;
  const void *v6;
  size_t v7;
  xpc_object_t xdict;

  if (a2)
  {
    v5 = objc_retainAutorelease(a2);
    xdict = a1;
    v6 = (const void *)objc_msgSend(v5, "bytes");
    v7 = objc_msgSend(v5, "length");

    xpc_dictionary_set_data(xdict, a3, v6, v7);
  }
}

id AVOutputDeviceFunction()
{
  return (id)classAVOutputDevice;
}

id AVOutputDeviceFunction_0()
{
  return (id)classAVOutputDevice_0;
}

id AVOutputDeviceFunction_1()
{
  return (id)classAVOutputDevice_1;
}

BOOL MROutputDeviceIsAVOutputDeviceLocal(void *a1)
{
  return objc_msgSend(a1, "deviceType") != 0;
}

void sub_193849088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938492E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *MRContentItemsCreateExternalRepresentation(void *result)
{
  if (result)
  {
    MRCreateDataFromArray(result, &__block_literal_global_30_0);
    return (void *)objc_claimAutoreleasedReturnValue();
  }
  return result;
}

Class initAVOutputDevice()
{
  Class result;

  if (AVFoundationLibrary_sOnce_9 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_9, &__block_literal_global_202);
  result = objc_getClass("AVOutputDevice");
  classAVOutputDevice = (uint64_t)result;
  getAVOutputDeviceClass[0] = (uint64_t (*)())AVOutputDeviceFunction;
  return result;
}

Class initAVOutputDevice_0()
{
  Class result;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  result = objc_getClass("AVOutputDevice");
  classAVOutputDevice_0 = (uint64_t)result;
  getAVOutputDeviceClass_0[0] = (uint64_t (*)())AVOutputDeviceFunction_0;
  return result;
}

Class initAVOutputDevice_1()
{
  Class result;

  if (AVFoundationLibrary_sOnce_13 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_13, &__block_literal_global_84_0);
  result = objc_getClass("AVOutputDevice");
  classAVOutputDevice_1 = (uint64_t)result;
  getAVOutputDeviceClass_1[0] = (uint64_t (*)())AVOutputDeviceFunction_1;
  return result;
}

uint64_t MRPlaybackQueueRequestSetIncludeMetadata(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setIncludeMetadata:", a2);
}

uint64_t MRContentItemGetITunesStoreIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "iTunesStoreIdentifier");

  return v2;
}

uint64_t MRDeviceSupportsExternalTouchBarUI()
{
  return 0;
}

uint64_t MRAVOutputDeviceHasBatteryLevel(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "hasBatteryLevel");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyModelSpecificInformation(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "modelSpecificInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

CFStringRef MRMediaRemoteCopyRouteDiscoveryModeDescription(unsigned int a1)
{
  const __CFString *v1;

  if (a1 > 3)
    v1 = CFSTR("Unknown");
  else
    v1 = off_1E30D0378[a1];
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

id MRMediaRemoteEndpointFeaturesDescription(char a1)
{
  id v2;
  void *v3;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "appendString:", CFSTR("Audio|"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "appendString:", CFSTR("Screen|"));
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    objc_msgSend(v3, "appendString:", CFSTR("RemoteControl|"));
    if ((a1 & 0x10) == 0)
      return v3;
    goto LABEL_6;
  }
LABEL_10:
  objc_msgSend(v3, "appendString:", CFSTR("Video|"));
  if ((a1 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((a1 & 0x10) != 0)
LABEL_6:
    objc_msgSend(v3, "appendString:", CFSTR("Companion|"));
  return v3;
}

__CFString *MRAVOutputDeviceTypeCopyDescription(unsigned int a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E30CEC30[a1];
}

__CFString *MRAVOutputDeviceSubtypeCopyDescription(unsigned int a1)
{
  if (a1 > 0x15)
    return 0;
  else
    return off_1E30CEC60[a1];
}

id AVOutputDeviceBatteryLevelRightKeyFunction()
{
  return (id)constantValAVOutputDeviceBatteryLevelRightKey;
}

id AVOutputDeviceBatteryLevelLeftKeyFunction()
{
  return (id)constantValAVOutputDeviceBatteryLevelLeftKey;
}

id AVOutputDeviceBatteryLevelCaseKeyFunction()
{
  return (id)constantValAVOutputDeviceBatteryLevelCaseKey;
}

void sub_19384BDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19384C134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19384C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRMediaRemoteCopyLocalDeviceAirPlayReceiverBundleID()
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.%@"), 0);
  return objc_claimAutoreleasedReturnValue();
}

void sub_19384C358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRAVOutputDeviceSubtypeFromAVSubtype(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x13)
    return 0;
  else
    return dword_193ADA504[a1 - 1];
}

id initValAVOutputDeviceBatteryLevelRightKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_0 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_0, &__block_literal_global_620);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_0, "AVOutputDeviceBatteryLevelRightKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceBatteryLevelRightKey, *v0);
  getAVOutputDeviceBatteryLevelRightKey[0] = (uint64_t (*)())AVOutputDeviceBatteryLevelRightKeyFunction;
  return (id)constantValAVOutputDeviceBatteryLevelRightKey;
}

id initValAVOutputDeviceBatteryLevelLeftKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_0 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_0, &__block_literal_global_620);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_0, "AVOutputDeviceBatteryLevelLeftKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceBatteryLevelLeftKey, *v0);
  getAVOutputDeviceBatteryLevelLeftKey[0] = (uint64_t (*)())AVOutputDeviceBatteryLevelLeftKeyFunction;
  return (id)constantValAVOutputDeviceBatteryLevelLeftKey;
}

id initValAVOutputDeviceBatteryLevelCaseKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_0 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_0, &__block_literal_global_620);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_0, "AVOutputDeviceBatteryLevelCaseKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceBatteryLevelCaseKey, *v0);
  getAVOutputDeviceBatteryLevelCaseKey[0] = (uint64_t (*)())AVOutputDeviceBatteryLevelCaseKeyFunction;
  return (id)constantValAVOutputDeviceBatteryLevelCaseKey;
}

uint64_t MRContentItemCopyCollectionInfo(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "collectionInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  return v3;
}

const __CFString *MRMediaRemoteCopyPlaybackStateDescription(int a1)
{
  if ((a1 - 1) > 4)
    return CFSTR("Unknown");
  else
    return off_1E30C67D8[a1 - 1];
}

double MRContentItemGetDuration(void *a1)
{
  void *v1;
  double v2;
  double v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "duration");
  v3 = v2;

  return v3;
}

void *MRNowPlayingPlayerPathGetClient(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingClientRef MRNowPlayingPlayerPathGetClient(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 411, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "client");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

CFStringRef MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID()
{
  const __CFString *v0;

  if (_os_feature_enabled_impl())
    v0 = CFSTR("com.apple.sonic.music");
  else
    v0 = CFSTR("com.apple.Music");
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v0);
}

CFStringRef MRMediaRemoteCopyLocalDeviceSystemPodcastApplicationDisplayID()
{
  const __CFString *v0;

  if (_os_feature_enabled_impl())
    v0 = CFSTR("com.apple.sonic.podcasts");
  else
    v0 = CFSTR("com.apple.podcasts");
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v0);
}

uint64_t MRContentItemGetITunesStoreAlbumIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "iTunesStoreAlbumIdentifier");

  return v2;
}

CFTypeRef MRContentItemGetAlbumName(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "albumName");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

uint64_t MRCreatePlaybackQueueCapabilitiesFromXPCMessage(void *a1)
{
  return xpc_dictionary_get_uint64(a1, "MRXPC_NOWPLAYING_PLAYBACK_QUEUE_CAPABILITIES_KEY");
}

double MRContentItemGetElapsedTime(void *a1)
{
  void *v1;
  double v2;
  double v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "elapsedTime");
  v3 = v2;

  return v3;
}

CFTypeRef MRContentItemGetCollectionIdentifier(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "collectionIdentifier");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

uint64_t MRContentItemGetEpisodeType(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "episodeType");

  return v2;
}

void sub_19384E378(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t MRPlaybackQueueSetQueueID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setQueueIdentifier:", a2);
}

const UInt8 *MRCreateSupportedCommandsDataFromXPCMessage(void *a1)
{
  return MRCreateDataFromXPCMessage(a1, "MRXPC_COMMAND_INFO_ARRAY_DATA_KEY");
}

MRContentItem *MRContentItemCreate(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRContentItemRef MRContentItemCreate(CFAllocatorRef, CFStringRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 1365, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("identifier"));

  }
  return -[MRContentItem initWithIdentifier:]([MRContentItem alloc], "initWithIdentifier:", a2);
}

id kMXSession_SourceFormatInfoKey_BestAvailableContentType_MultichannelFunction()
{
  return (id)constantValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Multichannel;
}

id kMXSession_SourceFormatInfoKey_BestAvailableContentType_AtmosFunction()
{
  return (id)constantValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Atmos;
}

uint64_t MRContentItemHasPlaybackRate(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "hasPlaybackRate");

  return v2;
}

uint64_t MRContentItemGetIsPlayable(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isPlayable");

  return v2;
}

uint64_t MRContentItemGetHasInfo(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "infoAvailable");

  return v2;
}

uint64_t MRContentItemGetHasArtworkData(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "artworkAvailable");

  return v2;
}

uint64_t MRContentItemGetEditingStyleFlags(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "editingStyleFlags");

  return v2;
}

CFTypeRef MRContentItemGetTrackArtistName(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "trackArtistName");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

CFTypeRef MRContentItemGetAlbumArtistName(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "albumArtistName");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

uint64_t MRContentItemGetLegacyUniqueIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "legacyUniqueIdentifier");

  return v2;
}

uint64_t MRContentItemGetHasElapsedTime(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "hasElapsedTime");

  return v2;
}

id AVPairedDeviceFunction()
{
  return (id)classAVPairedDevice;
}

Class initAVPairedDevice()
{
  Class result;

  if (AVFoundationLibrary_sOnce_9 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_9, &__block_literal_global_202);
  result = objc_getClass("AVPairedDevice");
  classAVPairedDevice = (uint64_t)result;
  getAVPairedDeviceClass[0] = (uint64_t (*)())AVPairedDeviceFunction;
  return result;
}

uint64_t MRContentItemGetIsStreamingContent(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isStreamingContent");

  return v2;
}

uint64_t MRPlaybackQueueRequestGetRange(void *a1)
{
  id v2;
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFRange MRPlaybackQueueRequestGetRange(MRPlaybackQueueRequestRef)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_opt_class();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 193, CFSTR("Type mismatch, expecting %@ found %@"), v7, objc_opt_class());

    }
  }
  v2 = a1;
  v3 = objc_msgSend(v2, "location");
  objc_msgSend(v2, "length");

  return v3;
}

void sub_193850A90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MRMediaRemoteActiveEndpointTypeCopyDescription(unint64_t a1)
{
  __CFString *v1;

  if (a1 > 5)
    v1 = 0;
  else
    v1 = off_1E30CD418[a1];
  return -[__CFString copy](v1, "copy");
}

void sub_193850BEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const __CFString *MRContentItemsCopyMinimalReadableDescription(void *a1, uint64_t a2)
{
  return _MRContentItemsCopyReadableDescription(a1, a2, 1);
}

void _MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v9)
  {
    v9 = (id)MEMORY[0x1E0C80D38];
    v11 = MEMORY[0x1E0C80D38];
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    +[MRPlaybackQueueRequest defaultPlaybackQueueRequest](MRPlaybackQueueRequest, "defaultPlaybackQueueRequest");
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v7, "requestIdentifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "UUIDString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setRequestIdentifier:", v15);

  }
  objc_msgSend(v7, "label");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v16)
  {
    v17 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "processName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v17, "initWithFormat:", CFSTR("%@-%d"), v19, getpid());
    objc_msgSend(v7, "setLabel:", v20);

  }
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("playbackQueue"), v7);
  v22 = v21;
  if (v8)
    objc_msgSend(v21, "appendFormat:", CFSTR(" for %@"), v8);
  _MRLogForCategory(0xAuLL);
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v35 = v22;
    _os_log_impl(&dword_193827000, v23, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer_block_invoke;
  v29[3] = &unk_1E30CB410;
  v30 = v7;
  v31 = v12;
  v32 = v9;
  v33 = v10;
  v24 = v9;
  v25 = v10;
  v26 = v12;
  v27 = v7;
  v28 = (void *)MEMORY[0x194036C44](v29);
  _MRResolveAndRequestPlaybackQueue(v27, v8, v28);

}

void MRMediaRemoteNowPlayingResolvePlayerPath(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteNowPlayingResolvePlayerPath_block_invoke;
  v7[3] = &unk_1E30C7E58;
  v8 = v5;
  v6 = v5;
  MRMediaRemoteNowPlayingResolvePlayerPathWithID(a1, 0, 1, a2, v7);

}

void MRMediaRemoteNowPlayingResolvePlayerPathWithID(void *a1, void *a2, char a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  MRPlayerPath *v14;
  MRPlayerPath *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  MRPlayerPath *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void (*v30)(_QWORD *, MRPlayerPath *, _QWORD *);
  _QWORD *v31;
  id v32;
  MRPlayerPath *v33;
  id v34;
  void *v36;
  _QWORD v37[4];
  MRPlayerPath *v38;
  __CFString *v39;
  id v40;
  id v41;
  _QWORD *v42;
  char v43;
  _QWORD v44[4];
  id v45;
  id v46;
  _QWORD v47[4];
  MRPlayerPath *v48;
  __CFString *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint8_t buf[4];
  void *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a4;
  v10 = a5;
  if (!v9)
  {
    v9 = (id)MEMORY[0x1E0C80D38];
    v11 = MEMORY[0x1E0C80D38];
  }
  v12 = (void *)objc_msgSend(a1, "copy");
  v13 = v12;
  if (v12)
    v14 = v12;
  else
    v14 = objc_alloc_init(MRPlayerPath);
  v15 = v14;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v17 = v8;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "UUIDString");
    v17 = (id)objc_claimAutoreleasedReturnValue();

  }
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("resolvePlayerPath"), v17);
  v20 = v19;
  if (v15)
    objc_msgSend(v19, "appendFormat:", CFSTR(" for %@"), v15);
  v36 = v8;
  _MRLogForCategory(0xAuLL);
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v55 = v20;
    _os_log_impl(&dword_193827000, v21, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v22 = MEMORY[0x1E0C809B0];
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = __MRMediaRemoteNowPlayingResolvePlayerPathWithID_block_invoke;
  v47[3] = &unk_1E30CD4F0;
  v53 = v10;
  v23 = v15;
  v48 = v23;
  v49 = CFSTR("resolvePlayerPath");
  v24 = v17;
  v50 = v24;
  v51 = v16;
  v25 = v9;
  v52 = v25;
  v26 = v16;
  v27 = v10;
  v28 = (void *)MEMORY[0x194036C44](v47);
  v44[0] = v22;
  v44[1] = 3221225472;
  v44[2] = __MRMediaRemoteNowPlayingResolvePlayerPathWithID_block_invoke_4;
  v44[3] = &unk_1E30CD560;
  v45 = v25;
  v46 = &__block_literal_global_83;
  v29 = v25;
  v37[0] = v22;
  v37[1] = 3221225472;
  v37[2] = __MRMediaRemoteNowPlayingResolvePlayerPathWithID_block_invoke_6;
  v37[3] = &unk_1E30CD5D8;
  v43 = a3;
  v38 = v23;
  v39 = CFSTR("resolvePlayerPath");
  v40 = v24;
  v41 = v28;
  v42 = (_QWORD *)MEMORY[0x194036C44](v44);
  v30 = (void (*)(_QWORD *, MRPlayerPath *, _QWORD *))v42[2];
  v31 = v42;
  v32 = v24;
  v33 = v23;
  v34 = v28;
  v30(v31, v33, v37);

}

const __CFString *_MRContentItemsCopyReadableDescription(void *a1, uint64_t a2, char a3)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v17 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
          if ((a3 & 1) != 0)
          {
            v12 = (uint64_t)MRContentItemCopyMinimalReadableDescription(v11);
          }
          else
          {
            objc_msgSend(v11, "description", (_QWORD)v16);
            v12 = objc_claimAutoreleasedReturnValue();
          }
          v13 = (void *)v12;
          objc_msgSend(v5, "appendString:", v12, (_QWORD)v16);
          objc_msgSend(v5, "appendString:", CFSTR("\n"));

        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v8);
    }

    v14 = (const __CFString *)objc_msgSend(v5, "copy");
  }
  else
  {
    v14 = CFSTR("NULL");
  }

  return v14;
}

void *MRContentItemCopyMinimalReadableDescription(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double CalculatedPlaybackPosition;
  void *v9;
  void *v10;
  int v11;
  id v12;
  void *v13;
  float v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *StringRepresentation;
  void *v24;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("item:<%@"), MRContentItemGetIdentifier(v3));
  objc_msgSend(v3, "metadata");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "title");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("/%@"), MRContentItemGetTitle(v3));
    objc_msgSend(v4, "appendString:", v7);

  }
  CalculatedPlaybackPosition = MRContentItemGetCalculatedPlaybackPosition(v3);
  if (CalculatedPlaybackPosition != 0.0)
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("/CalculatedPlaybackPosition: %lf"), *(_QWORD *)&CalculatedPlaybackPosition);
    objc_msgSend(v4, "appendString:", v9);

  }
  objc_msgSend(v3, "metadata");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "hasPlaybackRate");

  if (v11)
  {
    v12 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v3, "metadata");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "playbackRate");
    v15 = (void *)objc_msgSend(v12, "initWithFormat:", CFSTR("/PlaybackRate: %lf"), v14);

    objc_msgSend(v4, "appendString:", v15);
  }
  objc_msgSend(v3, "currentLanguageOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {

  }
  else
  {
    objc_msgSend(v3, "availableLanguageOptions");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
      goto LABEL_11;
  }
  objc_msgSend(v4, "appendString:", CFSTR("/L"));
LABEL_11:
  objc_msgSend(v3, "artwork");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "imageData");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
  {
    v20 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v3, "artwork");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "imageData");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    StringRepresentation = (void *)MRDataCreateStringRepresentation(v22);
    v24 = (void *)objc_msgSend(v20, "initWithFormat:", CFSTR("/ArtworkData: %@"), StringRepresentation);

    objc_msgSend(v4, "appendString:", v24);
  }
  objc_msgSend(v4, "appendString:", CFSTR(">"));

  objc_autoreleasePoolPop(v2);
  return v4;
}

CFTypeRef MRContentItemGetTitle(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "title");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

double MRContentItemGetCalculatedPlaybackPosition(void *a1)
{
  void *v2;
  double CalculatedPlaybackPosition;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  CalculatedPlaybackPosition = _MRContentItemGetCalculatedPlaybackPosition(a1, v2);

  return CalculatedPlaybackPosition;
}

double _MRContentItemGetCalculatedPlaybackPosition(void *a1, void *a2)
{
  id v3;
  void *v4;
  double CalculatedPlaybackPosition;

  v3 = a2;
  objc_msgSend(a1, "metadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CalculatedPlaybackPosition = _MRContentItemMetadataGetCalculatedPlaybackPosition(v4, v3);

  return CalculatedPlaybackPosition;
}

double _MRContentItemMetadataGetCalculatedPlaybackPosition(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  double v10;
  double v11;
  double v12;

  v3 = a1;
  v4 = a2;
  v5 = 0.0;
  if (objc_msgSend(v3, "hasElapsedTime")
    && ((objc_msgSend(v3, "hasInferredTimestamp") & 1) != 0 || objc_msgSend(v3, "hasElapsedTimeTimestamp")))
  {
    if (objc_msgSend(v3, "hasElapsedTimeTimestamp"))
      objc_msgSend(v3, "elapsedTimeTimestamp");
    else
      objc_msgSend(v3, "inferredTimestamp");
    v7 = v6;
    v8 = 1.0;
    if (objc_msgSend(v3, "hasPlaybackRate"))
    {
      objc_msgSend(v3, "playbackRate");
      v8 = v9;
    }
    objc_msgSend(v4, "timeIntervalSinceReferenceDate");
    v11 = v10 - v7;
    objc_msgSend(v3, "elapsedTime");
    v5 = v12 + v11 * v8;
  }

  return v5;
}

void *MRPlaybackQueueCreateFromRequest(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  MRPlaybackQueue *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  if (!a1)
    return 0;
  v3 = a1;
  objc_msgSend(v3, "contentItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = MRContentItemsCreateFromRequest(v4, a2);

  v6 = objc_msgSend(v3, "hasLocation");
  v7 = [MRPlaybackQueue alloc];
  if (v6)
    v8 = -[MRPlaybackQueue initWithContentItems:location:](v7, "initWithContentItems:location:", v5, objc_msgSend(v3, "location"));
  else
    v8 = -[MRPlaybackQueue initWithContentItems:](v7, "initWithContentItems:", v5);
  v9 = (void *)v8;
  objc_msgSend(v3, "context");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setContext:", v10);

  objc_msgSend(v3, "queueIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setQueueIdentifier:", v11);

  objc_msgSend(v3, "properties");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setProperties:", v12);

  objc_msgSend(v3, "auxiliaryNowPlayingInfo");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setAuxiliaryNowPlayingInfo:", v13);

  objc_msgSend(v3, "requestIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setRequestIdentifier:", v14);

  objc_msgSend(v3, "resolvedPlayerPath");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setResolvedPlayerPath:", v15);

  objc_msgSend(v3, "homeUserIdentifiers");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setHomeUserIdentifiers:", v16);

  return v9;
}

void *MRContentItemsCreateFromRequest(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v5);
          v10 = MRContentItemCreateFromRequest(*(void **)(*((_QWORD *)&v12 + 1) + 8 * i), a2);
          objc_msgSend(v4, "addObject:", v10, (_QWORD)v12);

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v7);
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_19385336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRContentItemSetInferredTimestamp(void *a1, double a2)
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  void *v7;
  char v8;
  void *v9;
  id v10;

  v10 = a1;
  objc_msgSend(v10, "metadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10 && v3)
  {
    MRCreateItemMetadataIfNotPresent(v10);
    v4 = v10;
    objc_msgSend(v4, "metadata");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "inferredTimestamp");
    if (v6 == a2)
    {
      objc_msgSend(v4, "metadata");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "hasInferredTimestamp");

      if ((v8 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v4, "metadata");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setInferredTimestamp:", a2);

LABEL_8:
  }

}

double MRContentItemGetInferredTimestamp(void *a1)
{
  void *v1;
  double v2;
  double v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "inferredTimestamp");
  v3 = v2;

  return v3;
}

void MRMediaRemoteServiceGetActiveSystemEndpointUID(void *a1, int64_t a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x300000000000010uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_int64(v10, "MRXPC_ROUTE_OPTIONS_KEY", a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetActiveSystemEndpointUID_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

MRPlaybackQueueRequest *MRPlaybackQueueRequestCreate(uint64_t a1, uint64_t a2)
{
  return -[MRPlaybackQueueRequest initWithRange:]([MRPlaybackQueueRequest alloc], "initWithRange:", a1, a2);
}

BOOL MRMediaRemoteIsMusicAppInstalled()
{
  void *v0;

  v0 = (void *)MRGetSharedService();
  return MRMediaRemoteServiceIsMusicAppInstalled(v0);
}

void MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications(int a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  id v8;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications___externalScreenTypeChangeNotificationObservers;
  if (a1)
  {
    ++MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications___externalScreenTypeChangeNotificationObservers;
    if (!v3)
    {
      v8 = v2;
      objc_msgSend(v2, "notificationClient");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v4;
      v6 = 1;
LABEL_8:
      objc_msgSend(v4, "setReceivesExternalScreenTypeChangedNotifications:", v6);

      v2 = v8;
    }
  }
  else
  {
    v7 = MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications___externalScreenTypeChangeNotificationObservers == 1;
    if (MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications___externalScreenTypeChangeNotificationObservers >= 1)
    {
      --MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications___externalScreenTypeChangeNotificationObservers;
      if (v7)
      {
        v8 = v2;
        objc_msgSend(v2, "notificationClient");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v4;
        v6 = 0;
        goto LABEL_8;
      }
    }
  }

}

void MRMediaRemoteSetWantsSupportedCommandsChangedNotifications(int a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = MRMediaRemoteSetWantsSupportedCommandsChangedNotifications___supportedCommandsObservers;
  if (a1)
  {
    ++MRMediaRemoteSetWantsSupportedCommandsChangedNotifications___supportedCommandsObservers;
    if (!v3)
    {
      v7 = v2;
      objc_msgSend(v2, "notificationClient");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v4;
      v6 = 1;
LABEL_6:
      objc_msgSend(v4, "setReceivesSupportedCommandsNotifications:", v6);

      v2 = v7;
    }
  }
  else
  {
    --MRMediaRemoteSetWantsSupportedCommandsChangedNotifications___supportedCommandsObservers;
    if (v3 == 1)
    {
      v7 = v2;
      objc_msgSend(v2, "notificationClient");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v4;
      v6 = 0;
      goto LABEL_6;
    }
  }

}

void MRMediaRemoteSetSupportedCommandsForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v7 = a3;
  v8 = a4;
  if (!v7)
  {
    v7 = (id)MEMORY[0x1E0C80D38];
    v9 = MEMORY[0x1E0C80D38];
  }
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "playerClientForPlayerPath:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRMediaRemoteSetSupportedCommandsForPlayer_block_invoke;
  v13[3] = &unk_1E30C6798;
  v14 = v8;
  v12 = v8;
  objc_msgSend(v11, "setSupportedCommands:queue:completion:", a1, v7, v13);

}

void MRMediaRemoteSetDefaultSupportedCommandsForClient(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  MRPlayerPath *v12;
  void *v13;
  void *v14;
  void *v15;
  MRPlayerPath *v16;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = objc_alloc_init(MRPlayerPath);
  v16 = v12;
  if (!a2)
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[MRPlayerPath setOrigin:](v16, "setOrigin:", v13);

    if (a1)
      goto LABEL_3;
LABEL_5:
    +[MRClient localClient](MRClient, "localClient");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[MRPlayerPath setClient:](v16, "setClient:", v14);

    goto LABEL_6;
  }
  -[MRPlayerPath setOrigin:](v12, "setOrigin:", a2);
  if (!a1)
    goto LABEL_5;
LABEL_3:
  -[MRPlayerPath setClient:](v16, "setClient:", a1);
LABEL_6:
  v15 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetDefaultSupportedCommands(v15, v11, v16, v10, v9);

}

void MRMediaRemoteServiceSetDefaultSupportedCommands(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  _xpc_connection_s *v17;
  _QWORD v18[4];
  id v19;

  v9 = a5;
  v10 = a1;
  v11 = a4;
  v12 = a3;
  v13 = a2;
  MRCreateXPCMessage(0x200000000000032uLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddSupportedCommandsToXPCMessage(v14, (uint64_t)v13);

  MRAddPlayerPathToXPCMessage(v14, v12);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __MRMediaRemoteServiceSetDefaultSupportedCommands_block_invoke;
  v18[3] = &unk_1E30C6748;
  v19 = v9;
  v15 = v9;
  _MRServiceCreateErrorHandlerBlock(v18);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "connection");
  v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message_with_reply(v17, v14, v11, v16);
}

void _MRMediaRemoteRegisterForNowPlayingNotificationsEx(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a1;
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "notificationClient");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "registerForNowPlayingNotificationsWithQueue:force:", v3, a2);

}

void MRMediaRemoteGetPlaybackStateForPlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("playbackState"), v8);
  v11 = v10;
  if (a1)
    objc_msgSend(v10, "appendFormat:", CFSTR(" for %@"), a1);
  _MRLogForCategory(0xAuLL);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v25 = v11;
    _os_log_impl(&dword_193827000, v12, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "workerQueue");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __MRMediaRemoteGetPlaybackStateForPlayer_block_invoke;
  v19[3] = &unk_1E30C6720;
  v20 = v8;
  v21 = v9;
  v22 = v5;
  v23 = v6;
  v15 = v6;
  v16 = v5;
  v17 = v9;
  v18 = v8;
  MRMediaRemoteNowPlayingResolvePlayerPathWithID(a1, v18, 0, v14, v19);

}

void sub_193854668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceStart(void *a1, void *a2)
{
  void (**v3)(_QWORD);
  id v4;
  void *v5;
  _xpc_connection_s *v6;
  _QWORD v7[4];
  id v8[2];
  id location;

  v3 = a2;
  v4 = a1;
  objc_initWeak(&location, v4);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteServiceStart_block_invoke;
  v7[3] = &unk_1E30C7DE0;
  objc_copyWeak(v8, &location);
  v8[1] = v4;
  objc_msgSend(v4, "mrXPCConnection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setMessageHandler:", v7);

  objc_msgSend(v4, "connection");
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_resume(v6);

  objc_msgSend(v4, "setIsRunning:", 1);
  v3[2](v3);
  objc_destroyWeak(v8);
  objc_destroyWeak(&location);

}

void sub_193854774(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t MRMediaRemoteServiceSetClientModule(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

MRMediaRemoteService *MRMediaRemoteServiceCreate()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  dispatch_queue_t v5;
  NSObject *v6;
  dispatch_queue_t v7;
  NSObject *v8;
  dispatch_queue_t v9;
  NSObject *v10;
  dispatch_queue_t v11;
  _xpc_connection_s *mach_service;
  MRMediaRemoteService *v13;
  MRXPCConnection *v14;
  MRXPCConnection *v15;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, (dispatch_qos_class_t)2u, 0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = dispatch_queue_create("com.apple.MediaRemote.connectionQueue", v1);

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v3, (dispatch_qos_class_t)2u, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = dispatch_queue_create("com.apple.MediaRemote.clientCallbackPriorityQueue", v4);

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = dispatch_queue_create("com.apple.MediaRemote.clientCallbackQueue", v6);

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = dispatch_queue_create("com.apple.MediaRemote.browsableContentQueue", v8);

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = dispatch_queue_create("com.apple.MediaRemote.voiceInputQueue", v10);

  mach_service = xpc_connection_create_mach_service("com.apple.mediaremoted.xpc", v2, 0);
  v13 = objc_alloc_init(MRMediaRemoteService);
  v14 = [MRXPCConnection alloc];
  v15 = -[MRXPCConnection initWithConnection:queue:defaultReplyQueue:](v14, "initWithConnection:queue:defaultReplyQueue:", mach_service, 0, MEMORY[0x1E0C80D38]);
  -[MRMediaRemoteService setMrXPCConnection:](v13, "setMrXPCConnection:", v15);

  -[MRMediaRemoteService setConnection:](v13, "setConnection:", mach_service);
  -[MRMediaRemoteService setConnectionQueue:](v13, "setConnectionQueue:", v2);
  -[MRMediaRemoteService setClientCallbackQueue:](v13, "setClientCallbackQueue:", v7);
  -[MRMediaRemoteService setClientCallbackPriorityQueue:](v13, "setClientCallbackPriorityQueue:", v5);
  -[MRMediaRemoteService setBrowsableContentQueue:](v13, "setBrowsableContentQueue:", v9);
  -[MRMediaRemoteService setVoiceInputQueue:](v13, "setVoiceInputQueue:", v11);
  xpc_connection_set_context(mach_service, v13);

  return v13;
}

void sub_193854BE4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceResolvePlayerPath(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __MRMediaRemoteServiceResolvePlayerPath_block_invoke;
  v10[3] = &unk_1E30C7E58;
  v11 = v7;
  v9 = v7;
  objc_msgSend(a1, "resolvePlayerPath:queue:completion:", a2, v8, v10);

}

void sub_193855004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRMediaRemoteGetSupportedCommandsForPlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v5 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("supportedCommands"), v9);
  v12 = v11;
  if (a1)
    objc_msgSend(v11, "appendFormat:", CFSTR(" for %@"), a1);
  _MRLogForCategory(0xAuLL);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v26 = v12;
    _os_log_impl(&dword_193827000, v13, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "workerQueue");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __MRMediaRemoteGetSupportedCommandsForPlayer_block_invoke;
  v20[3] = &unk_1E30C6BE8;
  v21 = v9;
  v22 = v10;
  v23 = v5;
  v24 = v6;
  v16 = v6;
  v17 = v5;
  v18 = v10;
  v19 = v9;
  MRMediaRemoteNowPlayingResolvePlayerPath(a1, v15, v20);

}

void sub_193855B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Unwind_Resume(a1);
}

void MRAddPlayerPathToUserInfo(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v7 = a1;
  v3 = a2;
  if (v7 && v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRAddPlayerPathToUserInfo(NSMutableDictionary *__strong, MRPlayerPath *__strong)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRSerializationUtility.m"), 714, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v3, CFSTR("kMRNowPlayingPlayerPathUserInfoKey"));
  }

}

void _MRResolveAndRequestPlaybackQueue(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRResolveAndRequestPlaybackQueue(MRPlaybackQueueRequest *__strong, MRPlayerPath *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("MRPlaybackQueueRequestResponse.m"), 86, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

    if (v8)
      goto LABEL_3;
LABEL_5:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRResolveAndRequestPlaybackQueue(MRPlaybackQueueRequest *__strong, MRPlayerPath *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("MRPlaybackQueueRequestResponse.m"), 87, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

    goto LABEL_3;
  }
  if (!v7)
    goto LABEL_5;
LABEL_3:
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "workerQueue");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = ___MRResolveAndRequestPlaybackQueue_block_invoke;
  v17[3] = &unk_1E30C7AC0;
  v18 = v5;
  v19 = v8;
  v11 = v8;
  v12 = v5;
  MRMediaRemoteNowPlayingResolvePlayerPath(v6, v10, v17);

}

uint64_t MRGetSharedService()
{
  void *v0;
  uint64_t v1;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "service");

  return v1;
}

void sub_193855F98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceCopyPickableRoutes(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  const char *UTF8String;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x300000000000002uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    UTF8String = (const char *)_MRServiceGetUTF8String(a2);
    xpc_dictionary_set_string(v10, "MRXPC_ROUTE_CATEGORY_KEY", UTF8String);
  }
  objc_msgSend(v9, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceCopyPickableRoutes_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v10, v8, handler);

}

void MRMediaRemoteServiceGetHostedRoutingXPCEndpoint(void *a1, unsigned int a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  _xpc_connection_s *v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = v7;
  if (a3 && v7)
  {
    v9 = a1;
    v10 = a3;
    MRCreateXPCMessage(0x30000000000000DuLL);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_set_int64(v11, "MRXPC_DISCOVERY_FEATURES_KEY", a2);
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetHostedRoutingXPCEndpoint_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v14 = v8;
    xpc_connection_send_message_with_reply(v12, v11, v10, handler);

  }
}

void MRMediaRemoteServiceSetCanBeNowPlayingAppForPlayer(void *a1, BOOL a2, void *a3, double a4)
{
  id v7;
  id v8;
  _xpc_connection_s *v9;
  xpc_object_t xdict;

  v7 = a1;
  v8 = a3;
  MRCreateXPCMessage(0x200000000000038uLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(xdict, v8);

  xpc_dictionary_set_BOOL(xdict, "MRXPC_NOWPLAYING_APP_ENABLED_KEY", a2);
  xpc_dictionary_set_double(xdict, "MRXPC_TIMESTAMP", a4);
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v9, xdict);
}

void MRMediaRemoteServiceSetNowPlayingPlayer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000024uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetNowPlayingPlayer_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

void MRMediaRemoteServiceSetSupportedCommands(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  _xpc_connection_s *v15;
  _QWORD v16[4];
  id v17;

  v9 = a5;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x200000000000031uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v12, a3);
  MRAddSupportedCommandsToXPCMessage(v12, a2);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRMediaRemoteServiceSetSupportedCommands_block_invoke;
  v16[3] = &unk_1E30C6748;
  v17 = v9;
  v13 = v9;
  _MRServiceCreateErrorHandlerBlock(v16);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message_with_reply(v15, v12, v10, v14);
}

void MRMediaRemoteServiceSetNowPlayingPlaybackQueueCapabilities(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  _xpc_connection_s *v15;
  _QWORD v16[4];
  id v17;

  v9 = a5;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x20000000000000AuLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v12, a2);
  MRAddPlaybackQueueCapabilitiesToXPCMessage(v12, a3);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRMediaRemoteServiceSetNowPlayingPlaybackQueueCapabilities_block_invoke;
  v16[3] = &unk_1E30C6748;
  v17 = v9;
  v13 = v9;
  _MRServiceCreateErrorHandlerBlock(v16);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message_with_reply(v15, v12, v10, v14);
}

id MRCreateXPCMessage(uint64_t a1)
{
  xpc_object_t v2;

  v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v2, "MRXPC_MESSAGE_ID_KEY", a1);
  return v2;
}

id _MRServiceCreateErrorHandlerBlock(void *a1)
{
  id v1;
  id v2;
  void *v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___MRServiceCreateErrorHandlerBlock_block_invoke;
  v5[3] = &unk_1E30C7D98;
  v6 = v1;
  v2 = v1;
  v3 = (void *)MEMORY[0x194036C44](v5);

  return v3;
}

void MRAddPlaybackQueueCapabilitiesToXPCMessage(void *a1, uint64_t value)
{
  if (value)
    xpc_dictionary_set_uint64(a1, "MRXPC_NOWPLAYING_PLAYBACK_QUEUE_CAPABILITIES_KEY", value);
}

void MRAddSupportedCommandsToXPCMessage(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = a1;
  +[MRCommandInfo dataFromCommandInfos:](MRCommandInfo, "dataFromCommandInfos:", a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  MRAddDataToXPCMessage(v3, v4, "MRXPC_COMMAND_INFO_ARRAY_DATA_KEY");

}

id initValAVAudioSessionMediaServicesWereLostNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_12 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_12, &__block_literal_global_111);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_12, "AVAudioSessionMediaServicesWereLostNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionMediaServicesWereLostNotification, *v0);
  getAVAudioSessionMediaServicesWereLostNotification[0] = (uint64_t (*)())AVAudioSessionMediaServicesWereLostNotificationFunction;
  return (id)constantValAVAudioSessionMediaServicesWereLostNotification;
}

id AVAudioSessionMediaServicesWereLostNotificationFunction()
{
  return (id)constantValAVAudioSessionMediaServicesWereLostNotification;
}

void sub_193856AC4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceSetResumeHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11[2];
  id location;
  int out_token;

  v3 = a2;
  v4 = a1;
  out_token = 0;
  objc_initWeak(&location, v4);
  objc_msgSend(v4, "connectionQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __MRMediaRemoteServiceSetResumeHandler_block_invoke;
  v8[3] = &unk_1E30C7E30;
  objc_copyWeak(v11, &location);
  v11[1] = v4;
  v6 = v4;
  v9 = v6;
  v7 = v3;
  v10 = v7;
  notify_register_dispatch("com.apple.MRMediaRemote.didLaunch", &out_token, v5, v8);

  objc_destroyWeak(v11);
  objc_destroyWeak(&location);

}

void sub_193856C8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceSetInvalidationHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id location;

  v3 = a2;
  v4 = a1;
  objc_initWeak(&location, v4);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteServiceSetInvalidationHandler_block_invoke;
  v7[3] = &unk_1E30C7E08;
  objc_copyWeak(&v9, &location);
  v5 = v3;
  v8 = v5;
  objc_msgSend(v4, "mrXPCConnection");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setInvalidationHandler:", v7);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);

}

void sub_193856D80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_193857128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19385760C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t MRContentItemSetInfo(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setInfo:", a2);
}

uint64_t MRMediaRemoteCopyPickableRoutes()
{
  return MRMediaRemoteCopyPickableRoutesForCategory(0);
}

void *MRNowPlayingClientGetParentAppBundleIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRNowPlayingClientGetParentAppBundleIdentifier(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 101, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "parentApplicationBundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t MRNowPlayingPlayerPathIsLocal(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRNowPlayingPlayerPathIsLocal(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 490, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "isLocal");

  return v2;
}

CFTypeRef MRContentItemGetContentIdentifier(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "contentIdentifier");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

uint64_t MRMediaRemoteCommandInfoGetIntegerValueForKey(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MRMediaRemoteCommandInfoCopyValueForKey(a1, a2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = objc_msgSend(v2, "intValue");
  else
    v3 = 0;

  return v3;
}

uint64_t MRMediaRemoteCommandInfoCopyValueForKey(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a1, "options");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", a2);
  v4 = objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t MRMediaRemoteApplicationIsSystemPodcastApplication(uint64_t a1)
{
  if (MRMediaRemoteApplicationIsSystemPodcastApplication___once != -1)
    dispatch_once(&MRMediaRemoteApplicationIsSystemPodcastApplication___once, &__block_literal_global_21);
  return objc_msgSend((id)MRMediaRemoteApplicationIsSystemPodcastApplication___allKnownSystemPodcastApplications, "containsObject:", a1);
}

CFTypeRef MRContentItemGetReleaseDate(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "releaseDate");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

uint64_t MRContentItemGetITunesStoreArtistIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "iTunesStoreArtistIdentifier");

  return v2;
}

uint64_t MRAVOutputDeviceCopyModelID(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "modelID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRCreateArrayFomXPCMessage(void *a1, const char *a2, void *a3)
{
  id v5;
  UInt8 *v6;
  id v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = (UInt8 *)MRCreateDataFromXPCMessage(a1, a2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __MRCreateArrayFomXPCMessage_block_invoke;
  v10[3] = &unk_1E30CA1E8;
  v11 = v5;
  v7 = v5;
  MRCreateArrayFromData(v6, v10);
  v8 = objc_claimAutoreleasedReturnValue();

  return v8;
}

id MRCreateArrayFromData(void *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", a1, 0, 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
    a1 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (!v6)
      goto LABEL_14;
    v7 = v6;
    v8 = *(_QWORD *)v15;
    while (1)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0C99E38], "null", (_QWORD)v14);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10 == v11)
        {
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
          objc_msgSend(a1, "addObject:", v12);
          goto LABEL_12;
        }
        ((void (**)(id, void *))v3)[2](v3, v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12)
          goto LABEL_11;
LABEL_12:

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (!v7)
      {
LABEL_14:

        break;
      }
    }
  }

  return a1;
}

id MRCreateDataFromArray(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, _QWORD);
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    v14 = 0;
    goto LABEL_16;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (!v7)
    goto LABEL_14;
  v8 = v7;
  v9 = *(_QWORD *)v17;
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v17 != v9)
        objc_enumerationMutation(v6);
      v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
      objc_msgSend(MEMORY[0x1E0C99E38], "null", (_QWORD)v16);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11 == v12)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
        objc_msgSend(v5, "addObject:", v13);
        goto LABEL_12;
      }
      ((void (**)(id, void *))v4)[2](v4, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
        goto LABEL_11;
LABEL_12:

    }
    v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  }
  while (v8);
LABEL_14:

  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v5, 200, 0, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_16:
  return v14;
}

id MRDecodeObjectWithEncoding(void *a1, uint64_t a2)
{
  void *v2;
  id v4;
  void *v5;

  v4 = a1;
  if (a2 == 1)
  {
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v4, 4, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else if (!a2)
  {
    MSVPropertyListDataClasses();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    MSVUnarchivedObjectOfClasses();
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

uint64_t MRContentItemGetTotalTrackCount(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "totalTrackCount");

  return v2;
}

double MRContentItemGetStartTime(void *a1)
{
  void *v1;
  double v2;
  double v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "startTime");
  v3 = v2;

  return v3;
}

id initValAVOutputContextOutputDeviceDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextOutputDeviceDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextOutputDeviceDidChangeNotification, *v0);
  getAVOutputContextOutputDeviceDidChangeNotification = (uint64_t (*)(void))AVOutputContextOutputDeviceDidChangeNotificationFunction;
  return (id)constantValAVOutputContextOutputDeviceDidChangeNotification;
}

id initValAVOutputContextOutputDeviceDidChangeNotification_0()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_13 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_13, &__block_literal_global_84_0);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_13, "AVOutputContextOutputDeviceDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextOutputDeviceDidChangeNotification_0, *v0);
  getAVOutputContextOutputDeviceDidChangeNotification_0[0] = (uint64_t (*)())AVOutputContextOutputDeviceDidChangeNotificationFunction_0;
  return (id)constantValAVOutputContextOutputDeviceDidChangeNotification_0;
}

id initValAVOutputDeviceVolumeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceVolumeDidChangeNotification, *v0);
  getAVOutputDeviceVolumeDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceVolumeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceVolumeDidChangeNotification;
}

id initValAVOutputDeviceVolumeDidChangeNotification_0()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_11, "AVOutputDeviceVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceVolumeDidChangeNotification_0, *v0);
  getAVOutputDeviceVolumeDidChangeNotification_0[0] = (uint64_t (*)())AVOutputDeviceVolumeDidChangeNotificationFunction_0;
  return (id)constantValAVOutputDeviceVolumeDidChangeNotification_0;
}

id initValAVOutputDeviceVolumeControlTypeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceVolumeControlTypeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceVolumeControlTypeDidChangeNotification, *v0);
  getAVOutputDeviceVolumeControlTypeDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceVolumeControlTypeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceVolumeControlTypeDidChangeNotification;
}

id initValAVOutputDeviceMutedDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceMutedDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceMutedDidChangeNotification, *v0);
  getAVOutputDeviceMutedDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceMutedDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceMutedDidChangeNotification;
}

id initValAVOutputDeviceClusterMemberVolumeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceClusterMemberVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceClusterMemberVolumeDidChangeNotification, *v0);
  getAVOutputDeviceClusterMemberVolumeDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceClusterMemberVolumeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceClusterMemberVolumeDidChangeNotification;
}

id initValAVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotification, *v0);
  getAVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotification;
}

id initValAVOutputDeviceCanSetVolumeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceCanSetVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCanSetVolumeDidChangeNotification, *v0);
  getAVOutputDeviceCanSetVolumeDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceCanSetVolumeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceCanSetVolumeDidChangeNotification;
}

id initValAVOutputDeviceCanSetVolumeDidChangeNotification_0()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_11, "AVOutputDeviceCanSetVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCanSetVolumeDidChangeNotification_0, *v0);
  getAVOutputDeviceCanSetVolumeDidChangeNotification_0[0] = (uint64_t (*)())AVOutputDeviceCanSetVolumeDidChangeNotificationFunction_0;
  return (id)constantValAVOutputDeviceCanSetVolumeDidChangeNotification_0;
}

id initValAVOutputDeviceCanMuteDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceCanMuteDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCanMuteDidChangeNotification, *v0);
  getAVOutputDeviceCanMuteDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceCanMuteDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceCanMuteDidChangeNotification;
}

id initValAVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotification, *v0);
  getAVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotification;
}

id initValAVOutputContextVolumeControlTypeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextVolumeControlTypeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextVolumeControlTypeDidChangeNotification, *v0);
  getAVOutputContextVolumeControlTypeDidChangeNotification[0] = (uint64_t (*)())AVOutputContextVolumeControlTypeDidChangeNotificationFunction;
  return (id)constantValAVOutputContextVolumeControlTypeDidChangeNotification;
}

id initValAVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification, *v0);
  getAVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification[0] = (uint64_t (*)())AVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotificationFunction;
  return (id)constantValAVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification;
}

id initValAVOutputContextPredictedOutputDeviceDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextPredictedOutputDeviceDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextPredictedOutputDeviceDidChangeNotification, *v0);
  getAVOutputContextPredictedOutputDeviceDidChangeNotification[0] = (uint64_t (*)())AVOutputContextPredictedOutputDeviceDidChangeNotificationFunction;
  return (id)constantValAVOutputContextPredictedOutputDeviceDidChangeNotification;
}

id initValAVOutputContextOutputDevicesDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextOutputDevicesDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextOutputDevicesDidChangeNotification, *v0);
  getAVOutputContextOutputDevicesDidChangeNotification = (uint64_t (*)(void))AVOutputContextOutputDevicesDidChangeNotificationFunction;
  return (id)constantValAVOutputContextOutputDevicesDidChangeNotification;
}

id initValAVOutputContextDestinationChangeInitiatedNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextDestinationChangeInitiatedNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextDestinationChangeInitiatedNotification, *v0);
  getAVOutputContextDestinationChangeInitiatedNotification[0] = (uint64_t (*)())AVOutputContextDestinationChangeInitiatedNotificationFunction;
  return (id)constantValAVOutputContextDestinationChangeInitiatedNotification;
}

id initValAVOutputContextCanSetVolumeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextCanSetVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextCanSetVolumeDidChangeNotification, *v0);
  getAVOutputContextCanSetVolumeDidChangeNotification[0] = (uint64_t (*)())AVOutputContextCanSetVolumeDidChangeNotificationFunction;
  return (id)constantValAVOutputContextCanSetVolumeDidChangeNotification;
}

id AVOutputDeviceMutedDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceMutedDidChangeNotification;
}

id AVOutputDeviceCanMuteDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceCanMuteDidChangeNotification;
}

MRContentItem *MRContentItemCreateFromExternalRepresentation(uint64_t a1, uint64_t a2)
{
  return -[MRContentItem initWithData:]([MRContentItem alloc], "initWithData:", a2);
}

uint64_t MRContentItemCreateExternalRepresentation(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "data");
  return objc_claimAutoreleasedReturnValue();
}

void *MRNowPlayingClientGetBundleIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRNowPlayingClientGetBundleIdentifier(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 87, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "bundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void *MRPlaybackQueueCapabilitiesCopyDescription(uint64_t a1)
{
  id v2;
  void *v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = objc_alloc_init(MEMORY[0x1E0CB3940]);
  v3 = v2;
  if (!a1)
  {
    v4 = CFSTR("None");
LABEL_10:
    objc_msgSend(v3, "stringByAppendingString:", v4);
    v7 = objc_claimAutoreleasedReturnValue();

    return (void *)v7;
  }
  if ((a1 & 2) != 0)
  {
    objc_msgSend(v2, "stringByAppendingString:", CFSTR("range|"));
    v5 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v5;
    if ((a1 & 4) == 0)
    {
LABEL_4:
      if ((a1 & 8) == 0)
        return v3;
      goto LABEL_9;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "stringByAppendingString:", CFSTR("identifier|"));
  v6 = objc_claimAutoreleasedReturnValue();

  v3 = (void *)v6;
  if ((a1 & 8) != 0)
  {
LABEL_9:
    v4 = CFSTR("request");
    goto LABEL_10;
  }
  return v3;
}

uint64_t MRPlaybackQueueRequestSetLabel(void *a1, uint64_t a2)
{
  void *v5;
  void *v6;
  uint64_t v7;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPlaybackQueueRequestSetLabel(MRPlaybackQueueRequestRef, CFStringRef)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_opt_class();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 169, CFSTR("Type mismatch, expecting %@ found %@"), v7, objc_opt_class());

    }
  }
  return objc_msgSend(a1, "setLabel:", a2);
}

void sub_19385C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRContentItemCopyAuxiliaryNowPlayingInfo(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "nowPlayingInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  return v3;
}

uint64_t MRContentItemGetIsLoading(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isLoading");

  return v2;
}

void MRContentItemSetUserInfo(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetUserInfo_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

void MRContentItemSetDeviceSpecificUserInfo(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetDeviceSpecificUserInfo_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

uint64_t MRContentItemCopyAlbumYear(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "albumYear");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  return v3;
}

void sub_19385CE20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *MRPlaybackQueueGetQueueID(void *a1)
{
  void *v1;

  objc_msgSend(a1, "queueIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

float MRContentItemGetDefaultPlaybackRate(void *a1)
{
  void *v1;
  float v2;
  float v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "defaultPlaybackRate");
  v3 = v2;

  return v3;
}

uint64_t MRAVOutputDeviceCopySourceInfo(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "sourceInfo");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRContentItemGetIsAlwaysLive(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isAlwaysLive");

  return v2;
}

uint64_t MRPlaybackQueueCopyContentItems(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "contentItems");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

MRPlaybackQueue *MRPlaybackQueueCreate(uint64_t a1, uint64_t a2)
{
  return -[MRPlaybackQueue initWithContentItems:location:]([MRPlaybackQueue alloc], "initWithContentItems:location:", a1, a2);
}

uint64_t MRNowPlayingClientGetProcessIdentifier(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "pid_t MRNowPlayingClientGetProcessIdentifier(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 66, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "processIdentifier");

  return v2;
}

CFTypeRef MRContentItemGetInfo(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "info");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

void *MRNowPlayingPlayerPathGetPlayer(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerRef MRNowPlayingPlayerPathGetPlayer(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 418, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "player");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void *MRNowPlayingPlayerGetIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRNowPlayingPlayerGetIdentifier(MRNowPlayingPlayerRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 302, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

CFTypeRef MRContentItemGetCurrentLanguageOptions(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "currentLanguageOptions");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

CFTypeRef MRContentItemGetAvailableLanguageOptions(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "availableLanguageOptions");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

void *MRNowPlayingPlayerPathGetOrigin(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MROriginRef MRNowPlayingPlayerPathGetOrigin(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 404, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "origin");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void MRAddErrorToXPCMessage(void *a1, uint64_t value)
{
  xpc_dictionary_set_uint64(a1, "MRXPC_ERROR_CODE_KEY", value);
}

uint64_t MROriginGetUniqueIdentifier(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int32_t MROriginGetUniqueIdentifier(MROriginRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MROrigin_Deprecated.m"), 76, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "identifier");

  return v2;
}

void sub_19385EE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19385F3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938603AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193860534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id MRLogCategoryDiscoveryOversize()
{
  if (MRLogCategoryDiscoveryOversize__once != -1)
    dispatch_once(&MRLogCategoryDiscoveryOversize__once, &__block_literal_global_4);
  return (id)MRLogCategoryDiscoveryOversize__log;
}

void *MROriginGetDisplayName(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MROriginGetDisplayName(MROriginRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MROrigin_Deprecated.m"), 62, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "displayName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void MRPlaybackQueueRequestSetIdentifiers(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v6, "contentItemIdentifiers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v6, "contentItemIdentifiers");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObjectsFromArray:", v5);

  }
  if (a2)
    objc_msgSend(v3, "addObjectsFromArray:", a2);
  objc_msgSend(v6, "setContentItemIdentifiers:", v3);

}

uint64_t MRContentItemSetNowPlayingInfo(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "setNowPlayingInfo:policy:request:", a2, a3, a4);
}

id MRComputeBaseRouteUID(void *a1, _DWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  int v9;
  void *v10;
  id v11;

  v3 = a1;
  objc_msgSend(v3, "componentsSeparatedByString:", CFSTR("-"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v4, "count") < 2)
  {
    v9 = 0;
    v8 = 0;
    if (a2)
LABEL_8:
      *a2 = v9;
  }
  else
  {
    objc_msgSend(v4, "lastObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(&unk_1E3143CF0, "objectForKeyedSubscript:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(v4, "subarrayWithRange:", 0, objc_msgSend(v4, "count") - 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "componentsJoinedByString:", CFSTR("-"));
      v8 = (id)objc_claimAutoreleasedReturnValue();

      v9 = objc_msgSend(v6, "unsignedIntValue");
    }
    else
    {
      v8 = v3;
      v9 = 0;
    }

    if (a2)
      goto LABEL_8;
  }
  if (v8)
    v10 = v8;
  else
    v10 = v3;
  v11 = v10;

  return v11;
}

void MRContentItemSetPlayable(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isPlayable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasPlayable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setPlayable:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetMediaType(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "mediaType") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasMediaType");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setMediaType:", a2);

LABEL_8:
  }
}

void MRContentItemSetMediaSubType(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "mediaSubType") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasMediaSubType");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setMediaSubType:", a2);

LABEL_8:
  }
}

void MRContentItemSetLegacyUniqueIdentifier(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "legacyUniqueIdentifier") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasLegacyUniqueIdentifier");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setLegacyUniqueIdentifier:", a2);

LABEL_8:
  }
}

void MRContentItemSetHasArtworkData(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "artworkAvailable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasArtworkAvailable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setArtworkAvailable:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetIsStreamingContent(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isStreamingContent") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasStreamingContent");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setStreamingContent:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetITunesStoreIdentifier(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "iTunesStoreIdentifier") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasITunesStoreIdentifier");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setITunesStoreIdentifier:", a2);

LABEL_8:
  }
}

void MRContentItemSetITunesStoreAlbumIdentifier(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "iTunesStoreAlbumIdentifier") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasITunesStoreAlbumIdentifier");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setITunesStoreAlbumIdentifier:", a2);

LABEL_8:
  }
}

void MRContentItemSetHasInfo(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "infoAvailable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasInfoAvailable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setInfoAvailable:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetEpisodeType(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "episodeType") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasEpisodeType");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setEpisodeType:", a2);

LABEL_8:
  }
}

void MRContentItemSetDuration(void *a1, double a2)
{
  void *v4;
  double v5;
  void *v6;
  char v7;
  void *v8;
  id v9;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v9 = a1;
    objc_msgSend(v9, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "duration");
    if (v5 == a2)
    {
      objc_msgSend(v9, "metadata");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasDuration");

      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v9, "metadata");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setDuration:", a2);

LABEL_8:
  }
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemMetadataCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "metadataCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemArtworkCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "artworkCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

void *MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemForIdentifierCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "createItemForIdentifierCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  objc_msgSend(v10, "playerPath");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "clientCallbacks");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteSetPlaybackQueueCapabilities((uint64_t)v16, objc_msgSend(v17, "capabilities"), 0, 0);

  return v15;
}

id MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a1;
  v6 = a3;
  if (a2 == 2)
  {
    objc_msgSend(v5, "setLastCallback:", v6);
  }
  else if (a2 == 1)
  {
    objc_msgSend(v5, "setFirstCallback:", v6);
  }
  else
  {
    objc_msgSend(v5, "addCallback:", v6);
  }

  return v6;
}

void MRMediaRemoteSetPlaybackQueueCapabilities(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "setCapabilities:", a2);
  v10 = (void *)MRGetSharedService();
  objc_msgSend(v12, "playerPath");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteServiceSetNowPlayingPlaybackQueueCapabilities(v10, v11, a2, v8, v7);

}

void *MRMediaRemotePlaybackQueueDataSourceAddCreatePlaybackQueueForRequestCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "createPlaybackQueueForRequestCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  objc_msgSend(v10, "playerPath");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "clientCallbacks");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteSetPlaybackQueueCapabilities((uint64_t)v16, objc_msgSend(v17, "capabilities"), 0, 0);

  return v15;
}

void _onQueue_MRHandlePlaybackQueueRequest(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  int v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Error;
  void *v29;
  void *v30;
  void *v31;
  id *v32;
  id *v33;
  id v34;
  void *v35;
  MRPlaybackQueue *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  _QWORD v52[4];
  uint64_t v53;
  void *v54;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (v9)
  {
    if (v11)
      goto LABEL_3;
LABEL_25:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRHandlePlaybackQueueRequest(MRNowPlayingPlayerClient *__strong, MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong dispatch_queue_t, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v41, CFSTR("MRPlaybackQueueServiceClient.m"), 419, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

    if (v13)
      goto LABEL_4;
    goto LABEL_26;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRHandlePlaybackQueueRequest(MRNowPlayingPlayerClient *__strong, MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong dispatch_queue_t, __strong _MRPlaybackQueueRequestCallbackCompletion)");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "handleFailureInFunction:file:lineNumber:description:", v39, CFSTR("MRPlaybackQueueServiceClient.m"), 418, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientState"));

  if (!v11)
    goto LABEL_25;
LABEL_3:
  if (v13)
    goto LABEL_4;
LABEL_26:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRHandlePlaybackQueueRequest(MRNowPlayingPlayerClient *__strong, MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong dispatch_queue_t, __strong _MRPlaybackQueueRequestCallbackCompletion)");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v43, CFSTR("MRPlaybackQueueServiceClient.m"), 420, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_4:
  if ((objc_msgSend(v10, "isResolved") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRHandlePlaybackQueueRequest(MRNowPlayingPlayerClient *__strong, MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong dispatch_queue_t, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "handleFailureInFunction:file:lineNumber:description:", v45, CFSTR("MRPlaybackQueueServiceClient.m"), 421, CFSTR("Attempting to use unresolved Player Path"));

  }
  v48 = v10;
  v14 = objc_msgSend(v11, "hasRange");
  objc_msgSend(v11, "contentItemIdentifiers");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  v46 = v12;
  if (v15)
    v17 = objc_msgSend(v15, "count") != 0;
  else
    v17 = 0;
  objc_msgSend(v9, "clientCallbacks");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "createItemForOffsetCallbacks");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "callbacks");
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "clientCallbacks");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "createPlaybackQueueForRequestCallbacks");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "callbacks");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "clientCallbacks");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "createItemForIdentifierCallbacks");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "callbacks");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v47 = v16;
  if (v14)
  {
    if (objc_msgSend(v22, "count"))
    {
      _onQueue_MRCreatePlaybackQueueForRequest(v11, v22);
      v26 = objc_claimAutoreleasedReturnValue();
LABEL_16:
      v27 = v26;
      Error = 0;
      goto LABEL_18;
    }
    if (objc_msgSend(v49, "count"))
    {
      _onQueue_MRCreatePlaybackQueueForOffset(v11, v49);
      v26 = objc_claimAutoreleasedReturnValue();
      goto LABEL_16;
    }
  }
  if (v17)
  {
    _onQueue_MRCreatePlaybackQueueForIdentifier(v11, v25);
    v26 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  Error = MRMediaRemoteCreateError(14);
  v27 = 0;
LABEL_18:
  v29 = v22;
  v30 = v13;
  v31 = v25;
  if (!(Error | v27))
  {
    v36 = [MRPlaybackQueue alloc];
    v27 = -[MRPlaybackQueue initWithContentItems:](v36, "initWithContentItems:", MEMORY[0x1E0C9AA60]);
    goto LABEL_22;
  }
  if (!Error)
  {
LABEL_22:
    v52[0] = MEMORY[0x1E0C809B0];
    v52[1] = 3221225472;
    v52[2] = ___onQueue_MRHandlePlaybackQueueRequest_block_invoke;
    v52[3] = &unk_1E30C6568;
    v32 = &v54;
    v54 = v30;
    v33 = (id *)&v53;
    v27 = (uint64_t)(id)v27;
    v53 = v27;
    v37 = v30;
    v35 = v46;
    _MRLoadContentItemAssets(v9, v11, (void *)v27, v46, v52);
    goto LABEL_23;
  }
  v32 = &v51;
  v51 = v30;
  v33 = &v50;
  v50 = (id)Error;
  v34 = v30;
  v35 = v46;
  msv_dispatch_async_on_queue();
LABEL_23:

}

id _onQueue_MRCreatePlaybackQueueForRequest(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v12;
  void *v13;
  id obj;
  _QWORD block[5];
  id v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRPlaybackQueue *_onQueue_MRCreatePlaybackQueueForRequest(MRPlaybackQueueRequest *__strong, NSArray<MSVCallback *> *__strong)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRPlaybackQueueServiceClient.m"), 257, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

  }
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__49;
  v26 = __Block_byref_object_dispose__49;
  v27 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v28, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v19;
LABEL_5:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v19 != v6)
        objc_enumerationMutation(obj);
      v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v7);
      objc_msgSend(v8, "queue");
      v9 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___onQueue_MRCreatePlaybackQueueForRequest_block_invoke;
      block[3] = &unk_1E30CD350;
      block[4] = v8;
      v17 = &v22;
      v16 = v3;
      dispatch_sync((dispatch_queue_t)v9, block);

      LOBYTE(v9) = v23[5] == 0;
      if ((v9 & 1) == 0)
        break;
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v28, 16);
        if (v5)
          goto LABEL_5;
        break;
      }
    }
  }

  v10 = (id)v23[5];
  _Block_object_dispose(&v22, 8);

  return v10;
}

void sub_193863E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_193863F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193864460(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _MRHandlePlaybackQueueRequest(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  const char *v19;
  id v20;
  NSObject *v21;
  dispatch_queue_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  _QWORD block[4];
  id v37;
  id v38;
  id v39;
  dispatch_queue_t v40;
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;
  id v46;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  _MRLogForCategory(1uLL);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    _MRHandlePlaybackQueueRequest_cold_1((uint64_t)v6, (uint64_t)v5, v8);

  if (v5)
  {
    if (v6)
      goto LABEL_5;
LABEL_13:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRHandlePlaybackQueueRequest(MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, CFSTR("MRPlaybackQueueServiceClient.m"), 466, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

    if (v7)
      goto LABEL_6;
    goto LABEL_14;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRHandlePlaybackQueueRequest(MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("MRPlaybackQueueServiceClient.m"), 465, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("playerPath"));

  if (!v6)
    goto LABEL_13;
LABEL_5:
  if (v7)
    goto LABEL_6;
LABEL_14:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRHandlePlaybackQueueRequest(MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "handleFailureInFunction:file:lineNumber:description:", v31, CFSTR("MRPlaybackQueueServiceClient.m"), 467, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_6:
  if ((objc_msgSend(v5, "isResolved") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRHandlePlaybackQueueRequest(MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, CFSTR("MRPlaybackQueueServiceClient.m"), 468, CFSTR("Attempting to use unresolved Player Path"));

  }
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v10, "addPendingRequest:", v6);
    objc_msgSend(v10, "subscriptionController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addRequest:", v6);

    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = ___MRHandlePlaybackQueueRequest_block_invoke;
    v42[3] = &unk_1E30CFB80;
    v12 = v5;
    v43 = v12;
    v13 = v10;
    v44 = v13;
    v14 = v6;
    v45 = v14;
    v46 = v7;
    v15 = (void *)MEMORY[0x194036C44](v42);
    v16 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v14, "requestIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_retainAutorelease((id)objc_msgSend(v16, "initWithFormat:", CFSTR("com.apple.mediaremote.playbackqueue.%@"), v17));
    v34 = v7;
    v19 = (const char *)objc_msgSend(v18, "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v35 = v5;
    v20 = v6;
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = dispatch_queue_create(v19, v21);

    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___MRHandlePlaybackQueueRequest_block_invoke_41;
    block[3] = &unk_1E30CFBA8;
    v37 = v12;
    v38 = v14;
    v40 = v22;
    v41 = v15;
    v39 = v13;
    v23 = v22;
    v24 = v15;
    dispatch_async(v23, block);

    v6 = v20;
    v5 = v35;

    v7 = v34;
    v25 = v43;
  }
  else
  {
    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithMRError:description:", 29, CFSTR("The player was removed before this playbackQueueRequest could complete."));
    (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v25);
  }

}

void _MRRequestPlaybackQueue(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    if (v5)
      goto LABEL_3;
LABEL_13:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRRequestPlaybackQueue(MRPlaybackQueueRequestRef, MRNowPlayingPlayerClientRequests *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("MRPlaybackQueueRequestResponse.m"), 51, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientState"));

    if (v6)
      goto LABEL_4;
    goto LABEL_14;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRRequestPlaybackQueue(MRPlaybackQueueRequestRef, MRNowPlayingPlayerClientRequests *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("MRPlaybackQueueRequestResponse.m"), 50, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("i_request"));

  if (!v5)
    goto LABEL_13;
LABEL_3:
  if (v6)
    goto LABEL_4;
LABEL_14:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRRequestPlaybackQueue(MRPlaybackQueueRequestRef, MRNowPlayingPlayerClientRequests *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("MRPlaybackQueueRequestResponse.m"), 52, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_4:
  v7 = (void *)objc_msgSend(a1, "copy");
  objc_msgSend(v5, "subscriptionController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addRequest:", v7);

  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = ___MRRequestPlaybackQueue_block_invoke;
  v28[3] = &unk_1E30CB3C0;
  v9 = v5;
  v29 = v9;
  v10 = v7;
  v30 = v10;
  v11 = v6;
  v31 = v11;
  v12 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x194036C44](v28);
  objc_msgSend(v9, "playerPath");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isLocal");

  if (v14)
  {
    objc_msgSend(v9, "playerPath");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    MRServiceClientPlaybackQueueRequestCallback(v15, v10, v12);
  }
  else
  {
    objc_msgSend(v9, "playbackQueue");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "playerPath");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    MRPlaybackQueueCreateFromCache(v16, v10, 0, v17);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      ((void (**)(_QWORD, void *, _QWORD))v12)[2](v12, v15, 0);
    }
    else if (objc_msgSend(v10, "isLegacyNowPlayingInfoRequest"))
    {
      objc_msgSend(v9, "enqueuePlaybackQueueRequest:completion:", v10, v12);
    }
    else
    {
      v18 = (void *)MRGetSharedService();
      objc_msgSend(v9, "playerPath");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "workerQueue");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      MRMediaRemoteServiceRequestNowPlayingPlaybackQueue(v18, v10, v19, v21, v12);

    }
  }

}

void _MRLoadContentItemAssets(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id obj;
  _QWORD v37[4];
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v33 = a4;
  v12 = a5;
  v35 = v9;
  if (v9)
  {
    if (v10)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRLoadContentItemAssets(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, MRPlaybackQueue *__strong, __strong dispatch_queue_t, __strong dispatch_block_t)");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("MRPlaybackQueueServiceClient.m"), 389, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientState"));

    if (v10)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRLoadContentItemAssets(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, MRPlaybackQueue *__strong, __strong dispatch_queue_t, __strong dispatch_block_t)");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, CFSTR("MRPlaybackQueueServiceClient.m"), 390, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

LABEL_3:
  v32 = v12;
  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRLoadContentItemAssets(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, MRPlaybackQueue *__strong, __strong dispatch_queue_t, __strong dispatch_block_t)");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "handleFailureInFunction:file:lineNumber:description:", v31, CFSTR("MRPlaybackQueueServiceClient.m"), 391, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

  }
  objc_msgSend(v9, "subscriptionController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "subscribeToPlaybackQueue:forRequest:", v11, v10);

  v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v34 = v11;
  objc_msgSend(v11, "contentItems");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v40 != v17)
          objc_enumerationMutation(obj);
        v19 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        if (objc_msgSend(v10, "includeSections"))
        {
          objc_msgSend(v35, "clientCallbacks");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "createChildItemCallbacks");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "callbacks");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          _onQueue_MRCreateSectionsForRequest(v35, v22, v10, v19);
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          if (v23 && (unint64_t)objc_msgSend(v23, "count") >= 2)
          {
            v24 = (void *)objc_msgSend(v23, "mutableCopy");
            objc_msgSend(v19, "setSections:", v24);

          }
        }
        objc_msgSend(v14, "addObject:", v19);
      }
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
    }
    while (v16);
  }

  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___MRLoadContentItemAssets_block_invoke;
  v37[3] = &unk_1E30C6770;
  v38 = v32;
  v25 = v32;
  _onQueue_MRLoadContentItemAssets(v35, v10, v14, v33, v37);

}

void _onQueue_MRLoadContentItemAssets(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  char v21;
  CFTypeRef Sections;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id obj;
  void *v32;
  _QWORD block[4];
  id v34;
  _QWORD v35[4];
  NSObject *v36;
  _QWORD v37[4];
  NSObject *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v29 = a5;
  v32 = v9;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRLoadContentItemAssets(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, NSArray<id> *__strong, __strong dispatch_queue_t, __strong dispatch_block_t)");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("MRPlaybackQueueServiceClient.m"), 352, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientState"));

  }
  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onQueue_MRLoadContentItemAssets(MRNowPlayingPlayerClient *__strong, MRPlaybackQueueRequest *__strong, NSArray<id> *__strong, __strong dispatch_queue_t, __strong dispatch_block_t)");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("MRPlaybackQueueServiceClient.m"), 353, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

  }
  objc_msgSend(v10, "contentItemIdentifiers");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = dispatch_group_create();
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = v11;
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
  v15 = MEMORY[0x1E0C809B0];
  if (v14)
  {
    v16 = v14;
    v17 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v40 != v17)
          objc_enumerationMutation(obj);
        v19 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        if (!objc_msgSend(v10, "hasLocation")
          || (objc_msgSend(v19, "identifier"),
              v20 = (void *)objc_claimAutoreleasedReturnValue(),
              v21 = objc_msgSend(v30, "containsObject:", v20),
              v20,
              (v21 & 1) == 0))
        {
          if (objc_msgSend(v10, "shouldRequestItem"))
          {
            dispatch_group_enter(v13);
            v37[0] = v15;
            v37[1] = 3221225472;
            v37[2] = ___onQueue_MRLoadContentItemAssets_block_invoke;
            v37[3] = &unk_1E30C8040;
            v38 = v13;
            _onQueue_MRInvokeClientAssetCallbacks(v32, v10, v19, v12, v37);

          }
        }
        dispatch_group_enter(v13);
        Sections = MRContentItemGetSections(v19);
        v35[0] = v15;
        v35[1] = 3221225472;
        v35[2] = ___onQueue_MRLoadContentItemAssets_block_invoke_2;
        v35[3] = &unk_1E30C5CA8;
        v36 = v13;
        _onQueue_MRLoadContentItemAssets(v32, v10, Sections, v12, v35);

      }
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
    }
    while (v16);
  }

  block[0] = v15;
  block[1] = 3221225472;
  block[2] = ___onQueue_MRLoadContentItemAssets_block_invoke_3;
  block[3] = &unk_1E30C6770;
  v34 = v29;
  v23 = v29;
  dispatch_group_notify(v13, v12, block);

}

CFTypeRef MRContentItemGetSections(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "sections");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

void MRServiceClientPlaybackQueueRequestCallback(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRServiceClientPlaybackQueueRequestCallback(MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRPlaybackQueueServiceClient.m"), 531, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

    if (v8)
      goto LABEL_3;
LABEL_5:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRServiceClientPlaybackQueueRequestCallback(MRPlayerPath *__strong, MRPlaybackQueueRequest *__strong, __strong _MRPlaybackQueueRequestCallbackCompletion)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRPlaybackQueueServiceClient.m"), 532, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

    goto LABEL_3;
  }
  if (!v7)
    goto LABEL_5;
LABEL_3:
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRServiceClientPlaybackQueueRequestCallback_block_invoke;
  v16[3] = &unk_1E30CB3C0;
  v17 = v5;
  v18 = v6;
  v19 = v8;
  v9 = v8;
  v10 = v6;
  v11 = v5;
  _MRHandlePlaybackQueueRequest(v11, v10, v16);

}

void sub_193865AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193866108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938661FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193866304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRActiveEndpointTypeForCurrentApplication()
{
  if (MRActiveEndpointTypeForCurrentApplication_onceToken != -1)
    dispatch_once(&MRActiveEndpointTypeForCurrentApplication_onceToken, &__block_literal_global_82);
  return MRActiveEndpointTypeForCurrentApplication_type;
}

CFTypeRef MRContentItemGetComposer(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "composer");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetAlbumYear(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetAlbumYear(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 173, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetAlbumYear_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetGenre(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetGenre(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 473, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetGenre_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetComposer(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetComposer(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 279, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetComposer_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetCollectionIdentifier(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetCollectionIdentifier(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 1143, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetCollectionIdentifier_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetContentIdentifier(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetContentIdentifier(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 1173, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetContentIdentifier_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetTrackArtistName(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetTrackArtistName(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 185, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetTrackArtistName_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetTitle(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetTitle(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 126, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetTitle_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetAlbumArtistName(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetAlbumArtistName(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 197, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetAlbumArtistName_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetArtworkIdentifier(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetArtworkIdentifier(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 724, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetArtworkIdentifier_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetAlbumName(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetAlbumName(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 162, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetAlbumName_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

id MRLogCategoryDiscovery()
{
  if (MRLogCategoryDiscovery__once != -1)
    dispatch_once(&MRLogCategoryDiscovery__once, &__block_literal_global_2_0);
  return (id)MRLogCategoryDiscovery__log;
}

void MRContentItemSetReleaseDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  if (a1)
  {
    v10 = v3;
    MRCreateItemMetadataIfNotPresent(a1);
    v4 = a1;
    objc_msgSend(v4, "metadata");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "releaseDate");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (v6 == v10)
    {
      objc_msgSend(v4, "metadata");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "releaseDate");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
LABEL_6:

        v3 = v10;
        goto LABEL_7;
      }
    }
    else
    {

    }
    objc_msgSend(v4, "metadata");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setReleaseDate:", v10);

    goto LABEL_6;
  }
LABEL_7:

}

uint64_t MRPlaybackQueueGetRange(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = objc_msgSend(v1, "location");
  objc_msgSend(v1, "contentItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "count");
  return v2;
}

CFTypeRef MRContentItemGetLocalizedDurationString(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localizedDurationString");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

uint64_t MRMediaRemoteApplicationIsSystemMediaApplication(uint64_t a1)
{
  if (MRMediaRemoteApplicationIsSystemMediaApplication___once != -1)
    dispatch_once(&MRMediaRemoteApplicationIsSystemMediaApplication___once, &__block_literal_global_78);
  return objc_msgSend((id)MRMediaRemoteApplicationIsSystemMediaApplication___allKnownSystemMediaApplications, "containsObject:", a1);
}

double MRContentItemGetElapsedTimeTimestamp(void *a1)
{
  id v1;
  void *v2;
  char v3;
  void *v4;
  double v5;
  double v6;

  v1 = a1;
  objc_msgSend(v1, "metadata");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasElapsedTimeTimestamp");
  objc_msgSend(v1, "metadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((v3 & 1) != 0)
    objc_msgSend(v4, "elapsedTimeTimestamp");
  else
    objc_msgSend(v4, "inferredTimestamp");
  v6 = v5;

  return v6;
}

void MRMediaRemotePlaybackSessionSetRequestCallback(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a1);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "clientCallbacks");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setPlaybackSessionCallback:", v3);

}

uint64_t MRContentItemGetHasMetadata(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "metadata");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    objc_msgSend(v1, "metadata", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "dictionaryRepresentation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          if ((objc_msgSend(v9, "hasPrefix:", CFSTR("custom:")) & 1) == 0
            && !objc_msgSend(v9, "isEqualToString:", CFSTR("inferredTimestamp")))
          {
            v10 = 1;
            goto LABEL_14;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v6)
          continue;
        break;
      }
    }
    v10 = 0;
LABEL_14:

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void *MRMediaRemoteGetLocalOrigin()
{
  void *v0;

  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v0 = (void *)objc_claimAutoreleasedReturnValue();

  return v0;
}

void MRMediaRemoteSetDefaultSupportedCommands(void *a1, void *a2, void *a3)
{
  MRMediaRemoteSetDefaultSupportedCommandsForClient(0, 0, a1, a2, a3);
}

uint64_t MRPlaybackQueueRequestSetIncludeInfo(void *a1, uint64_t a2)
{
  void *v5;
  void *v6;
  uint64_t v7;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPlaybackQueueRequestSetIncludeInfo(MRPlaybackQueueRequestRef, _Bool)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_opt_class();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 112, CFSTR("Type mismatch, expecting %@ found %@"), v7, objc_opt_class());

    }
  }
  return objc_msgSend(a1, "setIncludeInfo:", a2);
}

void sub_19386923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id MRAVOutputContextGetSharedAudioPresentationContext()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x194036A64]();
  v1 = +[MRAVOutputContext sharedAudioPresentationContext](MRAVOutputContext, "sharedAudioPresentationContext");
  objc_autoreleasePoolPop(v0);
  return v1;
}

void MRMediaRemoteSetWantsVolumeControlNotifications(int a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  id v8;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = MRMediaRemoteSetWantsVolumeControlNotifications___volumeControlNotificationObservers;
  if (a1)
  {
    ++MRMediaRemoteSetWantsVolumeControlNotifications___volumeControlNotificationObservers;
    if (!v3)
    {
      v8 = v2;
      objc_msgSend(v2, "notificationClient");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v4;
      v6 = 1;
LABEL_8:
      objc_msgSend(v4, "setReceivesVolumeControlNotifications:", v6);

      v2 = v8;
    }
  }
  else
  {
    v7 = MRMediaRemoteSetWantsVolumeControlNotifications___volumeControlNotificationObservers == 1;
    if (MRMediaRemoteSetWantsVolumeControlNotifications___volumeControlNotificationObservers >= 1)
    {
      --MRMediaRemoteSetWantsVolumeControlNotifications___volumeControlNotificationObservers;
      if (v7)
      {
        v8 = v2;
        objc_msgSend(v2, "notificationClient");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v4;
        v6 = 0;
        goto LABEL_8;
      }
    }
  }

}

void MRMediaRemoteGetSystemVolumeMuted(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1E0C99D68];
  v5 = a1;
  objc_msgSend(v4, "date");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("getSystemIsMuted"), v8);
  _MRLogForCategory(0xAuLL);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v21 = v9;
    _os_log_impl(&dword_193827000, v10, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "service");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRMediaRemoteGetSystemVolumeMuted_block_invoke;
  v16[3] = &unk_1E30D0358;
  v17 = v8;
  v18 = v6;
  v19 = v3;
  v13 = v3;
  v14 = v6;
  v15 = v8;
  MRMediaRemoteServiceGetSystemIsMuted(v12, v5, v16);

}

void MRMediaRemoteServiceGetSystemIsMuted(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteServiceGetSystemIsMuted_block_invoke;
  v7[3] = &unk_1E30C7E80;
  v8 = v5;
  v6 = v5;
  _MRMediaRemoteServiceProtobuf(a1, 0x100000000000008uLL, 0, a2, v7);

}

void _MRMediaRemoteServiceProtobuf(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;

  v9 = a3;
  v10 = a5;
  v11 = a1;
  v12 = a4;
  MRCreateXPCMessage(a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddProtobufToXPCMessage(v13, v9);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    MRAddPlayerPathToXPCMessage(v13, (void *)objc_msgSend(v9, "performSelector:", sel_playerPath));
  objc_msgSend(v11, "mrXPCConnection");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = ___MRMediaRemoteServiceProtobuf_block_invoke;
  v16[3] = &unk_1E30C6C80;
  v17 = v10;
  v15 = v10;
  objc_msgSend(v14, "sendMessage:queue:reply:", v13, v12, v16);

}

void MRAddProtobufToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  objc_msgSend(a2, "protobufData");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  MRAddDataToXPCMessage(v3, v4, "MRXPC_PROTOBUF_DATA_KEY");

}

void MRMediaRemoteGetPickedRoutedVolumeControlCapabilities(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  MRPlayerPath *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  void (**v22)(_QWORD, _QWORD);
  void *v23;
  _QWORD v24[4];
  void (**v25)(_QWORD, _QWORD);
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  __CFString *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v5 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v12 = MEMORY[0x1E0C809B0];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __MRMediaRemoteGetPickedRoutedVolumeControlCapabilities_block_invoke;
  v29[3] = &unk_1E30D0268;
  v30 = CFSTR("volumeControlCapabilities");
  v13 = v10;
  v31 = v13;
  v14 = v8;
  v32 = v14;
  v15 = v5;
  v33 = v15;
  v16 = v6;
  v34 = v16;
  v17 = (void *)MEMORY[0x194036C44](v29);
  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("volumeControlCapabilities"), v13);
  v19 = v18;
  if (v11)
    objc_msgSend(v18, "appendFormat:", CFSTR(" for %@"), v11);
  _MRLogForCategory(0xAuLL);
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v36 = v19;
    _os_log_impl(&dword_193827000, v20, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v27[0] = v12;
  v27[1] = 3221225472;
  v27[2] = __MRMediaRemoteGetPickedRoutedVolumeControlCapabilities_block_invoke_67;
  v27[3] = &unk_1E30C66A8;
  v21 = v17;
  v28 = v21;
  v22 = (void (**)(_QWORD, _QWORD))MEMORY[0x194036C44](v27);
  -[MRPlayerPath origin](v11, "origin");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    ((void (**)(_QWORD, MRPlayerPath *))v22)[2](v22, v11);
  }
  else
  {
    v24[0] = v12;
    v24[1] = 3221225472;
    v24[2] = __MRMediaRemoteGetPickedRoutedVolumeControlCapabilities_block_invoke_3;
    v24[3] = &unk_1E30D02B8;
    v25 = v22;
    v26 = v21;
    MRMediaRemoteNowPlayingResolvePlayerPath(v11, v15, v24);

  }
}

void MRMediaRemoteGetMediaPlaybackVolume(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v4 = a1;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteGetMediaPlaybackVolumeForOrigin((uint64_t)v5, v4, v3);

}

void MRMediaRemoteGetMediaPlaybackVolumeForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  MRPlayerPath *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  MRPlayerPath *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  _QWORD v29[4];
  MRPlayerPath *v30;
  __CFString *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v5 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "UUIDString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("mediaPlaybackVolume"), v11);
  v13 = v12;
  if (v8)
    objc_msgSend(v12, "appendFormat:", CFSTR(" for %@"), v8);
  _MRLogForCategory(0xAuLL);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v37 = v13;
    _os_log_impl(&dword_193827000, v14, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v15 = MEMORY[0x1E0C809B0];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __MRMediaRemoteGetMediaPlaybackVolumeForOrigin_block_invoke;
  v29[3] = &unk_1E30D0308;
  v16 = v8;
  v30 = v16;
  v31 = CFSTR("mediaPlaybackVolume");
  v17 = v11;
  v32 = v17;
  v18 = v9;
  v33 = v18;
  v19 = v5;
  v34 = v19;
  v20 = v6;
  v35 = v20;
  v27[0] = v15;
  v27[1] = 3221225472;
  v27[2] = __MRMediaRemoteGetMediaPlaybackVolumeForOrigin_block_invoke_2;
  v27[3] = &unk_1E30C66A8;
  v21 = (id)MEMORY[0x194036C44](v29);
  v28 = v21;
  v22 = MEMORY[0x194036C44](v27);
  v23 = (void *)v22;
  if (a1)
  {
    (*(void (**)(uint64_t, MRPlayerPath *))(v22 + 16))(v22, v16);
  }
  else
  {
    v24[0] = v15;
    v24[1] = 3221225472;
    v24[2] = __MRMediaRemoteGetMediaPlaybackVolumeForOrigin_block_invoke_3;
    v24[3] = &unk_1E30D02B8;
    v25 = v21;
    v26 = v23;
    MRMediaRemoteNowPlayingResolvePlayerPath(v16, v19, v24);

  }
}

Class initAVOutputContext()
{
  Class result;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  result = objc_getClass("AVOutputContext");
  classAVOutputContext = (uint64_t)result;
  getAVOutputContextClass[0] = (uint64_t (*)())AVOutputContextFunction;
  return result;
}

CFStringRef MRAVOutputContextTypeCopyDescription(unsigned int a1)
{
  const __CFString *v1;

  if (a1 > 5)
    v1 = 0;
  else
    v1 = off_1E30C5C48[a1];
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

void sub_19386AFCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MRAVOutputContextCopyPredictedOutputDevice(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "predictedOutputDevice");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

void sub_19386B240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19386B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19386B71C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19386BA64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19386C74C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19386C998(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19386CC84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MRPlaybackQueueRequestSetIncludeLanguageOptions(void *a1, uint64_t a2)
{
  void *v5;
  void *v6;
  uint64_t v7;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPlaybackQueueRequestSetIncludeLanguageOptions(MRPlaybackQueueRequestRef, _Bool)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_opt_class();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 128, CFSTR("Type mismatch, expecting %@ found %@"), v7, objc_opt_class());

    }
  }
  return objc_msgSend(a1, "setIncludeLanguageOptions:", a2);
}

MRPlayer *MRNowPlayingPlayerCreate(uint64_t a1, uint64_t a2)
{
  return -[MRPlayer initWithIdentifier:displayName:]([MRPlayer alloc], "initWithIdentifier:displayName:", a1, a2);
}

MRClient *MRNowPlayingClientCreate(uint64_t a1, uint64_t a2)
{
  return -[MRClient initWithProcessIdentifier:bundleIdentifier:]([MRClient alloc], "initWithProcessIdentifier:bundleIdentifier:", a1, a2);
}

id initValAVSystemController_SubscribeToNotificationsAttribute()
{
  id *v0;

  if (MediaExperienceLibrary_sOnce_1 != -1)
    dispatch_once(&MediaExperienceLibrary_sOnce_1, &__block_literal_global_324);
  v0 = (id *)dlsym((void *)MediaExperienceLibrary_sLib_1, "AVSystemController_SubscribeToNotificationsAttribute");
  if (v0)
    objc_storeStrong((id *)&constantValAVSystemController_SubscribeToNotificationsAttribute, *v0);
  getAVSystemController_SubscribeToNotificationsAttribute[0] = (uint64_t (*)())AVSystemController_SubscribeToNotificationsAttributeFunction;
  return (id)constantValAVSystemController_SubscribeToNotificationsAttribute;
}

id initValAVSystemController_ServerConnectionDiedNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_10 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_10, &__block_literal_global_327);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_10, "AVSystemController_ServerConnectionDiedNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVSystemController_ServerConnectionDiedNotification, *v0);
  getAVSystemController_ServerConnectionDiedNotification[0] = (uint64_t (*)())AVSystemController_ServerConnectionDiedNotificationFunction;
  return (id)constantValAVSystemController_ServerConnectionDiedNotification;
}

id AVSystemController_ServerConnectionDiedNotificationFunction()
{
  return (id)constantValAVSystemController_ServerConnectionDiedNotification;
}

uint64_t MRMediaRemoteSetCanBeNowPlayingForPlayer(void *a1, int a2)
{
  id v3;
  NSObject *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v17;
  id v18;
  __int16 v19;
  const __CFString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  _MRLogForCategory(1uLL);
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = CFSTR("YES");
    if (!a2)
      v5 = CFSTR("NO");
    v17 = 138412546;
    v18 = v3;
    v19 = 2112;
    v20 = v5;
    _os_log_impl(&dword_193827000, v4, OS_LOG_TYPE_DEFAULT, "[MRNowPlaying] MRMediaRemoteSetCanBeNowPlayingForPlayer %@ set to %@", (uint8_t *)&v17, 0x16u);
  }

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "clientForPlayerPath:", v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "canBeNowPlaying");
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "setCanBeNowPlayingPlayer:", a2 != 0);
  objc_msgSend(v7, "setPerPlayerCanBeNowPlaying:", 1);
  if (v8 != objc_msgSend(v7, "canBeNowPlaying"))
  {
    objc_msgSend((Class)getAVSystemControllerClass[0](), "sharedAVSystemController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v7, "canBeNowPlaying"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    getAVSystemController_CanBeNowPlayingAppAttribute[0]();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setAttribute:forKey:error:", v12, v13, 0);

  }
  v14 = (void *)MRGetSharedService();
  objc_msgSend(v10, "playerPath");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteServiceSetCanBeNowPlayingAppForPlayer(v14, a2 != 0, v15, 0.0);

  return 1;
}

void sub_19386D508(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19386D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19386D6D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initAVSystemController()
{
  Class result;

  if (MediaExperienceLibrary_sOnce != -1)
    dispatch_once(&MediaExperienceLibrary_sOnce, &__block_literal_global_418);
  result = objc_getClass("AVSystemController");
  classAVSystemController = (uint64_t)result;
  getAVSystemControllerClass[0] = (uint64_t (*)())AVSystemControllerFunction;
  return result;
}

Class initAVSystemController_0()
{
  Class result;

  if (MediaExperienceLibrary_sOnce_1 != -1)
    dispatch_once(&MediaExperienceLibrary_sOnce_1, &__block_literal_global_324);
  result = objc_getClass("AVSystemController");
  classAVSystemController_0 = (uint64_t)result;
  getAVSystemControllerClass_0[0] = (uint64_t (*)())AVSystemControllerFunction_0;
  return result;
}

id initValAVSystemController_CanBeNowPlayingAppAttribute()
{
  id *v0;

  if (MediaExperienceLibrary_sOnce != -1)
    dispatch_once(&MediaExperienceLibrary_sOnce, &__block_literal_global_418);
  v0 = (id *)dlsym((void *)MediaExperienceLibrary_sLib, "AVSystemController_CanBeNowPlayingAppAttribute");
  if (v0)
    objc_storeStrong((id *)&constantValAVSystemController_CanBeNowPlayingAppAttribute, *v0);
  getAVSystemController_CanBeNowPlayingAppAttribute[0] = (uint64_t (*)())AVSystemController_CanBeNowPlayingAppAttributeFunction;
  return (id)constantValAVSystemController_CanBeNowPlayingAppAttribute;
}

id initValAVSystemController_CanBeNowPlayingAppAttribute_0()
{
  id *v0;

  if (MediaExperienceLibrary_sOnce_1 != -1)
    dispatch_once(&MediaExperienceLibrary_sOnce_1, &__block_literal_global_324);
  v0 = (id *)dlsym((void *)MediaExperienceLibrary_sLib_1, "AVSystemController_CanBeNowPlayingAppAttribute");
  if (v0)
    objc_storeStrong((id *)&constantValAVSystemController_CanBeNowPlayingAppAttribute_0, *v0);
  getAVSystemController_CanBeNowPlayingAppAttribute_0[0] = (uint64_t (*)())AVSystemController_CanBeNowPlayingAppAttributeFunction_0;
  return (id)constantValAVSystemController_CanBeNowPlayingAppAttribute_0;
}

MRPlaybackQueueRequest *MRCreatePlaybackQueueRequestFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MRPlaybackQueueRequest *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_NOWPLAYING_PLAYBACK_QUEUE_REQUEST_KEY");
  v2 = -[MRPlaybackQueueRequest initWithData:]([MRPlaybackQueueRequest alloc], "initWithData:", v1);

  return v2;
}

void sub_19386E21C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

MRPlaybackQueue *MRCreatePlaybackQueueFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MRPlaybackQueue *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_NOWPLAYING_PLAYBACK_QUEUE_KEY");
  if (v1)
    v2 = -[MRPlaybackQueue initWithData:]([MRPlaybackQueue alloc], "initWithData:", v1);
  else
    v2 = 0;

  return v2;
}

void sub_19386FA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose((const void *)(v67 - 256), 8);
  _Block_object_dispose((const void *)(v67 - 208), 8);
  _Unwind_Resume(a1);
}

void _onClientQueue_MRInvokeClientCallback(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  MRBlockGuard *v24;
  void *v25;
  id v26;
  MRBlockGuard *v27;
  void (*v28)(_QWORD *, id, id, _QWORD *);
  id v29;
  id v30;
  id v31;
  id v32;
  MRBlockGuard *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  _QWORD v47[4];
  MRBlockGuard *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  _QWORD v53[4];
  id v54;
  _QWORD v55[4];
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  if (v11)
  {
    if (v12)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", v35, CFSTR("MRPlaybackQueueServiceClient.m"), 32, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("clientState"));

    if (v12)
    {
LABEL_3:
      if (v13)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "handleFailureInFunction:file:lineNumber:description:", v37, CFSTR("MRPlaybackQueueServiceClient.m"), 33, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("datasource"));

  if (v13)
  {
LABEL_4:
    if (v14)
      goto LABEL_5;
LABEL_12:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v41, CFSTR("MRPlaybackQueueServiceClient.m"), 35, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("item"));

    if (v15)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_11:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "handleFailureInFunction:file:lineNumber:description:", v39, CFSTR("MRPlaybackQueueServiceClient.m"), 34, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("request"));

  if (!v14)
    goto LABEL_12;
LABEL_5:
  if (v15)
    goto LABEL_6;
LABEL_13:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v43, CFSTR("MRPlaybackQueueServiceClient.m"), 36, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("queue"));

LABEL_6:
  v17 = v12;
  if (!v16)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _onClientQueue_MRInvokeClientCallback(MRNowPlayingPlayerClient *__strong, __strong MRPlaybackQueueDataSourceContentItemAssetCallback, MRPlaybackQueueRequest *__strong, MRContentItem *__strong, __strong dispatch_queue_t, __strong MRPlaybackQueueDataSourceContentItemAssetCallbackCompletion)");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "handleFailureInFunction:file:lineNumber:description:", v45, CFSTR("MRPlaybackQueueServiceClient.m"), 37, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

  }
  v18 = MEMORY[0x1E0C809B0];
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 3221225472;
  v55[2] = ___onClientQueue_MRInvokeClientCallback_block_invoke;
  v55[3] = &unk_1E30CFA90;
  v19 = v11;
  v56 = v19;
  v20 = v14;
  v57 = v20;
  v21 = v13;
  v58 = v21;
  v59 = v15;
  v60 = v16;
  v46 = v16;
  v22 = v15;
  v23 = (void *)MEMORY[0x194036C44](v55);
  v24 = [MRBlockGuard alloc];
  v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("PlaybackQueue request %@ for item %@ datasource callback completion was not called. This is a bug in client code"), v21, v20);
  v53[0] = v18;
  v53[1] = 3221225472;
  v53[2] = ___onClientQueue_MRInvokeClientCallback_block_invoke_2;
  v53[3] = &unk_1E30C6798;
  v26 = v23;
  v54 = v26;
  v27 = -[MRBlockGuard initWithTimeout:reason:handler:](v24, "initWithTimeout:reason:handler:", v25, v53, 8.0);

  v47[0] = v18;
  v47[1] = 3221225472;
  v47[2] = ___onClientQueue_MRInvokeClientCallback_block_invoke_3;
  v47[3] = &unk_1E30CFAB8;
  v51 = v19;
  v52 = v26;
  v48 = v27;
  v49 = v20;
  v50 = v21;
  v28 = (void (*)(_QWORD *, id, id, _QWORD *))v17[2];
  v29 = v19;
  v30 = v21;
  v31 = v20;
  v32 = v26;
  v33 = v27;
  v28(v17, v30, v31, v47);

}

void sub_193870274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id MRAVEndpointGetLocalEndpoint(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = +[MRAVLocalEndpoint sharedLocalEndpointForRoutingContextWithUID:](MRAVLocalEndpoint, "sharedLocalEndpointForRoutingContextWithUID:", a1);
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRNowPlayingClientCopyBundleIdentifierExtendedHierarchy(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFArrayRef MRNowPlayingClientCopyBundleIdentifierExtendedHierarchy(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 197, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "extendedBundleIdentifierHierarchy");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_193871894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

MRPlayerPath *MRNowPlayingPlayerPathCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, a2, a3);
}

void sub_193871CD0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_193872068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRMediaRemoteGetNowPlayingInfoForPlayer(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;

  v7 = a3;
  v8 = a4;
  v9 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __MRMediaRemoteGetNowPlayingInfoForPlayer_block_invoke;
  v15[3] = &unk_1E30CA8A0;
  v16 = v8;
  v10 = v7;
  v11 = v15;
  v12 = v8;
  +[MRPlaybackQueueRequest defaultPlaybackQueueRequest](MRPlaybackQueueRequest, "defaultPlaybackQueueRequest");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCachingPolicy:", 2);
  objc_msgSend(v13, "setLegacyNowPlayingInfoRequest:", 1);
  if (a2)
  {
    objc_msgSend(v13, "setArtworkWidth:", 600.0);
    objc_msgSend(v13, "setArtworkHeight:", 600.0);
  }
  v17[0] = v9;
  v17[1] = 3221225472;
  v17[2] = ___MRGetNowPlayingInfo_block_invoke;
  v17[3] = &unk_1E30C7AC0;
  v18 = v10;
  v19 = v11;
  v14 = v10;
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync(v13, a1, v14, v17);

}

void MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer_block_invoke;
  v9[3] = &unk_1E30CB438;
  v10 = v7;
  v8 = v7;
  _MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer(a1, a2, a3, v9);

}

void sub_193872A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceSetNowPlayingPlaybackQueue(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  _xpc_connection_s *v15;
  _QWORD v16[4];
  id v17;

  v9 = a5;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x200000000000008uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v12, a2);
  MRAddPlaybackQueueToXPCMessage(v12, a3);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRMediaRemoteServiceSetNowPlayingPlaybackQueue_block_invoke;
  v16[3] = &unk_1E30C6748;
  v17 = v9;
  v13 = v9;
  _MRServiceCreateErrorHandlerBlock(v16);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message_with_reply(v15, v12, v10, v14);
}

void MRAddPlaybackQueueToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a2)
  {
    v3 = a1;
    objc_msgSend(a2, "data");
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    xpc_dictionary_set_data(v3, "MRXPC_NOWPLAYING_PLAYBACK_QUEUE_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

  }
}

uint64_t MRContentItemCopyNowPlayingInfo(void *a1)
{
  objc_msgSend(a1, "nowPlayingInfo");
  return objc_claimAutoreleasedReturnValue();
}

id MRMediaRemoteAddCommandHandlerForPlayer(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  v4 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "playerClientForPlayerPath:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "clientCallbacks");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addCommandHandlerBlock:forKey:", v3, v8);

  return v8;
}

uint64_t MRMediaRemoteCopyPickableRoutesForCategory(uint64_t a1)
{
  dispatch_semaphore_t v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[4];
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = dispatch_semaphore_create(0);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteCopyPickableRoutesForCategory_block_invoke;
  v7[3] = &unk_1E30D01F0;
  v9 = &v10;
  v4 = v2;
  v8 = v4;
  objc_msgSend(v3, "fetchPickableRoutesWithCategory:completion:", a1, v7);
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  v5 = v11[3];

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_193875E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRNowPlayingPlayerPathCopy(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerPathRef MRNowPlayingPlayerPathCopy(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 390, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

void MRAddDeviceInfoToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a2)
  {
    v3 = a1;
    objc_msgSend(a2, "data");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    MRAddDataToXPCMessage(v3, v4, "MRXPC_PAIRED_EXTERNAL_DEVICE");

  }
}

void *MRMediaRemoteCopyPendingCommands(uint64_t a1, MRPlayerPath **a2)
{
  MRPlayerPath *v4;
  void *v5;
  void *v6;
  MRPlayerPath *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  MRPlayerPath *v25;
  void *v26;
  NSObject *v27;
  _BOOL4 v28;
  MRPlayerPath *v29;
  MRPlayerPath *v30;
  __CFString *v31;
  MRPlayerPath **v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  __CFString *v42;
  void *v43;
  void *v44;
  MRPlayerPath **v45;
  void *v46;
  MRPlayerPath **v47;
  void *v48;
  _BOOL4 v49;
  MRPlayerPath *v50;
  __CFString *v51;
  void *v52;
  uint64_t v53;
  const char *v54;
  NSObject *v55;
  uint32_t v56;
  MRPlayerPath *v57;
  MRPlayerPath *v58;
  const char *v59;
  NSObject *v60;
  uint32_t v61;
  MRPlayerPath *v62;
  MRPlayerPath *v63;
  void *v65;
  MRPlayerPath *v66;
  MRPlayerPath *v67;
  id v68;
  uint8_t buf[4];
  const __CFString *v70;
  __int16 v71;
  void *v72;
  __int16 v73;
  MRPlayerPath *v74;
  __int16 v75;
  MRPlayerPath *v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = [MRPlayerPath alloc];
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRClient localClient](MRClient, "localClient");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[MRPlayerPath initWithOrigin:client:player:](v4, "initWithOrigin:client:player:", v5, v6, a1);

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = objc_claimAutoreleasedReturnValue();

  v11 = (void *)v10;
  v12 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("copyPendingCommands"), v10);
  v13 = v12;
  if (v7)
    -[__CFString appendFormat:](v12, "appendFormat:", CFSTR(" for %@"), v7);
  _MRLogForCategory(0xAuLL);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v70 = v13;
    _os_log_impl(&dword_193827000, v14, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "clientForPlayerPath:", v7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v67 = v7;
  if (objc_msgSend(v16, "canBeNowPlayingForPlayer:", v7))
  {
    _MRLogForCategory(2uLL);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      MRMediaRemoteCopyPendingCommands_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);

    v25 = (MRPlayerPath *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithMRError:description:", 2, CFSTR("Cannot call 'CopyPendingCommands' if CanBeNowPlayingA=YES"));
    v26 = 0;
    if (v25)
      goto LABEL_9;
LABEL_13:
    v47 = a2;
    v48 = (void *)MRMediaRemoteCopyCommandsDescription(v26);

    _MRLogForCategory(0xAuLL);
    v27 = objc_claimAutoreleasedReturnValue();
    v49 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    v29 = v67;
    if (v48)
    {
      if (v67)
      {
        if (v49)
        {
          v50 = (MRPlayerPath *)MRMediaRemoteCopyCommandsDescription(v26);
          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v66 = v25;
          v51 = v13;
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "timeIntervalSinceDate:", v8);
          *(_DWORD *)buf = 138544386;
          v70 = CFSTR("copyPendingCommands");
          v71 = 2114;
          v72 = v11;
          v73 = 2112;
          v74 = v50;
          v75 = 2114;
          v76 = v67;
          v77 = 2048;
          v78 = v53;
          v54 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
          v55 = v27;
          v56 = 52;
LABEL_25:
          _os_log_impl(&dword_193827000, v55, OS_LOG_TYPE_DEFAULT, v54, buf, v56);

          v13 = v51;
          v25 = v66;
LABEL_29:

        }
      }
      else if (v49)
      {
        v50 = (MRPlayerPath *)MRMediaRemoteCopyCommandsDescription(v26);
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v66 = v25;
        v51 = v13;
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "timeIntervalSinceDate:", v8);
        *(_DWORD *)buf = 138544130;
        v70 = CFSTR("copyPendingCommands");
        v71 = 2114;
        v72 = v11;
        v73 = 2112;
        v74 = v50;
        v75 = 2048;
        v76 = v62;
        v54 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
        v55 = v27;
        v56 = 42;
        goto LABEL_25;
      }
LABEL_30:
      a2 = v47;
      goto LABEL_31;
    }
    if (v67)
    {
      if (!v49)
        goto LABEL_30;
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v50 = (MRPlayerPath *)objc_claimAutoreleasedReturnValue();
      -[MRPlayerPath timeIntervalSinceDate:](v50, "timeIntervalSinceDate:", v8);
      *(_DWORD *)buf = 138544130;
      v70 = CFSTR("copyPendingCommands");
      v71 = 2114;
      v72 = v11;
      v73 = 2114;
      v74 = v67;
      v75 = 2048;
      v76 = v58;
      v59 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      v60 = v27;
      v61 = 42;
    }
    else
    {
      if (!v49)
        goto LABEL_30;
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v50 = (MRPlayerPath *)objc_claimAutoreleasedReturnValue();
      -[MRPlayerPath timeIntervalSinceDate:](v50, "timeIntervalSinceDate:", v8);
      *(_DWORD *)buf = 138543874;
      v70 = CFSTR("copyPendingCommands");
      v71 = 2114;
      v72 = v11;
      v73 = 2048;
      v74 = v63;
      v59 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      v60 = v27;
      v61 = 32;
    }
    _os_log_impl(&dword_193827000, v60, OS_LOG_TYPE_DEFAULT, v59, buf, v61);
    goto LABEL_29;
  }
  MRCreateXPCMessage(0x400000000000006uLL);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v38, v7);
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "service");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "mrXPCConnection");
  v41 = v16;
  v42 = v13;
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = 0;
  objc_msgSend(v43, "sendSyncMessage:error:", v38, &v68);
  v65 = v11;
  v44 = v8;
  v45 = a2;
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = (MRPlayerPath *)v68;

  v13 = v42;
  v16 = v41;

  v26 = (void *)MRCreatePropertyListFromXPCMessage(v46, "MRXPC_COMMAND_KEY");
  a2 = v45;
  v8 = v44;
  v11 = v65;

  if (!v25)
    goto LABEL_13;
LABEL_9:
  _MRLogForCategory(0xAuLL);
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  v29 = v67;
  if (v67)
  {
    if (!v28)
      goto LABEL_31;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v30 = v25;
    v31 = v13;
    v32 = a2;
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "timeIntervalSinceDate:", v8);
    *(_DWORD *)buf = 138544386;
    v70 = CFSTR("copyPendingCommands");
    v71 = 2114;
    v72 = v11;
    v73 = 2114;
    v74 = v30;
    v75 = 2114;
    v76 = v67;
    v77 = 2048;
    v78 = v34;
    v35 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
    v36 = v27;
    v37 = 52;
  }
  else
  {
    if (!v28)
      goto LABEL_31;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v30 = v25;
    v31 = v13;
    v32 = a2;
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "timeIntervalSinceDate:", v8);
    *(_DWORD *)buf = 138544130;
    v70 = CFSTR("copyPendingCommands");
    v71 = 2114;
    v72 = v11;
    v73 = 2114;
    v74 = v30;
    v75 = 2048;
    v76 = v57;
    v35 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
    v36 = v27;
    v37 = 42;
  }
  _os_log_error_impl(&dword_193827000, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);

  a2 = v32;
  v13 = v31;
  v25 = v30;
LABEL_31:

  if (a2)
    *a2 = v25;

  return v26;
}

uint64_t MRMediaRemoteCopyCommandsDescription(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = a1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = MRMediaRemoteCopyCommandDescription(objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "longValue"));
        objc_msgSend(v2, "addObject:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@"), v2);
  return v9;
}

BOOL MRMediaRemoteServiceIsMusicAppInstalled(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  kdebug_trace();
  objc_msgSend(a1, "mrXPCConnection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(v2, "sendSyncMessageWithType:error:", 0x100000000000017, &v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v7;

  kdebug_trace();
  if (v4)
    v5 = 0;
  else
    v5 = xpc_dictionary_get_BOOL(v3, "MRXPC_APP_INSTALLED_KEY");

  return v5;
}

MRDeviceInfo *MRCreateDeviceInfoFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MRDeviceInfo *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_PAIRED_EXTERNAL_DEVICE");
  v2 = -[MRDeviceInfo initWithData:]([MRDeviceInfo alloc], "initWithData:", v1);

  return v2;
}

MRPlayerPath *MRCreatePlayerPathFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MRPlayerPath *v2;
  MRPlayerPath *v3;
  void *v4;
  void *v5;
  int v6;
  BOOL v7;
  void *v8;
  void *v9;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_NOWPLAYING_PLAYER_PATH_DATA_KEY");
  if (v1 && (v2 = -[MRPlayerPath initWithData:]([MRPlayerPath alloc], "initWithData:", v1)) != 0)
  {
    v3 = v2;
    -[MRPlayerPath client](v2, "client");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "bundleIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "processIdentifier");
    if (v5)
      v7 = 0;
    else
      v7 = v6 <= 0;
    if (v7)
      -[MRPlayerPath setClient:](v3, "setClient:", 0);
    -[MRPlayerPath player](v3, "player");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
      -[MRPlayerPath setPlayer:](v3, "setPlayer:", 0);

  }
  else
  {
    v3 = objc_alloc_init(MRPlayerPath);
  }

  return v3;
}

uint64_t MRCreateClientErrorFromXPCMessage(void *a1)
{
  id v1;
  void *v2;
  const void *data;
  const void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t uint64;
  uint64_t Error;
  id v10;
  const __CFString *v11;
  size_t length;

  v1 = a1;
  v2 = v1;
  if (v1 == (id)MEMORY[0x1E0C81258])
  {
    v10 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v11 = CFSTR("XPC Interruption");
LABEL_10:
    Error = objc_msgSend(v10, "initWithMRError:description:", 1, v11);
    goto LABEL_11;
  }
  if (v1 == (id)MEMORY[0x1E0C81260])
  {
    v10 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v11 = CFSTR("XPC Invalidation");
    goto LABEL_10;
  }
  if (!v1)
    goto LABEL_12;
  length = 0;
  data = xpc_dictionary_get_data(v1, "MRXPC_CLIENT_ERROR_DATA_KEY", &length);
  if (!data
    || (v4 = data,
        v5 = objc_alloc(MEMORY[0x1E0C99D50]),
        v6 = (void *)objc_msgSend(v5, "initWithBytes:length:", v4, length),
        v7 = MRCreateClientErrorFromExternalRepresentation((uint64_t)v6),
        v6,
        !v7))
  {
    uint64 = xpc_dictionary_get_uint64(v2, "MRXPC_ERROR_CODE_KEY");
    if (uint64)
    {
      Error = MRMediaRemoteCreateError(uint64);
LABEL_11:
      v7 = Error;
      goto LABEL_13;
    }
LABEL_12:
    v7 = 0;
  }
LABEL_13:

  return v7;
}

void sub_193879FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19387A1AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19387A3C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19387A4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(v10);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19387A748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19387AC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19387B1C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19387B4A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id AVOutputContextOutputDeviceDidChangeNotificationFunction()
{
  return (id)constantValAVOutputContextOutputDeviceDidChangeNotification;
}

id AVOutputContextOutputDeviceDidChangeNotificationFunction_0()
{
  return (id)constantValAVOutputContextOutputDeviceDidChangeNotification_0;
}

id AVOutputContextOutputDevicesDidChangeNotificationFunction()
{
  return (id)constantValAVOutputContextOutputDevicesDidChangeNotification;
}

void sub_19387C06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a34);
  _Unwind_Resume(a1);
}

id AVOutputDeviceDiscoverySessionFunction()
{
  return (id)classAVOutputDeviceDiscoverySession;
}

id AVOutputDeviceDiscoverySessionFunction_0()
{
  return (id)classAVOutputDeviceDiscoverySession_0;
}

id AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification;
}

id AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotificationFunction_0()
{
  return (id)constantValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification_0;
}

id initValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_2 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_2, &__block_literal_global_24);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_2, "AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification, *v0);
  getAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification[0] = (uint64_t (*)())AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification;
}

id initValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification_0()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_13 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_13, &__block_literal_global_84_0);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_13, "AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification_0, *v0);
  getAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification_0[0] = (uint64_t (*)())AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotificationFunction_0;
  return (id)constantValAVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification_0;
}

Class initAVOutputDeviceDiscoverySession()
{
  Class result;

  if (AVFoundationLibrary_sOnce_2 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_2, &__block_literal_global_24);
  result = objc_getClass("AVOutputDeviceDiscoverySession");
  classAVOutputDeviceDiscoverySession = (uint64_t)result;
  getAVOutputDeviceDiscoverySessionClass[0] = (uint64_t (*)())AVOutputDeviceDiscoverySessionFunction;
  return result;
}

Class initAVOutputDeviceDiscoverySession_0()
{
  Class result;

  if (AVFoundationLibrary_sOnce_13 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_13, &__block_literal_global_84_0);
  result = objc_getClass("AVOutputDeviceDiscoverySession");
  classAVOutputDeviceDiscoverySession_0 = (uint64_t)result;
  getAVOutputDeviceDiscoverySessionClass_0[0] = (uint64_t (*)())AVOutputDeviceDiscoverySessionFunction_0;
  return result;
}

void sub_19387D464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19387D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _MRReadNowPlayingInfoString(void *a1, uint64_t a2, void *a3)
{
  void (**v5)(id, void *);
  void *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;

  v5 = a3;
  objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected type %@ found for key '%@' (expecting a NSString)"), objc_opt_class(), a2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      _MRLogForCategory(0);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        _MRReadNowPlayingInfoString_cold_2((uint64_t)v7, v8);

      _MRLogForCategory(1uLL);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        _MRReadNowPlayingInfoString_cold_1((uint64_t)v7, v9);

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v6, "stringValue");
        v10 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v10;
      }

    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5[2](v5, v6);
  }

}

void _processNotification(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  _MRLogForCategory(0);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = a3;
    _os_log_impl(&dword_193827000, v5, OS_LOG_TYPE_DEFAULT, "[MRMediaSuggestionPreferences] Updating because of notification %@.", (uint8_t *)&v7, 0xCu);
  }

  v6 = a2;
  if (-[MRMediaSuggestionPreferences _updateGlobalToggleState](v6))
    -[MRMediaSuggestionPreferences _notifyListener](v6);

}

void sub_19387F82C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19387F924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19387F984(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19387F9E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19387FB68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void MRRegisterTransaction(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  if (_MRRegisteredTransactionsInitialize_onceToken != -1)
    dispatch_once(&_MRRegisteredTransactionsInitialize_onceToken, &__block_literal_global_374);
  v2 = __registeredTransactionsQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MRRegisterTransaction_block_invoke;
  block[3] = &unk_1E30C5CA8;
  v5 = v1;
  v3 = v1;
  dispatch_async(v2, block);

}

uint64_t MRMediaRemoteAddPlayerPathInvalidationHandler(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  MRNowPlayingPlayerPathInvalidationHandler *v7;
  void *v8;
  uint64_t v9;

  v5 = a3;
  v6 = a2;
  v7 = -[MRNowPlayingPlayerPathInvalidationHandler initWithPlayerPath:invalidateImmediatlyIfInvalid:queue:invalidationCallback:]([MRNowPlayingPlayerPathInvalidationHandler alloc], "initWithPlayerPath:invalidateImmediatlyIfInvalid:queue:invalidationCallback:", a1, 1, v6, v5);

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addPlayerPathInvalidationHandler:", v7);
  v9 = objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_19388056C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void MRAVEndpointResolveActiveSystemEndpointWithType(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v7 = a3;
  v8 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRAVEndpointResolveActiveSystemEndpointWithType_block_invoke;
  v11[3] = &unk_1E30CD3F8;
  v12 = v7;
  v10 = v7;
  objc_msgSend(v9, "resolveActiveSystemEndpointWithType:timeout:queue:completion:", a1, v8, v11, a4);

}

uint64_t MRAVOutputContextCopyUniqueIdentifier(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "contextID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

_MRLyricsItemProtobuf *MRLyricsItemCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _MRLyricsItemProtobuf *v6;

  v6 = objc_alloc_init(_MRLyricsItemProtobuf);
  -[_MRLyricsItemProtobuf setLyrics:](v6, "setLyrics:", a1);
  -[_MRLyricsItemProtobuf setUserProvided:](v6, "setUserProvided:", a2);
  -[_MRLyricsItemProtobuf setToken:](v6, "setToken:", a3);
  return v6;
}

id _MRCreateIndentedDebugDescriptionFrom(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = a1;
  objc_opt_class();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    MRCreateIndentedDebugDescriptionFromArray(v1);
    v2 = objc_claimAutoreleasedReturnValue();
LABEL_8:
    v4 = (void *)v2;
    goto LABEL_9;
  }
  objc_opt_class();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    MRCreateIndentedDebugDescriptionFromDictionary(v1);
    v2 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  objc_opt_class();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    MRCreateIndentedDebugDescriptionFromObject(v1);
    v2 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  objc_msgSend(v1, "allObjects");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (*)(void))MRCreateIndentedDebugDescriptionFromArray)();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_9:
  return v4;
}

id MRCreateIndentedDebugDescriptionFromArray(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)MEMORY[0x194036A64]();
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __MRCreateIndentedDebugDescriptionFromArray_block_invoke;
    v9[3] = &unk_1E30CC700;
    v4 = v3;
    v10 = v4;
    objc_msgSend(v1, "enumerateObjectsUsingBlock:", v9);

    objc_autoreleasePoolPop(v2);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v4, "componentsJoinedByString:", CFSTR("\n"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MRCreateFormattedDebugDescriptionFromClass(v1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MRCreateIndentedDebugDescriptionFromObject(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id MRCreateIndentedDebugDescriptionFromObject(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)MEMORY[0x194036A64]();
    objc_msgSend(v1, "debugDescription");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:options:range:", CFSTR("\n"), CFSTR("\n    "), 0, 0, objc_msgSend(v3, "length") - 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_autoreleasePoolPop(v2);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id MRCreateFormattedDebugDescriptionFromClass(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  objc_class *v9;
  void *v10;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    v7 = (void *)MEMORY[0x194036A64]();
    v8 = objc_alloc(MEMORY[0x1E0CB3940]);
    v9 = (objc_class *)objc_opt_class();
    NSStringFromClass(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(v8, "initWithFormat:", CFSTR("<%@:%p> {\n%@\n}"), v10, v3, v5);

    objc_autoreleasePoolPop(v7);
  }

  return v6;
}

uint64_t MRNowPlayingPlayerPathEqualToPlayerPath(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = a1;
  v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MRNowPlayingPlayerPathEqualToPlayerPath(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 465, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

    if (!v4)
      goto LABEL_6;
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MRNowPlayingPlayerPathEqualToPlayerPath(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_opt_class();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRNowPlayingPlayerPath.m"), 466, CFSTR("Type mismatch, expecting %@ found %@"), v12, objc_opt_class());

  }
LABEL_6:
  if (v3 == v4)
    v5 = 1;
  else
    v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

MRPlaybackQueueRequest *MRPlaybackQueueRequestCreateWithIdentifiers(uint64_t a1)
{
  return -[MRPlaybackQueueRequest initWithIdentifiers:]([MRPlaybackQueueRequest alloc], "initWithIdentifiers:", a1);
}

uint64_t MRSupportedCommandsIsEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  void *v21;
  uint64_t v22;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3 == v4)
  {
    v22 = 1;
  }
  else
  {
    v5 = objc_msgSend(v3, "count");
    if (v5 == objc_msgSend(v4, "count"))
    {
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v3, "count"));
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v7 = v3;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(_QWORD *)v30 != v10)
              objc_enumerationMutation(v7);
            v12 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v12, "command"));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, v13);

          }
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
        }
        while (v9);
      }
      v24 = v3;

      v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v4, "count"));
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v15 = v4;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v26;
        do
        {
          for (j = 0; j != v17; ++j)
          {
            if (*(_QWORD *)v26 != v18)
              objc_enumerationMutation(v15);
            v20 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * j);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v20, "command"));
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "setObject:forKeyedSubscript:", v20, v21);

          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
        }
        while (v17);
      }

      v22 = objc_msgSend(v6, "isEqualToDictionary:", v14);
      v3 = v24;
    }
    else
    {
      v22 = 0;
    }
  }

  return v22;
}

uint64_t MROriginIsLocalOrigin(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MROriginIsLocalOrigin(MROriginRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MROrigin_Deprecated.m"), 83, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "isLocal");

  return v2;
}

uint64_t _MRAVEndpointDescriptorProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _MRAVOutputDeviceDescriptorProtobuf *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  BOOL v46;
  uint64_t v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
        goto LABEL_33;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_33;
      case 3u:
        v20 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend((id)a1, "addOutputDevices:", v20);
        goto LABEL_56;
      case 4u:
        v20 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_storeStrong((id *)(a1 + 16), v20);
        goto LABEL_56;
      case 5u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 68) |= 4u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_62:
        v46 = v23 != 0;
        v47 = 65;
        goto LABEL_75;
      case 6u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
LABEL_33:
        v27 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_76;
      case 7u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 68) |= 8u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_66:
        v46 = v30 != 0;
        v47 = 66;
        goto LABEL_75;
      case 8u:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + 68) |= 1u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              v14 = v35++ >= 9;
              if (v14)
              {
                LODWORD(v36) = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v36) = 0;
LABEL_70:
        *(_DWORD *)(a1 + 8) = v36;
        goto LABEL_76;
      case 9u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v42 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v42 = 0;
LABEL_74:
        v46 = v42 != 0;
        v47 = 64;
LABEL_75:
        *(_BYTE *)(a1 + v47) = v46;
        goto LABEL_76;
      case 0xAu:
        v20 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend((id)a1, "addPersonalOutputDevices:", v20);
LABEL_56:
        if (PBReaderPlaceMark()
          && (_MRAVOutputDeviceDescriptorProtobufReadFrom((uint64_t)v20, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_76:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_76;
    }
  }
}

uint64_t _MRAVOutputDeviceDescriptorProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  _MRAVOutputDeviceSourceInfoProtobuf *v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  char v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  char v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  char v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  char v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char v252;
  char v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  uint64_t v260;
  unint64_t v261;
  char v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char v268;
  char v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  char v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  char v281;
  char v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char v288;
  char v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  char v295;
  char v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char v302;
  char v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  char v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  char v323;
  char v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char v330;
  char v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char v337;
  char v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char v344;
  char v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  char v351;
  char v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  char v358;
  char v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  char v365;
  void *v366;
  BOOL v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 192;
        goto LABEL_408;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 264;
        goto LABEL_408;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 128;
        goto LABEL_408;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 176;
        goto LABEL_408;
      case 5u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 168;
        goto LABEL_408;
      case 6u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 324) |= 0x1000uLL;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                v23 = 0;
                goto LABEL_414;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_414:
        v367 = v23 != 0;
        v368 = 282;
        goto LABEL_608;
      case 7u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_QWORD *)(a1 + 324) |= 0x100000000uLL;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                v30 = 0;
                goto LABEL_418;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_418:
        v367 = v30 != 0;
        v368 = 302;
        goto LABEL_608;
      case 8u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_QWORD *)(a1 + 324) |= 0x4000000uLL;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              v15 = v36++ >= 9;
              if (v15)
              {
                v37 = 0;
                goto LABEL_422;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v37 = 0;
LABEL_422:
        v367 = v37 != 0;
        v368 = 296;
        goto LABEL_608;
      case 9u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_QWORD *)(a1 + 324) |= 0x8000000uLL;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v15 = v43++ >= 9;
              if (v15)
              {
                v44 = 0;
                goto LABEL_426;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_426:
        v367 = v44 != 0;
        v368 = 297;
        goto LABEL_608;
      case 0xAu:
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_QWORD *)(a1 + 324) |= 0x10uLL;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v15 = v50++ >= 9;
              if (v15)
              {
                LODWORD(v51) = 0;
                goto LABEL_430;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v51) = 0;
LABEL_430:
        v369 = 100;
        goto LABEL_559;
      case 0xBu:
        v56 = 0;
        v57 = 0;
        v51 = 0;
        *(_QWORD *)(a1 + 324) |= 8uLL;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
            *(_QWORD *)(a2 + v58) = v60;
            v51 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              v15 = v57++ >= 9;
              if (v15)
              {
                LODWORD(v51) = 0;
                goto LABEL_434;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v51) = 0;
LABEL_434:
        v369 = 96;
        goto LABEL_559;
      case 0xCu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 184;
        goto LABEL_408;
      case 0xDu:
        *(_QWORD *)(a1 + 324) |= 1uLL;
        v62 = *v3;
        v63 = *(_QWORD *)(a2 + v62);
        if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v64 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v63);
          *(_QWORD *)(a2 + v62) = v63 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v64 = 0;
        }
        v370 = 40;
        goto LABEL_617;
      case 0xEu:
        v65 = 0;
        v66 = 0;
        v67 = 0;
        *(_QWORD *)(a1 + 324) |= 0x20000000uLL;
        while (2)
        {
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          v70 = v69 + 1;
          if (v69 == -1 || v70 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
            *(_QWORD *)(a2 + v68) = v70;
            v67 |= (unint64_t)(v71 & 0x7F) << v65;
            if (v71 < 0)
            {
              v65 += 7;
              v15 = v66++ >= 9;
              if (v15)
              {
                v67 = 0;
                goto LABEL_438;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v67 = 0;
LABEL_438:
        v367 = v67 != 0;
        v368 = 299;
        goto LABEL_608;
      case 0xFu:
        v72 = 0;
        v73 = 0;
        v74 = 0;
        *(_QWORD *)(a1 + 324) |= 0x80000000000uLL;
        while (2)
        {
          v75 = *v3;
          v76 = *(_QWORD *)(a2 + v75);
          v77 = v76 + 1;
          if (v76 == -1 || v77 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
            *(_QWORD *)(a2 + v75) = v77;
            v74 |= (unint64_t)(v78 & 0x7F) << v72;
            if (v78 < 0)
            {
              v72 += 7;
              v15 = v73++ >= 9;
              if (v15)
              {
                v74 = 0;
                goto LABEL_442;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v74 = 0;
LABEL_442:
        v367 = v74 != 0;
        v368 = 313;
        goto LABEL_608;
      case 0x10u:
        v79 = 0;
        v80 = 0;
        v81 = 0;
        *(_QWORD *)(a1 + 324) |= 0x4000000000uLL;
        while (2)
        {
          v82 = *v3;
          v83 = *(_QWORD *)(a2 + v82);
          v84 = v83 + 1;
          if (v83 == -1 || v84 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
            *(_QWORD *)(a2 + v82) = v84;
            v81 |= (unint64_t)(v85 & 0x7F) << v79;
            if (v85 < 0)
            {
              v79 += 7;
              v15 = v80++ >= 9;
              if (v15)
              {
                v81 = 0;
                goto LABEL_446;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v81 = 0;
LABEL_446:
        v367 = v81 != 0;
        v368 = 308;
        goto LABEL_608;
      case 0x11u:
        v86 = 0;
        v87 = 0;
        v88 = 0;
        *(_QWORD *)(a1 + 324) |= 0x8000000000uLL;
        while (2)
        {
          v89 = *v3;
          v90 = *(_QWORD *)(a2 + v89);
          v91 = v90 + 1;
          if (v90 == -1 || v91 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v90);
            *(_QWORD *)(a2 + v89) = v91;
            v88 |= (unint64_t)(v92 & 0x7F) << v86;
            if (v92 < 0)
            {
              v86 += 7;
              v15 = v87++ >= 9;
              if (v15)
              {
                v88 = 0;
                goto LABEL_450;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v88 = 0;
LABEL_450:
        v367 = v88 != 0;
        v368 = 309;
        goto LABEL_608;
      case 0x12u:
        v93 = objc_alloc_init(_MRAVOutputDeviceSourceInfoProtobuf);
        objc_storeStrong((id *)(a1 + 248), v93);
        if (!PBReaderPlaceMark()
          || (_MRAVOutputDeviceSourceInfoProtobufReadFrom((uint64_t)v93, a2) & 1) == 0)
        {
          goto LABEL_619;
        }
        goto LABEL_361;
      case 0x13u:
        v94 = 0;
        v95 = 0;
        v96 = 0;
        *(_QWORD *)(a1 + 324) |= 0x2000000uLL;
        while (2)
        {
          v97 = *v3;
          v98 = *(_QWORD *)(a2 + v97);
          v99 = v98 + 1;
          if (v98 == -1 || v99 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
            *(_QWORD *)(a2 + v97) = v99;
            v96 |= (unint64_t)(v100 & 0x7F) << v94;
            if (v100 < 0)
            {
              v94 += 7;
              v15 = v95++ >= 9;
              if (v15)
              {
                v96 = 0;
                goto LABEL_454;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v96 = 0;
LABEL_454:
        v367 = v96 != 0;
        v368 = 295;
        goto LABEL_608;
      case 0x14u:
        v101 = 0;
        v102 = 0;
        v103 = 0;
        *(_QWORD *)(a1 + 324) |= 0x10000uLL;
        while (2)
        {
          v104 = *v3;
          v105 = *(_QWORD *)(a2 + v104);
          v106 = v105 + 1;
          if (v105 == -1 || v106 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v105);
            *(_QWORD *)(a2 + v104) = v106;
            v103 |= (unint64_t)(v107 & 0x7F) << v101;
            if (v107 < 0)
            {
              v101 += 7;
              v15 = v102++ >= 9;
              if (v15)
              {
                v103 = 0;
                goto LABEL_458;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v103 = 0;
LABEL_458:
        v367 = v103 != 0;
        v368 = 286;
        goto LABEL_608;
      case 0x15u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 160;
        goto LABEL_408;
      case 0x16u:
        v108 = 0;
        v109 = 0;
        v110 = 0;
        *(_QWORD *)(a1 + 324) |= 0x80000000uLL;
        while (2)
        {
          v111 = *v3;
          v112 = *(_QWORD *)(a2 + v111);
          v113 = v112 + 1;
          if (v112 == -1 || v113 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v112);
            *(_QWORD *)(a2 + v111) = v113;
            v110 |= (unint64_t)(v114 & 0x7F) << v108;
            if (v114 < 0)
            {
              v108 += 7;
              v15 = v109++ >= 9;
              if (v15)
              {
                v110 = 0;
                goto LABEL_462;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v110 = 0;
LABEL_462:
        v367 = v110 != 0;
        v368 = 301;
        goto LABEL_608;
      case 0x17u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 120;
        goto LABEL_408;
      case 0x18u:
        *(_QWORD *)(a1 + 324) |= 0x100uLL;
        v115 = *v3;
        v116 = *(_QWORD *)(a2 + v115);
        if (v116 <= 0xFFFFFFFFFFFFFFFBLL && v116 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v64 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v116);
          *(_QWORD *)(a2 + v115) = v116 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v64 = 0;
        }
        v370 = 272;
        goto LABEL_617;
      case 0x19u:
        v117 = 0;
        v118 = 0;
        v119 = 0;
        *(_QWORD *)(a1 + 324) |= 0x200000000uLL;
        while (2)
        {
          v120 = *v3;
          v121 = *(_QWORD *)(a2 + v120);
          v122 = v121 + 1;
          if (v121 == -1 || v122 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v123 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v121);
            *(_QWORD *)(a2 + v120) = v122;
            v119 |= (unint64_t)(v123 & 0x7F) << v117;
            if (v123 < 0)
            {
              v117 += 7;
              v15 = v118++ >= 9;
              if (v15)
              {
                v119 = 0;
                goto LABEL_466;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v119 = 0;
LABEL_466:
        v367 = v119 != 0;
        v368 = 303;
        goto LABEL_608;
      case 0x1Au:
        v124 = 0;
        v125 = 0;
        v126 = 0;
        *(_QWORD *)(a1 + 324) |= 0x800uLL;
        while (2)
        {
          v127 = *v3;
          v128 = *(_QWORD *)(a2 + v127);
          v129 = v128 + 1;
          if (v128 == -1 || v129 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v130 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v128);
            *(_QWORD *)(a2 + v127) = v129;
            v126 |= (unint64_t)(v130 & 0x7F) << v124;
            if (v130 < 0)
            {
              v124 += 7;
              v15 = v125++ >= 9;
              if (v15)
              {
                v126 = 0;
                goto LABEL_470;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v126 = 0;
LABEL_470:
        v367 = v126 != 0;
        v368 = 281;
        goto LABEL_608;
      case 0x1Bu:
        v131 = 0;
        v132 = 0;
        v133 = 0;
        *(_QWORD *)(a1 + 324) |= 0x2000uLL;
        while (2)
        {
          v134 = *v3;
          v135 = *(_QWORD *)(a2 + v134);
          v136 = v135 + 1;
          if (v135 == -1 || v136 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v137 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v135);
            *(_QWORD *)(a2 + v134) = v136;
            v133 |= (unint64_t)(v137 & 0x7F) << v131;
            if (v137 < 0)
            {
              v131 += 7;
              v15 = v132++ >= 9;
              if (v15)
              {
                v133 = 0;
                goto LABEL_474;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v133 = 0;
LABEL_474:
        v367 = v133 != 0;
        v368 = 283;
        goto LABEL_608;
      case 0x1Cu:
        v138 = 0;
        v139 = 0;
        v140 = 0;
        *(_QWORD *)(a1 + 324) |= 0x100000uLL;
        while (2)
        {
          v141 = *v3;
          v142 = *(_QWORD *)(a2 + v141);
          v143 = v142 + 1;
          if (v142 == -1 || v143 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v144 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v142);
            *(_QWORD *)(a2 + v141) = v143;
            v140 |= (unint64_t)(v144 & 0x7F) << v138;
            if (v144 < 0)
            {
              v138 += 7;
              v15 = v139++ >= 9;
              if (v15)
              {
                v140 = 0;
                goto LABEL_478;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v140 = 0;
LABEL_478:
        v367 = v140 != 0;
        v368 = 290;
        goto LABEL_608;
      case 0x1Du:
        v145 = 0;
        v146 = 0;
        v147 = 0;
        *(_QWORD *)(a1 + 324) |= 0x20000000000uLL;
        while (2)
        {
          v148 = *v3;
          v149 = *(_QWORD *)(a2 + v148);
          v150 = v149 + 1;
          if (v149 == -1 || v150 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v151 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v149);
            *(_QWORD *)(a2 + v148) = v150;
            v147 |= (unint64_t)(v151 & 0x7F) << v145;
            if (v151 < 0)
            {
              v145 += 7;
              v15 = v146++ >= 9;
              if (v15)
              {
                v147 = 0;
                goto LABEL_482;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v147 = 0;
LABEL_482:
        v367 = v147 != 0;
        v368 = 311;
        goto LABEL_608;
      case 0x1Eu:
        v152 = 0;
        v153 = 0;
        v154 = 0;
        *(_QWORD *)(a1 + 324) |= 0x8000uLL;
        while (2)
        {
          v155 = *v3;
          v156 = *(_QWORD *)(a2 + v155);
          v157 = v156 + 1;
          if (v156 == -1 || v157 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v158 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v156);
            *(_QWORD *)(a2 + v155) = v157;
            v154 |= (unint64_t)(v158 & 0x7F) << v152;
            if (v158 < 0)
            {
              v152 += 7;
              v15 = v153++ >= 9;
              if (v15)
              {
                v154 = 0;
                goto LABEL_486;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v154 = 0;
LABEL_486:
        v367 = v154 != 0;
        v368 = 285;
        goto LABEL_608;
      case 0x1Fu:
        v159 = 0;
        v160 = 0;
        v161 = 0;
        *(_QWORD *)(a1 + 324) |= 0x4000uLL;
        while (2)
        {
          v162 = *v3;
          v163 = *(_QWORD *)(a2 + v162);
          v164 = v163 + 1;
          if (v163 == -1 || v164 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v165 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v163);
            *(_QWORD *)(a2 + v162) = v164;
            v161 |= (unint64_t)(v165 & 0x7F) << v159;
            if (v165 < 0)
            {
              v159 += 7;
              v15 = v160++ >= 9;
              if (v15)
              {
                v161 = 0;
                goto LABEL_490;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v161 = 0;
LABEL_490:
        v367 = v161 != 0;
        v368 = 284;
        goto LABEL_608;
      case 0x20u:
        v166 = 0;
        v167 = 0;
        v168 = 0;
        *(_QWORD *)(a1 + 324) |= 0x1000000000uLL;
        while (2)
        {
          v169 = *v3;
          v170 = *(_QWORD *)(a2 + v169);
          v171 = v170 + 1;
          if (v170 == -1 || v171 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v172 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v170);
            *(_QWORD *)(a2 + v169) = v171;
            v168 |= (unint64_t)(v172 & 0x7F) << v166;
            if (v172 < 0)
            {
              v166 += 7;
              v15 = v167++ >= 9;
              if (v15)
              {
                v168 = 0;
                goto LABEL_494;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v168 = 0;
LABEL_494:
        v367 = v168 != 0;
        v368 = 306;
        goto LABEL_608;
      case 0x21u:
        v173 = 0;
        v174 = 0;
        v175 = 0;
        *(_QWORD *)(a1 + 324) |= 0x400000uLL;
        while (2)
        {
          v176 = *v3;
          v177 = *(_QWORD *)(a2 + v176);
          v178 = v177 + 1;
          if (v177 == -1 || v178 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v179 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v177);
            *(_QWORD *)(a2 + v176) = v178;
            v175 |= (unint64_t)(v179 & 0x7F) << v173;
            if (v179 < 0)
            {
              v173 += 7;
              v15 = v174++ >= 9;
              if (v15)
              {
                v175 = 0;
                goto LABEL_498;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v175 = 0;
LABEL_498:
        v367 = v175 != 0;
        v368 = 292;
        goto LABEL_608;
      case 0x22u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 200;
        goto LABEL_408;
      case 0x23u:
        v180 = 0;
        v181 = 0;
        v182 = 0;
        *(_QWORD *)(a1 + 324) |= 0x400000000uLL;
        while (2)
        {
          v183 = *v3;
          v184 = *(_QWORD *)(a2 + v183);
          v185 = v184 + 1;
          if (v184 == -1 || v185 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v186 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v184);
            *(_QWORD *)(a2 + v183) = v185;
            v182 |= (unint64_t)(v186 & 0x7F) << v180;
            if (v186 < 0)
            {
              v180 += 7;
              v15 = v181++ >= 9;
              if (v15)
              {
                v182 = 0;
                goto LABEL_502;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v182 = 0;
LABEL_502:
        v367 = v182 != 0;
        v368 = 304;
        goto LABEL_608;
      case 0x24u:
        v187 = 0;
        v188 = 0;
        v189 = 0;
        *(_QWORD *)(a1 + 324) |= 0x200000uLL;
        while (2)
        {
          v190 = *v3;
          v191 = *(_QWORD *)(a2 + v190);
          v192 = v191 + 1;
          if (v191 == -1 || v192 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v193 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v191);
            *(_QWORD *)(a2 + v190) = v192;
            v189 |= (unint64_t)(v193 & 0x7F) << v187;
            if (v193 < 0)
            {
              v187 += 7;
              v15 = v188++ >= 9;
              if (v15)
              {
                v189 = 0;
                goto LABEL_506;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v189 = 0;
LABEL_506:
        v367 = v189 != 0;
        v368 = 291;
        goto LABEL_608;
      case 0x25u:
        v194 = 0;
        v195 = 0;
        v51 = 0;
        *(_QWORD *)(a1 + 324) |= 0x200uLL;
        while (2)
        {
          v196 = *v3;
          v197 = *(_QWORD *)(a2 + v196);
          v198 = v197 + 1;
          if (v197 == -1 || v198 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v199 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v197);
            *(_QWORD *)(a2 + v196) = v198;
            v51 |= (unint64_t)(v199 & 0x7F) << v194;
            if (v199 < 0)
            {
              v194 += 7;
              v15 = v195++ >= 9;
              if (v15)
              {
                LODWORD(v51) = 0;
                goto LABEL_510;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v51) = 0;
LABEL_510:
        v369 = 276;
        goto LABEL_559;
      case 0x26u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
        goto LABEL_408;
      case 0x27u:
        v200 = 0;
        v201 = 0;
        v202 = 0;
        *(_QWORD *)(a1 + 324) |= 0x100000000000uLL;
        while (2)
        {
          v203 = *v3;
          v204 = *(_QWORD *)(a2 + v203);
          v205 = v204 + 1;
          if (v204 == -1 || v205 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v206 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v204);
            *(_QWORD *)(a2 + v203) = v205;
            v202 |= (unint64_t)(v206 & 0x7F) << v200;
            if (v206 < 0)
            {
              v200 += 7;
              v15 = v201++ >= 9;
              if (v15)
              {
                v202 = 0;
                goto LABEL_514;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v202 = 0;
LABEL_514:
        v367 = v202 != 0;
        v368 = 314;
        goto LABEL_608;
      case 0x28u:
        v207 = 0;
        v208 = 0;
        v209 = 0;
        *(_QWORD *)(a1 + 324) |= 0x4000000000000uLL;
        while (2)
        {
          v210 = *v3;
          v211 = *(_QWORD *)(a2 + v210);
          v212 = v211 + 1;
          if (v211 == -1 || v212 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v213 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v211);
            *(_QWORD *)(a2 + v210) = v212;
            v209 |= (unint64_t)(v213 & 0x7F) << v207;
            if (v213 < 0)
            {
              v207 += 7;
              v15 = v208++ >= 9;
              if (v15)
              {
                v209 = 0;
                goto LABEL_518;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v209 = 0;
LABEL_518:
        v367 = v209 != 0;
        v368 = 320;
        goto LABEL_608;
      case 0x29u:
        v93 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend((id)a1, "addClusterComposition:", v93);
        goto LABEL_328;
      case 0x2Au:
        v214 = 0;
        v215 = 0;
        v51 = 0;
        *(_QWORD *)(a1 + 324) |= 2uLL;
        while (2)
        {
          v216 = *v3;
          v217 = *(_QWORD *)(a2 + v216);
          v218 = v217 + 1;
          if (v217 == -1 || v218 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v219 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v217);
            *(_QWORD *)(a2 + v216) = v218;
            v51 |= (unint64_t)(v219 & 0x7F) << v214;
            if (v219 < 0)
            {
              v214 += 7;
              v15 = v215++ >= 9;
              if (v15)
              {
                LODWORD(v51) = 0;
                goto LABEL_522;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v51) = 0;
LABEL_522:
        v369 = 72;
        goto LABEL_559;
      case 0x2Bu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 224;
        goto LABEL_408;
      case 0x2Cu:
        v220 = 0;
        v221 = 0;
        v51 = 0;
        *(_QWORD *)(a1 + 324) |= 4uLL;
        while (2)
        {
          v222 = *v3;
          v223 = *(_QWORD *)(a2 + v222);
          v224 = v223 + 1;
          if (v223 == -1 || v224 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v225 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v223);
            *(_QWORD *)(a2 + v222) = v224;
            v51 |= (unint64_t)(v225 & 0x7F) << v220;
            if (v225 < 0)
            {
              v220 += 7;
              v15 = v221++ >= 9;
              if (v15)
              {
                LODWORD(v51) = 0;
                goto LABEL_526;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v51) = 0;
LABEL_526:
        v369 = 76;
        goto LABEL_559;
      case 0x2Du:
        v226 = 0;
        v227 = 0;
        v228 = 0;
        *(_QWORD *)(a1 + 324) |= 0x1000000000000uLL;
        while (2)
        {
          v229 = *v3;
          v230 = *(_QWORD *)(a2 + v229);
          v231 = v230 + 1;
          if (v230 == -1 || v231 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v232 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v230);
            *(_QWORD *)(a2 + v229) = v231;
            v228 |= (unint64_t)(v232 & 0x7F) << v226;
            if (v232 < 0)
            {
              v226 += 7;
              v15 = v227++ >= 9;
              if (v15)
              {
                v228 = 0;
                goto LABEL_530;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v228 = 0;
LABEL_530:
        v367 = v228 != 0;
        v368 = 318;
        goto LABEL_608;
      case 0x2Eu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 80;
        goto LABEL_408;
      case 0x2Fu:
        PBReaderReadString();
        v93 = (_MRAVOutputDeviceSourceInfoProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v93)
          objc_msgSend((id)a1, "addAvailableBluetoothListeningModes:", v93);
        goto LABEL_362;
      case 0x30u:
        v233 = 0;
        v234 = 0;
        v235 = 0;
        *(_QWORD *)(a1 + 324) |= 0x400000000000uLL;
        while (2)
        {
          v236 = *v3;
          v237 = *(_QWORD *)(a2 + v236);
          v238 = v237 + 1;
          if (v237 == -1 || v238 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v239 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v237);
            *(_QWORD *)(a2 + v236) = v238;
            v235 |= (unint64_t)(v239 & 0x7F) << v233;
            if (v239 < 0)
            {
              v233 += 7;
              v15 = v234++ >= 9;
              if (v15)
              {
                v235 = 0;
                goto LABEL_534;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v235 = 0;
LABEL_534:
        v367 = v235 != 0;
        v368 = 316;
        goto LABEL_608;
      case 0x31u:
        v240 = 0;
        v241 = 0;
        v242 = 0;
        *(_QWORD *)(a1 + 324) |= 0x2000000000uLL;
        while (2)
        {
          v243 = *v3;
          v244 = *(_QWORD *)(a2 + v243);
          v245 = v244 + 1;
          if (v244 == -1 || v245 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v246 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v244);
            *(_QWORD *)(a2 + v243) = v245;
            v242 |= (unint64_t)(v246 & 0x7F) << v240;
            if (v246 < 0)
            {
              v240 += 7;
              v15 = v241++ >= 9;
              if (v15)
              {
                v242 = 0;
                goto LABEL_538;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v242 = 0;
LABEL_538:
        v367 = v242 != 0;
        v368 = 307;
        goto LABEL_608;
      case 0x32u:
        v247 = 0;
        v248 = 0;
        v51 = 0;
        *(_QWORD *)(a1 + 324) |= 0x40uLL;
        while (2)
        {
          v249 = *v3;
          v250 = *(_QWORD *)(a2 + v249);
          v251 = v250 + 1;
          if (v250 == -1 || v251 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v252 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v250);
            *(_QWORD *)(a2 + v249) = v251;
            v51 |= (unint64_t)(v252 & 0x7F) << v247;
            if (v252 < 0)
            {
              v247 += 7;
              v15 = v248++ >= 9;
              if (v15)
              {
                LODWORD(v51) = 0;
                goto LABEL_542;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v51) = 0;
LABEL_542:
        v369 = 152;
        goto LABEL_559;
      case 0x33u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_408;
      case 0x34u:
        v253 = 0;
        v254 = 0;
        v255 = 0;
        *(_QWORD *)(a1 + 324) |= 0x2000000000000uLL;
        while (2)
        {
          v256 = *v3;
          v257 = *(_QWORD *)(a2 + v256);
          v258 = v257 + 1;
          if (v257 == -1 || v258 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v259 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v257);
            *(_QWORD *)(a2 + v256) = v258;
            v255 |= (unint64_t)(v259 & 0x7F) << v253;
            if (v259 < 0)
            {
              v253 += 7;
              v15 = v254++ >= 9;
              if (v15)
              {
                v255 = 0;
                goto LABEL_546;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v255 = 0;
LABEL_546:
        v367 = v255 != 0;
        v368 = 319;
        goto LABEL_608;
      case 0x35u:
        *(_QWORD *)(a1 + 324) |= 0x20uLL;
        v260 = *v3;
        v261 = *(_QWORD *)(a2 + v260);
        if (v261 <= 0xFFFFFFFFFFFFFFFBLL && v261 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v64 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v261);
          *(_QWORD *)(a2 + v260) = v261 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v64 = 0;
        }
        v370 = 104;
LABEL_617:
        *(_DWORD *)(a1 + v370) = v64;
        goto LABEL_609;
      case 0x36u:
        v262 = 0;
        v263 = 0;
        v264 = 0;
        *(_QWORD *)(a1 + 324) |= 0x40000uLL;
        while (2)
        {
          v265 = *v3;
          v266 = *(_QWORD *)(a2 + v265);
          v267 = v266 + 1;
          if (v266 == -1 || v267 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v268 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v266);
            *(_QWORD *)(a2 + v265) = v267;
            v264 |= (unint64_t)(v268 & 0x7F) << v262;
            if (v268 < 0)
            {
              v262 += 7;
              v15 = v263++ >= 9;
              if (v15)
              {
                v264 = 0;
                goto LABEL_550;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v264 = 0;
LABEL_550:
        v367 = v264 != 0;
        v368 = 288;
        goto LABEL_608;
      case 0x37u:
        v93 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend((id)a1, "addActivatedClusterMembers:", v93);
        goto LABEL_328;
      case 0x38u:
        v269 = 0;
        v270 = 0;
        v271 = 0;
        *(_QWORD *)(a1 + 324) |= 0x800000000uLL;
        while (2)
        {
          v272 = *v3;
          v273 = *(_QWORD *)(a2 + v272);
          v274 = v273 + 1;
          if (v273 == -1 || v274 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v275 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v273);
            *(_QWORD *)(a2 + v272) = v274;
            v271 |= (unint64_t)(v275 & 0x7F) << v269;
            if (v275 < 0)
            {
              v269 += 7;
              v15 = v270++ >= 9;
              if (v15)
              {
                v271 = 0;
                goto LABEL_554;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v271 = 0;
LABEL_554:
        v367 = v271 != 0;
        v368 = 305;
        goto LABEL_608;
      case 0x39u:
        v276 = 0;
        v277 = 0;
        v51 = 0;
        *(_QWORD *)(a1 + 324) |= 0x80uLL;
        while (2)
        {
          v278 = *v3;
          v279 = *(_QWORD *)(a2 + v278);
          v280 = v279 + 1;
          if (v279 == -1 || v280 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v281 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v279);
            *(_QWORD *)(a2 + v278) = v280;
            v51 |= (unint64_t)(v281 & 0x7F) << v276;
            if (v281 < 0)
            {
              v276 += 7;
              v15 = v277++ >= 9;
              if (v15)
              {
                LODWORD(v51) = 0;
                goto LABEL_558;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v51) = 0;
LABEL_558:
        v369 = 256;
LABEL_559:
        *(_DWORD *)(a1 + v369) = v51;
        goto LABEL_609;
      case 0x3Au:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 64;
        goto LABEL_408;
      case 0x3Bu:
        v282 = 0;
        v283 = 0;
        v284 = 0;
        *(_QWORD *)(a1 + 324) |= 0x1000000uLL;
        while (2)
        {
          v285 = *v3;
          v286 = *(_QWORD *)(a2 + v285);
          v287 = v286 + 1;
          if (v286 == -1 || v287 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v288 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v286);
            *(_QWORD *)(a2 + v285) = v287;
            v284 |= (unint64_t)(v288 & 0x7F) << v282;
            if (v288 < 0)
            {
              v282 += 7;
              v15 = v283++ >= 9;
              if (v15)
              {
                v284 = 0;
                goto LABEL_563;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v284 = 0;
LABEL_563:
        v367 = v284 != 0;
        v368 = 294;
        goto LABEL_608;
      case 0x3Cu:
        v289 = 0;
        v290 = 0;
        v291 = 0;
        *(_QWORD *)(a1 + 324) |= 0x800000uLL;
        while (2)
        {
          v292 = *v3;
          v293 = *(_QWORD *)(a2 + v292);
          v294 = v293 + 1;
          if (v293 == -1 || v294 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v295 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v293);
            *(_QWORD *)(a2 + v292) = v294;
            v291 |= (unint64_t)(v295 & 0x7F) << v289;
            if (v295 < 0)
            {
              v289 += 7;
              v15 = v290++ >= 9;
              if (v15)
              {
                v291 = 0;
                goto LABEL_567;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v291 = 0;
LABEL_567:
        v367 = v291 != 0;
        v368 = 293;
        goto LABEL_608;
      case 0x3Du:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 208;
        goto LABEL_408;
      case 0x3Eu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 232;
        goto LABEL_408;
      case 0x3Fu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 240;
        goto LABEL_408;
      case 0x40u:
        v93 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend((id)a1, "addAllClusterMembers:", v93);
LABEL_328:
        if (!PBReaderPlaceMark() || (_MRAVOutputDeviceDescriptorProtobufReadFrom(v93, a2) & 1) == 0)
          goto LABEL_619;
        goto LABEL_361;
      case 0x41u:
        v296 = 0;
        v297 = 0;
        v298 = 0;
        *(_QWORD *)(a1 + 324) |= 0x40000000000uLL;
        while (2)
        {
          v299 = *v3;
          v300 = *(_QWORD *)(a2 + v299);
          v301 = v300 + 1;
          if (v300 == -1 || v301 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v302 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v300);
            *(_QWORD *)(a2 + v299) = v301;
            v298 |= (unint64_t)(v302 & 0x7F) << v296;
            if (v302 < 0)
            {
              v296 += 7;
              v15 = v297++ >= 9;
              if (v15)
              {
                v298 = 0;
                goto LABEL_571;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v298 = 0;
LABEL_571:
        v367 = v298 != 0;
        v368 = 312;
        goto LABEL_608;
      case 0x42u:
        v303 = 0;
        v304 = 0;
        v305 = 0;
        *(_QWORD *)(a1 + 324) |= 0x20000uLL;
        while (2)
        {
          v306 = *v3;
          v307 = *(_QWORD *)(a2 + v306);
          v308 = v307 + 1;
          if (v307 == -1 || v308 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v309 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v307);
            *(_QWORD *)(a2 + v306) = v308;
            v305 |= (unint64_t)(v309 & 0x7F) << v303;
            if (v309 < 0)
            {
              v303 += 7;
              v15 = v304++ >= 9;
              if (v15)
              {
                v305 = 0;
                goto LABEL_575;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v305 = 0;
LABEL_575:
        v367 = v305 != 0;
        v368 = 287;
        goto LABEL_608;
      case 0x43u:
        v310 = 0;
        v311 = 0;
        v312 = 0;
        *(_QWORD *)(a1 + 324) |= 0x80000uLL;
        while (2)
        {
          v313 = *v3;
          v314 = *(_QWORD *)(a2 + v313);
          v315 = v314 + 1;
          if (v314 == -1 || v315 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v316 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v314);
            *(_QWORD *)(a2 + v313) = v315;
            v312 |= (unint64_t)(v316 & 0x7F) << v310;
            if (v316 < 0)
            {
              v310 += 7;
              v15 = v311++ >= 9;
              if (v15)
              {
                v312 = 0;
                goto LABEL_579;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v312 = 0;
LABEL_579:
        v367 = v312 != 0;
        v368 = 289;
        goto LABEL_608;
      case 0x44u:
        v317 = 0;
        v318 = 0;
        v319 = 0;
        *(_QWORD *)(a1 + 324) |= 0x8000000000000uLL;
        while (2)
        {
          v320 = *v3;
          v321 = *(_QWORD *)(a2 + v320);
          v322 = v321 + 1;
          if (v321 == -1 || v322 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v323 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v321);
            *(_QWORD *)(a2 + v320) = v322;
            v319 |= (unint64_t)(v323 & 0x7F) << v317;
            if (v323 < 0)
            {
              v317 += 7;
              v15 = v318++ >= 9;
              if (v15)
              {
                v319 = 0;
                goto LABEL_583;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v319 = 0;
LABEL_583:
        v367 = v319 != 0;
        v368 = 321;
        goto LABEL_608;
      case 0x45u:
        v93 = objc_alloc_init(_MRGroupSessionInfoProtobuf);
        objc_storeStrong((id *)(a1 + 136), v93);
        if (PBReaderPlaceMark() && (_MRGroupSessionInfoProtobufReadFrom((uint64_t)v93, a2) & 1) != 0)
        {
LABEL_361:
          PBReaderRecallMark();
LABEL_362:

LABEL_609:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_619:

        return 0;
      case 0x46u:
        v324 = 0;
        v325 = 0;
        v326 = 0;
        *(_QWORD *)(a1 + 324) |= 0x10000000000uLL;
        while (2)
        {
          v327 = *v3;
          v328 = *(_QWORD *)(a2 + v327);
          v329 = v328 + 1;
          if (v328 == -1 || v329 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v330 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v328);
            *(_QWORD *)(a2 + v327) = v329;
            v326 |= (unint64_t)(v330 & 0x7F) << v324;
            if (v330 < 0)
            {
              v324 += 7;
              v15 = v325++ >= 9;
              if (v15)
              {
                v326 = 0;
                goto LABEL_587;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v326 = 0;
LABEL_587:
        v367 = v326 != 0;
        v368 = 310;
        goto LABEL_608;
      case 0x47u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
        goto LABEL_408;
      case 0x48u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 216;
        goto LABEL_408;
      case 0x49u:
        v331 = 0;
        v332 = 0;
        v333 = 0;
        *(_QWORD *)(a1 + 324) |= 0x800000000000uLL;
        while (2)
        {
          v334 = *v3;
          v335 = *(_QWORD *)(a2 + v334);
          v336 = v335 + 1;
          if (v335 == -1 || v336 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v337 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v335);
            *(_QWORD *)(a2 + v334) = v336;
            v333 |= (unint64_t)(v337 & 0x7F) << v331;
            if (v337 < 0)
            {
              v331 += 7;
              v15 = v332++ >= 9;
              if (v15)
              {
                v333 = 0;
                goto LABEL_591;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v333 = 0;
LABEL_591:
        v367 = v333 != 0;
        v368 = 317;
        goto LABEL_608;
      case 0x4Au:
        v338 = 0;
        v339 = 0;
        v340 = 0;
        *(_QWORD *)(a1 + 324) |= 0x40000000uLL;
        while (2)
        {
          v341 = *v3;
          v342 = *(_QWORD *)(a2 + v341);
          v343 = v342 + 1;
          if (v342 == -1 || v343 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v344 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v342);
            *(_QWORD *)(a2 + v341) = v343;
            v340 |= (unint64_t)(v344 & 0x7F) << v338;
            if (v344 < 0)
            {
              v338 += 7;
              v15 = v339++ >= 9;
              if (v15)
              {
                v340 = 0;
                goto LABEL_595;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v340 = 0;
LABEL_595:
        v367 = v340 != 0;
        v368 = 300;
        goto LABEL_608;
      case 0x4Bu:
        v345 = 0;
        v346 = 0;
        v347 = 0;
        *(_QWORD *)(a1 + 324) |= 0x200000000000uLL;
        while (2)
        {
          v348 = *v3;
          v349 = *(_QWORD *)(a2 + v348);
          v350 = v349 + 1;
          if (v349 == -1 || v350 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v351 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v349);
            *(_QWORD *)(a2 + v348) = v350;
            v347 |= (unint64_t)(v351 & 0x7F) << v345;
            if (v351 < 0)
            {
              v345 += 7;
              v15 = v346++ >= 9;
              if (v15)
              {
                v347 = 0;
                goto LABEL_599;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v347 = 0;
LABEL_599:
        v367 = v347 != 0;
        v368 = 315;
        goto LABEL_608;
      case 0x4Cu:
        v352 = 0;
        v353 = 0;
        v354 = 0;
        *(_QWORD *)(a1 + 324) |= 0x400uLL;
        while (2)
        {
          v355 = *v3;
          v356 = *(_QWORD *)(a2 + v355);
          v357 = v356 + 1;
          if (v356 == -1 || v357 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v358 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v356);
            *(_QWORD *)(a2 + v355) = v357;
            v354 |= (unint64_t)(v358 & 0x7F) << v352;
            if (v358 < 0)
            {
              v352 += 7;
              v15 = v353++ >= 9;
              if (v15)
              {
                v354 = 0;
                goto LABEL_603;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v354 = 0;
LABEL_603:
        v367 = v354 != 0;
        v368 = 280;
        goto LABEL_608;
      case 0x4Du:
        v359 = 0;
        v360 = 0;
        v361 = 0;
        *(_QWORD *)(a1 + 324) |= 0x10000000uLL;
        while (2)
        {
          v362 = *v3;
          v363 = *(_QWORD *)(a2 + v362);
          v364 = v363 + 1;
          if (v363 == -1 || v364 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v365 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v363);
            *(_QWORD *)(a2 + v362) = v364;
            v361 |= (unint64_t)(v365 & 0x7F) << v359;
            if (v365 < 0)
            {
              v359 += 7;
              v15 = v360++ >= 9;
              if (v15)
              {
                v361 = 0;
                goto LABEL_607;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v361 = 0;
LABEL_607:
        v367 = v361 != 0;
        v368 = 298;
LABEL_608:
        *(_BYTE *)(a1 + v368) = v367;
        goto LABEL_609;
      case 0x4Eu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 144;
LABEL_408:
        v366 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_609;
      case 0x4Fu:
        PBReaderReadString();
        v93 = (_MRAVOutputDeviceSourceInfoProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v93)
          objc_msgSend((id)a1, "addDnsNames:", v93);
        goto LABEL_362;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_609;
    }
  }
}

uint64_t _MRAVOutputDeviceSourceInfoProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRBundlePermittedForGroupSessions(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.Music")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.proximitycontrold")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.MediaRemoteUI")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.springboard"));
  }

  return v2;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemInfoCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "infoCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

uint64_t MRContentItemGetTrackNumber(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "trackNumber");

  return v2;
}

uint64_t MRContentItemGetTotalDiscCount(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "totalDiscCount");

  return v2;
}

uint64_t MRContentItemGetITunesStoreAlbumArtistIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "iTunesStoreAlbumArtistIdentifier");

  return v2;
}

uint64_t MRContentItemGetHasLyrics(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "lyricsAvailable");

  return v2;
}

uint64_t MRContentItemGetDiscNumber(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "discNumber");

  return v2;
}

void sub_193886250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRCreateContentItemsFromXPCMessage(void *a1)
{
  return MRCreateArrayFomXPCMessage(a1, "MRXPC_CONTENT_CHILD_ITEMS_DATA_KEY", &__block_literal_global_49);
}

uint64_t MRMediaRemoteServiceGetDeviceInfo(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "getDeviceInfoForPlayerPath:queue:completion:", a2, a3, a4);
}

id MRCreateProtobufFromXPCMessage(void *a1)
{
  UInt8 *v1;
  void *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_PROTOBUF_DATA_KEY");
  if (v1)
  {
    +[MRProtocolMessage protocolMessageWithProtobufData:error:](MRProtocolMessage, "protocolMessageWithProtobufData:error:", v1, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription(int a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;
  uint64_t v5;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!a1)
  {
    v4 = CFSTR("MRVolumeControlCapabilitiesNone");
LABEL_12:
    objc_msgSend(v3, "addObject:", v4);
    goto LABEL_13;
  }
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("MRVolumeControlCapabilitiesRelative"));
    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("MRVolumeControlCapabilitiesAbsolute"));
  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_10:
  objc_msgSend(v3, "addObject:", CFSTR("MRVolumeControlCapabilitiesAdjustment"));
  if ((a1 & 8) != 0)
  {
LABEL_11:
    v4 = CFSTR("MRVolumeControlCapabilitiesMute");
    goto LABEL_12;
  }
LABEL_13:
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(" | "));
  v5 = objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_19388793C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19388A040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRContentItemSetDefaultPlaybackRate(void *a1, float a2)
{
  void *v4;
  float v5;
  void *v6;
  char v7;
  void *v8;
  double v9;
  id v10;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v10 = a1;
    objc_msgSend(v10, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "defaultPlaybackRate");
    if (v5 == a2)
    {
      objc_msgSend(v10, "metadata");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasDefaultPlaybackRate");

      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v10, "metadata");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(float *)&v9 = a2;
    objc_msgSend(v8, "setDefaultPlaybackRate:", v9);

LABEL_8:
  }
}

void sub_19388A9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRAVOutputDeviceCopyName(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputContextCopyOutputDevices(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "outputDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

void sub_19388AE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

id MRPlaybackQueueCreateFromCache(void *a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  MRPlaybackQueueRequest *v23;
  MRPlaybackQueueRequest *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  MRPlaybackQueue *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v43;
  char v44;
  unint64_t v45;
  int v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[4];
  id v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = objc_msgSend(v8, "hasRange");
  v11 = objc_msgSend(v8, "range");
  v13 = v12;
  objc_msgSend(v8, "contentItemIdentifiers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v52[0] = MEMORY[0x1E0C809B0];
    v52[1] = 3221225472;
    v52[2] = __MRPlaybackQueueCreateFromCache_block_invoke;
    v52[3] = &unk_1E30C5A80;
    v53 = v9;
    v15 = (unsigned int (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x194036C44](v52);
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v10)
    {
      if (v11 >= v11 + v13)
      {
        if (objc_msgSend(v16, "count") == v13)
          goto LABEL_38;
        goto LABEL_32;
      }
      v44 = v10;
      v46 = a3;
      v47 = v9;
      v43 = v13;
      v45 = v11;
      v18 = v11;
      do
      {
        objc_msgSend(v7, "contentItemWithOffset:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = v19;
        if (v19)
        {
          objc_msgSend(v19, "identifier");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v14, "containsObject:", v21);

          if (v22)
          {
            v23 = [MRPlaybackQueueRequest alloc];
            v24 = -[MRPlaybackQueueRequest initWithIdentifiers:](v23, "initWithIdentifiers:", MEMORY[0x1E0C9AA60]);
            v25 = MRContentItemCreateFromRequest(v20, v24);
            objc_msgSend(v17, "addObject:", v25);

          }
          else if (((unsigned int (**)(_QWORD, void *, id))v15)[2](v15, v20, v8))
          {
            objc_msgSend(v17, "addObject:", v20);
          }
        }

        ++v18;
        --v13;
      }
      while (v13);
    }
    else
    {
      if (!v14)
      {
        v35 = objc_msgSend(v16, "count");
LABEL_35:
        v36 = objc_msgSend(v14, "count");
        if (a3 != 3 && v35 != v36)
          goto LABEL_37;
        goto LABEL_38;
      }
      v43 = v13;
      v44 = 0;
      v45 = v11;
      v46 = a3;
      v47 = v9;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v27 = v14;
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v49;
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v49 != v30)
              objc_enumerationMutation(v27);
            objc_msgSend(v7, "contentItemForIdentifier:", *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * i));
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            if (v32 && ((unsigned int (**)(_QWORD, void *, id))v15)[2](v15, v32, v8))
              objc_msgSend(v17, "addObject:", v32);

          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v48, v54, 16);
        }
        while (v29);
      }

    }
    v33 = objc_msgSend(v17, "count");
    if (v33 == v43)
      v34 = v44;
    else
      v34 = 0;
    v9 = v47;
    a3 = v46;
    v11 = v45;
    if ((v34 & 1) != 0)
      goto LABEL_38;
    v35 = v33;
    if ((v44 & 1) == 0)
      goto LABEL_35;
LABEL_32:
    if (a3 != 3)
    {
LABEL_37:
      v26 = 0;
LABEL_39:

      goto LABEL_40;
    }
LABEL_38:
    v37 = -[MRPlaybackQueue initWithContentItems:location:]([MRPlaybackQueue alloc], "initWithContentItems:location:", v17, v11);
    objc_msgSend(v7, "queueIdentifier");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[MRPlaybackQueue setQueueIdentifier:](v37, "setQueueIdentifier:", v38);

    objc_msgSend(v7, "properties");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[MRPlaybackQueue setProperties:](v37, "setProperties:", v39);

    objc_msgSend(v7, "auxiliaryNowPlayingInfo");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[MRPlaybackQueue setAuxiliaryNowPlayingInfo:](v37, "setAuxiliaryNowPlayingInfo:", v40);

    objc_msgSend(v7, "homeUserIdentifiers");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[MRPlaybackQueue setHomeUserIdentifiers:](v37, "setHomeUserIdentifiers:", v41);

    v26 = MRPlaybackQueueCreateFromRequest(v37, v8);
    goto LABEL_39;
  }
  v26 = 0;
LABEL_40:

  return v26;
}

void _onQueue_MRMediaRemoteSendContentItemArtworkUpdatedNotification(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, uint64_t);
  void *v20;
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v4, "clearCachedContentItemArtworkForItems:", v3);
    objc_msgSend(v4, "playerPath");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    _onQueue_MRMediaRemoteSendShortCircutedContentItemArtworkUpdatedNotification(v3, v5);

    v6 = -[MRPlaybackQueueRequest initFromTransactionName:]([MRPlaybackQueueRequest alloc], "initFromTransactionName:", 7);
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
    objc_msgSend(v4, "subscriptionController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = MEMORY[0x1E0C809B0];
    v18 = 3221225472;
    v19 = ___onQueue_MRMediaRemoteSendContentItemArtworkUpdatedNotification_block_invoke;
    v20 = &unk_1E30CC210;
    v9 = v6;
    v21 = v9;
    v10 = v7;
    v22 = v10;
    objc_msgSend(v8, "enumerateFilteredContentItemsBySubscriptionsForContentItems:block:", v3, &v17);

    if (objc_msgSend(v10, "count", v17, v18, v19, v20))
    {
      v11 = -[MRPlaybackQueueRequest initFromTransactionName:]([MRPlaybackQueueRequest alloc], "initFromTransactionName:", 0);
      v12 = MRContentItemsCreateFromRequest(v10, v11);
      _MRLogForCategory(1uLL);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v4, "playerPath");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v14;
        v25 = 2112;
        v26 = v12;
        _os_log_impl(&dword_193827000, v13, OS_LOG_TYPE_DEFAULT, "Sending contentItemChangeArtwork for %{public}@ %@", buf, 0x16u);

      }
      v15 = (void *)MRGetSharedService();
      objc_msgSend(v4, "playerPath");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      MRMediaRemoteServiceSendContentItemArtworkChangedNotification(v15, v16, v12);

    }
  }

}

CFTypeRef MRContentItemGetArtworkData(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "artwork");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "imageData");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void _onQueue_MRMediaRemotePlaybackQueueDataSourceSendContentItemsChangedForPlayer(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "subscriptionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "filteredContentItemsBySubscriptionsForContentItems:", v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "playerPath");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _MRMediaRemoteLogUnsubscribedContentItems(v3, v6, v7);

  if (objc_msgSend(v6, "count"))
  {
    v21 = v3;
    v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v20 = v6;
    v10 = v6;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v23 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
          if (!MRContentItemIsEmpty(v15))
          {
            _MRLogForCategory(1uLL);
            v16 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend(v4, "playerPath");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v27 = v17;
              v28 = 2112;
              v29 = v15;
              _os_log_impl(&dword_193827000, v16, OS_LOG_TYPE_DEFAULT, "Sending contentItemChange for path %{public}@ %@", buf, 0x16u);

            }
            objc_msgSend(v9, "addObject:", v15);
          }
          if (MRContentItemGetArtworkIdentifier(v15))
            objc_msgSend(v8, "addObject:", v15);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      }
      while (v12);
    }

    if (objc_msgSend(v9, "count"))
    {
      v18 = (void *)MRGetSharedService();
      objc_msgSend(v4, "playerPath");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      MRMediaRemoteServiceSendContentItemChangedNotification(v18, v19, v9);

    }
    _onQueue_MRMediaRemoteSendContentItemArtworkUpdatedNotification(v8, v4);

    v6 = v20;
    v3 = v21;
  }

}

CFTypeRef MRContentItemGetArtworkIdentifier(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "artworkIdentifier");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void _onQueue_MRMediaRemotePlaybackQueueDataSourceSendShortCircutedContentItemsChangedForPlayer(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  NSObject *v16;
  __CFString *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __CFString *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  const __CFString *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  __CFString *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "isLocal"))
  {
    +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "existingPlayerClientRequestsForPlayerPath:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v29 = v6;
    objc_msgSend(v6, "subscriptionController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "filteredContentItemsBySubscriptionsForContentItems:", v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    _MRMediaRemoteLogUnsubscribedContentItems(v3, v8, v4);
    if (objc_msgSend(v8, "count"))
    {
      v27 = v4;
      v28 = v3;
      v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v26 = v8;
      v10 = v8;
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v31;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v31 != v13)
              objc_enumerationMutation(v10);
            v15 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
            if (!MRContentItemIsEmpty(v15))
            {
              _MRLogForCategory(1uLL);
              v16 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend(v29, "playerPath");
                v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v35 = v17;
                v36 = 2112;
                v37 = v15;
                _os_log_impl(&dword_193827000, v16, OS_LOG_TYPE_DEFAULT, "Sending short circuted contentItemChange for %{public}@ %@", buf, 0x16u);

              }
              objc_msgSend(v9, "addObject:", v15);
            }
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
        }
        while (v12);
      }

      v4 = v27;
      v3 = v28;
      if (objc_msgSend(v9, "count"))
      {
        v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 2);
        MRAddContentItemsToUserInfo(v18, (const char *)v9);
        objc_msgSend(v29, "playerPath");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        MRAddPlayerPathToUserInfo(v18, v19);

        _MRLogForCategory(1uLL);
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v29, "playerPath");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = (__CFString *)MRContentItemsCopyMinimalReadableDescription(v9, 0);
          *(_DWORD *)buf = 138412802;
          v35 = CFSTR("kMRPlayerPlaybackQueueContentItemsChangedNotification");
          v36 = 2112;
          v37 = v24;
          v38 = 2112;
          v39 = v25;
          _os_log_debug_impl(&dword_193827000, v20, OS_LOG_TYPE_DEBUG, "Sending short circuted notification %@ for %@ %@", buf, 0x20u);

        }
        +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "notificationClient");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        MRCreateDecodedUserInfo(v18);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "dispatchNotification:userInfo:object:", CFSTR("kMRPlayerPlaybackQueueContentItemsChangedNotification"), v23, 0);

      }
      v8 = v26;
    }

  }
}

void *MRAddContentItemsToUserInfo(void *a1, const char *a2)
{
  if (a1)
  {
    if (a2)
      return (void *)objc_msgSend(a1, "setObject:forKeyedSubscript:", a2, CFSTR("kMRMediaRemoteUpdatedContentItemsUserInfoKey"));
  }
  return a1;
}

BOOL MRContentItemIsEmpty(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  objc_msgSend(v1, "metadata");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    objc_msgSend(v1, "info");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v3 = 0;
    }
    else
    {
      objc_msgSend(v1, "currentLanguageOptions");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
      {
        v3 = 0;
      }
      else
      {
        objc_msgSend(v1, "availableLanguageOptions");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v3 = 0;
        }
        else
        {
          objc_msgSend(v1, "sections");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (v7)
          {
            v3 = 0;
          }
          else
          {
            objc_msgSend(v1, "artwork");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "imageData");
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v3 = v9 == 0;

          }
        }

      }
    }

  }
  return v3;
}

void _MRMediaRemoteLogUnsubscribedContentItems(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v5, "count");
  if (v8 > objc_msgSend(v6, "count"))
  {
    v21 = (uint64_t)v7;
    v22 = v5;
    v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count") - objc_msgSend(v6, "count"));
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v29;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v29 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v13);
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v15 = v6;
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
          if (v16)
          {
            v17 = v16;
            v18 = *(_QWORD *)v25;
            while (2)
            {
              v19 = 0;
              do
              {
                if (*(_QWORD *)v25 != v18)
                  objc_enumerationMutation(v15);
                if ((MRContentItemIdentifierIsEqual(v14, *(void **)(*((_QWORD *)&v24 + 1) + 8 * v19)) & 1) != 0)
                {

                  goto LABEL_17;
                }
                ++v19;
              }
              while (v17 != v19);
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
              if (v17)
                continue;
              break;
            }
          }

          objc_msgSend(v23, "addObject:", v14);
LABEL_17:
          ++v13;
        }
        while (v13 != v11);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v11);
    }

    _MRLogForCategory(0);
    v20 = objc_claimAutoreleasedReturnValue();
    v7 = (id)v21;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      _MRMediaRemoteLogUnsubscribedContentItems_cold_1(v21, v23, v20);

    v5 = v22;
  }

}

uint64_t MRContentItemGetHasLanguageOptions(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "languageOptionsAvailable");

  return v2;
}

void MRMediaRemoteServiceSendContentItemChangedNotification(void *a1, void *a2, void *a3)
{
  id v5;
  _xpc_connection_s *v6;
  xpc_object_t message;

  v5 = a1;
  MRCreateXPCMessage(0x20000000000002BuLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(message, a2);
  MRAddContentItemsToXPCMessage(message, a3);
  objc_msgSend(v5, "connection");
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v6, message);
}

void MRAddArrayToXPCMessage(void *a1, const char *a2, void *a3, void *a4)
{
  void *v7;
  void *v8;
  id v9;
  xpc_object_t xdict;

  xdict = a1;
  MRCreateDataFromArray(a3, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = objc_retainAutorelease(v7);
    xpc_dictionary_set_data(xdict, a2, (const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"));
  }

}

void MRMediaRemoteServiceRequestNowPlayingPlaybackQueue(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  _xpc_connection_s *v13;
  id v14;
  _QWORD handler[4];
  id v16;

  v9 = a5;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x200000000000007uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v12, a3);
  MRAddPlaybackQueueRequestToXPCMessage(v12, a2);
  objc_msgSend(v11, "connection");
  v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRequestNowPlayingPlaybackQueue_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v9;
  v14 = v9;
  xpc_connection_send_message_with_reply(v13, v12, v10, handler);

}

void MRAddPlaybackQueueRequestToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a2)
  {
    v3 = a1;
    objc_msgSend(a2, "data");
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    xpc_dictionary_set_data(v3, "MRXPC_NOWPLAYING_PLAYBACK_QUEUE_REQUEST_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

  }
}

void MRAddContentItemsToXPCMessage(void *a1, void *a2)
{
  MRAddArrayToXPCMessage(a1, "MRXPC_CONTENT_CHILD_ITEMS_DATA_KEY", a2, &__block_literal_global_46);
}

CFTypeRef MRContentItemGetRadioStationString(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "radioStationString");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

CFTypeRef MRContentItemGetRadioStationName(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "radioStationName");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

CFTypeRef MRContentItemGetGenre(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "genre");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetCollectionInfo(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetCollectionInfo_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

void MRMediaRemotePlaybackQueueDataSourceInvalidateWithPlaybackQueueForPlayer(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a2);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "invalidatePlaybackQueueWithPlaybackQueue:", a1);
}

void MRMediaRemoteSetPlaybackQueue(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;

  v7 = a3;
  v8 = a4;
  v9 = a2;
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "contentItems");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v11, "count"))
    {
LABEL_5:

      goto LABEL_6;
    }
    v12 = objc_msgSend(v10, "hasLocation");

    if ((v12 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteSetPlaybackQueue(MRNowPlayingPlayerPathRef, MRPlaybackQueueRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRPlaybackQueueRequestResponse.m"), 241, CFSTR("Attempting to set non-range based playbackQueue"));

      goto LABEL_5;
    }
  }
LABEL_6:
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "playbackQueueDispatchQueue");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __MRMediaRemoteSetPlaybackQueue_block_invoke;
  v20[3] = &unk_1E30CB4B0;
  v24 = a1;
  v25 = v10;
  v21 = v10;
  v22 = v7;
  v23 = v8;
  v16 = v8;
  v17 = v7;
  v18 = v10;
  MRCreateDonatedQosBlock(v20);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  msv_dispatch_sync_on_queue();

}

void sub_19388F2BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void MRMediaRemoteSetNowPlayingPlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v5 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "clientForPlayerPath:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRMediaRemoteSetNowPlayingPlayer_block_invoke;
  v13[3] = &unk_1E30C6590;
  v14 = v5;
  v15 = v6;
  v11 = v5;
  v12 = v6;
  objc_msgSend(v10, "updateActivePlayerPath:completion:", v8, v13);

}

void sub_19388F73C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *MRAddDeviceInfoToUserInfo(void *a1, const char *a2)
{
  if (a1)
  {
    if (a2)
      return (void *)objc_msgSend(a1, "setObject:forKeyedSubscript:", a2, CFSTR("kMRPairedDeviceUserInfoKey"));
  }
  return a1;
}

__SecTask *MRMediaRemoteCopyEntitlements(const __CFArray *a1)
{
  __SecTask *result;
  __SecTask *v3;
  CFDictionaryRef v4;

  result = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (result)
  {
    v3 = result;
    v4 = SecTaskCopyValuesForEntitlements(result, a1, 0);
    CFRelease(v3);
    return v4;
  }
  return result;
}

MROrigin *MRCreateOriginFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MROrigin *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_ORIGIN_DATA_KEY");
  if (v1)
    v2 = -[MROrigin initWithData:]([MROrigin alloc], "initWithData:", v1);
  else
    v2 = 0;

  return v2;
}

void MRContentItemSetIsLoading(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isLoading") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasLoading");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setLoading:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetIsAlwaysLive(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isAlwaysLive") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasAlwaysLive");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAlwaysLive:", a2);

    goto LABEL_7;
  }
}

uint64_t MRPlaybackQueueRequestMerge(void *a1, uint64_t a2)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  if (a1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPlaybackQueueRequestMerge(MRPlaybackQueueRequestRef, MRPlaybackQueueRequestRef)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_opt_class();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 328, CFSTR("Type mismatch, expecting %@ found %@"), v7, objc_opt_class());

    if (!a2)
      return objc_msgSend(a1, "mergeFrom:", a2);
  }
  else if (!a2)
  {
    return objc_msgSend(a1, "mergeFrom:", a2);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPlaybackQueueRequestMerge(MRPlaybackQueueRequestRef, MRPlaybackQueueRequestRef)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_opt_class();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 329, CFSTR("Type mismatch, expecting %@ found %@"), v10, objc_opt_class());

  }
  return objc_msgSend(a1, "mergeFrom:", a2);
}

uint64_t MRAVOutputDeviceIsLocalDevice(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isLocalDevice");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRPlaybackQueueRequestSetIncludeArtwork(void *a1, double a2, double a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPlaybackQueueRequestSetIncludeArtwork(MRPlaybackQueueRequestRef, double, double)");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_opt_class();
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRPlaybackQueueRequest_Deprecated.m"), 136, CFSTR("Type mismatch, expecting %@ found %@"), v8, objc_opt_class());

    }
  }
  v9 = a1;
  objc_msgSend(v9, "setArtworkWidth:", a2);
  objc_msgSend(v9, "setArtworkHeight:", a3);

}

void sub_193890238(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CFTypeRef MRContentItemGetRequestIdentifier(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "requestIdentifier");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

void MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  if (a1)
  {
    v3 = (void *)objc_msgSend(a2, "copy");
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:copyItems:", a1, 1);
    +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "playbackQueueDispatchQueue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer_block_invoke;
    v10[3] = &unk_1E30C5F40;
    v11 = v4;
    v12 = v3;
    v7 = v3;
    v8 = v4;
    MRCreateDonatedQosBlock(v10);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    msv_dispatch_sync_on_queue();

  }
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemLyricsCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "lyricsCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemFormattedArtworkCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "formattedArtworkCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

void MRMediaRemoteSetPlaybackStateForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  double v9;
  id v10;

  v7 = (void *)MEMORY[0x1E0C99D68];
  v8 = a4;
  v10 = a3;
  objc_msgSend(v7, "timeIntervalSinceReferenceDate");
  MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp(a1, a2, v10, v8, v9);

}

void MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp(uint64_t a1, uint64_t a2, void *a3, void *a4, double a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  _QWORD block[4];
  __CFString *v36;

  v9 = a3;
  v10 = a4;
  if (!v9)
  {
    v9 = MEMORY[0x1E0C80D38];
    v11 = MEMORY[0x1E0C80D38];
  }
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "playerClientForPlayerPath:", a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "playerPath");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "origin");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isLocal");

  if (!v16)
    goto LABEL_11;
  v17 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_block_invoke;
  block[3] = &unk_1E30C5CA8;
  v36 = CFSTR("com.apple.mediaremote.set-playback-state");
  if (MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_entitlementOnceToken != -1)
    dispatch_once(&MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_entitlementOnceToken, block);
  if (MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_allowListOnceToken != -1)
    dispatch_once(&MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_allowListOnceToken, &__block_literal_global_10);
  objc_msgSend((id)MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_entitlements, "objectForKeyedSubscript:", CFSTR("com.apple.mediaremote.set-playback-state"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "BOOLValue"))
  {

LABEL_11:
    v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeIntervalSinceReferenceDate:", a5);
    objc_msgSend(v13, "updatePlaybackState:date:", a2, v22);

    v23 = (void *)MRGetSharedService();
    objc_msgSend(v13, "playerPath");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    MRMediaRemoteServiceSetPlaybackState(v23, v24, a2, v9, v10, a5);
LABEL_12:

    goto LABEL_13;
  }
  v19 = (void *)MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_allowList;
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "bundleIdentifier");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v19) = objc_msgSend(v19, "containsObject:", v21);

  if ((_DWORD)v19)
    goto LABEL_11;
  _MRLogForCategory(1uLL);
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);

  if (v10)
  {
    v33[0] = v17;
    v33[1] = 3221225472;
    v33[2] = __MRMediaRemoteSetPlaybackStateForPlayerWithTimestamp_block_invoke_403;
    v33[3] = &unk_1E30C6770;
    v34 = v10;
    dispatch_async(v9, v33);
    v24 = v34;
    goto LABEL_12;
  }
LABEL_13:

}

void MRMediaRemoteServiceSetPlaybackState(void *a1, void *a2, unsigned int a3, void *a4, void *a5, double a6)
{
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  _xpc_connection_s *v17;
  _QWORD v18[4];
  id v19;

  v11 = a5;
  v12 = a4;
  kdebug_trace();
  v13 = a1;
  MRCreateXPCMessage(0x200000000000013uLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v14, a2);
  xpc_dictionary_set_uint64(v14, "MRXPC_PLAYBACK_STATE_KEY", a3);
  xpc_dictionary_set_double(v14, "MRXPC_TIMESTAMP", a6);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __MRMediaRemoteServiceSetPlaybackState_block_invoke;
  v18[3] = &unk_1E30C6748;
  v19 = v11;
  v15 = v11;
  _MRServiceCreateErrorHandlerBlock(v18);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "connection");
  v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message_with_reply(v17, v14, v12, v16);
}

void MRContentItemSetTrackNumber(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "trackNumber") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasTrackNumber");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTrackNumber:", a2);

LABEL_8:
  }
}

void MRContentItemSetITunesStoreArtistIdentifier(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "iTunesStoreArtistIdentifier") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasITunesStoreArtistIdentifier");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setITunesStoreArtistIdentifier:", a2);

LABEL_8:
  }
}

void MRContentItemSetITunesStoreAlbumArtistIdentifier(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "iTunesStoreAlbumArtistIdentifier") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasITunesStoreAlbumArtistIdentifier");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setITunesStoreAlbumArtistIdentifier:", a2);

LABEL_8:
  }
}

void MRContentItemSetEditingStyleFlags(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "editingStyleFlags") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasEditingStyleFlags");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setEditingStyleFlags:", a2);

LABEL_8:
  }
}

void sub_193892EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceGetAudioFormatContentInfoForOrigin(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x20000000000003AuLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddOriginToXPCMessage(v11, v9);

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetAudioFormatContentInfoForOrigin_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRAddOriginToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      objc_msgSend(a2, "data");
      v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      xpc_dictionary_set_data(v3, "MRXPC_ORIGIN_DATA_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

    }
  }
}

void MRContentItemSetElapsedTimeTimestamp(void *a1, double a2)
{
  void *v4;
  double v5;
  void *v6;
  char v7;
  void *v8;
  id v9;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v9 = a1;
    objc_msgSend(v9, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "elapsedTimeTimestamp");
    if (v5 == a2)
    {
      objc_msgSend(v9, "metadata");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasElapsedTimeTimestamp");

      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v9, "metadata");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setElapsedTimeTimestamp:", a2);

LABEL_8:
  }
}

void MRMediaRemoteServiceGetMediaPlaybackVolume(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  id v12;

  v5 = a3;
  v6 = a2;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x100000000000004uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetMediaPlaybackVolume_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v12 = v5;
  v10 = v5;
  xpc_connection_send_message_with_reply(v9, v8, v6, handler);

}

void MRMediaRemotePlaybackSessionSetMigrateEndCallback(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a1);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "clientCallbacks");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setPlaybackSessionMigrateEndCallback:", v3);

}

void MRMediaRemotePlaybackSessionSetMigrateBeginCallback(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a1);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "clientCallbacks");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setPlaybackSessionMigrateBeginCallback:", v3);

}

void sub_193893E44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceGetPickedRouteVolumeControlCapabilities(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x300000000000004uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, v9);

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetPickedRouteVolumeControlCapabilities_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRContentItemSetRadioStationString(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetRadioStationString(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 998, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetRadioStationString_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetRadioStationName(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetRadioStationName(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 987, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetRadioStationName_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRAddStringToXPCMessage(void *a1, id a2, const char *a3)
{
  id v5;
  xpc_object_t xdict;

  if (a1)
  {
    if (a2)
    {
      v5 = objc_retainAutorelease(a2);
      xdict = a1;
      xpc_dictionary_set_string(xdict, a3, (const char *)objc_msgSend(v5, "UTF8String"));

    }
  }
}

uint64_t _MRPlaybackQueueProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  _MRContentItemProtobuf *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void *v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 92) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_60;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_62;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_62:
        *(_DWORD *)(a1 + 40) = v19;
        goto LABEL_57;
      case 2u:
        v24 = objc_alloc_init(_MRContentItemProtobuf);
        objc_msgSend((id)a1, "addContentItem:", v24);
        goto LABEL_46;
      case 3u:
        v24 = objc_alloc_init(_MRPlaybackQueueContextProtobuf);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || (_MRPlaybackQueueContextProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_68;
        goto LABEL_55;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 72;
        goto LABEL_44;
      case 5u:
        v24 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 80), v24);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v24->super.super.isa, a2))
        {
          goto LABEL_68;
        }
        goto LABEL_55;
      case 6u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 92) |= 2u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_66:
        *(_BYTE *)(a1 + 88) = v29 != 0;
        goto LABEL_57;
      case 7u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 64;
LABEL_44:
        v33 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_57;
      case 8u:
        v24 = objc_alloc_init(_MRContentItemProtobuf);
        objc_msgSend((id)a1, "addParticipants:", v24);
LABEL_46:
        if (!PBReaderPlaceMark() || (_MRContentItemProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_68;
        goto LABEL_55;
      case 9u:
        PBReaderReadString();
        v24 = (_MRContentItemProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v24)
          objc_msgSend((id)a1, "addHomeUserIdentifiers:", v24);
        goto LABEL_56;
      case 0xAu:
        v24 = objc_alloc_init(_MRDictionaryProtobuf);
        v34 = 56;
        goto LABEL_53;
      case 0xBu:
        v24 = objc_alloc_init(_MRDictionaryProtobuf);
        v34 = 8;
LABEL_53:
        objc_storeStrong((id *)(a1 + v34), v24);
        if (PBReaderPlaceMark() && (_MRDictionaryProtobufReadFrom(v24, a2) & 1) != 0)
        {
LABEL_55:
          PBReaderRecallMark();
LABEL_56:

LABEL_57:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_68:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
    }
  }
}

uint64_t _MRContentItemProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _MRContentItemMetadataProtobuf *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 80;
        goto LABEL_58;
      case 2u:
        v20 = objc_alloc_init(_MRContentItemMetadataProtobuf);
        objc_storeStrong((id *)(a1 + 104), v20);
        if (!PBReaderPlaceMark() || (_MRContentItemMetadataProtobufReadFrom((uint64_t)v20, a2) & 1) == 0)
          goto LABEL_85;
        goto LABEL_71;
      case 3u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_58;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_58;
      case 5u:
        v20 = objc_alloc_init(_MRLanguageOptionGroupProtobuf);
        objc_msgSend((id)a1, "addAvailableLanguageOptions:", v20);
        if (!PBReaderPlaceMark() || (_MRLanguageOptionGroupProtobufReadFrom((uint64_t)v20, a2) & 1) == 0)
          goto LABEL_85;
        goto LABEL_71;
      case 6u:
        v20 = objc_alloc_init(_MRLanguageOptionProtobuf);
        objc_msgSend((id)a1, "addCurrentLanguageOptions:", v20);
        if (!PBReaderPlaceMark() || (_MRLanguageOptionProtobufReadFrom((uint64_t)v20, a2) & 1) == 0)
          goto LABEL_85;
        goto LABEL_71;
      case 7u:
        v20 = objc_alloc_init(_MRLyricsItemProtobuf);
        objc_storeStrong((id *)(a1 + 96), v20);
        if (!PBReaderPlaceMark() || (_MRLyricsItemProtobufReadFrom((uint64_t)v20, a2) & 1) == 0)
          goto LABEL_85;
        goto LABEL_71;
      case 8u:
        v20 = objc_alloc_init(_MRContentItemProtobuf);
        objc_msgSend((id)a1, "addSections:", v20);
        if (!PBReaderPlaceMark() || (_MRContentItemProtobufReadFrom(v20, a2) & 1) == 0)
          goto LABEL_85;
        goto LABEL_71;
      case 9u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 112;
        goto LABEL_58;
      case 0xAu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
        goto LABEL_58;
      case 0xBu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 120;
        goto LABEL_58;
      case 0xCu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 136;
        goto LABEL_58;
      case 0xDu:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 160) |= 2u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_78:
        v33 = 28;
        goto LABEL_83;
      case 0xEu:
        v27 = 0;
        v28 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 160) |= 1u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v23 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v23) = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_82:
        v33 = 24;
LABEL_83:
        *(_DWORD *)(a1 + v33) = v23;
        goto LABEL_73;
      case 0xFu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
LABEL_58:
        v32 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_73;
      case 0x10u:
        PBReaderReadString();
        v20 = (_MRContentItemMetadataProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v20)
          objc_msgSend((id)a1, "addAvailableArtworkFormats:", v20);
        goto LABEL_72;
      case 0x11u:
        PBReaderReadString();
        v20 = (_MRContentItemMetadataProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v20)
          objc_msgSend((id)a1, "addAvailableRemoteArtworkFormats:", v20);
        goto LABEL_72;
      case 0x12u:
        v20 = objc_alloc_init(_MRDataArtworkProtobuf);
        objc_msgSend((id)a1, "addDataArtworks:", v20);
        if (!PBReaderPlaceMark() || !_MRDataArtworkProtobufReadFrom((uint64_t)v20, a2))
          goto LABEL_85;
        goto LABEL_71;
      case 0x13u:
        v20 = objc_alloc_init(_MRRemoteArtworkProtobuf);
        objc_msgSend((id)a1, "addRemoteArtworks:", v20);
        if (!PBReaderPlaceMark() || !_MRRemoteArtworkProtobufReadFrom((uint64_t)v20, a2))
          goto LABEL_85;
        goto LABEL_71;
      case 0x14u:
        v20 = objc_alloc_init(_MRTranscriptAlignmentProtobuf);
        objc_msgSend((id)a1, "addTranscriptAlignments:", v20);
        if (PBReaderPlaceMark() && (_MRTranscriptAlignmentProtobufReadFrom((uint64_t)v20, a2) & 1) != 0)
        {
LABEL_71:
          PBReaderRecallMark();
LABEL_72:

LABEL_73:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_85:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_73;
    }
  }
}

uint64_t _MRContentItemMetadataProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t result;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  char v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  char v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  char v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  char v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  uint64_t v230;
  unint64_t v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  uint64_t v238;
  unint64_t v239;
  char v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  char v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char v268;
  char v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char v274;
  char v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  char v281;
  char v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char v287;
  char v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  char v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  char v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char v311;
  _MRAudioFormatProtobuf *v312;
  uint64_t v313;
  char v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char v319;
  char v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  char v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char v332;
  char v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  char v339;
  char v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  char v345;
  char v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  char v351;
  char v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  char v357;
  char v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  char v364;
  void *v365;
  char v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  char v372;
  char v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  char v379;
  char v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  char v386;
  BOOL v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 568;
        goto LABEL_449;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 560;
        goto LABEL_449;
      case 3u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_QWORD *)(a1 + 632) |= 0x1000000000000uLL;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if (v26 < 0)
            {
              v20 += 7;
              v15 = v21++ >= 9;
              if (v15)
              {
                v22 = 0;
                goto LABEL_474;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_474:
        v387 = v22 != 0;
        v388 = 614;
        goto LABEL_685;
      case 4u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 632) |= 0x80000000000000uLL;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              v15 = v28++ >= 9;
              if (v15)
              {
                v29 = 0;
                goto LABEL_478;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_478:
        v387 = v29 != 0;
        v388 = 621;
        goto LABEL_685;
      case 5u:
        *(_QWORD *)(a1 + 632) |= 0x100000000uLL;
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v36 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v35);
          *(_QWORD *)(a2 + v34) = v35 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v36 = 0;
        }
        v391 = 468;
        goto LABEL_702;
      case 6u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 152;
        goto LABEL_449;
      case 7u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 584;
        goto LABEL_449;
      case 8u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 144;
        goto LABEL_449;
      case 9u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 336;
        goto LABEL_449;
      case 0xAu:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x2000000000uLL;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              v15 = v38++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_482;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_482:
        v389 = 532;
        goto LABEL_647;
      case 0xBu:
        v44 = 0;
        v45 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x2000000uLL;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v48;
            v39 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v15 = v45++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_486;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_486:
        v389 = 372;
        goto LABEL_647;
      case 0xCu:
        *(_QWORD *)(a1 + 632) |= 0x1000uLL;
        v50 = *v3;
        v51 = *(_QWORD *)(a2 + v50);
        if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v51);
          *(_QWORD *)(a2 + v50) = v51 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v52 = 0;
        }
        v392 = 104;
        goto LABEL_707;
      case 0xDu:
        v53 = 0;
        v54 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x80000000uLL;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v57;
            v39 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v15 = v54++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_490;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_490:
        v389 = 464;
        goto LABEL_647;
      case 0xEu:
        *(_QWORD *)(a1 + 632) |= 1uLL;
        v59 = *v3;
        v60 = *(_QWORD *)(a2 + v59);
        if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v60);
          *(_QWORD *)(a2 + v59) = v60 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v52 = 0;
        }
        v392 = 8;
        goto LABEL_707;
      case 0xFu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 400;
        goto LABEL_449;
      case 0x10u:
        v61 = 0;
        v62 = 0;
        v63 = 0;
        *(_QWORD *)(a1 + 632) |= 0x4000000000000uLL;
        while (2)
        {
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          v66 = v65 + 1;
          if (v65 == -1 || v66 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if (v67 < 0)
            {
              v61 += 7;
              v15 = v62++ >= 9;
              if (v15)
              {
                v63 = 0;
                goto LABEL_494;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v63 = 0;
LABEL_494:
        v387 = v63 != 0;
        v388 = 616;
        goto LABEL_685;
      case 0x11u:
        v68 = 0;
        v69 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x800000000uLL;
        while (2)
        {
          v70 = *v3;
          v71 = *(_QWORD *)(a2 + v70);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
            *(_QWORD *)(a2 + v70) = v72;
            v39 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              v15 = v69++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_498;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_498:
        v389 = 480;
        goto LABEL_647;
      case 0x12u:
        v74 = 0;
        v75 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x1000000000uLL;
        while (2)
        {
          v76 = *v3;
          v77 = *(_QWORD *)(a2 + v76);
          v78 = v77 + 1;
          if (v77 == -1 || v78 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
            *(_QWORD *)(a2 + v76) = v78;
            v39 |= (unint64_t)(v79 & 0x7F) << v74;
            if (v79 < 0)
            {
              v74 += 7;
              v15 = v75++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_502;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_502:
        v389 = 528;
        goto LABEL_647;
      case 0x13u:
        v80 = 0;
        v81 = 0;
        v82 = 0;
        *(_QWORD *)(a1 + 632) |= 0x40000000000uLL;
        while (2)
        {
          v83 = *v3;
          v84 = *(_QWORD *)(a2 + v83);
          v85 = v84 + 1;
          if (v84 == -1 || v85 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v84);
            *(_QWORD *)(a2 + v83) = v85;
            v82 |= (unint64_t)(v86 & 0x7F) << v80;
            if (v86 < 0)
            {
              v80 += 7;
              v15 = v81++ >= 9;
              if (v15)
              {
                v82 = 0;
                goto LABEL_506;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v82 = 0;
LABEL_506:
        v387 = v82 != 0;
        v388 = 608;
        goto LABEL_685;
      case 0x15u:
        v88 = 0;
        v89 = 0;
        v90 = 0;
        *(_QWORD *)(a1 + 632) |= 0x200000000000uLL;
        while (2)
        {
          v91 = *v3;
          v92 = *(_QWORD *)(a2 + v91);
          v93 = v92 + 1;
          if (v92 == -1 || v93 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
            *(_QWORD *)(a2 + v91) = v93;
            v90 |= (unint64_t)(v94 & 0x7F) << v88;
            if (v94 < 0)
            {
              v88 += 7;
              v15 = v89++ >= 9;
              if (v15)
              {
                v90 = 0;
                goto LABEL_510;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v90 = 0;
LABEL_510:
        v387 = v90 != 0;
        v388 = 611;
        goto LABEL_685;
      case 0x16u:
        v95 = 0;
        v96 = 0;
        v97 = 0;
        *(_QWORD *)(a1 + 632) |= 0x1000000000000000uLL;
        while (2)
        {
          v98 = *v3;
          v99 = *(_QWORD *)(a2 + v98);
          v100 = v99 + 1;
          if (v99 == -1 || v100 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v99);
            *(_QWORD *)(a2 + v98) = v100;
            v97 |= (unint64_t)(v101 & 0x7F) << v95;
            if (v101 < 0)
            {
              v95 += 7;
              v15 = v96++ >= 9;
              if (v15)
              {
                v97 = 0;
                goto LABEL_514;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v97 = 0;
LABEL_514:
        v387 = v97 != 0;
        v388 = 626;
        goto LABEL_685;
      case 0x17u:
        v102 = 0;
        v103 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x40000000uLL;
        while (2)
        {
          v104 = *v3;
          v105 = *(_QWORD *)(a2 + v104);
          v106 = v105 + 1;
          if (v105 == -1 || v106 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v105);
            *(_QWORD *)(a2 + v104) = v106;
            v39 |= (unint64_t)(v107 & 0x7F) << v102;
            if (v107 < 0)
            {
              v102 += 7;
              v15 = v103++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_518;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_518:
        v389 = 440;
        goto LABEL_647;
      case 0x18u:
        v108 = 0;
        v109 = 0;
        v110 = 0;
        *(_QWORD *)(a1 + 632) |= 0x2000000000000000uLL;
        while (2)
        {
          v111 = *v3;
          v112 = *(_QWORD *)(a2 + v111);
          v113 = v112 + 1;
          if (v112 == -1 || v113 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v112);
            *(_QWORD *)(a2 + v111) = v113;
            v110 |= (unint64_t)(v114 & 0x7F) << v108;
            if (v114 < 0)
            {
              v108 += 7;
              v15 = v109++ >= 9;
              if (v15)
              {
                v110 = 0;
                goto LABEL_522;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v110 = 0;
LABEL_522:
        v387 = v110 != 0;
        v388 = 627;
        goto LABEL_685;
      case 0x19u:
        v115 = 0;
        v116 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x1000000uLL;
        while (2)
        {
          v117 = *v3;
          v118 = *(_QWORD *)(a2 + v117);
          v119 = v118 + 1;
          if (v118 == -1 || v119 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v118);
            *(_QWORD *)(a2 + v117) = v119;
            v39 |= (unint64_t)(v120 & 0x7F) << v115;
            if (v120 < 0)
            {
              v115 += 7;
              v15 = v116++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_526;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_526:
        v389 = 368;
        goto LABEL_647;
      case 0x1Au:
        v121 = 0;
        v122 = 0;
        v123 = 0;
        *(_QWORD *)(a1 + 632) |= 0x800000000000000uLL;
        while (2)
        {
          v124 = *v3;
          v125 = *(_QWORD *)(a2 + v124);
          v126 = v125 + 1;
          if (v125 == -1 || v126 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v127 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v125);
            *(_QWORD *)(a2 + v124) = v126;
            v123 |= (unint64_t)(v127 & 0x7F) << v121;
            if (v127 < 0)
            {
              v121 += 7;
              v15 = v122++ >= 9;
              if (v15)
              {
                v123 = 0;
                goto LABEL_530;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v123 = 0;
LABEL_530:
        v387 = v123 != 0;
        v388 = 625;
        goto LABEL_685;
      case 0x1Bu:
        v128 = 0;
        v129 = 0;
        v130 = 0;
        *(_QWORD *)(a1 + 632) |= 0x2000000000000uLL;
        while (2)
        {
          v131 = *v3;
          v132 = *(_QWORD *)(a2 + v131);
          v133 = v132 + 1;
          if (v132 == -1 || v133 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v134 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v132);
            *(_QWORD *)(a2 + v131) = v133;
            v130 |= (unint64_t)(v134 & 0x7F) << v128;
            if (v134 < 0)
            {
              v128 += 7;
              v15 = v129++ >= 9;
              if (v15)
              {
                v130 = 0;
                goto LABEL_534;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v130 = 0;
LABEL_534:
        v387 = v130 != 0;
        v388 = 615;
        goto LABEL_685;
      case 0x1Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 280;
        goto LABEL_449;
      case 0x1Du:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 496;
        goto LABEL_449;
      case 0x1Eu:
        *(_QWORD *)(a1 + 632) |= 0x4000uLL;
        v135 = *v3;
        v136 = *(_QWORD *)(a2 + v135);
        if (v136 <= 0xFFFFFFFFFFFFFFF7 && v136 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v136);
          *(_QWORD *)(a2 + v135) = v136 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v52 = 0;
        }
        v392 = 120;
        goto LABEL_707;
      case 0x1Fu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 216;
        goto LABEL_449;
      case 0x20u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 240;
        goto LABEL_449;
      case 0x21u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 296;
        goto LABEL_449;
      case 0x22u:
        v137 = 0;
        v138 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x200000uLL;
        while (2)
        {
          v139 = *v3;
          v140 = *(_QWORD *)(a2 + v139);
          v141 = v140 + 1;
          if (v140 == -1 || v141 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v142 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v140);
            *(_QWORD *)(a2 + v139) = v141;
            v39 |= (unint64_t)(v142 & 0x7F) << v137;
            if (v142 < 0)
            {
              v137 += 7;
              v15 = v138++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_538;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_538:
        v389 = 344;
        goto LABEL_647;
      case 0x23u:
        *(_QWORD *)(a1 + 632) |= 2uLL;
        v143 = *v3;
        v144 = *(_QWORD *)(a2 + v143);
        if (v144 <= 0xFFFFFFFFFFFFFFF7 && v144 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v144);
          *(_QWORD *)(a2 + v143) = v144 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v52 = 0;
        }
        v392 = 16;
        goto LABEL_707;
      case 0x24u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 384;
        goto LABEL_449;
      case 0x25u:
        v145 = 0;
        v146 = 0;
        v147 = 0;
        *(_QWORD *)(a1 + 632) |= 0x800000000000uLL;
        while (2)
        {
          v148 = *v3;
          v149 = *(_QWORD *)(a2 + v148);
          v150 = v149 + 1;
          if (v149 == -1 || v150 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v151 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v149);
            *(_QWORD *)(a2 + v148) = v150;
            v147 |= (unint64_t)(v151 & 0x7F) << v145;
            if (v151 < 0)
            {
              v145 += 7;
              v15 = v146++ >= 9;
              if (v15)
              {
                v147 = 0;
                goto LABEL_542;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v147 = 0;
LABEL_542:
        v387 = v147 != 0;
        v388 = 613;
        goto LABEL_685;
      case 0x27u:
        *(_QWORD *)(a1 + 632) |= 0x200000000uLL;
        v152 = *v3;
        v153 = *(_QWORD *)(a2 + v152);
        if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v36 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v153);
          *(_QWORD *)(a2 + v152) = v153 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v36 = 0;
        }
        v391 = 472;
        goto LABEL_702;
      case 0x28u:
        v154 = 0;
        v155 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x80000uLL;
        while (2)
        {
          v156 = *v3;
          v157 = *(_QWORD *)(a2 + v156);
          v158 = v157 + 1;
          if (v157 == -1 || v158 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v159 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v157);
            *(_QWORD *)(a2 + v156) = v158;
            v39 |= (unint64_t)(v159 & 0x7F) << v154;
            if (v159 < 0)
            {
              v154 += 7;
              v15 = v155++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_546;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_546:
        v389 = 264;
        goto LABEL_647;
      case 0x29u:
        v160 = 0;
        v161 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x8000000000uLL;
        while (2)
        {
          v162 = *v3;
          v163 = *(_QWORD *)(a2 + v162);
          v164 = v163 + 1;
          if (v163 == -1 || v164 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v165 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v163);
            *(_QWORD *)(a2 + v162) = v164;
            v39 |= (unint64_t)(v165 & 0x7F) << v160;
            if (v165 < 0)
            {
              v160 += 7;
              v15 = v161++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_550;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_550:
        v389 = 576;
        goto LABEL_647;
      case 0x2Au:
        v166 = 0;
        v167 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x10000000000uLL;
        while (2)
        {
          v168 = *v3;
          v169 = *(_QWORD *)(a2 + v168);
          v170 = v169 + 1;
          if (v169 == -1 || v170 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v171 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v169);
            *(_QWORD *)(a2 + v168) = v170;
            v39 |= (unint64_t)(v171 & 0x7F) << v166;
            if (v171 < 0)
            {
              v166 += 7;
              v15 = v167++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_554;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_554:
        v389 = 580;
        goto LABEL_647;
      case 0x2Bu:
        v172 = 0;
        v173 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x20000000000uLL;
        while (2)
        {
          v174 = *v3;
          v175 = *(_QWORD *)(a2 + v174);
          v176 = v175 + 1;
          if (v175 == -1 || v176 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v177 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v175);
            *(_QWORD *)(a2 + v174) = v176;
            v39 |= (unint64_t)(v177 & 0x7F) << v172;
            if (v177 < 0)
            {
              v172 += 7;
              v15 = v173++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_558;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_558:
        v389 = 592;
        goto LABEL_647;
      case 0x2Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 304;
        goto LABEL_449;
      case 0x2Eu:
        v178 = 0;
        v179 = 0;
        v180 = 0;
        *(_QWORD *)(a1 + 632) |= 0x200000000000000uLL;
        while (2)
        {
          v181 = *v3;
          v182 = *(_QWORD *)(a2 + v181);
          v183 = v182 + 1;
          if (v182 == -1 || v183 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v184 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v182);
            *(_QWORD *)(a2 + v181) = v183;
            v180 |= (unint64_t)(v184 & 0x7F) << v178;
            if (v184 < 0)
            {
              v178 += 7;
              v15 = v179++ >= 9;
              if (v15)
              {
                v180 = 0;
                goto LABEL_562;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v180 = 0;
LABEL_562:
        v387 = v180 != 0;
        v388 = 623;
        goto LABEL_685;
      case 0x30u:
        v185 = 0;
        v186 = 0;
        v187 = 0;
        *(_QWORD *)(a1 + 632) |= 0x20000000000000uLL;
        while (2)
        {
          v188 = *v3;
          v189 = *(_QWORD *)(a2 + v188);
          v190 = v189 + 1;
          if (v189 == -1 || v190 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v191 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v189);
            *(_QWORD *)(a2 + v188) = v190;
            v187 |= (unint64_t)(v191 & 0x7F) << v185;
            if (v191 < 0)
            {
              v185 += 7;
              v15 = v186++ >= 9;
              if (v15)
              {
                v187 = 0;
                goto LABEL_566;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v187 = 0;
LABEL_566:
        v387 = v187 != 0;
        v388 = 619;
        goto LABEL_685;
      case 0x31u:
        v192 = 0;
        v193 = 0;
        v194 = 0;
        *(_QWORD *)(a1 + 632) |= 0x10000000000000uLL;
        while (2)
        {
          v195 = *v3;
          v196 = *(_QWORD *)(a2 + v195);
          v197 = v196 + 1;
          if (v196 == -1 || v197 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v198 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v196);
            *(_QWORD *)(a2 + v195) = v197;
            v194 |= (unint64_t)(v198 & 0x7F) << v192;
            if (v198 < 0)
            {
              v192 += 7;
              v15 = v193++ >= 9;
              if (v15)
              {
                v194 = 0;
                goto LABEL_570;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v194 = 0;
LABEL_570:
        v387 = v194 != 0;
        v388 = 618;
        goto LABEL_685;
      case 0x32u:
        v199 = 0;
        v200 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x800uLL;
        while (2)
        {
          v202 = *v3;
          v203 = *(_QWORD *)(a2 + v202);
          v204 = v203 + 1;
          if (v203 == -1 || v204 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v205 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v203);
            *(_QWORD *)(a2 + v202) = v204;
            v201 |= (unint64_t)(v205 & 0x7F) << v199;
            if (v205 < 0)
            {
              v199 += 7;
              v15 = v200++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_574;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_574:
        v390 = 96;
        goto LABEL_668;
      case 0x34u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 512;
        goto LABEL_449;
      case 0x35u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 520;
        goto LABEL_449;
      case 0x36u:
        v206 = 0;
        v207 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x40uLL;
        while (2)
        {
          v208 = *v3;
          v209 = *(_QWORD *)(a2 + v208);
          v210 = v209 + 1;
          if (v209 == -1 || v210 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v211 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v209);
            *(_QWORD *)(a2 + v208) = v210;
            v201 |= (unint64_t)(v211 & 0x7F) << v206;
            if (v211 < 0)
            {
              v206 += 7;
              v15 = v207++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_578;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_578:
        v390 = 56;
        goto LABEL_668;
      case 0x37u:
        v212 = 0;
        v213 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x80uLL;
        while (2)
        {
          v214 = *v3;
          v215 = *(_QWORD *)(a2 + v214);
          v216 = v215 + 1;
          if (v215 == -1 || v216 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v217 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v215);
            *(_QWORD *)(a2 + v214) = v216;
            v201 |= (unint64_t)(v217 & 0x7F) << v212;
            if (v217 < 0)
            {
              v212 += 7;
              v15 = v213++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_582;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_582:
        v390 = 64;
        goto LABEL_668;
      case 0x38u:
        v218 = 0;
        v219 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x20uLL;
        while (2)
        {
          v220 = *v3;
          v221 = *(_QWORD *)(a2 + v220);
          v222 = v221 + 1;
          if (v221 == -1 || v222 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v223 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v221);
            *(_QWORD *)(a2 + v220) = v222;
            v201 |= (unint64_t)(v223 & 0x7F) << v218;
            if (v223 < 0)
            {
              v218 += 7;
              v15 = v219++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_586;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_586:
        v390 = 48;
        goto LABEL_668;
      case 0x39u:
        v224 = 0;
        v225 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x10uLL;
        while (2)
        {
          v226 = *v3;
          v227 = *(_QWORD *)(a2 + v226);
          v228 = v227 + 1;
          if (v227 == -1 || v228 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v229 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v227);
            *(_QWORD *)(a2 + v226) = v228;
            v201 |= (unint64_t)(v229 & 0x7F) << v224;
            if (v229 < 0)
            {
              v224 += 7;
              v15 = v225++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_590;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_590:
        v390 = 40;
        goto LABEL_668;
      case 0x3Au:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 504;
        goto LABEL_449;
      case 0x3Bu:
        *(_QWORD *)(a1 + 632) |= 0x100000uLL;
        v230 = *v3;
        v231 = *(_QWORD *)(a2 + v230);
        if (v231 <= 0xFFFFFFFFFFFFFFFBLL && v231 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v36 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v231);
          *(_QWORD *)(a2 + v230) = v231 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v36 = 0;
        }
        v391 = 320;
        goto LABEL_702;
      case 0x3Cu:
        v232 = 0;
        v233 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x800000uLL;
        while (2)
        {
          v234 = *v3;
          v235 = *(_QWORD *)(a2 + v234);
          v236 = v235 + 1;
          if (v235 == -1 || v236 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v237 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v235);
            *(_QWORD *)(a2 + v234) = v236;
            v39 |= (unint64_t)(v237 & 0x7F) << v232;
            if (v237 < 0)
            {
              v232 += 7;
              v15 = v233++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_594;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_594:
        v389 = 352;
        goto LABEL_647;
      case 0x3Du:
        *(_QWORD *)(a1 + 632) |= 0x400000uLL;
        v238 = *v3;
        v239 = *(_QWORD *)(a2 + v238);
        if (v239 <= 0xFFFFFFFFFFFFFFFBLL && v239 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v36 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v239);
          *(_QWORD *)(a2 + v238) = v239 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v36 = 0;
        }
        v391 = 348;
LABEL_702:
        *(_DWORD *)(a1 + v391) = v36;
        goto LABEL_708;
      case 0x3Eu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 184;
        goto LABEL_449;
      case 0x3Fu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 536;
        goto LABEL_449;
      case 0x40u:
        v240 = 0;
        v241 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x20000000uLL;
        while (2)
        {
          v242 = *v3;
          v243 = *(_QWORD *)(a2 + v242);
          v244 = v243 + 1;
          if (v243 == -1 || v244 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v245 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v243);
            *(_QWORD *)(a2 + v242) = v244;
            v39 |= (unint64_t)(v245 & 0x7F) << v240;
            if (v245 < 0)
            {
              v240 += 7;
              v15 = v241++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_598;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_598:
        v389 = 428;
        goto LABEL_647;
      case 0x41u:
        v246 = 0;
        v247 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x10000000uLL;
        while (2)
        {
          v248 = *v3;
          v249 = *(_QWORD *)(a2 + v248);
          v250 = v249 + 1;
          if (v249 == -1 || v250 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v251 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v249);
            *(_QWORD *)(a2 + v248) = v250;
            v39 |= (unint64_t)(v251 & 0x7F) << v246;
            if (v251 < 0)
            {
              v246 += 7;
              v15 = v247++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_602;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_602:
        v389 = 424;
        goto LABEL_647;
      case 0x43u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 432;
        goto LABEL_449;
      case 0x44u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 600;
        goto LABEL_449;
      case 0x45u:
        v252 = 0;
        v253 = 0;
        v254 = 0;
        *(_QWORD *)(a1 + 632) |= 0x400000000000000uLL;
        while (2)
        {
          v255 = *v3;
          v256 = *(_QWORD *)(a2 + v255);
          v257 = v256 + 1;
          if (v256 == -1 || v257 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v258 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v256);
            *(_QWORD *)(a2 + v255) = v257;
            v254 |= (unint64_t)(v258 & 0x7F) << v252;
            if (v258 < 0)
            {
              v252 += 7;
              v15 = v253++ >= 9;
              if (v15)
              {
                v254 = 0;
                goto LABEL_606;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v254 = 0;
LABEL_606:
        v387 = v254 != 0;
        v388 = 624;
        goto LABEL_685;
      case 0x46u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 224;
        goto LABEL_449;
      case 0x47u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 416;
        goto LABEL_449;
      case 0x48u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 328;
        goto LABEL_449;
      case 0x49u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 288;
        goto LABEL_449;
      case 0x4Au:
        *(_QWORD *)(a1 + 632) |= 4uLL;
        v259 = *v3;
        v260 = *(_QWORD *)(a2 + v259);
        if (v260 <= 0xFFFFFFFFFFFFFFF7 && v260 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v260);
          *(_QWORD *)(a2 + v259) = v260 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v52 = 0;
        }
        v392 = 24;
        goto LABEL_707;
      case 0x4Bu:
        *(_QWORD *)(a1 + 632) |= 0x100uLL;
        v261 = *v3;
        v262 = *(_QWORD *)(a2 + v261);
        if (v262 <= 0xFFFFFFFFFFFFFFF7 && v262 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v262);
          *(_QWORD *)(a2 + v261) = v262 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v52 = 0;
        }
        v392 = 72;
LABEL_707:
        *(_QWORD *)(a1 + v392) = v52;
        goto LABEL_708;
      case 0x4Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 544;
        goto LABEL_449;
      case 0x4Du:
        v263 = 0;
        v264 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x40000uLL;
        while (2)
        {
          v265 = *v3;
          v266 = *(_QWORD *)(a2 + v265);
          v267 = v266 + 1;
          if (v266 == -1 || v267 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v268 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v266);
            *(_QWORD *)(a2 + v265) = v267;
            v39 |= (unint64_t)(v268 & 0x7F) << v263;
            if (v268 < 0)
            {
              v263 += 7;
              v15 = v264++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_610;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_610:
        v389 = 196;
        goto LABEL_647;
      case 0x4Eu:
        v269 = 0;
        v270 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x20000uLL;
        while (2)
        {
          v271 = *v3;
          v272 = *(_QWORD *)(a2 + v271);
          v273 = v272 + 1;
          if (v272 == -1 || v273 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v274 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v272);
            *(_QWORD *)(a2 + v271) = v273;
            v39 |= (unint64_t)(v274 & 0x7F) << v269;
            if (v274 < 0)
            {
              v269 += 7;
              v15 = v270++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_614;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_614:
        v389 = 192;
        goto LABEL_647;
      case 0x4Fu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 312;
        goto LABEL_449;
      case 0x50u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 208;
        goto LABEL_449;
      case 0x51u:
        v275 = 0;
        v276 = 0;
        v277 = 0;
        *(_QWORD *)(a1 + 632) |= 0x40000000000000uLL;
        while (2)
        {
          v278 = *v3;
          v279 = *(_QWORD *)(a2 + v278);
          v280 = v279 + 1;
          if (v279 == -1 || v280 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v281 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v279);
            *(_QWORD *)(a2 + v278) = v280;
            v277 |= (unint64_t)(v281 & 0x7F) << v275;
            if (v281 < 0)
            {
              v275 += 7;
              v15 = v276++ >= 9;
              if (v15)
              {
                v277 = 0;
                goto LABEL_618;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v277 = 0;
LABEL_618:
        v387 = v277 != 0;
        v388 = 620;
        goto LABEL_685;
      case 0x52u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 232;
        goto LABEL_449;
      case 0x53u:
        v282 = 0;
        v283 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x200uLL;
        while (2)
        {
          v284 = *v3;
          v285 = *(_QWORD *)(a2 + v284);
          v286 = v285 + 1;
          if (v285 == -1 || v286 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v287 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v285);
            *(_QWORD *)(a2 + v284) = v286;
            v201 |= (unint64_t)(v287 & 0x7F) << v282;
            if (v287 < 0)
            {
              v282 += 7;
              v15 = v283++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_622;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_622:
        v390 = 80;
        goto LABEL_668;
      case 0x54u:
        v288 = 0;
        v289 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x4000000uLL;
        while (2)
        {
          v290 = *v3;
          v291 = *(_QWORD *)(a2 + v290);
          v292 = v291 + 1;
          if (v291 == -1 || v292 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v293 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v291);
            *(_QWORD *)(a2 + v290) = v292;
            v39 |= (unint64_t)(v293 & 0x7F) << v288;
            if (v293 < 0)
            {
              v288 += 7;
              v15 = v289++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_626;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_626:
        v389 = 376;
        goto LABEL_647;
      case 0x55u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 200;
        goto LABEL_449;
      case 0x56u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 256;
        goto LABEL_449;
      case 0x57u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 408;
        goto LABEL_449;
      case 0x58u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 168;
        goto LABEL_449;
      case 0x59u:
        v294 = 0;
        v295 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x4000000000uLL;
        while (2)
        {
          v296 = *v3;
          v297 = *(_QWORD *)(a2 + v296);
          v298 = v297 + 1;
          if (v297 == -1 || v298 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v299 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v297);
            *(_QWORD *)(a2 + v296) = v298;
            v39 |= (unint64_t)(v299 & 0x7F) << v294;
            if (v299 < 0)
            {
              v294 += 7;
              v15 = v295++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_630;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_630:
        v389 = 552;
        goto LABEL_647;
      case 0x5Au:
        v300 = 0;
        v301 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x10000uLL;
        while (2)
        {
          v302 = *v3;
          v303 = *(_QWORD *)(a2 + v302);
          v304 = v303 + 1;
          if (v303 == -1 || v304 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v305 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v303);
            *(_QWORD *)(a2 + v302) = v304;
            v39 |= (unint64_t)(v305 & 0x7F) << v300;
            if (v305 < 0)
            {
              v300 += 7;
              v15 = v301++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_634;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_634:
        v389 = 160;
        goto LABEL_647;
      case 0x5Bu:
        v306 = 0;
        v307 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x400000000uLL;
        while (2)
        {
          v308 = *v3;
          v309 = *(_QWORD *)(a2 + v308);
          v310 = v309 + 1;
          if (v309 == -1 || v310 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v311 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v309);
            *(_QWORD *)(a2 + v308) = v310;
            v39 |= (unint64_t)(v311 & 0x7F) << v306;
            if (v311 < 0)
            {
              v306 += 7;
              v15 = v307++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_638;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_638:
        v389 = 476;
        goto LABEL_647;
      case 0x5Cu:
        v312 = objc_alloc_init(_MRAudioFormatProtobuf);
        v313 = 488;
        goto LABEL_380;
      case 0x5Du:
        v312 = objc_alloc_init(_MRAudioFormatProtobuf);
        v313 = 128;
LABEL_380:
        objc_storeStrong((id *)(a1 + v313), v312);
        goto LABEL_399;
      case 0x5Eu:
        v314 = 0;
        v315 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x8000uLL;
        while (2)
        {
          v316 = *v3;
          v317 = *(_QWORD *)(a2 + v316);
          v318 = v317 + 1;
          if (v317 == -1 || v318 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v319 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v317);
            *(_QWORD *)(a2 + v316) = v318;
            v39 |= (unint64_t)(v319 & 0x7F) << v314;
            if (v319 < 0)
            {
              v314 += 7;
              v15 = v315++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_642;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_642:
        v389 = 136;
        goto LABEL_647;
      case 0x5Fu:
        v320 = 0;
        v321 = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 632) |= 0x8000000uLL;
        while (2)
        {
          v322 = *v3;
          v323 = *(_QWORD *)(a2 + v322);
          v324 = v323 + 1;
          if (v323 == -1 || v324 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v325 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v323);
            *(_QWORD *)(a2 + v322) = v324;
            v39 |= (unint64_t)(v325 & 0x7F) << v320;
            if (v325 < 0)
            {
              v320 += 7;
              v15 = v321++ >= 9;
              if (v15)
              {
                LODWORD(v39) = 0;
                goto LABEL_646;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v39) = 0;
LABEL_646:
        v389 = 380;
LABEL_647:
        *(_DWORD *)(a1 + v389) = v39;
        goto LABEL_708;
      case 0x60u:
        v312 = objc_alloc_init(_MRAudioRouteProtobuf);
        objc_storeStrong((id *)(a1 + 248), v312);
        if (!PBReaderPlaceMark() || (_MRAudioRouteProtobufReadFrom((uint64_t)v312, a2) & 1) == 0)
          goto LABEL_710;
        goto LABEL_401;
      case 0x61u:
        v312 = objc_alloc_init(_MRAudioFormatProtobuf);
        objc_msgSend((id)a1, "addAlternativeFormats:", v312);
LABEL_399:
        if (PBReaderPlaceMark() && (_MRAudioFormatProtobufReadFrom((uint64_t)v312, a2) & 1) != 0)
        {
LABEL_401:
          PBReaderRecallMark();

LABEL_708:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_710:

        return 0;
      case 0x62u:
        v326 = 0;
        v327 = 0;
        v328 = 0;
        *(_QWORD *)(a1 + 632) |= 0x400000000000uLL;
        while (2)
        {
          v329 = *v3;
          v330 = *(_QWORD *)(a2 + v329);
          v331 = v330 + 1;
          if (v330 == -1 || v331 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v332 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v330);
            *(_QWORD *)(a2 + v329) = v331;
            v328 |= (unint64_t)(v332 & 0x7F) << v326;
            if (v332 < 0)
            {
              v326 += 7;
              v15 = v327++ >= 9;
              if (v15)
              {
                v328 = 0;
                goto LABEL_651;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v328 = 0;
LABEL_651:
        v387 = v328 != 0;
        v388 = 612;
        goto LABEL_685;
      case 0x63u:
        v333 = 0;
        v334 = 0;
        v335 = 0;
        *(_QWORD *)(a1 + 632) |= 0x100000000000uLL;
        while (2)
        {
          v336 = *v3;
          v337 = *(_QWORD *)(a2 + v336);
          v338 = v337 + 1;
          if (v337 == -1 || v338 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v339 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v337);
            *(_QWORD *)(a2 + v336) = v338;
            v335 |= (unint64_t)(v339 & 0x7F) << v333;
            if (v339 < 0)
            {
              v333 += 7;
              v15 = v334++ >= 9;
              if (v15)
              {
                v335 = 0;
                goto LABEL_655;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v335 = 0;
LABEL_655:
        v387 = v335 != 0;
        v388 = 610;
        goto LABEL_685;
      case 0x64u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 456;
        goto LABEL_449;
      case 0x65u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 448;
        goto LABEL_449;
      case 0x66u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 272;
        goto LABEL_449;
      case 0x67u:
        v340 = 0;
        v341 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x2000uLL;
        while (2)
        {
          v342 = *v3;
          v343 = *(_QWORD *)(a2 + v342);
          v344 = v343 + 1;
          if (v343 == -1 || v344 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v345 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v343);
            *(_QWORD *)(a2 + v342) = v344;
            v201 |= (unint64_t)(v345 & 0x7F) << v340;
            if (v345 < 0)
            {
              v340 += 7;
              v15 = v341++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_659;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_659:
        v390 = 112;
        goto LABEL_668;
      case 0x68u:
        v346 = 0;
        v347 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 0x400uLL;
        while (2)
        {
          v348 = *v3;
          v349 = *(_QWORD *)(a2 + v348);
          v350 = v349 + 1;
          if (v349 == -1 || v350 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v351 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v349);
            *(_QWORD *)(a2 + v348) = v350;
            v201 |= (unint64_t)(v351 & 0x7F) << v346;
            if (v351 < 0)
            {
              v346 += 7;
              v15 = v347++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_663;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_663:
        v390 = 88;
        goto LABEL_668;
      case 0x69u:
        v352 = 0;
        v353 = 0;
        v201 = 0;
        *(_QWORD *)(a1 + 632) |= 8uLL;
        while (2)
        {
          v354 = *v3;
          v355 = *(_QWORD *)(a2 + v354);
          v356 = v355 + 1;
          if (v355 == -1 || v356 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v357 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v355);
            *(_QWORD *)(a2 + v354) = v356;
            v201 |= (unint64_t)(v357 & 0x7F) << v352;
            if (v357 < 0)
            {
              v352 += 7;
              v15 = v353++ >= 9;
              if (v15)
              {
                v201 = 0;
                goto LABEL_667;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v201 = 0;
LABEL_667:
        v390 = 32;
LABEL_668:
        *(_QWORD *)(a1 + v390) = v201;
        goto LABEL_708;
      case 0x6Au:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 360;
        goto LABEL_449;
      case 0x6Bu:
        v358 = 0;
        v359 = 0;
        v360 = 0;
        *(_QWORD *)(a1 + 632) |= 0x100000000000000uLL;
        while (2)
        {
          v361 = *v3;
          v362 = *(_QWORD *)(a2 + v361);
          v363 = v362 + 1;
          if (v362 == -1 || v363 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v364 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v362);
            *(_QWORD *)(a2 + v361) = v363;
            v360 |= (unint64_t)(v364 & 0x7F) << v358;
            if (v364 < 0)
            {
              v358 += 7;
              v15 = v359++ >= 9;
              if (v15)
              {
                v360 = 0;
                goto LABEL_672;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v360 = 0;
LABEL_672:
        v387 = v360 != 0;
        v388 = 622;
        goto LABEL_685;
      case 0x6Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 392;
LABEL_449:
        v365 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_708;
      case 0x6Du:
        v366 = 0;
        v367 = 0;
        v368 = 0;
        *(_QWORD *)(a1 + 632) |= 0x8000000000000uLL;
        while (2)
        {
          v369 = *v3;
          v370 = *(_QWORD *)(a2 + v369);
          v371 = v370 + 1;
          if (v370 == -1 || v371 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v372 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v370);
            *(_QWORD *)(a2 + v369) = v371;
            v368 |= (unint64_t)(v372 & 0x7F) << v366;
            if (v372 < 0)
            {
              v366 += 7;
              v15 = v367++ >= 9;
              if (v15)
              {
                v368 = 0;
                goto LABEL_676;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v368 = 0;
LABEL_676:
        v387 = v368 != 0;
        v388 = 617;
        goto LABEL_685;
      case 0x6Eu:
        v373 = 0;
        v374 = 0;
        v375 = 0;
        *(_QWORD *)(a1 + 632) |= 0x80000000000uLL;
        while (2)
        {
          v376 = *v3;
          v377 = *(_QWORD *)(a2 + v376);
          v378 = v377 + 1;
          if (v377 == -1 || v378 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v379 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v377);
            *(_QWORD *)(a2 + v376) = v378;
            v375 |= (unint64_t)(v379 & 0x7F) << v373;
            if (v379 < 0)
            {
              v373 += 7;
              v15 = v374++ >= 9;
              if (v15)
              {
                v375 = 0;
                goto LABEL_680;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v375 = 0;
LABEL_680:
        v387 = v375 != 0;
        v388 = 609;
        goto LABEL_685;
      case 0x6Fu:
        v380 = 0;
        v381 = 0;
        v382 = 0;
        *(_QWORD *)(a1 + 632) |= 0x4000000000000000uLL;
        while (2)
        {
          v383 = *v3;
          v384 = *(_QWORD *)(a2 + v383);
          v385 = v384 + 1;
          if (v384 == -1 || v385 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v386 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v384);
            *(_QWORD *)(a2 + v383) = v385;
            v382 |= (unint64_t)(v386 & 0x7F) << v380;
            if (v386 < 0)
            {
              v380 += 7;
              v15 = v381++ >= 9;
              if (v15)
              {
                v382 = 0;
                goto LABEL_684;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v382 = 0;
LABEL_684:
        v387 = v382 != 0;
        v388 = 628;
LABEL_685:
        *(_BYTE *)(a1 + v388) = v387;
        goto LABEL_708;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_708;
    }
  }
}

void _onQueue_MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "playerClientForPlayerPath:", v3);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "sendContentItemChanges:", v4);
}

void sub_193899F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRMediaRemotePlaybackQueueDataSourceSendContentItemsChangedForPlayer(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "playbackQueueDispatchQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v4;
  v7 = v4;
  v8 = v3;
  msv_dispatch_sync_on_queue();

}

void MRMediaRemoteServiceGetPlaybackState(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x200000000000012uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, v9);

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetPlaybackState_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteGetExternalScreenType(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = a1;
  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetExternalScreenType(v4, v5, v3);

}

void MRMediaRemoteServiceGetExternalScreenType(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  id v12;

  v5 = a3;
  v6 = a2;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x300000000000006uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetExternalScreenType_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v12 = v5;
  v10 = v5;
  xpc_connection_send_message_with_reply(v9, v8, v6, handler);

}

uint64_t _MRMRNowPlayingAudioFormatContentInfoProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 72;
          goto LABEL_44;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_WORD *)(a1 + 84) |= 2u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_90:
          v69 = 16;
          goto LABEL_124;
        case 3u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_WORD *)(a1 + 84) |= 1u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_94:
          v69 = 8;
          goto LABEL_124;
        case 4u:
          v31 = 0;
          v32 = 0;
          v22 = 0;
          *(_WORD *)(a1 + 84) |= 4u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v22 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_98:
          v69 = 24;
          goto LABEL_124;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 64;
LABEL_44:
          v36 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 6u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_WORD *)(a1 + 84) |= 0x80u;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v14 = v38++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_102:
          v70 = v39 != 0;
          v71 = 80;
          goto LABEL_107;
        case 7u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          *(_WORD *)(a1 + 84) |= 0x100u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v45 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v14 = v44++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_106;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
LABEL_106:
          v70 = v45 != 0;
          v71 = 81;
LABEL_107:
          *(_BYTE *)(a1 + v71) = v70;
          continue;
        case 8u:
          v49 = 0;
          v50 = 0;
          v22 = 0;
          *(_WORD *)(a1 + 84) |= 8u;
          while (2)
          {
            v51 = *v3;
            v52 = *(_QWORD *)(a2 + v51);
            if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
              *(_QWORD *)(a2 + v51) = v52 + 1;
              v22 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                v14 = v50++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_111:
          v69 = 32;
          goto LABEL_124;
        case 9u:
          v54 = 0;
          v55 = 0;
          v22 = 0;
          *(_WORD *)(a1 + 84) |= 0x40u;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v22 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                v14 = v55++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_115:
          v69 = 56;
          goto LABEL_124;
        case 0xAu:
          v59 = 0;
          v60 = 0;
          v22 = 0;
          *(_WORD *)(a1 + 84) |= 0x10u;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
              *(_QWORD *)(a2 + v61) = v62 + 1;
              v22 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                v14 = v60++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_119:
          v69 = 40;
          goto LABEL_124;
        case 0xBu:
          v64 = 0;
          v65 = 0;
          v22 = 0;
          *(_WORD *)(a1 + 84) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v66 = *v3;
        v67 = *(_QWORD *)(a2 + v66);
        if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
          break;
        v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
        *(_QWORD *)(a2 + v66) = v67 + 1;
        v22 |= (unint64_t)(v68 & 0x7F) << v64;
        if ((v68 & 0x80) == 0)
          goto LABEL_121;
        v64 += 7;
        v14 = v65++ >= 9;
        if (v14)
        {
          v22 = 0;
          goto LABEL_123;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_121:
      if (*(_BYTE *)(a2 + *v5))
        v22 = 0;
LABEL_123:
      v69 = 48;
LABEL_124:
      *(_QWORD *)(a1 + v69) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRMediaRemoteMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  _MRSendCommandMessageProtobuf *v36;
  uint64_t v37;
  uint64_t result;
  void *v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 816) |= 4u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_331;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_333;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_331:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_333:
        v40 = 704;
        goto LABEL_338;
      case 2u:
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = 512;
        goto LABEL_270;
      case 3u:
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = 40;
        goto LABEL_270;
      case 4u:
        v25 = 0;
        v26 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 816) |= 2u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_337;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_337:
        v40 = 144;
LABEL_338:
        *(_DWORD *)(a1 + v40) = v19;
        goto LABEL_328;
      case 5u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 816) |= 1u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_342;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_342:
        *(_QWORD *)(a1 + 8) = v32;
        goto LABEL_328;
      case 6u:
        v36 = objc_alloc_init(_MRSendCommandMessageProtobuf);
        objc_storeStrong((id *)(a1 + 536), v36);
        if (!PBReaderPlaceMark() || (_MRSendCommandMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 7u:
        v36 = objc_alloc_init(_MRSendCommandResultMessageProtobuf);
        objc_storeStrong((id *)(a1 + 544), v36);
        if (!PBReaderPlaceMark()
          || (_MRSendCommandResultMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 8u:
        v36 = objc_alloc_init(_MRGetStateMessageProtobuf);
        objc_storeStrong((id *)(a1 + 200), v36);
        if (!PBReaderPlaceMark() || !_MRGetStateMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 9u:
        v36 = objc_alloc_init(_MRSetStateMessageProtobuf);
        v37 = 664;
        goto LABEL_241;
      case 0xAu:
        v36 = objc_alloc_init(_MRSetArtworkMessageProtobuf);
        objc_storeStrong((id *)(a1 + 600), v36);
        if (!PBReaderPlaceMark() || (_MRSetArtworkMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0xBu:
        v36 = objc_alloc_init(_MRRegisterHIDDeviceMessageProtobuf);
        objc_storeStrong((id *)(a1 + 440), v36);
        if (!PBReaderPlaceMark()
          || (_MRRegisterHIDDeviceMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0xCu:
        v36 = objc_alloc_init(_MRRegisterHIDDeviceResultMessageProtobuf);
        objc_storeStrong((id *)(a1 + 448), v36);
        if (!PBReaderPlaceMark() || !_MRRegisterHIDDeviceResultMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0xDu:
        v36 = objc_alloc_init(_MRSendHIDEventMessageProtobuf);
        objc_storeStrong((id *)(a1 + 552), v36);
        if (!PBReaderPlaceMark() || (_MRSendHIDEventMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0xEu:
        v36 = objc_alloc_init(_MRSendHIDReportMessageProtobuf);
        objc_storeStrong((id *)(a1 + 560), v36);
        if (!PBReaderPlaceMark() || !_MRSendHIDReportMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0xFu:
        v36 = objc_alloc_init(_MRSendVirtualTouchEventMessageProtobuf);
        objc_storeStrong((id *)(a1 + 584), v36);
        if (!PBReaderPlaceMark()
          || (_MRSendVirtualTouchEventMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x10u:
        v36 = objc_alloc_init(_MRNotificationMessageProtobuf);
        objc_storeStrong((id *)(a1 + 296), v36);
        if (!PBReaderPlaceMark() || !_MRNotificationMessageProtobufReadFrom(v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x11u:
        v36 = objc_alloc_init(_MRPlaybackQueueProtobuf);
        objc_storeStrong((id *)(a1 + 72), v36);
        if (!PBReaderPlaceMark() || (_MRPlaybackQueueProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x14u:
        v36 = objc_alloc_init(_MRDeviceInfoMessageProtobuf);
        objc_storeStrong((id *)(a1 + 104), v36);
        if (!PBReaderPlaceMark() || (_MRDeviceInfoMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x15u:
        v36 = objc_alloc_init(_MRClientUpdatesConfigurationProtobuf);
        objc_storeStrong((id *)(a1 + 48), v36);
        if (!PBReaderPlaceMark() || (_MRClientUpdatesConfigurationProtobufReadFrom(v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x16u:
        v36 = objc_alloc_init(_MRVolumeControlAvailabilityProtobuf);
        objc_storeStrong((id *)(a1 + 280), v36);
        if (!PBReaderPlaceMark()
          || (_MRVolumeControlAvailabilityProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x17u:
        v36 = objc_alloc_init(_MRGameControllerMessageProtobuf);
        objc_storeStrong((id *)(a1 + 160), v36);
        if (!PBReaderPlaceMark() || (_MRGameControllerMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x18u:
        v36 = objc_alloc_init(_MRRegisterGameControllerMessageProtobuf);
        objc_storeStrong((id *)(a1 + 424), v36);
        if (!PBReaderPlaceMark()
          || (_MRRegisterGameControllerMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x19u:
        v36 = objc_alloc_init(_MRRegisterGameControllerResponseMessageProtobuf);
        objc_storeStrong((id *)(a1 + 432), v36);
        if (!PBReaderPlaceMark()
          || (_MRRegisterGameControllerResponseMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x1Au:
        v36 = objc_alloc_init(_MRUnregisterGameControllerMessageProtobuf);
        objc_storeStrong((id *)(a1 + 720), v36);
        if (!PBReaderPlaceMark()
          || (_MRUnregisterGameControllerMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x1Bu:
        v36 = objc_alloc_init(_MRRegisterForGameControllerEventsMessageProtobuf);
        objc_storeStrong((id *)(a1 + 416), v36);
        if (!PBReaderPlaceMark()
          || (_MRRegisterForGameControllerEventsMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x1Cu:
        v36 = objc_alloc_init(_MRKeyboardMessageProtobuf);
        objc_storeStrong((id *)(a1 + 272), v36);
        if (!PBReaderPlaceMark() || (_MRKeyboardMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x1Du:
        v36 = objc_alloc_init(_MRGetKeyboardSessionProtobuf);
        objc_storeStrong((id *)(a1 + 184), v36);
        if (!PBReaderPlaceMark() || !_MRGetKeyboardSessionProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x1Eu:
        v36 = objc_alloc_init(_MRTextInputMessageProtobuf);
        objc_storeStrong((id *)(a1 + 688), v36);
        if (!PBReaderPlaceMark() || (_MRTextInputMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x1Fu:
        v36 = objc_alloc_init(_MRGetVoiceInputDevicesMessageProtobuf);
        objc_storeStrong((id *)(a1 + 208), v36);
        if (!PBReaderPlaceMark() || !_MRGetVoiceInputDevicesMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x20u:
        v36 = objc_alloc_init(_MRGetVoiceInputDevicesResponseMessageProtobuf);
        objc_storeStrong((id *)(a1 + 216), v36);
        if (!PBReaderPlaceMark()
          || (_MRGetVoiceInputDevicesResponseMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x21u:
        v36 = objc_alloc_init(_MRRegisterVoiceInputDeviceMessageProtobuf);
        objc_storeStrong((id *)(a1 + 456), v36);
        if (!PBReaderPlaceMark()
          || (_MRRegisterVoiceInputDeviceMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x22u:
        v36 = objc_alloc_init(_MRRegisterVoiceInputDeviceResponseMessageProtobuf);
        objc_storeStrong((id *)(a1 + 464), v36);
        if (!PBReaderPlaceMark()
          || !_MRRegisterVoiceInputDeviceResponseMessageProtobufReadFrom((uint64_t)v36, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x23u:
        v36 = objc_alloc_init(_MRSetRecordingStateMessageProtobuf);
        objc_storeStrong((id *)(a1 + 656), v36);
        if (!PBReaderPlaceMark()
          || (_MRSetRecordingStateMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x24u:
        v36 = objc_alloc_init(_MRSendVoiceInputMessageProtobuf);
        objc_storeStrong((id *)(a1 + 592), v36);
        if (!PBReaderPlaceMark() || (_MRSendVoiceInputMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x25u:
        v36 = objc_alloc_init(_MRPlaybackQueueRequestProtobuf);
        objc_storeStrong((id *)(a1 + 312), v36);
        if (!PBReaderPlaceMark() || (_MRPlaybackQueueRequestProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x26u:
        v36 = objc_alloc_init(_MRTransactionMessageProtobuf);
        objc_storeStrong((id *)(a1 + 696), v36);
        if (!PBReaderPlaceMark() || (_MRTransactionMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x27u:
        v36 = objc_alloc_init(_MRCryptoPairingMessageProtobuf);
        objc_storeStrong((id *)(a1 + 96), v36);
        if (!PBReaderPlaceMark() || (_MRCryptoPairingMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x28u:
        v36 = objc_alloc_init(_MRGameControllerPropertiesMessageProtobuf);
        objc_storeStrong((id *)(a1 + 168), v36);
        if (!PBReaderPlaceMark()
          || (_MRGameControllerPropertiesMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x29u:
        v36 = objc_alloc_init(_MRSetReadyStateMessageProtobuf);
        objc_storeStrong((id *)(a1 + 408), v36);
        if (!PBReaderPlaceMark() || !_MRSetReadyStateMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x2Au:
        v36 = objc_alloc_init(_MRSetConnectionStateMessageProtobuf);
        objc_storeStrong((id *)(a1 + 64), v36);
        if (!PBReaderPlaceMark()
          || (_MRSetConnectionStateMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x2Bu:
        v36 = objc_alloc_init(_MRSendButtonEventMessageProtobuf);
        objc_storeStrong((id *)(a1 + 528), v36);
        if (!PBReaderPlaceMark()
          || (_MRSendButtonEventMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x2Cu:
        v36 = objc_alloc_init(_MRSetHiliteModeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 624), v36);
        if (!PBReaderPlaceMark() || (_MRSetHiliteModeMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x2Du:
        v36 = objc_alloc_init(_MRWakeDeviceMessageProtobuf);
        objc_storeStrong((id *)(a1 + 808), v36);
        if (!PBReaderPlaceMark() || !_MRWakeDeviceMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x2Eu:
        v36 = objc_alloc_init(_MRGenericMessageProtobuf);
        objc_storeStrong((id *)(a1 + 176), v36);
        if (!PBReaderPlaceMark() || !_MRGenericMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x2Fu:
        v36 = objc_alloc_init(_MRSendPackedVirtualTouchEventMessageProtobuf);
        objc_storeStrong((id *)(a1 + 576), v36);
        if (!PBReaderPlaceMark()
          || (_MRSendPackedVirtualTouchEventMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x30u:
        v36 = objc_alloc_init(_MRSendLyricsEventMessageProtobuf);
        objc_storeStrong((id *)(a1 + 568), v36);
        if (!PBReaderPlaceMark()
          || (_MRSendLyricsEventMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x32u:
        v36 = objc_alloc_init(_MRSetNowPlayingClientMessageProtobuf);
        objc_storeStrong((id *)(a1 + 640), v36);
        if (!PBReaderPlaceMark()
          || (_MRSetNowPlayingClientMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x33u:
        v36 = objc_alloc_init(_MRSetNowPlayingPlayerMessageProtobuf);
        objc_storeStrong((id *)(a1 + 648), v36);
        if (!PBReaderPlaceMark()
          || (_MRSetNowPlayingPlayerMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x34u:
        v36 = objc_alloc_init(_MRAVModifyOutputContextRequestProtobuf);
        objc_storeStrong((id *)(a1 + 288), v36);
        if (!PBReaderPlaceMark()
          || (_MRAVModifyOutputContextRequestProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x35u:
        v36 = objc_alloc_init(_MRGetVolumeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 240), v36);
        if (!PBReaderPlaceMark() || (_MRGetVolumeMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x36u:
        v36 = objc_alloc_init(_MRGetVolumeResultMessageProtobuf);
        objc_storeStrong((id *)(a1 + 264), v36);
        if (!PBReaderPlaceMark()
          || (_MRGetVolumeResultMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x37u:
        v36 = objc_alloc_init(_MRSetVolumeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 672), v36);
        if (!PBReaderPlaceMark() || (_MRSetVolumeMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x38u:
        v36 = objc_alloc_init(_MRVolumeDidChangeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 792), v36);
        if (!PBReaderPlaceMark()
          || (_MRVolumeDidChangeMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x39u:
        v36 = objc_alloc_init(_MRRemoveClientMessageProtobuf);
        objc_storeStrong((id *)(a1 + 480), v36);
        if (!PBReaderPlaceMark() || (_MRRemoveClientMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x3Au:
        v36 = objc_alloc_init(_MRRemovePlayerMessageProtobuf);
        objc_storeStrong((id *)(a1 + 504), v36);
        if (!PBReaderPlaceMark() || (_MRRemovePlayerMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x3Bu:
        v36 = objc_alloc_init(_MRUpdateClientMessageProtobuf);
        objc_storeStrong((id *)(a1 + 736), v36);
        if (!PBReaderPlaceMark() || (_MRUpdateClientMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x3Cu:
        v36 = objc_alloc_init(_MRUpdateContentItemMessageProtobuf);
        objc_storeStrong((id *)(a1 + 752), v36);
        if (!PBReaderPlaceMark()
          || !_MRUpdateContentItemMessageProtobufReadFrom((id *)&v36->super.super.isa, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x3Du:
        v36 = objc_alloc_init(_MRUpdateContentItemArtworkMessageProtobuf);
        objc_storeStrong((id *)(a1 + 744), v36);
        if (!PBReaderPlaceMark()
          || !_MRUpdateContentItemArtworkMessageProtobufReadFrom((id *)&v36->super.super.isa, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x3Eu:
        v36 = objc_alloc_init(_MRUpdatePlayerMessageProtobuf);
        objc_storeStrong((id *)(a1 + 776), v36);
        if (!PBReaderPlaceMark() || (_MRUpdatePlayerMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x3Fu:
        v36 = objc_alloc_init(_MRPromptForRouteAuthorizationMessageProtobuf);
        objc_storeStrong((id *)(a1 + 392), v36);
        if (!PBReaderPlaceMark()
          || (_MRPromptForRouteAuthorizationMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x40u:
        v36 = objc_alloc_init(_MRPromptForRouteAuthorizationResponseMessageProtobuf);
        objc_storeStrong((id *)(a1 + 400), v36);
        if (!PBReaderPlaceMark()
          || (_MRPromptForRouteAuthorizationResponseMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x41u:
        v36 = objc_alloc_init(_MRPresentRouteAuthorizationStatusMessageProtobuf);
        objc_storeStrong((id *)(a1 + 384), v36);
        if (!PBReaderPlaceMark()
          || (_MRPresentRouteAuthorizationStatusMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x42u:
        v36 = objc_alloc_init(_MRGetVolumeControlCapabilitiesMessageProtobuf);
        objc_storeStrong((id *)(a1 + 224), v36);
        if (!PBReaderPlaceMark()
          || (_MRGetVolumeControlCapabilitiesMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x43u:
        v36 = objc_alloc_init(_MRGetVolumeControlCapabilitiesResultMessageProtobuf);
        objc_storeStrong((id *)(a1 + 232), v36);
        if (!PBReaderPlaceMark()
          || (_MRGetVolumeControlCapabilitiesResultMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x44u:
        v36 = objc_alloc_init(_MRVolumeControlCapabilitiesDidChangeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 784), v36);
        if (!PBReaderPlaceMark()
          || !_MRVolumeControlCapabilitiesDidChangeMessageProtobufReadFrom((uint64_t)v36, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x45u:
        v36 = objc_alloc_init(_MRUpdateOutputDevicesMessageProtobuf);
        objc_storeStrong((id *)(a1 + 768), v36);
        if (!PBReaderPlaceMark() || !_MRUpdateOutputDevicesMessageProtobufReadFrom(v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x46u:
        v36 = objc_alloc_init(_MRRemoveOutputDevicesMessageProtobuf);
        objc_storeStrong((id *)(a1 + 496), v36);
        if (!PBReaderPlaceMark() || !_MRRemoveOutputDevicesMessageProtobufReadFrom(v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x47u:
        v36 = objc_alloc_init(_MRRemoteTextInputMessageProtobuf);
        objc_storeStrong((id *)(a1 + 472), v36);
        if (!PBReaderPlaceMark()
          || (_MRRemoteTextInputMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x48u:
        v36 = objc_alloc_init(_MRGetRemoteTextInputSessionProtobuf);
        objc_storeStrong((id *)(a1 + 192), v36);
        if (!PBReaderPlaceMark() || !_MRGetRemoteTextInputSessionProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x49u:
        v36 = objc_alloc_init(_MRPlaybackSessionRequestMessageProtobuf);
        objc_storeStrong((id *)(a1 + 352), v36);
        if (!PBReaderPlaceMark() || !_MRPlaybackSessionRequestMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x4Au:
        v36 = objc_alloc_init(_MRPlaybackSessionResponseMessageProtobuf);
        objc_storeStrong((id *)(a1 + 360), v36);
        if (!PBReaderPlaceMark()
          || (_MRPlaybackSessionResponseMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x4Bu:
        v36 = objc_alloc_init(_MRSetStateMessageProtobuf);
        v37 = 616;
LABEL_241:
        objc_storeStrong((id *)(a1 + v37), v36);
        if (!PBReaderPlaceMark() || (_MRSetStateMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x4Cu:
        v36 = objc_alloc_init(_MRPlaybackSessionMigrateRequestMessageProtobuf);
        objc_storeStrong((id *)(a1 + 336), v36);
        if (!PBReaderPlaceMark()
          || !_MRPlaybackSessionMigrateRequestMessageProtobufReadFrom((id *)&v36->super.super.isa, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x4Du:
        v36 = objc_alloc_init(_MRPlaybackSessionMigrateResponseMessageProtobuf);
        objc_storeStrong((id *)(a1 + 344), v36);
        if (!PBReaderPlaceMark()
          || (_MRPlaybackSessionMigrateResponseMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x4Eu:
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = 152;
        goto LABEL_270;
      case 0x4Fu:
        v36 = objc_alloc_init(_MRPlaybackSessionMigrateBeginMessageProtobuf);
        objc_storeStrong((id *)(a1 + 320), v36);
        if (!PBReaderPlaceMark()
          || !_MRPlaybackSessionMigrateBeginMessageProtobufReadFrom((uint64_t)v36, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x50u:
        v36 = objc_alloc_init(_MRPlaybackSessionMigrateEndMessageProtobuf);
        objc_storeStrong((id *)(a1 + 328), v36);
        if (!PBReaderPlaceMark()
          || (_MRPlaybackSessionMigrateEndMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x51u:
        v36 = objc_alloc_init(_MRUpdateActiveSystemEndpointMessageProtobuf);
        objc_storeStrong((id *)(a1 + 728), v36);
        if (!PBReaderPlaceMark()
          || (_MRUpdateActiveSystemEndpointMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x52u:
        v36 = objc_alloc_init(_MRSetDiscoveryModeProtobufMessage);
        objc_storeStrong((id *)(a1 + 112), v36);
        if (!PBReaderPlaceMark()
          || (_MRSetDiscoveryModeProtobufMessageReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x53u:
        v36 = objc_alloc_init(_MRUpdateEndpointsMessageProtobuf);
        objc_storeStrong((id *)(a1 + 760), v36);
        if (!PBReaderPlaceMark()
          || (_MRUpdateEndpointsMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x54u:
        v36 = objc_alloc_init(_MRRemoveEndpointsMessageProtobuf);
        objc_storeStrong((id *)(a1 + 488), v36);
        if (!PBReaderPlaceMark() || (_MRRemoveEndpointsMessageProtobufReadFrom(v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x55u:
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = 712;
LABEL_270:
        v39 = *(void **)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v23;

        goto LABEL_328;
      case 0x56u:
        v36 = objc_alloc_init(_MRPlayerClientPropertiesMessageProtobuf);
        objc_storeStrong((id *)(a1 + 376), v36);
        if (!PBReaderPlaceMark()
          || (_MRPlayerClientPropertiesMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x57u:
        v36 = objc_alloc_init(_MROriginClientPropertiesMessageProtobuf);
        objc_storeStrong((id *)(a1 + 304), v36);
        if (!PBReaderPlaceMark()
          || (_MROriginClientPropertiesMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x58u:
        v36 = objc_alloc_init(_MRAudioFadeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 24), v36);
        if (!PBReaderPlaceMark() || (_MRAudioFadeMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x59u:
        v36 = objc_alloc_init(_MRAudioFadeResponseMessageProtobuf);
        objc_storeStrong((id *)(a1 + 32), v36);
        if (!PBReaderPlaceMark()
          || (_MRAudioFadeResponseMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x5Au:
        v36 = objc_alloc_init(_MRDiscoveryUpdateEndpointsProtobufMessage);
        objc_storeStrong((id *)(a1 + 120), v36);
        if (!PBReaderPlaceMark()
          || !_MRDiscoveryUpdateEndpointsProtobufMessageReadFrom((id *)&v36->super.super.isa, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x5Bu:
        v36 = objc_alloc_init(_MRDiscoveryUpdateOutputDevicesProtobufMessage);
        objc_storeStrong((id *)(a1 + 128), v36);
        if (!PBReaderPlaceMark()
          || !_MRDiscoveryUpdateOutputDevicesProtobufMessageReadFrom((id *)&v36->super.super.isa, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x5Cu:
        v36 = objc_alloc_init(_MRSetListeningModeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 632), v36);
        if (!PBReaderPlaceMark() || !_MRSetListeningModeMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x5Du:
        v36 = objc_alloc_init(_MRErrorProtobuf);
        objc_storeStrong((id *)(a1 + 136), v36);
        if (!PBReaderPlaceMark() || (_MRErrorProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x5Eu:
        v36 = objc_alloc_init(_MRConfigureConnectionMessageProtobuf);
        objc_storeStrong((id *)(a1 + 56), v36);
        if (!PBReaderPlaceMark() || !_MRConfigureConnectionMessageProtobufReadFrom((uint64_t)v36, a2))
          goto LABEL_344;
        goto LABEL_327;
      case 0x5Fu:
        v36 = objc_alloc_init(_MRCreateHostedEndpointRequestProtobuf);
        objc_storeStrong((id *)(a1 + 80), v36);
        if (!PBReaderPlaceMark() || (_MRCreateHostedEndpointRequestProtobufReadFrom(v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x60u:
        v36 = objc_alloc_init(_MRCreateHostedEndpointResponseProtobuf);
        objc_storeStrong((id *)(a1 + 88), v36);
        if (!PBReaderPlaceMark()
          || (_MRCreateHostedEndpointResponseProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x61u:
        v36 = objc_alloc_init(_MRAdjustVolumeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 16), v36);
        if (!PBReaderPlaceMark() || (_MRAdjustVolumeMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x62u:
        v36 = objc_alloc_init(_MRGetVolumeMutedMessageProtobuf);
        objc_storeStrong((id *)(a1 + 248), v36);
        if (!PBReaderPlaceMark() || (_MRGetVolumeMutedMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x63u:
        v36 = objc_alloc_init(_MRGetVolumeMutedResultMessageProtobuf);
        objc_storeStrong((id *)(a1 + 256), v36);
        if (!PBReaderPlaceMark()
          || (_MRGetVolumeMutedResultMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x64u:
        v36 = objc_alloc_init(_MRSetVolumeMutedMessageProtobuf);
        objc_storeStrong((id *)(a1 + 680), v36);
        if (!PBReaderPlaceMark() || (_MRSetVolumeMutedMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
          goto LABEL_344;
        goto LABEL_327;
      case 0x65u:
        v36 = objc_alloc_init(_MRVolumeMutedDidChangeMessageProtobuf);
        objc_storeStrong((id *)(a1 + 800), v36);
        if (!PBReaderPlaceMark()
          || (_MRVolumeMutedDidChangeMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x66u:
        v36 = objc_alloc_init(_MRSetConversationDetectionEnabledMessageProtobuf);
        objc_storeStrong((id *)(a1 + 608), v36);
        if (!PBReaderPlaceMark()
          || (_MRSetConversationDetectionEnabledMessageProtobufReadFrom((uint64_t)v36, a2) & 1) == 0)
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x67u:
        v36 = objc_alloc_init(_MRPlayerClientParticipantsUpdateMessageProtobuf);
        objc_storeStrong((id *)(a1 + 368), v36);
        if (!PBReaderPlaceMark()
          || !_MRPlayerClientParticipantsUpdateMessageProtobufReadFrom((id *)&v36->super.super.isa, a2))
        {
          goto LABEL_344;
        }
        goto LABEL_327;
      case 0x68u:
        v36 = objc_alloc_init(_MRRequestGroupSessionMessageProtobuf);
        objc_storeStrong((id *)(a1 + 520), v36);
        if (PBReaderPlaceMark()
          && (_MRRequestGroupSessionMessageProtobufReadFrom((uint64_t)v36, a2) & 1) != 0)
        {
LABEL_327:
          PBReaderRecallMark();

LABEL_328:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_344:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_328;
    }
  }
}

uint64_t _MRGetVolumeMutedResultMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_BYTE *)(a1 + 8) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRDeviceInfoMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t result;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  _MRDeviceInfoMessageProtobuf *v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  void *v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 296;
        goto LABEL_233;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 216;
        goto LABEL_233;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 184;
        goto LABEL_233;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 264;
        goto LABEL_233;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_233;
      case 6u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_233;
      case 7u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_DWORD *)(a1 + 324) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_244;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_244:
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_347;
      case 8u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 0x20u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_248;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_248:
        v171 = 164;
        goto LABEL_337;
      case 9u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_DWORD *)(a1 + 324) |= 0x1000000u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_252;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_252:
        v172 = v33 != 0;
        v173 = 319;
        goto LABEL_346;
      case 0xAu:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_DWORD *)(a1 + 324) |= 0x200u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_256;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_256:
        v172 = v39 != 0;
        v173 = 304;
        goto LABEL_346;
      case 0xBu:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_DWORD *)(a1 + 324) |= 0x400u;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v47 + 1;
            v45 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_260;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
LABEL_260:
        v172 = v45 != 0;
        v173 = 305;
        goto LABEL_346;
      case 0xCu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 272;
        goto LABEL_233;
      case 0xDu:
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_DWORD *)(a1 + 324) |= 0x80000u;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v53 + 1;
            v51 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v14 = v50++ >= 9;
              if (v14)
              {
                v51 = 0;
                goto LABEL_264;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
LABEL_264:
        v172 = v51 != 0;
        v173 = 314;
        goto LABEL_346;
      case 0xEu:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        *(_DWORD *)(a1 + 324) |= 0x800000u;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
            *(_QWORD *)(a2 + v58) = v59 + 1;
            v57 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              v14 = v56++ >= 9;
              if (v14)
              {
                v57 = 0;
                goto LABEL_268;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v57 = 0;
LABEL_268:
        v172 = v57 != 0;
        v173 = 318;
        goto LABEL_346;
      case 0xFu:
        v61 = 0;
        v62 = 0;
        v63 = 0;
        *(_DWORD *)(a1 + 324) |= 0x100000u;
        while (2)
        {
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v65 + 1;
            v63 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              v14 = v62++ >= 9;
              if (v14)
              {
                v63 = 0;
                goto LABEL_272;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v63 = 0;
LABEL_272:
        v172 = v63 != 0;
        v173 = 315;
        goto LABEL_346;
      case 0x10u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 64;
        goto LABEL_233;
      case 0x11u:
        v67 = 0;
        v68 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 0x100u;
        while (2)
        {
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 1;
            v27 |= (unint64_t)(v71 & 0x7F) << v67;
            if (v71 < 0)
            {
              v67 += 7;
              v14 = v68++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_276;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_276:
        v171 = 248;
        goto LABEL_337;
      case 0x13u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 120;
        goto LABEL_233;
      case 0x14u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 200;
        goto LABEL_233;
      case 0x15u:
        v73 = 0;
        v74 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 8u;
        while (2)
        {
          v75 = *v3;
          v76 = *(_QWORD *)(a2 + v75);
          if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
            *(_QWORD *)(a2 + v75) = v76 + 1;
            v27 |= (unint64_t)(v77 & 0x7F) << v73;
            if (v77 < 0)
            {
              v73 += 7;
              v14 = v74++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_280;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_280:
        v171 = 116;
        goto LABEL_337;
      case 0x16u:
        v78 = 0;
        v79 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 0x40u;
        while (2)
        {
          v80 = *v3;
          v81 = *(_QWORD *)(a2 + v80);
          if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v81);
            *(_QWORD *)(a2 + v80) = v81 + 1;
            v27 |= (unint64_t)(v82 & 0x7F) << v78;
            if (v82 < 0)
            {
              v78 += 7;
              v14 = v79++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_284;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_284:
        v171 = 192;
        goto LABEL_337;
      case 0x17u:
        v83 = 0;
        v84 = 0;
        v85 = 0;
        *(_DWORD *)(a1 + 324) |= 0x2000000u;
        while (2)
        {
          v86 = *v3;
          v87 = *(_QWORD *)(a2 + v86);
          if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v87);
            *(_QWORD *)(a2 + v86) = v87 + 1;
            v85 |= (unint64_t)(v88 & 0x7F) << v83;
            if (v88 < 0)
            {
              v83 += 7;
              v14 = v84++ >= 9;
              if (v14)
              {
                v85 = 0;
                goto LABEL_288;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v85 = 0;
LABEL_288:
        v172 = v85 != 0;
        v173 = 320;
        goto LABEL_346;
      case 0x18u:
        v89 = 0;
        v90 = 0;
        v91 = 0;
        *(_DWORD *)(a1 + 324) |= 0x20000u;
        while (2)
        {
          v92 = *v3;
          v93 = *(_QWORD *)(a2 + v92);
          if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v93);
            *(_QWORD *)(a2 + v92) = v93 + 1;
            v91 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              v14 = v90++ >= 9;
              if (v14)
              {
                v91 = 0;
                goto LABEL_292;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v91 = 0;
LABEL_292:
        v172 = v91 != 0;
        v173 = 312;
        goto LABEL_346;
      case 0x19u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 288;
        goto LABEL_233;
      case 0x1Au:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 144;
        goto LABEL_233;
      case 0x1Bu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 128;
        goto LABEL_233;
      case 0x1Cu:
        v95 = objc_alloc_init(_MRDeviceInfoMessageProtobuf);
        objc_msgSend((id)a1, "addGroupedDevices:", v95);
        goto LABEL_221;
      case 0x1Du:
        v96 = 0;
        v97 = 0;
        v98 = 0;
        *(_DWORD *)(a1 + 324) |= 0x10000u;
        while (2)
        {
          v99 = *v3;
          v100 = *(_QWORD *)(a2 + v99);
          if (v100 == -1 || v100 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v100);
            *(_QWORD *)(a2 + v99) = v100 + 1;
            v98 |= (unint64_t)(v101 & 0x7F) << v96;
            if (v101 < 0)
            {
              v96 += 7;
              v14 = v97++ >= 9;
              if (v14)
              {
                v98 = 0;
                goto LABEL_296;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v98 = 0;
LABEL_296:
        v172 = v98 != 0;
        v173 = 311;
        goto LABEL_346;
      case 0x1Eu:
        v102 = 0;
        v103 = 0;
        v104 = 0;
        *(_DWORD *)(a1 + 324) |= 0x1000u;
        while (2)
        {
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
            *(_QWORD *)(a2 + v105) = v106 + 1;
            v104 |= (unint64_t)(v107 & 0x7F) << v102;
            if (v107 < 0)
            {
              v102 += 7;
              v14 = v103++ >= 9;
              if (v14)
              {
                v104 = 0;
                goto LABEL_300;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v104 = 0;
LABEL_300:
        v172 = v104 != 0;
        v173 = 307;
        goto LABEL_346;
      case 0x1Fu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 280;
        goto LABEL_233;
      case 0x20u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 240;
        goto LABEL_233;
      case 0x21u:
        PBReaderReadString();
        v95 = (_MRDeviceInfoMessageProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v95)
          objc_msgSend((id)a1, "addAirplayReceivers:", v95);
        goto LABEL_224;
      case 0x22u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 176;
        goto LABEL_233;
      case 0x23u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 72;
        goto LABEL_233;
      case 0x24u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 80;
        goto LABEL_233;
      case 0x25u:
        v108 = 0;
        v109 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 2u;
        while (2)
        {
          v110 = *v3;
          v111 = *(_QWORD *)(a2 + v110);
          if (v111 == -1 || v111 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v112 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v111);
            *(_QWORD *)(a2 + v110) = v111 + 1;
            v27 |= (unint64_t)(v112 & 0x7F) << v108;
            if (v112 < 0)
            {
              v108 += 7;
              v14 = v109++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_304;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_304:
        v171 = 88;
        goto LABEL_337;
      case 0x26u:
        v113 = 0;
        v114 = 0;
        v115 = 0;
        *(_DWORD *)(a1 + 324) |= 0x2000u;
        while (2)
        {
          v116 = *v3;
          v117 = *(_QWORD *)(a2 + v116);
          if (v117 == -1 || v117 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v118 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v117);
            *(_QWORD *)(a2 + v116) = v117 + 1;
            v115 |= (unint64_t)(v118 & 0x7F) << v113;
            if (v118 < 0)
            {
              v113 += 7;
              v14 = v114++ >= 9;
              if (v14)
              {
                v115 = 0;
                goto LABEL_308;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v115 = 0;
LABEL_308:
        v172 = v115 != 0;
        v173 = 308;
        goto LABEL_346;
      case 0x27u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 208;
        goto LABEL_233;
      case 0x28u:
        v119 = 0;
        v120 = 0;
        v121 = 0;
        *(_DWORD *)(a1 + 324) |= 0x200000u;
        while (2)
        {
          v122 = *v3;
          v123 = *(_QWORD *)(a2 + v122);
          if (v123 == -1 || v123 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v124 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v123);
            *(_QWORD *)(a2 + v122) = v123 + 1;
            v121 |= (unint64_t)(v124 & 0x7F) << v119;
            if (v124 < 0)
            {
              v119 += 7;
              v14 = v120++ >= 9;
              if (v14)
              {
                v121 = 0;
                goto LABEL_312;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v121 = 0;
LABEL_312:
        v172 = v121 != 0;
        v173 = 316;
        goto LABEL_346;
      case 0x29u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 232;
        goto LABEL_233;
      case 0x2Au:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_233;
      case 0x2Bu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 256;
        goto LABEL_233;
      case 0x2Cu:
        v95 = objc_alloc_init(_MRDeviceInfoMessageProtobuf);
        objc_msgSend((id)a1, "addClusteredDevices:", v95);
        goto LABEL_221;
      case 0x2Du:
        v125 = 0;
        v126 = 0;
        v127 = 0;
        *(_DWORD *)(a1 + 324) |= 0x40000u;
        while (2)
        {
          v128 = *v3;
          v129 = *(_QWORD *)(a2 + v128);
          if (v129 == -1 || v129 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v130 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v129);
            *(_QWORD *)(a2 + v128) = v129 + 1;
            v127 |= (unint64_t)(v130 & 0x7F) << v125;
            if (v130 < 0)
            {
              v125 += 7;
              v14 = v126++ >= 9;
              if (v14)
              {
                v127 = 0;
                goto LABEL_316;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v127 = 0;
LABEL_316:
        v172 = v127 != 0;
        v173 = 313;
        goto LABEL_346;
      case 0x2Eu:
        v131 = 0;
        v132 = 0;
        v133 = 0;
        *(_DWORD *)(a1 + 324) |= 0x800u;
        while (2)
        {
          v134 = *v3;
          v135 = *(_QWORD *)(a2 + v134);
          if (v135 == -1 || v135 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v136 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v135);
            *(_QWORD *)(a2 + v134) = v135 + 1;
            v133 |= (unint64_t)(v136 & 0x7F) << v131;
            if (v136 < 0)
            {
              v131 += 7;
              v14 = v132++ >= 9;
              if (v14)
              {
                v133 = 0;
                goto LABEL_320;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v133 = 0;
LABEL_320:
        v172 = v133 != 0;
        v173 = 306;
        goto LABEL_346;
      case 0x2Fu:
        v137 = 0;
        v138 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 0x10u;
        while (2)
        {
          v139 = *v3;
          v140 = *(_QWORD *)(a2 + v139);
          if (v140 == -1 || v140 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v141 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v140);
            *(_QWORD *)(a2 + v139) = v140 + 1;
            v27 |= (unint64_t)(v141 & 0x7F) << v137;
            if (v141 < 0)
            {
              v137 += 7;
              v14 = v138++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_324;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_324:
        v171 = 160;
        goto LABEL_337;
      case 0x30u:
        v95 = objc_alloc_init(_MRDeviceInfoMessageProtobuf);
        objc_msgSend((id)a1, "addAllClusteredDevices:", v95);
        goto LABEL_221;
      case 0x31u:
        v142 = 0;
        v143 = 0;
        v144 = 0;
        *(_DWORD *)(a1 + 324) |= 0x400000u;
        while (2)
        {
          v145 = *v3;
          v146 = *(_QWORD *)(a2 + v145);
          if (v146 == -1 || v146 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v147 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v146);
            *(_QWORD *)(a2 + v145) = v146 + 1;
            v144 |= (unint64_t)(v147 & 0x7F) << v142;
            if (v147 < 0)
            {
              v142 += 7;
              v14 = v143++ >= 9;
              if (v14)
              {
                v144 = 0;
                goto LABEL_328;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v144 = 0;
LABEL_328:
        v172 = v144 != 0;
        v173 = 317;
        goto LABEL_346;
      case 0x32u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 104;
        goto LABEL_233;
      case 0x33u:
        v148 = 0;
        v149 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 4u;
        while (2)
        {
          v150 = *v3;
          v151 = *(_QWORD *)(a2 + v150);
          if (v151 == -1 || v151 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v152 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v151);
            *(_QWORD *)(a2 + v150) = v151 + 1;
            v27 |= (unint64_t)(v152 & 0x7F) << v148;
            if (v152 < 0)
            {
              v148 += 7;
              v14 = v149++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_332;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_332:
        v171 = 112;
        goto LABEL_337;
      case 0x34u:
        v153 = 0;
        v154 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 324) |= 0x80u;
        while (2)
        {
          v155 = *v3;
          v156 = *(_QWORD *)(a2 + v155);
          if (v156 == -1 || v156 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v157 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v156);
            *(_QWORD *)(a2 + v155) = v156 + 1;
            v27 |= (unint64_t)(v157 & 0x7F) << v153;
            if (v157 < 0)
            {
              v153 += 7;
              v14 = v154++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_336;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_336:
        v171 = 224;
LABEL_337:
        *(_DWORD *)(a1 + v171) = v27;
        goto LABEL_347;
      case 0x35u:
        v95 = objc_alloc_init(_MRGroupSessionTokenProtobuf);
        objc_storeStrong((id *)(a1 + 136), v95);
        if (!PBReaderPlaceMark() || (_MRGroupSessionTokenProtobufReadFrom((uint64_t)v95, a2) & 1) == 0)
          goto LABEL_349;
        goto LABEL_223;
      case 0x36u:
        v95 = objc_alloc_init(_MRDeviceInfoMessageProtobuf);
        objc_storeStrong((id *)(a1 + 168), v95);
LABEL_221:
        if (PBReaderPlaceMark() && (_MRDeviceInfoMessageProtobufReadFrom(v95, a2) & 1) != 0)
        {
LABEL_223:
          PBReaderRecallMark();
LABEL_224:

LABEL_347:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_349:

        return 0;
      case 0x37u:
        v158 = 0;
        v159 = 0;
        v160 = 0;
        *(_DWORD *)(a1 + 324) |= 0x4000u;
        while (2)
        {
          v161 = *v3;
          v162 = *(_QWORD *)(a2 + v161);
          if (v162 == -1 || v162 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v163 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v162);
            *(_QWORD *)(a2 + v161) = v162 + 1;
            v160 |= (unint64_t)(v163 & 0x7F) << v158;
            if (v163 < 0)
            {
              v158 += 7;
              v14 = v159++ >= 9;
              if (v14)
              {
                v160 = 0;
                goto LABEL_341;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v160 = 0;
LABEL_341:
        v172 = v160 != 0;
        v173 = 309;
        goto LABEL_346;
      case 0x38u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_233:
        v164 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_347;
      case 0x39u:
        v165 = 0;
        v166 = 0;
        v167 = 0;
        *(_DWORD *)(a1 + 324) |= 0x8000u;
        while (2)
        {
          v168 = *v3;
          v169 = *(_QWORD *)(a2 + v168);
          if (v169 == -1 || v169 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v170 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v169);
            *(_QWORD *)(a2 + v168) = v169 + 1;
            v167 |= (unint64_t)(v170 & 0x7F) << v165;
            if (v170 < 0)
            {
              v165 += 7;
              v14 = v166++ >= 9;
              if (v14)
              {
                v167 = 0;
                goto LABEL_345;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v167 = 0;
LABEL_345:
        v172 = v167 != 0;
        v173 = 310;
LABEL_346:
        *(_BYTE *)(a1 + v173) = v172;
        goto LABEL_347;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_347;
    }
  }
}

uint64_t _MRPlaybackQueueRequestProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  _MRPlaybackQueueContextProtobuf *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  void *v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 108) |= 0x10u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_135;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_137;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_135:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_137:
        v117 = 60;
        goto LABEL_170;
      case 2u:
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 108) |= 8u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v20 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v15 = v27++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_141;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_141:
        v117 = 56;
        goto LABEL_170;
      case 3u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_WORD *)(a1 + 108) |= 0x400u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v37;
            v34 |= (unint64_t)(v38 & 0x7F) << v32;
            if (v38 < 0)
            {
              v32 += 7;
              v15 = v33++ >= 9;
              if (v15)
              {
                v34 = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_145:
        v118 = v34 != 0;
        v119 = 101;
        goto LABEL_187;
      case 4u:
        *(_WORD *)(a1 + 108) |= 2u;
        v39 = *v3;
        v40 = *(_QWORD *)(a2 + v39);
        if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v40);
          *(_QWORD *)(a2 + v39) = v40 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v41 = 0;
        }
        v120 = 16;
        goto LABEL_194;
      case 5u:
        *(_WORD *)(a1 + 108) |= 1u;
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v41 = 0;
        }
        v120 = 8;
LABEL_194:
        *(_QWORD *)(a1 + v120) = v41;
        goto LABEL_188;
      case 6u:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_WORD *)(a1 + 108) |= 0x200u;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v15 = v45++ >= 9;
              if (v15)
              {
                v46 = 0;
                goto LABEL_149;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
LABEL_149:
        v118 = v46 != 0;
        v119 = 100;
        goto LABEL_187;
      case 7u:
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_WORD *)(a1 + 108) |= 0x1000u;
        while (2)
        {
          v54 = *v3;
          v55 = *(_QWORD *)(a2 + v54);
          v56 = v55 + 1;
          if (v55 == -1 || v56 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
            *(_QWORD *)(a2 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v15 = v52++ >= 9;
              if (v15)
              {
                v53 = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
LABEL_153:
        v118 = v53 != 0;
        v119 = 103;
        goto LABEL_187;
      case 8u:
        v58 = 0;
        v59 = 0;
        v60 = 0;
        *(_WORD *)(a1 + 108) |= 0x80u;
        while (2)
        {
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          v63 = v62 + 1;
          if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v63;
            v60 |= (unint64_t)(v64 & 0x7F) << v58;
            if (v64 < 0)
            {
              v58 += 7;
              v15 = v59++ >= 9;
              if (v15)
              {
                v60 = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v60 = 0;
LABEL_157:
        v118 = v60 != 0;
        v119 = 98;
        goto LABEL_187;
      case 9u:
        v65 = 0;
        v66 = 0;
        v67 = 0;
        *(_WORD *)(a1 + 108) |= 0x100u;
        while (2)
        {
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          v70 = v69 + 1;
          if (v69 == -1 || v70 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
            *(_QWORD *)(a2 + v68) = v70;
            v67 |= (unint64_t)(v71 & 0x7F) << v65;
            if (v71 < 0)
            {
              v65 += 7;
              v15 = v66++ >= 9;
              if (v15)
              {
                v67 = 0;
                goto LABEL_161;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v67 = 0;
LABEL_161:
        v118 = v67 != 0;
        v119 = 99;
        goto LABEL_187;
      case 0xAu:
        v72 = objc_alloc_init(_MRPlaybackQueueContextProtobuf);
        objc_storeStrong((id *)(a1 + 40), v72);
        if (!PBReaderPlaceMark() || (_MRPlaybackQueueContextProtobufReadFrom((uint64_t)v72, a2) & 1) == 0)
          goto LABEL_196;
        goto LABEL_91;
      case 0xBu:
        PBReaderReadString();
        v73 = objc_claimAutoreleasedReturnValue();
        v74 = 72;
        goto LABEL_100;
      case 0xCu:
        PBReaderReadString();
        v72 = (_MRPlaybackQueueContextProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v72)
          objc_msgSend((id)a1, "addContentItemIdentifiers:", v72);
        goto LABEL_126;
      case 0xDu:
        v75 = 0;
        v76 = 0;
        v77 = 0;
        *(_WORD *)(a1 + 108) |= 0x4000u;
        while (2)
        {
          v78 = *v3;
          v79 = *(_QWORD *)(a2 + v78);
          v80 = v79 + 1;
          if (v79 == -1 || v80 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v79);
            *(_QWORD *)(a2 + v78) = v80;
            v77 |= (unint64_t)(v81 & 0x7F) << v75;
            if (v81 < 0)
            {
              v75 += 7;
              v15 = v76++ >= 9;
              if (v15)
              {
                v77 = 0;
                goto LABEL_165;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v77 = 0;
LABEL_165:
        v118 = v77 != 0;
        v119 = 105;
        goto LABEL_187;
      case 0xEu:
        v72 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 64), v72);
        if (PBReaderPlaceMark()
          && _MRNowPlayingPlayerPathProtobufReadFrom((id *)&v72->super.super.isa, a2))
        {
LABEL_91:
          PBReaderRecallMark();
LABEL_126:

LABEL_188:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_196:

        return 0;
      case 0xFu:
        v82 = 0;
        v83 = 0;
        v20 = 0;
        *(_WORD *)(a1 + 108) |= 4u;
        while (2)
        {
          v84 = *v3;
          v85 = *(_QWORD *)(a2 + v84);
          v86 = v85 + 1;
          if (v85 == -1 || v86 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
            *(_QWORD *)(a2 + v84) = v86;
            v20 |= (unint64_t)(v87 & 0x7F) << v82;
            if (v87 < 0)
            {
              v82 += 7;
              v15 = v83++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_169:
        v117 = 24;
LABEL_170:
        *(_DWORD *)(a1 + v117) = v20;
        goto LABEL_188;
      case 0x10u:
        PBReaderReadString();
        v73 = objc_claimAutoreleasedReturnValue();
        v74 = 48;
LABEL_100:
        v88 = *(void **)(a1 + v74);
        *(_QWORD *)(a1 + v74) = v73;

        goto LABEL_188;
      case 0x11u:
        v89 = 0;
        v90 = 0;
        v91 = 0;
        *(_WORD *)(a1 + 108) |= 0x2000u;
        while (2)
        {
          v92 = *v3;
          v93 = *(_QWORD *)(a2 + v92);
          v94 = v93 + 1;
          if (v93 == -1 || v94 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v93);
            *(_QWORD *)(a2 + v92) = v94;
            v91 |= (unint64_t)(v95 & 0x7F) << v89;
            if (v95 < 0)
            {
              v89 += 7;
              v15 = v90++ >= 9;
              if (v15)
              {
                v91 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v91 = 0;
LABEL_174:
        v118 = v91 != 0;
        v119 = 104;
        goto LABEL_187;
      case 0x12u:
        v96 = 0;
        v97 = 0;
        v98 = 0;
        *(_WORD *)(a1 + 108) |= 0x800u;
        while (2)
        {
          v99 = *v3;
          v100 = *(_QWORD *)(a2 + v99);
          v101 = v100 + 1;
          if (v100 == -1 || v101 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v100);
            *(_QWORD *)(a2 + v99) = v101;
            v98 |= (unint64_t)(v102 & 0x7F) << v96;
            if (v102 < 0)
            {
              v96 += 7;
              v15 = v97++ >= 9;
              if (v15)
              {
                v98 = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v98 = 0;
LABEL_178:
        v118 = v98 != 0;
        v119 = 102;
        goto LABEL_187;
      case 0x13u:
        v103 = 0;
        v104 = 0;
        v105 = 0;
        *(_WORD *)(a1 + 108) |= 0x40u;
        while (2)
        {
          v106 = *v3;
          v107 = *(_QWORD *)(a2 + v106);
          v108 = v107 + 1;
          if (v107 == -1 || v108 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v109 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v107);
            *(_QWORD *)(a2 + v106) = v108;
            v105 |= (unint64_t)(v109 & 0x7F) << v103;
            if (v109 < 0)
            {
              v103 += 7;
              v15 = v104++ >= 9;
              if (v15)
              {
                v105 = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v105 = 0;
LABEL_182:
        v118 = v105 != 0;
        v119 = 97;
        goto LABEL_187;
      case 0x14u:
        PBReaderReadString();
        v72 = (_MRPlaybackQueueContextProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v72)
          objc_msgSend((id)a1, "addRequestedArtworkFormats:", v72);
        goto LABEL_126;
      case 0x15u:
        PBReaderReadString();
        v72 = (_MRPlaybackQueueContextProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v72)
          objc_msgSend((id)a1, "addRequestedRemoteArtworkFormats:", v72);
        goto LABEL_126;
      case 0x16u:
        v110 = 0;
        v111 = 0;
        v112 = 0;
        *(_WORD *)(a1 + 108) |= 0x20u;
        while (2)
        {
          v113 = *v3;
          v114 = *(_QWORD *)(a2 + v113);
          v115 = v114 + 1;
          if (v114 == -1 || v115 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v116 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v114);
            *(_QWORD *)(a2 + v113) = v115;
            v112 |= (unint64_t)(v116 & 0x7F) << v110;
            if (v116 < 0)
            {
              v110 += 7;
              v15 = v111++ >= 9;
              if (v15)
              {
                v112 = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v112 = 0;
LABEL_186:
        v118 = v112 != 0;
        v119 = 96;
LABEL_187:
        *(_BYTE *)(a1 + v119) = v118;
        goto LABEL_188;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_188;
    }
  }
}

void MRMediaRemoteSetWantsNowPlayingNotifications(int a1)
{
  void *v2;
  void *v3;
  id v4;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "notificationClient");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1)
    objc_msgSend(v2, "registerForNowPlayingNotificationsWithQueue:", 0);
  else
    objc_msgSend(v2, "unregisterForNowPlayingNotifications");

}

void MRMediaRemoteServiceGetNowPlayingClient(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000021uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetNowPlayingClient_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

void MRMediaRemoteGetNowPlayingClientForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  MRPlayerPath *v7;
  void *v8;
  id v9;

  v9 = a2;
  if (!v9)
  {
    v9 = (id)MEMORY[0x1E0C80D38];
    v5 = MEMORY[0x1E0C80D38];
  }
  v6 = a3;
  v7 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v8 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetNowPlayingClient(v8, v7, v9, v6);

}

void MRMediaRemoteGetNowPlayingClient(void *a1, void *a2)
{
  MRMediaRemoteGetNowPlayingClientForOrigin(0, a1, a2);
}

MRClient *MRCreateClientFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MRClient *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_NOWPLAYING_CLIENT_DATA_KEY");
  if (v1)
    v2 = -[MRClient initWithData:]([MRClient alloc], "initWithData:", v1);
  else
    v2 = 0;

  return v2;
}

void MRAddClientToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      objc_msgSend(a2, "data");
      v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      xpc_dictionary_set_data(v3, "MRXPC_NOWPLAYING_CLIENT_DATA_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

    }
  }
}

uint64_t MRPlaybackQueueCreateWithContentItem(uint64_t a1)
{
  MRPlaybackQueue *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = [MRPlaybackQueue alloc];
  v6[0] = a1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[MRPlaybackQueue initWithContentItems:](v2, "initWithContentItems:", v3);

  return v4;
}

MRPlaybackQueue *MRPlaybackQueueCreateWithContentItems(uint64_t a1)
{
  return -[MRPlaybackQueue initWithContentItems:]([MRPlaybackQueue alloc], "initWithContentItems:", a1);
}

uint64_t MRPlaybackQueueCreateWithNowPlayingContentItem(uint64_t a1)
{
  MRPlaybackQueue *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = [MRPlaybackQueue alloc];
  v6[0] = a1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[MRPlaybackQueue initWithContentItems:location:](v2, "initWithContentItems:location:", v3, 0);

  return v4;
}

uint64_t MRPlaybackQueueCreateFromNowPlayingInfo(uint64_t a1)
{
  MRContentItem *v1;
  MRPlaybackQueue *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v1 = -[MRContentItem initWithNowPlayingInfo:]([MRContentItem alloc], "initWithNowPlayingInfo:", a1);
  v2 = [MRPlaybackQueue alloc];
  v6[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[MRPlaybackQueue initWithContentItems:location:](v2, "initWithContentItems:location:", v3, 0);

  return v4;
}

uint64_t MRPlaybackQueueCreateEmpty()
{
  MRPlaybackQueue *v0;

  v0 = [MRPlaybackQueue alloc];
  return (uint64_t)-[MRPlaybackQueue initWithContentItems:](v0, "initWithContentItems:", MEMORY[0x1E0C9AA60]);
}

void *MRPlaybackQueueGetResolvedPlayerPath(void *a1)
{
  void *v1;

  objc_msgSend(a1, "resolvedPlayerPath");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t MRPlaybackQueueGetContentItemsCount(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "contentItems");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "count");

  return v2;
}

uint64_t MRPlaybackQueueCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPlaybackQueueQueueIsEqualToPlaybackQueue(void *a1, void *a2)
{
  if (a1 == a2)
    return 1;
  else
    return objc_msgSend(a1, "isEqual:", a2);
}

MRPlaybackQueue *MRPlaybackQueueCreateFromExternalRepresentation(uint64_t a1)
{
  return -[MRPlaybackQueue initWithData:]([MRPlaybackQueue alloc], "initWithData:", a1);
}

__CFString *MRPlaybackQueueCopyReadableDescription(void *a1)
{
  uint64_t v1;
  void *v2;
  __CFString *v3;
  __CFString *v4;

  objc_msgSend(a1, "description");
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)v1;
  v3 = CFSTR("NULL");
  if (v1)
    v3 = (__CFString *)v1;
  v4 = v3;

  return v4;
}

void *MRPlaybackQueueCopyContentItemIdentifiers(void *result)
{
  if (result)
  {
    objc_msgSend(result, "contentItemIdentifiers");
    return (void *)objc_claimAutoreleasedReturnValue();
  }
  return result;
}

uint64_t MRPlaybackQueueSetResolvedPlayerPath(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setResolvedPlayerPath:", a2);
}

uint64_t MRPlaybackQueueSetRequestID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRequestIdentifier:", a2);
}

void *MRPlaybackQueueGetRequestID(void *a1)
{
  void *v1;

  objc_msgSend(a1, "requestIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t MRPlaybackQueueGetContentItemAtOffset(void *a1, const char *a2)
{
  return objc_msgSend(a1, "contentItemWithOffset:", a2);
}

uint64_t MRPlaybackQueueGetContentItemForIdentifier(void *a1, const char *a2)
{
  return objc_msgSend(a1, "contentItemForIdentifier:", a2);
}

uint64_t MRPlaybackQueueCopyMinimalReadableDescription(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  __CFString *v5;
  uint64_t v6;

  if (!a1)
    return 0;
  v1 = a1;
  objc_msgSend(v1, "dictionaryRepresentation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "mutableCopy");

  objc_msgSend(v1, "contentItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (__CFString *)MRContentItemsCopyMinimalReadableDescription(v4, 0);
  if (v5)
    objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("contentItem"));
  objc_msgSend(v3, "description");
  v6 = objc_claimAutoreleasedReturnValue();

  return v6;
}

void MRMediaRemotePlaybackQueueResetRequestsWithDataForPlayer(void *a1, void *a2)
{
  void *v4;

  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServiceResetPlaybackQueueRequests(v4, a1, a2);
}

void sub_1938A6128(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id MRMediaRemoteRegisterWantsSystemAppDidSkipTrackNotifications()
{
  return +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
}

void MRMediaRemoteSupportedCommandsHaveChanged()
{
  MRMediaRemoteSupportedCommandsHaveChangedForOrigin(0);
}

void MRMediaRemoteSupportedCommandsHaveChangedForOrigin(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = CFSTR("kMRMediaRemoteOriginDataUserInfoKey");
    objc_msgSend(a1, "data");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v5[0] = v1;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  v3 = (void *)MRGetSharedService();
  MRMediaRemoteServicePostNotification(v3, CFSTR("kMRMediaRemoteSupportedCommandsDidChangeNotification"), v2);

}

void MRMediaRemoteRegisterForElapsedTimeChangesWithHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a1;
  if (!v3)
  {
    v3 = (id)MEMORY[0x1E0C80D38];
    v4 = MEMORY[0x1E0C80D38];
  }
  v5 = a2;
  v6 = (void *)objc_msgSend(v5, "copy");

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteRegisterForElapsedTimeChangesWithHandler_block_invoke;
  v9[3] = &unk_1E30C5B40;
  v10 = v3;
  v11 = v6;
  v7 = v6;
  v8 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

void MRMediaRemoteUnregisterForElapsedTimeChanges()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global);
}

void MRMediaRemoteRegisterForPlaybackSpeedChangesWithHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a1;
  if (!v3)
  {
    v3 = (id)MEMORY[0x1E0C80D38];
    v4 = MEMORY[0x1E0C80D38];
  }
  v5 = a2;
  v6 = (void *)objc_msgSend(v5, "copy");

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteRegisterForPlaybackSpeedChangesWithHandler_block_invoke;
  v9[3] = &unk_1E30C5B40;
  v10 = v3;
  v11 = v6;
  v7 = v6;
  v8 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

void MRMediaRemoteUnregisterForPlaybackSpeedChanges()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_18);
}

void MRMediaRemoteRegisterForRepeatModeChangesWithHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a1;
  if (!v3)
  {
    v3 = (id)MEMORY[0x1E0C80D38];
    v4 = MEMORY[0x1E0C80D38];
  }
  v5 = a2;
  v6 = (void *)objc_msgSend(v5, "copy");

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteRegisterForRepeatModeChangesWithHandler_block_invoke;
  v9[3] = &unk_1E30C5B40;
  v10 = v3;
  v11 = v6;
  v7 = v6;
  v8 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

void MRMediaRemoteUnregisterForRepeatModeChanges()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_20);
}

void MRMediaRemoteRegisterForShuffleModeChangesWithHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a1;
  if (!v3)
  {
    v3 = (id)MEMORY[0x1E0C80D38];
    v4 = MEMORY[0x1E0C80D38];
  }
  v5 = a2;
  v6 = (void *)objc_msgSend(v5, "copy");

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteRegisterForShuffleModeChangesWithHandler_block_invoke;
  v9[3] = &unk_1E30C5B40;
  v10 = v3;
  v11 = v6;
  v7 = v6;
  v8 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

void MRMediaRemoteUnregisterForShuffleModeChanges()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_22);
}

uint64_t _MRTransactionPacketProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRTransactionKeyProtobuf *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(_MRTransactionKeyProtobuf);
          objc_storeStrong((id *)(a1 + 32), v17);
          if (PBReaderPlaceMark() && _MRTransactionKeyProtobufReadFrom((uint64_t)v17, a2))
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          PBReaderReadData();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 40;
          goto LABEL_26;
        case 3u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 24;
LABEL_26:
          v21 = *(void **)(a1 + v20);
          *(_QWORD *)(a1 + v20) = v19;

          continue;
        case 4u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (2)
          {
            v25 = *v3;
            v26 = *(_QWORD *)(a2 + v25);
            if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
              *(_QWORD *)(a2 + v25) = v26 + 1;
              v24 |= (unint64_t)(v27 & 0x7F) << v22;
              if (v27 < 0)
              {
                v22 += 7;
                v14 = v23++ >= 9;
                if (v14)
                {
                  v24 = 0;
                  goto LABEL_44;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v24 = 0;
LABEL_44:
          v33 = 8;
          goto LABEL_49;
        case 5u:
          v28 = 0;
          v29 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v31 + 1;
        v24 |= (unint64_t)(v32 & 0x7F) << v28;
        if ((v32 & 0x80) == 0)
          goto LABEL_46;
        v28 += 7;
        v14 = v29++ >= 9;
        if (v14)
        {
          v24 = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        v24 = 0;
LABEL_48:
      v33 = 16;
LABEL_49:
      *(_QWORD *)(a1 + v33) = v24;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRLyricsTokenProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRPlaybackSessionProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_24;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_24;
        case 5u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_24:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_25:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id MRAVOutputContextGetSharedSystemAudioContext()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x194036A64]();
  v1 = +[MRAVOutputContext sharedSystemAudioContext](MRAVOutputContext, "sharedSystemAudioContext");
  objc_autoreleasePoolPop(v0);
  return v1;
}

id MRAVOutputContextGetSharedSystemScreenContext()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x194036A64]();
  v1 = +[MRAVOutputContext sharedSystemScreenContext](MRAVOutputContext, "sharedSystemScreenContext");
  objc_autoreleasePoolPop(v0);
  return v1;
}

uint64_t MRAVOutputContextCreateiTunesAudioContext()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MEMORY[0x194036A64]();
  +[MRAVOutputContext iTunesContext](MRAVOutputContext, "iTunesContext");
  v1 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
  return v1;
}

uint64_t MRAVOutputContextCreateRoutingContext(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194036A64]();
  if (a1)
  {
    +[MRAVConcreteOutputContext createOutputContextWithUniqueIdentifier:](MRAVConcreteOutputContext, "createOutputContextWithUniqueIdentifier:", a1);
    a1 = objc_claimAutoreleasedReturnValue();
  }
  objc_autoreleasePoolPop(v2);
  return a1;
}

uint64_t MRAVOutputContextGetType(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "type");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRAVOutputContextSetOutputDevice(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v11[0] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "setOutputDevices:withCallbackQueue:block:", v10, v7, v8);

  objc_autoreleasePoolPop(v9);
}

void MRAVOutputContextSetOutputDeviceWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x194036A64]();
  v13[0] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "setOutputDevices:initiator:withCallbackQueue:block:", v12, a3, v9, v10);

  objc_autoreleasePoolPop(v11);
}

void MRAVOutputContextSetOutputDeviceWithPassword(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x194036A64]();
  v13[0] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "setOutputDevices:withPassword:withCallbackQueue:block:", v12, a3, v9, v10);

  objc_autoreleasePoolPop(v11);
}

void MRAVOutputContextSetOutputDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;

  v9 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setOutputDevices:withCallbackQueue:block:", a2, v9, v7);
  objc_autoreleasePoolPop(v8);

}

void MRAVOutputContextSetOutputDevicesWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  void *v10;
  id v11;

  v11 = a4;
  v9 = a5;
  v10 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setOutputDevices:initiator:withCallbackQueue:block:", a2, a3, v11, v9);
  objc_autoreleasePoolPop(v10);

}

void MRAVOutputContextAddOutputDevice(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v11[0] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "addOutputDevices:withCallbackQueue:block:", v10, v7, v8);

  objc_autoreleasePoolPop(v9);
}

void MRAVOutputContextAddOutputDeviceWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x194036A64]();
  v13[0] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "addOutputDevices:initiator:withCallbackQueue:block:", v12, a3, v9, v10);

  objc_autoreleasePoolPop(v11);
}

void MRAVOutputContextAddOutputDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;

  v9 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "addOutputDevices:withCallbackQueue:block:", a2, v9, v7);
  objc_autoreleasePoolPop(v8);

}

void MRAVOutputContextAddOutputDevicesWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  void *v10;
  id v11;

  v11 = a4;
  v9 = a5;
  v10 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "addOutputDevices:initiator:withCallbackQueue:block:", a2, a3, v11, v9);
  objc_autoreleasePoolPop(v10);

}

void MRAVOutputContextRemoveOutputDevice(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v11[0] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "removeOutputDevices:withCallbackQueue:block:", v10, v7, v8);

  objc_autoreleasePoolPop(v9);
}

void MRAVOutputContextRemoveOutputDeviceWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x194036A64]();
  v13[0] = a2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "removeOutputDevices:initiator:withCallbackQueue:block:", v12, a3, v9, v10);

  objc_autoreleasePoolPop(v11);
}

void MRAVOutputContextRemoveOutputDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;

  v9 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "removeOutputDevices:withCallbackQueue:block:", a2, v9, v7);
  objc_autoreleasePoolPop(v8);

}

void MRAVOutputContextRemoveOutputDevicesWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  void *v10;
  id v11;

  v11 = a4;
  v9 = a5;
  v10 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "removeOutputDevices:initiator:withCallbackQueue:block:", a2, a3, v11, v9);
  objc_autoreleasePoolPop(v10);

}

void MRAVOutputContextRemoveAllDevices(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "removeAllOutputDevicesWithCallbackQueue:block:", v7, v5);
  objc_autoreleasePoolPop(v6);

}

uint64_t MRAVOutputContextSupportsMultipleBluetoothOutputDevices(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "supportsMultipleBluetoothOutputDevices");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRAVOutputContextResetPredictedOutputDevice(void *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "resetPredictedOutputDevice");
  objc_autoreleasePoolPop(v2);
}

void sub_1938AD1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1938AD384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938AD720(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

MRPlaybackSession *MRPlaybackSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return -[MRPlaybackSession initWithIdentifier:type:playbackSessionData:revision:metadata:]([MRPlaybackSession alloc], "initWithIdentifier:type:playbackSessionData:revision:metadata:", a1, a2, a3, 0, 0);
}

uint64_t MRPlaybackSessionCopyIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "identifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPlaybackSessionCopyType(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "type");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPlaybackSessionCopyPlaybackSessionData(void *a1)
{
  objc_msgSend(a1, "playbackSessionData");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPlaybackSessionCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

MRPlaybackSession *MRPlaybackSessionCreateFromExternalRepresentation(uint64_t a1)
{
  return -[MRPlaybackSession initWithData:]([MRPlaybackSession alloc], "initWithData:", a1);
}

uint64_t _MRTextInputTraitsProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v16 = v10 & 7;
        if (!v15 && v16 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = 0;
              v19 = 0;
              v20 = 0;
              *(_WORD *)(a1 + 64) |= 4u;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)(a2 + v21);
                if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                  break;
                v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 1;
                v20 |= (unint64_t)(v23 & 0x7F) << v18;
                if ((v23 & 0x80) == 0)
                  goto LABEL_98;
                v18 += 7;
                v14 = v19++ >= 9;
                if (v14)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_100;
                }
              }
              *(_BYTE *)(a2 + *v5) = 1;
LABEL_98:
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v20) = 0;
LABEL_100:
              v75 = 48;
              goto LABEL_109;
            case 2u:
              v24 = 0;
              v25 = 0;
              v20 = 0;
              *(_WORD *)(a1 + 64) |= 8u;
              while (2)
              {
                v26 = *v3;
                v27 = *(_QWORD *)(a2 + v26);
                if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v20 |= (unint64_t)(v28 & 0x7F) << v24;
                  if (v28 < 0)
                  {
                    v24 += 7;
                    v14 = v25++ >= 9;
                    if (v14)
                    {
                      LODWORD(v20) = 0;
                      goto LABEL_104;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v20) = 0;
LABEL_104:
              v75 = 52;
              goto LABEL_109;
            case 3u:
              v29 = 0;
              v30 = 0;
              v20 = 0;
              *(_WORD *)(a1 + 64) |= 0x10u;
              while (2)
              {
                v31 = *v3;
                v32 = *(_QWORD *)(a2 + v31);
                if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
                  *(_QWORD *)(a2 + v31) = v32 + 1;
                  v20 |= (unint64_t)(v33 & 0x7F) << v29;
                  if (v33 < 0)
                  {
                    v29 += 7;
                    v14 = v30++ >= 9;
                    if (v14)
                    {
                      LODWORD(v20) = 0;
                      goto LABEL_108;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v20) = 0;
LABEL_108:
              v75 = 56;
LABEL_109:
              *(_DWORD *)(a1 + v75) = v20;
              goto LABEL_146;
            case 4u:
              v34 = 0;
              v35 = 0;
              v36 = 0;
              *(_WORD *)(a1 + 64) |= 0x20u;
              while (2)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
                  *(_QWORD *)(a2 + v37) = v38 + 1;
                  v36 |= (unint64_t)(v39 & 0x7F) << v34;
                  if (v39 < 0)
                  {
                    v34 += 7;
                    v14 = v35++ >= 9;
                    if (v14)
                    {
                      v36 = 0;
                      goto LABEL_113;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v36 = 0;
LABEL_113:
              v76 = v36 != 0;
              v77 = 60;
              goto LABEL_126;
            case 5u:
              v40 = 0;
              v41 = 0;
              v42 = 0;
              *(_WORD *)(a1 + 64) |= 0x100u;
              while (2)
              {
                v43 = *v3;
                v44 = *(_QWORD *)(a2 + v43);
                if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
                  *(_QWORD *)(a2 + v43) = v44 + 1;
                  v42 |= (unint64_t)(v45 & 0x7F) << v40;
                  if (v45 < 0)
                  {
                    v40 += 7;
                    v14 = v41++ >= 9;
                    if (v14)
                    {
                      v42 = 0;
                      goto LABEL_117;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v42 = 0;
LABEL_117:
              v76 = v42 != 0;
              v77 = 63;
              goto LABEL_126;
            case 6u:
              v46 = 0;
              v47 = 0;
              v48 = 0;
              *(_WORD *)(a1 + 64) |= 0x40u;
              while (2)
              {
                v49 = *v3;
                v50 = *(_QWORD *)(a2 + v49);
                if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
                  *(_QWORD *)(a2 + v49) = v50 + 1;
                  v48 |= (unint64_t)(v51 & 0x7F) << v46;
                  if (v51 < 0)
                  {
                    v46 += 7;
                    v14 = v47++ >= 9;
                    if (v14)
                    {
                      v48 = 0;
                      goto LABEL_121;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v48 = 0;
LABEL_121:
              v76 = v48 != 0;
              v77 = 61;
              goto LABEL_126;
            case 7u:
              v52 = 0;
              v53 = 0;
              v54 = 0;
              *(_WORD *)(a1 + 64) |= 0x80u;
              while (2)
              {
                v55 = *v3;
                v56 = *(_QWORD *)(a2 + v55);
                if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
                  *(_QWORD *)(a2 + v55) = v56 + 1;
                  v54 |= (unint64_t)(v57 & 0x7F) << v52;
                  if (v57 < 0)
                  {
                    v52 += 7;
                    v14 = v53++ >= 9;
                    if (v14)
                    {
                      v54 = 0;
                      goto LABEL_125;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v54 = 0;
LABEL_125:
              v76 = v54 != 0;
              v77 = 62;
LABEL_126:
              *(_BYTE *)(a1 + v77) = v76;
              goto LABEL_146;
            case 8u:
              v58 = 0;
              v59 = 0;
              v60 = 0;
              *(_WORD *)(a1 + 64) |= 2u;
              while (2)
              {
                v61 = *v3;
                v62 = *(_QWORD *)(a2 + v61);
                if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
                  *(_QWORD *)(a2 + v61) = v62 + 1;
                  v60 |= (unint64_t)(v63 & 0x7F) << v58;
                  if (v63 < 0)
                  {
                    v58 += 7;
                    v14 = v59++ >= 9;
                    if (v14)
                    {
                      v60 = 0;
                      goto LABEL_130;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v60 = 0;
LABEL_130:
              v78 = 40;
              goto LABEL_135;
            case 9u:
              v64 = 0;
              v65 = 0;
              v60 = 0;
              *(_WORD *)(a1 + 64) |= 1u;
              while (2)
              {
                v66 = *v3;
                v67 = *(_QWORD *)(a2 + v66);
                if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
                  *(_QWORD *)(a2 + v66) = v67 + 1;
                  v60 |= (unint64_t)(v68 & 0x7F) << v64;
                  if (v68 < 0)
                  {
                    v64 += 7;
                    v14 = v65++ >= 9;
                    if (v14)
                    {
                      v60 = 0;
                      goto LABEL_134;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v60 = 0;
LABEL_134:
              v78 = 32;
LABEL_135:
              *(_QWORD *)(a1 + v78) = v60;
              goto LABEL_146;
            case 0xAu:
              if (v16 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v69 = 0;
                  v70 = 0;
                  v71 = 0;
                  while (1)
                  {
                    v72 = *v3;
                    v73 = *(_QWORD *)(a2 + v72);
                    if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
                    *(_QWORD *)(a2 + v72) = v73 + 1;
                    v71 |= (unint64_t)(v74 & 0x7F) << v69;
                    if (v74 < 0)
                    {
                      v69 += 7;
                      v14 = v70++ >= 9;
                      if (!v14)
                        continue;
                    }
                    goto LABEL_96;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_96:
                  PBRepeatedUInt64Add();
                }
                PBReaderRecallMark();
              }
              else
              {
                v79 = 0;
                v80 = 0;
                v81 = 0;
                while (1)
                {
                  v82 = *v3;
                  v83 = *(_QWORD *)(a2 + v82);
                  if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
                  *(_QWORD *)(a2 + v82) = v83 + 1;
                  v81 |= (unint64_t)(v84 & 0x7F) << v79;
                  if (v84 < 0)
                  {
                    v79 += 7;
                    v14 = v80++ >= 9;
                    if (!v14)
                      continue;
                  }
                  goto LABEL_145;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_145:
                PBRepeatedUInt64Add();
              }
LABEL_146:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_146;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void MRMediaRemotePlaybackSessionSetRequestCallbackForOrigin(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "originClientForOrigin:", a1);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setPlaybackSessionCallback:", v3);
}

void MRMediaRemotePlaybackSessionSetMigrateBeginCallbackForOrigin(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "originClientForOrigin:", a1);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setPlaybackSessionMigrateBeginCallback:", v3);
}

void MRMediaRemotePlaybackSessionSetMigrateEndCallbackForOrigin(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "originClientForOrigin:", a1);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setPlaybackSessionMigrateEndCallback:", v3);
}

uint64_t _MRSetVolumeMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _MRRequestDetailsProtobuf *v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v22 = objc_alloc_init(_MRRequestDetailsProtobuf);
        objc_storeStrong((id *)(a1 + 8), v22);
        if (!PBReaderPlaceMark() || (_MRRequestDetailsProtobufReadFrom((uint64_t)v22, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v18 == 2)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

      }
      else if ((_DWORD)v18 == 1)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        *(_DWORD *)(a1 + 24) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRPlaybackSessionResponseMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRPlaybackSessionProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRPlaybackSessionProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !_MRPlaybackSessionProtobufReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void MRTypeAuditNowPlayingInfoDictionary(const __CFDictionary *context)
{
  if (context)
    CFDictionaryApplyFunction(context, (CFDictionaryApplierFunction)_MRTypeAuditDictionaryApplierFunction, context);
}

void _MRTypeAuditDictionaryApplierFunction(const void *a1, CFTypeRef cf, __CFDictionary *a3)
{
  CFTypeID v6;
  void *v7;
  CFTypeID v8;
  BOOL v9;
  __CFString *NumberFromString;
  __CFString *v11;
  __CFString *v12;
  NSObject *v13;
  int v14;
  const void *v15;
  __int16 v16;
  __CFString *v17;
  __int16 v18;
  __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (_MRTypeAuditDictionaryApplierFunction___once != -1)
    dispatch_once(&_MRTypeAuditDictionaryApplierFunction___once, &__block_literal_global_4);
  v6 = CFGetTypeID(cf);
  objc_msgSend((id)_MRTypeAuditDictionaryApplierFunction___propertyToCFTypeMapping, "objectForKey:", a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "unsignedLongValue");

  if (v8)
    v9 = v6 == v8;
  else
    v9 = 1;
  if (!v9)
  {
    if (CFStringGetTypeID() == v6 && CFNumberGetTypeID() == v8)
    {
      NumberFromString = (__CFString *)_MRTypeAuditCreateNumberFromString((uint64_t)cf);
    }
    else if (CFNumberGetTypeID() == v6 && CFStringGetTypeID() == v8)
    {
      NumberFromString = (__CFString *)_MRTypeAuditCreateStringFromNumber((uint64_t)cf);
    }
    else if (CFURLGetTypeID() == v6 && CFStringGetTypeID() == v8)
    {
      NumberFromString = (__CFString *)_MRTypeAuditCreateStringFromURL((const __CFURL *)cf);
    }
    else if (CFNumberGetTypeID() == v6 && CFBooleanGetTypeID() == v8)
    {
      NumberFromString = (__CFString *)_MRTypeAuditCreateBooleanFromNumber((const __CFNumber *)cf);
    }
    else
    {
      if (CFBooleanGetTypeID() != v6 || CFNumberGetTypeID() != v8)
        goto LABEL_24;
      NumberFromString = (__CFString *)_MRTypeAuditCreateNumberFromBoolean((const __CFBoolean *)cf);
    }
    if (NumberFromString)
    {
      v11 = NumberFromString;
      CFDictionarySetValue(a3, a1, NumberFromString);
LABEL_27:

      return;
    }
LABEL_24:
    v11 = (__CFString *)CFCopyTypeIDDescription(v6);
    v12 = (__CFString *)CFCopyTypeIDDescription(v8);
    _MRLogForCategory(0);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = 138543874;
      v15 = a1;
      v16 = 2114;
      v17 = v11;
      v18 = 2114;
      v19 = v12;
      _os_log_error_impl(&dword_193827000, v13, OS_LOG_TYPE_ERROR, "WARNING: Unexpected type for now playing key %{public}@ (is %{public}@, should be %{public}@). Removing from now playing info dictionary.", (uint8_t *)&v14, 0x20u);
    }

    CFDictionaryRemoveValue(a3, a1);
    goto LABEL_27;
  }
}

uint64_t _MRTypeAuditCreateNumberFromString(uint64_t a1)
{
  if (_MRTypeAuditCreateNumberFromString_onceToken != -1)
    dispatch_once(&_MRTypeAuditCreateNumberFromString_onceToken, &__block_literal_global_2);
  objc_msgSend((id)_MRTypeAuditCreateNumberFromString_numberFormatter, "numberFromString:", a1);
  return objc_claimAutoreleasedReturnValue();
}

CFStringRef _MRTypeAuditCreateStringFromNumber(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@"), a1);
}

CFStringRef _MRTypeAuditCreateStringFromURL(const __CFURL *a1)
{
  const __CFAllocator *v1;
  const __CFString *v2;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFURLGetString(a1);
  return CFStringCreateCopy(v1, v2);
}

uint64_t _MRTypeAuditCreateBooleanFromNumber(const __CFNumber *a1)
{
  uint64_t v1;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  if (valuePtr)
    v1 = MEMORY[0x1E0C9AE50];
  else
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFNumberRef _MRTypeAuditCreateNumberFromBoolean(const __CFBoolean *a1)
{
  _BOOL4 valuePtr;

  valuePtr = CFBooleanGetValue(a1) != 0;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
}

void sub_1938B3718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938B3ACC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938B3E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938B40F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_1938B445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1938B45E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938B4798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

BOOL _MRGroupSessionMemberSyncMessageProtobufReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRUserIdentityProtobuf *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(_MRUserIdentityProtobuf);
        objc_msgSend(a1, "addMembers:", v18);
        if (!PBReaderPlaceMark() || (_MRUserIdentityProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_MRGroupSessionParticipantProtobuf);
        objc_msgSend(a1, "addParticipants:", v18);
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_MRGroupSessionParticipantProtobuf);
    objc_msgSend(a1, "addPendingParticipants:", v18);
LABEL_23:
    if (!PBReaderPlaceMark() || (_MRGroupSessionParticipantProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
      goto LABEL_33;
LABEL_28:
    PBReaderRecallMark();

    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1938B6584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938B6698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938B6944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MRSendHIDEventMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

MRAudioBuffer *MRAudioBufferCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return -[MRAudioBuffer initWithFormatSettings:packetCapacity:maximumPacketSize:]([MRAudioBuffer alloc], "initWithFormatSettings:packetCapacity:maximumPacketSize:", a2, a3, a4);
}

uint64_t MRAudioBufferGetPacketCapacity(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "buffer");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "packetCapacity");

  return v2;
}

uint64_t MRAudioBufferGetPacketCount(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "buffer");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "packetCount");

  return v2;
}

void MRAudioBufferSetPacketCount(void *a1, uint64_t a2)
{
  id v3;

  objc_msgSend(a1, "buffer");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPacketCount:", a2);

}

uint64_t MRAudioBufferGetMutableContentsPtr(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "buffer");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "data");

  return v2;
}

uint64_t MRAudioBufferGetMutablePacketDescriptionsArrayPtr(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "buffer");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "packetDescriptions");

  return v2;
}

id MRLogCategoryConnections()
{
  if (MRLogCategoryConnections__once != -1)
    dispatch_once(&MRLogCategoryConnections__once, &__block_literal_global_6);
  return (id)MRLogCategoryConnections__log;
}

id MRLogCategoryMigrationOversize()
{
  if (MRLogCategoryMigrationOversize__once != -1)
    dispatch_once(&MRLogCategoryMigrationOversize__once, &__block_literal_global_6);
  return (id)MRLogCategoryMigrationOversize__log;
}

id MRLogCategoryDiscoveryUpdates()
{
  if (MRLogCategoryDiscoveryUpdates_onceToken != -1)
    dispatch_once(&MRLogCategoryDiscoveryUpdates_onceToken, &__block_literal_global_8);
  return (id)MRLogCategoryDiscoveryUpdates_log;
}

void sub_1938BA2F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938BA3F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938BA510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938BA6A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938BABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id initValAVOutputDeviceCommunicationChannelControlTypeRelayed()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelControlTypeRelayed");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelControlTypeRelayed, *v0);
  getAVOutputDeviceCommunicationChannelControlTypeRelayed = (uint64_t)AVOutputDeviceCommunicationChannelControlTypeRelayedFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelControlTypeRelayed;
}

id AVOutputDeviceCommunicationChannelControlTypeRelayedFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelControlTypeRelayed;
}

id initValAVOutputDeviceCommunicationChannelControlTypeDirect()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelControlTypeDirect");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelControlTypeDirect, *v0);
  getAVOutputDeviceCommunicationChannelControlTypeDirect = (uint64_t)AVOutputDeviceCommunicationChannelControlTypeDirectFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelControlTypeDirect;
}

id AVOutputDeviceCommunicationChannelControlTypeDirectFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelControlTypeDirect;
}

id initValAVOutputDeviceCommunicationChannelOptionCancelIfAuthRequired()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelOptionCancelIfAuthRequired");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelOptionCancelIfAuthRequired, *v0);
  getAVOutputDeviceCommunicationChannelOptionCancelIfAuthRequired = (uint64_t (*)())AVOutputDeviceCommunicationChannelOptionCancelIfAuthRequiredFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelOptionCancelIfAuthRequired;
}

id AVOutputDeviceCommunicationChannelOptionCancelIfAuthRequiredFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelOptionCancelIfAuthRequired;
}

id initValAVOutputDeviceCommunicationChannelOptionControlType()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelOptionControlType");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelOptionControlType, *v0);
  getAVOutputDeviceCommunicationChannelOptionControlType = (uint64_t (*)())AVOutputDeviceCommunicationChannelOptionControlTypeFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelOptionControlType;
}

id AVOutputDeviceCommunicationChannelOptionControlTypeFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelOptionControlType;
}

id initValAVOutputDeviceCommunicationChannelOptionCorrelationID()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelOptionCorrelationID");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelOptionCorrelationID, *v0);
  getAVOutputDeviceCommunicationChannelOptionCorrelationID = (uint64_t (*)())AVOutputDeviceCommunicationChannelOptionCorrelationIDFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelOptionCorrelationID;
}

id AVOutputDeviceCommunicationChannelOptionCorrelationIDFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelOptionCorrelationID;
}

id initValAVOutputDeviceCommunicationChannelOptionInitiator()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelOptionInitiator");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelOptionInitiator, *v0);
  getAVOutputDeviceCommunicationChannelOptionInitiator = (uint64_t (*)())AVOutputDeviceCommunicationChannelOptionInitiatorFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelOptionInitiator;
}

id AVOutputDeviceCommunicationChannelOptionInitiatorFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelOptionInitiator;
}

id initValAVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegate()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegate");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegate, *v0);
  getAVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegate = (uint64_t (*)())AVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegateFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegate;
}

id AVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegateFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegate;
}

id initValAVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkipped()
{
  id *v0;

  if (AVFoundationLibrary_sOnce != -1)
    dispatch_once(&AVFoundationLibrary_sOnce, &__block_literal_global_9);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib, "AVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkipped");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkipped, *v0);
  getAVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkipped = (uint64_t (*)())AVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkippedFunction;
  return (id)constantValAVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkipped;
}

id AVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkippedFunction()
{
  return (id)constantValAVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkipped;
}

uint64_t MRMediaRemoteSetCanBeNowPlayingApplication(int a1)
{
  NSObject *v2;
  const __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  _MRLogForCategory(1uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("YES");
    if (!a1)
      v3 = CFSTR("NO");
    v11 = 138412290;
    v12 = v3;
    _os_log_impl(&dword_193827000, v2, OS_LOG_TYPE_DEFAULT, "[MRNowPlaying] MRMediaRemoteSetCanBeNowPlayingApplication set to %@", (uint8_t *)&v11, 0xCu);
  }

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clientForPlayerPath:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v4) = objc_msgSend(v5, "canBeNowPlaying");
  objc_msgSend(v5, "setCanBeNowPlaying:", a1 != 0);
  if ((_DWORD)v4 != objc_msgSend(v5, "canBeNowPlaying"))
  {
    objc_msgSend((Class)getAVSystemControllerClass[0](), "sharedAVSystemController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v5, "canBeNowPlaying"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    getAVSystemController_CanBeNowPlayingAppAttribute[0]();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setAttribute:forKey:error:", v7, v8, 0);

  }
  v9 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetCanBeNowPlayingApp(v9, a1 != 0, 0.0);

  return 1;
}

uint64_t MRMediaRemoteSetNowPlayingApplicationOverrideEnabled(int a1)
{
  void *v2;
  void *v3;
  _BOOL8 v4;
  void *v5;

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localOriginClient");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "isOverrideApp") != a1)
  {
    objc_msgSend(v3, "setOverrideAppBundleID:", 0);
    v4 = a1 != 0;
    objc_msgSend(v3, "setOverrideApp:", v4);
    v5 = (void *)MRGetSharedService();
    MRMediaRemoteServiceSetNowPlayingAppOverride(v5, v4);
  }

  return 1;
}

uint64_t MRMediaRemoteSetOverriddenNowPlayingApplication(id a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  char v6;
  void *v7;

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localOriginClient");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "overrideAppBundleID");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4 == a1)
  {

  }
  else
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "isEqual:", a1);

    if ((v6 & 1) == 0)
    {
      objc_msgSend(v3, "setOverrideApp:", 0);
      objc_msgSend(v3, "setOverrideAppBundleID:", a1);
      v7 = (void *)MRGetSharedService();
      MRMediaRemoteServiceSetOverriddenNowPlayingApplication(v7, a1);
    }
  }

  return 0;
}

void MRMediaRemoteSetNowPlayingClientForOrigin(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  MRPlayerPath *v11;
  void *v12;
  id v13;

  v13 = a3;
  if (!v13)
  {
    v13 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a4;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "originClientForOrigin:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "setActiveNowPlayingClient:", a1);
  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  v12 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetNowPlayingClient(v12, v11, v13, v8);

}

void MRMediaRemoteSetNowPlayingPlayerIfPossible(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v5 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "clientForPlayerPath:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRMediaRemoteSetNowPlayingPlayerIfPossible_block_invoke;
  v13[3] = &unk_1E30C6590;
  v14 = v5;
  v15 = v6;
  v11 = v5;
  v12 = v6;
  objc_msgSend(v10, "requestActiveForPlayerPath:completion:", v8, v13);

}

void MRMediaRemoteGetPictureInPictureStatusForPlayer(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  char v15;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v5 = MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a1;
  if (objc_msgSend(v8, "isLocal"))
  {
    +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "playerClientForPlayerPath:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = objc_msgSend(v10, "isPictureInPictureEnabled");
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __MRMediaRemoteGetPictureInPictureStatusForPlayer_block_invoke;
    v13[3] = &unk_1E30C65B8;
    v14 = v6;
    v15 = v11;
    dispatch_async(v5, v13);

    v8 = v10;
  }
  else
  {
    v12 = (void *)MRGetSharedService();
    MRMediaRemoteServiceGetPictureInPictureEnabledForPlayer(v12, v8, v5, v6);
  }

}

void MRMediaRemoteSetPictureInPictureStatusForPlayer(void *a1, _BOOL8 a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a3;
  if (!v15)
  {
    v15 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a1;
  v9 = a4;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "playerClientForPlayerPath:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "setPictureInPictureEnabled:", a2);
  v12 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetPictureInPictureEnabledForPlayer(v12, v8, a2, v15, v9);

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "clientForPlayerPath:", v8);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "reevaluateActivePlayerWithReason:completion:", CFSTR("Change in pip state"), 0);
}

BOOL MRMediaRemoteCanBecomeActivePlayer(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  _BOOL8 v12;
  void *v13;

  v1 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "playerClientForPlayerPath:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clientForPlayerPath:", v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "playerClients");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");

  if (v7 < 2)
    goto LABEL_6;
  objc_msgSend(v3, "playerPath");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "player");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRPlayer defaultPlayer](MRPlayer, "defaultPlayer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "isEqual:", v10);

  if ((v11 & 1) == 0)
  {
    if (objc_msgSend(v3, "isPictureInPictureEnabled"))
    {
      objc_msgSend(v5, "playerClients");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v13, "count") == 2;

      goto LABEL_7;
    }
LABEL_6:
    v12 = 1;
    goto LABEL_7;
  }
  v12 = 0;
LABEL_7:

  return v12;
}

void *MRMediaRemoteGetPlayerPathForMXSessionIDFromLocalClient(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localOriginClient");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v24 = v3;
  objc_msgSend(v3, "nowPlayingClients");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v21)
  {
    v5 = *(_QWORD *)v30;
    v23 = v4;
    v20 = *(_QWORD *)v30;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v30 != v5)
          objc_enumerationMutation(v4);
        v22 = v6;
        v7 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v6);
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        objc_msgSend(v7, "playerClients");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v26;
          while (2)
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v26 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
              objc_msgSend(v13, "playerPath");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "player");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "mxSessionIDs");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "containsObject:", a1);

              if ((v17 & 1) != 0)
              {
                objc_msgSend(v13, "playerPath");
                v18 = (void *)objc_claimAutoreleasedReturnValue();

                v4 = v23;
                goto LABEL_19;
              }
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
            if (v10)
              continue;
            break;
          }
        }

        v6 = v22 + 1;
        v4 = v23;
        v5 = v20;
      }
      while (v22 + 1 != v21);
      v18 = 0;
      v21 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v21);
  }
  else
  {
    v18 = 0;
  }
LABEL_19:

  return v18;
}

void MRMediaRemoteSetMXSessionIDForPlayer(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;

  v7 = a1;
  v8 = a4;
  v10 = a3;
  objc_msgSend(v7, "player");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setMxSessionIDs:", a2);

  MRMediaRemoteUpdatePlayerProperties(v7, v10, v8);
}

void MRMediaRemoteUpdatePlayerProperties(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = a1;
  objc_msgSend(v6, "player");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteUpdatePlayerProperties(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRNowPlaying.m"), 790, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("playerPath.player"));

  }
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "playerClientForPlayerPath:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "updatePlayer:", v6);
  v10 = (void *)MRGetSharedService();
  if (v14)
    v11 = v14;
  else
    v11 = (void *)MEMORY[0x1E0C80D38];
  MRMediaRemoteServiceUpdatePlayerProperties(v10, v6, v11, v5);

}

void MRMediaRemoteSetAVAudioSessionOpaqueSessionIDForPlayer(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;

  v7 = a1;
  v8 = a4;
  v10 = a3;
  objc_msgSend(v7, "player");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setAudioSessionID:", a2);

  MRMediaRemoteUpdatePlayerProperties(v7, v10, v8);
}

void MRMediaRemoteGetNowPlayingPlayer(void *a1, void *a2)
{
  MRMediaRemoteGetNowPlayingPlayerForClient(0, 0, a1, a2);
}

void MRMediaRemoteGetNowPlayingPlayerForClient(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;
  id v11;

  v11 = a3;
  if (!v11)
  {
    v11 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a4;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  v10 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetNowPlayingPlayer(v10, v9, v11, v8);

}

void MRMediaRemoteGetActivePlayerPathsForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  if (!v7)
  {
    v7 = (id)MEMORY[0x1E0C80D38];
    v4 = MEMORY[0x1E0C80D38];
  }
  v5 = a3;
  v6 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetActivePlayerPathsForLocalOrigin(v6, v7, v5);

}

void MRMediaRemoteGetNowPlayingClients(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v6 = a1;
  if (!v6)
  {
    v6 = (id)MEMORY[0x1E0C80D38];
    v3 = MEMORY[0x1E0C80D38];
  }
  v4 = a2;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteGetNowPlayingClientsForOrigin((uint64_t)v5, v6, v4);

}

void MRMediaRemoteGetNowPlayingClientsForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  MRPlayerPath *v7;
  void *v8;
  id v9;

  v9 = a2;
  if (!v9)
  {
    v9 = (id)MEMORY[0x1E0C80D38];
    v5 = MEMORY[0x1E0C80D38];
  }
  v6 = a3;
  v7 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v8 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetNowPlayingClients(v8, v7, v9, v6);

}

void MRMediaRemoteRemoveClientForOrigin(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a3;
  if (!v14)
  {
    v14 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a4;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  +[MRPlayerPath localResolvedPlayerPathFromPlayerPath:](MRPlayerPath, "localResolvedPlayerPathFromPlayerPath:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "originClientForPlayerPath:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "removeClient:", v10);
  v13 = (void *)MRGetSharedService();
  MRMediaRemoteServiceRemoveClient(v13, v9, v14, v8);

}

void MRMediaRemoteGetPlayers(void *a1, void *a2)
{
  MRMediaRemoteGetPlayersForClient(0, 0, a1, a2);
}

void MRMediaRemoteGetPlayersForClient(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;
  id v11;

  v11 = a3;
  if (!v11)
  {
    v11 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a4;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  v10 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetNowPlayingPlayers(v10, v9, v11, v8);

}

void MRMediaRemoteRemovePlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  if (!v11)
  {
    v11 = (id)MEMORY[0x1E0C80D38];
    v5 = MEMORY[0x1E0C80D38];
  }
  v6 = a3;
  +[MRPlayerPath localResolvedPlayerPathFromPlayerPath:](MRPlayerPath, "localResolvedPlayerPathFromPlayerPath:", a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "clientForPlayerPath:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "removePlayer:", v7);
  v10 = (void *)MRGetSharedService();
  MRMediaRemoteServiceRemovePlayer(v10, a1, v11, v6);

}

void MRMediaRemoteGetClientProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  MRPlayerPath *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  __CFString *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (v8)
  {
    if (v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteGetClientProperties(MRNowPlayingClientRef, MROriginRef, __strong dispatch_queue_t, void (^__strong)(MRNowPlayingClientRef))");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, CFSTR("MRNowPlaying.m"), 556, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

  if (!v7)
  {
LABEL_3:
    v7 = (id)MEMORY[0x1E0C80D38];
    v9 = MEMORY[0x1E0C80D38];
  }
LABEL_4:
  v10 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "UUIDString");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("clientProperties"), v13);
  v15 = v14;
  if (v10)
    objc_msgSend(v14, "appendFormat:", CFSTR(" for %@"), v10);
  _MRLogForCategory(0xAuLL);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v32 = v15;
    _os_log_impl(&dword_193827000, v16, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "workerQueue");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __MRMediaRemoteGetClientProperties_block_invoke;
  v25[3] = &unk_1E30C6608;
  v26 = CFSTR("clientProperties");
  v27 = v13;
  v28 = v11;
  v29 = v7;
  v30 = v8;
  v19 = v8;
  v20 = v7;
  v21 = v11;
  v22 = v13;
  MRMediaRemoteNowPlayingResolvePlayerPath(v10, v18, v25);

}

void MRMediaRemoteSetClientProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  MRPlayerPath *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  MRPlayerPath *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  MRPlayerPath *v28;
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteSetClientProperties(MRNowPlayingClientRef, MROriginRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, CFSTR("MRNowPlaying.m"), 601, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("client"));

  }
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "clientForPlayerPath:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "setClient:", a1);
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("setClientProperties"), v10);
  v16 = v15;
  if (a1)
    objc_msgSend(v15, "appendFormat:", CFSTR(" for %@"), a1);
  _MRLogForCategory(0xAuLL);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v33 = v16;
    _os_log_impl(&dword_193827000, v17, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v18 = (void *)MRGetSharedService();
  v19 = v7;
  if (!v7)
  {
    v19 = (void *)MEMORY[0x1E0C80D38];
    v20 = MEMORY[0x1E0C80D38];
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __MRMediaRemoteSetClientProperties_block_invoke;
  v27[3] = &unk_1E30C6630;
  v28 = v12;
  v29 = v10;
  v30 = v11;
  v31 = v8;
  v21 = v8;
  v22 = v11;
  v23 = v10;
  v24 = v12;
  MRMediaRemoteServiceSetClientProperties(v18, v24, v19, v27);
  if (!v7)

}

void MRMediaRemoteUpdateClientProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  MRPlayerPath *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  MRPlayerPath *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  MRPlayerPath *v28;
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteUpdateClientProperties(MRNowPlayingClientRef, MROriginRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "handleFailureInFunction:file:lineNumber:description:", v26, CFSTR("MRNowPlaying.m"), 622, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("client"));

  }
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "clientForPlayerPath:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "mergeClient:", a1);
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("updateClientProperties"), v10);
  v16 = v15;
  if (a1)
    objc_msgSend(v15, "appendFormat:", CFSTR(" for %@"), a1);
  _MRLogForCategory(0xAuLL);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v33 = v16;
    _os_log_impl(&dword_193827000, v17, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v18 = (void *)MRGetSharedService();
  v19 = v7;
  if (!v7)
  {
    v19 = (void *)MEMORY[0x1E0C80D38];
    v20 = MEMORY[0x1E0C80D38];
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __MRMediaRemoteUpdateClientProperties_block_invoke;
  v27[3] = &unk_1E30C6630;
  v28 = v12;
  v29 = v10;
  v30 = v11;
  v31 = v8;
  v21 = v8;
  v22 = v11;
  v23 = v10;
  v24 = v12;
  MRMediaRemoteServiceUpdateClientProperties(v18, v24, v19, v27);
  if (!v7)

}

void MRMediaRemoteSyncClientProperties(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  MRPlayerPath *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  id v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a3, a2, 0);
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "clientForPlayerPath:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    _MRLogForCategory(1uLL);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v8, "playerPath");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543618;
      v28 = v5;
      v29 = 2114;
      v30 = v10;
      _os_log_impl(&dword_193827000, v9, OS_LOG_TYPE_DEFAULT, "[MRNowPlaying] Received sourceClient %{public}@ at %{public}@", (uint8_t *)&v27, 0x16u);

    }
    objc_msgSend(v8, "playerPath");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "client");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "playerPath");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "client");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "skeleton");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v15, "setProcessIdentifier:", objc_msgSend(v12, "processIdentifier"));
    objc_msgSend(v12, "bundleIdentifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setBundleIdentifier:", v16);

    objc_msgSend(v5, "displayName");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setDisplayName:", v17);

    v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v5, "bundleIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend(v5, "bundleIdentifier");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v20);

    }
    objc_msgSend(v5, "parentApplicationBundleIdentifier");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      objc_msgSend(v5, "parentApplicationBundleIdentifier");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v22);

    }
    objc_msgSend(v5, "extendedBundleIdentifierHierarchy");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      objc_msgSend(v5, "extendedBundleIdentifierHierarchy");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObjectsFromArray:", v24);

    }
    objc_msgSend(v15, "setExtendedBundleIdentifierHierarchy:", v18);
    objc_msgSend(v8, "playerPath");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "origin");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    MRMediaRemoteUpdateClientProperties((uint64_t)v15, (uint64_t)v26, 0, 0);

  }
}

void MRMediaRemoteSetParentApplication(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;

  +[MRClient localClient](MRClient, "localClient");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(v4, "copy");

  objc_msgSend(v5, "setParentApplicationBundleIdentifier:", a2);
  MRMediaRemoteUpdateClientProperties((uint64_t)v5, a1, 0, 0);

}

void MRMediaRemoteSetNowPlayingVisibility(uint64_t a1, unsigned int a2)
{
  void *v4;
  id v5;

  +[MRClient localClient](MRClient, "localClient");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(v4, "copy");

  objc_msgSend(v5, "setVisibility:", a2);
  MRMediaRemoteUpdateClientProperties((uint64_t)v5, a1, 0, 0);

}

void MRMediaRemoteSetNowPlayingTintColor(uint64_t a1, float a2, float a3, float a4, float a5)
{
  void *v10;
  MRColorComponents *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;

  +[MRClient localClient](MRClient, "localClient");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (id)objc_msgSend(v10, "copy");

  if (MRColorIsNull(a2, a3, a4, a5))
  {
    v11 = 0;
  }
  else
  {
    v11 = objc_alloc_init(MRColorComponents);
    *(float *)&v12 = a5;
    -[MRColorComponents setAlpha:](v11, "setAlpha:", v12);
    *(float *)&v13 = a4;
    -[MRColorComponents setBlue:](v11, "setBlue:", v13);
    *(float *)&v14 = a3;
    -[MRColorComponents setGreen:](v11, "setGreen:", v14);
    *(float *)&v15 = a2;
    -[MRColorComponents setRed:](v11, "setRed:", v15);
  }
  objc_msgSend(v16, "setTintColor:", v11);
  MRMediaRemoteUpdateClientProperties((uint64_t)v16, a1, 0, 0);

}

CFStringRef MRMediaRemoteCopyNowPlayingVisibilityDescription(unsigned int a1)
{
  const __CFString *v1;

  if (a1 > 3)
    v1 = 0;
  else
    v1 = off_1E30C6800[a1];
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

void MRMediaRemoteGetPlayerProperties(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  __CFString *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("playerProperties"), v9);
  v11 = v10;
  if (a1)
    objc_msgSend(v10, "appendFormat:", CFSTR(" for %@"), a1);
  _MRLogForCategory(0xAuLL);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v26 = v11;
    _os_log_impl(&dword_193827000, v12, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "workerQueue");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __MRMediaRemoteGetPlayerProperties_block_invoke;
  v19[3] = &unk_1E30C6608;
  v20 = CFSTR("playerProperties");
  v21 = v9;
  v22 = v7;
  v23 = v5;
  v24 = v6;
  v15 = v6;
  v16 = v5;
  v17 = v7;
  v18 = v9;
  MRMediaRemoteNowPlayingResolvePlayerPath(a1, v14, v19);

}

void MRMediaRemoteSetPlayerProperties(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = a1;
  objc_msgSend(v6, "player");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteSetPlayerProperties(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRNowPlaying.m"), 777, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("playerPath.player"));

  }
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "playerClientForPlayerPath:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "setPlayerPath:", v6);
  v10 = (void *)MRGetSharedService();
  if (v14)
    v11 = v14;
  else
    v11 = (void *)MEMORY[0x1E0C80D38];
  MRMediaRemoteServiceSetPlayerProperties(v10, v6, v11, v5);

}

void MRMediaRemoteGetElectedPlayerPath(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = a1;
  v5 = (void *)MRGetSharedService();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteGetElectedPlayerPath_block_invoke;
  v7[3] = &unk_1E30C66A8;
  v8 = v3;
  v6 = v3;
  MRMediaRemoteServiceGetElectedPlayerPath(v5, v4, v7);

}

void MRMediaRemoteGetNowPlayingApplicationPlaybackState(void *a1, void *a2)
{
  MRMediaRemoteGetPlaybackStateForClient(0, 0, a1, a2);
}

void MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin(uint64_t a1, void *a2, void *a3)
{
  MRMediaRemoteGetPlaybackStateForClient(0, a1, a2, a3);
}

void MRMediaRemoteGetPlaybackStateForClient(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  MRMediaRemoteGetPlaybackStateForPlayer(v9, v8, v7);

}

void MRMediaRemoteSetNowPlayingApplicationPlaybackStateForOrigin(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  MRMediaRemoteSetPlaybackStateForClient(0, a1, a2, a3, a4);
}

void MRMediaRemoteSetPlaybackStateForClient(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  MRPlayerPath *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v9 = a5;
  v10 = a4;
  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRMediaRemoteSetPlaybackStateForClient_block_invoke;
  v13[3] = &unk_1E30C6748;
  v14 = v9;
  v12 = v9;
  MRMediaRemoteSetPlaybackStateForPlayer((uint64_t)v11, a3, v10, v13);

}

void MRMediaRemoteNowPlayingPing(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = a1;
  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServicePing(v4, v5, v3);

}

void MRMediaRemoteGetMediaAppIsInstalled(uint64_t a1, uint64_t a2, void *a3)
{
  void (**v4)(id, _QWORD);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a3;
  _MRLogForCategory(1uLL);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    MRMediaRemoteGetMediaAppIsInstalled_cold_1(a1, v5, v6, v7, v8, v9, v10, v11);

  v4[2](v4, 0);
}

BOOL MRMediaRemoteIsBooksAppInstalled()
{
  void *v0;

  v0 = (void *)MRGetSharedService();
  return MRMediaRemoteServiceIsBooksAppInstalled(v0);
}

uint64_t MRMediaRemoteIsMediaAppInstalled(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  _MRLogForCategory(1uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    MRMediaRemoteGetMediaAppIsInstalled_cold_1(a1, v2, v3, v4, v5, v6, v7, v8);

  return 0;
}

void MRMediaRemoteRegisterForNowPlayingNotifications(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "notificationClient");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registerForNowPlayingNotificationsWithQueue:", v1);

}

void MRMediaRemoteUnregisterForNowPlayingNotifications()
{
  void *v0;
  id v1;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "notificationClient");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "unregisterForNowPlayingNotifications");

}

uint64_t MRMediaRemoteCopyNowPlayingNotifications()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v0 = (void *)MEMORY[0x194036A64]();
  +[MRNotificationClient nowPlayingNotifications](MRNotificationClient, "nowPlayingNotifications");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "allObjects");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  objc_autoreleasePoolPop(v0);
  return v3;
}

void MRMediaRemoteSetWantsWakingNowPlayingNotifications(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;

  v5 = a3;
  v6 = a2;
  +[MRPlayerPath anyPlayerPath](MRPlayerPath, "anyPlayerPath");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "notificationClient");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (a1)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteSetWantsWakingNowPlayingNotifications_block_invoke;
    v15[3] = &unk_1E30C6798;
    v10 = &v16;
    v16 = v5;
    v11 = v5;
    objc_msgSend(v9, "registerForWakingNowPlayingNotificationsForPlayerPath:replyQueue:completion:", v7, v6, v15);
  }
  else
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __MRMediaRemoteSetWantsWakingNowPlayingNotifications_block_invoke_2;
    v13[3] = &unk_1E30C6798;
    v10 = &v14;
    v14 = v5;
    v12 = v5;
    objc_msgSend(v9, "unregisterForWakingNowPlayingNotificationsForPlayerPath:replyQueue:completion:", v7, v6, v13);
  }

}

void MRMediaRemoteRequestVideoThumbnails(const void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  MRPlayerPath *v11;
  _BYTE __dst[2064];

  v9 = a5;
  v10 = a4;
  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a3, 0);
  memcpy(__dst, a1, sizeof(__dst));
  MRMediaRemoteRequestVideoThumbnailsForPlayer(__dst, v11, v10, v9);

}

void MRMediaRemoteRequestVideoThumbnailsForPlayer(const void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  _BYTE v11[2064];

  v7 = a3;
  if (!v7)
  {
    v7 = (id)MEMORY[0x1E0C80D38];
    v8 = MEMORY[0x1E0C80D38];
  }
  v9 = a4;
  v10 = (void *)MRGetSharedService();
  memcpy(v11, a1, sizeof(v11));
  MRMediaRemoteServiceRequestVideoThumbnails(v10, a2, v11, v7, v9);

}

void MRMediaRemoteRequestAudioAmplitudeSamples(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  MRPlayerPath *v11;

  v9 = a5;
  v10 = a4;
  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a3, 0);
  MRMediaRemoteRequestAudioAmplitudeSamplesForPlayer(a1, v11, v10, v9);

}

void MRMediaRemoteRequestAudioAmplitudeSamplesForPlayer(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;

  v10 = a3;
  if (!v10)
  {
    v10 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  v8 = a4;
  v9 = (void *)MRGetSharedService();
  MRMediaRemoteServiceRequestAudioAmplitudeSamples(v9, a2, a1, v10, v8);

}

__CFString *MRMediaRemoteCopyClientVisibilityDescription(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E30C6800[a1];
}

uint64_t MRMediaRemoteSelectSourceWithID(void *a1)
{
  void *v2;

  v2 = (void *)MRGetSharedService();
  return MRMediaRemoteServiceSelectSource(v2, a1);
}

void MRMediaRemoteSetVideoThumbnailsRequestCallback(uint64_t a1, void *a2)
{
  id v3;
  MRPlayerPath *v4;

  v3 = a2;
  v4 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  MRMediaRemoteSetVideoThumbnailsRequestCallbackForPlayer((uint64_t)v4, v3);

}

void MRMediaRemoteSetVideoThumbnailsRequestCallbackForPlayer(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a1);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "clientCallbacks");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setVideoThumbnailsCallback:", v3);

}

void MRMediaRemoteSetAudioAmplitudeSamplesRequestCallback(uint64_t a1, void *a2)
{
  id v3;
  MRPlayerPath *v4;

  v3 = a2;
  v4 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  MRMediaRemoteSetAudioAmplitudeSamplesRequestCallbackForPlayer((uint64_t)v4, v3);

}

void MRMediaRemoteSetAudioAmplitudeSamplesRequestCallbackForPlayer(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a1);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "clientCallbacks");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setAudioAmplitudeSamplesCallback:", v3);

}

BOOL MRMediaRemoteNowPlayingBless()
{
  void *v0;

  v0 = (void *)MRGetSharedService();
  return MRMediaRemoteServiceRequestBless(v0);
}

BOOL MRMediaRemoteNowPlayingWakePlayerServiceProcess()
{
  void *v0;

  v0 = (void *)MRGetSharedService();
  return MRMediaRemoteServiceWakePlayerServiceProcess(v0);
}

id AVSystemControllerFunction()
{
  return (id)classAVSystemController;
}

id AVSystemController_CanBeNowPlayingAppAttributeFunction()
{
  return (id)constantValAVSystemController_CanBeNowPlayingAppAttribute;
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_6(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 48));
}

uint64_t OUTLINED_FUNCTION_7(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 56));
}

BOOL _MRRemoveOutputDevicesMessageProtobufReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addOutputDeviceUIDs:", v17);
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)a1[1];
    a1[1] = v18;
LABEL_23:

    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

_MRVideoThumbnailProtobuf *MRVideoThumbnailCreate(uint64_t a1, double a2)
{
  _MRVideoThumbnailProtobuf *v4;

  v4 = objc_alloc_init(_MRVideoThumbnailProtobuf);
  -[_MRVideoThumbnailProtobuf setImageData:](v4, "setImageData:", a1);
  -[_MRVideoThumbnailProtobuf setTime:](v4, "setTime:", a2);
  return v4;
}

_MRVideoThumbnailProtobuf *MRVideoThumbnailCreateFromExternalRepresentation(uint64_t a1)
{
  return -[_MRVideoThumbnailProtobuf initWithData:]([_MRVideoThumbnailProtobuf alloc], "initWithData:", a1);
}

uint64_t MRVideoThumbnailCreateExternalRepresentation(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "data");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

void sub_1938C068C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initINPrivatePlayMediaIntentData()
{
  Class result;

  if (IntentsLibrary_sOnce != -1)
    dispatch_once(&IntentsLibrary_sOnce, &__block_literal_global_11);
  result = objc_getClass("INPrivatePlayMediaIntentData");
  classINPrivatePlayMediaIntentData = (uint64_t)result;
  getINPrivatePlayMediaIntentDataClass = (uint64_t (*)())INPrivatePlayMediaIntentDataFunction;
  return result;
}

id INPrivatePlayMediaIntentDataFunction()
{
  return (id)classINPrivatePlayMediaIntentData;
}

Class initINMediaItem()
{
  Class result;

  if (IntentsLibrary_sOnce != -1)
    dispatch_once(&IntentsLibrary_sOnce, &__block_literal_global_11);
  result = objc_getClass("INMediaItem");
  classINMediaItem = (uint64_t)result;
  getINMediaItemClass = (uint64_t (*)())INMediaItemFunction;
  return result;
}

id INMediaItemFunction()
{
  return (id)classINMediaItem;
}

Class initINInteraction()
{
  Class result;

  if (IntentsLibrary_sOnce != -1)
    dispatch_once(&IntentsLibrary_sOnce, &__block_literal_global_11);
  result = objc_getClass("INInteraction");
  classINInteraction = (uint64_t)result;
  getINInteractionClass = (uint64_t (*)())INInteractionFunction;
  return result;
}

id INInteractionFunction()
{
  return (id)classINInteraction;
}

Class initINCExtensionConnection()
{
  Class result;

  if (IntentsCoreLibrary_sOnce != -1)
    dispatch_once(&IntentsCoreLibrary_sOnce, &__block_literal_global_78);
  result = objc_getClass("INCExtensionConnection");
  classINCExtensionConnection = (uint64_t)result;
  getINCExtensionConnectionClass = (uint64_t (*)())INCExtensionConnectionFunction;
  return result;
}

id INCExtensionConnectionFunction()
{
  return (id)classINCExtensionConnection;
}

Class initINPlayMediaIntentResponse()
{
  Class result;

  if (IntentsLibrary_sOnce != -1)
    dispatch_once(&IntentsLibrary_sOnce, &__block_literal_global_11);
  result = objc_getClass("INPlayMediaIntentResponse");
  classINPlayMediaIntentResponse = (uint64_t)result;
  getINPlayMediaIntentResponseClass = (uint64_t (*)())INPlayMediaIntentResponseFunction;
  return result;
}

id INPlayMediaIntentResponseFunction()
{
  return (id)classINPlayMediaIntentResponse;
}

_MRPlaybackQueueCapabilitiesProtobuf *_MRPlaybackQueueCapabilitiesCreateProtobuf(char a1)
{
  _MRPlaybackQueueCapabilitiesProtobuf *v2;
  _MRPlaybackQueueCapabilitiesProtobuf *v3;

  v2 = objc_alloc_init(_MRPlaybackQueueCapabilitiesProtobuf);
  v3 = v2;
  if ((a1 & 2) == 0)
  {
    if ((a1 & 4) == 0)
      goto LABEL_3;
LABEL_7:
    -[_MRPlaybackQueueCapabilitiesProtobuf setRequestByIdentifiers:](v3, "setRequestByIdentifiers:", 1);
    if ((a1 & 8) == 0)
      return v3;
    goto LABEL_4;
  }
  -[_MRPlaybackQueueCapabilitiesProtobuf setRequestByRange:](v2, "setRequestByRange:", 1);
  if ((a1 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((a1 & 8) != 0)
LABEL_4:
    -[_MRPlaybackQueueCapabilitiesProtobuf setRequestByRange:](v3, "setRequestByRange:", 1);
  return v3;
}

uint64_t _MRPlaybackQueueCapabilitiesFromProto(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = a1;
  if (objc_msgSend(v1, "requestByRange"))
    v2 = 2;
  else
    v2 = 0;
  if (objc_msgSend(v1, "requestByIdentifiers"))
    v3 = v2 | 4;
  else
    v3 = v2;
  v4 = objc_msgSend(v1, "requestByRequest");

  if (v4)
    return v3 | 8;
  else
    return v3;
}

uint64_t MRPlaybackQueueCapabilitiesFromExternalRepresentation(void *a1)
{
  id v1;
  _MRPlaybackQueueCapabilitiesProtobuf *v2;
  uint64_t v3;

  v1 = a1;
  v2 = -[_MRPlaybackQueueCapabilitiesProtobuf initWithData:]([_MRPlaybackQueueCapabilitiesProtobuf alloc], "initWithData:", v1);

  v3 = _MRPlaybackQueueCapabilitiesFromProto(v2);
  return v3;
}

id MRPlaybackQueueCapabilitiesCreateExternalRepresentation(char a1)
{
  void *v1;
  void *v2;

  _MRPlaybackQueueCapabilitiesCreateProtobuf(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "data");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1938C48B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void MRMediaRemoteGetSupportedCommands(void *a1, void *a2)
{
  MRMediaRemoteGetSupportedCommandsForApp(0, 0, a1, a2);
}

void MRMediaRemoteGetSupportedCommandsForApp(MRClient *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;

  v8 = a3;
  v7 = a4;
  if (a1)
    a1 = -[MRClient initWithProcessIdentifier:bundleIdentifier:]([MRClient alloc], "initWithProcessIdentifier:bundleIdentifier:", 0, a1);
  MRMediaRemoteGetSupportedCommandsForClient((uint64_t)a1, a2, v8, v7);

}

void MRMediaRemoteGetSupportedCommandsForOrigin(uint64_t a1, void *a2, void *a3)
{
  MRMediaRemoteGetSupportedCommandsForApp(0, a1, a2, a3);
}

void MRMediaRemoteGetSupportedCommandsForClient(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRMediaRemoteGetSupportedCommandsForClient_block_invoke;
  v11[3] = &unk_1E30C6B70;
  v12 = v7;
  v10 = v7;
  MRMediaRemoteGetSupportedCommandsForPlayer(v9, v8, v11);

}

void MRMediaRemoteGetProxiableSupportedCommandsForPlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteGetProxiableSupportedCommandsForPlayer_block_invoke;
  v7[3] = &unk_1E30C6B70;
  v8 = v5;
  v6 = v5;
  MRMediaRemoteGetSupportedCommandsForPlayer(a1, a2, v7);

}

void MRMediaRemoteGetSyncableSupportedCommandsForPlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteGetSyncableSupportedCommandsForPlayer_block_invoke;
  v7[3] = &unk_1E30C6B70;
  v8 = v5;
  v6 = v5;
  MRMediaRemoteGetSupportedCommandsForPlayer(a1, a2, v7);

}

void MRMediaRemoteCopySupportedCommands(void *a1, void *a2)
{
  MRMediaRemoteCopySupportedCommandsForOrigin(0, a1, a2);
}

void MRMediaRemoteCopySupportedCommandsForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __MRMediaRemoteCopySupportedCommandsForOrigin_block_invoke;
    v7[3] = &unk_1E30C6C30;
    v8 = v5;
    MRMediaRemoteGetSupportedCommandsForApp(0, a1, a2, v7);

  }
}

void MRMediaRemoteRequestPendingCommands(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  MRPlayerPath *v7;
  void *v8;
  void *v9;
  MRPlayerPath *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  MRPlayerPath *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void (**v22)(_QWORD, _QWORD, _QWORD);
  void *v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  _QWORD v41[4];
  void (**v42)(_QWORD, _QWORD, _QWORD);
  _QWORD v43[4];
  MRPlayerPath *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = [MRPlayerPath alloc];
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRClient localClient](MRClient, "localClient");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[MRPlayerPath initWithOrigin:client:player:](v7, "initWithOrigin:client:player:", v8, v9, a1);

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "UUIDString");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("requestPendingCommands"), v13);
  v15 = v14;
  if (v10)
    objc_msgSend(v14, "appendFormat:", CFSTR(" for %@"), v10);
  _MRLogForCategory(0xAuLL);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v50 = v15;
    _os_log_impl(&dword_193827000, v16, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = __MRMediaRemoteRequestPendingCommands_block_invoke;
  v43[3] = &unk_1E30C6C58;
  v17 = v10;
  v44 = v17;
  v18 = v13;
  v45 = v18;
  v19 = v11;
  v46 = v19;
  v20 = v6;
  v48 = v20;
  v21 = v5;
  v47 = v21;
  v22 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x194036C44](v43);
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "clientForPlayerPath:", v17);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v24, "canBeNowPlayingForPlayer:", v17))
  {
    _MRLogForCategory(2uLL);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      MRMediaRemoteRequestPendingCommands_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);

    v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithMRError:description:", 2, CFSTR("Cannot call 'RequestPendingCommands' if CanBeNowPlaying=YES"));
    ((void (**)(_QWORD, _QWORD, void *))v22)[2](v22, 0, v33);
  }
  else
  {
    MRCreateXPCMessage(0x400000000000006uLL);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    MRAddPlayerPathToXPCMessage(v33, v17);
    +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "service");
    v39 = v15;
    v40 = v20;
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "mrXPCConnection");
    v36 = v19;
    v37 = v18;
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = __MRMediaRemoteRequestPendingCommands_block_invoke_46;
    v41[3] = &unk_1E30C6C80;
    v42 = v22;
    objc_msgSend(v38, "sendMessage:queue:reply:", v33, v21, v41);

    v18 = v37;
    v19 = v36;

    v15 = v39;
    v20 = v40;

  }
}

void MRMediaRemoteSetSupportedCommands(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  MRMediaRemoteSetSupportedCommandsForClient(a1, 0, a2, a3, a4);
}

void MRMediaRemoteSetSupportedCommandsForClient(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  MRPlayerPath *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v9 = a5;
  v10 = a4;
  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a3, a2, 0);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRMediaRemoteSetSupportedCommandsForClient_block_invoke;
  v13[3] = &unk_1E30C6748;
  v14 = v9;
  v12 = v9;
  MRMediaRemoteSetSupportedCommandsForPlayer(a1, (uint64_t)v11, v10, v13);

}

void MRMediaRemoteClearDefaultSupportedCommandsForApp(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  MRClient *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  v8 = -[MRClient initWithBundleIdentifier:]([MRClient alloc], "initWithBundleIdentifier:", v7);

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __MRMediaRemoteClearDefaultSupportedCommandsForApp_block_invoke;
  v10[3] = &unk_1E30C6748;
  v11 = v5;
  v9 = v5;
  MRMediaRemoteSetDefaultSupportedCommandsForClient((uint64_t)v8, 0, 0, v6, v10);

}

uint64_t MRMediaRemoteSupportsCommand(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = a1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v8, "command", (_QWORD)v11) == a2)
        {
          v9 = objc_msgSend(v8, "isEnabled");
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 1;
LABEL_11:

  return v9;
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

uint64_t _MRGetVolumeMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRPlaybackSessionRequestProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_38;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_38;
        case 3u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_42:
          v32 = 20;
          goto LABEL_47;
        case 4u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          break;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_38:
          v31 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_46;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_46:
      v32 = 16;
LABEL_47:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1938C77F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938C79D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938C7A7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938C7BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1938C7C08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938C7DC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938C7E6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938C7ECC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938C8000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _MRGameControllerDigitizerProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 36) |= 2u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 16;
          goto LABEL_53;
        case 2u:
          *(_BYTE *)(a1 + 36) |= 4u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 24;
LABEL_53:
          *(_QWORD *)(a1 + v38) = v20;
          continue;
        case 3u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  v26 = 0;
                  goto LABEL_44;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_44:
          *(_BYTE *)(a1 + 32) = v26 != 0;
          continue;
        case 4u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        v36 = v35 + 1;
        if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
        *(_QWORD *)(a2 + v34) = v36;
        v33 |= (unint64_t)(v37 & 0x7F) << v31;
        if ((v37 & 0x80) == 0)
          goto LABEL_46;
        v31 += 7;
        v15 = v32++ >= 9;
        if (v15)
        {
          v33 = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        v33 = 0;
LABEL_48:
      *(_QWORD *)(a1 + 8) = v33;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _MRProtoUtilsNSDictionaryFromProtoDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v1, "pairs", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v8, "value");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        _MRProtoUtilsPlistTypeFromProtoValue(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "key");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v11);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }

  v12 = (void *)objc_msgSend(v2, "copy");
  return v12;
}

id _MRProtoUtilsPlistTypeFromProtoValue(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!objc_msgSend(v1, "hasStringValue"))
  {
    if (objc_msgSend(v1, "hasInt64Value"))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v1, "int64Value"));
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    if (objc_msgSend(v1, "hasFloatValue"))
    {
      v3 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v1, "floatValue");
      objc_msgSend(v3, "numberWithFloat:");
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    if (objc_msgSend(v1, "hasDoubleValue"))
    {
      v4 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v1, "doubleValue");
      objc_msgSend(v4, "numberWithDouble:");
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    if (objc_msgSend(v1, "hasDataValue"))
    {
      objc_msgSend(v1, "dataValue");
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    if (objc_msgSend(v1, "hasBoolValue"))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v1, "BOOLValue"));
      v2 = objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
    if (objc_msgSend(v1, "hasDateValue"))
    {
      objc_msgSend(v1, "dateValue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (_ISO8601DateFormatter_onceToken != -1)
        dispatch_once(&_ISO8601DateFormatter_onceToken, &__block_literal_global_16);
      objc_msgSend(0, "dateFromString:", v7);
      v8 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!objc_msgSend(v1, "hasDictionaryValue"))
      {
        if (!objc_msgSend(v1, "arrayValuesCount"))
        {
          v5 = 0;
          goto LABEL_14;
        }
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v1, "arrayValuesCount"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        objc_msgSend(v1, "arrayValues", 0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v15;
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v15 != v11)
                objc_enumerationMutation(v7);
              _MRProtoUtilsPlistTypeFromProtoValue(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i));
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              if (v13)
                objc_msgSend(v5, "addObject:", v13);

            }
            v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          }
          while (v10);
        }
        goto LABEL_22;
      }
      objc_msgSend(v1, "dictionaryValue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      _MRProtoUtilsNSDictionaryFromProtoDictionary();
      v8 = objc_claimAutoreleasedReturnValue();
    }
    v5 = (void *)v8;
LABEL_22:

    goto LABEL_14;
  }
  objc_msgSend(v1, "stringValue");
  v2 = objc_claimAutoreleasedReturnValue();
LABEL_13:
  v5 = (void *)v2;
LABEL_14:

  return v5;
}

_MRDictionaryProtobuf *_MRProtoUtilsProtoDictionaryFromNSDictionary(void *a1)
{
  id v1;
  _MRDictionaryProtobuf *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _MRKeyValuePairProtobuf *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(_MRDictionaryProtobuf);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v7);
        if ((_NSIsNSString() & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", (_QWORD)v15);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_MRDictionaryProtobuf * _Nonnull _MRProtoUtilsProtoDictionaryFromNSDictionary(NSDictionary<NSString *,id> *__strong _Nonnull)");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRProtoUtils.m"), 38, CFSTR("all dictionary keys must be string"));

        }
        objc_msgSend(v3, "objectForKeyedSubscript:", v8, (_QWORD)v15);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        _MRProtoUtilsProtoValueFromPlistType(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10)
        {
          v11 = objc_alloc_init(_MRKeyValuePairProtobuf);
          -[_MRKeyValuePairProtobuf setKey:](v11, "setKey:", v8);
          -[_MRKeyValuePairProtobuf setValue:](v11, "setValue:", v10);
          -[_MRDictionaryProtobuf addPair:](v2, "addPair:", v11);

        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

  return v2;
}

_MRValueProtobuf *_MRProtoUtilsProtoValueFromPlistType(void *a1)
{
  id v1;
  _MRValueProtobuf *v2;
  const __CFNumber *v3;
  const __CFNumber *v4;
  uint64_t v5;
  id v6;
  void *v7;
  _MRValueProtobuf *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _MRValueProtobuf *v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(_MRValueProtobuf);
  if (_NSIsNSString())
  {
    -[_MRValueProtobuf setStringValue:](v2, "setStringValue:", v1);
LABEL_35:
    v18 = v2;
    goto LABEL_36;
  }
  if (_NSIsNSNumber())
  {
    v3 = (const __CFNumber *)v1;
    v4 = v3;
    if ((const __CFNumber *)*MEMORY[0x1E0C9AE50] == v3)
    {
      v8 = v2;
      v9 = 1;
    }
    else
    {
      if ((const __CFNumber *)*MEMORY[0x1E0C9AE40] != v3)
      {
        switch(CFNumberGetType(v3))
        {
          case kCFNumberSInt8Type:
          case kCFNumberSInt16Type:
          case kCFNumberSInt32Type:
          case kCFNumberSInt64Type:
          case kCFNumberCharType:
          case kCFNumberShortType:
          case kCFNumberIntType:
          case kCFNumberLongType:
          case kCFNumberLongLongType:
          case kCFNumberCFIndexType:
          case kCFNumberNSIntegerType:
            -[_MRValueProtobuf setInt64Value:](v2, "setInt64Value:", -[__CFNumber longLongValue](v4, "longLongValue"));
            goto LABEL_8;
          case kCFNumberFloat32Type:
          case kCFNumberFloatType:
LABEL_8:
            -[__CFNumber floatValue](v4, "floatValue");
            -[_MRValueProtobuf setFloatValue:](v2, "setFloatValue:");
            goto LABEL_9;
          case kCFNumberFloat64Type:
          case kCFNumberDoubleType:
LABEL_9:
            -[__CFNumber doubleValue](v4, "doubleValue");
            -[_MRValueProtobuf setDoubleValue:](v2, "setDoubleValue:");
            goto LABEL_10;
          case kCFNumberCGFloatType:
LABEL_10:
            -[__CFNumber doubleValue](v4, "doubleValue");
            -[_MRValueProtobuf setDoubleValue:](v2, "setDoubleValue:");
            break;
          default:
            break;
        }
        -[_MRValueProtobuf setInt64Value:](v2, "setInt64Value:", -[__CFNumber longLongValue](v4, "longLongValue"));
        goto LABEL_32;
      }
      v8 = v2;
      v9 = 0;
    }
    -[_MRValueProtobuf setBoolValue:](v8, "setBoolValue:", v9);
LABEL_32:
    v18 = v2;

    goto LABEL_36;
  }
  if (_NSIsNSData())
  {
    -[_MRValueProtobuf setDataValue:](v2, "setDataValue:", v1);
    goto LABEL_35;
  }
  if (_NSIsNSDate())
  {
    v5 = _ISO8601DateFormatter_onceToken;
    v6 = v1;
    if (v5 != -1)
      dispatch_once(&_ISO8601DateFormatter_onceToken, &__block_literal_global_16);
    objc_msgSend(0, "stringFromDate:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[_MRValueProtobuf setDateValue:](v2, "setDateValue:", v7);
    goto LABEL_35;
  }
  if (!_NSIsNSArray())
  {
    if (!_NSIsNSDictionary())
    {
      v18 = 0;
      goto LABEL_36;
    }
    _MRProtoUtilsProtoDictionaryFromNSDictionary(v1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[_MRValueProtobuf setDictionaryValue:](v2, "setDictionaryValue:", v19);

    goto LABEL_35;
  }
  v10 = v1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v10, "count"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v22;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v22 != v15)
          objc_enumerationMutation(v12);
        _MRProtoUtilsProtoValueFromPlistType(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v16));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(v11, "addObject:", v17, (_QWORD)v21);

        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v14);
  }

  -[_MRValueProtobuf setArrayValues:](v2, "setArrayValues:", v11);
  v18 = v2;

LABEL_36:
  return v18;
}

void sub_1938CA5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1938CA65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1938CA6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1938CA778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CA848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CA918(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CA9E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CAAB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CAB88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CAC58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CAD30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CAE08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CAEE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CAFB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CB090(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CB168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CB240(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CB318(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _MRVirtualTouchDeviceDescriptorProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_42;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_44;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_44:
          v38 = v20 != 0;
          v39 = 16;
          goto LABEL_49;
        case 2u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 20) |= 8u;
          break;
        case 3u:
          *(_BYTE *)(a1 + 20) |= 2u;
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v35 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v35 = 0;
          }
          v40 = 12;
          goto LABEL_54;
        case 4u:
          *(_BYTE *)(a1 + 20) |= 1u;
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v35 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v35 = 0;
          }
          v40 = 8;
LABEL_54:
          *(_DWORD *)(a1 + v40) = v35;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v31;
        v28 |= (unint64_t)(v32 & 0x7F) << v26;
        if ((v32 & 0x80) == 0)
          goto LABEL_46;
        v26 += 7;
        v15 = v27++ >= 9;
        if (v15)
        {
          v28 = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        v28 = 0;
LABEL_48:
      v38 = v28 != 0;
      v39 = 17;
LABEL_49:
      *(_BYTE *)(a1 + v39) = v38;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSetStateMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  _MRNowPlayingInfoProtobuf *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(_MRNowPlayingInfoProtobuf);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (PBReaderPlaceMark() && (_MRNowPlayingInfoProtobufReadFrom((uint64_t)v18, a2) & 1) != 0)
          goto LABEL_48;
        goto LABEL_61;
      case 2u:
        v18 = objc_alloc_init(_MRSupportedCommandsProtobuf);
        objc_storeStrong((id *)(a1 + 80), v18);
        if (!PBReaderPlaceMark() || (_MRSupportedCommandsProtobufReadFrom(v18, a2) & 1) == 0)
          goto LABEL_61;
        goto LABEL_48;
      case 3u:
        v18 = objc_alloc_init(_MRPlaybackQueueProtobuf);
        objc_storeStrong((id *)(a1 + 40), v18);
        if (!PBReaderPlaceMark() || (_MRPlaybackQueueProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_61;
        goto LABEL_48;
      case 4u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 16;
        goto LABEL_30;
      case 5u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 24;
LABEL_30:
        v21 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

        goto LABEL_49;
      case 6u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 88) |= 2u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              v15 = v23++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_57:
        *(_DWORD *)(a1 + 56) = v24;
        goto LABEL_49;
      case 8u:
        v18 = objc_alloc_init(_MRPlaybackQueueCapabilitiesProtobuf);
        objc_storeStrong((id *)(a1 + 48), v18);
        if (!PBReaderPlaceMark() || !_MRPlaybackQueueCapabilitiesProtobufReadFrom((uint64_t)v18, a2))
          goto LABEL_61;
        goto LABEL_48;
      case 9u:
        v18 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 64), v18);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v18->super.super.isa, a2))
        {
          goto LABEL_61;
        }
        goto LABEL_48;
      case 0xAu:
        v18 = objc_alloc_init(_MRPlaybackQueueRequestProtobuf);
        objc_storeStrong((id *)(a1 + 72), v18);
        if (PBReaderPlaceMark() && (_MRPlaybackQueueRequestProtobufReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_49:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_61:

        return 0;
      case 0xBu:
        *(_BYTE *)(a1 + 88) |= 1u;
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v32 = 0;
        }
        *(_QWORD *)(a1 + 8) = v32;
        goto LABEL_49;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_49;
    }
  }
}

void sub_1938CE530(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CE974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CEDB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CEFC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CF124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CF2A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CF498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

void sub_1938CF658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938CF80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938CFC60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938CFF7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D0E94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D1470(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1938D57B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D5830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D59C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D5B6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D5D18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D5EC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D600C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938D608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

Class initTUConversationManager()
{
  Class result;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_233);
  result = objc_getClass("TUConversationManager");
  classTUConversationManager = (uint64_t)result;
  getTUConversationManagerClass[0] = (uint64_t (*)())TUConversationManagerFunction;
  return result;
}

id TUConversationManagerFunction()
{
  return (id)classTUConversationManager;
}

Class initTUNeighborhoodActivityConduit()
{
  Class result;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_233);
  result = objc_getClass("TUNeighborhoodActivityConduit");
  classTUNeighborhoodActivityConduit = (uint64_t)result;
  getTUNeighborhoodActivityConduitClass[0] = (uint64_t (*)())TUNeighborhoodActivityConduitFunction;
  return result;
}

id TUNeighborhoodActivityConduitFunction()
{
  return (id)classTUNeighborhoodActivityConduit;
}

Class initTUNearbyDeviceHandle()
{
  Class result;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_233);
  result = objc_getClass("TUNearbyDeviceHandle");
  classTUNearbyDeviceHandle = (uint64_t)result;
  getTUNearbyDeviceHandleClass = (uint64_t (*)())TUNearbyDeviceHandleFunction;
  return result;
}

id TUNearbyDeviceHandleFunction()
{
  return (id)classTUNearbyDeviceHandle;
}

Class initAVAudioSession()
{
  Class result;

  if (AVFoundationLibrary_sOnce_1 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_1, &__block_literal_global_238);
  result = objc_getClass("AVAudioSession");
  classAVAudioSession = (uint64_t)result;
  getAVAudioSessionClass[0] = (uint64_t (*)())AVAudioSessionFunction;
  return result;
}

id AVAudioSessionFunction()
{
  return (id)classAVAudioSession;
}

id initValAVAudioSessionCategoryPlayback()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_1 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_1, &__block_literal_global_238);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_1, "AVAudioSessionCategoryPlayback");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionCategoryPlayback, *v0);
  getAVAudioSessionCategoryPlayback = (uint64_t (*)())AVAudioSessionCategoryPlaybackFunction;
  return (id)constantValAVAudioSessionCategoryPlayback;
}

id AVAudioSessionCategoryPlaybackFunction()
{
  return (id)constantValAVAudioSessionCategoryPlayback;
}

void sub_1938D71C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938D7B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938D7FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938DE13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938DFCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromMRAVDistantExternalDeviceCallbackFlags(char a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("CustomData"));
  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("(%@)"), v5);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = CFSTR("(None)");
  }

  return v6;
}

__CFString *NSStringFromMRAVDistantExternalDeviceNotificationFlags(char a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("NowPlaying"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", CFSTR("Volume"));
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  objc_msgSend(v3, "addObject:", CFSTR("OutputDevices"));
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_12:
  objc_msgSend(v3, "addObject:", CFSTR("EndpointChange"));
  if ((a1 & 0x10) != 0)
LABEL_6:
    objc_msgSend(v3, "addObject:", CFSTR("SystemEndpoint"));
LABEL_7:
  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("(%@)"), v5);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = CFSTR("(None)");
  }

  return v6;
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_5_0(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 56));
}

BOOL _MRPlaybackSessionMigrateBeginMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRPlaybackSessionRequestProtobuf *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRPlaybackSessionRequestProtobuf);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (_MRPlaybackSessionRequestProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRAVAirPlaySecuritySettingsGetSecurityMode(void *a1)
{
  uint64_t result;

  LODWORD(result) = objc_msgSend(a1, "securityType");
  if ((result - 1) >= 4)
    return 0;
  else
    return result;
}

_MRAVAirPlaySecuritySettingsProtobuf *MRAVAirPlaySecuritySettingsCreate(uint64_t a1, uint64_t a2)
{
  _MRAVAirPlaySecuritySettingsProtobuf *v4;

  v4 = objc_alloc_init(_MRAVAirPlaySecuritySettingsProtobuf);
  -[_MRAVAirPlaySecuritySettingsProtobuf setPassword:](v4, "setPassword:", a1);
  if (a2 <= 4)
    -[_MRAVAirPlaySecuritySettingsProtobuf setSecurityType:](v4, "setSecurityType:", a2);
  return v4;
}

_MRAVAirPlaySecuritySettingsProtobuf *MRAVAirPlaySecuritySettingsCreateFromExternalRepresentation(uint64_t a1)
{
  return -[_MRAVAirPlaySecuritySettingsProtobuf initWithData:]([_MRAVAirPlaySecuritySettingsProtobuf alloc], "initWithData:", a1);
}

uint64_t MRAVAirPlaySecuritySettingsCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

void sub_1938E413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 224), 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);
  _Block_object_dispose((const void *)(v49 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1938E8A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938E8CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938E8FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1938E90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void _MRServiceLogReplyError()
{
  void *v0;
  NSObject *v1;
  int v2;
  void *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x194036EC0]();
  _MRLogForCategory(0);
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = v0;
    _os_log_impl(&dword_193827000, v1, OS_LOG_TYPE_DEFAULT, "MediaRemote reply error: %s", (uint8_t *)&v2, 0xCu);
  }

  if (v0)
    free(v0);
}

void MRMediaRemoteServiceDestroy(void *a1)
{
  _xpc_connection_s *v1;
  char *v2;

  v2 = a1;
  if (objc_msgSend(v2, "isRunning"))
    MRMediaRemoteServiceStop(v2);
  *((_QWORD *)v2 + 5) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  objc_msgSend(v2, "connection");
  v1 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_set_context(v1, 0);

  objc_msgSend(v2, "setConnection:", 0);
  objc_msgSend(v2, "setConnectionQueue:", 0);
  objc_msgSend(v2, "setClientCallbackQueue:", 0);
  objc_msgSend(v2, "setClientCallbackPriorityQueue:", 0);
  objc_msgSend(v2, "setBrowsableContentQueue:", 0);
  objc_msgSend(v2, "setVoiceInputQueue:", 0);
  objc_msgSend(v2, "setTelevisionQueue:", 0);
  objc_msgSend(v2, "setAgentQueue:", 0);

}

void MRMediaRemoteServiceStop(void *a1)
{
  id v1;
  _xpc_connection_s *v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = a1;
  if (objc_msgSend(v1, "isRunning"))
  {
    objc_msgSend(v1, "connection");
    v2 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_cancel(v2);

    objc_msgSend(v1, "setIsRunning:", 0);
  }
  else
  {
    _MRLogForCategory(0);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_193827000, v3, OS_LOG_TYPE_DEFAULT, "Warning: Tried to stop a service that isn't running.", v4, 2u);
    }

  }
}

void MRMediaRemoteServiceSetVoiceRecordingEndpoint(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _xpc_connection_s *v4;
  xpc_object_t message;

  a1[3] = a2;
  v3 = a1;
  MRCreateXPCMessage(0x900000000000006uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_BOOL(message, "MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY", a2 != 0);
  objc_msgSend(v3, "connection");
  v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v4, message);
}

void MRMediaRemoteServiceSetTelevisionEndpoint(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  _QWORD *v7;
  void *v8;
  _xpc_connection_s *v9;
  uint8_t v10[16];

  v5 = a3;
  _MRLogForCategory(0);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_193827000, v6, OS_LOG_TYPE_DEFAULT, "Setting television endpoint", v10, 2u);
  }

  a1[4] = a2;
  v7 = a1;
  objc_msgSend(v7, "setTelevisionQueue:", v5);

  MRCreateXPCMessage(0x600000000000009uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_BOOL(v8, "MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY", a2 != 0);
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v9, v8);
}

void MRMediaRemoteServiceSetAgentEndpoint(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _xpc_connection_s *v6;
  xpc_object_t message;

  a1[5] = a2;
  v5 = a1;
  objc_msgSend(v5, "setAgentQueue:", a3);
  MRCreateXPCMessage(0xA00000000000003uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_BOOL(message, "MRXPC_AGENT_ENDPOINT_AVAILABLE_KEY", a2 != 0);
  objc_msgSend(v5, "connection");
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v6, message);
}

uint64_t MRMediaRemoteServiceGetClientModule(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t MRMediaRemoteServiceSetBrowsableContentEndpoint(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void MRMediaRemoteServiceSendCommand(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  os_signpost_id_t v15;
  _xpc_connection_s *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[16];

  v7 = a4;
  if (a2)
  {
    v8 = *(void **)(a2 + 8);
    v9 = a3;
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = a1;
    MRCreateXPCMessage(0x400000000000001uLL);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    MRAddSendCommandToXPCMessage(v12, (void **)a2);
    _MRLogForCategory(2uLL);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v10, "hash");
    if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 = v14;
      if (os_signpost_enabled(v13))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_193827000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v15, "SendCommandXPCToDaemon", "", buf, 2u);
      }
    }

    objc_msgSend(v11, "connection");
    v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __MRMediaRemoteServiceSendCommand_block_invoke;
    v18[3] = &unk_1E30C7D70;
    v19 = v10;
    v20 = v7;
    v17 = v10;
    xpc_connection_send_message_with_reply(v16, v12, v9, v18);

  }
}

void MRMediaRemoteServiceBroadcastCommand(void *a1, void **a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  _QWORD handler[4];
  id v13;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x400000000000002uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddSendCommandToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceBroadcastCommand_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v13 = v8;
    xpc_connection_send_message_with_reply(v11, v10, v7, handler);

  }
  else
  {
    xpc_connection_send_message(v11, v10);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceGetSupportedCommands(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x200000000000030uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, v9);

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetSupportedCommands_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServicePresentOutputDevicePicker(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _xpc_connection_s *v7;
  xpc_object_t xdict;

  v5 = a3;
  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x40000000000000EuLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddDataToXPCMessage(xdict, a2, "MRXPC_MEDIA_CONTROLS_CONFIGURATION_KEY");
  xpc_dictionary_set_value(xdict, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v5);

  objc_msgSend(v6, "connection");
  v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v7, xdict);
  kdebug_trace();

}

void MRMediaRemoteServiceDismissOutputDevicePicker(void *a1)
{
  id v2;
  _xpc_connection_s *v3;
  xpc_object_t message;

  kdebug_trace();
  v2 = a1;
  MRCreateXPCMessage(0x40000000000000FuLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "connection");
  v3 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v3, message);
  kdebug_trace();

}

void MRMediaRemoteServicePrewarmMediaControlsCommand(void *a1, unsigned int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _xpc_connection_s *v9;
  xpc_object_t xdict;

  v7 = a4;
  kdebug_trace();
  v8 = a1;
  MRCreateXPCMessage(0x400000000000003uLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddDataToXPCMessage(xdict, a3, "MRXPC_MEDIA_CONTROLS_CONFIGURATION_KEY");
  xpc_dictionary_set_value(xdict, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v7);

  xpc_dictionary_set_int64(xdict, "MRXPC_MEDIA_CONTROLS_STYLE_KEY", a2);
  objc_msgSend(v8, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v9, xdict);
  kdebug_trace();

}

void MRMediaRemoteServicePresentMediaControlsCommand(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  _QWORD v12[4];
  id v13;

  v5 = a3;
  v6 = a2;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x400000000000004uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __MRMediaRemoteServicePresentMediaControlsCommand_block_invoke;
  v12[3] = &unk_1E30C6748;
  v13 = v5;
  v9 = v5;
  _MRServiceCreateErrorHandlerBlock(v12);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message_with_reply(v11, v8, v6, v10);
}

void MRMediaRemoteServiceDismissMediaControlsCommand(void *a1)
{
  id v2;
  _xpc_connection_s *v3;
  xpc_object_t message;

  kdebug_trace();
  v2 = a1;
  MRCreateXPCMessage(0x400000000000005uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "connection");
  v3 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v3, message);
  kdebug_trace();

}

void MRMediaRemoteServiceSetCanBeNowPlayingApp(void *a1, BOOL a2, double a3)
{
  id v5;
  _xpc_connection_s *v6;
  xpc_object_t xdict;

  v5 = a1;
  MRCreateXPCMessage(0x200000000000006uLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_BOOL(xdict, "MRXPC_NOWPLAYING_APP_ENABLED_KEY", a2);
  xpc_dictionary_set_double(xdict, "MRXPC_TIMESTAMP", a3);
  objc_msgSend(v5, "connection");
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v6, xdict);
}

BOOL MRMediaRemoteServiceSetNowPlayingAppOverride(void *a1, BOOL a2)
{
  id v4;
  void *v5;
  _xpc_connection_s *v6;
  xpc_object_t v7;
  _BOOL8 v9;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x200000000000001uLL);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_BOOL(v5, "MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY", a2);
  objc_msgSend(v4, "connection");
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v7 = xpc_connection_send_message_with_reply_sync(v6, v5);
  if (v7 == (xpc_object_t)MEMORY[0x1E0C81258] || v7 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    v9 = 0;
  }
  else
  {
    v9 = xpc_dictionary_get_uint64(v7, "MRXPC_ERROR_CODE_KEY") == 0;
  }
  kdebug_trace();

  return v9;
}

BOOL MRMediaRemoteServiceSetOverriddenNowPlayingApplication(void *a1, void *a2)
{
  id v4;
  void *v5;
  const char *UTF8String;
  _xpc_connection_s *v7;
  xpc_object_t v8;
  _BOOL8 v10;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x200000000000002uLL);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    UTF8String = (const char *)_MRServiceGetUTF8String(a2);
    xpc_dictionary_set_string(v5, "MRXPC_NOWPLAYING_DISPLAYID_KEY", UTF8String);
  }
  objc_msgSend(v4, "connection");
  v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  v8 = xpc_connection_send_message_with_reply_sync(v7, v5);

  if (v8 == (xpc_object_t)MEMORY[0x1E0C81258] || v8 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    v10 = 0;
  }
  else
  {
    v10 = xpc_dictionary_get_uint64(v8, "MRXPC_ERROR_CODE_KEY") == 0;
  }
  kdebug_trace();

  return v10;
}

uint64_t _MRServiceGetUTF8String(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(objc_retainAutorelease(a1), "UTF8String");
  else
    return 0;
}

void MRMediaRemoteServiceRequestNowPlayingPlaybackQueueCapabilities(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000009uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRequestNowPlayingPlaybackQueueCapabilities_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

void MRMediaRemoteServiceResetPlaybackQueueRequests(void *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  const void *v9;
  size_t v10;
  _xpc_connection_s *v11;
  xpc_object_t xdict;

  kdebug_trace();
  if (a3)
  {
    v6 = a1;
    v7 = a3;
    MRCreateXPCMessage(0x20000000000000BuLL);
    xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
    MRAddPlayerPathToXPCMessage(xdict, a2);
    v8 = objc_retainAutorelease(v7);
    v9 = (const void *)objc_msgSend(v8, "bytes");
    v10 = objc_msgSend(v8, "length");

    xpc_dictionary_set_data(xdict, "MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA", v9, v10);
    objc_msgSend(v6, "connection");
    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    xpc_connection_send_message(v11, xdict);
  }
}

void MRMediaRemoteServiceSendLyricsEvent(void *a1, void *a2, void *a3)
{
  void *v6;
  void *ExternalRepresentation;
  void *v8;
  id v9;
  _xpc_connection_s *v10;
  id v11;

  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x200000000000017uLL);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v6, a2);
  ExternalRepresentation = (void *)MRLyricsEventCreateExternalRepresentation(a3);
  v8 = ExternalRepresentation;
  if (ExternalRepresentation)
  {
    v9 = objc_retainAutorelease(ExternalRepresentation);
    xpc_dictionary_set_data(v6, "MRXPC_LYRICS_EVENT_DATA", (const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"));
  }
  objc_msgSend(v11, "connection");
  v10 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message(v10, v6);

}

void MRMediaRemoteServiceGetClientProperties(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x20000000000000CuLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, v9);

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetClientProperties_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServiceSetClientProperties(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD v15[4];
  id v16;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  MRCreateXPCMessage(0x20000000000000DuLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  if (v8)
  {
    v11 = (void *)objc_msgSend(v8, "copy");
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteServiceSetClientProperties_block_invoke;
    v15[3] = &unk_1E30C6748;
    v16 = v11;
    v12 = v11;
    _MRServiceCreateErrorHandlerBlock(v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v14, v10, v7, v13);

  }
  else
  {
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v12, v10);
  }

}

void MRMediaRemoteServiceUpdateClientProperties(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD v15[4];
  id v16;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  MRCreateXPCMessage(0x20000000000000EuLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  if (v8)
  {
    v11 = (void *)objc_msgSend(v8, "copy");
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteServiceUpdateClientProperties_block_invoke;
    v15[3] = &unk_1E30C6748;
    v16 = v11;
    v12 = v11;
    _MRServiceCreateErrorHandlerBlock(v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v14, v10, v7, v13);

  }
  else
  {
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v12, v10);
  }

}

void MRMediaRemoteServiceGetPlayerProperties(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v7 = a4;
  v8 = a1;
  v9 = a3;
  v10 = a2;
  MRCreateXPCMessage(0x20000000000000FuLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, v10);

  objc_msgSend(v8, "mrXPCConnection");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __MRMediaRemoteServiceGetPlayerProperties_block_invoke;
  v14[3] = &unk_1E30C6C80;
  v15 = v7;
  v13 = v7;
  objc_msgSend(v12, "sendMessage:queue:reply:", v11, v9, v14);

}

void MRMediaRemoteServiceSetPlayerProperties(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD v15[4];
  id v16;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  MRCreateXPCMessage(0x200000000000010uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  if (v8)
  {
    v11 = (void *)objc_msgSend(v8, "copy");
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteServiceSetPlayerProperties_block_invoke;
    v15[3] = &unk_1E30C6748;
    v16 = v11;
    v12 = v11;
    _MRServiceCreateErrorHandlerBlock(v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v14, v10, v7, v13);

  }
  else
  {
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v12, v10);
  }

}

void MRMediaRemoteServiceUpdatePlayerProperties(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD v15[4];
  id v16;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  MRCreateXPCMessage(0x200000000000011uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  if (v8)
  {
    v11 = (void *)objc_msgSend(v8, "copy");
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteServiceUpdatePlayerProperties_block_invoke;
    v15[3] = &unk_1E30C6748;
    v16 = v11;
    v12 = v11;
    _MRServiceCreateErrorHandlerBlock(v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v14, v10, v7, v13);

  }
  else
  {
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v12, v10);
  }

}

void MRMediaRemoteServiceGetElectedPlayerPath(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  id v12;

  v5 = a3;
  v6 = a1;
  v7 = a2;
  MRCreateXPCMessage(0x20000000000002EuLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetElectedPlayerPath_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v12 = v5;
  v10 = v5;
  xpc_connection_send_message_with_reply(v9, v8, v7, handler);

}

void MRMediaRemoteServiceGetAnyAppIsPlaying(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000014uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetAnyAppIsPlaying_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

uint64_t MRMediaRemoteServiceSelectSource(void *a1, void *a2)
{
  id v4;
  void *v5;
  const char *UTF8String;
  _xpc_connection_s *v7;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x100000000000001uLL);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  UTF8String = (const char *)_MRServiceGetUTF8String(a2);
  xpc_dictionary_set_string(v5, "MRXPC_SOURCE_ID_KEY", UTF8String);
  objc_msgSend(v4, "connection");
  v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v7, v5);
  return 1;
}

void MRMediaRemoteServiceRequestVideoThumbnails(void *a1, void *a2, const void *a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  _xpc_connection_s *v13;
  id v14;
  _QWORD handler[4];
  id v16;
  _BYTE __dst[2064];

  v9 = a5;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x200000000000015uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v12, a2);
  memcpy(__dst, a3, sizeof(__dst));
  MRAddVideoThumbnailRequestToXPCMessage(v12, (uint64_t)__dst);
  objc_msgSend(v11, "connection");
  v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRequestVideoThumbnails_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v9;
  v14 = v9;
  xpc_connection_send_message_with_reply(v13, v12, v10, handler);

}

void MRMediaRemoteServiceRequestAudioAmplitudeSamples(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  _xpc_connection_s *v13;
  id v14;
  _QWORD handler[4];
  id v16;

  v9 = a5;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x200000000000016uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v12, a2);
  xpc_dictionary_set_uint64(v12, "MRXPC_AUDIO_AMPLITUDE_SAMPLES_COUNT_KEY", a3);
  objc_msgSend(v11, "connection");
  v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRequestAudioAmplitudeSamples_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v9;
  v14 = v9;
  xpc_connection_send_message_with_reply(v13, v12, v10, handler);

}

uint64_t MRMediaRemoteServiceCopyResolvedPlayerPath(void *a1, void *a2, _QWORD *a3)
{
  id v6;
  void *v7;
  _xpc_connection_s *v8;
  xpc_object_t v9;
  uint64_t v11;
  void *Error;

  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x200000000000018uLL);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v7, a2);
  objc_msgSend(v6, "connection");
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v9 = xpc_connection_send_message_with_reply_sync(v8, v7);
  if (v9 == (xpc_object_t)MEMORY[0x1E0C81258] || v9 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    Error = (void *)MRMediaRemoteCreateError(1);
    v11 = 0;
  }
  else
  {
    MRCreatePlayerPathFromXPCMessage(v9);
    v11 = objc_claimAutoreleasedReturnValue();
    Error = (void *)MRCreateClientErrorFromXPCMessage(v9);
  }
  kdebug_trace();
  if (a3)
    *a3 = Error;

  return v11;
}

void MRMediaRemoteServiceGetNowPlayingClients(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  _QWORD handler[4];
  id v13;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  if (v7 && v8)
  {
    v9 = a1;
    MRCreateXPCMessage(0x20000000000001FuLL);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    MRAddPlayerPathToXPCMessage(v10, a2);
    objc_msgSend(v9, "connection");
    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetNowPlayingClients_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v13 = v8;
    xpc_connection_send_message_with_reply(v11, v10, v7, handler);

  }
  else
  {
    kdebug_trace();
  }

}

void MRMediaRemoteServiceGetNowPlayingPlayers(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000023uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetNowPlayingPlayers_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

void MRMediaRemoteServiceSetNowPlayingClient(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a3;
  kdebug_trace();
  _MRLogForCategory(0);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v17 = a2;
    _os_log_impl(&dword_193827000, v9, OS_LOG_TYPE_DEFAULT, "Setting nowPlayingClient %{public}@", buf, 0xCu);
  }

  v10 = a1;
  MRCreateXPCMessage(0x200000000000020uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, a2);
  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetNowPlayingClient_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServiceGetNowPlayingPlayer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000025uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetNowPlayingPlayer_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

void MRMediaRemoteServiceGetActivePlayerPathsForLocalOrigin(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  id v12;

  v5 = a3;
  v6 = a2;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x200000000000027uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetActivePlayerPathsForLocalOrigin_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v12 = v5;
  v10 = v5;
  xpc_connection_send_message_with_reply(v9, v8, v6, handler);

}

void MRMediaRemoteServiceRemoveClient(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a3;
  kdebug_trace();
  _MRLogForCategory(0);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v17 = a2;
    _os_log_impl(&dword_193827000, v9, OS_LOG_TYPE_DEFAULT, "Removing client %{public}@", buf, 0xCu);
  }

  v10 = a1;
  MRCreateXPCMessage(0x200000000000022uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, a2);
  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRemoveClient_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServiceGetPictureInPictureEnabledForPlayer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  id v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000033uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v10, a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetPictureInPictureEnabledForPlayer_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v14 = v7;
  v12 = v7;
  xpc_connection_send_message_with_reply(v11, v10, v8, handler);

}

void MRMediaRemoteServiceSetPictureInPictureEnabledForPlayer(void *a1, void *a2, _BOOL4 a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  NSObject *v11;
  const __CFString *v12;
  id v13;
  void *v14;
  _xpc_connection_s *v15;
  id v16;
  _QWORD handler[4];
  id v18;
  uint8_t buf[4];
  const __CFString *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  v10 = a4;
  kdebug_trace();
  _MRLogForCategory(0);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = CFSTR("false");
    if (a3)
      v12 = CFSTR("true");
    *(_DWORD *)buf = 138543618;
    v20 = v12;
    v21 = 2114;
    v22 = a2;
    _os_log_impl(&dword_193827000, v11, OS_LOG_TYPE_DEFAULT, "Set picture in picture enabled %{public}@ for client %{public}@", buf, 0x16u);
  }

  v13 = a1;
  MRCreateXPCMessage(0x200000000000034uLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v14, a2);
  xpc_dictionary_set_BOOL(v14, "MRXPC_PICTURE_IN_PICTURE_ENABLED_KEY", a3);
  objc_msgSend(v13, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetPictureInPictureEnabledForPlayer_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v18 = v9;
  v16 = v9;
  xpc_connection_send_message_with_reply(v15, v14, v10, handler);

}

void MRMediaRemoteServiceRemovePlayer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a3;
  kdebug_trace();
  _MRLogForCategory(0);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v17 = a2;
    _os_log_impl(&dword_193827000, v9, OS_LOG_TYPE_DEFAULT, "Removing nowPlayingPlayer %{public}@ ", buf, 0xCu);
  }

  v10 = a1;
  MRCreateXPCMessage(0x200000000000026uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, a2);
  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRemovePlayer_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServiceSetHardwareRemoteBehavior(void *a1, unsigned int a2)
{
  id v4;
  _xpc_connection_s *v5;
  xpc_object_t message;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x200000000000029uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(message, "MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY", a2);
  objc_msgSend(v4, "connection");
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v5, message);
}

void MRMediaRemoteServiceSendContentItemArtworkChangedNotification(void *a1, void *a2, void *a3)
{
  id v5;
  _xpc_connection_s *v6;
  xpc_object_t message;

  v5 = a1;
  MRCreateXPCMessage(0x20000000000002AuLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(message, a2);
  MRAddContentItemsToXPCMessage(message, a3);
  objc_msgSend(v5, "connection");
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v6, message);
}

void MRMediaRemoteServicePlaybackSessionRequest(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteServicePlaybackSessionRequest_block_invoke;
  v9[3] = &unk_1E30C7E80;
  v10 = v7;
  v8 = v7;
  _MRMediaRemoteServiceProtobuf(a1, 0x20000000000002FuLL, a2, a3, v9);

}

void MRMediaRemoteServiceSendPlaybackSession(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteServiceSendPlaybackSession_block_invoke;
  v9[3] = &unk_1E30C7E80;
  v10 = v7;
  v8 = v7;
  _MRMediaRemoteServiceProtobuf(a1, 0x400000000000007uLL, a2, a3, v9);

}

void MRMediaRemoteServiceSendPlaybackSessionMigrateBegin(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteServiceSendPlaybackSessionMigrateBegin_block_invoke;
  v9[3] = &unk_1E30C7E80;
  v10 = v7;
  v8 = v7;
  _MRMediaRemoteServiceProtobuf(a1, 0x400000000000008uLL, a2, a3, v9);

}

void MRMediaRemoteServiceSendPlaybackSessionMigrateEnd(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteServiceSendPlaybackSessionMigrateEnd_block_invoke;
  v9[3] = &unk_1E30C7E80;
  v10 = v7;
  v8 = v7;
  _MRMediaRemoteServiceProtobuf(a1, 0x400000000000009uLL, a2, a3, v9);

}

void MRMediaRemoteServiceGetLastPlayingDateForPlayer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x200000000000035uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v11, v9);

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetLastPlayingDateForPlayer_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

id MRMediaRemoteServiceGetLastPlayingDateForPlayerSync(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  _xpc_connection_s *v8;
  xpc_object_t v9;
  void *v10;
  void *Error;

  v5 = a2;
  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x200000000000035uLL);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v7, v5);

  objc_msgSend(v6, "connection");
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v9 = xpc_connection_send_message_with_reply_sync(v8, v7);
  if (v9 == (xpc_object_t)MEMORY[0x1E0C81258] || v9 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    if (!a3)
    {
      v10 = 0;
      goto LABEL_9;
    }
    Error = (void *)MRMediaRemoteCreateError(1);
    v10 = 0;
    goto LABEL_7;
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", xpc_dictionary_get_double(v9, "MRXPC_TIMESTAMP"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3)
  {
    Error = (void *)MRCreateClientErrorFromXPCMessage(v9);
LABEL_7:
    *a3 = Error;
  }
LABEL_9:
  kdebug_trace();

  return v10;
}

void MRMediaRemoteServiceSetPlayerClientProperties(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  _xpc_connection_s *v14;
  id v15;
  _QWORD handler[4];
  id v17;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  kdebug_trace();
  v12 = a1;
  MRCreateXPCMessage(0x200000000000037uLL);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddProtobufToXPCMessage(v13, v11);

  MRAddPlayerPathToXPCMessage(v13, a2);
  objc_msgSend(v12, "connection");
  v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetPlayerClientProperties_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v17 = v9;
  v15 = v9;
  xpc_connection_send_message_with_reply(v14, v13, v10, handler);

}

void MRMediaRemoteServiceTriggerAudioFade(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteServiceTriggerAudioFade_block_invoke;
  v9[3] = &unk_1E30C7E80;
  v10 = v7;
  v8 = v7;
  _MRMediaRemoteServiceProtobuf(a1, 0x40000000000000AuLL, a2, a3, v9);

}

void MRMediaRemoteServiceGetAvailableOrigins(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  _QWORD handler[4];
  id v11;

  v5 = a2;
  v6 = a3;
  kdebug_trace();
  if (v6)
  {
    v7 = a1;
    MRCreateXPCMessage(0x200000000000019uLL);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "connection");
    v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetAvailableOrigins_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v11 = v6;
    xpc_connection_send_message_with_reply(v9, v8, v5, handler);

  }
  else
  {
    kdebug_trace();
  }

}

void MRMediaRemoteServiceSetActiveOrigin(void *a1, void *a2)
{
  id v4;
  _xpc_connection_s *v5;
  xpc_object_t message;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x20000000000001AuLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddOriginToXPCMessage(message, a2);
  objc_msgSend(v4, "connection");
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v5, message);
}

void MRMediaRemoteServiceGetActiveOrigin(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  id v12;

  v5 = a3;
  v6 = a2;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x20000000000001BuLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetActiveOrigin_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v12 = v5;
  v10 = v5;
  xpc_connection_send_message_with_reply(v9, v8, v6, handler);

}

void MRMediaRemoteServiceSetOriginClientProperties(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _xpc_connection_s *v15;
  id v16;
  _QWORD handler[4];
  id v18;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  kdebug_trace();
  v13 = a1;
  MRCreateXPCMessage(0x200000000000036uLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddProtobufToXPCMessage(v14, v11);

  MRAddOriginToXPCMessage(v14, v12);
  objc_msgSend(v13, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetOriginClientProperties_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v18 = v9;
  v16 = v9;
  xpc_connection_send_message_with_reply(v15, v14, v10, handler);

}

void MRMediaRemoteServiceSetWakingPlayerPaths(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  MRCreateXPCMessage(0x200000000000039uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddArrayToXPCMessage(v11, "MRXPC_NOWPLAYING_PLAYER_PATH_ARRAY_DATA_KEY", v9, &__block_literal_global_177);

  objc_msgSend(v10, "mrXPCConnection");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __MRMediaRemoteServiceSetWakingPlayerPaths_block_invoke_2;
  v14[3] = &unk_1E30C6C80;
  v15 = v7;
  v13 = v7;
  objc_msgSend(v12, "sendMessage:queue:reply:", v11, v8, v14);

}

void MRMediaRemoteServiceBeginActivity(void *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  void *v13;
  void *v14;
  _xpc_connection_s *v15;
  _QWORD v16[4];
  id v17;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000003uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  _MRServiceAddAppActivityToXPCMessage(v10, a2);
  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceBeginActivity(MRMediaRemoteServiceRef, MRApplicationActivityRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("MRMediaRemoteService.m"), 1910, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v9, "connection");
    v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v15, v10);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!v7 || !v8)
    goto LABEL_7;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRMediaRemoteServiceBeginActivity_block_invoke;
  v16[3] = &unk_1E30C6748;
  v17 = v8;
  _MRServiceCreateErrorHandlerBlock(v16);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message_with_reply(v12, v10, v7, v11);

LABEL_8:
}

void _MRServiceAddAppActivityToXPCMessage(void *a1, uint64_t a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      v4 = objc_retainAutorelease((id)_MRApplicationActivityCreateExternalRepresentation(a2));
      xpc_dictionary_set_data(v3, "MRXPC_APPLICATION_ACTIVITY_DATA_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

    }
  }
}

void MRMediaRemoteServiceGetCurrentActivity(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  _QWORD handler[4];
  id v11;

  v5 = a2;
  v6 = a3;
  kdebug_trace();
  if (v5 && v6)
  {
    v7 = a1;
    MRCreateXPCMessage(0x200000000000004uLL);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "connection");
    v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetCurrentActivity_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v11 = v6;
    xpc_connection_send_message_with_reply(v9, v8, v5, handler);

  }
  else
  {
    kdebug_trace();
  }

}

void MRMediaRemoteServiceEndActivity(void *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  void *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD handler[4];
  id v16;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x200000000000005uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  _MRServiceAddAppActivityToXPCMessage(v10, a2);
  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceEndActivity(MRMediaRemoteServiceRef, MRApplicationActivityRef, __strong dispatch_queue_t, void (^__strong)(MRMediaRemoteError))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRMediaRemoteService.m"), 1954, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v14, v10);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!v7 || !v8)
    goto LABEL_7;
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceEndActivity_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v8;
  xpc_connection_send_message_with_reply(v11, v10, v7, handler);

LABEL_8:
}

void MRMediaRemoteServiceSetRouteDiscoveryMode(void *a1, unsigned int a2)
{
  id v4;
  _xpc_connection_s *v5;
  xpc_object_t message;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x300000000000001uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(message, "MRXPC_ROUTE_DISCOVERY_MODE_KEY", a2);
  objc_msgSend(v4, "connection");
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v5, message);
}

BOOL MRMediaRemoteServiceSetPickedRoute(void *a1, uint64_t a2, void *a3, unsigned int a4)
{
  id v8;
  void *v9;
  const char *UTF8String;
  id v11;
  _xpc_connection_s *v12;
  xpc_object_t v13;
  _BOOL8 v14;

  kdebug_trace();
  v8 = a1;
  MRCreateXPCMessage(0x300000000000003uLL);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(v9, "MRXPC_ROUTE_OPTIONS_KEY", a4);
  if (a3)
  {
    UTF8String = (const char *)_MRServiceGetUTF8String(a3);
    xpc_dictionary_set_string(v9, "MRXPC_ROUTE_PASSWORD_KEY", UTF8String);
  }
  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", a2, 200, 0, 0);
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    xpc_dictionary_set_data(v9, "MRXPC_ROUTE_DESCRIPTION_DATA_KEY", (const void *)objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));

  }
  objc_msgSend(v8, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  v13 = xpc_connection_send_message_with_reply_sync(v12, v9);

  if (v13 == (xpc_object_t)MEMORY[0x1E0C81258] || v13 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    v14 = 0;
  }
  else
  {
    v14 = xpc_dictionary_get_uint64(v13, "MRXPC_ERROR_CODE_KEY") == 0;
  }
  kdebug_trace();

  return v14;
}

void MRMediaRemoteServiceFindAndPickRoute(void *a1, uint64_t a2, void *a3, unsigned int a4, void *a5, void *a6)
{
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  const char *UTF8String;
  void *RouteUID;
  const char *v17;
  _xpc_connection_s *v18;
  id v19;
  _QWORD handler[4];
  id v21;

  v11 = a6;
  v12 = a5;
  kdebug_trace();
  v13 = a1;
  MRCreateXPCMessage(0x300000000000003uLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(v14, "MRXPC_ROUTE_OPTIONS_KEY", a4);
  if (a3)
  {
    UTF8String = (const char *)_MRServiceGetUTF8String(a3);
    xpc_dictionary_set_string(v14, "MRXPC_ROUTE_PASSWORD_KEY", UTF8String);
  }
  RouteUID = (void *)MRAVRouteQueryGetRouteUID(a2);
  if (RouteUID)
  {
    v17 = (const char *)_MRServiceGetUTF8String(RouteUID);
    xpc_dictionary_set_string(v14, "MRXPC_ROUTE_UID_KEY", v17);
  }
  objc_msgSend(v13, "connection");
  v18 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceFindAndPickRoute_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v21 = v11;
  v19 = v11;
  xpc_connection_send_message_with_reply(v18, v14, v12, handler);

}

id _MRServiceCreateGenericErrorFromReply(void *a1)
{
  void *Error;

  Error = (void *)_MRServiceGenericErrorCodeFromReply(a1);
  if (Error)
    Error = (void *)MRMediaRemoteCreateError((uint64_t)Error);
  return Error;
}

int64_t MRMediaRemoteServiceGetPickedRouteVolumeControlCapabilitiesSync(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int64_t int64;
  uint64_t v13;

  v5 = a2;
  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x300000000000004uLL);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v7, v5);

  objc_msgSend(v6, "mrXPCConnection");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = 0;
  objc_msgSend(v8, "sendSyncMessage:error:", v7, &v13);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v13;

  if (a3)
    *a3 = v10;
  if (v9 == (void *)MEMORY[0x1E0C81258] || v9 == (void *)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    int64 = 0;
  }
  else
  {
    int64 = xpc_dictionary_get_int64(v9, "MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY");
  }
  kdebug_trace();

  return int64;
}

void MRMediaRemoteServiceSetPickedRouteVolumeControlCapabilities(void *a1, void *a2, int a3, void *a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  _xpc_connection_s *v13;
  void *v14;
  void *v15;
  _xpc_connection_s *v16;
  _QWORD handler[4];
  id v18;

  v9 = a4;
  v10 = a5;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x300000000000005uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v12, a2);
  xpc_dictionary_set_int64(v12, "MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY", a3);
  if (v10 && !v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceSetPickedRouteVolumeControlCapabilities(MRMediaRemoteServiceRef, MRNowPlayingPlayerPathRef, MRVolumeControlCapabilities, __strong dispatch_queue_t, void (^__strong)(MRMediaRemoteError))");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRMediaRemoteService.m"), 2127, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v11, "connection");
    v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v16, v12);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!v9 || !v10)
    goto LABEL_7;
  objc_msgSend(v11, "connection");
  v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetPickedRouteVolumeControlCapabilities_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v18 = v10;
  xpc_connection_send_message_with_reply(v13, v12, v9, handler);

LABEL_8:
}

uint64_t _MRServiceGenericErrorCodeFromReply(void *a1)
{
  if (a1 != (void *)MEMORY[0x1E0C81258] && a1 != (void *)MEMORY[0x1E0C81260])
    return MRErrorFromXPCMessage(a1);
  _MRServiceLogReplyError();
  return 1;
}

void MRMediaRemoteServiceGetSavedAVRoutePassword(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  const char *UTF8String;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x300000000000007uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  UTF8String = (const char *)_MRServiceGetUTF8String(a2);
  xpc_dictionary_set_string(v10, "MRXPC_ROUTE_NAME_KEY", UTF8String);
  objc_msgSend(v9, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetSavedAVRoutePassword_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v10, v8, handler);

}

void MRMediaRemoteServiceSetSavedAVRoutePassword(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  const char *UTF8String;
  const char *v14;
  _xpc_connection_s *v15;
  void *v16;
  void *v17;
  _xpc_connection_s *v18;
  _QWORD handler[4];
  id v20;

  v9 = a4;
  v10 = a5;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x300000000000008uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  UTF8String = (const char *)_MRServiceGetUTF8String(a2);
  xpc_dictionary_set_string(v12, "MRXPC_ROUTE_NAME_KEY", UTF8String);
  v14 = (const char *)_MRServiceGetUTF8String(a3);
  xpc_dictionary_set_string(v12, "MRXPC_ROUTE_PASSWORD_KEY", v14);
  if (v10 && !v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceSetSavedAVRoutePassword(MRMediaRemoteServiceRef, CFStringRef, CFStringRef, __strong dispatch_queue_t, void (^__strong)(MRMediaRemoteError))");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("MRMediaRemoteService.m"), 2194, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v11, "connection");
    v18 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v18, v12);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!v9 || !v10)
    goto LABEL_7;
  objc_msgSend(v11, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetSavedAVRoutePassword_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v20 = v10;
  xpc_connection_send_message_with_reply(v15, v12, v9, handler);

LABEL_8:
}

void MRMediaRemoteServiceClearAllAVRoutePasswords(void *a1)
{
  id v1;
  _xpc_connection_s *v2;
  xpc_object_t v3;
  xpc_object_t message;

  v1 = a1;
  MRCreateXPCMessage(0x300000000000009uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "connection");
  v2 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v3 = xpc_connection_send_message_with_reply_sync(v2, message);
}

void MRMediaRemoteServiceUnpickAirPlayAVRoutes(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  _xpc_connection_s *v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  NSObject *replyq;

  replyq = a2;
  v5 = a3;
  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x30000000000000AuLL);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && !replyq)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceUnpickAirPlayAVRoutes(MRMediaRemoteServiceRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRMediaRemoteService.m"), 2226, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v6, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v12, v7);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!replyq || !v5)
    goto LABEL_7;
  _MRServiceCreateErrorHandlerBlock(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message_with_reply(v9, v7, replyq, v8);

  kdebug_trace();
LABEL_8:

}

void MRMediaRemoteServiceSetApplicationPickedRoutes(void *a1, uint64_t a2, BOOL a3)
{
  id v6;
  _xpc_connection_s *v7;
  xpc_object_t xdict;

  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x30000000000000BuLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(xdict, a2, "MRXPC_ROUTES_DATA_KEY");
  xpc_dictionary_set_BOOL(xdict, "MRXPC_ROUTE_OPTIONS_KEY", a3);
  objc_msgSend(v6, "connection");
  v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v7, xdict);
}

void MRMediaRemoteServiceGetReceiverAirPlaySecuritySettings(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  _QWORD handler[4];
  id v11;

  v5 = a2;
  v6 = a3;
  kdebug_trace();
  if (v5 && v6)
  {
    v7 = a1;
    MRCreateXPCMessage(0x30000000000000CuLL);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "connection");
    v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetReceiverAirPlaySecuritySettings_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v11 = v6;
    xpc_connection_send_message_with_reply(v9, v8, v5, handler);

  }
  else
  {
    kdebug_trace();
  }

}

id MRMediaRemoteServiceGetExternalDevice(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  _BOOL4 v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  _BOOL4 v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v37;
  uint8_t buf[4];
  const __CFString *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("getExternalDevice"), v8);
  v10 = v9;
  if (v5)
    -[__CFString appendFormat:](v9, "appendFormat:", CFSTR(" for %@"), v5);
  _MRLogForCategory(0xAuLL);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v39 = v10;
    _os_log_impl(&dword_193827000, v11, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v12 = a1;
  MRCreateXPCMessage(0x30000000000001DuLL);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddEndpointUIDToXPCMessage(v13, v5);
  objc_msgSend(v12, "mrXPCConnection");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v37 = 0;
  objc_msgSend(v14, "sendSyncMessage:error:", v13, &v37);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v37;

  if (a3)
    *a3 = objc_retainAutorelease(v16);
  MRCreateDistantExternalDeviceFromXPCMessage(v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  _MRLogForCategory(0xAuLL);
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (!v16 && v17)
  {
    v20 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v20)
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "timeIntervalSinceDate:", v6);
        *(_DWORD *)buf = 138544386;
        v39 = CFSTR("getExternalDevice");
        v40 = 2114;
        v41 = v8;
        v42 = 2112;
        v43 = v17;
        v44 = 2114;
        v45 = v5;
        v46 = 2048;
        v47 = v22;
        v23 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        v24 = v19;
        v25 = 52;
LABEL_22:
        _os_log_impl(&dword_193827000, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
LABEL_23:

        goto LABEL_29;
      }
      goto LABEL_29;
    }
    if (!v20)
      goto LABEL_29;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceDate:", v6);
    *(_DWORD *)buf = 138544130;
    v39 = CFSTR("getExternalDevice");
    v40 = 2114;
    v41 = v8;
    v42 = 2112;
    v43 = v17;
    v44 = 2048;
    v45 = v33;
    v23 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_21:
    v24 = v19;
    v25 = 42;
    goto LABEL_22;
  }
  if (v16)
  {
    v26 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (!v26)
        goto LABEL_29;
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "timeIntervalSinceDate:", v6);
      *(_DWORD *)buf = 138544386;
      v39 = CFSTR("getExternalDevice");
      v40 = 2114;
      v41 = v8;
      v42 = 2114;
      v43 = v16;
      v44 = 2114;
      v45 = v5;
      v46 = 2048;
      v47 = v27;
      v28 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      v29 = v19;
      v30 = 52;
    }
    else
    {
      if (!v26)
        goto LABEL_29;
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "timeIntervalSinceDate:", v6);
      *(_DWORD *)buf = 138544130;
      v39 = CFSTR("getExternalDevice");
      v40 = 2114;
      v41 = v8;
      v42 = 2114;
      v43 = v16;
      v44 = 2048;
      v45 = v34;
      v28 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
      v29 = v19;
      v30 = 42;
    }
    _os_log_error_impl(&dword_193827000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
    goto LABEL_23;
  }
  v31 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  if (!v5)
  {
    if (!v31)
      goto LABEL_29;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceDate:", v6);
    *(_DWORD *)buf = 138543874;
    v39 = CFSTR("getExternalDevice");
    v40 = 2114;
    v41 = v8;
    v42 = 2048;
    v43 = v35;
    v23 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    v24 = v19;
    v25 = 32;
    goto LABEL_22;
  }
  if (v31)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceDate:", v6);
    *(_DWORD *)buf = 138544130;
    v39 = CFSTR("getExternalDevice");
    v40 = 2114;
    v41 = v8;
    v42 = 2114;
    v43 = v5;
    v44 = 2048;
    v45 = v32;
    v23 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_21;
  }
LABEL_29:

  return v17;
}

void MRMediaRemoteServicePromptRouteAuthorization(void *a1, void *a2, void *a3, void *a4)
{
  _MRMediaRemoteServiceProtobuf(a1, 0x300000000000014uLL, a2, a3, a4);
}

void MRMediaRemoteServicePresentRouteAuthorizationStatus(void *a1, void *a2, void *a3, void *a4)
{
  _MRMediaRemoteServiceProtobuf(a1, 0x300000000000015uLL, a2, a3, a4);
}

void MRMediaRemoteServiceSetNearbyDevice(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a1;
  v9 = a3;
  v10 = a2;
  MRCreateXPCMessage(0x30000000000001AuLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v11, v10, "MRXPC_ROUTE_UID_KEY");

  objc_msgSend(v8, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceSetNearbyDevice_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v9, handler);

}

void MRMediaRemoteServiceMigrateFromEndpointToOutputDevices(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _xpc_connection_s *v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;

  v11 = a4;
  v12 = a6;
  v13 = a1;
  v14 = a5;
  v15 = a3;
  v16 = a2;
  MRCreateXPCMessage(0x300000000000026uLL);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "mr_map:", &__block_literal_global_210);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  MSVArchivedDataWithRootObject();
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  MRAddStringToXPCMessage(v17, v16, "MRXPC_SOURCE_ENDPOINT_UID_KEY");
  objc_msgSend(v11, "protobufData");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddDataToXPCMessage(v17, v20, "MRXPC_MIGRATE_REQUEST_DATA_KEY");

  MRAddDataToXPCMessage(v17, v19, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  kdebug_trace();
  objc_msgSend(v13, "connection");
  v21 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __MRMediaRemoteServiceMigrateFromEndpointToOutputDevices_block_invoke_2;
  v24[3] = &unk_1E30C7D70;
  v25 = v11;
  v26 = v12;
  v22 = v12;
  v23 = v11;
  xpc_connection_send_message_with_reply(v21, v17, v14, v24);

}

void MRMediaRemoteServiceMigrateFromEndpointToEndpoint(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  _xpc_connection_s *v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;

  v11 = a4;
  v12 = a6;
  v13 = a1;
  v14 = a5;
  v15 = a3;
  v16 = a2;
  MRCreateXPCMessage(0x300000000000027uLL);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v17, v16, "MRXPC_SOURCE_ENDPOINT_UID_KEY");

  MRAddStringToXPCMessage(v17, v15, "MRXPC_DESTINATION_ENDPOINT_UID_KEY");
  objc_msgSend(v11, "protobufData");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddDataToXPCMessage(v17, v18, "MRXPC_MIGRATE_REQUEST_DATA_KEY");

  kdebug_trace();
  objc_msgSend(v13, "connection");
  v19 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __MRMediaRemoteServiceMigrateFromEndpointToEndpoint_block_invoke;
  v22[3] = &unk_1E30C7D70;
  v23 = v11;
  v24 = v12;
  v20 = v12;
  v21 = v11;
  xpc_connection_send_message_with_reply(v19, v17, v14, v22);

}

void MRMediaRemoteServiceSetMediaPlaybackVolume(void *a1, unsigned int a2, void *a3, void *a4, float a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  _xpc_connection_s *v14;
  _xpc_connection_s *v15;
  _QWORD v16[4];
  id v17;

  v9 = a3;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x100000000000005uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_double(v12, "MRXPC_VOLUME_VALUE_KEY", a5);
  xpc_dictionary_set_uint64(v12, "MRXPC_VOLUME_OPTIONS_KEY", a2);
  if (v9 && v10)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __MRMediaRemoteServiceSetMediaPlaybackVolume_block_invoke;
    v16[3] = &unk_1E30C6748;
    v17 = v10;
    _MRServiceCreateErrorHandlerBlock(v16);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v14, v12, v9, v13);

  }
  else
  {
    objc_msgSend(v11, "connection");
    v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v15, v12);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceAdjustMediaPlaybackVolume(void *a1, unsigned int a2, void *a3, void *a4, float a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  _xpc_connection_s *v14;
  _xpc_connection_s *v15;
  _QWORD v16[4];
  id v17;

  v9 = a3;
  v10 = a4;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x100000000000006uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_double(v12, "MRXPC_VOLUME_VALUE_KEY", a5);
  xpc_dictionary_set_uint64(v12, "MRXPC_VOLUME_OPTIONS_KEY", a2);
  if (v9 && v10)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __MRMediaRemoteServiceAdjustMediaPlaybackVolume_block_invoke;
    v16[3] = &unk_1E30C6748;
    v17 = v10;
    _MRServiceCreateErrorHandlerBlock(v16);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v14, v12, v9, v13);

  }
  else
  {
    objc_msgSend(v11, "connection");
    v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v15, v12);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceAdjustMediaPlaybackVolumeWithAdjustment(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  MRAdjustVolumeMessage *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v8 = a5;
  v9 = a4;
  v10 = a1;
  v11 = -[MRAdjustVolumeMessage initWithAdjustment:outputDeviceUID:details:]([MRAdjustVolumeMessage alloc], "initWithAdjustment:outputDeviceUID:details:", a2, 0, 0);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRMediaRemoteServiceAdjustMediaPlaybackVolumeWithAdjustment_block_invoke;
  v13[3] = &unk_1E30C7E80;
  v14 = v8;
  v12 = v8;
  _MRMediaRemoteServiceProtobuf(v10, 0x10000000000001AuLL, v11, v9, v13);

}

void MRMediaRemoteServiceSetSystemIsMuted(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  MRMuteVolumeMessage *v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v7 = a4;
  v8 = a3;
  v9 = a1;
  v10 = -[MRMuteVolumeMessage initWithMuted:outputDeviceUID:details:]([MRMuteVolumeMessage alloc], "initWithMuted:outputDeviceUID:details:", a2, 0, 0);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __MRMediaRemoteServiceSetSystemIsMuted_block_invoke;
  v12[3] = &unk_1E30C7E80;
  v13 = v7;
  v11 = v7;
  _MRMediaRemoteServiceProtobuf(v9, 0x100000000000007uLL, v10, v8, v12);

}

void MRMediaRemoteServiceGetGameControllerRemoteInputMode(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  _QWORD handler[4];
  id v11;

  v5 = a2;
  v6 = a3;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x600000000000001uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  if (v5 && v6)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetGameControllerRemoteInputMode_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v11 = v6;
    xpc_connection_send_message_with_reply(v9, v8, v5, handler);

  }
  else
  {
    xpc_connection_send_message(v9, v8);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceSetGameControllerRemoteInputMode(void *a1, unsigned int a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  _QWORD v14[4];
  id v15;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x600000000000002uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(v10, "MRXPC_GAMECONTROLLER_INPUT_MODE_KEY", a2);
  if (v7 && v8)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __MRMediaRemoteServiceSetGameControllerRemoteInputMode_block_invoke;
    v14[3] = &unk_1E30C6748;
    v15 = v8;
    _MRServiceCreateErrorHandlerBlock(v14);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v12, v10, v7, v11);

  }
  else
  {
    objc_msgSend(v9, "connection");
    v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v13, v10);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceTelevisionServerDeletePairingIdentity(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  _xpc_connection_s *v10;
  _xpc_connection_s *v11;
  _QWORD v12[4];
  id v13;

  v5 = a2;
  v6 = a3;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x600000000000003uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && v6)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __MRMediaRemoteServiceTelevisionServerDeletePairingIdentity_block_invoke;
    v12[3] = &unk_1E30C6748;
    v13 = v6;
    _MRServiceCreateErrorHandlerBlock(v12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "connection");
    v10 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v10, v8, v5, v9);

  }
  else
  {
    objc_msgSend(v7, "connection");
    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v11, v8);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceTelevisionGetPairedDevices(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  _QWORD handler[4];
  id v11;

  v5 = a2;
  v6 = a3;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x600000000000004uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  if (v5 && v6)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceTelevisionGetPairedDevices_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v11 = v6;
    xpc_connection_send_message_with_reply(v9, v8, v5, handler);

  }
  else
  {
    xpc_connection_send_message(v9, v8);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceTelevisionDeletePairedDevice(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  const char *UTF8String;
  void *v12;
  _xpc_connection_s *v13;
  _xpc_connection_s *v14;
  _QWORD v15[4];
  id v16;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x600000000000005uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  UTF8String = (const char *)_MRServiceGetUTF8String(a2);
  xpc_dictionary_set_string(v10, "MRXPC_PAIRED_EXTERNAL_DEVICE", UTF8String);
  if (v7 && v8)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteServiceTelevisionDeletePairedDevice_block_invoke;
    v15[3] = &unk_1E30C6748;
    v16 = v8;
    _MRServiceCreateErrorHandlerBlock(v15);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v13, v10, v7, v12);

  }
  else
  {
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v14, v10);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceTelevisionSetMessageLogging(void *a1, BOOL a2)
{
  id v4;
  _xpc_connection_s *v5;
  xpc_object_t message;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x600000000000006uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_BOOL(message, "MRXPC_EXTERNAL_DEVICE_LOGGING_KEY", a2);
  objc_msgSend(v4, "connection");
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v5, message);
}

void MRMediaRemoteServiceTelevisionSendCustomData(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _xpc_connection_s *v7;
  xpc_object_t message;

  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x60000000000000AuLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(message, a2, "MRXPC_CUSTOM_DATA_NAME_KEY");
  MRAddPropertyListToXPCMessage(message, a3, "MRXPC_CUSTOM_DATA_KEY");
  objc_msgSend(v6, "connection");
  v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v7, message);
}

id MRMediaRemoteServiceCopyDeviceInfo(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _xpc_connection_s *v6;
  xpc_object_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v12;
  void *v13;

  v3 = a2;
  if (MRProcessIsMediaRemoteDaemon())
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRDeviceInfo *MRMediaRemoteServiceCopyDeviceInfo(MRMediaRemoteServiceRef, MRPlayerPath *__strong)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRMediaRemoteService.m"), 2645, CFSTR("Trying to call CopyDeviceInfo from Daemon"));

  }
  v4 = a1;
  MRCreateXPCMessage(0x20000000000002CuLL);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPlayerPathToXPCMessage(v5, v3);

  objc_msgSend(v4, "connection");
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v7 = xpc_connection_send_message_with_reply_sync(v6, v5);
  if (v7 == (xpc_object_t)MEMORY[0x1E0C81258] || v7 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    v8 = 0;
  }
  else
  {
    MRCreateDeviceInfoFromXPCMessage(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MRCreateClientErrorFromXPCMessage(v5);
    if (objc_msgSend(v9, "code") == 3 && MSVDeviceOSIsInternalInstall())
    {
      _MRLogForCategory(0);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        __68__MRMediaRemoteService_getDeviceInfoForPlayerPath_queue_completion___block_invoke_cold_1();

    }
  }

  return v8;
}

void MRMediaRemoteServiceSetRecentAVOutputDeviceUID(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  const char *UTF8String;
  void *v12;
  _xpc_connection_s *v13;
  void *v14;
  void *v15;
  _xpc_connection_s *v16;
  _QWORD v17[4];
  id v18;

  v7 = a2;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x30000000000000EuLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  UTF8String = (const char *)_MRServiceGetUTF8String(a3);
  xpc_dictionary_set_string(v10, "MRXPC_ROUTE_UID_KEY", UTF8String);
  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceSetRecentAVOutputDeviceUID(MRMediaRemoteServiceRef, __strong dispatch_queue_t, CFStringRef, void (^__strong)(CFErrorRef))");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRMediaRemoteService.m"), 2695, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v9, "connection");
    v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v16, v10);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!v7 || !v8)
    goto LABEL_7;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __MRMediaRemoteServiceSetRecentAVOutputDeviceUID_block_invoke;
  v17[3] = &unk_1E30C6748;
  v18 = v8;
  _MRServiceCreateErrorHandlerBlock(v17);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "connection");
  v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message_with_reply(v13, v10, v7, v12);

LABEL_8:
}

void MRMediaRemoteServiceGetRecentAVOutputDeviceUIDs(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  id v12;

  v5 = a3;
  v6 = a2;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x30000000000000FuLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetRecentAVOutputDeviceUIDs_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v12 = v5;
  v10 = v5;
  xpc_connection_send_message_with_reply(v9, v8, v6, handler);

}

void MRMediaRemoteServiceUpdateActiveSystemEndpointUID(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRMediaRemoteServiceUpdateActiveSystemEndpointUID_block_invoke;
  v11[3] = &unk_1E30C7E80;
  v12 = v7;
  v10 = v7;
  _MRMediaRemoteServiceProtobuf(a1, 0x300000000000011uLL, v9, v8, v11);

}

void MRMediaRemoteServiceSetNearbyDevicesToRemoteControl(void *a1, void *a2)
{
  id v3;
  id v4;
  _xpc_connection_s *v5;
  xpc_object_t message;

  v3 = a2;
  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0x300000000000022uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(message, v3, "MRXPC_HOMEKIT_IDENTIFIER_KEY");

  objc_msgSend(v4, "connection");
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v5, message);
  kdebug_trace();

}

void MRMediaRemoteServiceCreateDirectEndpointForDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  void *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD handler[4];
  id v16;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  MRCreateXPCMessage(0x300000000000021uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(v10, a2, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceCreateDirectEndpointForDevices(MRMediaRemoteServiceRef, CFArrayRef, __strong dispatch_queue_t, void (^__strong)(MRAVEndpoint *__strong, NSError *__strong))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRMediaRemoteService.m"), 2779, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v14, v10);

    goto LABEL_8;
  }
  if (!v7 || !v8)
    goto LABEL_7;
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceCreateDirectEndpointForDevices_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v8;
  xpc_connection_send_message_with_reply(v11, v10, v7, handler);

LABEL_8:
}

void MRMediaRemoteServiceCreateHostedEndpointForDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  void *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD handler[4];
  id v16;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  MRCreateXPCMessage(0x300000000000029uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(v10, a2, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceCreateHostedEndpointForDevices(MRMediaRemoteServiceRef, CFArrayRef, __strong dispatch_queue_t, void (^__strong)(MRAVEndpoint *__strong, NSError *__strong))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRMediaRemoteService.m"), 2798, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v14, v10);

    goto LABEL_8;
  }
  if (!v7 || !v8)
    goto LABEL_7;
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceCreateHostedEndpointForDevices_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v8;
  xpc_connection_send_message_with_reply(v11, v10, v7, handler);

LABEL_8:
}

void MRMediaRemoteServiceCreateGroupWithDevicesLeaderOptions(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  _xpc_connection_s *v13;
  void *v14;
  void *v15;
  _xpc_connection_s *v16;
  _QWORD handler[4];
  id v18;

  v9 = a3;
  v10 = a5;
  v11 = a1;
  MRCreateXPCMessage(0x300000000000020uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(v12, a2, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  xpc_dictionary_set_uint64(v12, "MRXPC_ENDPOINT_LEADER_OPTIONS_KEY", a4);
  if (v10 && !v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceCreateGroupWithDevicesLeaderOptions(MRMediaRemoteServiceRef, CFArrayRef, __strong dispatch_queue_t, MRGroupLeaderSelectionAdditionalOptions, void (^__strong)(NSString *__strong, NSError *__strong))");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRMediaRemoteService.m"), 2818, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v11, "connection");
    v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v16, v12);

    goto LABEL_8;
  }
  if (!v9 || !v10)
    goto LABEL_7;
  objc_msgSend(v11, "connection");
  v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceCreateGroupWithDevicesLeaderOptions_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v18 = v10;
  xpc_connection_send_message_with_reply(v13, v12, v9, handler);

LABEL_8:
}

void MRMediaRemoteServiceGroupDevicesAndSendCommand(void *a1, uint64_t a2, void **a3, void *a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  _xpc_connection_s *v13;
  void *v14;
  void *v15;
  _xpc_connection_s *v16;
  _QWORD handler[4];
  id v18;

  v9 = a4;
  v10 = a5;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x300000000000017uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(v12, a2, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  MRAddSendCommandToXPCMessage(v12, a3);
  if (v10 && !v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceGroupDevicesAndSendCommand(MRMediaRemoteServiceRef, CFArrayRef, const MRServiceSendCommand *, __strong dispatch_queue_t, void (^__strong)(MRSendCommandError, NSError *__strong, NSString *__strong, NSArray<MRSendCommandResultStatus *> *__strong))");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRMediaRemoteService.m"), 2843, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v11, "connection");
    v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v16, v12);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!v9 || !v10)
    goto LABEL_7;
  objc_msgSend(v11, "connection");
  v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGroupDevicesAndSendCommand_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v18 = v10;
  xpc_connection_send_message_with_reply(v13, v12, v9, handler);

LABEL_8:
}

void MRMediaRemoteServicePredictGroupLeader(void *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  void (**v8)(id, const void *, _QWORD);
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  const void *Error;
  void *v13;
  void *v14;
  _QWORD handler[4];
  void (**v16)(id, const void *, _QWORD);

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x300000000000019uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(v10, a2, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServicePredictGroupLeader(MRMediaRemoteServiceRef, CFArrayRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef, CFStringRef))");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("MRMediaRemoteService.m"), 2868, CFSTR("Completion block was provided but without a queue"));

    goto LABEL_7;
  }
  if (!v7 || !v8)
  {
    if (!v8)
      goto LABEL_8;
LABEL_7:
    Error = (const void *)MRMediaRemoteCreateError(1);
    v8[2](v8, Error, 0);
    CFRelease(Error);
    kdebug_trace();
    goto LABEL_8;
  }
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServicePredictGroupLeader_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v8;
  xpc_connection_send_message_with_reply(v11, v10, v7, handler);

LABEL_8:
}

void MRMediaRemoteServiceRemoveFromParentGroup(void *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  void *v12;
  void *v13;
  _xpc_connection_s *v14;
  _QWORD handler[4];
  id v16;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  MRCreateXPCMessage(0x300000000000018uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(v10, a2, "MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY");
  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceRemoveFromParentGroup(MRMediaRemoteServiceRef, CFArrayRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRMediaRemoteService.m"), 2891, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v9, "connection");
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v14, v10);

    goto LABEL_8;
  }
  if (!v7 || !v8)
    goto LABEL_7;
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRemoveFromParentGroup_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v16 = v8;
  xpc_connection_send_message_with_reply(v11, v10, v7, handler);

LABEL_8:
}

void MRMediaRemoteServiceResetOutputContext(void *a1, void *a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  void *v13;
  void *v14;
  _xpc_connection_s *v15;
  _QWORD handler[4];
  id v17;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  v10 = a2;
  MRCreateXPCMessage(0x30000000000001CuLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v11, v10, "requestID");

  if (v8 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceResetOutputContext(MRMediaRemoteServiceRef, NSString *__strong, __strong dispatch_queue_t, void (^__strong)(NSError *__strong))");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("MRMediaRemoteService.m"), 2913, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v9, "connection");
    v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v15, v11);

    goto LABEL_8;
  }
  if (!v7 || !v8)
    goto LABEL_7;
  objc_msgSend(v9, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceResetOutputContext_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v17 = v8;
  xpc_connection_send_message_with_reply(v12, v11, v7, handler);

LABEL_8:
}

id MRMediaRemoteServiceAddVirtualOutputDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  xpc_object_t v10;
  uint64_t Error;
  void *v12;

  v5 = a1;
  v6 = a3;
  v7 = a2;
  MRCreateXPCMessage(0x30000000000001EuLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v8, v7, "MRXPC_JSON_DATA_BLOCK");

  xpc_dictionary_set_value(v8, "MRXPC_CUSTOM_XPC_ENDPOINT_KEY", v6);
  objc_msgSend(v5, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v10 = xpc_connection_send_message_with_reply_sync(v9, v8);
  if (v10 == (xpc_object_t)MEMORY[0x1E0C81258] || v10 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    _MRServiceLogReplyError();
    Error = MRMediaRemoteCreateError(1);
  }
  else
  {
    Error = MRCreateClientErrorFromXPCMessage(v10);
  }
  v12 = (void *)Error;

  return v12;
}

id MRMediaRemoteServiceCopyVirtualOutputDevices(void *a1)
{
  id v2;
  void *v3;
  _xpc_connection_s *v4;
  xpc_object_t v5;
  void *v6;
  id v7;
  void *v9;
  void *v10;

  if (MRProcessIsMediaRemoteDaemon())
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSArray<MRAVVirtualOutputDevice *> *MRMediaRemoteServiceCopyVirtualOutputDevices(MRMediaRemoteServiceRef)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MRMediaRemoteService.m"), 2951, CFSTR("Trying to call CopyVirtualOutputDevices from Daemon"));

  }
  v2 = a1;
  MRCreateXPCMessage(0x30000000000001FuLL);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "connection");
  v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v5 = xpc_connection_send_message_with_reply_sync(v4, v3);
  v6 = 0;
  if (v5 != (xpc_object_t)MEMORY[0x1E0C81258] && v5 != (xpc_object_t)MEMORY[0x1E0C81260])
    v6 = (void *)MRCreateArrayFomXPCMessage(v5, "MRXPC_JSON_DATA_BLOCK", &__block_literal_global_236);
  v7 = v6;

  return v7;
}

uint64_t MRMediaRemoteServiceSupportsSystemPairing(void *a1)
{
  id v2;
  void *v3;
  dispatch_semaphore_t v4;
  _xpc_connection_s *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v10[4];
  NSObject *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  kdebug_trace();
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v2 = a1;
  MRCreateXPCMessage(0x10000000000000DuLL);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = dispatch_semaphore_create(0);
  objc_msgSend(v2, "connection");
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  dispatch_get_global_queue(0, 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __MRMediaRemoteServiceSupportsSystemPairing_block_invoke;
  v10[3] = &unk_1E30C7F28;
  v12 = &v13;
  v7 = v4;
  v11 = v7;
  xpc_connection_send_message_with_reply(v5, v3, v6, v10);

  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
  kdebug_trace();
  v8 = *((unsigned __int8 *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_1938F40F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRMediaRemoteServiceVirtualVoiceGetDevices(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  _xpc_connection_s *v9;
  id v10;
  _QWORD handler[4];
  id v12;

  v5 = a3;
  v6 = a2;
  kdebug_trace();
  v7 = a1;
  MRCreateXPCMessage(0x900000000000001uLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceVirtualVoiceGetDevices_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v12 = v5;
  v10 = v5;
  xpc_connection_send_message_with_reply(v9, v8, v6, handler);

}

void MRMediaRemoteServiceVirtualVoiceRegisterDevice(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  void *ExternalRepresentation;
  void *v12;
  id v13;
  _xpc_connection_s *v14;
  id v15;
  _QWORD handler[4];
  id v17;

  v7 = a4;
  v8 = a3;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x900000000000002uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  ExternalRepresentation = (void *)MRVirtualVoiceInputDeviceDescriptorCreateExternalRepresentation(a2);
  v12 = ExternalRepresentation;
  if (ExternalRepresentation)
  {
    v13 = objc_retainAutorelease(ExternalRepresentation);
    xpc_dictionary_set_data(v10, "MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY", (const void *)objc_msgSend(v13, "bytes"), objc_msgSend(v13, "length"));
  }
  objc_msgSend(v9, "connection");
  v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceVirtualVoiceRegisterDevice_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v17 = v7;
  v15 = v7;
  xpc_connection_send_message_with_reply(v14, v10, v8, handler);

}

void MRMediaRemoteServiceVirtualVoiceUnregisterDevice(void *a1, unsigned int a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  _QWORD v14[4];
  id v15;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x900000000000003uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(v10, "MRXPC_VOICE_INPUT_DEVICE_ID_KEY", a2);
  if (v7 && v8)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __MRMediaRemoteServiceVirtualVoiceUnregisterDevice_block_invoke;
    v14[3] = &unk_1E30C6748;
    v15 = v8;
    _MRServiceCreateErrorHandlerBlock(v14);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v12, v10, v7, v11);

  }
  else
  {
    objc_msgSend(v9, "connection");
    v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v13, v10);

    kdebug_trace();
  }

}

void MRMediaRemoteServiceVirtualVoiceProcessAudioData(void *a1, unsigned int a2, const char *a3, double a4, double a5, float a6)
{
  id v12;
  MRMutableAudioDataBlock *v13;
  id v14;
  _xpc_connection_s *v15;
  xpc_object_t xdict;

  kdebug_trace();
  v12 = a1;
  MRCreateXPCMessage(0x900000000000005uLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(xdict, "MRXPC_VOICE_INPUT_DEVICE_ID_KEY", a2);
  v13 = MRAudioDataBlockCreate();
  MRAudioDataBlockSetBuffer(v13, a3);
  MRAudioDataBlockSetTimestamp(v13, a4, a5);
  MRAudioDataBlockSetGain(v13, a6);
  v14 = objc_retainAutorelease((id)MRAudioDataBlockCreateExternalRepresentation(v13));
  xpc_dictionary_set_data(xdict, "MRXPC_VOICE_DATA_PROTOBUF_DATA_KEY", (const void *)objc_msgSend(v14, "bytes"), objc_msgSend(v14, "length"));
  objc_msgSend(v12, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v15, xdict);
}

void MRMediaRemoteServiceVirtualVoiceSetRecordingState(void *a1, unsigned int a2, unsigned int a3, void *a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  _xpc_connection_s *v14;
  void *v15;
  void *v16;
  _xpc_connection_s *v17;
  _QWORD v18[4];
  id v19;

  v9 = a4;
  v10 = a5;
  kdebug_trace();
  v11 = a1;
  MRCreateXPCMessage(0x900000000000004uLL);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(v12, "MRXPC_VOICE_INPUT_DEVICE_ID_KEY", a2);
  xpc_dictionary_set_uint64(v12, "MRXPC_VOICE_RECORDING_STATE", a3);
  if (v10 && !v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteServiceVirtualVoiceSetRecordingState(MRMediaRemoteServiceRef, MRVirtualVoiceInputDeviceID, MRVoiceRecordingState, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("MRMediaRemoteService.m"), 3109, CFSTR("Completion block was provided but without a queue"));

LABEL_7:
    objc_msgSend(v11, "connection");
    v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v17, v12);

    kdebug_trace();
    goto LABEL_8;
  }
  if (!v9 || !v10)
    goto LABEL_7;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __MRMediaRemoteServiceVirtualVoiceSetRecordingState_block_invoke;
  v18[3] = &unk_1E30C6748;
  v19 = v10;
  _MRServiceCreateErrorHandlerBlock(v18);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "connection");
  v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  xpc_connection_send_message_with_reply(v14, v12, v9, v13);

LABEL_8:
}

void MRMediaRemoteServiceAgentNotifyCallChanged(void *a1, uint64_t a2)
{
  id v4;
  _xpc_connection_s *v5;
  xpc_object_t message;

  kdebug_trace();
  v4 = a1;
  MRCreateXPCMessage(0xA00000000000001uLL);
  message = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddPropertyListToXPCMessage(message, a2, "MRXPC_AGENT_CALL_ID_KEY");
  objc_msgSend(v4, "connection");
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v5, message);
}

void MRMediaRemoteServiceCollectDiagnostic(void *a1, void *a2, void *a3)
{
  _MRMediaRemoteServiceCollectDiagnosticWithXPCMessage(0x10000000000000EuLL, a1, a2, a3);
}

void _MRMediaRemoteServiceCollectDiagnosticWithXPCMessage(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  _xpc_connection_s *v12;
  _QWORD handler[4];
  id v14;

  v7 = a4;
  v8 = v7;
  if (a3 && v7)
  {
    v9 = a2;
    v10 = a3;
    MRCreateXPCMessage(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = ___MRMediaRemoteServiceCollectDiagnosticWithXPCMessage_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v14 = v8;
    xpc_connection_send_message_with_reply(v12, v11, v10, handler);

  }
}

void MRMediaRemoteServiceCollectClientDiagnostics(void *a1, void *a2, void *a3)
{
  _MRMediaRemoteServiceCollectDiagnosticWithXPCMessage(0x10000000000000FuLL, a1, a2, a3);
}

void MRMediaRemoteServicePostNotification(void *a1, void *a2, void *a3)
{
  id v6;
  const char *UTF8String;
  void *v8;
  id v9;
  _xpc_connection_s *v10;
  xpc_object_t xdict;

  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x100000000000003uLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  UTF8String = (const char *)_MRServiceGetUTF8String(a2);
  xpc_dictionary_set_string(xdict, "MRXPC_NOTIFICATION_NAME_KEY", UTF8String);
  MRCreateEncodedUserInfo(a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v8, 200, 0, 0);
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  xpc_dictionary_set_data(xdict, "MRXPC_NOTIFICATION_USERINFO_DATA_KEY", (const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"));
  objc_msgSend(v6, "connection");
  v10 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v10, xdict);
}

void MRMediaRemoteServicePostDelayedNotification(void *a1, void *a2, double a3)
{
  id v6;
  const char *UTF8String;
  _xpc_connection_s *v8;
  xpc_object_t xdict;

  kdebug_trace();
  v6 = a1;
  MRCreateXPCMessage(0x10000000000000AuLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  UTF8String = (const char *)_MRServiceGetUTF8String(a2);
  xpc_dictionary_set_string(xdict, "MRXPC_NOTIFICATION_NAME_KEY", UTF8String);
  xpc_dictionary_set_double(xdict, "MRXPC_NOTIFICATION_DELAY", a3);
  objc_msgSend(v6, "connection");
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v8, xdict);
}

BOOL MRMediaRemoteServiceIsBooksAppInstalled(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  kdebug_trace();
  objc_msgSend(a1, "mrXPCConnection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(v2, "sendSyncMessageWithType:error:", 0x100000000000016, &v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v7;

  kdebug_trace();
  if (v4)
    v5 = 0;
  else
    v5 = xpc_dictionary_get_BOOL(v3, "MRXPC_APP_INSTALLED_KEY");

  return v5;
}

BOOL MRMediaRemoteServiceSystemMediaAppWake(void *a1)
{
  id v2;
  void *v3;
  _xpc_connection_s *v4;
  xpc_object_t v5;
  _BOOL8 v7;

  kdebug_trace();
  v2 = a1;
  MRCreateXPCMessage(0x100000000000010uLL);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "connection");
  v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v5 = xpc_connection_send_message_with_reply_sync(v4, v3);
  kdebug_trace();
  v7 = v5 != (xpc_object_t)MEMORY[0x1E0C81258]
    && v5 != (xpc_object_t)MEMORY[0x1E0C81260]
    && xpc_dictionary_get_BOOL(v5, "MRXPC_BOOL_RESULT_KEY");

  return v7;
}

void MRMediaRemoteServiceRegisterPairingHandler(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x100000000000013uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v11, v9, "MRXPC_ROUTE_UID_KEY");

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceRegisterPairingHandler_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServiceUnregisterPairingHandler(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x100000000000014uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v11, v9, "MRXPC_ROUTE_UID_KEY");

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceUnregisterPairingHandler_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServiceCompletePairingHandler(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _xpc_connection_s *v15;
  id v16;
  _QWORD handler[4];
  id v18;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  kdebug_trace();
  v13 = a1;
  MRCreateXPCMessage(0x100000000000015uLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v14, v12, "MRXPC_ROUTE_UID_KEY");

  MRAddStringToXPCMessage(v14, v11, "MRXPC_CUSTOM_DATA_KEY");
  objc_msgSend(v13, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceCompletePairingHandler_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v18 = v9;
  v16 = v9;
  xpc_connection_send_message_with_reply(v15, v14, v10, handler);

}

uint64_t MRMediaRemoteServiceBeginLoadingBrowsableContent(void *a1, void *a2, const void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  _xpc_connection_s *v10;

  v7 = a2;
  kdebug_trace();
  v8 = a1;
  MRCreateXPCMessage(0x500000000000001uLL);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v9, v7, "MRXPC_BUNDLE_ID_KEY");
  xpc_dictionary_set_data(v9, "MRXPC_INDEXPATH_DATA_KEY", a3, 8 * a4);

  objc_msgSend(v8, "connection");
  v10 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v10, v9);
  return 0;
}

void MRMediaRemoteServiceCopyBrowsableContentNowPlayingIdentifiers(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  id v13;
  _QWORD handler[4];
  id v15;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  kdebug_trace();
  v10 = a1;
  MRCreateXPCMessage(0x500000000000002uLL);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v11, v9, "MRXPC_BUNDLE_ID_KEY");

  objc_msgSend(v10, "connection");
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceCopyBrowsableContentNowPlayingIdentifiers_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v15 = v7;
  v13 = v7;
  xpc_connection_send_message_with_reply(v12, v11, v8, handler);

}

void MRMediaRemoteServiceGetBrowsableContentSupportsPlaybackProgress(void *a1, void *a2, const void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  void *v15;
  _xpc_connection_s *v16;
  id v17;
  _QWORD handler[4];
  id v19;

  v11 = a6;
  v12 = a5;
  v13 = a2;
  kdebug_trace();
  v14 = a1;
  MRCreateXPCMessage(0x500000000000003uLL);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v15, v13, "MRXPC_BUNDLE_ID_KEY");
  xpc_dictionary_set_data(v15, "MRXPC_INDEXPATH_DATA_KEY", a3, 8 * a4);

  objc_msgSend(v14, "connection");
  v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetBrowsableContentSupportsPlaybackProgress_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v19 = v11;
  v17 = v11;
  xpc_connection_send_message_with_reply(v16, v15, v12, handler);

}

void MRMediaRemoteServiceGetCountOfBrowsableContentChildItems(void *a1, void *a2, const void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  void *v15;
  _xpc_connection_s *v16;
  id v17;
  _QWORD handler[4];
  id v19;

  v11 = a6;
  v12 = a5;
  v13 = a2;
  kdebug_trace();
  v14 = a1;
  MRCreateXPCMessage(0x500000000000004uLL);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v15, v13, "MRXPC_BUNDLE_ID_KEY");
  xpc_dictionary_set_data(v15, "MRXPC_INDEXPATH_DATA_KEY", a3, 8 * a4);

  objc_msgSend(v14, "connection");
  v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceGetCountOfBrowsableContentChildItems_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v19 = v11;
  v17 = v11;
  xpc_connection_send_message_with_reply(v16, v15, v12, handler);

}

void MRMediaRemoteServiceCopyBrowsableContentChildItems(void *a1, void *a2, const void *a3, uint64_t a4, int64_t a5, int64_t a6, void *a7, void *a8)
{
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  void *v19;
  _xpc_connection_s *v20;
  id v21;
  _QWORD handler[4];
  id v23;

  v15 = a8;
  v16 = a7;
  v17 = a2;
  kdebug_trace();
  v18 = a1;
  MRCreateXPCMessage(0x500000000000005uLL);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v19, v17, "MRXPC_BUNDLE_ID_KEY");
  xpc_dictionary_set_data(v19, "MRXPC_INDEXPATH_DATA_KEY", a3, 8 * a4);

  xpc_dictionary_set_int64(v19, "MRXPC_RANGE_BEGIN_KEY", a5);
  xpc_dictionary_set_int64(v19, "MRXPC_RANGE_LENGTH_KEY", a6);
  objc_msgSend(v18, "connection");
  v20 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __MRMediaRemoteServiceCopyBrowsableContentChildItems_block_invoke;
  handler[3] = &unk_1E30C7D98;
  v23 = v15;
  v21 = v15;
  xpc_connection_send_message_with_reply(v20, v19, v16, handler);

}

void MRMediaRemoteServiceRequestPlaybackInitialization(void *a1, void *a2, const void *a3, uint64_t a4)
{
  id v7;
  id v8;
  _xpc_connection_s *v9;
  xpc_object_t xdict;

  v7 = a2;
  kdebug_trace();
  v8 = a1;
  MRCreateXPCMessage(0x500000000000006uLL);
  xdict = (xpc_object_t)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(xdict, v7, "MRXPC_BUNDLE_ID_KEY");
  xpc_dictionary_set_data(xdict, "MRXPC_INDEXPATH_DATA_KEY", a3, 8 * a4);

  objc_msgSend(v8, "connection");
  v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  xpc_connection_send_message(v9, xdict);
}

void MRMediaRemoteServiceGetSupportedBrowsableContentAPI(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  _xpc_connection_s *v12;
  _QWORD handler[4];
  id v14;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  kdebug_trace();
  if (v8 && v9)
  {
    v10 = a1;
    MRCreateXPCMessage(0x500000000000007uLL);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    MRAddStringToXPCMessage(v11, v7, "MRXPC_BUNDLE_ID_KEY");
    objc_msgSend(v10, "connection");
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetSupportedBrowsableContentAPI_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v14 = v9;
    xpc_connection_send_message_with_reply(v12, v11, v8, handler);

  }
  else
  {
    kdebug_trace();
  }

}

void MRMediaRemoteServiceGetAppsSupportingBrowsableContentAPIs(void *a1, unsigned int a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  _QWORD handler[4];
  id v13;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  if (v7 && v8)
  {
    v9 = a1;
    MRCreateXPCMessage(0x500000000000009uLL);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_set_uint64(v10, "MRXPC_CONTENT_API_MASK_KEY", a2);
    objc_msgSend(v9, "connection");
    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetAppsSupportingBrowsableContentAPIs_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v13 = v8;
    xpc_connection_send_message_with_reply(v11, v10, v7, handler);

  }
  else
  {
    kdebug_trace();
  }

}

void MRMediaRemoteServiceSetSupportedBrowsableContentAPI(void *a1, unsigned int a2, void *a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  void *v10;
  _xpc_connection_s *v11;
  _QWORD handler[4];
  id v13;

  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = a1;
  MRCreateXPCMessage(0x500000000000008uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_set_uint64(v10, "MRXPC_CONTENT_API_MASK_KEY", a2);
  objc_msgSend(v9, "connection");
  v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  if (v7 && v8)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceSetSupportedBrowsableContentAPI_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v13 = v8;
    xpc_connection_send_message_with_reply(v11, v10, v7, handler);

  }
  else
  {
    xpc_connection_send_message(v11, v10);

    kdebug_trace();
  }

}

void MRMediaRemoteServicePostBrowsableContentNotification(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  if (a3)
  {
    v5 = objc_msgSend(a3, "mutableCopy");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
    v5 = objc_claimAutoreleasedReturnValue();
  }
  v8 = (id)v5;
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "bundleIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("kMRMediaRemoteBrowsableContentBundleIdentifierUserInfoKey"));

  MRMediaRemoteServicePostNotification(a1, a2, v8);
}

void MRMediaRemoteServiceGetContentItemsForIdentifiers(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _xpc_connection_s *v15;
  _QWORD handler[4];
  id v17;

  v9 = a4;
  v10 = a5;
  v11 = a3;
  v12 = a2;
  kdebug_trace();
  v13 = a1;
  MRCreateXPCMessage(0x50000000000000AuLL);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MRAddStringToXPCMessage(v14, v12, "MRXPC_BUNDLE_ID_KEY");

  MRAddPropertyListToXPCMessage(v14, (uint64_t)v11, "MRXPC_CONTENT_IDENTIFIERS");
  objc_msgSend(v13, "connection");
  v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  if (v9 && v10)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __MRMediaRemoteServiceGetContentItemsForIdentifiers_block_invoke;
    handler[3] = &unk_1E30C7D98;
    v17 = v10;
    xpc_connection_send_message_with_reply(v15, v14, v9, handler);

  }
  else
  {
    xpc_connection_send_message(v15, v14);

    kdebug_trace();
  }

}

void MRMediaRemoteServicePing(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  _xpc_connection_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  id v20;
  id v21;

  v5 = a2;
  v6 = a3;
  v7 = a1;
  MRCreateXPCMessage(0x10000000000000CuLL);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = ___MRMediaRemoteServicePing_block_invoke;
  v19 = &unk_1E30C7F50;
  v20 = v9;
  v21 = v6;
  v10 = v6;
  v11 = v9;
  v12 = (void *)MEMORY[0x194036C44](&v16);
  v13 = v12;
  if (v5 && v10)
  {
    _MRServiceCreateErrorHandlerBlock(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "connection", v16, v17, v18, v19, v20, v21);
    v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message_with_reply(v15, v8, v5, v14);

  }
  else
  {
    objc_msgSend(v7, "connection", v16, v17, v18, v19, v20, v21);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message((xpc_connection_t)v14, v8);
  }

}

BOOL MRMediaRemoteServiceRequestBless(void *a1)
{
  id v2;
  void *v3;
  _xpc_connection_s *v4;
  xpc_object_t v5;
  _BOOL8 v7;

  kdebug_trace();
  v2 = a1;
  MRCreateXPCMessage(0x100000000000012uLL);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "connection");
  v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v5 = xpc_connection_send_message_with_reply_sync(v4, v3);
  kdebug_trace();
  v7 = v5 != (xpc_object_t)MEMORY[0x1E0C81258]
    && v5 != (xpc_object_t)MEMORY[0x1E0C81260]
    && xpc_dictionary_get_BOOL(v5, "MRXPC_BOOL_RESULT_KEY");

  return v7;
}

BOOL MRMediaRemoteServiceWakePlayerServiceProcess(void *a1)
{
  id v2;
  void *v3;
  _xpc_connection_s *v4;
  xpc_object_t v5;
  _BOOL8 v7;

  kdebug_trace();
  v2 = a1;
  MRCreateXPCMessage(0x100000000000011uLL);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "connection");
  v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();

  v5 = xpc_connection_send_message_with_reply_sync(v4, v3);
  kdebug_trace();
  v7 = v5 != (xpc_object_t)MEMORY[0x1E0C81258]
    && v5 != (xpc_object_t)MEMORY[0x1E0C81260]
    && xpc_dictionary_get_BOOL(v5, "MRXPC_BOOL_RESULT_KEY");

  return v7;
}

void _MRServiceSendReply(void *a1, uint64_t a2)
{
  _xpc_connection_s *v3;
  xpc_object_t reply;
  void *v5;
  xpc_object_t original;

  original = a1;
  xpc_dictionary_get_remote_connection(original);
  v3 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    reply = xpc_dictionary_create_reply(original);
    v5 = reply;
    if (reply)
    {
      xpc_dictionary_set_uint64(reply, "MRXPC_ERROR_CODE_KEY", a2);
      xpc_connection_send_message(v3, v5);
    }

  }
}

void _MRServiceSendReplyWithClientError(void *a1, uint64_t a2)
{
  _xpc_connection_s *v3;
  xpc_object_t reply;
  void *v5;
  xpc_object_t original;

  original = a1;
  xpc_dictionary_get_remote_connection(original);
  v3 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    reply = xpc_dictionary_create_reply(original);
    v5 = reply;
    if (reply)
    {
      MRAddClientErrorToXPCMessage(reply, a2);
      xpc_connection_send_message(v3, v5);
    }

  }
}

void sub_1938F88C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_1938F9124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1938F9224(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938FBE0C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x540], 8);
  _Unwind_Resume(a1);
}

void sub_1938FC358(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id initValAVAudioSessionCategoryPlayback_0()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVAudioSessionCategoryPlayback");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionCategoryPlayback_0, *v0);
  getAVAudioSessionCategoryPlayback_0 = (uint64_t (*)())AVAudioSessionCategoryPlaybackFunction_0;
  return (id)constantValAVAudioSessionCategoryPlayback_0;
}

id AVAudioSessionCategoryPlaybackFunction_0()
{
  return (id)constantValAVAudioSessionCategoryPlayback_0;
}

id initValAVAudioSessionCategoryPlayAndRecord()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVAudioSessionCategoryPlayAndRecord");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionCategoryPlayAndRecord, *v0);
  getAVAudioSessionCategoryPlayAndRecord = (uint64_t (*)())AVAudioSessionCategoryPlayAndRecordFunction;
  return (id)constantValAVAudioSessionCategoryPlayAndRecord;
}

id AVAudioSessionCategoryPlayAndRecordFunction()
{
  return (id)constantValAVAudioSessionCategoryPlayAndRecord;
}

id initValAVOutputContextAddOutputDeviceOptionInitiator()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextAddOutputDeviceOptionInitiator");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextAddOutputDeviceOptionInitiator, *v0);
  getAVOutputContextAddOutputDeviceOptionInitiator = (uint64_t (*)())AVOutputContextAddOutputDeviceOptionInitiatorFunction;
  return (id)constantValAVOutputContextAddOutputDeviceOptionInitiator;
}

id AVOutputContextAddOutputDeviceOptionInitiatorFunction()
{
  return (id)constantValAVOutputContextAddOutputDeviceOptionInitiator;
}

id initValAVOutputContextAddOutputDeviceOptionFadePlayback()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextAddOutputDeviceOptionFadePlayback");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextAddOutputDeviceOptionFadePlayback, *v0);
  getAVOutputContextAddOutputDeviceOptionFadePlayback = (uint64_t (*)())AVOutputContextAddOutputDeviceOptionFadePlaybackFunction;
  return (id)constantValAVOutputContextAddOutputDeviceOptionFadePlayback;
}

id AVOutputContextAddOutputDeviceOptionFadePlaybackFunction()
{
  return (id)constantValAVOutputContextAddOutputDeviceOptionFadePlayback;
}

id initValAVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished, *v0);
  getAVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished = (uint64_t (*)())AVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinishedFunction;
  return (id)constantValAVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished;
}

id AVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinishedFunction()
{
  return (id)constantValAVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished;
}

id initValAVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo, *v0);
  getAVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo = (uint64_t (*)())AVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfoFunction;
  return (id)constantValAVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo;
}

id AVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfoFunction()
{
  return (id)constantValAVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo;
}

id initValAVOutputContextRemoveOutputDeviceOptionInitiator()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextRemoveOutputDeviceOptionInitiator");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextRemoveOutputDeviceOptionInitiator, *v0);
  getAVOutputContextRemoveOutputDeviceOptionInitiator = (uint64_t (*)())AVOutputContextRemoveOutputDeviceOptionInitiatorFunction;
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionInitiator;
}

id AVOutputContextRemoveOutputDeviceOptionInitiatorFunction()
{
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionInitiator;
}

id initValAVOutputContextRemoveOutputDeviceOptionFadePlayback()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextRemoveOutputDeviceOptionFadePlayback");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextRemoveOutputDeviceOptionFadePlayback, *v0);
  getAVOutputContextRemoveOutputDeviceOptionFadePlayback = (uint64_t (*)())AVOutputContextRemoveOutputDeviceOptionFadePlaybackFunction;
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionFadePlayback;
}

id AVOutputContextRemoveOutputDeviceOptionFadePlaybackFunction()
{
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionFadePlayback;
}

id initValAVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved, *v0);
  getAVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved = (uint64_t (*)())AVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemovedFunction;
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved;
}

id AVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemovedFunction()
{
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved;
}

id initValAVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo, *v0);
  getAVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo = (uint64_t (*)())AVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfoFunction;
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo;
}

id AVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfoFunction()
{
  return (id)constantValAVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo;
}

id initValAVOutputContextSetOutputDevicesOptionFadePlayback()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDevicesOptionFadePlayback");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDevicesOptionFadePlayback, *v0);
  getAVOutputContextSetOutputDevicesOptionFadePlayback = (uint64_t (*)())AVOutputContextSetOutputDevicesOptionFadePlaybackFunction;
  return (id)constantValAVOutputContextSetOutputDevicesOptionFadePlayback;
}

id AVOutputContextSetOutputDevicesOptionFadePlaybackFunction()
{
  return (id)constantValAVOutputContextSetOutputDevicesOptionFadePlayback;
}

id initValAVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished, *v0);
  getAVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished = (uint64_t (*)())AVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinishedFunction;
  return (id)constantValAVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished;
}

id AVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinishedFunction()
{
  return (id)constantValAVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished;
}

id initValAVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo, *v0);
  getAVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo = (uint64_t (*)())AVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfoFunction;
  return (id)constantValAVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo;
}

id AVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfoFunction()
{
  return (id)constantValAVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo;
}

id initValAVOutputContextSetOutputDevicePasswordKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDevicePasswordKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDevicePasswordKey, *v0);
  getAVOutputContextSetOutputDevicePasswordKey = (uint64_t (*)())AVOutputContextSetOutputDevicePasswordKeyFunction;
  return (id)constantValAVOutputContextSetOutputDevicePasswordKey;
}

id AVOutputContextSetOutputDevicePasswordKeyFunction()
{
  return (id)constantValAVOutputContextSetOutputDevicePasswordKey;
}

id initValAVOutputContextSetOutputDeviceCancelIfAuthRequiredKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDeviceCancelIfAuthRequiredKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDeviceCancelIfAuthRequiredKey, *v0);
  getAVOutputContextSetOutputDeviceCancelIfAuthRequiredKey = (uint64_t (*)())AVOutputContextSetOutputDeviceCancelIfAuthRequiredKeyFunction;
  return (id)constantValAVOutputContextSetOutputDeviceCancelIfAuthRequiredKey;
}

id AVOutputContextSetOutputDeviceCancelIfAuthRequiredKeyFunction()
{
  return (id)constantValAVOutputContextSetOutputDeviceCancelIfAuthRequiredKey;
}

id initValAVOutputContextSetOutputDeviceFadePlaybackKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDeviceFadePlaybackKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDeviceFadePlaybackKey, *v0);
  getAVOutputContextSetOutputDeviceFadePlaybackKey = (uint64_t (*)())AVOutputContextSetOutputDeviceFadePlaybackKeyFunction;
  return (id)constantValAVOutputContextSetOutputDeviceFadePlaybackKey;
}

id AVOutputContextSetOutputDeviceFadePlaybackKeyFunction()
{
  return (id)constantValAVOutputContextSetOutputDeviceFadePlaybackKey;
}

id initValAVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey, *v0);
  getAVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey = (uint64_t (*)())AVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKeyFunction;
  return (id)constantValAVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey;
}

id AVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKeyFunction()
{
  return (id)constantValAVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey;
}

id initValAVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_3 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_3, &__block_literal_global_182);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_3, "AVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey, *v0);
  getAVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey = (uint64_t (*)())AVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKeyFunction;
  return (id)constantValAVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey;
}

id AVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKeyFunction()
{
  return (id)constantValAVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey;
}

BOOL _MRGetVoiceInputDevicesMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

const __CFString *NSStringFromMROriginType(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("Custom");
  else
    return CFSTR("Local");
}

uint64_t _MRSetArtworkMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19390067C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193900A88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193900AE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19390105C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939011A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193901384(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193901454(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193901600(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193901BE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t initMKBDeviceUnlockedSinceBoot()
{
  if (MobileKeyBagLibrary_sOnce != -1)
    dispatch_once(&MobileKeyBagLibrary_sOnce, &__block_literal_global_247);
  softLinkMKBDeviceUnlockedSinceBoot[0] = (uint64_t (*)())dlsym((void *)MobileKeyBagLibrary_sLib, "MKBDeviceUnlockedSinceBoot");
  return softLinkMKBDeviceUnlockedSinceBoot[0]();
}

void OUTLINED_FUNCTION_0_4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_193903730(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t initBiomeLibrary()
{
  if (BiomeLibraryLibrary_sOnce != -1)
    dispatch_once(&BiomeLibraryLibrary_sOnce, &__block_literal_global_147);
  softLinkBiomeLibrary[0] = (uint64_t (*)())dlsym((void *)BiomeLibraryLibrary_sLib, "BiomeLibrary");
  return softLinkBiomeLibrary[0]();
}

Class initBMPublisherOptions()
{
  Class result;

  if (BiomeStreamsLibrary_sOnce != -1)
    dispatch_once(&BiomeStreamsLibrary_sOnce, &__block_literal_global_150);
  result = objc_getClass("BMPublisherOptions");
  classBMPublisherOptions = (uint64_t)result;
  getBMPublisherOptionsClass[0] = (uint64_t (*)())BMPublisherOptionsFunction;
  return result;
}

id BMPublisherOptionsFunction()
{
  return (id)classBMPublisherOptions;
}

Class initINPlayMediaIntent()
{
  Class result;

  if (IntentsLibrary_sOnce_0 != -1)
    dispatch_once(&IntentsLibrary_sOnce_0, &__block_literal_global_153_0);
  result = objc_getClass("INPlayMediaIntent");
  classINPlayMediaIntent = (uint64_t)result;
  getINPlayMediaIntentClass[0] = (uint64_t (*)())INPlayMediaIntentFunction;
  return result;
}

id INPlayMediaIntentFunction()
{
  return (id)classINPlayMediaIntent;
}

Class initINInteraction_0()
{
  Class result;

  if (IntentsLibrary_sOnce_0 != -1)
    dispatch_once(&IntentsLibrary_sOnce_0, &__block_literal_global_153_0);
  result = objc_getClass("INInteraction");
  classINInteraction_0 = (uint64_t)result;
  getINInteractionClass_0 = (uint64_t (*)())INInteractionFunction_0;
  return result;
}

id INInteractionFunction_0()
{
  return (id)classINInteraction_0;
}

Class initINSchema()
{
  Class result;

  if (IntentsLibrary_sOnce_0 != -1)
    dispatch_once(&IntentsLibrary_sOnce_0, &__block_literal_global_153_0);
  result = objc_getClass("INSchema");
  classINSchema = (uint64_t)result;
  getINSchemaClass = (uint64_t (*)())INSchemaFunction;
  return result;
}

id INSchemaFunction()
{
  return (id)classINSchema;
}

uint64_t _MRSendCommandResultProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRNowPlayingPlayerPathProtobuf *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark()
          && _MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_33;
        }
        goto LABEL_41;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 16) = v21;
        goto LABEL_39;
      case 3u:
        v17 = objc_alloc_init(_MRSendCommandResultStatusProtobuf);
        objc_msgSend((id)a1, "addStatuses:", v17);
        if (PBReaderPlaceMark()
          && (_MRSendCommandResultStatusProtobufReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v25;

        goto LABEL_39;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

BOOL _MRGenericMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRDiagnosticProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v21;

      }
      else if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_193906DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193906F20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19390715C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _MRAVRouteQueryProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRAVAirPlaySecuritySettingsProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRKeyValuePairProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  _MRValueProtobuf *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(_MRValueProtobuf **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_MRValueProtobuf);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (_MRValueProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19390AF2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19390B664(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19390B7CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19390BB3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19390C128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19390C338(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19390CA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19390CBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19390CE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19390CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19390D058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19390D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19390D470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19390D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19390DD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19390E57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19390ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x2Au);
}

id OUTLINED_FUNCTION_3_2(id a1)
{
  return a1;
}

id OUTLINED_FUNCTION_5_1(void *a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return objc_opt_class();
}

uint64_t OUTLINED_FUNCTION_10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = a1;
  return objc_opt_class();
}

uint64_t OUTLINED_FUNCTION_11()
{
  return objc_opt_class();
}

uint64_t _MRPromptForRouteAuthorizationResponseMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_193911980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193911FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939133A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AVOutputContextFunction()
{
  return (id)classAVOutputContext;
}

id initValAVOutputContextDestinationChangeReasonKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextDestinationChangeReasonKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextDestinationChangeReasonKey, *v0);
  getAVOutputContextDestinationChangeReasonKey[0] = (uint64_t (*)())AVOutputContextDestinationChangeReasonKeyFunction;
  return (id)constantValAVOutputContextDestinationChangeReasonKey;
}

id AVOutputContextDestinationChangeReasonKeyFunction()
{
  return (id)constantValAVOutputContextDestinationChangeReasonKey;
}

id initValAVOutputContextDestinationChangeReasonIdleDisconnect()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextDestinationChangeReasonIdleDisconnect");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextDestinationChangeReasonIdleDisconnect, *v0);
  getAVOutputContextDestinationChangeReasonIdleDisconnect[0] = (uint64_t (*)())AVOutputContextDestinationChangeReasonIdleDisconnectFunction;
  return (id)constantValAVOutputContextDestinationChangeReasonIdleDisconnect;
}

id AVOutputContextDestinationChangeReasonIdleDisconnectFunction()
{
  return (id)constantValAVOutputContextDestinationChangeReasonIdleDisconnect;
}

id initValAVOutputContextDestinationChangePreviousDeviceIDsKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextDestinationChangePreviousDeviceIDsKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextDestinationChangePreviousDeviceIDsKey, *v0);
  getAVOutputContextDestinationChangePreviousDeviceIDsKey = (uint64_t (*)())AVOutputContextDestinationChangePreviousDeviceIDsKeyFunction;
  return (id)constantValAVOutputContextDestinationChangePreviousDeviceIDsKey;
}

id AVOutputContextDestinationChangePreviousDeviceIDsKeyFunction()
{
  return (id)constantValAVOutputContextDestinationChangePreviousDeviceIDsKey;
}

id AVOutputContextDestinationChangeInitiatedNotificationFunction()
{
  return (id)constantValAVOutputContextDestinationChangeInitiatedNotification;
}

id AVOutputDeviceVolumeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceVolumeDidChangeNotification;
}

id AVOutputDeviceCanSetVolumeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceCanSetVolumeDidChangeNotification;
}

id AVOutputDeviceVolumeControlTypeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceVolumeControlTypeDidChangeNotification;
}

id AVOutputContextVolumeControlTypeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputContextVolumeControlTypeDidChangeNotification;
}

id AVOutputContextCanSetVolumeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputContextCanSetVolumeDidChangeNotification;
}

id AVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotificationFunction()
{
  return (id)constantValAVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification;
}

id AVOutputContextPredictedOutputDeviceDidChangeNotificationFunction()
{
  return (id)constantValAVOutputContextPredictedOutputDeviceDidChangeNotification;
}

id AVOutputDeviceClusterMemberVolumeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceClusterMemberVolumeDidChangeNotification;
}

id AVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotification;
}

id AVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceActivatedClusterMembersRoomVolumeDidChangeNotification;
}

id initValAVOutputDeviceActivatedClusterMembersRoomIDKey()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputDeviceActivatedClusterMembersRoomIDKey");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceActivatedClusterMembersRoomIDKey, *v0);
  getAVOutputDeviceActivatedClusterMembersRoomIDKey = (uint64_t (*)())AVOutputDeviceActivatedClusterMembersRoomIDKeyFunction;
  return (id)constantValAVOutputDeviceActivatedClusterMembersRoomIDKey;
}

id AVOutputDeviceActivatedClusterMembersRoomIDKeyFunction()
{
  return (id)constantValAVOutputDeviceActivatedClusterMembersRoomIDKey;
}

id initValAVOutputContextTypeSharedSystemAudio()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextTypeSharedSystemAudio");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextTypeSharedSystemAudio, *v0);
  getAVOutputContextTypeSharedSystemAudio[0] = (uint64_t (*)())AVOutputContextTypeSharedSystemAudioFunction;
  return (id)constantValAVOutputContextTypeSharedSystemAudio;
}

id AVOutputContextTypeSharedSystemAudioFunction()
{
  return (id)constantValAVOutputContextTypeSharedSystemAudio;
}

id initValAVOutputContextTypeSharedSystemScreen()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextTypeSharedSystemScreen");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextTypeSharedSystemScreen, *v0);
  getAVOutputContextTypeSharedSystemScreen[0] = (uint64_t (*)())AVOutputContextTypeSharedSystemScreenFunction;
  return (id)constantValAVOutputContextTypeSharedSystemScreen;
}

id AVOutputContextTypeSharedSystemScreenFunction()
{
  return (id)constantValAVOutputContextTypeSharedSystemScreen;
}

id initValAVOutputContextTypeSharedAudioPresentation()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_4 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_4, &__block_literal_global_189);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_4, "AVOutputContextTypeSharedAudioPresentation");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputContextTypeSharedAudioPresentation, *v0);
  getAVOutputContextTypeSharedAudioPresentation[0] = (uint64_t (*)())AVOutputContextTypeSharedAudioPresentationFunction;
  return (id)constantValAVOutputContextTypeSharedAudioPresentation;
}

id AVOutputContextTypeSharedAudioPresentationFunction()
{
  return (id)constantValAVOutputContextTypeSharedAudioPresentation;
}

void OUTLINED_FUNCTION_2_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t _MRLyricsItemProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  _MRLyricsTokenProtobuf *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = objc_alloc_init(_MRLyricsTokenProtobuf);
        objc_storeStrong((id *)(a1 + 16), v20);
        if (!PBReaderPlaceMark() || !_MRLyricsTokenProtobufReadFrom((uint64_t)v20, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if ((v26 & 0x80) == 0)
            goto LABEL_35;
          v21 += 7;
          v14 = v22++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_37:
        *(_BYTE *)(a1 + 24) = v23 != 0;
      }
      else if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRDeviceClassFromProtobuf(int a1)
{
  uint64_t v1;

  v1 = (a1 - 1);
  if (v1 < 0xD)
    return v1 + 1;
  else
    return -1;
}

void sub_193919AC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193919C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193919C7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193919E00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19391A138(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CFStringRef MRMediaRemoteCopyCommandHandlerStatusDescription(int a1)
{
  const __CFString *v1;

  if (a1 <= 400)
  {
    switch(a1)
    {
      case 'd':
        v1 = CFSTR("SkipAdProhibited");
        break;
      case 'e':
        v1 = CFSTR("QueueIsUserCurated");
        break;
      case 'f':
        v1 = CFSTR("UserModifiedQueueDisabled");
        break;
      case 'g':
        v1 = CFSTR("UserQueueModificationNotSupportedForCurrentItem");
        break;
      case 'h':
        v1 = CFSTR("SubscriptionRequiredForSharedQueue");
        break;
      case 'i':
        v1 = CFSTR("InsertionPositionNotSpecified");
        break;
      case 'j':
        v1 = CFSTR("InvalidInsertionPosition");
        break;
      case 'k':
        v1 = CFSTR("RequestParametersOutOfBounds");
        break;
      case 'l':
        v1 = CFSTR("SkipLimitReached");
        break;
      default:
        v1 = CFSTR("Success");
        switch(a1)
        {
          case 0:
            return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
          case 1:
            v1 = CFSTR("NoSuchContent");
            return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
          case 2:
            v1 = CFSTR("CommandFailed");
            return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
          case 3:
            v1 = CFSTR("UIKitLegacy");
            return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
          case 4:
            v1 = CFSTR("CannotModifyQueueWithPlaybackTokenItems");
            return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            return 0;
          case 10:
            v1 = CFSTR("NoActionableNowPlayingItem");
            return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
          default:
            if (a1 != 20)
              return 0;
            v1 = CFSTR("DeviceNotFound");
            break;
        }
        break;
    }
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  }
  if (a1 > 500)
  {
    if (a1 == 501)
    {
      v1 = CFSTR("MediaServicesUnavailable");
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
    }
    if (a1 == 555)
    {
      v1 = CFSTR("Timeout");
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
    }
  }
  else
  {
    if (a1 == 401)
    {
      v1 = CFSTR("AuthenticationFailure");
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
    }
    if (a1 == 404)
    {
      v1 = CFSTR("UnsupportedCommand");
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
    }
  }
  return 0;
}

CFStringRef MRMediaRemoteCopySendCommandErrorDescription(uint64_t a1)
{
  const __CFString *v1;
  CFStringRef Copy;

  if (a1 >= 0x16)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UnknownErrorCode-%u"), a1);
    v1 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = off_1E30C8D98[(int)a1];
  }
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  CFRelease(v1);
  return Copy;
}

CFStringRef MRMediaRemoteSendCommandErrorDescription(uint64_t a1)
{
  return (id)MRMediaRemoteCopySendCommandErrorDescription(a1);
}

CFStringRef MRMediaRemoteCopyShuffleModeDescription(int a1)
{
  const __CFString *v1;

  if ((a1 - 1) > 2)
    v1 = CFSTR("<Unknown>");
  else
    v1 = off_1E30C8E48[a1 - 1];
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

CFStringRef MRMediaRemoteCopyRepeatModeDescription(int a1)
{
  const __CFString *v1;

  if ((a1 - 1) > 2)
    v1 = CFSTR("<Unknown>");
  else
    v1 = off_1E30C8E60[a1 - 1];
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

CFStringRef MRMediaRemoteCopyHardwareRemoteBehaviorDescription(int a1)
{
  const __CFString *v1;

  if (!a1)
  {
    v1 = CFSTR("Default");
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  }
  if (a1 == 1)
  {
    v1 = CFSTR("ForegroundReceiver");
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  }
  return 0;
}

uint64_t MRMediaRemoteCommandCreateExternalRepresentation(uint64_t a1, void *a2)
{
  _MRSendCommandMessageProtobuf *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = objc_alloc_init(_MRSendCommandMessageProtobuf);
  -[_MRSendCommandMessageProtobuf setCommand:](v4, "setCommand:", MRMediaRemoteCommandToProtobuf(a1));
  MRMediaRemoteCommandOptionsToProtobuf(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_MRSendCommandMessageProtobuf setOptions:](v4, "setOptions:", v5);

  -[_MRSendCommandMessageProtobuf data](v4, "data");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "copy");

  return v7;
}

void MRMediaRemoteCommandFromExternalRepresentation(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t, void *);
  uint64_t v4;
  void *v5;
  void *v6;
  _MRSendCommandMessageProtobuf *v7;

  v3 = a2;
  v7 = -[_MRSendCommandMessageProtobuf initWithData:]([_MRSendCommandMessageProtobuf alloc], "initWithData:", a1);
  v4 = MRMediaRemoteCommandFromProtobuf(-[_MRSendCommandMessageProtobuf command](v7, "command"));
  -[_MRSendCommandMessageProtobuf options](v7, "options");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteCommandOptionsFromProtobuf(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v3[2](v3, v4, v6);
}

BOOL MRMediaRemoteCommandIsContextual(int a1)
{
  return (a1 - 109) < 2;
}

BOOL MRMediaRemoteCommandIsNavigational(int a1)
{
  return (a1 - 111) < 5;
}

uint64_t MRMediaRemoteCommandIsLegacy(unsigned int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 > 0x15 || ((1 << a1) & 0x20FFFF) == 0)
  {
    v3 = a1 - 100;
    if (v3 > 0xF || ((1 << v3) & 0xF87F) == 0)
      return 0;
  }
  return result;
}

BOOL MRMediaRemoteCommandRequiresSourcePositionOption(int a1)
{
  return (a1 - 129) < 3;
}

BOOL MRMediaRemoteCommandRequiresDestinationPositionOption(int a1)
{
  return a1 == 130;
}

BOOL MRMediaRemoteCommandRequiresOptions(int a1)
{
  return (a1 - 129) < 3;
}

uint64_t MRMediaRemoteCopyCommandHandlerStatusesDescription(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __CFString *v9;
  MRPlayerPath *v10;
  MRPlayerPath *v11;
  MRPlayerPath *v12;
  void *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v1, "count"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v9 = (__CFString *)MRMediaRemoteCopyCommandHandlerStatusDescription(objc_msgSend(v8, "unsignedIntValue"));
          if (v9)
            objc_msgSend(v2, "addObject:", v9);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            continue;
          v9 = v8;
          v10 = [MRPlayerPath alloc];
          v11 = -[MRPlayerPath initWithData:](v10, "initWithData:", v9, (_QWORD)v16);
          v12 = v11;
          if (!v11)
            v11 = (MRPlayerPath *)v9;
          -[MRPlayerPath description](v11, "description");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObject:", v13);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v5);
  }

  objc_msgSend(v2, "description");
  v14 = objc_claimAutoreleasedReturnValue();

  return v14;
}

id MRMediaRemoteCommandCreateDescription(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  const __CFString *v13;
  void *v14;

  v5 = a2;
  v6 = MRMediaRemoteCopyCommandDescription(a1);
  v7 = (__CFString *)objc_msgSend(v5, "mutableCopy");

  -[__CFString objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionSenderID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString removeObjectForKey:](v7, "removeObjectForKey:", CFSTR("kMRMediaRemoteOptionSenderID"));
  -[__CFString objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString removeObjectForKey:](v7, "removeObjectForKey:", CFSTR("kMRMediaRemoteOptionCommandID"));
  -[__CFString objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionRemoteControlInterfaceIdentifier"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString removeObjectForKey:](v7, "removeObjectForKey:", CFSTR("kMRMediaRemoteOptionRemoteControlInterfaceIdentifier"));
  -[__CFString objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionSendOptionsNumber"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString removeObjectForKey:](v7, "removeObjectForKey:", CFSTR("kMRMediaRemoteOptionSendOptionsNumber"));
  v12 = objc_alloc(MEMORY[0x1E0CB3940]);
  v13 = CFSTR("not included");
  if (a3)
    v13 = v7;
  v14 = (void *)objc_msgSend(v12, "initWithFormat:", CFSTR("Command = <%@>, %@, commandID = <%@>, remote control interface = <%@>, appOptions = <%@>, options = <%@>"), v6, v8, v9, v10, v11, v13);

  return v14;
}

id MRMediaRemoteErrorFromCommandStatuses(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *ErrorWithDescription;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if ((_DWORD)a1)
  {
    v5 = (void *)MRMediaRemoteCopySendCommandErrorDescription(a1);
    v6 = 26;
    switch((int)a1)
    {
      case 1:
        v6 = 4;
        break;
      case 2:
        v6 = 100;
        break;
      case 5:
        break;
      case 6:
        v6 = 5;
        break;
      case 7:
        v6 = 2;
        break;
      case 8:
        v6 = 44;
        break;
      case 12:
        v6 = 46;
        break;
      default:
        goto LABEL_14;
    }
LABEL_20:
    ErrorWithDescription = (void *)MRMediaRemoteCreateErrorWithDescription(v6, (uint64_t)v5);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      while (2)
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v11), "intValue", (_QWORD)v14))
          {
            v5 = (void *)MRMediaRemoteCopyCommandHandlerStatusesDescription(v7);

LABEL_14:
            v6 = 1;
            goto LABEL_20;
          }
          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v9)
          continue;
        break;
      }
    }

    v5 = 0;
    ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t MRMediaRemoteSendErrorFromError(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a1;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRSendCommandError MRMediaRemoteSendErrorFromError(NSError *__strong, NSString *__autoreleasing *)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRRemoteControlTypes.m"), 674, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("error"));

  }
  objc_msgSend(v3, "domain");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("kMRMediaRemoteFrameworkErrorDomain"));

  if ((v5 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRSendCommandError MRMediaRemoteSendErrorFromError(NSError *__strong, NSString *__autoreleasing *)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("MRRemoteControlTypes.m"), 675, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[error.domain isEqualToString:(__bridge NSString *)kMRMediaRemoteFrameworkErrorDomain]"));

  }
  v6 = objc_msgSend(v3, "code");
  objc_msgSend(v3, "userInfo");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2D68]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 <= 99)
  {
    switch(v6)
    {
      case 1:
        v9 = 11;
        if (!a2)
          goto LABEL_27;
        goto LABEL_26;
      case 47:
        v9 = 13;
        if (!a2)
          goto LABEL_27;
        goto LABEL_26;
      case 48:
        v9 = 14;
        if (!a2)
          goto LABEL_27;
        goto LABEL_26;
    }
  }
  else
  {
    if (v6 <= 120)
    {
      if (v6 != 100 && v6 != 117)
        goto LABEL_25;
LABEL_19:
      v9 = 2;
      if (!a2)
        goto LABEL_27;
      goto LABEL_26;
    }
    if (v6 == 121)
      goto LABEL_19;
    if (v6 == 126)
    {
      v9 = 15;
      if (!a2)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
LABEL_25:
  v9 = 0;
  if (a2)
LABEL_26:
    *a2 = objc_retainAutorelease(v8);
LABEL_27:

  return v9;
}

BOOL MRMediaRemoteShouldWakeSystemForCommand(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 122) > 0x10 || ((1 << (a1 - 122)) & 0x1C801) == 0)
    return !a1 || a1 == 2;
  return result;
}

uint64_t _MRUpdateActiveSystemEndpointRequestProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  BOOL v53;
  uint64_t v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_30;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 52) |= 4u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_58:
          *(_DWORD *)(a1 + 24) = v23;
          continue;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
LABEL_30:
          v28 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 4u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_BYTE *)(a1 + 52) |= 0x10u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v15 = v30++ >= 9;
                if (v15)
                {
                  v31 = 0;
                  goto LABEL_62;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
LABEL_62:
          v53 = v31 != 0;
          v54 = 49;
          goto LABEL_71;
        case 5u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 52) |= 2u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v38 |= (unint64_t)(v42 & 0x7F) << v36;
              if (v42 < 0)
              {
                v36 += 7;
                v15 = v37++ >= 9;
                if (v15)
                {
                  v38 = 0;
                  goto LABEL_66;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 16) = v38;
          continue;
        case 6u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v45 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v45 = 0;
          }
          *(_QWORD *)(a1 + 8) = v45;
          continue;
        case 7u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          *(_BYTE *)(a1 + 52) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v49 = *v3;
        v50 = *(_QWORD *)(a2 + v49);
        v51 = v50 + 1;
        if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
          break;
        v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
        *(_QWORD *)(a2 + v49) = v51;
        v48 |= (unint64_t)(v52 & 0x7F) << v46;
        if ((v52 & 0x80) == 0)
          goto LABEL_68;
        v46 += 7;
        v15 = v47++ >= 9;
        if (v15)
        {
          v48 = 0;
          goto LABEL_70;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_68:
      if (*(_BYTE *)(a2 + *v5))
        v48 = 0;
LABEL_70:
      v53 = v48 != 0;
      v54 = 48;
LABEL_71:
      *(_BYTE *)(a1 + v54) = v53;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRUpdateClientMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRNowPlayingClientProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRNowPlayingClientProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (_MRNowPlayingClientProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRRegisterHIDDeviceResultMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR____MRRegisterHIDDeviceResultMessageProtobuf__errorCode;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR____MRRegisterHIDDeviceResultMessageProtobuf__errorCode;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR____MRRegisterHIDDeviceResultMessageProtobuf__errorCode;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR____MRRegisterHIDDeviceResultMessageProtobuf__deviceIdentifier;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR____MRRegisterHIDDeviceResultMessageProtobuf__deviceIdentifier;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR____MRRegisterHIDDeviceResultMessageProtobuf__deviceIdentifier;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGameControllerPropertiesMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _MRGameControllerPropertiesProtobuf *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(_MRGameControllerPropertiesProtobuf);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark()
          || (_MRGameControllerPropertiesProtobufReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRAudioFadeResponseMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_193922798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939228B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193926CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose((const void *)(v67 - 256), 8);
  _Block_object_dispose((const void *)(v67 - 208), 8);
  _Block_object_dispose((const void *)(v67 - 160), 8);
  _Block_object_dispose((const void *)(v67 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_193929D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19392A184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19392A4C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19392A6A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19392B2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19392B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19392BB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19392BBEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_9(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_10_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t _MRSendPackedVirtualTouchEventMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

_MRGameControllerAccelerationProtobuf *MRGameControllerAccelerationCreate(double a1, double a2, double a3)
{
  void *v3;
  _MRGameControllerAccelerationProtobuf *v4;
  double v6;
  double v7;
  double v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v8 = a3;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v6, 24);
  v4 = objc_alloc_init(_MRGameControllerAccelerationProtobuf);
  -[_MRGameControllerAccelerationProtobuf setData:](v4, "setData:", v3, *(_QWORD *)&v6, *(_QWORD *)&v7, *(_QWORD *)&v8, v9);

  return v4;
}

_MRGameControllerAccelerationProtobuf *MRGameControllerAccelerationCreate4(double a1, double a2, double a3, double a4)
{
  void *v4;
  _MRGameControllerAccelerationProtobuf *v5;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  *(double *)v7 = a1;
  *(double *)&v7[1] = a2;
  *(double *)&v7[2] = a3;
  *(double *)&v7[3] = a4;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v7, 32);
  v5 = objc_alloc_init(_MRGameControllerAccelerationProtobuf);
  -[_MRGameControllerAccelerationProtobuf setData:](v5, "setData:", v4);

  return v5;
}

_MRGameControllerAccelerationProtobuf *MRGameControllerAccelerationCreateF(float a1, float a2, float a3)
{
  return MRGameControllerAccelerationCreate4F(a1, a2, a3, 0.0);
}

_MRGameControllerAccelerationProtobuf *MRGameControllerAccelerationCreate4F(float a1, float a2, float a3, float a4)
{
  _MRGameControllerAccelerationProtobuf *v8;
  double v9;
  _MRGameControllerAccelerationProtobuf *v10;

  v8 = objc_alloc_init(_MRGameControllerAccelerationProtobuf);
  v10 = v8;
  if (a1 != 0.0)
  {
    *(float *)&v9 = a1;
    -[_MRGameControllerAccelerationProtobuf setX:](v8, "setX:", v9);
  }
  if (a2 != 0.0)
  {
    *(float *)&v9 = a2;
    -[_MRGameControllerAccelerationProtobuf setY:](v10, "setY:", v9);
  }
  if (a3 != 0.0)
  {
    *(float *)&v9 = a3;
    -[_MRGameControllerAccelerationProtobuf setZ:](v10, "setZ:", v9);
  }
  if (a4 != 0.0)
  {
    *(float *)&v9 = a4;
    -[_MRGameControllerAccelerationProtobuf setW:](v10, "setW:", v9);
  }
  return v10;
}

_MRGameControllerAccelerationProtobuf *MRGameControllerAccelerationCopyF(void *a1)
{
  double v2;
  float v3;
  double v4;
  float v5;
  double v6;
  float v7;
  float v8;

  MRGameControllerAccelerationGetX(a1);
  v3 = v2;
  MRGameControllerAccelerationGetY(a1);
  v5 = v4;
  MRGameControllerAccelerationGetZ(a1);
  v7 = v6;
  v8 = MRGameControllerAccelerationGetW(a1);
  return MRGameControllerAccelerationCreate4F(v3, v5, v7, v8);
}

void MRGameControllerAccelerationGetX(void *a1)
{
  id v1;
  void *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "hasData"))
  {
    objc_msgSend(v1, "data");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "getBytes:range:", v3, 0, 8);
  }
  else
  {
    objc_msgSend(v1, "x");

  }
}

void MRGameControllerAccelerationGetY(void *a1)
{
  id v1;
  void *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "hasData"))
  {
    objc_msgSend(v1, "data");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "getBytes:range:", v3, 8, 8);
  }
  else
  {
    objc_msgSend(v1, "y");

  }
}

void MRGameControllerAccelerationGetZ(void *a1)
{
  id v1;
  void *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "hasData"))
  {
    objc_msgSend(v1, "data");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "getBytes:range:", v3, 16, 8);
  }
  else
  {
    objc_msgSend(v1, "z");

  }
}

double MRGameControllerAccelerationGetW(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  double v4;
  void *v5;
  float v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "hasData"))
  {
    v8[0] = 0;
    objc_msgSend(v1, "data");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "length");

    v4 = 0.0;
    if (v3 >= 0x19)
    {
      objc_msgSend(v1, "data");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "getBytes:range:", v8, 24, 8);

      v4 = *(double *)v8;
    }
  }
  else
  {
    objc_msgSend(v1, "w");
    v4 = v6;
  }

  return v4;
}

_MRGameControllerAccelerationProtobuf *MRGameControllerAccelerationCreateWithLegacyAcceleration(double *a1)
{
  return MRGameControllerAccelerationCreate(*a1, a1[1], a1[2]);
}

_MRGameControllerMotionProtobuf *MRGameControllerMotionCreate()
{
  return objc_alloc_init(_MRGameControllerMotionProtobuf);
}

_MRGameControllerMotionProtobuf *MRGameControllerMotionCopyF(void *a1)
{
  id v1;
  void *v2;
  _MRGameControllerAccelerationProtobuf *v3;
  void *v4;
  _MRGameControllerAccelerationProtobuf *v5;
  void *v6;
  _MRGameControllerAccelerationProtobuf *v7;
  void *v8;
  _MRGameControllerAccelerationProtobuf *v9;
  _MRGameControllerMotionProtobuf *v10;

  v1 = a1;
  objc_msgSend(v1, "gravity");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = MRGameControllerAccelerationCopyF(v2);

  objc_msgSend(v1, "userAcceleration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = MRGameControllerAccelerationCopyF(v4);

  objc_msgSend(v1, "attitude");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MRGameControllerAccelerationCopyF(v6);

  objc_msgSend(v1, "rotation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = MRGameControllerAccelerationCopyF(v8);
  v10 = objc_alloc_init(_MRGameControllerMotionProtobuf);
  -[_MRGameControllerMotionProtobuf setGravity:](v10, "setGravity:", v3);
  -[_MRGameControllerMotionProtobuf setUserAcceleration:](v10, "setUserAcceleration:", v5);
  -[_MRGameControllerMotionProtobuf setAttitude:](v10, "setAttitude:", v7);
  -[_MRGameControllerMotionProtobuf setRotation:](v10, "setRotation:", v9);

  return v10;
}

uint64_t MRGameControllerMotionSetGravity(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setGravity:", a2);
}

uint64_t MRGameControllerMotionSetUserAcceleration(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setUserAcceleration:", a2);
}

uint64_t MRGameControllerMotionSetAttitude(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setAttitude:", a2);
}

uint64_t MRGameControllerMotionSetRotation(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRotation:", a2);
}

_MRGameControllerMotionProtobuf *MRGameControllerMotionCreateWithLegacyMotion(double *a1)
{
  _MRGameControllerMotionProtobuf *v2;
  _MRGameControllerAccelerationProtobuf *v3;
  _MRGameControllerAccelerationProtobuf *v4;

  v2 = objc_alloc_init(_MRGameControllerMotionProtobuf);
  v3 = MRGameControllerAccelerationCreate(*a1, a1[1], a1[2]);
  -[_MRGameControllerMotionProtobuf setGravity:](v2, "setGravity:", v3);
  v4 = MRGameControllerAccelerationCreate(a1[3], a1[4], a1[5]);
  -[_MRGameControllerMotionProtobuf setUserAcceleration:](v2, "setUserAcceleration:", v4);

  return v2;
}

_MRGameControllerButtonsProtobuf *MRGameControllerButtonsCreate()
{
  return objc_alloc_init(_MRGameControllerButtonsProtobuf);
}

_MRGameControllerButtonsProtobuf *MRGameControllerButtonsCreateWithLegacyButtons(float *a1)
{
  _MRGameControllerButtonsProtobuf *v2;
  _MRGameControllerButtonsProtobuf *v3;

  v2 = objc_alloc_init(_MRGameControllerButtonsProtobuf);
  v3 = v2;
  if (fabsf(fabsf(*a1) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setA:](v2, "setA:");
  if (fabsf(fabsf(a1[1]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setX:](v3, "setX:");
  if (fabsf(fabsf(a1[2]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setPause:](v3, "setPause:");
  if (fabsf(fabsf(a1[3]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setDPadX:](v3, "setDPadX:");
  if (fabsf(fabsf(a1[4]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setDPadY:](v3, "setDPadY:");
  if (fabsf(fabsf(a1[5]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setB:](v3, "setB:");
  if (fabsf(fabsf(a1[6]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setY:](v3, "setY:");
  if (fabsf(fabsf(a1[7]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setLeftShoulder:](v3, "setLeftShoulder:");
  if (fabsf(fabsf(a1[8]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setRightShoulder:](v3, "setRightShoulder:");
  if (fabsf(fabsf(a1[9]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setLeftThumbstickX:](v3, "setLeftThumbstickX:");
  if (fabsf(fabsf(a1[10]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setLeftThumbstickY:](v3, "setLeftThumbstickY:");
  if (fabsf(fabsf(a1[11]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setRightThumbstickX:](v3, "setRightThumbstickX:");
  if (fabsf(fabsf(a1[12]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setRightThumbstickY:](v3, "setRightThumbstickY:");
  if (fabsf(fabsf(a1[13]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setLeftTrigger:](v3, "setLeftTrigger:");
  if (fabsf(fabsf(a1[14]) + -1337.0) > 0.0001)
    -[_MRGameControllerButtonsProtobuf setRightTrigger:](v3, "setRightTrigger:");
  return v3;
}

_MRGameControllerDigitizerProtobuf *MRGameControllerDigitizerCreate()
{
  return objc_alloc_init(_MRGameControllerDigitizerProtobuf);
}

_MRGameControllerDigitizerProtobuf *MRGameControllerDigitizerCreateWithLegacyDigitizer(uint64_t a1)
{
  _MRGameControllerDigitizerProtobuf *v2;

  v2 = objc_alloc_init(_MRGameControllerDigitizerProtobuf);
  -[_MRGameControllerDigitizerProtobuf setX:](v2, "setX:", *(float *)a1);
  -[_MRGameControllerDigitizerProtobuf setY:](v2, "setY:", *(float *)(a1 + 4));
  -[_MRGameControllerDigitizerProtobuf setTouchDown:](v2, "setTouchDown:", *(unsigned __int8 *)(a1 + 8));
  -[_MRGameControllerDigitizerProtobuf setTimestamp:](v2, "setTimestamp:", *(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t MRGameControllerDigitizerSetTouchDown(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setTouchDown:", a2);
}

uint64_t MRGameControllerDigitizerSetTimestamp(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setTimestamp:", a2);
}

_MRGameControllerDigitizerProtobuf *MRGameControllerDigitizerCreateWithHIDTouchEvent(uint64_t a1)
{
  _MRGameControllerDigitizerProtobuf *v2;

  v2 = objc_alloc_init(_MRGameControllerDigitizerProtobuf);
  -[_MRGameControllerDigitizerProtobuf setX:](v2, "setX:", *(float *)a1);
  -[_MRGameControllerDigitizerProtobuf setY:](v2, "setY:", *(float *)(a1 + 4));
  -[_MRGameControllerDigitizerProtobuf setTimestamp:](v2, "setTimestamp:", *(_QWORD *)(a1 + 16));
  -[_MRGameControllerDigitizerProtobuf setTouchDown:](v2, "setTouchDown:", *(_DWORD *)(a1 + 8) != 4);
  return v2;
}

_MRGameControllerMessageProtobuf *MRGameControllerEventCreateWithMotion(uint64_t a1)
{
  _MRGameControllerMessageProtobuf *v2;

  v2 = objc_alloc_init(_MRGameControllerMessageProtobuf);
  -[_MRGameControllerMessageProtobuf setMotion:](v2, "setMotion:", a1);
  return v2;
}

_MRGameControllerMessageProtobuf *MRGameControllerEventCreateWithButtons(uint64_t a1)
{
  _MRGameControllerMessageProtobuf *v2;

  v2 = objc_alloc_init(_MRGameControllerMessageProtobuf);
  -[_MRGameControllerMessageProtobuf setButtons:](v2, "setButtons:", a1);
  return v2;
}

_MRGameControllerMessageProtobuf *MRGameControllerEventCreateWithDigitizer(uint64_t a1)
{
  _MRGameControllerMessageProtobuf *v2;

  v2 = objc_alloc_init(_MRGameControllerMessageProtobuf);
  -[_MRGameControllerMessageProtobuf setDigitizer:](v2, "setDigitizer:", a1);
  return v2;
}

_MRGameControllerMessageProtobuf *MRGameControllerEventCreateWithLegacyEvent(float *a1)
{
  _MRGameControllerMessageProtobuf *v2;
  float v3;
  void *v4;

  v2 = objc_alloc_init(_MRGameControllerMessageProtobuf);
  v3 = *a1;
  if ((*(_DWORD *)a1 - 2) < 2)
  {
    v4 = MRGameControllerButtonsCreateWithLegacyButtons(a1 + 2);
    -[_MRGameControllerMessageProtobuf setButtons:](v2, "setButtons:", v4);
    goto LABEL_7;
  }
  if (LODWORD(v3) == 4)
  {
    v4 = MRGameControllerDigitizerCreateWithLegacyDigitizer((uint64_t)(a1 + 2));
    -[_MRGameControllerMessageProtobuf setDigitizer:](v2, "setDigitizer:", v4);
    goto LABEL_7;
  }
  if (LODWORD(v3) == 1)
  {
    v4 = MRGameControllerMotionCreateWithLegacyMotion((double *)a1 + 1);
    -[_MRGameControllerMessageProtobuf setMotion:](v2, "setMotion:", v4);
LABEL_7:

  }
  return v2;
}

_MRGameControllerPropertiesProtobuf *MRGameControllerPropertiesCreate()
{
  _MRGameControllerPropertiesProtobuf *v0;

  v0 = objc_alloc_init(_MRGameControllerPropertiesProtobuf);
  -[_MRGameControllerPropertiesProtobuf setButtonAUpDelay:](v0, "setButtonAUpDelay:", 0xFFFFFFFFLL);
  return v0;
}

uint64_t MRGameControllerPropertiesSetPlayerIndex(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setPlayerIndex:", a2);
}

uint64_t MRGameControllerPropertiesSetButtonAUpDelay(void *a1, const char *a2, double a3)
{
  return objc_msgSend(a1, "setButtonAUpDelay:", (int)a3);
}

double MRGameControllerPropertiesGetButtonAUpDelay(void *a1)
{
  return (double)(int)objc_msgSend(a1, "buttonAUpDelay");
}

uint64_t MRGameControllerPropertiesSetProfile(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setProfile:", a2);
}

uint64_t MRGameControllerPropertiesSetSupportsExtendedMotion(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSupportsExtendedMotion:", a2);
}

uint64_t MRGameControllerPropertiesSetVendorName(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setVendorName:", a2);
}

uint64_t MRGameControllerPropertiesCopyVendorName(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "vendorName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

void MRGameControllerServerGetRemoteInputMode(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = a1;
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "service");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  MRMediaRemoteServiceGetGameControllerRemoteInputMode(v6, v4, v3);
}

void MRGameControllerServerSetRemoteInputMode(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v5 = a3;
  v6 = a2;
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "service");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "originClientForOrigin:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "setInputMode:", a1);
  MRMediaRemoteServiceSetGameControllerRemoteInputMode(v11, a1, v6, v5);

}

__CFString *MRGameControllerInputModeCreateDescription(char a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppend(Mutable, CFSTR("MRGameControllerInputModeNone |"));
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
      goto LABEL_3;
LABEL_7:
    CFStringAppend(Mutable, CFSTR("MRGameControllerInputModeCaptureButtons |"));
    if ((a1 & 4) == 0)
      return Mutable;
    goto LABEL_4;
  }
  CFStringAppend(Mutable, CFSTR("MRGameControllerInputModeCaptureMotion |"));
  if ((a1 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((a1 & 4) != 0)
LABEL_4:
    CFStringAppend(Mutable, CFSTR("MRGameControllerInputModeCaptureDigitizer"));
  return Mutable;
}

const __CFString *MRGameControllerPlayerIndexCreateDescription(unsigned int a1)
{
  if (a1 > 3)
    return CFSTR("MRGameControllerPlayerIndexUnset");
  else
    return off_1E30C9070[a1];
}

const __CFString *MRGameControllerEventTypeCreateDescription(unsigned int a1)
{
  if (a1 > 4)
    return CFSTR("Unknown");
  else
    return off_1E30C9090[a1];
}

uint64_t MRGameControllerEventCreateDescription(uint64_t a1)
{
  __int128 v1;
  uint64_t Description;
  __CFString *v3;
  __int128 v4;
  const __CFString *v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];

  switch(*(_DWORD *)a1)
  {
    case 1:
      v1 = *(_OWORD *)(a1 + 24);
      v8 = *(_OWORD *)(a1 + 8);
      v9 = v1;
      v10[0] = *(_OWORD *)(a1 + 40);
      Description = MRGameControllerMotionCreateDescription(&v8);
      goto LABEL_10;
    case 2:
      Description = MRGameControllerButtonsCreateDescription(*(float *)(a1 + 8), *(float *)(a1 + 12), *(float *)(a1 + 16));
      goto LABEL_10;
    case 3:
      v4 = *(_OWORD *)(a1 + 24);
      v8 = *(_OWORD *)(a1 + 8);
      v9 = v4;
      v10[0] = *(_OWORD *)(a1 + 40);
      *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)(a1 + 52);
      Description = MRGameControllerButtonsExtendedCreateDescription((float *)&v8);
      goto LABEL_10;
    case 4:
      if (*(_BYTE *)(a1 + 16))
        v5 = CFSTR("true");
      else
        v5 = CFSTR("false");
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Digitizer: { \nx: %lf \ny: %lf \ntouchDown: %@ \n}"), *(float *)(a1 + 8), *(float *)(a1 + 12), v5);
      Description = objc_claimAutoreleasedReturnValue();
LABEL_10:
      v3 = (__CFString *)Description;
      break;
    default:
      v3 = CFSTR("Unknown Event: Did you remember to use the event initializers?");
      break;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Game Controller Event: {\n%@\n}"), v3);
  v6 = objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t MRGameControllerMotionCreateDescription(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Acceleration: {\nx:%lf y:%lf z:%lf\n}"), *a1, a1[1], a1[2]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Acceleration: {\nx:%lf y:%lf z:%lf\n}"), a1[3], a1[4], a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Motion: {\nGravity: %@ \nUserAcceleration: %@\n}"), v2, v3);
  v4 = objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t MRGameControllerButtonsCreateDescription(float a1, float a2, float a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("Buttons: {\n"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (a1 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("buttonA:%lf\n"), a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "appendString:", v7);

  }
  if (a2 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("buttonX:%lf\n"), a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "appendString:", v8);

  }
  if (a3 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("buttonPause:%lf\n"), a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "appendString:", v9);

  }
  objc_msgSend(v6, "appendString:", CFSTR("\n}"));
  v10 = objc_msgSend(v6, "copy");

  return v10;
}

uint64_t MRGameControllerButtonsExtendedCreateDescription(float *a1)
{
  void *v2;
  float v3;
  void *v4;
  float v5;
  void *v6;
  float v7;
  void *v8;
  float v9;
  void *v10;
  float v11;
  void *v12;
  float v13;
  void *v14;
  float v15;
  void *v16;
  float v17;
  void *v18;
  float v19;
  void *v20;
  float v21;
  void *v22;
  float v23;
  void *v24;
  float v25;
  void *v26;
  void *Description;
  uint64_t v28;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("Extended Buttons: {\n"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = a1[3];
  if (v3 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("dpadX:%lf\n"), v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v4);

  }
  v5 = a1[4];
  if (v5 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("dpadY:%lf\n"), v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v6);

  }
  v7 = a1[5];
  if (v7 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("buttonB:%lf\n"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v8);

  }
  v9 = a1[6];
  if (v9 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("buttonY:%lf\n"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v10);

  }
  v11 = a1[7];
  if (v11 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("leftShoulder:%lf\n"), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v12);

  }
  v13 = a1[8];
  if (v13 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("rightShoulder:%lf\n"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v14);

  }
  v15 = a1[9];
  if (v15 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("leftThumbstickX:%lf\n"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v16);

  }
  v17 = a1[10];
  if (v17 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("leftThumbstickY:%lf\n"), v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v18);

  }
  v19 = a1[11];
  if (v19 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("rightThumbstickX:%lf\n"), v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v20);

  }
  v21 = a1[12];
  if (v21 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("rightThumbstickY:%lf\n"), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v22);

  }
  v23 = a1[13];
  if (v23 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("leftTrigger:%lf\n"), v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v24);

  }
  v25 = a1[14];
  if (v25 != -1337.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("rightTrigger:%lf\n"), v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v26);

  }
  Description = (void *)MRGameControllerButtonsCreateDescription(*a1, a1[1], a1[2]);
  objc_msgSend(v2, "appendString:", Description);
  objc_msgSend(v2, "appendString:", CFSTR("\n}"));
  v28 = objc_msgSend(v2, "copy");

  return v28;
}

uint64_t MRGameControllerDigitizerCreateDescription(uint64_t a1)
{
  const __CFString *v1;

  if (*(_BYTE *)(a1 + 8))
    v1 = CFSTR("true");
  else
    v1 = CFSTR("false");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Digitizer: { \nx: %lf \ny: %lf \ntouchDown: %@ \n}"), *(float *)a1, *(float *)(a1 + 4), v1);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRGameControllerAccelerationCreateDescription(double a1, double a2, double a3)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Acceleration: {\nx:%lf y:%lf z:%lf\n}"), *(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
  return objc_claimAutoreleasedReturnValue();
}

double MRGameControllerAccelerationMake()
{
  return -1337.0;
}

int64x2_t MRGameControllerMotionMake@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(0xC094E40000000000);
  *a1 = result;
  a1[1] = result;
  a1[2] = result;
  return result;
}

float MRGameControllerButtonsMake()
{
  return -1337.0;
}

int32x4_t MRGameControllerButtonsExtendedMake@<Q0>(int32x4_t *a1@<X8>)
{
  int32x4_t result;

  result = vdupq_n_s32(0xC4A72000);
  *a1 = result;
  a1[1] = result;
  a1[3].i32[2] = -995680256;
  a1[3].i64[0] = result.i64[0];
  a1[2] = result;
  return result;
}

int32x2_t MRGameControllerDigitizerMake@<D0>(int32x2_t *a1@<X8>)
{
  int32x2_t result;

  result = vdup_n_s32(0xC4A72000);
  *a1 = result;
  a1[1] = 0;
  a1[2] = 0;
  a1[1].i8[0] = 1;
  return result;
}

double MRGameControllerEventMake@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int32x4_t v2;
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = a1;
  switch(a1)
  {
    case 1:
      v2 = (int32x4_t)vdupq_n_s64(0xC094E40000000000);
      *(int32x4_t *)(a2 + 8) = v2;
      *(int32x4_t *)(a2 + 24) = v2;
      *(int32x4_t *)(a2 + 40) = v2;
      break;
    case 2:
      *(int32x2_t *)v2.i8 = vdup_n_s32(0xC4A72000);
      *(_QWORD *)(a2 + 8) = v2.i64[0];
      *(_DWORD *)(a2 + 16) = -995680256;
      break;
    case 3:
      v2 = vdupq_n_s32(0xC4A72000);
      *(int32x4_t *)(a2 + 8) = v2;
      *(int32x4_t *)(a2 + 24) = v2;
      *(int32x4_t *)(a2 + 40) = v2;
      *(_QWORD *)(a2 + 56) = v2.i64[0];
      *(_DWORD *)(a2 + 64) = -995680256;
      break;
    case 4:
      *(int32x2_t *)v2.i8 = vdup_n_s32(0xC4A72000);
      *(_QWORD *)(a2 + 8) = v2.i64[0];
      *(_QWORD *)(a2 + 16) = 1;
      break;
    default:
      _MRLogForCategory(0);
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v6 = 134217984;
        v7 = a1;
        _os_log_impl(&dword_193827000, v4, OS_LOG_TYPE_DEFAULT, "Unknown MRGameControllerEventType: %ld", (uint8_t *)&v6, 0xCu);
      }

      break;
  }
  return *(double *)v2.i64;
}

void MRMediaRemoteSendPlaybackSession(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  NSObject *v22;
  MRPlaybackSessionMigrateRequestMessage *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a5;
  v13 = (void *)MEMORY[0x1E0C99D68];
  v14 = a4;
  objc_msgSend(v13, "date");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (v9)
    v17 = objc_msgSend(v16, "initWithFormat:", CFSTR("destination=<%@>, playbackSession=<%@>, request=<%@>"), v11, v9, v10);
  else
    v17 = objc_msgSend(v16, "initWithFormat:", CFSTR("destination=<%@>, request=<%@>"), v11, v10, v29);
  v18 = (void *)v17;
  v19 = objc_alloc(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v10, "requestID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_msgSend(v19, "initWithFormat:", CFSTR("%@<%@>"), CFSTR("sendPlaybackSession"), v20);

  if (v18)
    objc_msgSend(v21, "appendFormat:", CFSTR(" for %@"), v18);
  _MRLogForCategory(0xAuLL);
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v36 = v21;
    _os_log_impl(&dword_193827000, v22, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v23 = -[MRPlaybackSessionMigrateRequestMessage initWithPlaybackSession:request:forPlayerPath:]([MRPlaybackSessionMigrateRequestMessage alloc], "initWithPlaybackSession:request:forPlayerPath:", v9, v10, v11);
  v24 = (void *)MRGetSharedService();
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __MRMediaRemoteSendPlaybackSession_block_invoke;
  v30[3] = &unk_1E30C90C0;
  v31 = v11;
  v32 = v10;
  v33 = v15;
  v34 = v12;
  v25 = v12;
  v26 = v15;
  v27 = v10;
  v28 = v11;
  MRMediaRemoteServiceSendPlaybackSession(v24, v23, v14, v30);

}

void MRMediaRemoteSendPlaybackSessionMigrateBegin(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  MRPlaybackSessionMigrateBeginMessage *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = (void *)MEMORY[0x1E0C99D68];
  v11 = a3;
  objc_msgSend(v10, "now");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_alloc(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v7, "requestIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v13, "initWithFormat:", CFSTR("%@<%@>"), CFSTR("sendPlaybackSessionMigrateBegin"), v14);

  if (v8)
    objc_msgSend(v15, "appendFormat:", CFSTR(" for %@"), v8);
  _MRLogForCategory(0xAuLL);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v29 = v15;
    _os_log_impl(&dword_193827000, v16, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v17 = -[MRPlaybackSessionMigrateBeginMessage initWithRequest:playerPath:]([MRPlaybackSessionMigrateBeginMessage alloc], "initWithRequest:playerPath:", v7, v8);
  v18 = (void *)MRGetSharedService();
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __MRMediaRemoteSendPlaybackSessionMigrateBegin_block_invoke;
  v23[3] = &unk_1E30C90E8;
  v24 = v8;
  v25 = v7;
  v26 = v12;
  v27 = v9;
  v19 = v9;
  v20 = v12;
  v21 = v7;
  v22 = v8;
  MRMediaRemoteServiceSendPlaybackSessionMigrateBegin(v18, v17, v11, v23);

}

void MRMediaRemoteSendPlaybackSessionMigrateEnd(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  NSObject *v19;
  MRPlaybackSessionMigrateEndMessage *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v11 = a5;
  v12 = (void *)MEMORY[0x1E0C99D68];
  v13 = a4;
  v14 = a2;
  objc_msgSend(v12, "now");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_alloc(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v9, "requestIdentifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v16, "initWithFormat:", CFSTR("%@<%@>"), CFSTR("sendPlaybackSessionMigrateEnd"), v17);

  if (v10)
    objc_msgSend(v18, "appendFormat:", CFSTR(" for %@"), v10);
  _MRLogForCategory(0xAuLL);
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v32 = v18;
    _os_log_impl(&dword_193827000, v19, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v20 = -[MRPlaybackSessionMigrateEndMessage initWithRequest:error:playerPath:]([MRPlaybackSessionMigrateEndMessage alloc], "initWithRequest:error:playerPath:", v9, v14, v10);
  v21 = (void *)MRGetSharedService();
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __MRMediaRemoteSendPlaybackSessionMigrateEnd_block_invoke;
  v26[3] = &unk_1E30C90E8;
  v27 = v10;
  v28 = v9;
  v29 = v15;
  v30 = v11;
  v22 = v11;
  v23 = v15;
  v24 = v9;
  v25 = v10;
  MRMediaRemoteServiceSendPlaybackSessionMigrateEnd(v21, v20, v13, v26);

}

void _MRMediaRemotePlaybackSessionRequestSupportedType(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);
  void *v15;
  char v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  NSObject *ErrorWithDescription;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v31[4];
  NSObject *v32;
  _QWORD *v33;
  _QWORD v34[5];
  id v35;
  _QWORD v36[4];
  NSObject *v37;
  _QWORD *v38;
  _QWORD v39[5];
  id v40;
  _QWORD v41[4];
  NSObject *v42;
  _QWORD *v43;
  _QWORD v44[5];
  id v45;
  _QWORD v46[4];
  id v47;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if ((objc_msgSend(v7, "isResolved") & 1) != 0)
  {
    if (v9)
      goto LABEL_4;
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRMediaRemotePlaybackSessionRequestSupportedType(MRPlayerPath *__strong, MRPlayerPath *__strong, __strong dispatch_queue_t, void (^__strong)(NSString *__strong, NSError *__strong))");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, CFSTR("MRPlaybackSessionMigrateRequestResponse.m"), 74, CFSTR("Attempting to use unresolved Player Path"));

  if (!v9)
  {
LABEL_3:
    v9 = MEMORY[0x1E0C80D38];
    v11 = MEMORY[0x1E0C80D38];
  }
LABEL_4:
  v12 = MEMORY[0x1E0C809B0];
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = ___MRMediaRemotePlaybackSessionRequestSupportedType_block_invoke;
  v46[3] = &unk_1E30C9110;
  v13 = v10;
  v47 = v13;
  v14 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x194036C44](v46);
  +[MRUserSettings currentSettings](MRUserSettings, "currentSettings");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "supportMigration");

  if ((v16 & 1) != 0)
  {
    v17 = dispatch_group_create();
    dispatch_group_enter(v17);
    v44[0] = 0;
    v44[1] = v44;
    v44[2] = 0x3032000000;
    v44[3] = __Block_byref_object_copy__12;
    v44[4] = __Block_byref_object_dispose__12;
    v45 = 0;
    v41[0] = v12;
    v41[1] = 3221225472;
    v41[2] = ___MRMediaRemotePlaybackSessionRequestSupportedType_block_invoke_35;
    v41[3] = &unk_1E30C9138;
    v43 = v44;
    v18 = v17;
    v42 = v18;
    MRMediaRemoteGetSupportedCommandsForPlayer(v7, v9, v41);
    dispatch_group_enter(v18);
    v39[0] = 0;
    v39[1] = v39;
    v39[2] = 0x3032000000;
    v39[3] = __Block_byref_object_copy__12;
    v39[4] = __Block_byref_object_dispose__12;
    v40 = 0;
    v36[0] = v12;
    v36[1] = 3221225472;
    v36[2] = ___MRMediaRemotePlaybackSessionRequestSupportedType_block_invoke_2;
    v36[3] = &unk_1E30C9138;
    v38 = v39;
    v19 = v18;
    v37 = v19;
    MRMediaRemoteGetSupportedCommandsForPlayer(v8, v9, v36);
    dispatch_group_enter(v19);
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3032000000;
    v34[3] = __Block_byref_object_copy__12;
    v34[4] = __Block_byref_object_dispose__12;
    v35 = 0;
    objc_msgSend(v7, "origin");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = v12;
    v31[1] = 3221225472;
    v31[2] = ___MRMediaRemotePlaybackSessionRequestSupportedType_block_invoke_3;
    v31[3] = &unk_1E30C9160;
    v33 = v34;
    ErrorWithDescription = v19;
    v32 = ErrorWithDescription;
    +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:](MRDeviceInfoRequest, "deviceInfoForOrigin:queue:completion:", v20, v9, v31);

    v24[0] = v12;
    v24[1] = 3221225472;
    v24[2] = ___MRMediaRemotePlaybackSessionRequestSupportedType_block_invoke_4;
    v24[3] = &unk_1E30C9188;
    v28 = v34;
    v25 = v7;
    v29 = v44;
    v30 = v39;
    v27 = v14;
    v26 = v8;
    dispatch_group_notify(ErrorWithDescription, v9, v24);

    _Block_object_dispose(v34, 8);
    _Block_object_dispose(v39, 8);

    _Block_object_dispose(v44, 8);
  }
  else
  {
    ErrorWithDescription = MRMediaRemoteCreateErrorWithDescription(6, (uint64_t)CFSTR("Migration feature not enabled"));
    ((void (**)(_QWORD, _QWORD, NSObject *))v14)[2](v14, 0, ErrorWithDescription);
  }

}

void sub_19392F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t MRPlaybackSessionMigrateCopySupportedTypeMatch(void *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = (void *)MRPlaybackSessionMigrateCopySupportedTypes(a2);
  v4 = (void *)MRPlaybackSessionMigrateCopyCurrentTypes(a1);
  __MRPlaybackSessionMigrateCopySupportedTypeMatch_block_invoke((uint64_t)v4, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "copy");
  return v6;
}

uint64_t MRPlaybackSessionMigrateCopyCurrentTypes(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "command", (_QWORD)v8) == 133)
        {
          if (objc_msgSend(v5, "isEnabled"))
          {
            objc_msgSend(v5, "options");
            v6 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteCommandInfoCurrentPlaybackSessionTypes"));
            v2 = objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v2 = 0;
          }
          goto LABEL_13;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_13:

  return v2;
}

uint64_t MRPlaybackSessionMigrateCopySupportedTypes(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v9 != v3)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v5, "command", (_QWORD)v8) == 133)
        {
          if (objc_msgSend(v5, "isEnabled"))
          {
            objc_msgSend(v5, "options");
            v6 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes"));
            v2 = objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v2 = 0;
          }
          goto LABEL_13;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_13:

  return v2;
}

void MRMediaRemotePlaybackSessionRequestSupportedType(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;

  v7 = a3;
  v8 = a4;
  v9 = a1;
  v10 = a2;
  v11 = MEMORY[0x1E0C809B0];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __MRMediaRemotePlaybackSessionRequestSupportedType_block_invoke;
  v23[3] = &unk_1E30C91D8;
  v25 = v8;
  v12 = v7;
  v24 = v12;
  v13 = v8;
  v18[0] = v11;
  v18[1] = 3221225472;
  v18[2] = __MRMediaRemotePlaybackSessionRequestSupportedType_block_invoke_3;
  v18[3] = &unk_1E30C9228;
  v19 = v10;
  v20 = v12;
  v21 = v9;
  v22 = (id)MEMORY[0x194036C44](v23);
  v14 = v9;
  v15 = v22;
  v16 = v12;
  v17 = v10;
  MRMediaRemoteNowPlayingResolvePlayerPath(v14, v16, v18);

}

uint64_t MRPlaybackSessionMigrateCopyCorrespondingPlayerPath(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isResolved") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerPathRef MRPlaybackSessionMigrateCopyCorrespondingPlayerPath(MRNowPlayingPlayerPathRef, MROriginRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRPlaybackSessionMigrateRequestResponse.m"), 677, CFSTR("Non resolved playerPath"));

  }
  objc_msgSend(v3, "playerPathByRedirectingToOrigin:", v4);
  v5 = objc_claimAutoreleasedReturnValue();

  return v5;
}

void MRMediaRemotePlaybackSessionRequestSupportedTypeForOrigin(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  MRMediaRemotePlaybackSessionRequestSupportedType(v9, a2, v8, v7);

}

void _MRMediaRemotePlaybackSessionMigrateForPlayer(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD v51[4];
  id v52;
  id v53;
  id v54;
  _QWORD v55[4];
  id v56;
  id v57;
  id v58;
  _QWORD *v59;
  _QWORD v60[4];
  _QWORD v61[5];
  id v62;
  _QWORD v63[5];
  id v64;
  _QWORD v65[3];
  int v66;
  _QWORD v67[4];
  id v68;
  id v69;
  _QWORD v70[4];
  id v71;
  id v72;
  id v73;

  v9 = a1;
  v10 = a2;
  v40 = a3;
  v11 = a4;
  v12 = a5;
  v13 = MEMORY[0x1E0C809B0];
  v70[0] = MEMORY[0x1E0C809B0];
  v70[1] = 3221225472;
  v70[2] = ___MRMediaRemotePlaybackSessionMigrateForPlayer_block_invoke;
  v70[3] = &unk_1E30C9250;
  v14 = v9;
  v71 = v14;
  v15 = v10;
  v72 = v15;
  v16 = v11;
  v73 = v16;
  v67[0] = v13;
  v67[1] = 3221225472;
  v67[2] = ___MRMediaRemotePlaybackSessionMigrateForPlayer_block_invoke_4;
  v67[3] = &unk_1E30C9278;
  v38 = (id)MEMORY[0x194036C44](v70);
  v68 = v38;
  v39 = v12;
  v69 = v39;
  v17 = (void *)MEMORY[0x194036C44](v67);
  +[MRUserSettings currentSettings](MRUserSettings, "currentSettings");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a3) = objc_msgSend(v18, "forceFadeForEveryHandoff");

  if ((_DWORD)a3)
    objc_msgSend(v14, "setPlayerOptions:", objc_msgSend(v14, "playerOptions") | 0x40);
  v65[0] = 0;
  v65[1] = v65;
  v65[2] = 0x2020000000;
  v66 = 0;
  v63[0] = 0;
  v63[1] = v63;
  v63[2] = 0x3032000000;
  v63[3] = __Block_byref_object_copy__12;
  v63[4] = __Block_byref_object_dispose__12;
  v64 = 0;
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x3032000000;
  v61[3] = __Block_byref_object_copy__12;
  v61[4] = __Block_byref_object_dispose__12;
  v62 = 0;
  v60[0] = 0;
  v60[1] = v60;
  v60[2] = 0x2020000000;
  v60[3] = 0;
  v55[0] = v13;
  v55[1] = 3221225472;
  v55[2] = ___MRMediaRemotePlaybackSessionMigrateForPlayer_block_invoke_6;
  v55[3] = &unk_1E30C92C8;
  v19 = v14;
  v56 = v19;
  v20 = v15;
  v57 = v20;
  v21 = v16;
  v58 = v21;
  v59 = v61;
  v22 = (void *)MEMORY[0x194036C44](v55);
  v23 = v13;
  v51[0] = v13;
  v51[1] = 3221225472;
  v51[2] = ___MRMediaRemotePlaybackSessionMigrateForPlayer_block_invoke_9;
  v51[3] = &unk_1E30C92F0;
  v24 = v19;
  v52 = v24;
  v25 = v20;
  v53 = v25;
  v26 = v21;
  v54 = v26;
  v27 = (void *)MEMORY[0x194036C44](v51);
  v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v29 = (void *)objc_msgSend(v27, "copy");
  v30 = (void *)MEMORY[0x194036C44]();
  objc_msgSend(v28, "addObject:", v30);

  v31 = (void *)objc_msgSend(v22, "copy");
  v32 = (void *)MEMORY[0x194036C44]();
  objc_msgSend(v28, "addObject:", v32);

  v41[0] = v23;
  v41[1] = 3221225472;
  v41[2] = ___MRMediaRemotePlaybackSessionMigrateForPlayer_block_invoke_12;
  v41[3] = &unk_1E30C9548;
  v33 = v24;
  v42 = v33;
  v34 = v25;
  v43 = v34;
  v35 = v26;
  v44 = v35;
  v47 = v63;
  v48 = v65;
  v36 = v40;
  v45 = v36;
  v49 = v61;
  v50 = v60;
  v37 = v17;
  v46 = v37;
  MRPerformAsyncOperationsUntilError(v28, v41);

  _Block_object_dispose(v60, 8);
  _Block_object_dispose(v61, 8);

  _Block_object_dispose(v63, 8);
  _Block_object_dispose(v65, 8);

}

void sub_193930394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 240), 8);
  _Unwind_Resume(a1);
}

void _MRMediaRemotePlaybackSessionMigrateForOrigin(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  MRPlaybackSessionMigrateRequest *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  MRPlaybackSessionMigrateRequest *v25;
  id v26;
  _QWORD v27[4];
  MRPlaybackSessionMigrateRequest *v28;
  __CFString *v29;
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (v12)
  {
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v12 = (id)MEMORY[0x1E0C80D38];
    v26 = MEMORY[0x1E0C80D38];
    if (v9)
      goto LABEL_3;
  }
  v9 = objc_alloc_init(MRPlaybackSessionMigrateRequest);
LABEL_3:
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend(v11, "displayName");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithFormat:", CFSTR("source=%@ destination=%@ request=%@"), v10, v16, v9);

  v18 = objc_alloc(MEMORY[0x1E0CB37A0]);
  -[MRPlaybackSessionMigrateRequest requestID](v9, "requestID");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v18, "initWithFormat:", CFSTR("%@<%@>"), CFSTR("migratePlaybackSession"), v19);

  if (v17)
    objc_msgSend(v20, "appendFormat:", CFSTR(" for %@"), v17);
  _MRLogForCategory(0xAuLL);
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v34 = v20;
    _os_log_impl(&dword_193827000, v21, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  -[MRPlaybackSessionMigrateRequest startEvent:](v9, "startEvent:", CFSTR("requestType"));
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = ___MRMediaRemotePlaybackSessionMigrateForOrigin_block_invoke;
  v27[3] = &unk_1E30C9598;
  v28 = v9;
  v29 = CFSTR("migratePlaybackSession");
  v31 = v12;
  v32 = v13;
  v30 = v14;
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v25 = v9;
  MRMediaRemotePlaybackSessionRequestSupportedType(v10, v11, v22, v27);

}

void MRMediaRemotePlaybackSessionMigrate(void *a1, void *a2, void *a3, void *a4)
{
  MRMediaRemotePlaybackSessionMigrateWithRequest(0, a1, a2, a3, a4);
}

void MRMediaRemotePlaybackSessionMigrateWithRequest(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v9 = a5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRMediaRemotePlaybackSessionMigrateWithRequest_block_invoke;
  v11[3] = &unk_1E30C6798;
  v12 = v9;
  v10 = v9;
  _MRMediaRemotePlaybackSessionMigrateForOrigin(a1, a2, a3, a4, v11);

}

void MRMediaRemotePlaybackSessionMigrateForOrigin(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;

  v7 = a4;
  v8 = a3;
  v9 = objc_alloc_init(MRPlayerPath);
  -[MRPlayerPath setOrigin:](v9, "setOrigin:", a1);
  MRMediaRemotePlaybackSessionMigrateWithRequest(0, v9, a2, v8, v7);

}

void MRMediaRemotePlaybackSessionMigrateForOriginWithRequest(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  MRPlayerPath *v16;

  v9 = a5;
  v10 = a4;
  v16 = objc_alloc_init(MRPlayerPath);
  -[MRPlayerPath setOrigin:](v16, "setOrigin:", a2);
  v11 = a1;
  objc_msgSend(v11, "playerPath");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "client");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[MRPlayerPath setClient:](v16, "setClient:", v13);

  objc_msgSend(v11, "playerPath");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "player");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[MRPlayerPath setPlayer:](v16, "setPlayer:", v15);

  MRMediaRemotePlaybackSessionMigrateWithRequest(v11, v16, a3, v10, v9);
}

void MRMediaRemotePlaybackSessionMigrateForDevice(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  MRAVLightweightReconnaissanceSession *v19;
  void *v20;
  MRAVLightweightReconnaissanceSession *v21;
  MRAVLightweightReconnaissanceSession *v22;
  void *v23;
  MRAVLightweightReconnaissanceSession *v24;
  MRPlaybackSessionMigrateRequest *v25;
  NSObject *v26;
  id v27;
  MRPlaybackSessionMigrateRequest *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD block[4];
  __CFString *v34;
  id v35;
  id v36;
  MRPlaybackSessionMigrateRequest *v37;
  id v38;
  id v39;
  __int128 *v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD v44[4];
  MRAVLightweightReconnaissanceSession *v45;
  id v46;
  NSObject *v47;
  _QWORD *v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD v51[4];
  MRAVLightweightReconnaissanceSession *v52;
  id v53;
  __CFString *v54;
  NSObject *v55;
  _QWORD *v56;
  __int128 *p_buf;
  _QWORD v58[5];
  id v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  id v65;
  _QWORD v66[5];
  id v67;
  __int128 buf;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  void (*v71)(uint64_t);
  id v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (!v7)
  {
    v7 = (id)MEMORY[0x1E0C80D38];
    v9 = MEMORY[0x1E0C80D38];
  }
  v32 = a1;
  v31 = a2;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("source=%@ destination=%@"), v32, v31);
  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("migratePlaybackSessionForDevice"), v12);
  v15 = v14;
  if (v13)
    objc_msgSend(v14, "appendFormat:", CFSTR(" for %@"), v13);
  _MRLogForCategory(0xAuLL);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_193827000, v16, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v69 = 0x3032000000;
  v70 = __Block_byref_object_copy__12;
  v71 = __Block_byref_object_dispose__12;
  v72 = 0;
  v66[0] = 0;
  v66[1] = v66;
  v66[2] = 0x3032000000;
  v66[3] = __Block_byref_object_copy__12;
  v66[4] = __Block_byref_object_dispose__12;
  v67 = 0;
  v60 = 0;
  v61 = &v60;
  v62 = 0x3032000000;
  v63 = __Block_byref_object_copy__12;
  v64 = __Block_byref_object_dispose__12;
  v65 = 0;
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x3032000000;
  v58[3] = __Block_byref_object_copy__12;
  v58[4] = __Block_byref_object_dispose__12;
  v59 = 0;
  v17 = dispatch_group_create();
  v18 = v17;
  if (!*(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
  {
    dispatch_group_enter(v17);
    v19 = objc_alloc_init(MRAVLightweightReconnaissanceSession);
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("migratePlaybackSessionForDevice"), v12);
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = __MRMediaRemotePlaybackSessionMigrateForDevice_block_invoke;
    v51[3] = &unk_1E30C95E8;
    v21 = v19;
    v52 = v21;
    v53 = v12;
    v54 = CFSTR("migratePlaybackSessionForDevice");
    v56 = v58;
    p_buf = &buf;
    v55 = v18;
    -[MRAVLightweightReconnaissanceSession searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:](v21, "searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:", v32, v20, v7, v51, 7.0);

  }
  if (!v61[5])
  {
    dispatch_group_enter(v18);
    v22 = objc_alloc_init(MRAVLightweightReconnaissanceSession);
    v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("migratePlaybackSessionForDevice"), v12);
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3221225472;
    v44[2] = __MRMediaRemotePlaybackSessionMigrateForDevice_block_invoke_3;
    v44[3] = &unk_1E30C9610;
    v24 = v22;
    v45 = v24;
    v48 = v66;
    v49 = &v60;
    v46 = v31;
    v50 = v58;
    v47 = v18;
    -[MRAVLightweightReconnaissanceSession searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:](v24, "searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:", v46, v23, v7, v44, 7.0);

  }
  v25 = objc_alloc_init(MRPlaybackSessionMigrateRequest);
  -[MRPlaybackSessionMigrateRequest setInitiator:](v25, "setInitiator:", CFSTR("shortcuts"));
  -[MRPlaybackSessionMigrateRequest setRequestID:](v25, "setRequestID:", v12);
  -[MRPlaybackSessionMigrateRequest setPlayerOptions:](v25, "setPlayerOptions:", -[MRPlaybackSessionMigrateRequest playerOptions](v25, "playerOptions") | 4);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MRMediaRemotePlaybackSessionMigrateForDevice_block_invoke_5;
  block[3] = &unk_1E30C9660;
  v40 = &buf;
  v41 = &v60;
  v34 = CFSTR("migratePlaybackSessionForDevice");
  v35 = v12;
  v36 = v10;
  v37 = v25;
  v38 = v7;
  v39 = v8;
  v42 = v66;
  v43 = v58;
  v26 = v7;
  v27 = v8;
  v28 = v25;
  v29 = v10;
  v30 = v12;
  dispatch_group_notify(v18, v26, block);

  _Block_object_dispose(v58, 8);
  _Block_object_dispose(&v60, 8);

  _Block_object_dispose(v66, 8);
  _Block_object_dispose(&buf, 8);

}

void sub_193932F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 240), 8);
  _Block_object_dispose((const void *)(v47 - 192), 8);
  _Block_object_dispose((const void *)(v47 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_4_2(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 48));
}

uint64_t _MRSetConversationDetectionEnabledMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRPlaybackSessionMigrateFallbackReasonFromMRMediaRemoteError(uint64_t a1)
{
  if ((unint64_t)(a1 - 150) >= 6)
    return 16;
  else
    return a1 - 144;
}

void *MRMediaRemotePlaybackSessionMigratePlayerOptionsCopyDescription(uint64_t a1)
{
  id v2;
  void *v3;
  const __CFString *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v3 = v2;
  if (!a1)
  {
    v4 = CFSTR("None | ");
LABEL_14:
    objc_msgSend(v3, "appendString:", v4);
    return v3;
  }
  if ((a1 & 2) != 0)
  {
    objc_msgSend(v2, "appendString:", CFSTR("RestorePlaybackState | "));
    if ((a1 & 4) == 0)
    {
LABEL_4:
      if ((a1 & 8) == 0)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "appendString:", CFSTR("PlayDestination | "));
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  objc_msgSend(v3, "appendString:", CFSTR("PauseSource | "));
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      return v3;
    goto LABEL_13;
  }
LABEL_12:
  objc_msgSend(v3, "appendString:", CFSTR("RestorePlaybackPosition | "));
  if ((a1 & 0x20) != 0)
  {
LABEL_13:
    v4 = CFSTR("RestorePlaybackRate | ");
    goto LABEL_14;
  }
  return v3;
}

void *MRMediaRemotePlaybackSessionMigrateEndpointOptionsCopyDescription(uint64_t a1)
{
  id v2;
  void *v3;
  const __CFString *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v3 = v2;
  if (!a1)
  {
    v4 = CFSTR("None | ");
LABEL_14:
    objc_msgSend(v3, "appendString:", v4);
    return v3;
  }
  if ((a1 & 2) != 0)
  {
    objc_msgSend(v2, "appendString:", CFSTR("UpdateActiveEndpointToDestination | "));
    if ((a1 & 4) == 0)
    {
LABEL_4:
      if ((a1 & 8) == 0)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "appendString:", CFSTR("ResetOutputContext | "));
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  objc_msgSend(v3, "appendString:", CFSTR("FallbackToAddOutputDevices | "));
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      return v3;
    goto LABEL_13;
  }
LABEL_12:
  objc_msgSend(v3, "appendString:", CFSTR("AllowMigrateToGroup | "));
  if ((a1 & 0x20) != 0)
  {
LABEL_13:
    v4 = CFSTR("AllowMigrateFromGroup | ");
    goto LABEL_14;
  }
  return v3;
}

uint64_t MRMediaRemotePlaybackSessionMigratePlayerOptionsGetDefault()
{
  return 58;
}

uint64_t MRMediaRemotePlaybackSessionMigrateEndpointOptionsGetDefault()
{
  return 58;
}

void sub_19393CBEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CC44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CCAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CD28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CDAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CE28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CEAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CF04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19393CFB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19393D06C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19393D120(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19393D1E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19393D2A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D3A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D428(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D4A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D528(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D57C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D5D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19393E1DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393E25C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393E354(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393E594(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393E8C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393E918(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393E978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19393EB64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19393EF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19393F8E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19393FA08(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

Class initCURunLoopThread()
{
  Class result;

  if (CoreUtilsLibrary_sOnce != -1)
    dispatch_once(&CoreUtilsLibrary_sOnce, &__block_literal_global_39);
  result = objc_getClass("CURunLoopThread");
  classCURunLoopThread = (uint64_t)result;
  getCURunLoopThreadClass = (uint64_t (*)())CURunLoopThreadFunction;
  return result;
}

id CURunLoopThreadFunction()
{
  return (id)classCURunLoopThread;
}

uint64_t _MRAudioFormatProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 80) |= 0x40u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_89;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_91;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_89:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_91:
          v70 = 72;
          goto LABEL_126;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 80) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_95:
          v71 = 16;
          goto LABEL_104;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 80) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_99:
          v71 = 24;
          goto LABEL_104;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 80) |= 1u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_103:
          v71 = 8;
LABEL_104:
          *(_QWORD *)(a1 + v71) = v26;
          continue;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 80) |= 0x10u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v19 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_108;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_108:
          v70 = 44;
          goto LABEL_126;
        case 6u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          *(_WORD *)(a1 + 80) |= 0x100u;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v47 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  v47 = 0;
                  goto LABEL_112;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v47 = 0;
LABEL_112:
          v72 = v47 != 0;
          v73 = 77;
          goto LABEL_117;
        case 7u:
          v51 = 0;
          v52 = 0;
          v53 = 0;
          *(_WORD *)(a1 + 80) |= 0x80u;
          while (2)
          {
            v54 = *v3;
            v55 = *(_QWORD *)(a2 + v54);
            if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
              *(_QWORD *)(a2 + v54) = v55 + 1;
              v53 |= (unint64_t)(v56 & 0x7F) << v51;
              if (v56 < 0)
              {
                v51 += 7;
                v14 = v52++ >= 9;
                if (v14)
                {
                  v53 = 0;
                  goto LABEL_116;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v53 = 0;
LABEL_116:
          v72 = v53 != 0;
          v73 = 76;
LABEL_117:
          *(_BYTE *)(a1 + v73) = v72;
          continue;
        case 8u:
          v57 = 0;
          v58 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 80) |= 8u;
          while (2)
          {
            v59 = *v3;
            v60 = *(_QWORD *)(a2 + v59);
            if (v60 == -1 || v60 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v60);
              *(_QWORD *)(a2 + v59) = v60 + 1;
              v19 |= (unint64_t)(v61 & 0x7F) << v57;
              if (v61 < 0)
              {
                v57 += 7;
                v14 = v58++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_121;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_121:
          v70 = 40;
          goto LABEL_126;
        case 9u:
          PBReaderReadString();
          v62 = objc_claimAutoreleasedReturnValue();
          v63 = 32;
          goto LABEL_80;
        case 0xAu:
          PBReaderReadString();
          v62 = objc_claimAutoreleasedReturnValue();
          v63 = 48;
          goto LABEL_80;
        case 0xBu:
          PBReaderReadString();
          v62 = objc_claimAutoreleasedReturnValue();
          v63 = 64;
LABEL_80:
          v64 = *(void **)(a1 + v63);
          *(_QWORD *)(a1 + v63) = v62;

          continue;
        case 0xCu:
          v65 = 0;
          v66 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 80) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v67 = *v3;
        v68 = *(_QWORD *)(a2 + v67);
        if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
          break;
        v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
        *(_QWORD *)(a2 + v67) = v68 + 1;
        v19 |= (unint64_t)(v69 & 0x7F) << v65;
        if ((v69 & 0x80) == 0)
          goto LABEL_123;
        v65 += 7;
        v14 = v66++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_125;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_123:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_125:
      v70 = 56;
LABEL_126:
      *(_DWORD *)(a1 + v70) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRVoiceInputDeviceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _MRVoiceInputDeviceDescriptorProtobuf *v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_49;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_43:
        v31 = 16;
        goto LABEL_48;
      }
      v29 = objc_alloc_init(_MRVoiceInputDeviceDescriptorProtobuf);
      objc_storeStrong((id *)(a1 + 8), v29);
      if (!PBReaderPlaceMark()
        || !_MRVoiceInputDeviceDescriptorProtobufReadFrom((id *)&v29->super.super.isa, a2))
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 24) |= 2u;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_45;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        LODWORD(v20) = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_47:
    v31 = 20;
LABEL_48:
    *(_DWORD *)(a1 + v31) = v20;
    goto LABEL_49;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRAVOutputDeviceSourceInfoCopyRoutingContextUID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "routingContextUID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t _MRCreateHostedEndpointRequestProtobufReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addOutputDeviceUIDs:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGroupSessionFastSyncMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRGroupSessionJoinResponseProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRConfigureConnectionMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_24;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_24;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
LABEL_24:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_25:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *MRMediaRemoteVolumeControlAdjustmentDescription(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("?");
  else
    return off_1E30C98D0[a1];
}

id MRMediaRemoteVolumeControlCapabilitiesDescription(int a1)
{
  return (id)MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription(a1);
}

uint64_t _MRVolumeDidChangeMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 16;
      }
      else
      {
        if ((_DWORD)v18 != 2)
        {
          if ((_DWORD)v18 == 1)
          {
            *(_BYTE *)(a1 + 28) |= 1u;
            v19 = *v3;
            v20 = *(_QWORD *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + *v4))
            {
              v21 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v20);
              *(_QWORD *)(a2 + v19) = v20 + 4;
            }
            else
            {
              *(_BYTE *)(a2 + *v5) = 1;
              v21 = 0;
            }
            *(_DWORD *)(a1 + 24) = v21;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = 8;
      }
      v24 = *(void **)(a1 + v23);
      *(_QWORD *)(a1 + v23) = v22;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRPlaybackSessionMigrateEndMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRPlaybackSessionRequestProtobuf *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_MRPlaybackSessionRequestProtobuf);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (_MRPlaybackSessionRequestProtobufReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_26;
        goto LABEL_41;
      case 2u:
        v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark()
          && _MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_38:
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_39;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v25;

        goto LABEL_39;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

void sub_1939488FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193948B18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193948BB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193948C68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193948CE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _MRUnregisterGameControllerMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSendCommandResultHandlerDialogActionProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _MRSendCommandMessageProtobuf *v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_MRSendCommandMessageProtobuf);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || (_MRSendCommandMessageProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v25;

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_35;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 24) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19394D098(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void MRTelevisionSetPinPairingCallback(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRTelevisionSetPinPairingCallback_block_invoke;
  v7[3] = &unk_1E30C9B58;
  v8 = v5;
  v6 = v5;
  MRExternalDeviceSetPairingCallback(a1, a2, v7);

}

void MRTelevisionSetHiliteModeCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetHiliteModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionHiliteModeCallback)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 753, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetHiliteModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionHiliteModeCallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 757, CFSTR("invalid object passed to %s"), "void MRTelevisionSetHiliteModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionHiliteModeCallback)");

  }
  objc_msgSend(v7, "setHiliteModeCallback:withQueue:", v5, v12);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionRequestHiliteModeExit(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRequestHiliteModeExit(MRExternalDeviceRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRTelevision.m"), 764, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRequestHiliteModeExit(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRTelevision.m"), 768, CFSTR("invalid object passed to %s"), "void MRTelevisionRequestHiliteModeExit(MRExternalDeviceRef)");

  }
  objc_msgSend(v3, "exitHiliteMode");

  objc_autoreleasePoolPop(v2);
}

uint64_t MRTelevisionGetHiliteMode(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRTelevisionGetHiliteMode(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRTelevision.m"), 775, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRTelevisionGetHiliteMode(MRExternalDeviceRef)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 779, CFSTR("invalid object passed to %s"), "_Bool MRTelevisionGetHiliteMode(MRExternalDeviceRef)");

  }
  v4 = objc_msgSend(v3, "hiliteMode");

  objc_autoreleasePoolPop(v2);
  return v4;
}

void MRTelevisionWake(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionWake(MRExternalDeviceRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRTelevision.m"), 786, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionWake(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRTelevision.m"), 790, CFSTR("invalid object passed to %s"), "void MRTelevisionWake(MRExternalDeviceRef)");

  }
  objc_msgSend(v3, "wake");

  objc_autoreleasePoolPop(v2);
}

void MRTelevisionRegisterVirtualTouchDevice(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;

  v7 = a3;
  v8 = a4;
  if (a1)
  {
    if (v7)
      goto LABEL_3;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualTouchDevice(MRExternalDeviceRef, MRVirtualTouchDeviceDescriptorRef, __strong dispatch_queue_t, __strong MRTelevisionTouchDeviceIDCallback)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRTelevision.m"), 801, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("replyQ"));

    if (v8)
      goto LABEL_4;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualTouchDevice(MRExternalDeviceRef, MRVirtualTouchDeviceDescriptorRef, __strong dispatch_queue_t, __strong MRTelevisionTouchDeviceIDCallback)");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRTelevision.m"), 800, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  if (!v7)
    goto LABEL_8;
LABEL_3:
  if (v8)
    goto LABEL_4;
LABEL_9:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualTouchDevice(MRExternalDeviceRef, MRVirtualTouchDeviceDescriptorRef, __strong dispatch_queue_t, __strong MRTelevisionTouchDeviceIDCallback)");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("MRTelevision.m"), 802, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_4:
  v9 = (void *)MEMORY[0x194036A64]();
  v10 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualTouchDevice(MRExternalDeviceRef, MRVirtualTouchDeviceDescriptorRef, __strong dispatch_queue_t, __strong MRTelevisionTouchDeviceIDCallback)");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("MRTelevision.m"), 806, CFSTR("invalid object passed to %s"), "void MRTelevisionRegisterVirtualTouchDevice(MRExternalDeviceRef, MRVirtualTouchDeviceDescriptorRef, __strong dispatch_queue_t, __strong MRTelevisionTouchDeviceIDCallback)");

  }
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __MRTelevisionRegisterVirtualTouchDevice_block_invoke;
  v20[3] = &unk_1E30C9B80;
  v11 = v8;
  v21 = v11;
  objc_msgSend(v10, "registerTouchDeviceWithDescriptor:replyQueue:completion:", a2, v7, v20);

  objc_autoreleasePoolPop(v9);
}

void MRTelevisionSendVirtualTouchEvent(void *a1, _OWORD *a2, uint64_t a3)
{
  void *v6;
  id v7;
  __int128 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _OWORD v13[2];

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendVirtualTouchEvent(MRExternalDeviceRef, MRHIDTouchEvent, MRVirtualTouchDeviceID)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MRTelevision.m"), 819, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendVirtualTouchEvent(MRExternalDeviceRef, MRHIDTouchEvent, MRVirtualTouchDeviceID)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRTelevision.m"), 823, CFSTR("invalid object passed to %s"), "void MRTelevisionSendVirtualTouchEvent(MRExternalDeviceRef, MRHIDTouchEvent, MRVirtualTouchDeviceID)");

  }
  v8 = a2[1];
  v13[0] = *a2;
  v13[1] = v8;
  objc_msgSend(v7, "sendTouchEvent:toVirtualDeviceWithID:", v13, a3);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionSendHIDEvent(void *a1)
{
  void *v2;
  id v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendHIDEvent(MRExternalDeviceRef, IOHIDEventRef)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRTelevision.m"), 830, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendHIDEvent(MRExternalDeviceRef, IOHIDEventRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRTelevision.m"), 834, CFSTR("invalid object passed to %s"), "void MRTelevisionSendHIDEvent(MRExternalDeviceRef, IOHIDEventRef)");

  }
  objc_autoreleasePoolPop(v2);
}

void MRTelevisionGetCurrentTextEditingSession(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    if (v5)
      goto LABEL_3;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentTextEditingSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRTextEditingSessionRef, CFErrorRef))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRTelevision.m"), 844, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("replyQ"));

    if (v6)
      goto LABEL_4;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentTextEditingSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRTextEditingSessionRef, CFErrorRef))");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 843, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  if (!v5)
    goto LABEL_8;
LABEL_3:
  if (v6)
    goto LABEL_4;
LABEL_9:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentTextEditingSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRTextEditingSessionRef, CFErrorRef))");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRTelevision.m"), 845, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("callback"));

LABEL_4:
  v7 = (void *)MEMORY[0x194036A64]();
  v8 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentTextEditingSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRTextEditingSessionRef, CFErrorRef))");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("MRTelevision.m"), 849, CFSTR("invalid object passed to %s"), "void MRTelevisionGetCurrentTextEditingSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRTextEditingSessionRef, CFErrorRef))");

  }
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __MRTelevisionGetCurrentTextEditingSession_block_invoke;
  v18[3] = &unk_1E30C9BA8;
  v9 = v6;
  v19 = v9;
  objc_msgSend(v8, "getTextEditingSessionWithReplyQueue:completion:", v5, v18);

  objc_autoreleasePoolPop(v7);
}

void MRTelevisionSetTextEditingCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetTextEditingCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionTextInputCallback)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 860, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetTextEditingCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionTextInputCallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 864, CFSTR("invalid object passed to %s"), "void MRTelevisionSetTextEditingCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionTextInputCallback)");

  }
  objc_msgSend(v7, "setTextEditingCallback:withQueue:", v5, v12);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionTextEditingInsert(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingInsert(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRTelevision.m"), 871, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v5 = (void *)MEMORY[0x194036A64]();
  v6 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingInsert(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MRTelevision.m"), 875, CFSTR("invalid object passed to %s"), "void MRTelevisionTextEditingInsert(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)");

  }
  objc_msgSend(v6, "insertTextIntoActiveTextEditingSessionWithText:", a3);

  objc_autoreleasePoolPop(v5);
}

void MRTelevisionTextEditingSetText(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingSetText(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRTelevision.m"), 882, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v5 = (void *)MEMORY[0x194036A64]();
  v6 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingSetText(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MRTelevision.m"), 886, CFSTR("invalid object passed to %s"), "void MRTelevisionTextEditingSetText(MRExternalDeviceRef, MRTextEditingSessionRef, CFStringRef)");

  }
  objc_msgSend(v6, "setTextOnActiveTextEditingSessionWithText:", a3);

  objc_autoreleasePoolPop(v5);
}

void MRTelevisionTextEditingDeleteBackward(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingDeleteBackward(MRExternalDeviceRef, MRTextEditingSessionRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRTelevision.m"), 893, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingDeleteBackward(MRExternalDeviceRef, MRTextEditingSessionRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRTelevision.m"), 897, CFSTR("invalid object passed to %s"), "void MRTelevisionTextEditingDeleteBackward(MRExternalDeviceRef, MRTextEditingSessionRef)");

  }
  objc_msgSend(v3, "deleteBackwardInActiveTextEditingSession");

  objc_autoreleasePoolPop(v2);
}

void MRTelevisionTextEditingClearText(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingClearText(MRExternalDeviceRef, MRTextEditingSessionRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRTelevision.m"), 904, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionTextEditingClearText(MRExternalDeviceRef, MRTextEditingSessionRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRTelevision.m"), 908, CFSTR("invalid object passed to %s"), "void MRTelevisionTextEditingClearText(MRExternalDeviceRef, MRTextEditingSessionRef)");

  }
  objc_msgSend(v3, "clearActiveTextEditingSessionData");

  objc_autoreleasePoolPop(v2);
}

void MRTelevisionGetCurrentRTISourceSession(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    if (v5)
      goto LABEL_3;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentRTISourceSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRRTIInputSystemSourceSessionRef, CFErrorRef))");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRTelevision.m"), 918, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("replyQ"));

    if (v6)
      goto LABEL_4;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentRTISourceSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRRTIInputSystemSourceSessionRef, CFErrorRef))");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 917, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  if (!v5)
    goto LABEL_8;
LABEL_3:
  if (v6)
    goto LABEL_4;
LABEL_9:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentRTISourceSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRRTIInputSystemSourceSessionRef, CFErrorRef))");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRTelevision.m"), 919, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("callback"));

LABEL_4:
  v7 = (void *)MEMORY[0x194036A64]();
  v8 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionGetCurrentRTISourceSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRRTIInputSystemSourceSessionRef, CFErrorRef))");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("MRTelevision.m"), 923, CFSTR("invalid object passed to %s"), "void MRTelevisionGetCurrentRTISourceSession(MRExternalDeviceRef, __strong dispatch_queue_t, void (^__strong)(MRRTIInputSystemSourceSessionRef, CFErrorRef))");

  }
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __MRTelevisionGetCurrentRTISourceSession_block_invoke;
  v18[3] = &unk_1E30C9BD0;
  v9 = v6;
  v19 = v9;
  objc_msgSend(v8, "getRTISessionWithReplyQueue:completion:", v5, v18);

  objc_autoreleasePoolPop(v7);
}

void MRTelevisionSetRTICallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetRTICallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRTICallback)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 934, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetRTICallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRTICallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 938, CFSTR("invalid object passed to %s"), "void MRTelevisionSetRTICallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRTICallback)");

  }
  objc_msgSend(v7, "setRTICallback:withQueue:", v5, v12);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionRegisterGameController(void *a1, const char *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  _MRGameControllerPropertiesProtobuf *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a3;
  v7 = a4;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameController(MRExternalDeviceRef, MRGameControllerProfile, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 948, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  if (!v16)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameController(MRExternalDeviceRef, MRGameControllerProfile, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRTelevision.m"), 949, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("replyQ"));

    if (v7)
      goto LABEL_5;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameController(MRExternalDeviceRef, MRGameControllerProfile, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRTelevision.m"), 950, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

    goto LABEL_5;
  }
  if (!v7)
    goto LABEL_7;
LABEL_5:
  v8 = (void *)MEMORY[0x194036A64]();
  v9 = MRGameControllerPropertiesCreate();
  MRGameControllerPropertiesSetProfile(v9, a2);
  MRTelevisionRegisterGameControllerWithProperties(a1, (uint64_t)v9, v16, v7);

  objc_autoreleasePoolPop(v8);
}

void MRTelevisionRegisterGameControllerWithProperties(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;

  v7 = a3;
  v8 = a4;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameControllerWithProperties(MRExternalDeviceRef, MRGameControllerPropertiesRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRTelevision.m"), 964, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

    if (a2)
    {
LABEL_3:
      if (v7)
        goto LABEL_4;
LABEL_10:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameControllerWithProperties(MRExternalDeviceRef, MRGameControllerPropertiesRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("MRTelevision.m"), 966, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("replyQ"));

      if (v8)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameControllerWithProperties(MRExternalDeviceRef, MRGameControllerPropertiesRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRTelevision.m"), 965, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("properties"));

  if (!v7)
    goto LABEL_10;
LABEL_4:
  if (v8)
    goto LABEL_5;
LABEL_11:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameControllerWithProperties(MRExternalDeviceRef, MRGameControllerPropertiesRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("MRTelevision.m"), 967, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_5:
  v9 = (void *)MEMORY[0x194036A64]();
  v10 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterGameControllerWithProperties(MRExternalDeviceRef, MRGameControllerPropertiesRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, CFSTR("MRTelevision.m"), 971, CFSTR("invalid object passed to %s"), "void MRTelevisionRegisterGameControllerWithProperties(MRExternalDeviceRef, MRGameControllerPropertiesRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerIDCallback)");

  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __MRTelevisionRegisterGameControllerWithProperties_block_invoke;
  v22[3] = &unk_1E30C9B80;
  v11 = v8;
  v23 = v11;
  objc_msgSend(v10, "registerGameControllerWithProperties:queue:completion:", a2, v7, v22);

  objc_autoreleasePoolPop(v9);
}

void MRTelevisionUnregisterGameController(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionUnregisterGameController(MRExternalDeviceRef, MRGameControllerID)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRTelevision.m"), 986, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v4 = (void *)MEMORY[0x194036A64]();
  v5 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionUnregisterGameController(MRExternalDeviceRef, MRGameControllerID)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 990, CFSTR("invalid object passed to %s"), "void MRTelevisionUnregisterGameController(MRExternalDeviceRef, MRGameControllerID)");

  }
  objc_msgSend(v5, "unregisterGameController:", a2);

  objc_autoreleasePoolPop(v4);
}

void MRTelevisionSetGameControllerInputModeCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetGameControllerInputModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerInputModeCallback)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 999, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetGameControllerInputModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerInputModeCallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 1003, CFSTR("invalid object passed to %s"), "void MRTelevisionSetGameControllerInputModeCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerInputModeCallback)");

  }
  objc_msgSend(v7, "setGameControllerInputModeCallback:withQueue:", v5, v12);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionSetGameControllerPropertiesCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetGameControllerPropertiesCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerPropertiesCallback)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 1012, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetGameControllerPropertiesCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerPropertiesCallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 1016, CFSTR("invalid object passed to %s"), "void MRTelevisionSetGameControllerPropertiesCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionGameControllerPropertiesCallback)");

  }
  objc_msgSend(v7, "setGameControllerPropertiesCallback:withQueue:", v5, v12);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionSendGameControllerEvent(void *a1, float *a2, uint64_t a3)
{
  void *v6;
  id v7;
  _MRGameControllerMessageProtobuf *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendGameControllerEvent(MRExternalDeviceRef, MRGameControllerEvent, MRGameControllerID)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MRTelevision.m"), 1027, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendGameControllerEvent(MRExternalDeviceRef, MRGameControllerEvent, MRGameControllerID)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRTelevision.m"), 1031, CFSTR("invalid object passed to %s"), "void MRTelevisionSendGameControllerEvent(MRExternalDeviceRef, MRGameControllerEvent, MRGameControllerID)");

  }
  v8 = MRGameControllerEventCreateWithLegacyEvent(a2);
  objc_msgSend(v7, "sendGameControllerEvent:controllerID:", v8, a3);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionSendGameControllerEventV2(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendGameControllerEventV2(MRExternalDeviceRef, MRGameControllerEventRef, MRGameControllerID)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 1039, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

    if (a2)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendGameControllerEventV2(MRExternalDeviceRef, MRGameControllerEventRef, MRGameControllerID)");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 1040, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("event"));

LABEL_3:
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendGameControllerEventV2(MRExternalDeviceRef, MRGameControllerEventRef, MRGameControllerID)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRTelevision.m"), 1044, CFSTR("invalid MRExternalDeviceRef object passed to %s"), "void MRTelevisionSendGameControllerEventV2(MRExternalDeviceRef, MRGameControllerEventRef, MRGameControllerID)");

  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSendGameControllerEventV2(MRExternalDeviceRef, MRGameControllerEventRef, MRGameControllerID)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRTelevision.m"), 1045, CFSTR("invalid MRGameControllerEventRef object passed to %s"), "void MRTelevisionSendGameControllerEventV2(MRExternalDeviceRef, MRGameControllerEventRef, MRGameControllerID)");

  }
  objc_msgSend(v7, "sendGameControllerEvent:controllerID:", a2, a3);

  objc_autoreleasePoolPop(v6);
}

uint64_t MRTelevisionGetGameControllerInputMode(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRGameControllerInputMode MRTelevisionGetGameControllerInputMode(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRTelevision.m"), 1052, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRGameControllerInputMode MRTelevisionGetGameControllerInputMode(MRExternalDeviceRef)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 1056, CFSTR("invalid object passed to %s"), "MRGameControllerInputMode MRTelevisionGetGameControllerInputMode(MRExternalDeviceRef)");

  }
  v4 = objc_msgSend(v3, "gameControllerInputMode");

  objc_autoreleasePoolPop(v2);
  return v4;
}

void MRTelevisionRegisterVirtualVoiceInputDevice(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;

  v7 = a3;
  v8 = a4;
  if (a1)
  {
    if (v7)
      goto LABEL_3;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualVoiceInputDevice(MRExternalDeviceRef, MRVirtualVoiceInputDeviceDescriptorRef, __strong dispatch_queue_t, void (^__strong)(MRVirtualVoiceInputDeviceID, CFErrorRef))");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRTelevision.m"), 1067, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("replyQ"));

    if (v8)
      goto LABEL_4;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualVoiceInputDevice(MRExternalDeviceRef, MRVirtualVoiceInputDeviceDescriptorRef, __strong dispatch_queue_t, void (^__strong)(MRVirtualVoiceInputDeviceID, CFErrorRef))");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRTelevision.m"), 1066, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  if (!v7)
    goto LABEL_8;
LABEL_3:
  if (v8)
    goto LABEL_4;
LABEL_9:
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualVoiceInputDevice(MRExternalDeviceRef, MRVirtualVoiceInputDeviceDescriptorRef, __strong dispatch_queue_t, void (^__strong)(MRVirtualVoiceInputDeviceID, CFErrorRef))");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("MRTelevision.m"), 1068, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_4:
  v9 = (void *)MEMORY[0x194036A64]();
  v10 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionRegisterVirtualVoiceInputDevice(MRExternalDeviceRef, MRVirtualVoiceInputDeviceDescriptorRef, __strong dispatch_queue_t, void (^__strong)(MRVirtualVoiceInputDeviceID, CFErrorRef))");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("MRTelevision.m"), 1072, CFSTR("invalid object passed to %s"), "void MRTelevisionRegisterVirtualVoiceInputDevice(MRExternalDeviceRef, MRVirtualVoiceInputDeviceDescriptorRef, __strong dispatch_queue_t, void (^__strong)(MRVirtualVoiceInputDeviceID, CFErrorRef))");

  }
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __MRTelevisionRegisterVirtualVoiceInputDevice_block_invoke;
  v20[3] = &unk_1E30C99C0;
  v11 = v8;
  v21 = v11;
  objc_msgSend(v10, "registerVoiceInputDeviceWithDescriptor:replyQueue:completion:", a2, v7, v20);

  objc_autoreleasePoolPop(v9);
}

void MRTelevisionSetVoiceRecordingStateCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetVoiceRecordingStateCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRecordingStateCallback)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRTelevision.m"), 1088, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionSetVoiceRecordingStateCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRecordingStateCallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRTelevision.m"), 1092, CFSTR("invalid object passed to %s"), "void MRTelevisionSetVoiceRecordingStateCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRTelevisionRecordingStateCallback)");

  }
  objc_msgSend(v7, "setVoiceRecordingStateCallback:withQueue:", v5, v12);

  objc_autoreleasePoolPop(v6);
}

uint64_t MRTelevisionGetVoiceRecordingState()
{
  return 0;
}

void MRTelevisionProcessVirtualVoiceInputAudioData(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, float a6)
{
  void *v12;
  id v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionProcessVirtualVoiceInputAudioData(MRExternalDeviceRef, MRVirtualVoiceInputDeviceID, MRAudioBufferRef, MRAudioTime, float)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("MRTelevision.m"), 1115, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v12 = (void *)MEMORY[0x194036A64]();
  v13 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRTelevisionProcessVirtualVoiceInputAudioData(MRExternalDeviceRef, MRVirtualVoiceInputDeviceID, MRAudioBufferRef, MRAudioTime, float)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("MRTelevision.m"), 1119, CFSTR("invalid object passed to %s"), "void MRTelevisionProcessVirtualVoiceInputAudioData(MRExternalDeviceRef, MRVirtualVoiceInputDeviceID, MRAudioBufferRef, MRAudioTime, float)");

  }
  *(float *)&v14 = a6;
  objc_msgSend(v13, "processVoiceInputAudioDataForDeviceID:withBuffer:time:gain:", a2, a3, a4, a5, v14);

  objc_autoreleasePoolPop(v12);
}

void MRTelevisionSendButtonEvent(void *a1, uint64_t a2, unsigned int a3)
{
  MRExternalDeviceSendButtonEvent(a1, a2, a3);
}

uint64_t _MRUpdateEndpointsMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRAVEndpointDescriptorProtobuf *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRAVEndpointDescriptorProtobuf);
        objc_msgSend((id)a1, "addEndpoints:", v17);
        if (!PBReaderPlaceMark() || (_MRAVEndpointDescriptorProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

_MRVolumeControlAvailabilityProtobuf *MRCapabilitiesToProtobuf(uint64_t a1)
{
  _MRVolumeControlAvailabilityProtobuf *v2;

  v2 = objc_alloc_init(_MRVolumeControlAvailabilityProtobuf);
  -[_MRVolumeControlAvailabilityProtobuf setVolumeControlAvailable:](v2, "setVolumeControlAvailable:", (_DWORD)a1 != 0);
  -[_MRVolumeControlAvailabilityProtobuf setVolumeCapabilities:](v2, "setVolumeCapabilities:", a1);
  return v2;
}

uint64_t MRCapabilitiesFromProtobuf(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "hasVolumeCapabilities"))
  {
    v2 = objc_msgSend(v1, "volumeCapabilities");
  }
  else if (objc_msgSend(v1, "hasVolumeControlAvailable"))
  {
    if (objc_msgSend(v1, "volumeControlAvailable"))
      v2 = 3;
    else
      v2 = 0;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void MRMediaRemoteAgentSetEndpoint(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  v4 = a2;
  v3 = (_QWORD *)MRGetSharedService();
  MRMediaRemoteServiceSetAgentEndpoint(v3, a1, (uint64_t)v4);

}

void MRMediaRemoteAgentNotifyCallChanged(uint64_t a1)
{
  void *v2;

  v2 = (void *)MRGetSharedService();
  MRMediaRemoteServiceAgentNotifyCallChanged(v2, a1);
}

void MRMediaRemoteSetHardwareRemoteBehavior(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localOriginClient");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setHardwareRemoteBehavior:", a1);
  v3 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetHardwareRemoteBehavior(v3, a1);

}

void MRMediaRemotePresentOutputDevicePicker(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;

  v7 = a4;
  v8 = a3;
  v10 = a2;
  v9 = (void *)MRGetSharedService();
  MRMediaRemoteServicePresentOutputDevicePicker(v9, a1, v10);

}

void MRMediaRemoteDismissOutputDevicePicker()
{
  void *v0;

  v0 = (void *)MRGetSharedService();
  MRMediaRemoteServiceDismissOutputDevicePicker(v0);
}

void MRMediaRemotePrewarmMediaControlsCommand(void *a1, unsigned int a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a3;
  v5 = (void *)MRGetSharedService();
  MRMediaRemoteServicePrewarmMediaControlsCommand(v5, a2, a1, v6);

}

void MRMediaRemotePresentMediaControlsCommand(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v6 = a1;
  if (!v6)
  {
    v6 = (id)MEMORY[0x1E0C80D38];
    v3 = MEMORY[0x1E0C80D38];
  }
  v4 = a2;
  v5 = (void *)MRGetSharedService();
  MRMediaRemoteServicePresentMediaControlsCommand(v5, v6, v4);

}

void MRMediaRemoteDismissMediaControlsCommand()
{
  void *v0;

  v0 = (void *)MRGetSharedService();
  MRMediaRemoteServiceDismissMediaControlsCommand(v0);
}

id MRMediaRemoteResolveCommandOptions(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v19;

  v3 = a1;
  v4 = v3;
  if (v3)
    v5 = (id)objc_msgSend(v3, "mutableCopy");
  else
    v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v6 = v5;
  objc_msgSend(v5, "objectForKey:", CFSTR("kMRMediaRemoteOptionCommandID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "UUIDString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("kMRMediaRemoteOptionCommandID"));

  }
  objc_msgSend(v6, "objectForKey:", CFSTR("kMRMediaRemoteOptionSenderID"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[MRClient localClient](MRClient, "localClient");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v19, "displayName");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "bundleIdentifier");
    v14 = a2;
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v12, "initWithFormat:", CFSTR("SenderDevice = <%@>, SenderBundleIdentifier = <%@>, SenderPID = <%d>"), v13, v15, objc_msgSend(v11, "processIdentifier"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v16, CFSTR("kMRMediaRemoteOptionSenderID"));

    a2 = v14;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v17, CFSTR("kMRMediaRemoteOptionSendOptionsNumber"));

  return v6;
}

BOOL MRMediaRemoteValidateOutgoingCommandOptions(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = MRMediaRemoteCopyCommandDescription(a1);
  if (MRMediaRemoteCommandRequiresSourcePositionOption(a1))
  {
    v15 = v4;
    objc_msgSend(v3, "objectForKey:", CFSTR("kMRMediaRemoteOptionContentItemID"));
    v5 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", CFSTR("kMRMediaRemoteOptionPlaybackQueueOffset"));
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", CFSTR("kMRMediaRemoteOptionTrackID"));
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v5 | v6 | v7;
    v9 = v8 != 0;
    if (!v8)
    {
      _MRLogForCategory(2uLL);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138544130;
        v17 = v15;
        v18 = 2114;
        v19 = CFSTR("kMRMediaRemoteOptionContentItemID");
        v20 = 2114;
        v21 = CFSTR("kMRMediaRemoteOptionPlaybackQueueOffset");
        v22 = 2114;
        v23 = CFSTR("kMRMediaRemoteOptionTrackID");
        _os_log_error_impl(&dword_193827000, v10, OS_LOG_TYPE_ERROR, "[MRRemoteControl] Command %{public}@ missing source position option(s): %{public}@ | %{public}@ | %{public}@", buf, 0x2Au);
      }

    }
    v4 = v15;
  }
  else
  {
    v9 = 1;
  }
  if (MRMediaRemoteCommandRequiresDestinationPositionOption(a1))
  {
    objc_msgSend(v3, "objectForKey:", CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID"));
    v11 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", CFSTR("kMRMediaRemoteOptionPlaybackQueueDestinationOffset"));
    v12 = objc_claimAutoreleasedReturnValue();
    if (!(v11 | v12))
    {
      _MRLogForCategory(2uLL);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        v17 = v4;
        v18 = 2114;
        v19 = CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID");
        v20 = 2114;
        v21 = CFSTR("kMRMediaRemoteOptionPlaybackQueueDestinationOffset");
        _os_log_error_impl(&dword_193827000, v13, OS_LOG_TYPE_ERROR, "[MRRemoteControl] Command %{public}@ missing source position option(s): %{public}@ | %{public}@", buf, 0x20u);
      }

      v9 = 0;
    }

  }
  return v9;
}

BOOL MRMediaRemoteValidateIncomingCommandOptions(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  int v23;
  void *v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = MRMediaRemoteCopyCommandDescription(a1);
  if (MRMediaRemoteCommandRequiresSourcePositionOption(a1))
  {
    objc_msgSend(v5, "objectForKey:", CFSTR("kMRMediaRemoteOptionContentItemID"));
    v8 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", CFSTR("kMRMediaRemoteOptionTrackID"));
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (v8 | v9) != 0;
    if (!(v8 | v9))
    {
      _MRLogForCategory(2uLL);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v23 = 138543874;
        v24 = v7;
        v25 = 2114;
        v26 = CFSTR("kMRMediaRemoteOptionContentItemID");
        v27 = 2114;
        v28 = CFSTR("kMRMediaRemoteOptionTrackID");
        _os_log_error_impl(&dword_193827000, v11, OS_LOG_TYPE_ERROR, "[MRRemoteControl] Command %{public}@ missing source position option(s): %{public}@ | %{public}@", (uint8_t *)&v23, 0x20u);
      }

    }
  }
  else
  {
    v10 = 1;
  }
  if (MRMediaRemoteCommandRequiresDestinationPositionOption(a1))
  {
    objc_msgSend(v5, "objectForKey:", CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      _MRLogForCategory(2uLL);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        MRMediaRemoteValidateIncomingCommandOptions_cold_1((uint64_t)v7, (uint64_t)CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID"), v13);

      v10 = 0;
    }

  }
  objc_msgSend(v6, "subscriptionController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "contentItemIdentifierForOffset:", 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "objectForKey:", CFSTR("kMRMediaRemoteOptionNowPlayingContentItemID"));
  v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v16)
  {
    if (!v15)
    {
      _MRLogForCategory(2uLL);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v23 = 138543874;
        v24 = v7;
        v25 = 2112;
        v26 = CFSTR("kMRMediaRemoteOptionNowPlayingContentItemID");
        v27 = 2112;
        v28 = v17;
        v19 = "[MRRemoteControl] Command %{public}@ sender sepecified %@ = %@ which is no longer the now playing item.";
        v20 = v18;
        v21 = 32;
        goto LABEL_23;
      }
LABEL_20:

      v10 = 0;
      goto LABEL_21;
    }
    if (-[__CFString isEqualToString:](v16, "isEqualToString:", v15))
    {
      _MRLogForCategory(2uLL);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v23 = 138544130;
        v24 = v7;
        v25 = 2112;
        v26 = CFSTR("kMRMediaRemoteOptionNowPlayingContentItemID");
        v27 = 2112;
        v28 = v17;
        v29 = 2112;
        v30 = v15;
        v19 = "[MRRemoteControl] Command %{public}@ sender sepecified %@ = %@. Now Playing Item = %@. Ignoring command";
        v20 = v18;
        v21 = 42;
LABEL_23:
        _os_log_error_impl(&dword_193827000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v23, v21);
        goto LABEL_20;
      }
      goto LABEL_20;
    }
  }
LABEL_21:

  return v10;
}

void MRMediaRemoteSendImplicitCommandsForOptions(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void (**v8)(_QWORD, _QWORD);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v5 = a2;
  v6 = a3;
  if (a1 == 122)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __MRMediaRemoteSendImplicitCommandsForOptions_block_invoke;
    v13[3] = &unk_1E30C9C00;
    v7 = v5;
    v14 = v7;
    v8 = (void (**)(_QWORD, _QWORD))MEMORY[0x194036C44](v13);
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionShuffleMode"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v8[2](v8, 26);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      MRMediaRemoteSendCommandToPlayer(26, v10, v6, 0, 0, 0);

    }
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionRepeatMode"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v8[2](v8, 25);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      MRMediaRemoteSendCommandToPlayer(25, v12, v6, 0, 0, 0);

    }
  }

}

uint64_t MRMediaRemoteCommandSupportsAttribution(int a1)
{
  return ((a1 - 122) < 0xC) & (0x809u >> (a1 - 122));
}

void sub_1939562C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193956338(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19395639C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193956550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19395662C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_193956870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19395694C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193956A8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

MRAVEndpointObserver *MRAVEndpointObserverCreateWithOutputDeviceUID(uint64_t a1)
{
  return -[MRAVEndpointObserver initWithOutputDeviceUID:]([MRAVEndpointObserver alloc], "initWithOutputDeviceUID:", a1);
}

uint64_t MRAVEndpointObserverAddEndpointChangedCallback(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setEndpointChangedCallback:", a2);
}

void sub_193957088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1939578B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193958A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19395924C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_1939594A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193959954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _MRLanguageOptionGroupProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _MRLanguageOptionProtobuf *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_MRLanguageOptionProtobuf);
        objc_msgSend((id)a1, "addLanguageOptions:", v24);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_38;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_38:
            *(_BYTE *)(a1 + 24) = v20 != 0;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_MRLanguageOptionProtobuf);
        objc_storeStrong((id *)(a1 + 8), v24);
      }
      if (!PBReaderPlaceMark() || (_MRLanguageOptionProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRTextEditingAttributesProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _MRTextInputTraitsProtobuf *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_26:
        v20 = *(_MRTextInputTraitsProtobuf **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(_MRTextInputTraitsProtobuf);
    objc_storeStrong((id *)(a1 + 8), v20);
    if (!PBReaderPlaceMark() || (_MRTextInputTraitsProtobufReadFrom((uint64_t)v20, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSendLyricsEventMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRLyricsEventProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRLyricsEventProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (_MRLyricsEventProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id MRCreateCryptoError(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = (objc_class *)MEMORY[0x1E0CB35C8];
  v2 = a1;
  v3 = [v1 alloc];
  v7 = *MEMORY[0x1E0CB2D50];
  v8[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)objc_msgSend(v3, "initWithDomain:code:userInfo:", CFSTR("kMRMediaRemoteFrameworkErrorDomain"), 23, v4);
  return v5;
}

void sub_19395EF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19395F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

uint64_t MRAVRoutingDiscoverySessionCreate(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:](MRAVRoutingDiscoverySession, "discoverySessionWithEndpointFeatures:", a1);
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVRoutingDiscoverySessionCreateRemoteControlThrottled()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MEMORY[0x194036A64]();
  +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:enableThrottling:](MRAVRoutingDiscoverySession, "discoverySessionWithEndpointFeatures:enableThrottling:", 8, 1);
  v1 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
  return v1;
}

uint64_t MRAVRoutingDiscoverySessionGetEndpointFeatures(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "endpointFeatures");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVRoutingDiscoverySessionGetDiscoveryMode(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "discoveryMode");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRAVRoutingDiscoverySessionSetDiscoveryMode(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setDiscoveryMode:", a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t MRAVRoutingDiscoverySessionAlwaysAllowUpdates(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "alwaysAllowUpdates");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRAVRoutingDiscoverySessionSetAlwaysAllowUpdates(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setAlwaysAllowUpdates:", a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t MRAVRoutingDiscoverySessionGetTargetAudioSessionID(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "targetAudioSessionID");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRAVRoutingDiscoverySessionSetTargetAudioSessionID(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setTargetAudioSessionID:", a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t MRAVRoutingDiscoverySessionCopyRoutingContextUID(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "routingContextUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

void MRAVRoutingDiscoverySessionSetRoutingContextUID(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setRoutingContextUID:", a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t MRAVRoutingDiscoverySessionDevicePresenceDetected(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "devicePresenceDetected");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVRoutingDiscoverySessionHasAvailableEndpoints(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "devicePresenceDetected");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVRoutingDiscoverySessionCopyAvailableEndpoints(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "availableEndpoints");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVRoutingDiscoverySessionCopyAvailableOutputDevices(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "availableOutputDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVRoutingDiscoverySessionAddEndpointsChangedCallback(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = (void *)MEMORY[0x194036A64]();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRAVRoutingDiscoverySessionAddEndpointsChangedCallback_block_invoke;
  v9[3] = &unk_1E30C9FA0;
  v5 = v3;
  v10 = v5;
  objc_msgSend(a1, "addEndpointsChangedCallback:", v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "copy");

  objc_autoreleasePoolPop(v4);
  return v7;
}

void MRAVRoutingDiscoverySessionRemoveEndpointsChangedCallback(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "removeEndpointsChangedCallback:", a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t MRAVRoutingDiscoverySessionAddOutputDevicesChangedCallback(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = (void *)MEMORY[0x194036A64]();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRAVRoutingDiscoverySessionAddOutputDevicesChangedCallback_block_invoke;
  v9[3] = &unk_1E30C9FA0;
  v5 = v3;
  v10 = v5;
  objc_msgSend(a1, "addOutputDevicesChangedCallback:", v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "copy");

  objc_autoreleasePoolPop(v4);
  return v7;
}

void MRAVRoutingDiscoverySessionRemoveOutputDevicesChangedCallback(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "removeOutputDevicesChangedCallback:", a2);
  objc_autoreleasePoolPop(v4);
}

void sub_193960308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396035C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939603CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193960420(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193960490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939604E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396095C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  void *v23;
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  objc_sync_exit(v23);
  _Unwind_Resume(a1);
}

void sub_193960DDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396149C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396419C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396427C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193964354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19396449C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193964538(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939646F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939648D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193964F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193965028(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939650C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _MRUserIdentityProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_34;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_36:
        *(_DWORD *)(a1 + 24) = v22;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
        }
        v26 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRVideoThumbnailRequestProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v20;
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      v18 = v10 & 7;
      if (v17 || v18 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v20 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 40) |= 2u;
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        v33 = 36;
LABEL_46:
        *(_DWORD *)(a1 + v33) = v28;
        goto LABEL_49;
      }
      if ((_DWORD)v20 == 1)
      {
        if (v18 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v22 = (unint64_t *)(a2 + *v3);
            v23 = *v22;
            v24 = *(_QWORD *)(a2 + *v4);
            if (*v22 >= v24)
              break;
            v25 = *v5;
            if (*(_BYTE *)(a2 + v25))
              break;
            if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > v24)
              *(_BYTE *)(a2 + v25) = 1;
            else
              *v22 = v23 + 8;
            PBRepeatedDoubleAdd();
          }
          PBReaderRecallMark();
        }
        else
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
            *(_QWORD *)(a2 + v31) = v32 + 8;
          else
            *(_BYTE *)(a2 + v16) = 1;
          PBRepeatedDoubleAdd();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 40) |= 1u;
    v26 = *v3;
    v27 = *(_QWORD *)(a2 + v26);
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
    {
      v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 4;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v28 = 0;
    }
    v33 = 32;
    goto LABEL_46;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRPlaybackQueueParticipantProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  _MRUserIdentityProtobuf *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(_MRUserIdentityProtobuf **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_MRUserIdentityProtobuf);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (_MRUserIdentityProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRUniversalTrackIdentifierCreateURL(int a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  if ((a1 - 1) > 2 || !a2)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@://%@/%@"), CFSTR("mediaremoteuti"), off_1E30CA1A8[a1 - 1], a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v2);
  v3 = objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t MRUniversalTrackIdentifierCreateURLWithIntegerBaseID(int a1, uint64_t a2)
{
  void *v3;
  uint64_t URL;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu"), a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  URL = MRUniversalTrackIdentifierCreateURL(a1, (uint64_t)v3);

  return URL;
}

uint64_t MRUniversalTrackIdentifierTypeFromURL(void *a1)
{
  id v1;
  uint64_t v2;

  objc_msgSend(a1, "host");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("library")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("multiverse")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("store")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t MRUniversalTrackIdentifierBaseIDIntegerFromURL(const __CFURL *a1)
{
  __CFString *PathComponent;
  uint64_t v2;

  PathComponent = (__CFString *)CFURLCopyLastPathComponent(a1);
  v2 = -[__CFString longLongValue](PathComponent, "longLongValue");

  return v2;
}

CFStringRef MRUniversalTrackIdentifierCopyTypeDescription(int a1)
{
  if ((a1 - 1) > 2)
    return 0;
  else
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], off_1E30CA1A8[a1 - 1]);
}

void MRAddDistantEndpointToXPCMessage(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  xpc_object_t xdict;

  v3 = a1;
  if (a2)
  {
    xdict = v3;
    v4 = (void *)MEMORY[0x194036A64]();
    v5 = a2;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      MRAddDistantEndpointToXPCMessage_cold_1();
    v6 = v5;
    MSVArchivedDataWithRootObject();
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    xpc_dictionary_set_data(xdict, "MRXPC_DISTANT_ENDPOINT_METADATA_KEY", (const void *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"));
    objc_msgSend(v6, "externalDeviceListenerEndpoint");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v6, "externalDeviceListenerEndpoint");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_endpoint");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      xpc_dictionary_set_value(xdict, "MRXPC_EXTERNAL_DEVICE_LISTENER_KEY", v10);
    }

    objc_autoreleasePoolPop(v4);
    v3 = xdict;
  }

}

void MRAddEndpointUIDToXPCMessage(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x194036A64]();
    MRAddStringToXPCMessage(v5, v3, "MRXPC_ENDPOINT_UID_KEY");
    objc_autoreleasePoolPop(v4);
  }

}

void MRAddClientErrorToXPCMessage(void *a1, uint64_t a2)
{
  id v2;
  id v3;

  if (a2)
  {
    v2 = a1;
    MSVArchivedDataWithRootObject();
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    xpc_dictionary_set_data(v2, "MRXPC_CLIENT_ERROR_DATA_KEY", (const void *)objc_msgSend(v3, "bytes"), objc_msgSend(v3, "length"));

  }
}

uint64_t MRCFErrorCreateExternalRepresentation(uint64_t result)
{
  if (result)
  {
    MSVArchivedDataWithRootObject();
    return objc_claimAutoreleasedReturnValue();
  }
  return result;
}

void MRAddOriginsToXPCMessage(void *a1, const __CFArray *a2)
{
  id v3;
  CFIndex Count;
  void *v5;
  CFIndex i;
  void *v7;
  void *v8;
  id v9;

  v3 = a1;
  if (a2)
  {
    v9 = v3;
    Count = CFArrayGetCount(a2);
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", Count);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        CFArrayGetValueAtIndex(a2, i);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "data");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v5, "addObject:", v8);

      }
    }
    MRAddPropertyListToXPCMessage(v9, (uint64_t)v5, "MRXPC_AVAILABLE_ORIGINS_DATA_KEY");

    v3 = v9;
  }

}

void MRAddPlayerToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      objc_msgSend(a2, "data");
      v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      xpc_dictionary_set_data(v3, "MRXPC_NOWPLAYING_PLAYER_DATA_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

    }
  }
}

void MRAddSupportedCommandsDataToXPCMessage(void *a1, void *a2)
{
  MRAddDataToXPCMessage(a1, a2, "MRXPC_COMMAND_INFO_ARRAY_DATA_KEY");
}

void MRAddSendCommandToXPCMessage(void *a1, void **a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;

  v3 = a1;
  xpc_dictionary_set_uint64(v3, "MRXPC_COMMAND_KEY", *(unsigned int *)a2);
  MRAddPlayerPathToXPCMessage(v3, a2[2]);
  v4 = (void *)objc_msgSend(a2[1], "mutableCopy");
  v5 = v4;
  if (v4)
    v6 = v4;
  else
    v6 = (id)objc_opt_new();
  v7 = v6;

  if (objc_msgSend(v7, "count"))
  {
    v11 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v7, 200, 0, &v11);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v10 = objc_retainAutorelease(v8);
      xpc_dictionary_set_data(v3, "MRXPC_COMMAND_OPTIONS_KEY", (const void *)objc_msgSend(v10, "bytes"), objc_msgSend(v10, "length"));
    }

  }
}

void MRAddVideoThumbnailRequestToXPCMessage(void *a1, uint64_t a2)
{
  _MRVideoThumbnailRequestProtobuf *v3;
  double v4;
  double v5;
  uint64_t v6;
  unsigned int v7;
  id v9;
  xpc_object_t xdict;

  xdict = a1;
  v3 = objc_alloc_init(_MRVideoThumbnailRequestProtobuf);
  LODWORD(v4) = *(_DWORD *)(a2 + 2056);
  -[_MRVideoThumbnailRequestProtobuf setThumbnailsWidth:](v3, "setThumbnailsWidth:", v4);
  LODWORD(v5) = *(_DWORD *)(a2 + 2060);
  -[_MRVideoThumbnailRequestProtobuf setThumbnailsHeight:](v3, "setThumbnailsHeight:", v5);
  if (*(_QWORD *)(a2 + 2048))
  {
    v6 = 0;
    v7 = 1;
    do
    {
      -[_MRVideoThumbnailRequestProtobuf addTimeIntervals:](v3, "addTimeIntervals:", *(double *)(a2 + 8 * v6));
      v6 = v7;
    }
    while (*(_QWORD *)(a2 + 2048) > (unint64_t)v7++);
  }
  -[_MRVideoThumbnailRequestProtobuf data](v3, "data");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  xpc_dictionary_set_data(xdict, "MRXPC_VIDEO_THUMBNAILS_REQ_DATA_KEY", (const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"));

}

void MRAddVideoThumbnailsToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *ExternalRepresentation;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        ExternalRepresentation = (void *)MRVideoThumbnailCreateExternalRepresentation(*(void **)(*((_QWORD *)&v13 + 1)
                                                                                               + 8 * v10));
        objc_msgSend(v5, "addObject:", ExternalRepresentation, (_QWORD)v13);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v5, 200, 0, 0);
  v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  xpc_dictionary_set_data(v3, "MRXPC_VIDEO_THUMBNAILS_ARRAY_DATA_KEY", (const void *)objc_msgSend(v12, "bytes"), objc_msgSend(v12, "length"));

}

void MRAddApplicationActivityToXPCMessage(void *a1, uint64_t a2)
{
  id v3;
  id ExternalRepresentation;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      ExternalRepresentation = (id)_MRApplicationActivityCreateExternalRepresentation(a2);
      MRAddDataToXPCMessage(v3, ExternalRepresentation, "MRXPC_APPLICATION_ACTIVITY_DATA_KEY");

    }
  }
}

void MRAddNowPlayingStateToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a2)
  {
    v3 = a1;
    objc_msgSend(a2, "data");
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    xpc_dictionary_set_data(v3, "MRXPC_NOWPLAYING_STATE_DATA_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

  }
}

void MRAddDiagnosticToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      v4 = objc_retainAutorelease((id)MRDiagnosticCreateExternalRepresentation(a2));
      xpc_dictionary_set_data(v3, "MRXPC_DIAGNOSTIC_DATA_KEY", (const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"));

    }
  }
}

void MRAddPlaybackSessionToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      objc_msgSend(a2, "data");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      MRAddDataToXPCMessage(v3, v4, "MRXPC_PLAYBACK_SESSION");

    }
  }
}

void MRAddCommandResultToXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a1;
      objc_msgSend(a2, "data");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      MRAddDataToXPCMessage(v3, v4, "MRXPC_COMMAND_RESULT_DATA_KEY");

    }
  }
}

uint64_t MRCreateClientErrorFromExternalRepresentation(uint64_t result)
{
  if (result)
  {
    objc_opt_class();
    MSVUnarchivedObjectOfClass();
    return objc_claimAutoreleasedReturnValue();
  }
  return result;
}

uint64_t MRErrorFromXPCMessage(void *a1)
{
  return xpc_dictionary_get_uint64(a1, "MRXPC_ERROR_CODE_KEY");
}

uint64_t MRCreateUserInfoFromXPCMessage(void *a1)
{
  return MRCreatePropertyListFromXPCMessage(a1, "MRXPC_NOTIFICATION_USERINFO_DATA_KEY");
}

uint64_t MRCreateSupportedCommandsFromXPCMessage(void *a1)
{
  UInt8 *v1;
  uint64_t v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_COMMAND_INFO_ARRAY_DATA_KEY");
  +[MRCommandInfo commandInfosFromData:](MRCommandInfo, "commandInfosFromData:", v1);
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t MRCreateOriginArrayFromXPCMessage(void *a1)
{
  return MRCreateArrayFomXPCMessage(a1, "MRXPC_AVAILABLE_ORIGINS_DATA_KEY", &__block_literal_global_59);
}

uint64_t MRCreateClientArrayFromXPCMessage(void *a1)
{
  return MRCreateArrayFomXPCMessage(a1, "MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY", &__block_literal_global_62_0);
}

MRPlayer *MRCreatePlayerFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MRPlayer *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_NOWPLAYING_PLAYER_DATA_KEY");
  if (v1)
    v2 = -[MRPlayer initWithData:]([MRPlayer alloc], "initWithData:", v1);
  else
    v2 = 0;

  return v2;
}

uint64_t MRCreatePlayerArrayFromXPCMessage(void *a1)
{
  return MRCreateArrayFomXPCMessage(a1, "MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY", &__block_literal_global_65);
}

id MRCreatePlayerPathArrayFromXPCMessage(void *a1)
{
  return (id)MRCreateArrayFomXPCMessage(a1, "MRXPC_NOWPLAYING_PLAYER_PATH_ARRAY_DATA_KEY", &__block_literal_global_67);
}

MRNowPlayingState *MRCreateNowPlayingStateFromXPCMessage(void *a1)
{
  UInt8 *v1;
  MRNowPlayingState *v2;

  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_NOWPLAYING_STATE_DATA_KEY");
  if (v1)
    v2 = -[MRNowPlayingState initWithData:]([MRNowPlayingState alloc], "initWithData:", v1);
  else
    v2 = 0;

  return v2;
}

void MRVideoThumbnailRequestFromXPCMessage(void *a1@<X0>, uint64_t a2@<X8>)
{
  _MRVideoThumbnailRequestProtobuf *v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  UInt8 *v10;

  v10 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_VIDEO_THUMBNAILS_REQ_DATA_KEY");
  v3 = -[_MRVideoThumbnailRequestProtobuf initWithData:]([_MRVideoThumbnailRequestProtobuf alloc], "initWithData:", v10);
  bzero((void *)a2, 0x810uLL);
  if (-[_MRVideoThumbnailRequestProtobuf timeIntervalsCount](v3, "timeIntervalsCount") > 0xFF)
    v4 = 256;
  else
    v4 = -[_MRVideoThumbnailRequestProtobuf timeIntervalsCount](v3, "timeIntervalsCount");
  *(_QWORD *)(a2 + 2048) = v4;
  -[_MRVideoThumbnailRequestProtobuf thumbnailsWidth](v3, "thumbnailsWidth");
  *(_DWORD *)(a2 + 2056) = v5;
  -[_MRVideoThumbnailRequestProtobuf thumbnailsHeight](v3, "thumbnailsHeight");
  *(_DWORD *)(a2 + 2060) = v6;
  if (v4)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      *(_QWORD *)(a2 + 8 * v7) = (_QWORD)-[_MRVideoThumbnailRequestProtobuf timeIntervals](v3, "timeIntervals")[8 * v7];
      v7 = v8;
    }
    while (v4 > v8++);
  }

}

void *MRCreateVideoThumbnailsFromXPCMessage(void *a1)
{
  UInt8 *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _MRVideoThumbnailProtobuf *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = (UInt8 *)MRCreateDataFromXPCMessage(a1, "MRXPC_VIDEO_THUMBNAILS_ARRAY_DATA_KEY");
  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = MRVideoThumbnailCreateFromExternalRepresentation(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8));
        objc_msgSend(v3, "addObject:", v9, (_QWORD)v11);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

uint64_t MRCreateAppActivityFromXPCMessage(void *a1)
{
  const UInt8 *v1;
  UInt8 *v2;
  uint64_t v3;

  v1 = MRCreateDataFromXPCMessage(a1, "MRXPC_APPLICATION_ACTIVITY_DATA_KEY");
  v2 = (UInt8 *)v1;
  if (v1)
    v3 = _MRApplicationActivityCreateWithExternalRepresentation((uint64_t)v1);
  else
    v3 = 0;

  return v3;
}

MRPlaybackSession *MRCreatePlaybackSessionFromXPCMessage(void *a1)
{
  id v1;
  MRPlaybackSession *v2;
  UInt8 *v3;
  MRPlaybackSession *v4;

  v1 = a1;
  v2 = [MRPlaybackSession alloc];
  v3 = (UInt8 *)MRCreateDataFromXPCMessage(v1, "MRXPC_PLAYBACK_SESSION");

  v4 = -[MRPlaybackSession initWithData:](v2, "initWithData:", v3);
  return v4;
}

MRCommandResult *MRCreateCommandResultFromXPCMessage(void *a1)
{
  id v1;
  uint64_t v2;
  UInt8 *v3;
  MRCommandResult *v4;
  MRCommandResult *v5;

  v1 = a1;
  v2 = MRCreateClientErrorFromXPCMessage(v1);
  v3 = (UInt8 *)MRCreateDataFromXPCMessage(v1, "MRXPC_COMMAND_RESULT_DATA_KEY");

  if (!(v2 | (unint64_t)v3))
    v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithMRError:", 1);
  if (v2 && !MRMediaRemoteErrorIsInformational((void *)v2))
    v4 = -[MRCommandResult initWithResultStatuses:sendError:playerPath:]([MRCommandResult alloc], "initWithResultStatuses:sendError:playerPath:", 0, 11, 0);
  else
    v4 = -[MRCommandResult initWithData:]([MRCommandResult alloc], "initWithData:", v3);
  v5 = v4;

  return v5;
}

float MRColorFromXPCMessage(void *a1)
{
  size_t length;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  length = 0;
  if (xpc_dictionary_get_data(a1, "MRXPC_COLOR_DATA_KEY", &length))
    __memcpy_chk();
  return *(float *)&v3;
}

_MRDiagnosticProtobuf *MRCreateDiagnosticFromXPCMessage(void *a1)
{
  const UInt8 *v1;
  UInt8 *v2;
  _MRDiagnosticProtobuf *v3;

  if (!a1)
    return 0;
  v1 = MRCreateDataFromXPCMessage(a1, "MRXPC_DIAGNOSTIC_DATA_KEY");
  v2 = (UInt8 *)v1;
  if (v1)
    v3 = MRDiagnosticCreateFromExternalRepresentation((uint64_t)v1);
  else
    v3 = 0;

  return v3;
}

uint64_t MRCreateEndpointFromXPCMessage(void *a1)
{
  MREndpointFromXPCMessage(a1);
  return objc_claimAutoreleasedReturnValue();
}

id MREndpointFromXPCMessage(void *a1)
{
  id v1;
  void *v2;
  UInt8 *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)MEMORY[0x194036A64]();
    v3 = (UInt8 *)MRCreateDataFromXPCMessage(v1, "MRXPC_DISTANT_ENDPOINT_METADATA_KEY");
    if (!v3 || (objc_opt_class(), MSVUnarchivedObjectOfClass(), (v4 = objc_claimAutoreleasedReturnValue()) == 0))
    {

      objc_autoreleasePoolPop(v2);
      v9 = 0;
      goto LABEL_12;
    }
    v5 = (void *)v4;
    xpc_dictionary_get_value(v1, "MRXPC_EXTERNAL_DEVICE_LISTENER_KEY");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = objc_alloc_init(MEMORY[0x1E0CB3B60]);
      objc_msgSend(v7, "_setEndpoint:", v6);
      objc_msgSend(v5, "setExternalDeviceListenerEndpoint:", v7);

    }
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    v5 = 0;
  }
  v8 = v5;
  v9 = v8;
  if (objc_msgSend(v8, "connectionType") == 1)
  {
    +[MRAVLocalEndpoint sharedLocalEndpoint](MRAVLocalEndpoint, "sharedLocalEndpoint");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_12:

  return v9;
}

id MRCreateDistantExternalDeviceFromXPCMessage(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = a1;
  if (!v1)
    goto LABEL_5;
  v2 = (void *)MEMORY[0x194036A64]();
  xpc_dictionary_get_value(v1, "MRXPC_EXTERNAL_DEVICE_LISTENER_KEY");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    objc_autoreleasePoolPop(v2);
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v4 = (void *)v3;
  v5 = objc_alloc_init(MEMORY[0x1E0CB3B60]);
  objc_msgSend(v5, "_setEndpoint:", v4);

  objc_autoreleasePoolPop(v2);
LABEL_6:

  return v5;
}

void *MRPlaybackQueueToUserInfo(void *a1, const char *a2)
{
  if (a1)
  {
    if (a2)
      return (void *)objc_msgSend(a1, "setObject:forKeyedSubscript:", a2, CFSTR("kMRPlaybackQueueUserInfoKey"));
  }
  return a1;
}

uint64_t MRGetDeviceInfoFromUserInfo(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("kMRPairedDeviceUserInfoKey"));
}

uint64_t _MRReceivedCommandAppOptionsProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_BYTE *)(a1 + 8) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRPromptForRouteAuthorizationMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRAVOutputDeviceDescriptorProtobuf *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (_MRAVOutputDeviceDescriptorProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSystemPlaybackGenericTracklistQueueProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_24;
        case 3u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
LABEL_24:
          v20 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 4u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_42:
          v32 = 28;
          goto LABEL_47;
        case 5u:
          v27 = 0;
          v28 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v23 |= (unint64_t)(v31 & 0x7F) << v27;
        if ((v31 & 0x80) == 0)
          goto LABEL_44;
        v27 += 7;
        v14 = v28++ >= 9;
        if (v14)
        {
          LODWORD(v23) = 0;
          goto LABEL_46;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v23) = 0;
LABEL_46:
      v32 = 24;
LABEL_47:
      *(_DWORD *)(a1 + v32) = v23;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19396E0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19396E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19396E6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19396E91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19396EF2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396F0D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396F130(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396F294(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396F450(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396F5D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19396F6F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _MRSendVoiceInputMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRAudioDataBlockProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRAudioDataBlockProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (_MRAudioDataBlockProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGroupSessionJoinResponseMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *MRNowPlayingBestAvailableAudioFormatDescription(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Stereo");
  if (a1 == 1)
    v1 = CFSTR("Multichannel");
  if (a1 == 2)
    return CFSTR("Atmos");
  else
    return v1;
}

uint64_t initAudioFormatGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AVFoundationLibrary_sOnce_5 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_5, &__block_literal_global_47);
  softLinkAudioFormatGetProperty[0] = (uint64_t (*)())dlsym((void *)AVFoundationLibrary_sLib_5, "AudioFormatGetProperty");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAudioFormatGetProperty[0])(a1, a2, a3, a4, a5);
}

id initValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Multichannel()
{
  id *v0;

  if (MediaExperienceLibrary_sOnce_0 != -1)
    dispatch_once(&MediaExperienceLibrary_sOnce_0, &__block_literal_global_107_0);
  v0 = (id *)dlsym((void *)MediaExperienceLibrary_sLib_0, "kMXSession_SourceFormatInfoKey_BestAvailableContentType_Multichannel");
  if (v0)
    objc_storeStrong((id *)&constantValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Multichannel, *v0);
  getkMXSession_SourceFormatInfoKey_BestAvailableContentType_Multichannel[0] = (uint64_t (*)())kMXSession_SourceFormatInfoKey_BestAvailableContentType_MultichannelFunction;
  return (id)constantValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Multichannel;
}

id initValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Atmos()
{
  id *v0;

  if (MediaExperienceLibrary_sOnce_0 != -1)
    dispatch_once(&MediaExperienceLibrary_sOnce_0, &__block_literal_global_107_0);
  v0 = (id *)dlsym((void *)MediaExperienceLibrary_sLib_0, "kMXSession_SourceFormatInfoKey_BestAvailableContentType_Atmos");
  if (v0)
    objc_storeStrong((id *)&constantValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Atmos, *v0);
  getkMXSession_SourceFormatInfoKey_BestAvailableContentType_Atmos[0] = (uint64_t (*)())kMXSession_SourceFormatInfoKey_BestAvailableContentType_AtmosFunction;
  return (id)constantValkMXSession_SourceFormatInfoKey_BestAvailableContentType_Atmos;
}

uint64_t _MRRegisterHIDDeviceMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRVirtualTouchDeviceDescriptorProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRVirtualTouchDeviceDescriptorProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (_MRVirtualTouchDeviceDescriptorProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRPlaybackSessionMigrateRequestMessageProtobufReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRNowPlayingPlayerPathProtobuf *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong(a1 + 2, v18);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v18->super.super.isa, a2))
        {
LABEL_34:

          return 0;
        }
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_MRPlaybackSessionProtobuf);
        objc_storeStrong(a1 + 1, v18);
        if (!PBReaderPlaceMark() || !_MRPlaybackSessionProtobufReadFrom((uint64_t)v18, a2))
          goto LABEL_34;
LABEL_29:
        PBReaderRecallMark();

        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_31:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(_MRPlaybackSessionMigrateRequestProtobuf);
    objc_storeStrong(a1 + 3, v18);
    if (!PBReaderPlaceMark()
      || (_MRPlaybackSessionMigrateRequestProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
    {
      goto LABEL_34;
    }
    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRCUPSShowSetupCodeCallback(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v11;
  void *v12;

  if (!a4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSStatus _MRCUPSShowSetupCodeCallback(PairingFlags, char *, size_t, void *)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRCoreUtilsPairingSession.m"), 957, CFSTR("NULL context"));

  }
  v7 = a4;
  -[MRCoreUtilsPairingSession _generateSetupCodeWithMaximumLength:]((uint64_t)v7, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "getCString:maxLength:encoding:", a2, a3, 4);
  v9 = -[MRCoreUtilsPairingSession _displaySetupCode:]((uint64_t)v7, v8);

  return v9;
}

void _MRCUPSHideSetupCodeCallback(void *a1)
{
  void *v2;
  void *v3;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _MRCUPSHideSetupCodeCallback(void *)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MRCoreUtilsPairingSession.m"), 968, CFSTR("NULL context"));

  }
  -[MRCoreUtilsPairingSession _hideSetupCode](a1);
}

uint64_t _MRCUPSPromptForSetupCodeCallback(uint64_t a1, int a2, uint64_t a3)
{
  void *v6;
  void *v7;

  if (!a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSStatus _MRCUPSPromptForSetupCodeCallback(PairingFlags, int32_t, void *)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRCoreUtilsPairingSession.m"), 975, CFSTR("NULL context"));

  }
  return -[MRCoreUtilsPairingSession _promptForSetupCodeWithDelay:](a3, (double)a2);
}

void sub_1939728E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193972CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_193973368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193973DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939749DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _MRMediaRemotePlaybackSessionRequest(void *a1, void *a2, void *a3, void *a4)
{
  MRPlaybackSessionRequest *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  MRPlaybackSessionRequest *v21;
  id v22;
  _QWORD v23[4];
  MRPlaybackSessionRequest *v24;
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (v9)
  {
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v9 = (id)MEMORY[0x1E0C80D38];
    v22 = MEMORY[0x1E0C80D38];
    if (v7)
      goto LABEL_3;
  }
  v7 = objc_alloc_init(MRPlaybackSessionRequest);
LABEL_3:
  -[MRPlaybackSessionRequest requestIdentifier](v7, "requestIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "UUIDString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[MRPlaybackSessionRequest setRequestIdentifier:](v7, "setRequestIdentifier:", v13);

  }
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("playbackSession"), v7);
  v16 = v15;
  if (v8)
    objc_msgSend(v15, "appendFormat:", CFSTR(" for %@"), v8);
  _MRLogForCategory(0xAuLL);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v29 = v16;
    _os_log_impl(&dword_193827000, v17, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___MRMediaRemotePlaybackSessionRequest_block_invoke;
  v23[3] = &unk_1E30C9228;
  v24 = v7;
  v25 = v14;
  v26 = v9;
  v27 = v10;
  v18 = v9;
  v19 = v10;
  v20 = v14;
  v21 = v7;
  MRMediaRemoteNowPlayingResolvePlayerPath(v8, v18, v23);

}

void MRMediaRemotePlaybackSessionRequest(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemotePlaybackSessionRequest_block_invoke;
  v9[3] = &unk_1E30CA6F8;
  v10 = v7;
  v8 = v7;
  _MRMediaRemotePlaybackSessionRequest(a1, a2, a3, v9);

}

void sub_19397709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MRNowPlayingValuesAreEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  double v9;

  v3 = a1;
  v4 = a2;
  if (v3 == v4)
    goto LABEL_3;
  if ((objc_msgSend(v3, "isEqual:", v4) & 1) != 0)
    goto LABEL_3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v3, "floatValue");
      v7 = v6;
      objc_msgSend(v4, "floatValue");
      if (vabds_f32(v7, v8) <= 0.01)
        goto LABEL_3;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (objc_msgSend(v3, "timeIntervalSinceDate:", v4), fabs(v9) <= 1.0))
  {
LABEL_3:
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

MRContentItem *_MRCreateTemporalContentItemFromNowPlayingInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  MRContentItem *v7;

  v1 = a1;
  objc_msgSend(v1, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoPlaybackRate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoElapsedTime"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 3);
  v6 = v5;
  if (v2)
    objc_msgSend(v5, "setValue:forKey:", v2, CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
  if (v3)
    objc_msgSend(v6, "setValue:forKey:", v3, CFSTR("kMRMediaRemoteNowPlayingInfoPlaybackRate"));
  if (v4)
    objc_msgSend(v6, "setValue:forKey:", v4, CFSTR("kMRMediaRemoteNowPlayingInfoElapsedTime"));
  v7 = -[MRContentItem initWithNowPlayingInfo:]([MRContentItem alloc], "initWithNowPlayingInfo:", v6);

  return v7;
}

uint64_t MRNowPlayingSessionManagerDataSourceSetCreatePlayerCallback(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setCreateNewPlayerCallback:", v1);

  return MRGetSharedService();
}

void MRNowPlayingSessionManagerDataSourceSetDestroyPlayerCallback(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setDestroyPlayerCallback:", v1);

}

void MRNowPlayingSessionManagerDataSourceGenerateSetGeneratePlayerIDCallback(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setGeneratePlayerIDCallback:", v1);

}

void MRNowPlayingSessionManagerStartSession(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  _QWORD v27[4];
  __CFString *v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  __CFString *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRAVOutputDevice localDeviceUID](MRAVOutputDevice, "localDeviceUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("MRNowPlayingSessionManagerStartSession"), v6);
  v10 = v9;
  if (v8)
    objc_msgSend(v9, "appendFormat:", CFSTR(" for %@"), v8);
  _MRLogForCategory(0xAuLL);
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v40 = v10;
    _os_log_impl(&dword_193827000, v11, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v12 = MEMORY[0x1E0C809B0];
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __MRNowPlayingSessionManagerStartSession_block_invoke;
  v32[3] = &unk_1E30CA760;
  v33 = v8;
  v34 = CFSTR("MRNowPlayingSessionManagerStartSession");
  v13 = v6;
  v35 = v13;
  v36 = v7;
  v38 = v4;
  v14 = v3;
  v37 = v14;
  v15 = v4;
  v16 = v7;
  v17 = v8;
  v18 = (void *)MEMORY[0x194036C44](v32);
  v26 = v10;
  v19 = v15;
  if (MRNowPlayingSessionManagerStartSession_onceToken != -1)
    dispatch_once(&MRNowPlayingSessionManagerStartSession_onceToken, &__block_literal_global_50);
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "service");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "mrXPCConnection");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v12;
  v27[1] = 3221225472;
  v27[2] = __MRNowPlayingSessionManagerStartSession_block_invoke_43;
  v27[3] = &unk_1E30CA7D0;
  v28 = CFSTR("MRNowPlayingSessionManagerStartSession");
  v29 = v13;
  v30 = v14;
  v31 = v18;
  v23 = v18;
  v24 = v14;
  v25 = v13;
  objc_msgSend(v22, "sendMessageWithType:queue:reply:", 0x300000000000023, v24, v27);

}

void MRNowPlayingSessionManagerStopSession()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  _BOOL4 v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  uint32_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint8_t buf[4];
  const __CFString *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "UUIDString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  +[MRAVOutputDevice localDeviceUID](MRAVOutputDevice, "localDeviceUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("MRNowPlayingSessionManagerStopSession"), v2);
  v5 = v4;
  if (v3)
    -[__CFString appendFormat:](v4, "appendFormat:", CFSTR(" for %@"), v3);
  _MRLogForCategory(0xAuLL);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v39 = v5;
    _os_log_impl(&dword_193827000, v6, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "service");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "mrXPCConnection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  MRCreateXPCMessage(0x300000000000024uLL);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0;
  v11 = (id)objc_msgSend(v9, "sendSyncMessage:error:", v10, &v37);
  v12 = v37;

  MRMediaRemoteSetNowPlayingApplicationOverrideEnabled(0);
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "currentSessionPlayerPath");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingSessionManagerStopSession(void)");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, CFSTR("MRNowPlayingSessionManagerDataSource.m"), 129, CFSTR("Unbalanced calls to start/stop session: currentSessionPlayerPath should not be nil when stopping"));

  }
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "currentSessionPlayerPath");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "client");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "origin");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteRemoveClientForOrigin((uint64_t)v17, (uint64_t)v18, 0, 0);

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setCurrentSessionPlayerPath:", 0);

  _MRLogForCategory(0xAuLL);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = v20;
  if (!v12)
  {
    v28 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (!v28)
        goto LABEL_21;
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "timeIntervalSinceDate:", v0);
      *(_DWORD *)buf = 138544130;
      v39 = CFSTR("MRNowPlayingSessionManagerStopSession");
      v40 = 2114;
      v41 = v2;
      v42 = 2114;
      v43 = v3;
      v44 = 2048;
      v45 = v29;
      v30 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      v31 = v21;
      v32 = 42;
    }
    else
    {
      if (!v28)
        goto LABEL_21;
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "timeIntervalSinceDate:", v0);
      *(_DWORD *)buf = 138543874;
      v39 = CFSTR("MRNowPlayingSessionManagerStopSession");
      v40 = 2114;
      v41 = v2;
      v42 = 2048;
      v43 = v34;
      v30 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      v31 = v21;
      v32 = 32;
    }
    _os_log_impl(&dword_193827000, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
    goto LABEL_20;
  }
  v22 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v22)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "timeIntervalSinceDate:", v0);
      *(_DWORD *)buf = 138544386;
      v39 = CFSTR("MRNowPlayingSessionManagerStopSession");
      v40 = 2114;
      v41 = v2;
      v42 = 2114;
      v43 = v12;
      v44 = 2114;
      v45 = v3;
      v46 = 2048;
      v47 = v24;
      v25 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      v26 = v21;
      v27 = 52;
LABEL_16:
      _os_log_error_impl(&dword_193827000, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
LABEL_20:

    }
  }
  else if (v22)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "timeIntervalSinceDate:", v0);
    *(_DWORD *)buf = 138544130;
    v39 = CFSTR("MRNowPlayingSessionManagerStopSession");
    v40 = 2114;
    v41 = v2;
    v42 = 2114;
    v43 = v12;
    v44 = 2048;
    v45 = v33;
    v25 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
    v26 = v21;
    v27 = 42;
    goto LABEL_16;
  }
LABEL_21:

}

id MRNowPlayingSessionManagerLocalDeviceRoutingContextID()
{
  void *v0;
  void *v1;
  void *v2;
  __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  void *v24;
  void *v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  void *v29;
  uint8_t buf[4];
  const __CFString *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (MRNowPlayingSessionManagerLocalDeviceRoutingContextID_onceToken != -1)
    dispatch_once(&MRNowPlayingSessionManagerLocalDeviceRoutingContextID_onceToken, &__block_literal_global_52);
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "UUIDString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("MRNowPlayingSessionManagerLocalDeviceRoutingContextID"), v1);
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "displayName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString appendFormat:](v3, "appendFormat:", CFSTR(" for %@"), v7);

  }
  _MRLogForCategory(0xAuLL);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v32 = v3;
    _os_log_impl(&dword_193827000, v8, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "routingContextID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v11, "copy");

  objc_msgSend((id)MRNowPlayingSessionManagerLocalDeviceRoutingContextID___lock, "lock");
  objc_storeStrong((id *)&MRNowPlayingSessionManagerLocalDeviceRoutingContextID___routingContextID, v12);
  objc_msgSend((id)MRNowPlayingSessionManagerLocalDeviceRoutingContextID___lock, "unlock");
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "displayName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  _MRLogForCategory(0xAuLL);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v14)
    {
      if (v16)
      {
        +[MROrigin localOrigin](MROrigin, "localOrigin");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "displayName");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "timeIntervalSinceDate:", v2);
        *(_DWORD *)buf = 138544386;
        v32 = CFSTR("MRNowPlayingSessionManagerLocalDeviceRoutingContextID");
        v33 = 2114;
        v34 = v1;
        v35 = 2112;
        v36 = v12;
        v37 = 2114;
        v38 = v18;
        v39 = 2048;
        v40 = v20;
        v21 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        v22 = v15;
        v23 = 52;
LABEL_14:
        _os_log_impl(&dword_193827000, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);

LABEL_20:
        goto LABEL_21;
      }
      goto LABEL_21;
    }
    if (!v16)
      goto LABEL_21;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "timeIntervalSinceDate:", v2);
    *(_DWORD *)buf = 138544130;
    v32 = CFSTR("MRNowPlayingSessionManagerLocalDeviceRoutingContextID");
    v33 = 2114;
    v34 = v1;
    v35 = 2112;
    v36 = v12;
    v37 = 2048;
    v38 = v25;
    v26 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    v27 = v15;
    v28 = 42;
LABEL_19:
    _os_log_impl(&dword_193827000, v27, OS_LOG_TYPE_DEFAULT, v26, buf, v28);
    goto LABEL_20;
  }
  if (!v14)
  {
    if (!v16)
      goto LABEL_21;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "timeIntervalSinceDate:", v2);
    *(_DWORD *)buf = 138543874;
    v32 = CFSTR("MRNowPlayingSessionManagerLocalDeviceRoutingContextID");
    v33 = 2114;
    v34 = v1;
    v35 = 2048;
    v36 = v29;
    v26 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    v27 = v15;
    v28 = 32;
    goto LABEL_19;
  }
  if (v16)
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "displayName");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "timeIntervalSinceDate:", v2);
    *(_DWORD *)buf = 138544130;
    v32 = CFSTR("MRNowPlayingSessionManagerLocalDeviceRoutingContextID");
    v33 = 2114;
    v34 = v1;
    v35 = 2114;
    v36 = v18;
    v37 = 2048;
    v38 = v24;
    v21 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    v22 = v15;
    v23 = 42;
    goto LABEL_14;
  }
LABEL_21:

  return v12;
}

uint64_t MRNowPlayingSessionManagerIsSilentPrimary()
{
  void *v0;
  void *v1;
  void *v2;
  __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint8_t buf[4];
  const __CFString *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (MRNowPlayingSessionManagerIsSilentPrimary_onceToken != -1)
    dispatch_once(&MRNowPlayingSessionManagerIsSilentPrimary_onceToken, &__block_literal_global_59_0);
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "UUIDString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("MRNowPlayingSessionManagerIsSilentPrimary"), v1);
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "displayName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString appendFormat:](v3, "appendFormat:", CFSTR(" for %@"), v7);

  }
  _MRLogForCategory(0xAuLL);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v24 = v3;
    _os_log_impl(&dword_193827000, v8, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "isProxyGroupPlayer");
  objc_msgSend((id)MRNowPlayingSessionManagerIsSilentPrimary___lock, "lock");
  MRNowPlayingSessionManagerIsSilentPrimary___isSilentPrimary = v11;
  objc_msgSend((id)MRNowPlayingSessionManagerIsSilentPrimary___lock, "unlock");
  if ((_DWORD)v11)
    v12 = CFSTR("YES");
  else
    v12 = CFSTR("NO");
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "displayName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  _MRLogForCategory(0xAuLL);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      +[MROrigin localOrigin](MROrigin, "localOrigin");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "displayName");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "timeIntervalSinceDate:", v2);
      *(_DWORD *)buf = 138544386;
      v24 = CFSTR("MRNowPlayingSessionManagerIsSilentPrimary");
      v25 = 2114;
      v26 = v1;
      v27 = 2112;
      v28 = v12;
      v29 = 2114;
      v30 = v18;
      v31 = 2048;
      v32 = v20;
      _os_log_impl(&dword_193827000, v15, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds", buf, 0x34u);

LABEL_15:
    }
  }
  else if (v16)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "timeIntervalSinceDate:", v2);
    *(_DWORD *)buf = 138544130;
    v24 = CFSTR("MRNowPlayingSessionManagerIsSilentPrimary");
    v25 = 2114;
    v26 = v1;
    v27 = 2112;
    v28 = v12;
    v29 = 2048;
    v30 = v21;
    _os_log_impl(&dword_193827000, v15, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds", buf, 0x2Au);
    goto LABEL_15;
  }

  return v11;
}

uint64_t _MRDictionaryProtobufReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRKeyValuePairProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRKeyValuePairProtobuf);
        objc_msgSend(a1, "addPair:", v17);
        if (!PBReaderPlaceMark() || !_MRKeyValuePairProtobufReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19397A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

void sub_19397A5AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19397A61C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19397A7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void MRMediaRemoteGetApplicationDisplayIDForClient(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteGetApplicationDisplayIDForClient_block_invoke;
  v9[3] = &unk_1E30C8FE0;
  v10 = v7;
  v8 = v7;
  MRMediaRemoteGetClientProperties(a1, a2, a3, v9);

}

void MRMediaRemoteGetNowPlayingApplicationDisplayIDForOrigin(uint64_t a1, void *a2, void *a3)
{
  MRMediaRemoteGetApplicationDisplayIDForClient(0, a1, a2, a3);
}

void MRMediaRemoteGetNowPlayingApplicationDisplayID(void *a1, void *a2)
{
  MRMediaRemoteGetApplicationDisplayIDForClient(0, 0, a1, a2);
}

void MRMediaRemoteGetNowPlayingApplicationPIDForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteGetNowPlayingApplicationPIDForOrigin_block_invoke;
  v7[3] = &unk_1E30C8FE0;
  v8 = v5;
  v6 = v5;
  MRMediaRemoteGetClientProperties(0, a1, a2, v7);

}

void MRMediaRemoteGetNowPlayingApplicationPID(void *a1, void *a2)
{
  MRMediaRemoteGetNowPlayingApplicationPIDForOrigin(0, a1, a2);
}

void MRMediaRemoteGetNowPlayingApplicationDisplayNameForClient(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v7 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRMediaRemoteGetNowPlayingApplicationDisplayNameForClient_block_invoke;
  v9[3] = &unk_1E30C8FE0;
  v10 = v7;
  v8 = v7;
  MRMediaRemoteGetClientProperties(a1, a2, a3, v9);

}

void MRMediaRemoteGetNowPlayingApplicationDisplayName(uint64_t a1, void *a2, void *a3)
{
  MRMediaRemoteGetNowPlayingApplicationDisplayNameForClient(0, a1, a2, a3);
}

void MRMediaRemoteGetNowPlayingApplicationIsPlayingForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteGetNowPlayingApplicationIsPlayingForOrigin_block_invoke;
  v7[3] = &unk_1E30CA878;
  v8 = v5;
  v6 = v5;
  MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin(a1, a2, v7);

}

void MRMediaRemoteGetNowPlayingApplicationIsPlaying(void *a1, void *a2)
{
  MRMediaRemoteGetNowPlayingApplicationIsPlayingForOrigin(0, a1, a2);
}

void MRMediaRemoteGetAnyApplicationIsPlayingForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  MRPlayerPath *v8;

  v5 = a3;
  v6 = a2;
  v8 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v7 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetAnyAppIsPlaying(v7, v8, v6, v5);

}

void MRMediaRemoteGetAnyApplicationIsPlaying(void *a1, void *a2)
{
  MRMediaRemoteGetAnyApplicationIsPlayingForOrigin(0, a1, a2);
}

void MRMediaRemoteSetDisplayNameForClient(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;

  v9 = a5;
  v10 = a4;
  objc_msgSend(a1, "setDisplayName:", a3);
  MRMediaRemoteUpdateClientProperties((uint64_t)a1, a2, v10, v9);

}

void MRMediaRemoteGetNowPlayingInfoForClient(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  MRPlayerPath *v11;

  v9 = a5;
  v10 = a4;
  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, a1, 0);
  MRMediaRemoteGetNowPlayingInfoForPlayer((uint64_t)v11, a3, v10, v9);

}

void MRMediaRemoteGetNowPlayingInfoForOrigin(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteGetNowPlayingInfoForOrigin_block_invoke;
  v7[3] = &unk_1E30CA8A0;
  v8 = v5;
  v6 = v5;
  MRMediaRemoteGetNowPlayingInfoForClient(0, a1, 1, a2, v7);

}

void MRMediaRemoteGetNowPlayingInfo(void *a1, void *a2)
{
  MRMediaRemoteGetNowPlayingInfoForOrigin(0, a1, a2);
}

void MRMediaRemoteGetNowPlayingInfoWithOptionalArtwork(uint64_t a1, int a2, void *a3, void *a4)
{
  MRMediaRemoteGetNowPlayingInfoForClient(0, a1, a2, a3, a4);
}

void MRMediaRemoteGetNowPlayingArtwork(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  MRPlayerPath *v7;
  MRPlaybackQueueRequest *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v5 = a3;
  v6 = a2;
  v7 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v8 = -[MRPlaybackQueueRequest initWithRange:]([MRPlaybackQueueRequest alloc], "initWithRange:", 0, 1);
  -[MRPlaybackQueueRequest setCachingPolicy:](v8, "setCachingPolicy:", 2);
  -[MRPlaybackQueueRequest setArtworkWidth:](v8, "setArtworkWidth:", 600.0);
  -[MRPlaybackQueueRequest setArtworkHeight:](v8, "setArtworkHeight:", 600.0);
  -[MRPlaybackQueueRequest setLegacyNowPlayingInfoRequest:](v8, "setLegacyNowPlayingInfoRequest:", 1);
  v9 = (void *)objc_msgSend(v5, "copy");

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRMediaRemoteGetNowPlayingArtwork_block_invoke;
  v11[3] = &unk_1E30C7B60;
  v12 = v9;
  v10 = v9;
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync(v8, v7, v6, v11);

}

void MRMediaRemoteGetNowPlayingInfoForApp(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  MRClient *v11;

  v9 = a5;
  v10 = a4;
  v11 = -[MRClient initWithProcessIdentifier:bundleIdentifier:]([MRClient alloc], "initWithProcessIdentifier:bundleIdentifier:", 0, a1);
  MRMediaRemoteGetNowPlayingInfoForClient((uint64_t)v11, a2, a3, v10, v9);

}

void MRMediaRemoteSetNowPlayingInfoForOriginWithMergePolicy(uint64_t a1, void *a2, int a3)
{
  MRPlayerPath *v5;

  v5 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  MRMediaRemoteSetNowPlayingInfoForPlayer((uint64_t)v5, a2, a3, 0, 0);

}

void MRMediaRemoteSetNowPlayingInfoForPlayer(uint64_t a1, void *a2, int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *Error;
  void *v24;
  MRClient *v25;
  void *v26;
  void *v27;
  MRNowPlayingArtworkImage *v28;
  id v29;
  void *v30;
  MRNowPlayingArtworkImage *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  MRNowPlayingArtworkImage *v44;
  id v45;
  void *v46;
  void *v47;
  double v48;
  double v49;
  _BOOL4 IsAdvancing;
  BOOL v51;
  double v52;
  void *v53;
  int IsEqual;
  _BOOL4 v55;
  MRNowPlayingArtworkImage *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  int v61;
  NSObject *v62;
  MRNowPlayingArtworkImage *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  __CFString *v69;
  NSObject *v70;
  const __CFString *v71;
  NSObject *v72;
  MRContentItem *v73;
  void *v74;
  void *v75;
  void *v76;
  MRPlaybackQueueRequest *v77;
  void *v78;
  void *v79;
  void *v80;
  NSObject *v81;
  MRNowPlayingArtworkImage *v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  int v87;
  id v88;
  void *v89;
  id v90;
  void *v91;
  _BOOL4 v92;
  void *v93;
  MRNowPlayingArtworkImage *v94;
  void *v95;
  id v96;
  uint64_t v97;
  void *v98;
  _QWORD v99[4];
  id v100;
  id v101;
  uint8_t buf[4];
  const __CFString *v103;
  __int16 v104;
  __CFString *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = a5;
  v11 = v9;
  v12 = v10;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = a2;
  v15 = v11;
  if (!v11)
  {
    v15 = (void *)MEMORY[0x1E0C80D38];
    v16 = MEMORY[0x1E0C80D38];
  }
  v99[0] = MEMORY[0x1E0C809B0];
  v99[1] = 3221225472;
  v99[2] = ___MRSetNowPlayingInfo_block_invoke;
  v99[3] = &unk_1E30C75E8;
  v96 = v15;
  v100 = v96;
  v17 = v12;
  v101 = v17;
  v97 = MEMORY[0x194036C44](v99);
  _MRLogForCategory(1uLL);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    MRMediaRemoteSetNowPlayingInfoForPlayer_cold_2(a3, v14, v18);

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "playerClientForPlayerPath:", a1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v20, "playerPath");
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "clientCallbacks");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v19) = objc_msgSend(v21, "hasPlaybackQueueCallbacks");

  if (!(_DWORD)v19)
  {
    if (a3 && !objc_msgSend(v14, "count"))
      Error = 0;
    else
      Error = (void *)objc_msgSend(v14, "mutableCopy");
    objc_msgSend(Error, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoClientPropertiesData"));
    v90 = v17;
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    if (v93)
    {
      v25 = -[MRClient initWithData:]([MRClient alloc], "initWithData:", v93);
      if (v25)
      {
        objc_msgSend(v98, "client");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "origin");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        MRMediaRemoteSyncClientProperties(v25, (uint64_t)v26, (uint64_t)v27);

      }
      objc_msgSend(Error, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoClientPropertiesData"));

    }
    objc_msgSend(v20, "nowPlayingArtwork");
    v28 = (MRNowPlayingArtworkImage *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "nowPlayingInfo");
    v29 = (id)objc_claimAutoreleasedReturnValue();
    v94 = v28;
    v95 = v29;
    v89 = v13;
    v87 = a3;
    if (Error)
    {
      objc_msgSend(Error, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteNowPlayingInfoArtworkData"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v30, "length"))
      {
        v31 = -[MRNowPlayingArtworkImage initWithImageData:mimeType:]([MRNowPlayingArtworkImage alloc], "initWithImageData:mimeType:", v30, CFSTR("image/jpeg"));
        objc_msgSend(Error, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoArtworkData"));
      }
      else
      {
        v31 = 0;
      }
      v91 = v30;
      if (v87)
      {
        v32 = Error;
      }
      else
      {
        if (v29)
          v33 = (id)objc_msgSend(v29, "mutableCopy");
        else
          v33 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v32 = v33;
        objc_msgSend(v33, "addEntriesFromDictionary:", Error);
        if (!v31)
          v31 = v28;
        objc_msgSend(Error, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoElapsedTime"));
        v34 = objc_claimAutoreleasedReturnValue();
        if (v34)
        {
          v35 = (void *)v34;
          v84 = v14;
          v36 = v13;
          objc_msgSend(Error, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v37)
            objc_msgSend(v32, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
          v13 = v36;
          v14 = v84;
        }
      }
      if (_MRSetNowPlayingInfoShouldReplacePlaybackRateWithDefaultPlaybackRate_onceToken != -1)
        dispatch_once(&_MRSetNowPlayingInfoShouldReplacePlaybackRateWithDefaultPlaybackRate_onceToken, &__block_literal_global_52);
      if (_MRSetNowPlayingInfoShouldReplacePlaybackRateWithDefaultPlaybackRate_shouldReplace)
      {
        objc_msgSend(Error, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoDefaultPlaybackRate"));
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        if (v38)
          objc_msgSend(v32, "setValue:forKey:", v38, CFSTR("kMRMediaRemoteNowPlayingInfoPlaybackRate"));

      }
      objc_msgSend(Error, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoPlaybackRate"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v39)
      {
        v40 = objc_msgSend(v20, "playbackState");
        if (v40)
          goto LABEL_42;
        +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "playerPath");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "playerClientRequestsForPlayerPath:", v42);
        v85 = v14;
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        v13 = v89;
        v40 = objc_msgSend(v43, "playbackState");

        v14 = v85;
        if (v40)
        {
LABEL_42:
          objc_msgSend(v95, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoDefaultPlaybackRate"));
          v44 = v31;
          v45 = v14;
          v46 = v13;
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "doubleValue");
          v49 = v48;

          v13 = v46;
          v14 = v45;
          v31 = v44;
          v28 = v94;
          IsAdvancing = MRMediaRemotePlaybackStateIsAdvancing(v40);
          v51 = v49 != 0.0;
          if (!IsAdvancing)
            v51 = v49 == 0.0;
          if (!v51)
          {
            v52 = 0.0;
            if (IsAdvancing)
              v52 = 1.0;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "setValue:forKey:", v53, CFSTR("kMRMediaRemoteNowPlayingInfoPlaybackRate"));

          }
        }
      }

      v29 = v95;
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
    if (v29 == v32)
    {
      v55 = v29 == 0;
      IsEqual = 1;
    }
    else
    {
      if ((objc_msgSend(v20, "hasReceivedCommandRecently") & 1) != 0)
      {
        IsEqual = 0;
      }
      else
      {
        v56 = v31;
        v57 = (void *)objc_msgSend(v29, "mutableCopy");
        v58 = (void *)objc_msgSend(v32, "mutableCopy");
        v59 = v29;
        objc_msgSend(v57, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
        objc_msgSend(v58, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
        IsEqual = 0;
        if (v59 && v32)
          IsEqual = MRMediaRemoteNowPlayingInfoIsEqual(v58, v57);

        v28 = v94;
        v31 = v56;
        v13 = v89;
      }
      v55 = v32 == 0;
      if (v32 && (IsEqual & 1) == 0)
      {
        objc_msgSend(v32, "objectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
        v60 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v60)
          objc_msgSend(v32, "setObject:forKeyedSubscript:", v13, CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
        if (v95)
        {
          IsEqual = MRMediaRemoteNowPlayingInfoIsEqual(v32, v95);
          v55 = 0;
        }
        else
        {
          v55 = 0;
          IsEqual = 0;
        }
        v28 = v94;
      }
    }
    v92 = v55;
    v61 = v28 == v31 || -[MRNowPlayingArtworkImage isEqual:](v28, "isEqual:", v31);
    if ((IsEqual & v61 & 1) != 0)
    {
      _MRLogForCategory(1uLL);
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_193827000, v62, OS_LOG_TYPE_DEFAULT, "[NowPlayingInfo] Setting identical nowPlayingInfo, skipping update.", buf, 2u);
      }

      v63 = v94;
      v64 = v95;
      if (!v92)
        goto LABEL_112;
    }
    else
    {
      v82 = v31;
      v86 = v14;
      MRTypeAuditNowPlayingInfoDictionary((const __CFDictionary *)v32);
      +[MRContentItem extractedIdentifierFromNowPlayingInfo:](MRContentItem, "extractedIdentifierFromNowPlayingInfo:", v32);
      v65 = objc_claimAutoreleasedReturnValue();
      if (!v65)
      {
        objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "UUIDString");
        v65 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v32, "setObject:forKeyedSubscript:", v65, CFSTR("kMRMediaRemoteNowPlayingInfoContentItemIdentifier"));
      }
      v83 = (void *)v65;
      if ((IsEqual & 1) == 0)
        objc_msgSend(v20, "setNowPlayingInfo:", v32);
      if ((v61 & 1) == 0)
      {
        objc_msgSend(v20, "setNowPlayingArtwork:", v82);
        if (v82)
        {
          objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v67, "UUIDString");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "setObject:forKeyedSubscript:", v68, CFSTR("kMRMediaRemoteNowPlayingInfoArtworkIdentifier"));

        }
        else
        {
          objc_msgSend(v32, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoArtworkIdentifier"));
        }
      }
      v69 = (__CFString *)MRMediaRemoteCopyReadableDictionaryDescription(v32);
      _MRLogForCategory(1uLL);
      v70 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        v71 = CFSTR("Replace");
        if (!v87)
          v71 = CFSTR("Update");
        *(_DWORD *)buf = 138543618;
        v103 = v71;
        v104 = 2112;
        v105 = v69;
        _os_log_impl(&dword_193827000, v70, OS_LOG_TYPE_DEFAULT, "[NowPlayingInfo] Setting nowPlayingInfo with mergePolicy %{public}@: %@", buf, 0x16u);
      }
      v88 = v11;

      _MRLogForCategory(1uLL);
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v103 = (const __CFString *)v82;
        _os_log_impl(&dword_193827000, v72, OS_LOG_TYPE_DEFAULT, "[NowPlayingInfo] Setting nowPlayingInfo artwork: %@", buf, 0xCu);
      }

      v73 = -[MRContentItem initWithNowPlayingInfo:]([MRContentItem alloc], "initWithNowPlayingInfo:", v32);
      MRContentItemSetHasArtworkData(v73, v82 != 0);
      if (v95)
      {
        +[MRContentItem extractedIdentifierFromNowPlayingInfo:](MRContentItem, "extractedIdentifierFromNowPlayingInfo:");
        v74 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v74 = 0;
      }
      if (objc_msgSend(v74, "isEqualToString:", v65))
      {
        objc_msgSend(v20, "subscriptionController");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "requestForSubscribedContentItemIdentifier:", v65);
        v76 = (void *)objc_claimAutoreleasedReturnValue();

        v31 = v82;
        if (v76)
        {
          v77 = -[MRPlaybackQueueRequest initWithRange:]([MRPlaybackQueueRequest alloc], "initWithRange:", 0, 1);
          if ((IsEqual & 1) == 0)
          {
            if (objc_msgSend(v76, "includeLanguageOptions")
              && MRContentItemGetHasLanguageOptions(v73))
            {
              -[MRPlaybackQueueRequest setIncludeLanguageOptions:](v77, "setIncludeLanguageOptions:", 1);
            }
            if (objc_msgSend(v76, "includeMetadata"))
              -[MRPlaybackQueueRequest setIncludeMetadata:](v77, "setIncludeMetadata:", 1);
          }
          if ((v61 & 1) == 0)
          {
            if (MRContentItemGetHasArtworkData(v73))
            {
              -[MRPlaybackQueueRequest setArtworkWidth:](v77, "setArtworkWidth:", 600.0);
              -[MRPlaybackQueueRequest setArtworkHeight:](v77, "setArtworkHeight:", 600.0);
            }
            -[MRPlaybackQueueRequest setIncludeMetadata:](v77, "setIncludeMetadata:", 1);
          }
          MRMediaRemotePlaybackQueueDataSourceContentItemChangedWithRequestForPlayer((uint64_t)v73, v77, (uint64_t)v98);

        }
        v13 = v89;
        v14 = v86;
      }
      else
      {
        v13 = v89;
        if (v92 && MRMediaRemoteCurrentApplicationIsAirPlayReceiver())
        {
          objc_msgSend(v98, "client");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "skeleton");
          v79 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v98, "origin");
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          MRMediaRemoteSetClientProperties((uint64_t)v79, (uint64_t)v80, 0, 0);

        }
        MRMediaRemotePlaybackQueueDataSourceInvalidateWithNowPlayingContentItemForPlayer((uint64_t)v73, (uint64_t)v98);
        v31 = v82;
      }

      v11 = v88;
      v63 = v94;
      v64 = v95;
      if (!v92)
        goto LABEL_112;
    }
    _MRLogForCategory(1uLL);
    v81 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_193827000, v81, OS_LOG_TYPE_DEFAULT, "[NowPlayingInfo] Clearing nowPlayingInfo", buf, 2u);
    }

LABEL_112:
    v24 = (void *)v97;
    (*(void (**)(uint64_t, _QWORD))(v97 + 16))(v97, 0);

    v17 = v90;
    goto LABEL_113;
  }
  _MRLogForCategory(1uLL);
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    MRMediaRemoteSetNowPlayingInfoForPlayer_cold_1(v22);

  Error = (void *)MRMediaRemoteCreateError(2);
  v24 = (void *)v97;
  (*(void (**)(uint64_t, void *))(v97 + 16))(v97, Error);
LABEL_113:

}

void MRMediaRemoteSetNowPlayingInfoWithMergePolicy(void *a1, int a2)
{
  id v4;

  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteSetNowPlayingInfoForOriginWithMergePolicy((uint64_t)v4, a1, a2);

}

void MRMediaRemoteSetNowPlayingInfoForOrigin(uint64_t a1, void *a2)
{
  MRMediaRemoteSetNowPlayingInfoForOriginWithMergePolicy(a1, a2, 0);
}

void MRMediaRemoteSetNowPlayingInfo(void *a1)
{
  id v2;

  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteSetNowPlayingInfoForOriginWithMergePolicy((uint64_t)v2, a1, 0);

}

uint64_t _MRAdjustVolumeMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _MRRequestDetailsProtobuf *v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_MRRequestDetailsProtobuf);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (_MRRequestDetailsProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v25;

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_35;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRMediaRemoteSendCommand(uint64_t a1, void *a2)
{
  MRMediaRemoteSendCommandToApp(a1, a2, 0, 0, 0, 0, 0);
  return 1;
}

uint64_t MRMediaRemoteSendCommandToApp(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  id v13;
  id v14;
  MRClient *v15;

  v13 = a7;
  v14 = a6;
  v15 = -[MRClient initWithProcessIdentifier:bundleIdentifier:]([MRClient alloc], "initWithProcessIdentifier:bundleIdentifier:", 0, a4);
  MRMediaRemoteSendCommandToClient(a1, a2, a3, (uint64_t)v15, a5, v14, v13);

  return 1;
}

uint64_t MRMediaRemoteSendCommandForOrigin(uint64_t a1, uint64_t a2, void *a3)
{
  MRMediaRemoteSendCommandToApp(a2, a3, a1, 0, 0, 0, 0);
  return 1;
}

uint64_t MRMediaRemoteSendCommandWithReply(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  _QWORD v10[4];
  id v11;

  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __MRMediaRemoteSendCommandWithReply_block_invoke;
  v10[3] = &unk_1E30CA948;
  v11 = v7;
  v8 = v7;
  MRMediaRemoteSendCommandToApp(a1, a2, 0, 0, 0, a3, v10);

  return 1;
}

uint64_t MRMediaRemoteSendCommandForOriginWithReply(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[4];
  id v13;

  v9 = a5;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __MRMediaRemoteSendCommandForOriginWithReply_block_invoke;
  v12[3] = &unk_1E30CA948;
  v13 = v9;
  v10 = v9;
  MRMediaRemoteSendCommandToApp(a2, a3, a1, 0, 0, a4, v12);

  return 1;
}

uint64_t MRMediaRemoteSendCommandToClient(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  id v13;
  id v14;
  MRPlayerPath *v15;

  v13 = a7;
  v14 = a6;
  v15 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a3, a4, 0);
  MRMediaRemoteSendCommandToPlayer(a1, a2, v15, a5, v14, v13);

  return 1;
}

uint64_t MRMediaRemoteSendCommandToPlayer(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  _QWORD v14[4];
  id v15;

  v11 = a6;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __MRMediaRemoteSendCommandToPlayer_block_invoke;
  v14[3] = &unk_1E30CA9C0;
  v15 = v11;
  v12 = v11;
  _MRMediaRemoteSendCommandToPlayerWithResult(a1, a2, a3, a4, a5, v14);

  return 1;
}

void _MRMediaRemoteSendCommandToPlayer(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (**ClientModule)(id, uint64_t, id, id);
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  int v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  _QWORD v32[3];

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  if (MRMediaRemoteCommandRequiresOptions(a1) && objc_msgSend(v13, "isResolved"))
  {
    +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "playerClientRequestsForPlayerPath:", v13);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v17, "subscriptionController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "augmentCommandOptions:forCommand:", v11, a1);

  }
  if (MRMediaRemoteValidateOutgoingCommandOptions(a1, v11))
  {
    if (objc_msgSend(v13, "isLocal"))
    {
      if (MRMediaRemoteCommandSupportsAttribution(a1))
      {
        +[MRGroupSessionRequestManager sharedManager](MRGroupSessionRequestManager, "sharedManager");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "augmentLocalCommandOptions:", v11);

      }
      v20 = MRGetSharedService();
      ClientModule = (void (**)(id, uint64_t, id, id))MRMediaRemoteServiceGetClientModule(v20);
      (*ClientModule)(v13, a1, v11, v15);
      goto LABEL_19;
    }
    v23 = MRGetSharedService();
    v24 = v12;
    objc_msgSend(v13, "origin");
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "origin");
    v26 = (id)objc_claimAutoreleasedReturnValue();
    v31 = (void *)v23;
    if (v25 == v26)
    {

    }
    else
    {
      v27 = objc_msgSend(v25, "isEqual:", v26);

      if (!v27)
      {
        objc_msgSend(v13, "origin");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v28, "isLocal");

        v29 = v31;
        if ((v30 & 1) != 0)
        {
LABEL_18:
          v32[1] = v11;
          v32[0] = a1;
          v32[2] = v24;
          MRMediaRemoteServiceSendCommand(v29, (uint64_t)v32, v14, v15);

          goto LABEL_19;
        }
        v25 = v24;
        v24 = (id)objc_msgSend(v13, "copy");
LABEL_17:

        goto LABEL_18;
      }
    }

    v29 = v31;
    goto LABEL_17;
  }
  if (v15)
  {
    +[MRCommandResult commandResultWithSendError:](MRCommandResult, "commandResultWithSendError:", 7);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v15 + 2))(v15, v22);

  }
LABEL_19:

}

uint64_t _MRMediaRemoteSendCommandToPlayerWithResult(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  os_signpost_id_t v28;
  NSObject *v29;
  void *v30;
  os_signpost_id_t v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  const char *v36;
  NSObject *v37;
  qos_class_t v38;
  NSObject *v39;
  dispatch_queue_t v40;
  NSObject *v41;
  id v42;
  id v43;
  id v44;
  qos_class_t v46;
  void *v47;
  void *v48;
  id v49;
  _QWORD v50[4];
  id v51;
  id v52;
  id v53;
  NSObject *v54;
  id v55;
  dispatch_queue_t v56;
  id v57;
  qos_class_t v58;
  int v59;
  _QWORD block[4];
  id v61;
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a5;
  v14 = a6;
  if (!v13)
  {
    v13 = MEMORY[0x1E0C80D38];
    v15 = MEMORY[0x1E0C80D38];
  }
  if ((_DWORD)a1 != 116)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v17 = objc_claimAutoreleasedReturnValue();
    if ((_DWORD)a1 == 122 || !(_DWORD)a1)
    {
      _MRLogForCategory(2uLL);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = MRMediaRemoteCopyCommandDescription(a1);
        *(_DWORD *)buf = 138412546;
        v63 = v19;
        v64 = 2112;
        v65 = v17;
        _os_log_impl(&dword_193827000, v18, OS_LOG_TYPE_DEFAULT, "[MRSendCommand] WHAPRO: Sending %@ Command with Timestamp: %@", buf, 0x16u);

      }
    }
    v48 = (void *)v17;
    v46 = qos_class_self();
    v49 = v11;
    MRMediaRemoteResolveCommandOptions(v11, a4);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = MRMediaRemoteCopyCommandDescription(a1);
    v22 = objc_alloc(MEMORY[0x1E0CB37A0]);
    MRMediaRemoteCommandCreateDescription(a1, v20, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v22, "initWithFormat:", CFSTR("%@<%@>"), v23, 0);

    if (v12)
      objc_msgSend(v24, "appendFormat:", CFSTR(" for %@"), v12);
    _MRLogForCategory(0xAuLL);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v63 = v24;
      _os_log_impl(&dword_193827000, v25, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
    }
    v47 = v24;

    _MRLogForCategory(2uLL);
    v26 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "hash");

    if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193827000, v26, OS_SIGNPOST_INTERVAL_BEGIN, v28, "SendCommand", "", buf, 2u);
    }

    _MRLogForCategory(2uLL);
    v29 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "hash");

    if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193827000, v29, OS_SIGNPOST_INTERVAL_BEGIN, v31, "SendCommandWithResult", "", buf, 2u);
    }

    v32 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v32, "initWithFormat:", CFSTR("com.apple.mediaremote.command.%@.%@"), v21, v33);

    v35 = objc_retainAutorelease(v34);
    v36 = (const char *)objc_msgSend(v35, "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = qos_class_self();
    dispatch_queue_attr_make_with_qos_class(v37, v38, 0);
    v39 = objc_claimAutoreleasedReturnValue();
    v40 = dispatch_queue_create(v36, v39);

    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 3221225472;
    v50[2] = ___MRMediaRemoteSendCommandToPlayerWithResult_block_invoke_20;
    v50[3] = &unk_1E30CA998;
    v58 = v46;
    v59 = a1;
    v51 = v20;
    v52 = v48;
    v53 = v12;
    v57 = v14;
    v54 = v13;
    v55 = v21;
    v56 = v40;
    v41 = v40;
    v42 = v21;
    v43 = v48;
    v44 = v20;
    MRMediaRemoteNowPlayingResolvePlayerPath(v53, v41, v50);

    v11 = v49;
    v16 = v47;
    goto LABEL_22;
  }
  if (v14)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___MRMediaRemoteSendCommandToPlayerWithResult_block_invoke;
    block[3] = &unk_1E30C6770;
    v61 = v14;
    dispatch_async(v13, block);
    v16 = v61;
LABEL_22:

  }
  return 1;
}

uint64_t MRMediaRemoteSendCommandToPlayerWithResult(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  _MRMediaRemoteSendCommandToPlayerWithResult(a1, a2, a3, a4, a5, a6);
  return 1;
}

uint64_t MRMediaRemoteBroadcastCommand(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  MRPlayerPath *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  id v24;
  id v25;
  MRPlayerPath *v26;
  id v27;
  _QWORD v29[4];
  id v30;
  MRPlayerPath *v31;
  id v32;
  id v33;
  int v34;
  int buf;
  _BYTE buf_4[12];
  MRPlayerPath *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v11 = a5;
  v12 = a6;
  if (!v11)
  {
    v11 = (id)MEMORY[0x1E0C80D38];
    v13 = MEMORY[0x1E0C80D38];
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteResolveCommandOptions(a2, a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("kMRMediaRemoteOptionCommandBroadcasted"));
  v16 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a3, 0, 0);
  v17 = objc_alloc(MEMORY[0x1E0CB3940]);
  MRMediaRemoteCommandCreateDescription(a1, v15, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v17, "initWithFormat:", CFSTR("%@%@"), CFSTR("Broadcast"), v18);

  v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), v19, 0);
  v21 = v20;
  if (v16)
    objc_msgSend(v20, "appendFormat:", CFSTR(" for %@"), v16);
  _MRLogForCategory(0xAuLL);
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    buf = 138543362;
    *(_QWORD *)buf_4 = v21;
    _os_log_impl(&dword_193827000, v22, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  v23 = (void *)MRGetSharedService();
  *(_DWORD *)buf_4 = 0;
  *(_QWORD *)&buf_4[4] = v15;
  buf = a1;
  v37 = v16;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __MRMediaRemoteBroadcastCommand_block_invoke;
  v29[3] = &unk_1E30CA9E8;
  v34 = a1;
  v30 = v15;
  v31 = v16;
  v32 = v14;
  v33 = v12;
  v24 = v12;
  v25 = v14;
  v26 = v16;
  v27 = v15;
  MRMediaRemoteServiceBroadcastCommand(v23, (void **)&buf, v11, v29);

  return 1;
}

void MRMediaRemoteSetElapsedTime()
{
  void *v0;
  void *v1;
  const __CFString *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v2 = CFSTR("kMRMediaRemoteOptionPlaybackPosition");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = v0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemoteSendCommandToApp(24, v1, 0, 0, 0, 0, 0);
}

void MRMediaRemoteSetPlaybackSpeed(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("kMRMediaRemoteOptionPredefinedPlaybackRate");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemoteSendCommandToApp(19, v2, 0, 0, 0, 0, 0);
}

void MRMediaRemoteSetRepeatMode(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("kMRMediaRemoteOptionRepeatMode");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemoteSendCommandToApp(25, v2, 0, 0, 0, 0, 0);
}

void MRMediaRemoteSetShuffleMode(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("kMRMediaRemoteOptionShuffleMode");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemoteSendCommandToApp(26, v2, 0, 0, 0, 0, 0);
}

id MRMediaRemoteRestrictCommandClients(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  +[MRRestrictedCommandClientsManager sharedManager](MRRestrictedCommandClientsManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "restrictCommandClientsTo:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

BOOL __trackAnalyticsSendCommand_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "intValue") != 0;
}

void __trackAnalyticsSendCommand_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  int v10;
  __int16 v11;

  v3 = objc_msgSend(a2, "deviceClass");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __trackAnalyticsSendCommand_block_invoke_3;
  v4[3] = &unk_1E30CAA30;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v9 = v3;
  v7 = *(id *)(a1 + 48);
  v11 = *(_WORD *)(a1 + 68);
  v8 = *(id *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 64);
  MRAnalyticsSendEvent(CFSTR("com.apple.mediaremote.send-mr-command"), 0, v4);

}

id __trackAnalyticsSendCommand_block_invoke_3(uint64_t a1)
{
  id v2;
  void *v3;
  double v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  int v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[7];
  _QWORD v22[8];

  v22[7] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C99E08]);
  v21[0] = CFSTR("duration");
  v3 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
  objc_msgSend(v3, "numberWithDouble:", fabs(v4));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  v7 = *(const __CFString **)(a1 + 40);
  if (!v7)
    v7 = CFSTR("unknown");
  v22[0] = v5;
  v22[1] = v7;
  v21[1] = CFSTR("appBundle");
  v21[2] = CFSTR("originator");
  v8 = MRAnalyticsCompositionForLocalDevice();
  MRAnalyticsDeviceCompositionDescription(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v22[2] = v9;
  v21[3] = CFSTR("destination");
  v10 = MRAnalyticsCompositionForDeviceClass(*(_QWORD *)(a1 + 64));
  MRAnalyticsDeviceCompositionDescription(v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(a1 + 48);
  v22[3] = v11;
  v22[4] = v12;
  v21[4] = CFSTR("commandDescription");
  v21[5] = CFSTR("isLocalDevice");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v22[5] = v13;
  v21[6] = CFSTR("isLocalApp");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 77));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v22[6] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 7);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v2, "initWithDictionary:", v15);

  v17 = *(_QWORD *)(a1 + 56);
  if (v17)
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("returnStatuses"));
  v18 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v18)
  {
    MRMediaRemoteSendCommandErrorDescription(v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v19, CFSTR("errorDescription"));

  }
  return v16;
}

void sub_19397FD90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19397FEA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193981000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

BOOL _MRGetStateMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _MRRemoveEndpointsMessageProtobufReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addEndpointUIDs:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSetDiscoveryModeProtobufMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _MRDiscoverySessionConfigurationProtobuf *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_MRDiscoverySessionConfigurationProtobuf);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark()
          || (_MRDiscoverySessionConfigurationProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v25 = 0;
          v26 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
              break;
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v20 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_45;
            v25 += 7;
            v14 = v26++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_47;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_47:
          v31 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_41;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_43;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_43:
          v31 = 20;
        }
        *(_DWORD *)(a1 + v31) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRAudioRouteProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_44;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 16) = v19;
          continue;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v24;

          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 24) |= 4u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_50:
          v38 = v28 != 0;
          v39 = 21;
          goto LABEL_55;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_52;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          v34 = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        v34 = 0;
LABEL_54:
      v38 = v34 != 0;
      v39 = 20;
LABEL_55:
      *(_BYTE *)(a1 + v39) = v38;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

_OWORD *MRSystemAppPlaybackQueueCreate(const __CFAllocator *a1, int a2)
{
  _OWORD *v4;

  v4 = CFAllocatorAllocate(a1, 96, 0);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  *((_DWORD *)v4 + 2) = a2;
  *((_BYTE *)v4 + 12) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *(_QWORD *)v4 = a1;
  if (a1)
    CFRetain(a1);
  switch(a2)
  {
    case 1:
      *((_QWORD *)v4 + 10) = 0;
      break;
    case 2:
    case 3:
    case 5:
      *((_DWORD *)v4 + 16) = 0;
      break;
    case 6:
      goto LABEL_7;
    case 7:
      *((_QWORD *)v4 + 9) = 0;
LABEL_7:
      *((_QWORD *)v4 + 8) = 0;
      break;
    default:
      return v4;
  }
  return v4;
}

void MRSystemAppPlaybackQueueDestroy(_QWORD *ptr)
{
  const void *v2;
  const void *v3;
  const void *v4;
  char *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  if (!ptr)
    MRSystemAppPlaybackQueueDestroy_cold_1();
  switch(*((_DWORD *)ptr + 2))
  {
    case 1:
    case 7:
      v6 = (const void *)ptr[8];
      if (v6)
      {
        CFRelease(v6);
        ptr[8] = 0;
      }
      goto LABEL_12;
    case 2:
      if (*((_DWORD *)ptr + 16) != 2)
        goto LABEL_14;
LABEL_12:
      v5 = (char *)(ptr + 9);
      v4 = (const void *)ptr[9];
      if (v4)
      {
LABEL_13:
        CFRelease(v4);
        *(_QWORD *)v5 = 0;
      }
LABEL_14:
      v7 = (const void *)ptr[2];
      if (v7)
      {
        CFRelease(v7);
        ptr[2] = 0;
      }
      v8 = (const void *)ptr[3];
      if (v8)
      {
        CFRelease(v8);
        ptr[3] = 0;
      }
      v9 = (const void *)ptr[5];
      if (v9)
      {
        CFRelease(v9);
        ptr[5] = 0;
      }
      v10 = (const void *)ptr[7];
      if (v10)
      {
        CFRelease(v10);
        ptr[7] = 0;
      }
      v11 = (const void *)*ptr;
      CFAllocatorDeallocate((CFAllocatorRef)*ptr, ptr);
      if (v11)
        CFRelease(v11);
      return;
    case 3:
    case 5:
      v2 = (const void *)ptr[9];
      if (v2)
      {
        CFRelease(v2);
        ptr[9] = 0;
      }
      v3 = (const void *)ptr[10];
      if (v3)
      {
        CFRelease(v3);
        ptr[10] = 0;
      }
      v5 = (char *)(ptr + 11);
      v4 = (const void *)ptr[11];
      if (!v4)
        goto LABEL_14;
      goto LABEL_13;
    case 6:
      v5 = (char *)(ptr + 8);
      v4 = (const void *)ptr[8];
      if (!v4)
        goto LABEL_14;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
}

uint64_t MRSystemAppPlaybackQueueCopyDescription(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;
  __CFString *v3;
  void *v4;
  const __CFData *Length;
  const __CFString *v6;
  const __CFString *v7;
  __CFString *v8;
  int v9;
  const __CFURL *v10;
  __CFString *v11;
  CFStringRef v13;
  const __CFData *v14;

  v1 = a1;
  if (a1)
  {
    v2 = 0;
    switch(*(_DWORD *)(a1 + 8))
    {
      case 1:
        v3 = (__CFString *)MRMediaRemoteCopyShuffleModeDescription(*(_DWORD *)(a1 + 80));
        v8 = (__CFString *)MRMediaRemoteCopyRepeatModeDescription(*(_DWORD *)(v1 + 84));
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("queryData: %p, shuffleMode: %@, repeatMode: %@"), *(_QWORD *)(v1 + 64), v3, v8);
        v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

        goto LABEL_8;
      case 2:
        v9 = *(_DWORD *)(a1 + 64);
        if (v9 == 2)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("stationStringID: %@"), *(_QWORD *)(a1 + 72), v14);
          goto LABEL_15;
        }
        if (v9 == 1)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("stationID: %lld"), *(_QWORD *)(a1 + 72), v14);
LABEL_15:
          v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
          goto LABEL_18;
        }
LABEL_17:
        v2 = 0;
LABEL_18:
        v11 = (__CFString *)MRSystemAppPlaybackQueueCopyTypeDescription(*(_DWORD *)(v1 + 8));
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<MRSystemAppPlaybackQueue %p, type: %@, %@>"), v1, v11, v2);
        v1 = objc_claimAutoreleasedReturnValue();

        break;
      case 3:
      case 5:
        v3 = (__CFString *)MRMediaRemoteCopyShuffleModeDescription(*(_DWORD *)(a1 + 64));
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("shuffleMode: %@, trackIDs: %@"), v3, *(_QWORD *)(v1 + 72));
        v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_8:

        goto LABEL_18;
      case 6:
        v10 = *(const __CFURL **)(a1 + 64);
        if (!v10)
          goto LABEL_17;
        v4 = (void *)MEMORY[0x1E0CB3940];
        v13 = CFURLGetString(v10);
        v7 = CFSTR("seedTrack: %@");
LABEL_14:
        objc_msgSend(v4, "stringWithFormat:", v7, v13, v14);
        goto LABEL_15;
      case 7:
        v4 = (void *)MEMORY[0x1E0CB3940];
        v6 = *(const __CFString **)(a1 + 64);
        Length = *(const __CFData **)(a1 + 72);
        if (Length)
          Length = (const __CFData *)CFDataGetLength(Length);
        v13 = v6;
        v14 = Length;
        v7 = CFSTR("identifier: %@ data: <%ld>");
        goto LABEL_14;
      case 8:
        v2 = CFSTR("Empty Queue");
        goto LABEL_18;
      default:
        goto LABEL_18;
    }
  }
  return v1;
}

CFStringRef MRSystemAppPlaybackQueueCopyTypeDescription(int a1)
{
  int v1;

  v1 = a1 - 1;
  if ((a1 - 1) <= 7 && ((0xF7u >> v1) & 1) != 0)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], off_1E30CACB8[v1]);
  else
    return 0;
}

uint64_t MRSystemAppPlaybackQueueGetType(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetType_cold_1();
  return *(unsigned int *)(a1 + 8);
}

uint64_t MRSystemAppPlaybackQueueIsRequestingImmediatePlayback(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueIsRequestingImmediatePlayback_cold_1();
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result)
    MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback_cold_1(0, a2, a3);
  *(_BYTE *)(result + 12) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueGetSiriRecommendationIdentifier(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetSiriRecommendationIdentifier_cold_1();
  return *(_QWORD *)(a1 + 16);
}

void MRSystemAppPlaybackQueueSetSiriRecommendationIdentifier(uint64_t a1, const __CFString *a2)
{
  CFStringRef Copy;
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetSiriRecommendationIdentifier_cold_1();
  if (a2)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  else
    Copy = 0;
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 16) = Copy;
}

uint64_t MRSystemAppPlaybackQueueGetSiriAssetInfo(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetSiriAssetInfo_cold_1();
  return *(_QWORD *)(a1 + 24);
}

void MRSystemAppPlaybackQueueSetSiriAssetInfo(uint64_t a1, const __CFString *a2)
{
  CFStringRef Copy;
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetSiriAssetInfo_cold_1();
  if (a2)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  else
    Copy = 0;
  v4 = *(const void **)(a1 + 24);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 24) = Copy;
}

uint64_t MRSystemAppPlaybackQueueCopyFeatureName(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueCopyFeatureName_cold_1();
  return objc_msgSend(*(id *)(a1 + 32), "copy");
}

void MRSystemAppPlaybackQueueSetFeatureName(uint64_t a1, const __CFString *a2)
{
  CFStringRef Copy;
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetFeatureName_cold_1();
  if (a2)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  else
    Copy = 0;
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 32) = Copy;
}

uint64_t MRSystemAppPlaybackQueueGetSiriWHAMetricsInfo(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetSiriWHAMetricsInfo_cold_1();
  return *(_QWORD *)(a1 + 40);
}

void MRSystemAppPlaybackQueueSetSiriWHAMetricsInfo(uint64_t a1, const __CFDictionary *a2)
{
  CFDictionaryRef Copy;
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetSiriWHAMetricsInfo_cold_1();
  if (a2)
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  else
    Copy = 0;
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 40) = Copy;
}

BOOL MRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueue(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueue_cold_1();
  return *(_DWORD *)(a1 + 48) != 1;
}

uint64_t MRSystemAppPlaybackQueueGetReplaceIntent(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueue_cold_1();
  return *(unsigned int *)(a1 + 48);
}

uint64_t MRSystemAppPlaybackQueueSetShouldOverrideManuallyCuratedQueue(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result)
    MRSystemAppPlaybackQueueSetShouldOverrideManuallyCuratedQueue_cold_1(0, a2, a3);
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueSetReplaceIntent(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result)
    MRSystemAppPlaybackQueueSetShouldOverrideManuallyCuratedQueue_cold_1(0, a2, a3);
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueGetUserInfo(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetUserInfo_cold_1();
  return *(_QWORD *)(a1 + 56);
}

void MRSystemAppPlaybackQueueSetUserInfo(uint64_t a1, const __CFDictionary *a2)
{
  CFDictionaryRef Copy;
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetUserInfo_cold_1();
  if (a2)
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  else
    Copy = 0;
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 56) = Copy;
}

uint64_t MRSystemAppPlaybackQueueGetLocalQueryData(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetLocalQueryData_cold_1();
  if (*(_DWORD *)(a1 + 8) != 1)
    MRSystemAppPlaybackQueueGetLocalQueryData_cold_2();
  return *(_QWORD *)(a1 + 64);
}

void MRSystemAppPlaybackQueueSetLocalQueryData(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetLocalQueryData_cold_1();
  if (*(_DWORD *)(a1 + 8) != 1)
    MRSystemAppPlaybackQueueSetLocalQueryData_cold_2();
  v4 = *(const void **)(a1 + 64);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 64) = cf;
  if (cf)
    CFRetain(cf);
}

uint64_t MRSystemAppPlaybackQueueGetLocalQueryFirstItemMultiverseIDData(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetLocalQueryFirstItemMultiverseIDData_cold_1();
  if (*(_DWORD *)(a1 + 8) != 1)
    MRSystemAppPlaybackQueueGetLocalQueryFirstItemMultiverseIDData_cold_2();
  return *(_QWORD *)(a1 + 72);
}

void MRSystemAppPlaybackQueueSetLocalQueryFirstItemMultiverseIDData(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetLocalQueryFirstItemMultiverseIDData_cold_1();
  if (*(_DWORD *)(a1 + 8) != 1)
    MRSystemAppPlaybackQueueSetLocalQueryFirstItemMultiverseIDData_cold_2();
  v4 = *(const void **)(a1 + 72);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 72) = cf;
  if (cf)
    CFRetain(cf);
}

uint64_t MRSystemAppPlaybackQueueGetLocalQueryFirstItemPID(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetLocalQueryFirstItemPID_cold_1();
  if (*(_DWORD *)(a1 + 8) != 1)
    MRSystemAppPlaybackQueueGetLocalQueryFirstItemPID_cold_2();
  return *(_QWORD *)(a1 + 88);
}

uint64_t MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID(uint64_t result, uint64_t a2)
{
  if (!result)
    MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID_cold_1();
  if (*(_DWORD *)(result + 8) != 1)
    MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID_cold_2();
  *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueGetLocalQueryShuffleMode(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetLocalQueryShuffleMode_cold_1();
  if (*(_DWORD *)(a1 + 8) != 1)
    MRSystemAppPlaybackQueueGetLocalQueryShuffleMode_cold_2();
  return *(unsigned int *)(a1 + 80);
}

uint64_t MRSystemAppPlaybackQueueSetLocalQueryShuffleMode(uint64_t result, int a2)
{
  if (!result)
    MRSystemAppPlaybackQueueSetLocalQueryShuffleMode_cold_1();
  if (*(_DWORD *)(result + 8) != 1)
    MRSystemAppPlaybackQueueSetLocalQueryShuffleMode_cold_2();
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueGetLocalQueryRepeatMode(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetLocalQueryRepeatMode_cold_1();
  if (*(_DWORD *)(a1 + 8) != 1)
    MRSystemAppPlaybackQueueGetLocalQueryRepeatMode_cold_2();
  return *(unsigned int *)(a1 + 84);
}

uint64_t MRSystemAppPlaybackQueueSetLocalQueryRepeatMode(uint64_t result, int a2)
{
  if (!result)
    MRSystemAppPlaybackQueueSetLocalQueryRepeatMode_cold_1();
  if (*(_DWORD *)(result + 8) != 1)
    MRSystemAppPlaybackQueueSetLocalQueryRepeatMode_cold_2();
  *(_DWORD *)(result + 84) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueGetRadioStationIDType(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 2)
      return *(unsigned int *)(result + 64);
    else
      return 0;
  }
  return result;
}

void MRSystemAppPlaybackQueueSetRadioStationIDType(uint64_t a1, int a2)
{
  int v4;
  const void *v5;

  if (!a1)
    MRSystemAppPlaybackQueueSetRadioStationIDType_cold_1();
  if (*(_DWORD *)(a1 + 8) != 2)
    MRSystemAppPlaybackQueueSetRadioStationIDType_cold_2();
  v4 = *(_DWORD *)(a1 + 64);
  if (v4 != 2)
  {
    if (v4 != 1)
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = *(const void **)(a1 + 72);
  if (v5)
  {
    CFRelease(v5);
LABEL_8:
    *(_QWORD *)(a1 + 72) = 0;
  }
LABEL_9:
  *(_DWORD *)(a1 + 64) = a2;
}

uint64_t MRSystemAppPlaybackQueueGetRadioStationIntegerPID(uint64_t a1)
{
  if (!a1)
    MRSystemAppPlaybackQueueGetRadioStationIntegerPID_cold_1();
  if (*(_DWORD *)(a1 + 8) == 2 && *(_DWORD *)(a1 + 64) == 1)
    return *(_QWORD *)(a1 + 72);
  else
    return 0;
}

uint64_t MRSystemAppPlaybackQueueSetRadioStationIntegerPID(uint64_t result, uint64_t a2)
{
  if (!result)
    MRSystemAppPlaybackQueueSetRadioStationIntegerPID_cold_1();
  if (*(_DWORD *)(result + 8) != 2)
    MRSystemAppPlaybackQueueSetRadioStationIntegerPID_cold_3();
  if (*(_DWORD *)(result + 64) != 1)
    MRSystemAppPlaybackQueueSetRadioStationIntegerPID_cold_2();
  *(_QWORD *)(result + 72) = a2;
  return result;
}

CFStringRef MRSystemAppPlaybackQueueCopyRadioStationStringIdentifier(uint64_t a1)
{
  const __CFString *v1;

  if (a1 && *(_DWORD *)(a1 + 8) == 2 && *(_DWORD *)(a1 + 64) == 2 && (v1 = *(const __CFString **)(a1 + 72)) != 0)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  else
    return 0;
}

void MRSystemAppPlaybackQueueSetRadioStationStringIdentifier(uint64_t a1, CFStringRef theString)
{
  const void *v4;

  if (!a1)
    MRSystemAppPlaybackQueueSetRadioStationStringIdentifier_cold_1();
  if (*(_DWORD *)(a1 + 8) != 2)
    MRSystemAppPlaybackQueueSetRadioStationStringIdentifier_cold_3();
  if (*(_DWORD *)(a1 + 64) != 2)
    MRSystemAppPlaybackQueueSetRadioStationStringIdentifier_cold_2();
  v4 = *(const void **)(a1 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 72) = 0;
  }
  if (theString)
    *(_QWORD *)(a1 + 72) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
}

CFArrayRef MRSystemAppPlaybackQueueCopyGenericTrackIdentifiers(uint64_t a1)
{
  int v1;
  const __CFArray *v3;

  if (!a1)
    MRSystemAppPlaybackQueueCopyGenericTrackIdentifiers_cold_1();
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 3 && v1 != 5)
    MRSystemAppPlaybackQueueCopyGenericTrackIdentifiers_cold_2();
  v3 = *(const __CFArray **)(a1 + 72);
  if (v3)
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
  else
    return 0;
}

void MRSystemAppPlaybackQueueSetGenericTrackIdentifiers(uint64_t a1, CFArrayRef theArray)
{
  int v3;
  const void *v6;

  if (!a1)
    MRSystemAppPlaybackQueueSetGenericTrackIdentifiers_cold_1();
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != 3 && v3 != 5)
    MRSystemAppPlaybackQueueSetGenericTrackIdentifiers_cold_2();
  v6 = *(const void **)(a1 + 72);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 72) = 0;
  }
  if (theArray)
    *(_QWORD *)(a1 + 72) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theArray);
}

uint64_t MRSystemAppPlaybackQueueGetFirstItemGenericTrackIdentifier(uint64_t a1)
{
  int v1;

  if (!a1)
    MRSystemAppPlaybackQueueGetFirstItemGenericTrackIdentifier_cold_1();
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 3 && v1 != 5)
    MRSystemAppPlaybackQueueGetFirstItemGenericTrackIdentifier_cold_2();
  return *(_QWORD *)(a1 + 80);
}

void MRSystemAppPlaybackQueueSetFirstItemGenericTrackIdentifier(uint64_t a1, const __CFString *a2)
{
  int v3;
  const void *v5;
  CFStringRef Copy;

  if (!a1)
    MRSystemAppPlaybackQueueSetFirstItemGenericTrackIdentifier_cold_1();
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != 3 && v3 != 5)
    MRSystemAppPlaybackQueueSetFirstItemGenericTrackIdentifier_cold_2();
  v5 = *(const void **)(a1 + 80);
  if (a2)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 80) = Copy;
  if (v5)
    CFRelease(v5);
}

uint64_t MRSystemAppPlaybackQueueGetTracklistShuffleMode(uint64_t a1)
{
  int v1;

  if (!a1)
    MRSystemAppPlaybackQueueGetTracklistShuffleMode_cold_1();
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 3 && v1 != 5)
    MRSystemAppPlaybackQueueGetTracklistShuffleMode_cold_2();
  return *(unsigned int *)(a1 + 64);
}

uint64_t MRSystemAppPlaybackQueueSetTracklistShuffleMode(uint64_t result, int a2)
{
  int v2;

  if (!result)
    MRSystemAppPlaybackQueueSetTracklistShuffleMode_cold_1();
  v2 = *(_DWORD *)(result + 8);
  if (v2 != 3 && v2 != 5)
    MRSystemAppPlaybackQueueSetTracklistShuffleMode_cold_2();
  *(_DWORD *)(result + 64) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueGetTracklistRepeatMode(uint64_t a1)
{
  int v1;

  if (!a1)
    MRSystemAppPlaybackQueueGetTracklistRepeatMode_cold_1();
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 3 && v1 != 5)
    MRSystemAppPlaybackQueueGetTracklistRepeatMode_cold_2();
  return *(unsigned int *)(a1 + 68);
}

uint64_t MRSystemAppPlaybackQueueSetTracklistRepeatMode(uint64_t result, int a2)
{
  int v2;

  if (!result)
    MRSystemAppPlaybackQueueSetTracklistRepeatMode_cold_1();
  v2 = *(_DWORD *)(result + 8);
  if (v2 != 3 && v2 != 5)
    MRSystemAppPlaybackQueueSetTracklistRepeatMode_cold_2();
  *(_DWORD *)(result + 68) = a2;
  return result;
}

uint64_t MRSystemAppPlaybackQueueGetTracklistCollectionIdentifierSetData(uint64_t a1)
{
  int v1;

  if (!a1)
    MRSystemAppPlaybackQueueGetTracklistCollectionIdentifierSetData_cold_1();
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 3 && v1 != 5)
    MRSystemAppPlaybackQueueGetTracklistCollectionIdentifierSetData_cold_2();
  return *(_QWORD *)(a1 + 88);
}

void MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData(uint64_t a1, CFTypeRef cf)
{
  int v3;
  const void *v6;

  if (!a1)
    MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData_cold_1();
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != 3 && v3 != 5)
    MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData_cold_2();
  v6 = *(const void **)(a1 + 88);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 88) = cf;
  if (cf)
    CFRetain(cf);
}

const __CFURL *MRSystemAppPlaybackQueueCopyGeniusSeedTrack(uint64_t a1)
{
  const __CFURL *result;
  const __CFAllocator *v3;
  const __CFString *v4;
  const __CFURL *v5;

  if (!a1)
    MRSystemAppPlaybackQueueCopyGeniusSeedTrack_cold_1();
  if (*(_DWORD *)(a1 + 8) != 6)
    MRSystemAppPlaybackQueueCopyGeniusSeedTrack_cold_2();
  result = *(const __CFURL **)(a1 + 64);
  if (result)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFURLGetString(result);
    v5 = CFURLGetBaseURL(*(CFURLRef *)(a1 + 64));
    return CFURLCreateWithString(v3, v4, v5);
  }
  return result;
}

void MRSystemAppPlaybackQueueSetGeniusSeedTrack(uint64_t a1, CFURLRef anURL)
{
  const void *v4;
  const __CFAllocator *v5;
  const __CFString *v6;
  const __CFURL *v7;

  if (!a1)
    MRSystemAppPlaybackQueueSetGeniusSeedTrack_cold_1();
  if (*(_DWORD *)(a1 + 8) != 6)
    MRSystemAppPlaybackQueueSetGeniusSeedTrack_cold_2();
  v4 = *(const void **)(a1 + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (anURL)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = CFURLGetString(anURL);
    v7 = CFURLGetBaseURL(anURL);
    *(_QWORD *)(a1 + 64) = CFURLCreateWithString(v5, v6, v7);
  }
}

CFStringRef MRSystemAppPlaybackQueueCopyCustomDataIdentifier(uint64_t a1)
{
  const __CFString *v1;

  if (!a1)
    MRSystemAppPlaybackQueueCopyCustomDataIdentifier_cold_1();
  if (*(_DWORD *)(a1 + 8) != 7)
    MRSystemAppPlaybackQueueCopyCustomDataIdentifier_cold_2();
  v1 = *(const __CFString **)(a1 + 64);
  if (v1)
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
  else
    return 0;
}

CFStringRef MRSystemAppPlaybackQueueSetCustomDataIdentifier(uint64_t a1, CFStringRef theString)
{
  const void *v4;
  CFStringRef result;

  if (!a1)
    MRSystemAppPlaybackQueueSetCustomDataIdentifier_cold_1();
  if (*(_DWORD *)(a1 + 8) != 7)
    MRSystemAppPlaybackQueueSetCustomDataIdentifier_cold_2();
  v4 = *(const void **)(a1 + 64);
  if (v4)
    CFRelease(v4);
  if (theString)
    result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
  else
    result = 0;
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

CFTypeRef MRSystemAppPlaybackQueueCopyCustomData(uint64_t a1)
{
  CFTypeRef result;

  if (!a1)
    MRSystemAppPlaybackQueueCopyCustomData_cold_1();
  if (*(_DWORD *)(a1 + 8) != 7)
    MRSystemAppPlaybackQueueCopyCustomData_cold_2();
  result = *(CFTypeRef *)(a1 + 72);
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef MRSystemAppPlaybackQueueSetCustomData(uint64_t a1, CFTypeRef cf)
{
  const void *v4;
  CFTypeRef result;

  if (!a1)
    MRSystemAppPlaybackQueueSetCustomData_cold_1();
  if (*(_DWORD *)(a1 + 8) != 7)
    MRSystemAppPlaybackQueueSetCustomData_cold_2();
  v4 = *(const void **)(a1 + 72);
  if (v4)
    CFRelease(v4);
  if (cf)
    result = CFRetain(cf);
  else
    result = 0;
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

uint64_t MRMediaRemoteCopyPlaybackQueueInsertionPositionDescription(unsigned int a1)
{
  __CFString *v1;

  if (a1 > 3)
    v1 = 0;
  else
    v1 = off_1E30CACF8[a1];
  return -[__CFString copy](v1, "copy");
}

uint64_t MRSystemAppPlaybackQueueCreateExternalRepresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  const __CFString *v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  const __CFString *v29;
  const __CFURL *v30;
  void *v32;

  v2 = a2;
  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_DWORD *)(v2 + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("PQty"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(v2 + 12));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, CFSTR("PQip"));

    LODWORD(v6) = *(_DWORD *)(v2 + 48);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, CFSTR("PQri"));

    if ((_DWORD)v6 == 1)
      objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("PQso"));
    v8 = *(id *)(v2 + 56);
    if (v8)
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("PQui"));
    v9 = *(id *)(v2 + 16);
    if (v9)
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v9, CFSTR("PQsr"));
    v10 = *(id *)(v2 + 24);
    if (v10)
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, CFSTR("PQai"));
    v11 = *(id *)(v2 + 32);
    if (v11)
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, CFSTR("PQfn"));
    v12 = *(id *)(v2 + 40);
    if (v12)
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("PQwm"));
    switch(v4)
    {
      case 1u:
        v21 = *(id *)(v2 + 64);
        if (v21)
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v21, CFSTR("PQqd"));
        v32 = v21;
        v22 = *(id *)(v2 + 72);
        if (v22)
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v22, CFSTR("PQmv"));
        if (*(_QWORD *)(v2 + 88))
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v23, CFSTR("PQfi"));

        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v2 + 80));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v24, CFSTR("PQsm"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v2 + 84));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v25, CFSTR("PQrm"));

        break;
      case 2u:
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v2 + 64));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v26, CFSTR("PQsy"));

        v27 = *(_DWORD *)(v2 + 64);
        if (v27 == 2)
        {
          v17 = *(_QWORD *)(v2 + 72);
          v18 = CFSTR("PQss");
          goto LABEL_40;
        }
        if (v27 == 1)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(v2 + 72));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = CFSTR("PQsi");
          goto LABEL_38;
        }
        break;
      case 3u:
      case 5u:
        v13 = *(_QWORD *)(v2 + 72);
        if (v13)
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v13, CFSTR("PQst"));
        v14 = *(_QWORD *)(v2 + 80);
        if (v14)
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v14, CFSTR("PQfg"));
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v2 + 64));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v15, CFSTR("PQts"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v2 + 68));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v16, CFSTR("PQtr"));

        v17 = *(_QWORD *)(v2 + 88);
        if (v17)
        {
          v18 = CFSTR("PQis");
LABEL_40:
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v17, v18);
        }
        break;
      case 6u:
        v30 = *(const __CFURL **)(v2 + 64);
        if (v30)
        {
          CFURLGetString(v30);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = CFSTR("PQgs");
LABEL_38:
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v28, v29);

        }
        break;
      case 7u:
        v19 = *(id *)(v2 + 64);
        if (v19)
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v19, CFSTR("PQci"));
        v20 = *(_QWORD *)(v2 + 72);
        if (v20)
          objc_msgSend(v3, "setObject:forKeyedSubscript:", v20, CFSTR("PQcd"));

        break;
      default:
        break;
    }
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v3, 200, 0, 0);
    v2 = objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

_OWORD *MRSystemAppPlaybackQueueCreateFromExternalRepresentation(const __CFAllocator *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  _OWORD *v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  const __CFDictionary *v17;
  uint64_t v18;
  __CFString *v19;
  uint64_t v20;
  __CFString *v21;
  uint64_t v22;
  __CFString *v23;
  uint64_t v24;
  const __CFDictionary *v25;
  uint64_t v26;
  const __CFArray *v27;
  uint64_t v28;
  __CFString *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  int v43;
  void *v44;
  int v45;
  void *v46;
  int v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  const __CFURL *v52;
  void *v53;
  __CFString *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  __CFString *v58;
  uint64_t v59;
  void *v61;
  void *v62;
  const __CFDictionary *v63;

  objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", a2, 0, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
  {
    v7 = 0;
    goto LABEL_53;
  }
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("PQty"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "integerValue");

  v7 = MRSystemAppPlaybackQueueCreate(a1, v6);
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQip"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (!v7)
    MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback_cold_1(v10, v11, v12);
  *((_BYTE *)v7 + 12) = v9;
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQri"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_opt_class();
  if (MRIsObjectOfClass(v13, v14))
  {
    if (!v13)
    {
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQso"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v16, "BOOLValue");

      goto LABEL_9;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v15 = objc_msgSend(v13, "integerValue");
LABEL_9:
      *((_DWORD *)v7 + 12) = v15;
    }
  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQui"));
  v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v18 = objc_opt_class();
  if (MRIsObjectOfClass(v17, v18))
    MRSystemAppPlaybackQueueSetUserInfo((uint64_t)v7, v17);
  v63 = v17;
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQsr"));
  v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v20 = objc_opt_class();
  if (MRIsObjectOfClass(v19, v20))
    MRSystemAppPlaybackQueueSetSiriRecommendationIdentifier((uint64_t)v7, v19);
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQai"));
  v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v22 = objc_opt_class();
  if (MRIsObjectOfClass(v21, v22))
    MRSystemAppPlaybackQueueSetSiriAssetInfo((uint64_t)v7, v21);
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQfn"));
  v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  if (MRIsObjectOfClass(v23, v24))
    MRSystemAppPlaybackQueueSetFeatureName((uint64_t)v7, v23);
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQwm"));
  v25 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v26 = objc_opt_class();
  if (MRIsObjectOfClass(v25, v26))
    MRSystemAppPlaybackQueueSetSiriWHAMetricsInfo((uint64_t)v7, v25);
  switch(v6)
  {
    case 1:
      v62 = v13;
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQqd"));
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_opt_class();
      if (MRIsObjectOfClass(v36, v37))
        MRSystemAppPlaybackQueueSetLocalQueryData((uint64_t)v7, v36);
      v61 = v36;
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQmv"));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_opt_class();
      if (MRIsObjectOfClass(v38, v39))
        MRSystemAppPlaybackQueueSetLocalQueryFirstItemMultiverseIDData((uint64_t)v7, v38);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQfi"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v40, "longLongValue");

      if (v41)
        MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID((uint64_t)v7, v41);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQsm"));
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "integerValue");

      MRSystemAppPlaybackQueueSetLocalQueryShuffleMode((uint64_t)v7, v43);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQrm"));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v44, "integerValue");

      MRSystemAppPlaybackQueueSetLocalQueryRepeatMode((uint64_t)v7, v45);
      goto LABEL_35;
    case 2:
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQsy"));
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = objc_msgSend(v46, "integerValue");

      MRSystemAppPlaybackQueueSetRadioStationIDType((uint64_t)v7, v47);
      if (v47 == 2)
      {
        objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQss"));
        v58 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v59 = objc_opt_class();
        if (MRIsObjectOfClass(v58, v59))
          MRSystemAppPlaybackQueueSetRadioStationStringIdentifier((uint64_t)v7, v58);

      }
      else if (v47 == 1)
      {
        objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQsi"));
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend(v48, "longLongValue");

        MRSystemAppPlaybackQueueSetRadioStationIntegerPID((uint64_t)v7, v49);
      }
      break;
    case 3:
    case 5:
      v62 = v13;
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQst"));
      v27 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
      v28 = objc_opt_class();
      if (MRIsObjectOfClass(v27, v28))
        MRSystemAppPlaybackQueueSetGenericTrackIdentifiers((uint64_t)v7, v27);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQfg"));
      v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v30 = objc_opt_class();
      if (MRIsObjectOfClass(v29, v30))
        MRSystemAppPlaybackQueueSetFirstItemGenericTrackIdentifier((uint64_t)v7, v29);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQts"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "integerValue");

      MRSystemAppPlaybackQueueSetTracklistShuffleMode((uint64_t)v7, v32);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQtr"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v31) = objc_msgSend(v33, "integerValue");

      MRSystemAppPlaybackQueueSetTracklistRepeatMode((uint64_t)v7, (int)v31);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQis"));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_opt_class();
      if (MRIsObjectOfClass(v34, v35))
        MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData((uint64_t)v7, v34);

LABEL_35:
      v13 = v62;
      break;
    case 6:
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQgs"));
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_opt_class();
      if (MRIsObjectOfClass(v50, v51))
      {
        objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v50);
        v52 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
        if (v52)
          MRSystemAppPlaybackQueueSetGeniusSeedTrack((uint64_t)v7, v52);

      }
      break;
    case 7:
      v53 = v13;
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQci"));
      v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v55 = objc_opt_class();
      if (MRIsObjectOfClass(v54, v55))
        MRSystemAppPlaybackQueueSetCustomDataIdentifier((uint64_t)v7, v54);
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("PQcd"));
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = objc_opt_class();
      if (MRIsObjectOfClass(v56, v57))
        MRSystemAppPlaybackQueueSetCustomData((uint64_t)v7, v56);

      v13 = v53;
      break;
    default:
      break;
  }

LABEL_53:
  return v7;
}

const __CFData *MRSystemAppPlaybackQueueGetLocalQueryEncodingType(uint64_t a1)
{
  const __CFData *result;
  const __CFData *v2;
  const char *BytePtr;

  if (!a1)
    MRSystemAppPlaybackQueueGetType_cold_1();
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    result = (const __CFData *)MRSystemAppPlaybackQueueGetLocalQueryData(a1);
    if (!result)
      return result;
    v2 = result;
    BytePtr = (const char *)CFDataGetBytePtr(result);
    if ((unint64_t)CFDataGetLength(v2) >= 6)
      return (const __CFData *)(strncmp("bplist", BytePtr, 6uLL) == 0);
  }
  return 0;
}

_OWORD *MRSystemAppPlaybackQueueCreateFromProtobuf(void *a1)
{
  id v1;
  int v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  void *v15;
  __CFString *v16;
  const __CFArray *v17;
  void *v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  const __CFDictionary *v23;
  void *v24;
  void *v25;
  const __CFDictionary *v26;

  v1 = a1;
  v2 = MRMediaRemotePlaybackQueueTypeFromProtobuf(objc_msgSend(v1, "type"));
  v3 = MRSystemAppPlaybackQueueCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v2);
  if (objc_msgSend(v1, "hasReplaceIntent"))
  {
    v4 = MRMediaRemoteReplaceIntentFromProtobuf(objc_msgSend(v1, "replaceIntent"));
    if (!v3)
      MRSystemAppPlaybackQueueSetShouldOverrideManuallyCuratedQueue_cold_1(v4, v5, v6);
    *((_DWORD *)v3 + 12) = v4;
  }
  if (objc_msgSend(v1, "hasIsRequestingImmediatePlayback"))
  {
    v7 = objc_msgSend(v1, "isRequestingImmediatePlayback");
    if (!v3)
      MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback_cold_1(v7, v8, v9);
    *((_BYTE *)v3 + 12) = v7;
  }
  if (objc_msgSend(v1, "hasFeatureName"))
  {
    objc_msgSend(v1, "featureName");
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    MRSystemAppPlaybackQueueSetFeatureName((uint64_t)v3, v10);

  }
  if (objc_msgSend(v1, "hasCustomData"))
  {
    objc_msgSend(v1, "customData");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "data");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    MRSystemAppPlaybackQueueSetCustomData((uint64_t)v3, v12);

    objc_msgSend(v1, "customData");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "identifier");
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
    MRSystemAppPlaybackQueueSetCustomDataIdentifier((uint64_t)v3, v14);

  }
  if (objc_msgSend(v1, "hasTracklist"))
  {
    objc_msgSend(v1, "tracklist");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v15, "hasFirstTrackIdentifier"))
    {
      objc_msgSend(v15, "firstTrackIdentifier");
      v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
      MRSystemAppPlaybackQueueSetFirstItemGenericTrackIdentifier((uint64_t)v3, v16);

    }
    if (objc_msgSend(v15, "hasTrackIdentifiers"))
    {
      objc_msgSend(v15, "trackIdentifiers");
      v17 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
      MRSystemAppPlaybackQueueSetGenericTrackIdentifiers((uint64_t)v3, v17);

    }
    if (objc_msgSend(v15, "hasCollectionIdentifierSet"))
    {
      objc_msgSend(v15, "collectionIdentifierSet");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      MRSystemAppPlaybackQueueSetTracklistCollectionIdentifierSetData((uint64_t)v3, v18);

    }
    if (objc_msgSend(v15, "hasShuffleMode"))
    {
      v19 = MRMediaRemoteShuffleModeFromProtobuf(objc_msgSend(v15, "shuffleMode"));
      MRSystemAppPlaybackQueueSetTracklistShuffleMode((uint64_t)v3, v19);
    }
    if (objc_msgSend(v15, "hasRepeatMode"))
    {
      v20 = MRMediaRemoteRepeatModeFromProtobuf(objc_msgSend(v15, "repeatMode"));
      MRSystemAppPlaybackQueueSetTracklistRepeatMode((uint64_t)v3, v20);
    }

  }
  if (objc_msgSend(v1, "hasMetrics"))
  {
    objc_msgSend(v1, "metrics");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    MSVPropertyListDataClasses();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    MRCreateFromData(v21, v22);
    v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    MRSystemAppPlaybackQueueSetSiriWHAMetricsInfo((uint64_t)v3, v23);
  }
  if (objc_msgSend(v1, "hasUserInfo"))
  {
    objc_msgSend(v1, "userInfo");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    MSVPropertyListDataClasses();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    MRCreateFromData(v24, v25);
    v26 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    MRSystemAppPlaybackQueueSetUserInfo((uint64_t)v3, v26);
  }

  return v3;
}

void OUTLINED_FUNCTION_0_9(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 293, a4);
}

void OUTLINED_FUNCTION_1_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 389, a4);
}

MRVirtualVoiceInputDevice *MRVirtualVoiceInputDeviceCreate(uint64_t a1, uint64_t a2)
{
  return -[MRVirtualVoiceInputDevice initWithDeviceID:]([MRVirtualVoiceInputDevice alloc], "initWithDeviceID:", a2);
}

MRVirtualVoiceInputDevice *MRVirtualVoiceInputDeviceCreateWithExternalRepresentation(uint64_t a1, uint64_t a2)
{
  return -[MRVirtualVoiceInputDevice initWithData:]([MRVirtualVoiceInputDevice alloc], "initWithData:", a2);
}

uint64_t MRVirtualVoiceInputDeviceCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

__CFString *MRVoiceRecordingStateCopyDescription(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E30CAD18[a1];
}

uint64_t _MRGetVoiceInputDevicesResponseMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v16 = v10 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_43;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_45:
        *(_DWORD *)(a1 + 32) = v27;
      }
      else if ((v10 >> 3) == 1)
      {
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            while (1)
            {
              v22 = *v3;
              v23 = *(_QWORD *)(a2 + v22);
              if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
                break;
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_32;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_32:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (1)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
              break;
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_55;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
          PBRepeatedUInt32Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

MRMutableAudioDataBlock *MRAudioDataBlockCreate()
{
  return objc_alloc_init(MRMutableAudioDataBlock);
}

MRMutableAudioDataBlock *MRAudioDataBlockCreateFromExternalRepresentation(uint64_t a1, uint64_t a2)
{
  return -[MRAudioDataBlock initWithData:]([MRMutableAudioDataBlock alloc], "initWithData:", a2);
}

uint64_t MRAudioDataBlockSetBuffer(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setBuffer:", a2);
}

uint64_t MRAudioDataBlockCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

void MRMediaRemotePlaybackQueueDataSourceSetRequestCallback(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __MRMediaRemotePlaybackQueueDataSourceSetRequestCallback_block_invoke;
  v5[3] = &unk_1E30CAD98;
  v6 = v3;
  v4 = v3;
  _MRMediaRemotePlaybackQueueDataSourceSetRequestCallback(a1, v5);

}

void _MRMediaRemotePlaybackQueueDataSourceSetRequestCallback(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "originClientForOrigin:", v4);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "setPlaybackQueueCallback:", v3);
}

void *MRMediaRemotePlaybackQueueDataSourceAddCreatePlaybackQueueForRequestCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *PlaybackQueueForRequestCallbackForPlayer;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  PlaybackQueueForRequestCallbackForPlayer = MRMediaRemotePlaybackQueueDataSourceAddCreatePlaybackQueueForRequestCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return PlaybackQueueForRequestCallbackForPlayer;
}

void *MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *ContentItemCallbackForPlayer;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  ContentItemCallbackForPlayer = MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return ContentItemCallbackForPlayer;
}

void *MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "createItemForOffsetCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  objc_msgSend(v10, "playerPath");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "clientCallbacks");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  MRMediaRemoteSetPlaybackQueueCapabilities((uint64_t)v16, objc_msgSend(v17, "capabilities"), 0, 0);

  return v15;
}

void *MRMediaRemotePlaybackQueueDataSourceAddCreateChildContentItemCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *ChildContentItemCallbackForPlayer;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  ChildContentItemCallbackForPlayer = MRMediaRemotePlaybackQueueDataSourceAddCreateChildContentItemCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return ChildContentItemCallbackForPlayer;
}

void *MRMediaRemotePlaybackQueueDataSourceAddCreateChildContentItemCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "createChildItemCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemMetadataCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemMetadataCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemLanguageOptionsCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemLanguageOptionsCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemLanguageOptionsCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "languageOptionsCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

uint64_t MRMediaRemotePlaybackQueueDataSourceAddCreateParticipantsCallback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = (void *)MEMORY[0x1E0D4D058];
  v6 = a3;
  v7 = (void *)MEMORY[0x194036C44](a4);
  objc_msgSend(v5, "callbackWithQueue:block:", v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t MRMediaRemotePlaybackQueueDataSourceAddCreateParticipantsCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = (void *)MEMORY[0x1E0D4D058];
  v6 = a3;
  v7 = (void *)MEMORY[0x194036C44](a4);
  objc_msgSend(v5, "callbackWithQueue:block:", v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();

  return v8;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemInfoCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemInfoCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemTranscriptAlignmentsCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemTranscriptAlignmentsCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemTranscriptAlignmentsCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "transcriptAlignmentsCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemLyricsCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemLyricsCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemArtworkCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemArtworkCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemFormattedArtworkCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemAvailableArtworkFormatsCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemAvailableArtworkFormatsCallbackForPlayer(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a4;
  v8 = a3;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "playerClientForPlayerPath:", a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "clientCallbacks");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "availableArtworkFormatsCallbacks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0D4D058];
  v14 = (void *)MEMORY[0x194036C44](v7);

  objc_msgSend(v13, "callbackWithQueue:block:", v8, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  MRMediaRemotePlaybackQueueDataSourceSourceAddCallbackToList(v12, a2, v15);
  return v15;
}

void *MRMediaRemotePlaybackQueueDataSourceAddContentItemAvailableArtworkFormatsCallback(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  MRPlayerPath *v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v10 = MRMediaRemotePlaybackQueueDataSourceAddContentItemAvailableArtworkFormatsCallbackForPlayer((uint64_t)v9, a2, v8, v7);

  return v10;
}

uint64_t MRMediaRemotePlaybackQueueDataSourceRemoveCallback(uint64_t a1, const void *a2)
{
  MRPlayerPath *v3;
  uint64_t v4;

  v3 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v4 = MRMediaRemotePlaybackQueueDataSourceRemoveCallbackForPlayer((uint64_t)v3, a2);

  return v4;
}

uint64_t MRMediaRemotePlaybackQueueDataSourceRemoveCallbackForPlayer(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "clientCallbacks");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "removePlaybackQueueDataSourceCallback:", a2);

  if (a2)
    CFRelease(a2);

  return v7;
}

void sub_19399142C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_193991848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t _MRDiscoverySessionConfigurationProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  void *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_60;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_62;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_62:
          v50 = 8;
          goto LABEL_80;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
          goto LABEL_51;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_66;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_66:
          v51 = v28 != 0;
          v52 = 37;
          goto LABEL_75;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v34 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v34 = 0;
LABEL_70:
          v51 = v34 != 0;
          v52 = 36;
          goto LABEL_75;
        case 5u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v40 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                v14 = v39++ >= 9;
                if (v14)
                {
                  v40 = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v40 = 0;
LABEL_74:
          v51 = v40 != 0;
          v52 = 38;
LABEL_75:
          *(_BYTE *)(a1 + v52) = v51;
          continue;
        case 6u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
LABEL_51:
          v44 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        case 7u:
          v45 = 0;
          v46 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v19 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_77;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_79;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_77:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_79:
      v50 = 32;
LABEL_80:
      *(_DWORD *)(a1 + v50) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void _MRServiceClientVideoThumbnailsRequestCallback(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  void (**v6)(id, _QWORD, void *);
  void *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, _BYTE *, _QWORD);
  uint64_t v12;
  void *Error;
  _BYTE v14[2064];

  v6 = a4;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "playerClientForPlayerPath:", a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v12 = 5;
LABEL_6:
    Error = (void *)MRMediaRemoteCreateError(v12);
    v6[2](v6, 0, Error);

    goto LABEL_7;
  }
  objc_msgSend(v8, "clientCallbacks");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "videoThumbnailsCallback");
  v10 = (_QWORD *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v12 = 14;
    goto LABEL_6;
  }
  v11 = (void (*)(_QWORD *, _BYTE *, _QWORD))v10[2];
  memcpy(v14, a2, sizeof(v14));
  v11(v10, v14, v6);

LABEL_7:
}

void _MRServiceClientAudioAmplitudeSamplesCallback(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v6;
  void *v7;
  void *v8;
  void (**Error)(_QWORD, _QWORD, _QWORD);
  uint64_t v10;
  id v11;

  v11 = a4;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "playerClientForPlayerPath:", a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v10 = 5;
LABEL_6:
    Error = (void (**)(_QWORD, _QWORD, _QWORD))MRMediaRemoteCreateError(v10);
    (*((void (**)(id, _QWORD, _QWORD))v11 + 2))(v11, 0, Error);
    goto LABEL_7;
  }
  objc_msgSend(v7, "clientCallbacks");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "audioAmplitudeSamplesCallback");
  Error = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  if (!Error)
  {
    v10 = 14;
    goto LABEL_6;
  }
  ((void (**)(_QWORD, uint64_t, id))Error)[2](Error, a2, v11);
LABEL_7:

}

void _MRServiceClientLyricsEventCallback(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  uint64_t EndDate;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD);
  id v14;

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "originClientForPlayerPath:", a1);
  v14 = (id)objc_claimAutoreleasedReturnValue();

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "playerClientForPlayerPath:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    if (MRLyricsEventGetEndDate(a2))
      objc_msgSend(v14, "endLyricsEventCallback");
    else
      objc_msgSend(v14, "beginLyricsEventCallback");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x194036C44]();

    if (v8)
      ((void (**)(_QWORD, void *, uint64_t))v8)[2](v8, a2, a1);

  }
  if (v6)
  {
    EndDate = MRLyricsEventGetEndDate(a2);
    objc_msgSend(v6, "clientCallbacks");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (EndDate)
      objc_msgSend(v10, "endLyricsEventCallback");
    else
      objc_msgSend(v10, "beginLyricsEventCallback");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void (**)(_QWORD, _QWORD))MEMORY[0x194036C44]();

    if (v13)
      ((void (**)(_QWORD, void *))v13)[2](v13, a2);

  }
}

void _MRServiceClientCollectDiagnosticCallback(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _MRDiagnosticProtobuf *v9;
  void (**v10)(id, _MRDiagnosticProtobuf *, _QWORD);

  v10 = a2;
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "debugDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "mutableCopy");

  objc_msgSend(v6, "appendString:", CFSTR("\n"));
  +[MRClientDiagnosticsDataSource sharedDataSource](MRClientDiagnosticsDataSource, "sharedDataSource");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "diagnostic");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "appendString:", v8);

  v9 = MRDiagnosticCreate((uint64_t)v3, (uint64_t)v6);
  v10[2](v10, v9, 0);

  objc_autoreleasePoolPop(v2);
}

void _MRServiceClientClientMessageCallback(void *a1, void *a2, void *a3)
{
  void (**v5)(id, void *);
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  MRProtocolMessage *v11;
  void *Error;
  MRProtocolMessage *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "originClientForPlayerPath:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "clientMessageCallback");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v9)
  {
    (*(void (**)(uint64_t, id, void (**)(id, void *)))(v9 + 16))(v9, v14, v5);
  }
  else
  {
    v11 = [MRProtocolMessage alloc];
    Error = (void *)MRMediaRemoteCreateError(14);
    v13 = -[MRProtocolMessage initWithUnderlyingCodableMessage:error:](v11, "initWithUnderlyingCodableMessage:error:", 0, Error);
    v5[2](v5, v13);

  }
}

void sub_19399443C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994BF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994C60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994CCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994D38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994DA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994E10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994E7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193994EE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193995450(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939954C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193995534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1939956D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193995C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1939960F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

Class initAVAudioSession_0()
{
  Class result;

  if (AVFoundationLibrary_sOnce_6 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_6, &__block_literal_global_56);
  result = objc_getClass("AVAudioSession");
  classAVAudioSession_0 = (uint64_t)result;
  getAVAudioSessionClass_0[0] = (uint64_t (*)())AVAudioSessionFunction_0;
  return result;
}

id AVAudioSessionFunction_0()
{
  return (id)classAVAudioSession_0;
}

id initValAVAudioSessionRoutingContextChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_6 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_6, &__block_literal_global_56);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_6, "AVAudioSessionRoutingContextChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionRoutingContextChangeNotification, *v0);
  getAVAudioSessionRoutingContextChangeNotification = (uint64_t (*)())AVAudioSessionRoutingContextChangeNotificationFunction;
  return (id)constantValAVAudioSessionRoutingContextChangeNotification;
}

id AVAudioSessionRoutingContextChangeNotificationFunction()
{
  return (id)constantValAVAudioSessionRoutingContextChangeNotification;
}

void MRClassSwizzleMethod(objc_class *a1, const char *a2, const char *a3)
{
  objc_method *InstanceMethod;
  objc_method *v7;
  void (*Implementation)(void);
  const char *TypeEncoding;
  void (*v10)(void);
  const char *v11;

  InstanceMethod = class_getInstanceMethod(a1, a2);
  v7 = class_getInstanceMethod(a1, a3);
  Implementation = method_getImplementation(v7);
  TypeEncoding = method_getTypeEncoding(v7);
  if (class_addMethod(a1, a2, Implementation, TypeEncoding))
  {
    v10 = method_getImplementation(InstanceMethod);
    v11 = method_getTypeEncoding(InstanceMethod);
    class_replaceMethod(a1, a3, v10, v11);
  }
  else
  {
    method_exchangeImplementations(InstanceMethod, v7);
  }
}

void MRSwizzleClassMethod(objc_class *a1, const char *a2, const char *a3)
{
  objc_method *ClassMethod;
  objc_method *v7;
  objc_class *Class;
  void (*Implementation)(void);
  const char *TypeEncoding;
  void (*v11)(void);
  const char *v12;

  ClassMethod = class_getClassMethod(a1, a2);
  v7 = class_getClassMethod(a1, a3);
  Class = object_getClass(a1);
  Implementation = method_getImplementation(v7);
  TypeEncoding = method_getTypeEncoding(v7);
  if (class_addMethod(Class, a2, Implementation, TypeEncoding))
  {
    v11 = method_getImplementation(ClassMethod);
    v12 = method_getTypeEncoding(ClassMethod);
    class_replaceMethod(Class, a3, v11, v12);
  }
  else
  {
    method_exchangeImplementations(ClassMethod, v7);
  }
}

void sub_193997AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193997C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initFBSDisplayLayoutMonitorConfiguration()
{
  Class result;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_140_1);
  result = objc_getClass("FBSDisplayLayoutMonitorConfiguration");
  classFBSDisplayLayoutMonitorConfiguration = (uint64_t)result;
  getFBSDisplayLayoutMonitorConfigurationClass = (uint64_t (*)())FBSDisplayLayoutMonitorConfigurationFunction;
  return result;
}

id FBSDisplayLayoutMonitorConfigurationFunction()
{
  return (id)classFBSDisplayLayoutMonitorConfiguration;
}

Class initFBSDisplayLayoutMonitor()
{
  Class result;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_140_1);
  result = objc_getClass("FBSDisplayLayoutMonitor");
  classFBSDisplayLayoutMonitor = (uint64_t)result;
  getFBSDisplayLayoutMonitorClass = (uint64_t (*)())FBSDisplayLayoutMonitorFunction;
  return result;
}

id FBSDisplayLayoutMonitorFunction()
{
  return (id)classFBSDisplayLayoutMonitor;
}

MRCommandResult *_MRServiceClientRemoteCommandVerifyOptions(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  BOOL v9;
  void *v10;
  BOOL v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  const __CFString *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  __CFString *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  void *v26;
  BOOL v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  const __CFString *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  __CFString *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  __CFString *v41;
  NSObject *v42;
  void *v43;
  int v44;
  void *v45;
  id v46;
  uint64_t (**v47)(void);
  __CFString *v48;
  NSObject *v49;
  unsigned int v50;
  NSObject *v51;
  uint64_t v52;
  MRCommandResult *v53;
  void *v54;
  void *v55;
  MRCommandResult *v56;
  void *v58;
  __CFString *v59;
  void *v60;
  _QWORD v61[4];
  id v62;
  int v63;
  void *v64;
  uint8_t buf[4];
  const __CFString *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  const __CFString *v70;
  __int16 v71;
  void *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  +[MRSendCommandResultStatus successStatus](MRSendCommandResultStatus, "successStatus");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = (__CFString *)MRMediaRemoteCopyCommandDescription(a1);
  if (!MRMediaRemoteCommandRequiresSourcePositionOption(a1))
  {
    v17 = 0;
    goto LABEL_27;
  }
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionContentItemID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionPlaybackQueueOffset"));
  v8 = objc_claimAutoreleasedReturnValue();
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 0;
  if (v9)
  {
    objc_msgSend(v6, "subscriptionController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "offsetForIdentifier:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
      goto LABEL_21;
    _MRLogForCategory(0);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413058;
      v66 = CFSTR("kMRMediaRemoteOptionContentItemID");
      v67 = 2112;
      v68 = v7;
      v69 = 2112;
      v70 = CFSTR("kMRMediaRemoteOptionPlaybackQueueOffset");
      v71 = 2112;
      v72 = v10;
      _os_log_impl(&dword_193827000, v19, OS_LOG_TYPE_DEFAULT, "'%@':%@ -> '%@':%@", buf, 0x2Au);
    }

    v14 = v5;
    v15 = v10;
    v16 = CFSTR("kMRMediaRemoteOptionPlaybackQueueOffset");
    goto LABEL_20;
  }
  v10 = (void *)v8;
  if (v8)
    v11 = v7 == 0;
  else
    v11 = 0;
  if (v11)
  {
    objc_msgSend(v6, "subscriptionController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "contentItemIdentifierForOffset:", objc_msgSend(v10, "integerValue"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      _MRLogForCategory(0);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138413058;
        v66 = CFSTR("kMRMediaRemoteOptionPlaybackQueueOffset");
        v67 = 2112;
        v68 = v10;
        v69 = 2112;
        v70 = CFSTR("kMRMediaRemoteOptionContentItemID");
        v71 = 2112;
        v72 = v7;
        _os_log_impl(&dword_193827000, v13, OS_LOG_TYPE_DEFAULT, "'%@':%@ -> '%@':%@", buf, 0x2Au);
      }

      v14 = v5;
      v15 = v7;
      v16 = CFSTR("kMRMediaRemoteOptionContentItemID");
LABEL_20:
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, v16);
    }
  }
LABEL_21:
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionContentItemID"));
  v20 = objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v21 = (__CFString *)v20;
    v17 = 0;
  }
  else
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionTrackID"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      v17 = 0;
      goto LABEL_26;
    }
    v21 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Command options do not have requried source position parameters to perform command"));
    _MRLogForCategory(0xAuLL);
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v66 = v59;
      v67 = 2114;
      v68 = v60;
      v69 = 2112;
      v70 = v21;
      _os_log_impl(&dword_193827000, v51, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }

    v17 = 7;
  }

LABEL_26:
LABEL_27:
  if (!MRMediaRemoteCommandRequiresDestinationPositionOption(a1))
    goto LABEL_51;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionPlaybackQueueDestinationOffset"));
  v24 = objc_claimAutoreleasedReturnValue();
  if (v23)
    v25 = v24 == 0;
  else
    v25 = 0;
  if (!v25)
  {
    v26 = (void *)v24;
    if (v24)
      v27 = v23 == 0;
    else
      v27 = 0;
    if (!v27)
      goto LABEL_46;
    objc_msgSend(v6, "subscriptionController");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "contentItemIdentifierForOffset:", objc_msgSend(v26, "integerValue") - 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v23)
      goto LABEL_46;
    _MRLogForCategory(0);
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413058;
      v66 = CFSTR("kMRMediaRemoteOptionPlaybackQueueDestinationOffset");
      v67 = 2112;
      v68 = v26;
      v69 = 2112;
      v70 = CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID");
      v71 = 2112;
      v72 = v23;
      _os_log_impl(&dword_193827000, v29, OS_LOG_TYPE_DEFAULT, "'%@':%@ -> '%@':%@", buf, 0x2Au);
    }

    v30 = v5;
    v31 = v23;
    v32 = CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID");
    goto LABEL_45;
  }
  objc_msgSend(v6, "subscriptionController");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "offsetForIdentifier:", v23);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    _MRLogForCategory(0);
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413058;
      v66 = CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID");
      v67 = 2112;
      v68 = v23;
      v69 = 2112;
      v70 = CFSTR("kMRMediaRemoteOptionPlaybackQueueDestinationOffset");
      v71 = 2112;
      v72 = v26;
      _os_log_impl(&dword_193827000, v34, OS_LOG_TYPE_DEFAULT, "'%@':%@ -> '%@':%@", buf, 0x2Au);
    }

    v30 = v5;
    v31 = v26;
    v32 = CFSTR("kMRMediaRemoteOptionPlaybackQueueDestinationOffset");
LABEL_45:
    objc_msgSend(v30, "setObject:forKeyedSubscript:", v31, v32);
  }
LABEL_46:
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionInsertAfterContentItemID"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v35)
  {
    v36 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Command options do not have requried destination position parameters to perform command"));
    _MRLogForCategory(0xAuLL);
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v66 = v59;
      v67 = 2114;
      v68 = v60;
      v69 = 2112;
      v70 = v36;
      _os_log_impl(&dword_193827000, v37, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }

    v17 = 7;
  }

LABEL_51:
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionNowPlayingContentItemID"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "subscriptionController");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "contentItemIdentifierForOffset:", 0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v38)
    goto LABEL_59;
  if (v40)
  {
    if ((objc_msgSend(v40, "isEqualToString:", v38) & 1) != 0)
      goto LABEL_59;
    v41 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Sender specified %@ = %@. Now Playing Item = %@. Ignoring command"), CFSTR("kMRMediaRemoteOptionNowPlayingContentItemID"), v38, v40);
    _MRLogForCategory(0xAuLL);
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
  }
  else
  {
    v41 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Sender specified %@ = %@ which is no longer the now playing item."), CFSTR("kMRMediaRemoteOptionNowPlayingContentItemID"), v38);
    _MRLogForCategory(0xAuLL);
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
LABEL_57:
      *(_DWORD *)buf = 138543874;
      v66 = v59;
      v67 = 2114;
      v68 = v60;
      v69 = 2112;
      v70 = v41;
      _os_log_impl(&dword_193827000, v42, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
  }

  v17 = 7;
LABEL_59:
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionVerifySupportedCommands"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(v43, "BOOLValue");

  if (v44)
  {
    objc_msgSend(v6, "supportedCommands");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v61[0] = MEMORY[0x1E0C809B0];
    v61[1] = 3221225472;
    v61[2] = ___MRServiceClientRemoteCommandVerifyOptions_block_invoke;
    v61[3] = &unk_1E30CB070;
    v46 = v45;
    v62 = v46;
    v63 = a1;
    v47 = (uint64_t (**)(void))MEMORY[0x194036C44](v61);
    if ((v47[2]() & 1) == 0)
    {
      v48 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Sender specified %@ option and command is not supported. Ignoring command"), CFSTR("kMRMediaRemoteOptionVerifySupportedCommands"));
      _MRLogForCategory(0xAuLL);
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        v66 = v59;
        v67 = 2114;
        v68 = v60;
        v69 = 2112;
        v70 = v48;
        _os_log_impl(&dword_193827000, v49, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      v50 = objc_msgSend(v46, "mr_ifDisabledWhyDisabled:", a1) - 1;
      if (v50 <= 5 && ((0x3Bu >> v50) & 1) != 0)
      {
        +[MRSendCommandResultStatus statusWithCode:](MRSendCommandResultStatus, "statusWithCode:", dword_193AD9D80[v50]);
        v52 = objc_claimAutoreleasedReturnValue();

        v58 = (void *)v52;
      }
      else
      {
        v17 = 10;
      }

    }
  }
  v53 = [MRCommandResult alloc];
  v64 = v58;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v64, 1);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "playerPath");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = -[MRCommandResult initWithResultStatuses:sendError:playerPath:](v53, "initWithResultStatuses:sendError:playerPath:", v54, v17, v55);

  return v56;
}

void _MRServiceClientPostPlaybackImminentIfNeccessary(int a1)
{
  void *v2;
  void *v3;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "processName");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v6, "isEqualToString:", CFSTR("airtunesd")) & 1) == 0
    && (objc_msgSend(v6, "isEqualToString:", CFSTR("tvairplayd")) & 1) == 0)
  {
    +[MRDeviceInfoRequest localDeviceInfo](MRDeviceInfoRequest, "localDeviceInfo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v3, "clusterType")
      && ((a1 - 121) <= 0xC && ((1 << (a1 - 121)) & 0x1413) != 0 || a1 == 2 || !a1))
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.mediaremote.playbackImminentOnStereoPair"), 0, 0, 1u);
      v5 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(v5, CFSTR("com.apple.mediaremote.playbackImminent"), 0, 0, 1u);
    }

  }
}

void _MRServiceClientOriginCommandCallback(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  NSObject *v37;
  uint64_t v38;
  os_signpost_id_t v39;
  void (*v40)(_QWORD *, void *, _QWORD, void *, _QWORD *);
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  _QWORD *v50;
  unsigned int v51;
  void *v52;
  void *v53;
  _QWORD v54[4];
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  _QWORD v60[4];
  id v61;
  id v62;
  uint64_t v63;
  _QWORD v64[4];
  id v65;
  id v66;
  uint64_t v67;
  _QWORD v68[4];
  id v69;
  id v70;
  id v71;
  _QWORD v72[4];
  id v73;
  id v74;
  id v75;
  id v76;
  uint8_t buf[4];
  void *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  v11 = a5;
  v12 = (void *)MEMORY[0x1E0C99D68];
  v50 = a4;
  objc_msgSend(v12, "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = v10;
  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = a2;
  v15 = MRMediaRemoteCopyCommandDescription(a2);
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("originCommand"), v14);
  v17 = v16;
  if (v9)
    objc_msgSend(v16, "appendFormat:", CFSTR(" for %@"), v9);
  _MRLogForCategory(0xAuLL);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v78 = v17;
    _os_log_impl(&dword_193827000, v18, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }
  v52 = v17;

  v72[0] = MEMORY[0x1E0C809B0];
  v19 = MEMORY[0x1E0C809B0];
  v72[1] = 3221225472;
  v72[2] = ___MRServiceClientOriginCommandCallback_block_invoke;
  v72[3] = &unk_1E30CB098;
  v20 = v9;
  v73 = v20;
  v21 = v14;
  v74 = v21;
  v49 = v13;
  v75 = v49;
  v48 = v11;
  v76 = v48;
  v22 = (void *)MEMORY[0x194036C44](v72);
  v23 = objc_alloc(MEMORY[0x1E0D4D048]);
  v68[0] = v19;
  v68[1] = 3221225472;
  v68[2] = ___MRServiceClientOriginCommandCallback_block_invoke_40;
  v68[3] = &unk_1E30CA5C0;
  v24 = v15;
  v69 = v24;
  v25 = v21;
  v70 = v25;
  v26 = v22;
  v71 = v26;
  v46 = (void *)objc_msgSend(v23, "initWithDeallocHandler:", v68);
  v27 = objc_alloc(MEMORY[0x1E0D4D110]);
  dispatch_get_global_queue(0, 0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v64[0] = v19;
  v64[1] = 3221225472;
  v64[2] = ___MRServiceClientOriginCommandCallback_block_invoke_2;
  v64[3] = &unk_1E30C9E88;
  v67 = 0x401C000000000000;
  v29 = v24;
  v65 = v29;
  v30 = v25;
  v66 = v30;
  v31 = (void *)objc_msgSend(v27, "initWithInterval:repeats:queue:block:", 0, v28, v64, 7.0);

  v32 = MEMORY[0x1E0C809B0];
  v33 = objc_alloc(MEMORY[0x1E0D4D110]);
  v60[0] = v32;
  v60[1] = 3221225472;
  v60[2] = ___MRServiceClientOriginCommandCallback_block_invoke_48;
  v60[3] = &unk_1E30C9E88;
  v63 = 0x403E000000000000;
  v61 = v29;
  v34 = v30;
  v62 = v34;
  v47 = v29;
  v35 = (void *)objc_msgSend(v33, "initWithInterval:repeats:queue:block:", 0, v28, v60, 30.0);

  v36 = (void *)objc_msgSend(v20, "copy");
  _MRLogForCategory(2uLL);
  v37 = objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v34, "hash");
  if ((unint64_t)(v38 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v39 = v38;
    if (os_signpost_enabled(v37))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193827000, v37, OS_SIGNPOST_INTERVAL_BEGIN, v39, "SendCommandOrigin", "", buf, 2u);
    }
  }

  v54[0] = v32;
  v54[1] = 3221225472;
  v54[2] = ___MRServiceClientOriginCommandCallback_block_invoke_49;
  v54[3] = &unk_1E30CB0C0;
  v55 = v31;
  v56 = v35;
  v57 = v46;
  v58 = v34;
  v59 = v26;
  v40 = (void (*)(_QWORD *, void *, _QWORD, void *, _QWORD *))v50[2];
  v41 = v26;
  v42 = v34;
  v43 = v46;
  v44 = v35;
  v45 = v31;
  v40(v50, v36, v51, v53, v54);

}

void _MRServiceClientRemoteResolvedPlayerPathCommandCallback(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  os_signpost_id_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  int v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  _QWORD v53[4];
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  int v61;
  _QWORD v62[4];
  id v63;
  id v64;
  uint64_t v65;
  _QWORD v66[4];
  id v67;
  id v68;
  uint64_t v69;
  _QWORD v70[4];
  id v71;
  id v72;
  id v73;
  _QWORD v74[4];
  id v75;
  id v76;
  id v77;
  id v78;
  uint8_t buf[4];
  void *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v47 = a4;
  v11 = a5;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = v9;
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = a1;
  v14 = MRMediaRemoteCopyCommandDescription(a1);
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("playerCommand"), v13);
  v16 = v15;
  if (v10)
    objc_msgSend(v15, "appendFormat:", CFSTR(" for %@"), v10);
  _MRLogForCategory(0xAuLL);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v80 = v16;
    _os_log_impl(&dword_193827000, v17, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }
  v52 = v16;

  v18 = MEMORY[0x1E0C809B0];
  v74[0] = MEMORY[0x1E0C809B0];
  v74[1] = 3221225472;
  v74[2] = ___MRServiceClientRemoteResolvedPlayerPathCommandCallback_block_invoke;
  v74[3] = &unk_1E30CB0E8;
  v51 = v10;
  v75 = v51;
  v19 = v13;
  v76 = v19;
  v50 = v12;
  v77 = v50;
  v49 = v11;
  v78 = v49;
  v20 = (void *)MEMORY[0x194036C44](v74);
  v21 = objc_alloc(MEMORY[0x1E0D4D048]);
  v70[0] = v18;
  v70[1] = 3221225472;
  v70[2] = ___MRServiceClientRemoteResolvedPlayerPathCommandCallback_block_invoke_53;
  v70[3] = &unk_1E30CA5C0;
  v22 = v14;
  v71 = v22;
  v23 = v19;
  v72 = v23;
  v24 = v20;
  v73 = v24;
  v25 = (void *)objc_msgSend(v21, "initWithDeallocHandler:", v70);
  v26 = objc_alloc(MEMORY[0x1E0D4D110]);
  dispatch_get_global_queue(0, 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v66[0] = v18;
  v66[1] = 3221225472;
  v66[2] = ___MRServiceClientRemoteResolvedPlayerPathCommandCallback_block_invoke_2;
  v66[3] = &unk_1E30C9E88;
  v69 = 0x401C000000000000;
  v28 = v22;
  v67 = v28;
  v29 = v23;
  v68 = v29;
  v30 = (void *)objc_msgSend(v26, "initWithInterval:repeats:queue:block:", 0, v27, v66, 7.0);

  v31 = objc_alloc(MEMORY[0x1E0D4D110]);
  v62[0] = v18;
  v62[1] = 3221225472;
  v62[2] = ___MRServiceClientRemoteResolvedPlayerPathCommandCallback_block_invoke_56;
  v62[3] = &unk_1E30C9E88;
  v65 = 0x403E000000000000;
  v63 = v28;
  v32 = v29;
  v64 = v32;
  v45 = v28;
  v33 = (void *)objc_msgSend(v31, "initWithInterval:repeats:queue:block:", 0, v27, v62, 30.0);

  _MRLogForCategory(2uLL);
  v34 = objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v32, "hash");
  if ((unint64_t)(v35 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v36 = v35;
    if (os_signpost_enabled(v34))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193827000, v34, OS_SIGNPOST_INTERVAL_BEGIN, v36, "SendCommandPlayerMain", "", buf, 2u);
    }
  }

  v53[0] = v18;
  v53[1] = 3221225472;
  v53[2] = ___MRServiceClientRemoteResolvedPlayerPathCommandCallback_block_invoke_57;
  v53[3] = &unk_1E30CB138;
  v61 = v46;
  v54 = v32;
  v55 = v48;
  v56 = v30;
  v57 = v33;
  v58 = v25;
  v59 = v47;
  v60 = v24;
  v37 = v24;
  v38 = v25;
  v39 = v33;
  v40 = v30;
  v41 = v48;
  v42 = v47;
  v43 = v32;
  MRCreateDonatedQosBlock(v53);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  dispatch_async(MEMORY[0x1E0C80D38], v44);

}

void _MRServiceClientRemoteResolvedPlayerPathCommandCallbacks(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *);
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  dispatch_queue_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void (**v35)(id, void *);
  id obj;
  id v37;
  _QWORD v38[4];
  id v39;
  id v40;
  void (**v41)(id, void *);
  int v42;
  int v43;
  _QWORD v44[4];
  NSObject *v45;
  id v46;
  NSObject *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  _MRServiceClientRemoteCommandVerifyOptions(a2, v8, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "error");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v9[2](v9, v10);
  }
  else
  {
    v34 = v10;
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
    v12 = objc_claimAutoreleasedReturnValue();
    MRMediaRemoteCommandCreateDescription(a2, v8, 0);
    v13 = objc_claimAutoreleasedReturnValue();
    v37 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v32 = (void *)v13;
    v33 = (void *)v12;
    v14 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("com.apple.MediaRemote.serviceClientRemotePlayerPathCommandCallback.%@.%@"), v13, v12));
    v15 = (const char *)objc_msgSend(v14, "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v16 = objc_claimAutoreleasedReturnValue();
    dispatch_queue_attr_make_with_qos_class(v16, QOS_CLASS_USER_INITIATED, 0);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = dispatch_queue_create(v15, v17);

    v19 = dispatch_group_create();
    objc_msgSend(v7, "clientCallbacks");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "commandHandlerBlocks");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v35 = v9;
    v22 = a2;
    if (objc_msgSend(v21, "count"))
    {
      _MRServiceClientPostPlaybackImminentIfNeccessary(a2);
      v31 = 0;
    }
    else
    {
      v31 = 8;
    }
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    v48 = 0u;
    obj = v21;
    v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
    if (v23)
    {
      v24 = v23;
      v25 = *(_QWORD *)v49;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v49 != v25)
            objc_enumerationMutation(obj);
          v27 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
          dispatch_group_enter(v19);
          objc_msgSend(v7, "playerPath");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v44[0] = MEMORY[0x1E0C809B0];
          v44[1] = 3221225472;
          v44[2] = ___MRServiceClientRemoteResolvedPlayerPathCommandCallbacks_block_invoke;
          v44[3] = &unk_1E30CB160;
          v45 = v18;
          v46 = v37;
          v47 = v19;
          _MRServiceClientRemoteResolvedPlayerPathCommandCallback(v22, v8, v28, v27, v44);

        }
        v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
      }
      while (v24);
    }

    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = ___MRServiceClientRemoteResolvedPlayerPathCommandCallbacks_block_invoke_3;
    v38[3] = &unk_1E30CB1D0;
    v39 = v37;
    v42 = v22;
    v43 = v31;
    v40 = v7;
    v9 = v35;
    v41 = v35;
    v29 = v37;
    MRCreateDonatedQosBlock(v38);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    dispatch_group_notify(v19, v18, v30);

    v10 = v34;
  }

}

void sub_19399AA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MRServiceClientRemotePlayerPathCommandCallback(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  char v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  char v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  NSObject *v57;
  void *v58;
  int v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  _QWORD v69[4];
  id v70;
  id v71;
  id v72;
  id v73;
  int v74;
  uint8_t buf[4];
  void *v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v66 = a4;
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
  v9 = objc_claimAutoreleasedReturnValue();
  v67 = MRMediaRemoteCopyCommandDescription(a2);
  v10 = (void *)objc_msgSend(v7, "copy");
  v11 = 0x1E30C1000uLL;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "clientForPlayerPath:", v10);
  v68 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v68, "client");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "client");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  if (v14 == v13)
  {

  }
  else
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "isEqual:", v13);

    if ((v16 & 1) == 0)
    {
      v63 = v7;
      v17 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v10, "client");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "bundleIdentifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "bundleIdentifier");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v17, "initWithFormat:", CFSTR("Resolved client from %@ to %@ "), v19, v20);

      _MRLogForCategory(0xAuLL);
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        v76 = v67;
        v77 = 2114;
        v78 = v9;
        v79 = 2112;
        v80 = (uint64_t)v21;
        _os_log_impl(&dword_193827000, v22, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      objc_msgSend(v10, "setClient:", v13);
      v7 = v63;
      v11 = 0x1E30C1000;
    }
  }
  objc_msgSend(v10, "player");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
  {
    objc_msgSend(v68, "activePlayerPath");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "player");
    v25 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "player");
    v26 = (id)objc_claimAutoreleasedReturnValue();
    if (v26 == v25)
    {
      v64 = v7;

      v33 = v25;
    }
    else
    {
      v27 = v26;
      v28 = objc_msgSend(v26, "isEqual:", v25);

      if ((v28 & 1) != 0)
      {
LABEL_15:

        goto LABEL_16;
      }
      v64 = v7;
      v29 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v10, "player");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "identifier");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "identifier");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = (void *)objc_msgSend(v29, "initWithFormat:", CFSTR("Resolved player from %@ to %@"), v31, v32);

      _MRLogForCategory(0xAuLL);
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        v76 = v67;
        v77 = 2114;
        v78 = v9;
        v79 = 2112;
        v80 = (uint64_t)v33;
        _os_log_impl(&dword_193827000, v34, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      objc_msgSend(v10, "setPlayer:", v25);
      v11 = 0x1E30C1000;
    }

    v7 = v64;
    goto LABEL_15;
  }
LABEL_16:
  v35 = objc_msgSend(v10, "isResolved");
  if (!(_DWORD)v35)
  {
    v38 = v68;
    v37 = 0;
    if (!__MRServiceClientRemotePlayerPathCommandCallback_block_invoke(v35, v68, 0))
      goto LABEL_18;
LABEL_20:
    v62 = v37;
    if (!objc_msgSend(v10, "isResolved"))
    {
      v56 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Client is CanBeNowPlaying=YES but does not have activePlayer to send command to"));
      _MRLogForCategory(0xAuLL);
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        v76 = v67;
        v77 = 2114;
        v78 = v9;
        v79 = 2112;
        v80 = (uint64_t)v56;
        _os_log_impl(&dword_193827000, v57, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
      v40 = (void *)v9;

      +[MRCommandResult commandResultWithSendError:description:](MRCommandResult, "commandResultWithSendError:description:", 3, v56);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = v66;
      (*((void (**)(id, void *))v66 + 2))(v66, v58);

      goto LABEL_41;
    }
    v65 = v7;
    objc_msgSend(*(id *)(v11 + 3432), "sharedManager");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "playerClientForPlayerPath:", v10);
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    v44 = objc_msgSend(v43, "resolveCommand:", a2);
    v45 = v44;
    if ((_DWORD)v44 != (_DWORD)a2)
    {
      v46 = v9;
      v47 = MRMediaRemoteCopyCommandDescription(v44);
      v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Resolved command from %@ to %@"), v67, v47);
      _MRLogForCategory(0xAuLL);
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        v76 = v67;
        v77 = 2114;
        v78 = v46;
        v79 = 2112;
        v80 = (uint64_t)v48;
        _os_log_impl(&dword_193827000, v49, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      a2 = v45;
      v9 = v46;
    }
    objc_msgSend(v43, "resolveCommandOptions:options:", a2, v8);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isEqualToDictionary:", v50) & 1) == 0)
    {
      v51 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Resolved command options to %@"), v50);
      _MRLogForCategory(0xAuLL);
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        v76 = v67;
        v77 = 2114;
        v78 = v9;
        v79 = 2112;
        v80 = v51;
        _os_log_impl(&dword_193827000, v52, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      v53 = (void *)v51;
      v54 = objc_msgSend(v50, "mutableCopy");

      v8 = (id)v54;
    }
    if ((_DWORD)a2 == 125)
    {
      objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionHomeKitUserIdentifier"));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      if (v55)
        objc_msgSend(v43, "appendHomeUserIdentifier:", v55);
    }
    else
    {
      if ((_DWORD)a2 != 122)
      {
LABEL_40:
        v59 = v45;
        v40 = (void *)v9;
        v69[0] = MEMORY[0x1E0C809B0];
        v69[1] = 3221225472;
        v69[2] = __MRServiceClientRemotePlayerPathCommandCallback_block_invoke_74;
        v69[3] = &unk_1E30CB1F8;
        v74 = v59;
        v70 = v50;
        v71 = v43;
        v8 = v8;
        v72 = v8;
        v41 = v66;
        v73 = v66;
        v60 = v43;
        v61 = v50;
        _MRServiceClientRemoteResolvedPlayerPathCommandCallbacks(v60, a2, v8, v69);

        v7 = v65;
LABEL_41:
        v38 = v68;
        v37 = v62;
        goto LABEL_42;
      }
      objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionHomeKitUserIdentifier"));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      if (v55)
        objc_msgSend(v43, "setHomeUserIdentifier:", v55);
      else
        objc_msgSend(v43, "clearHomeUserIdentifiers");
    }

    goto LABEL_40;
  }
  objc_msgSend(*(id *)(v11 + 3432), "sharedManager");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "playerClientForPlayerPath:", v10);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v38 = v68;
  if ((__MRServiceClientRemotePlayerPathCommandCallback_block_invoke(v39, v68, v37) & 1) != 0)
    goto LABEL_20;
LABEL_18:
  v40 = (void *)v9;
  v41 = v66;
  objc_msgSend(v38, "enqueueCommand:options:playerPath:commandCompletion:", a2, v8, v7, v66);
LABEL_42:

}

void MRServiceClientRemoteCommandCallback(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  MRCommandResult *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint8_t buf[4];
  const __CFString *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (v8)
  {
    v10 = objc_msgSend(v8, "mutableCopy");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v10 = objc_claimAutoreleasedReturnValue();
  }
  v11 = (void *)v10;
  v12 = (void *)objc_msgSend(v7, "copy");
  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("kMRMediaRemoteOptionCommandID"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  MRMediaRemoteCommandCreateDescription(a2, v11, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v14, "initWithFormat:", CFSTR("Got %@ for %@"), v15, v12);

  _MRLogForCategory(0xAuLL);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543874;
    v25 = CFSTR("command");
    v26 = 2114;
    v27 = v13;
    v28 = 2112;
    v29 = v16;
    _os_log_impl(&dword_193827000, v17, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "originClientForPlayerPath:", v12);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
  {
    objc_msgSend(v19, "commandCallback");
    v20 = (MRCommandResult *)objc_claimAutoreleasedReturnValue();
    if (v20)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __MRServiceClientRemoteCommandCallback_block_invoke;
      v21[3] = &unk_1E30CB220;
      v22 = v12;
      v23 = v9;
      _MRServiceClientOriginCommandCallback(v22, a2, v11, v20, v21);

    }
    else
    {
      MRServiceClientRemotePlayerPathCommandCallback(v12, a2, v11, v9);
    }
    goto LABEL_12;
  }
  if (v9)
  {
    v20 = -[MRCommandResult initWithWithSendError:description:]([MRCommandResult alloc], "initWithWithSendError:description:", 6, CFSTR("Could not create an originClient for playerPath"));
    (*((void (**)(id, MRCommandResult *))v9 + 2))(v9, v20);
LABEL_12:

  }
}

void OUTLINED_FUNCTION_1_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_2_7(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_4_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x20u);
}

uint64_t MRMediaRemoteBundle()
{
  return objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.MediaRemote"));
}

id MRLocalizedString(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v1 = a1;
  v2 = (id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.MediaRemote"));
  v3 = (void *)MEMORY[0x1E0CB34D0];
  objc_msgSend(v2, "localizations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferredLocalizationsFromArray:forPreferences:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(0, "copy");
  if (objc_msgSend(v6, "count"))
  {
    if (!v7)
    {
      objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "pathForResource:ofType:inDirectory:forLocalization:", CFSTR("MediaRemote"), CFSTR("strings"), CFSTR("."), v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfFile:", v9);

    }
    objc_msgSend(v7, "objectForKey:", v1);
    v10 = objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      objc_msgSend(v2, "localizedStringForKey:value:table:", v1, &stru_1E30D5AF8, CFSTR("MediaRemote"));
      v10 = objc_claimAutoreleasedReturnValue();
    }
    v11 = (void *)v10;
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t MRColorCopyDescription(float a1, float a2, float a3, float a4)
{
  _DWORD v5[4];

  *(float *)v5 = a1;
  *(float *)&v5[1] = a2;
  *(float *)&v5[2] = a3;
  *(float *)&v5[3] = a4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<MRColor:%p red = %f, green = %f, blue = %f, alpha = %f>"), v5, a1, a2, a3, a4);
  return objc_claimAutoreleasedReturnValue();
}

BOOL MRColorIsEqual(float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  return vabds_f32(a1, a5) <= 0.00000011921
      && vabds_f32(a2, a6) <= 0.00000011921
      && vabds_f32(a3, a7) <= 0.00000011921
      && vabds_f32(a4, a8) <= 0.00000011921;
}

BOOL MRColorIsNull(float a1, float a2, float a3, float a4)
{
  return fabsf(a1 + 1.0) <= 0.00000011921
      && fabsf(a2 + 1.0) <= 0.00000011921
      && fabsf(a3 + 1.0) <= 0.00000011921
      && fabsf(a4 + 1.0) <= 0.00000011921;
}

MRContentItem *MRContentItemRepresentationForIdentity(void *a1, void *a2)
{
  id v3;
  id v4;
  MRContentItem *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _BOOL8 v11;
  void *v12;

  v3 = a2;
  v4 = a1;
  v5 = -[MRContentItem initWithIdentifier:]([MRContentItem alloc], "initWithIdentifier:", v4);

  objc_msgSend(v3, "displayName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[MRContentItem metadata](v5, "metadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setParticipantName:", v6);

  objc_msgSend(v3, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[MRContentItem metadata](v5, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setParticipantIdentifier:", v8);

  v10 = objc_msgSend(v3, "type");
  v11 = v10 == 1;
  -[MRContentItem metadata](v5, "metadata");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setIsResolvableParticipant:", v11);

  return v5;
}

id MRIdentityRepresentationForParticipantItem(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v1 = a1;
  objc_msgSend(v1, "metadata");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "participantIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    goto LABEL_2;
  objc_msgSend(v1, "metadata");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResolvableParticipant");

  if (v6)
  {
    objc_msgSend(v1, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "participantIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "metadata");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "participantName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[MRUserIdentity resolvableIdentityWithIdentifier:displayName:](MRUserIdentity, "resolvableIdentityWithIdentifier:displayName:", v8, v10);
    v11 = objc_claimAutoreleasedReturnValue();
LABEL_7:
    v4 = (void *)v11;

    goto LABEL_8;
  }
  objc_msgSend(v1, "metadata");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "participantName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(v1, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "participantIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "metadata");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "participantName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[MRUserIdentity basicIdentityWithIdentifier:displayName:](MRUserIdentity, "basicIdentityWithIdentifier:displayName:", v8, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
LABEL_2:
  v4 = 0;
LABEL_8:

  return v4;
}

uint64_t _MRUpdateActiveSystemEndpointMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRUpdateActiveSystemEndpointRequestProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRUpdateActiveSystemEndpointRequestProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (_MRUpdateActiveSystemEndpointRequestProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSetRecordingStateMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void MRMediaRemoteRequestNowPlayingPlaybackQueue(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  MRPlayerPath *v11;

  v9 = a5;
  v10 = a4;
  v11 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a3, a2, 0);
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer(a1, v11, v10, v9);

}

void MRMediaRemoteRequestNowPlayingPlaybackQueueSync(void *a1, void *a2, void *a3)
{
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayer(a1, 0, a2, a3);
}

void MRMediaRemoteRequestNowPlayingPlaybackQueueCapabilities(void *a1, void *a2)
{
  MRMediaRemoteRequestNowPlayingPlaybackQueueCapabilitiesForPlayer(0, a1, a2);
}

void MRMediaRemoteRequestNowPlayingPlaybackQueueCapabilitiesForPlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  __CFString *v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v5 = (id)MEMORY[0x1E0C80D38];
    v7 = MEMORY[0x1E0C80D38];
  }
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "workerQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[2] = __MRMediaRemoteRequestNowPlayingPlaybackQueueCapabilitiesForPlayer_block_invoke;
  v17[3] = &unk_1E30C6608;
  v17[1] = 3221225472;
  v18 = CFSTR("playbackQueueCapabilities");
  v19 = v9;
  v20 = v10;
  v21 = v5;
  v22 = v6;
  v13 = v6;
  v14 = v5;
  v15 = v10;
  v16 = v9;
  MRMediaRemoteNowPlayingResolvePlayerPath(a1, v12, v17);

}

uint64_t _MRSetNowPlayingPlayerMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRNowPlayingPlayerPathProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRTransactionMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _MRNowPlayingPlayerPathProtobuf *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v24->super.super.isa, a2))
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_39:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_MRTransactionPacketsProtobuf);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (_MRTransactionPacketsProtobufReadFrom(v24, a2) & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRSetListeningModeMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRUpdatePlayerMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRNowPlayingPlayerPathProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGroupSessionTokenProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_33;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_44;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_44:
          v32 = 32;
          goto LABEL_49;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_33;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_33;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_33;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_33:
          v26 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 7u:
          v27 = 0;
          v28 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 60) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v22 |= (unint64_t)(v31 & 0x7F) << v27;
        if ((v31 & 0x80) == 0)
          goto LABEL_46;
        v27 += 7;
        v14 = v28++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_48:
      v32 = 56;
LABEL_49:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRBroadcastCommandResponseGetPID(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "playerPath");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "client");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "processIdentifier");

  return v3;
}

void *MRBroadcastCommandResponseGetBundleIdentifier(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(a1, "playerPath");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "client");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t _MRVolumeControlAvailabilityProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 12) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *MRAnalyticsDeviceCompositionDescription(int a1)
{
  char v1;
  void *v2;
  void *v3;
  __CFString *v4;

  if (!a1)
  {
    v4 = CFSTR("Unset");
    return v4;
  }
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("Unknown"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("Speaker"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "addObject:", CFSTR("AppleTV"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("HomePod"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    objc_msgSend(v3, "addObject:", CFSTR("Watch"));
    if ((v1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("iOS"));
  if ((v1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v1 & 0x40) != 0)
LABEL_9:
    objc_msgSend(v3, "addObject:", CFSTR("Mac"));
LABEL_10:
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(" | "));
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t MRAnalyticsCompositionForEndpoint(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  int v7;

  v1 = a1;
  if (objc_msgSend(v1, "isLocalEndpoint"))
  {
    if (MRAnalyticsCompositionForLocalDevice_onceToken != -1)
      dispatch_once(&MRAnalyticsCompositionForLocalDevice_onceToken, &__block_literal_global_63);
    v2 = MRAnalyticsCompositionForLocalDevice_localDeviceComposition;
  }
  else
  {
    objc_msgSend(v1, "designatedGroupLeader");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      v5 = v3;
    }
    else
    {
      objc_msgSend(v1, "outputDevices");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "firstObject");
      v5 = (id)objc_claimAutoreleasedReturnValue();

    }
    v7 = objc_msgSend(v5, "deviceSubtype");
    switch(v7)
    {
      case 2:
        v2 = 2;
        break;
      case 13:
        v2 = 4;
        break;
      case 12:
        v2 = 8;
        break;
      default:
        v2 = 1;
        break;
    }

  }
  return v2;
}

uint64_t MRAnalyticsCompositionForLocalDevice()
{
  if (MRAnalyticsCompositionForLocalDevice_onceToken != -1)
    dispatch_once(&MRAnalyticsCompositionForLocalDevice_onceToken, &__block_literal_global_63);
  return MRAnalyticsCompositionForLocalDevice_localDeviceComposition;
}

uint64_t MRAnalyticsCompositionForOutputDevice(void *a1)
{
  int v1;
  int v2;
  unsigned int v3;

  v1 = objc_msgSend(a1, "deviceSubtype");
  if (v1 == 12)
    v2 = 8;
  else
    v2 = 1;
  if (v1 == 13)
    v3 = 4;
  else
    v3 = v2;
  if (v1 == 2)
    return 2;
  else
    return v3;
}

uint64_t MRAnalyticsCompositionForOutputDevices(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v1);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "deviceSubtype");
        switch(v7)
        {
          case 2:
            v8 = 2;
            break;
          case 13:
            v8 = 4;
            break;
          case 12:
            v8 = 8;
            break;
          default:
            v8 = 1;
            break;
        }
        v4 = v8 | v4;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t MRAnalyticsCompositionForDeviceInfo(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "deviceClass");
  if ((unint64_t)(v1 - 1) > 8)
    return 1;
  else
    return dword_193AD9DF0[v1 - 1];
}

uint64_t MRAnalyticsCompositionForDeviceClass(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return 1;
  else
    return dword_193AD9DF0[a1 - 1];
}

uint64_t MRAnalyticsSendEvent(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  id v13;
  id v14;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (MRAnalyticsSendEvent_once != -1)
    dispatch_once(&MRAnalyticsSendEvent_once, &__block_literal_global_211);
  v8 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __MRAnalyticsSendEvent_block_invoke_2;
  v19[3] = &unk_1E30CBA28;
  v20 = v6;
  v21 = v7;
  v9 = v6;
  v10 = v7;
  v11 = (void *)MEMORY[0x194036C44](v19);
  v12 = MRAnalyticsSendEvent___analyticsQueue;
  v16[0] = v8;
  v16[1] = 3221225472;
  v16[2] = __MRAnalyticsSendEvent_block_invoke_3;
  v16[3] = &unk_1E30C6568;
  v17 = v5;
  v18 = v11;
  v13 = v5;
  v14 = v11;
  dispatch_async(v12, v16);

  return 1;
}

void MRAnalyticsTrackTopologyChangeEvent(void *a1, void *a2, void *a3, int a4, uint64_t a5, void *a6, char a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  int v31;
  char v32;

  v15 = a1;
  v16 = a2;
  v17 = a6;
  v18 = a8;
  objc_msgSend(a3, "componentsSeparatedByString:", CFSTR("/"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "firstObject");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __MRAnalyticsTrackTopologyChangeEvent_block_invoke;
  v25[3] = &unk_1E30CBA50;
  v26 = v17;
  v27 = v16;
  v31 = a4;
  v32 = a7;
  v28 = v15;
  v29 = v20;
  v30 = a5;
  v21 = v20;
  v22 = v15;
  v23 = v16;
  v24 = v17;
  MRAnalyticsSendEvent(CFSTR("com.apple.mediaremote.topology-modification"), v18, v25);

}

void MRMediaRemoteSetCommandHandler(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = a1;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "originClientForOrigin:", v4);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "setCommandCallback:", v3);
}

void MRMediaRemoteSetCommandHandlerBlock(void *a1)
{
  MRMediaRemoteSetCommandHandlerBlockForOrigin(0, a1);
}

void MRMediaRemoteSetCommandHandlerBlockForOrigin(uint64_t a1, void *a2)
{
  id v3;
  MRPlayerPath *v4;
  id v5;

  v3 = a2;
  +[MRClient localClient](MRClient, "localClient");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, v5, 0);
  MRMediaRemoteSetCommandHandlerBlockForPlayer((uint64_t)v4, v3);

}

void MRMediaRemoteSetCommandHandlerBlockForPlayer(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "playerClientForPlayerPath:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "clientCallbacks");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeCommandHandlerBlockForKey:", CFSTR("JUST_GOT_SPLASH_BEATS!"));

  if (v3)
  {
    objc_msgSend(v5, "clientCallbacks");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __MRMediaRemoteSetCommandHandlerBlockForPlayer_block_invoke;
    v8[3] = &unk_1E30CBA78;
    v9 = v3;
    objc_msgSend(v7, "addCommandHandlerBlock:forKey:", v8, CFSTR("JUST_GOT_SPLASH_BEATS!"));

  }
}

uint64_t MRMediaRemoteAddCommandHandlerBlock(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = MRMediaRemoteAddCommandHandlerBlockForOrigin((uint64_t)v2, v1);

  return v3;
}

uint64_t MRMediaRemoteAddCommandHandlerBlockForOrigin(uint64_t a1, void *a2)
{
  id v3;
  MRPlayerPath *v4;
  uint64_t v5;

  v3 = a2;
  v4 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v5 = MRMediaRemoteAddCommandHandlerBlockForPlayer((uint64_t)v4, v3);

  return v5;
}

uint64_t MRMediaRemoteAddCommandHandlerBlockForPlayer(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteAddCommandHandlerBlockForPlayer_block_invoke;
  v7[3] = &unk_1E30CBAA0;
  v8 = v3;
  v4 = v3;
  v5 = MRMediaRemoteAddAsyncCommandHandlerBlockForPlayer(a1, v7);

  return v5;
}

uint64_t MRMediaRemoteAddAsyncCommandHandlerBlockForPlayer(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%08x"), arc4random());
  v4 = objc_claimAutoreleasedReturnValue();
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "playerClientForPlayerPath:", a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "clientCallbacks");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __MRMediaRemoteAddAsyncCommandHandlerBlockForPlayer_block_invoke;
  v10[3] = &unk_1E30CBA78;
  v11 = v3;
  v8 = v3;
  objc_msgSend(v7, "addCommandHandlerBlock:forKey:", v10, v4);

  return v4;
}

uint64_t MRMediaRemoteAddAsyncCommandHandlerBlock(void *a1)
{
  return MRMediaRemoteAddAsyncCommandHandlerBlockForOrigin(0, a1);
}

uint64_t MRMediaRemoteAddAsyncCommandHandlerBlockForOrigin(uint64_t a1, void *a2)
{
  id v3;
  MRPlayerPath *v4;
  uint64_t v5;

  v3 = a2;
  v4 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  v5 = MRMediaRemoteAddAsyncCommandHandlerBlockForPlayer((uint64_t)v4, v3);

  return v5;
}

void MRMediaRemoteSetCommandHandlerCallback(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "originClientForOrigin:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteSetCommandHandlerCallback_block_invoke;
  v7[3] = &unk_1E30CBAC8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "setCommandCallback:", v7);

}

void MRMediaRemoteSetCommandHandlerCallbackForOrigin(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "originClientForOrigin:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteSetCommandHandlerCallbackForOrigin_block_invoke;
  v7[3] = &unk_1E30CBAC8;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "setCommandCallback:", v7);

}

void MRMediaRemoteRemoveCommandHandlerBlock(uint64_t a1)
{
  MRMediaRemoteRemoveCommandHandlerBlockForOrigin(0, a1);
}

void MRMediaRemoteRemoveCommandHandlerBlockForOrigin(uint64_t a1, uint64_t a2)
{
  MRPlayerPath *v3;

  v3 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  MRMediaRemoteRemoveCommandHandlerBlockForPlayer((uint64_t)v3, a2);

}

void MRMediaRemoteRemoveCommandHandlerBlockForPlayer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "playerClientForPlayerPath:", a1);
    v6 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "clientCallbacks");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeCommandHandlerBlockForKey:", a2);

  }
}

uint64_t _MRGetVolumeControlCapabilitiesMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

MRTelevisionController *MRTelevisionControllerCreate()
{
  void *v0;
  MRTelevisionController *v1;

  v0 = (void *)MEMORY[0x194036A64]();
  v1 = objc_alloc_init(MRTelevisionController);
  objc_autoreleasePoolPop(v0);
  return v1;
}

uint64_t MRTelevisionControllerIsDiscoveringDevices(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isDiscovering");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRTelevisionControllerSetDiscoveryCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  _MRTelevisionControllerBlockCallback *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  v8 = 0;
  if (v9 && v5)
    v8 = -[_MRTelevisionControllerBlockCallback initWithCallbackBlock:queue:]([_MRTelevisionControllerBlockCallback alloc], "initWithCallbackBlock:queue:", v5, v9);
  objc_msgSend(v7, "setDiscoveryCallback:", v8);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionControllerSetRemovalCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  _MRTelevisionControllerBlockCallback *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  v8 = 0;
  if (v9 && v5)
    v8 = -[_MRTelevisionControllerBlockCallback initWithCallbackBlock:queue:]([_MRTelevisionControllerBlockCallback alloc], "initWithCallbackBlock:queue:", v5, v9);
  objc_msgSend(v7, "setRemovalCallback:", v8);

  objc_autoreleasePoolPop(v6);
}

void MRTelevisionControllerBeginDiscovery(void *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "beginDiscovery");
  objc_autoreleasePoolPop(v2);
}

void MRTelevisionControllerEndDiscovery(void *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "endDiscovery");
  objc_autoreleasePoolPop(v2);
}

uint64_t MRAVEndpointGetExternalDevice(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "externalDevice");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVEndpointCopyOutputDevices(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "outputDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVEndpointCopyPersonalOutputDevices(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "personalOutputDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVEndpointCopyLocalizedName(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "localizedName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVEndpointCopyUniqueIdentifier(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "uniqueIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVEndpointGetLocalizedName(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "localizedName");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVEndpointGetUniqueIdentifier(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "uniqueIdentifier");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVEndpointIsLocalEndpoint(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isLocalEndpoint");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVEndpointIsProxyGroupPlayer(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isProxyGroupPlayer");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVEndpointGetConnectionType(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "connectionType");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVEndpointCopyOrigin(void *a1)
{
  objc_msgSend(a1, "origin");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRAVEndpointCreateWithDevices()
{
  return 0;
}

void MRAVEndpointCreateWithDevicesAsync(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t Error;
  id v5;

  if (a3)
  {
    v5 = a3;
    Error = MRMediaRemoteCreateError(3);
    ((void (**)(id, uint64_t, _QWORD))a3)[2](v5, Error, 0);

  }
}

void MRAVEndpointGroupDevicesAndSendCommandWithResult(void *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  void *v25[3];

  v11 = a1;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = (void *)MEMORY[0x194036A64]();
  NSStringFromSelector("uid");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "valueForKeyPath:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v25[1] = v12;
  v25[0] = (void *)a2;
  v25[2] = v13;
  v19 = (void *)MRGetSharedService();
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __MRAVEndpointGroupDevicesAndSendCommandWithResult_block_invoke;
  v22[3] = &unk_1E30CBB98;
  v20 = v13;
  v23 = v20;
  v21 = v15;
  v24 = v21;
  MRMediaRemoteServiceGroupDevicesAndSendCommand(v19, (uint64_t)v18, v25, v14, v22);

  objc_autoreleasePoolPop(v16);
}

void MRAVEndpointGroupDevicesAndSendCommand(void *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v11 = a5;
  v12 = a6;
  v13 = (void *)MEMORY[0x194036A64]();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __MRAVEndpointGroupDevicesAndSendCommand_block_invoke;
  v15[3] = &unk_1E30CBBC0;
  v14 = v12;
  v16 = v14;
  MRAVEndpointGroupDevicesAndSendCommandWithResult(a1, a2, a3, a4, v11, v15);

  objc_autoreleasePoolPop(v13);
}

void MRAVEndpointPredictGroupLeader(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x194036A64]();
  NSStringFromSelector("uid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "valueForKeyPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MRGetSharedService();
  MRMediaRemoteServicePredictGroupLeader(v9, (uint64_t)v8, v10, v5);

  objc_autoreleasePoolPop(v6);
}

uint64_t MRAVEndpointCopyDesignatedGroupLeader(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "designatedGroupLeader");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVEndpointGetDesignatedGroupLeader(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "designatedGroupLeader");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRAVEndpointGetVolumeControlCapabilities(void *a1, void *a2, void *a3)
{
  MRAVEndpointGetOutputDeviceUIDVolumeControlCapabilities(a1, 0, a2, a3);
}

void MRAVEndpointGetOutputDeviceUIDVolumeControlCapabilities(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRAVEndpointGetOutputDeviceUIDVolumeControlCapabilities_block_invoke;
  v11[3] = &unk_1E30C99C0;
  v10 = v8;
  v12 = v10;
  objc_msgSend(a1, "outputDeviceVolumeControlCapabilities:queue:completion:", a2, v7, v11);

  objc_autoreleasePoolPop(v9);
}

void MRAVEndpointGetVolume(void *a1, void *a2, void *a3)
{
  MRAVEndpointGetOutputDeviceUIDVolume(a1, 0, a2, a3);
}

void MRAVEndpointGetOutputDeviceUIDVolume(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRAVEndpointGetOutputDeviceUIDVolume_block_invoke;
  v11[3] = &unk_1E30CBBE8;
  v10 = v8;
  v12 = v10;
  objc_msgSend(a1, "outputDeviceVolume:queue:completion:", a2, v7, v11);

  objc_autoreleasePoolPop(v9);
}

void MRAVEndpointSetVolume(void *a1, void *a2, void *a3, float a4)
{
  MRAVEndpointSetOutputDeviceVolume(a1, 0, a2, a3, a4);
}

void MRAVEndpointSetOutputDeviceVolume(void *a1, void *a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  double v14;
  _QWORD v15[4];
  id v16;

  v9 = a3;
  v10 = a4;
  v11 = (void *)MEMORY[0x194036A64]();
  v12 = (void *)MRAVOutputDeviceCopyUniqueIdentifier(a2);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __MRAVEndpointSetOutputDeviceVolume_block_invoke;
  v15[3] = &unk_1E30C6798;
  v13 = v10;
  v16 = v13;
  *(float *)&v14 = a5;
  objc_msgSend(a1, "setOutputDeviceVolume:outputDevice:queue:completion:", v12, v9, v15, v14);

  objc_autoreleasePoolPop(v11);
}

void MRAVEndpointGetOutputDeviceVolumeControlCapabilities(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v10 = (void *)MRAVOutputDeviceCopyUniqueIdentifier(a2);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __MRAVEndpointGetOutputDeviceVolumeControlCapabilities_block_invoke;
  v12[3] = &unk_1E30C99C0;
  v11 = v8;
  v13 = v11;
  objc_msgSend(a1, "outputDeviceVolumeControlCapabilities:queue:completion:", v10, v7, v12);

  objc_autoreleasePoolPop(v9);
}

uint64_t MRAVEndpointIsOutputDeviceVolumeControlAvailable()
{
  return 0;
}

void MRAVEndpointGetOutputDeviceVolume(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v10 = (void *)MRAVOutputDeviceCopyUniqueIdentifier(a2);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __MRAVEndpointGetOutputDeviceVolume_block_invoke;
  v12[3] = &unk_1E30CBBE8;
  v11 = v8;
  v13 = v11;
  objc_msgSend(a1, "outputDeviceVolume:queue:completion:", v10, v7, v12);

  objc_autoreleasePoolPop(v9);
}

void MRAVEndpointSetOutputDeviceUIDVolume(void *a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  _QWORD v14[4];
  id v15;

  v9 = a3;
  v10 = a4;
  v11 = (void *)MEMORY[0x194036A64]();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __MRAVEndpointSetOutputDeviceUIDVolume_block_invoke;
  v14[3] = &unk_1E30C6798;
  v12 = v10;
  v15 = v12;
  *(float *)&v13 = a5;
  objc_msgSend(a1, "setOutputDeviceVolume:outputDevice:queue:completion:", a2, v9, v14, v13);

  objc_autoreleasePoolPop(v11);
}

void MRAVEndpointAddOutputDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  MRAVEndpointAddOutputDevicesWithInitiator(a1, a2, (uint64_t)CFSTR("deprecated"), a3, a4);
}

void MRAVEndpointAddOutputDevicesWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x194036A64]();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRAVEndpointAddOutputDevicesWithInitiator_block_invoke;
  v13[3] = &unk_1E30C6798;
  v12 = v10;
  v14 = v12;
  objc_msgSend(a1, "migrateToOrAddOutputDevices:initiator:withReplyQueue:completion:", a2, a3, v9, v13);

  objc_autoreleasePoolPop(v11);
}

void MRAVEndpointRemoveOutputDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  MRAVEndpointRemoveOutputDevicesWithInitiator(a1, a2, (uint64_t)CFSTR("deprecated"), a3, a4);
}

void MRAVEndpointRemoveOutputDevicesWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x194036A64]();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRAVEndpointRemoveOutputDevicesWithInitiator_block_invoke;
  v13[3] = &unk_1E30C6798;
  v12 = v10;
  v14 = v12;
  objc_msgSend(a1, "removeOutputDevices:initiator:withReplyQueue:completion:", a2, a3, v9, v13);

  objc_autoreleasePoolPop(v11);
}

void MRAVEndpointSetOutputDevices(void *a1, uint64_t a2, void *a3, void *a4)
{
  MRAVEndpointSetOutputDevicesWithInitiator(a1, a2, (uint64_t)CFSTR("deprecated"), a3, a4);
}

void MRAVEndpointSetOutputDevicesWithInitiator(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x194036A64]();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRAVEndpointSetOutputDevicesWithInitiator_block_invoke;
  v13[3] = &unk_1E30C6798;
  v12 = v10;
  v14 = v12;
  objc_msgSend(a1, "migrateToOrSetOutputDevices:initiator:withReplyQueue:completion:", a2, a3, v9, v13);

  objc_autoreleasePoolPop(v11);
}

void MRAVEndpointModifyOutputDevicesInGroup(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  qos_class_t v29;
  NSObject *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  char v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  void (**v49)(_QWORD, _QWORD, _QWORD);
  id v50;
  id v51;
  id v52;
  void (**v53)(_QWORD, _QWORD, _QWORD);
  id v54;
  NSObject *v55;
  void *v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  void *v70;
  dispatch_queue_t context;
  void *contexta;
  id v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  _QWORD block[4];
  id v81;
  id v82;
  _QWORD *v83;
  __int128 *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD v87[4];
  NSObject *v88;
  __int128 *p_buf;
  _QWORD *v90;
  _QWORD v91[4];
  NSObject *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD v95[5];
  id v96;
  _QWORD v97[5];
  id v98;
  _QWORD v99[4];
  id v100;
  id v101;
  id v102;
  id v103;
  NSObject *v104;
  _QWORD v105[4];
  id v106;
  id v107;
  id v108;
  id v109;
  _QWORD v110[4];
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  _QWORD v116[4];
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  __int128 buf;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t);
  void (*v128)(uint64_t);
  id v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v78 = a5;
  v76 = a6;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = objc_alloc(MEMORY[0x1E0CB3940]);
  MRGroupTopologyModificationRequestTypeDescription(a1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v16, "initWithFormat:", CFSTR("%@OutputDevicesInGroup"), v17);

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_alloc(MEMORY[0x1E0CB3940]);
  v21 = v20;
  if (v11)
  {
    v22 = objc_msgSend(v20, "initWithFormat:", CFSTR("group=%@ outputDevices=%@"), v11, v10);
  }
  else
  {
    +[MRAVOutputDevice localDeviceUID](MRAVOutputDevice, "localDeviceUID");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "initWithFormat:", CFSTR("group=%@ outputDevices=%@"), v23, v10);

  }
  v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), v18, v15);
  v25 = v24;
  if (v22)
    objc_msgSend(v24, "appendFormat:", CFSTR(" for %@"), v22);
  v75 = v25;
  v69 = (void *)v22;
  _MRLogForCategory(0xAuLL);
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v25;
    _os_log_impl(&dword_193827000, v26, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  v74 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("com.apple.mediaremote.%@.%@"), v18, v15);
  if (v78)
  {
    context = (dispatch_queue_t)v78;
  }
  else
  {
    v27 = (const char *)objc_msgSend(objc_retainAutorelease(v74), "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = qos_class_self();
    dispatch_queue_attr_make_with_qos_class(v28, v29, 0);
    v30 = objc_claimAutoreleasedReturnValue();
    context = dispatch_queue_create(v27, v30);

  }
  v31 = MEMORY[0x1E0C809B0];
  v116[0] = MEMORY[0x1E0C809B0];
  v116[1] = 3221225472;
  v116[2] = __MRAVEndpointModifyOutputDevicesInGroup_block_invoke;
  v116[3] = &unk_1E30CBC10;
  v32 = v18;
  v117 = v32;
  v33 = v15;
  v118 = v33;
  v67 = v13;
  v119 = v67;
  v34 = v19;
  v120 = v34;
  v124 = a1;
  v65 = v12;
  v121 = v65;
  v35 = v10;
  v122 = v35;
  v66 = v76;
  v123 = v66;
  v70 = (void *)MEMORY[0x194036C44](v116);
  objc_msgSend((Class)getAVAudioSessionClass_1[0](), "auxiliarySession");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  getAVAudioSessionCategoryPlayback_1();
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v115 = 0;
  v38 = objc_msgSend(v36, "setCategory:error:", v37, &v115);
  v73 = v115;

  if ((v38 & 1) == 0)
  {
    _MRLogForCategory(0);
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      MRAVEndpointModifyOutputDevicesInGroup_cold_1((uint64_t)v73, v39, v40, v41, v42, v43, v44, v45);

  }
  v110[0] = v31;
  v110[1] = 3221225472;
  v110[2] = __MRAVEndpointModifyOutputDevicesInGroup_block_invoke_67;
  v110[3] = &unk_1E30CBC88;
  v46 = v32;
  v111 = v46;
  v47 = v33;
  v112 = v47;
  v48 = v34;
  v113 = v48;
  v77 = v11;
  v114 = v77;
  v49 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x194036C44](v110);
  v105[0] = v31;
  v105[1] = 3221225472;
  v105[2] = __MRAVEndpointModifyOutputDevicesInGroup_block_invoke_102;
  v105[3] = &unk_1E30CBD00;
  v50 = v46;
  v106 = v50;
  v51 = v47;
  v107 = v51;
  v52 = v48;
  v108 = v52;
  v68 = v36;
  v109 = v68;
  v53 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x194036C44](v105);
  v99[0] = v31;
  v99[1] = 3221225472;
  v99[2] = __MRAVEndpointModifyOutputDevicesInGroup_block_invoke_111;
  v99[3] = &unk_1E30CBD78;
  v63 = v50;
  v100 = v63;
  v62 = v51;
  v101 = v62;
  v54 = v35;
  v102 = v54;
  v64 = v52;
  v103 = v64;
  v55 = context;
  v104 = v55;
  v56 = (void *)MEMORY[0x194036C44](v99);
  contexta = (void *)MEMORY[0x194036A64]();
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v126 = 0x3032000000;
  v127 = __Block_byref_object_copy__27;
  v128 = __Block_byref_object_dispose__27;
  v129 = 0;
  v97[0] = 0;
  v97[1] = v97;
  v97[2] = 0x3032000000;
  v97[3] = __Block_byref_object_copy__27;
  v97[4] = __Block_byref_object_dispose__27;
  v98 = 0;
  v95[0] = 0;
  v95[1] = v95;
  v95[2] = 0x3032000000;
  v95[3] = __Block_byref_object_copy__27;
  v95[4] = __Block_byref_object_dispose__27;
  v96 = 0;
  v57 = dispatch_group_create();
  dispatch_group_enter(v57);
  dispatch_group_enter(v57);
  v91[0] = v31;
  v91[1] = 3221225472;
  v91[2] = __MRAVEndpointModifyOutputDevicesInGroup_block_invoke_117;
  v91[3] = &unk_1E30C7A20;
  v93 = v97;
  v94 = v95;
  v58 = v57;
  v92 = v58;
  ((void (**)(_QWORD, id, _QWORD *))v53)[2](v53, v54, v91);
  v87[0] = v31;
  v87[1] = 3221225472;
  v87[2] = __MRAVEndpointModifyOutputDevicesInGroup_block_invoke_2;
  v87[3] = &unk_1E30CBDA0;
  p_buf = &buf;
  v90 = v95;
  v59 = v58;
  v88 = v59;
  ((void (**)(_QWORD, id, _QWORD *))v49)[2](v49, v77, v87);
  block[0] = v31;
  block[1] = 3221225472;
  block[2] = __MRAVEndpointModifyOutputDevicesInGroup_block_invoke_3;
  block[3] = &unk_1E30CBDF0;
  v83 = v95;
  v60 = v56;
  v81 = v60;
  v84 = &buf;
  v85 = v97;
  v86 = a1;
  v61 = v70;
  v82 = v61;
  dispatch_group_notify(v59, v55, block);

  _Block_object_dispose(v95, 8);
  _Block_object_dispose(v97, 8);

  _Block_object_dispose(&buf, 8);
  objc_autoreleasePoolPop(contexta);

}

void sub_1939ADDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose((const void *)(v57 - 160), 8);
  _Unwind_Resume(a1);
}

void MRAVEndpointAddOutputDevicesToGroup(void *a1, void *a2, void *a3, void *a4)
{
  MRAVEndpointAddOutputDevicesToGroupFromSource(a1, a2, CFSTR("spi"), a3, a4);
}

void MRAVEndpointAddOutputDevicesToGroupFromSource(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v9 = a5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRAVEndpointAddOutputDevicesToGroupFromSource_block_invoke;
  v11[3] = &unk_1E30C6798;
  v12 = v9;
  v10 = v9;
  MRAVEndpointModifyOutputDevicesInGroup(1, a2, a1, a3, a4, v11);

}

void MRAVEndpointRemoveOutputDevicesFromGroup(void *a1, void *a2, void *a3, void *a4)
{
  MRAVEndpointRemoveOutputDevicesFromGroupFromSource(a1, a2, CFSTR("spi"), a3, a4);
}

void MRAVEndpointRemoveOutputDevicesFromGroupFromSource(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v9 = a5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRAVEndpointRemoveOutputDevicesFromGroupFromSource_block_invoke;
  v11[3] = &unk_1E30C6798;
  v12 = v9;
  v10 = v9;
  MRAVEndpointModifyOutputDevicesInGroup(2, a2, a1, a3, a4, v11);

}

void MRAVEndpointMoveOutputGroupToDevices(void *a1, void *a2, void *a3, void *a4)
{
  MRAVEndpointMoveOutputGroupToDevicesFromSource(a1, a2, CFSTR("spi"), a3, a4);
}

void MRAVEndpointMoveOutputGroupToDevicesFromSource(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v9 = a5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRAVEndpointMoveOutputGroupToDevicesFromSource_block_invoke;
  v11[3] = &unk_1E30C6798;
  v12 = v9;
  v10 = v9;
  MRAVEndpointModifyOutputDevicesInGroup(3, a2, a1, a3, a4, v11);

}

uint64_t MRAVEndpointCanModifyGroupMembership(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "canModifyGroupMembership");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRAVEndpointMigrate(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v7 = a3;
  v8 = a4;
  v9 = (void *)MEMORY[0x194036A64]();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __MRAVEndpointMigrate_block_invoke;
  v11[3] = &unk_1E30C6798;
  v10 = v8;
  v12 = v10;
  objc_msgSend(a1, "migrateToEndpoint:request:queue:completion:", a2, 0, v7, v11);

  objc_autoreleasePoolPop(v9);
}

uint64_t MRAVEndpointGetClass()
{
  return objc_opt_class();
}

void MRAVEndpointGetMyGroupLeaderWithTimeout(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  MRRequestDetails *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v5 = a2;
  v6 = a1;
  v7 = -[MRRequestDetails initWithName:requestID:reason:]([MRRequestDetails alloc], "initWithName:requestID:reason:", CFSTR("MRAVEndpointGetMyGroupLeaderWithTimeout"), 0, CFSTR("LegacyAPI"));
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRAVEndpointGetMyGroupLeaderWithTimeout_block_invoke;
  v9[3] = &unk_1E30CBE18;
  v10 = v5;
  v8 = v5;
  +[MRAVEndpoint findMyGroupLeaderWithTimeout:details:queue:completion:](MRAVEndpoint, "findMyGroupLeaderWithTimeout:details:queue:completion:", v7, v6, v9, a3);

}

Class initAVAudioSession_1()
{
  Class result;

  if (AVFoundationLibrary_sOnce_7 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_7, &__block_literal_global_66);
  result = objc_getClass("AVAudioSession");
  classAVAudioSession_1 = (uint64_t)result;
  getAVAudioSessionClass_1[0] = (uint64_t (*)())AVAudioSessionFunction_1;
  return result;
}

id AVAudioSessionFunction_1()
{
  return (id)classAVAudioSession_1;
}

id initValAVAudioSessionCategoryPlayback_1()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_7 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_7, &__block_literal_global_66);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_7, "AVAudioSessionCategoryPlayback");
  if (v0)
    objc_storeStrong((id *)&constantValAVAudioSessionCategoryPlayback_1, *v0);
  getAVAudioSessionCategoryPlayback_1 = (uint64_t (*)())AVAudioSessionCategoryPlaybackFunction_1;
  return (id)constantValAVAudioSessionCategoryPlayback_1;
}

id AVAudioSessionCategoryPlaybackFunction_1()
{
  return (id)constantValAVAudioSessionCategoryPlayback_1;
}

BOOL _MRGroupSessionIdentityShareReplyMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRGroupSessionParticipantProtobuf *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_MRGroupSessionParticipantProtobuf);
        v18 = 8;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(_MRGroupSessionParticipantProtobuf);
        v18 = 16;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (_MRGroupSessionParticipantProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRPresentRouteAuthorizationStatusMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRAVOutputDeviceDescriptorProtobuf *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 16) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (_MRAVOutputDeviceDescriptorProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGroupSessionErrorReplyMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1939B4F60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _MRTextInputMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v24 |= (unint64_t)(v28 & 0x7F) << v22;
          if ((v28 & 0x80) == 0)
            goto LABEL_35;
          v22 += 7;
          v15 = v23++ >= 9;
          if (v15)
          {
            LODWORD(v24) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((_DWORD)v18 == 2)
      {
        PBReaderReadString();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v29;

      }
      else if ((_DWORD)v18 == 1)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void MRTelevisionServiceDeletePairingIdentity(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = a1;
  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServiceTelevisionServerDeletePairingIdentity(v4, v5, v3);

}

void MRTelevisionServiceGetPairedDevices(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = a1;
  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServiceTelevisionGetPairedDevices(v4, v5, v3);

}

void MRTelevisionServiceDeletePairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  v6 = (void *)MRGetSharedService();
  MRMediaRemoteServiceTelevisionDeletePairedDevice(v6, a1, v7, v5);

}

void MRTelevisionServiceSetMessageLogging(BOOL a1)
{
  void *v2;

  v2 = (void *)MRGetSharedService();
  MRMediaRemoteServiceTelevisionSetMessageLogging(v2, a1);
}

void MRTelevisionServiceSetEndpoint(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  v4 = a2;
  v3 = (_QWORD *)MRGetSharedService();
  MRMediaRemoteServiceSetTelevisionEndpoint(v3, a1, v4);

}

void *MRTelevisionServiceGetEndpoint()
{
  if (MRTelevisionServiceGetEndpoint___once != -1)
    dispatch_once(&MRTelevisionServiceGetEndpoint___once, &__block_literal_global_69);
  return &MRTelevisionServiceGetEndpoint___endpoint;
}

void MRTelevisionServiceSetCustomDataCallback(void *a1, void *a2)
{
  id v3;
  id v4;

  v4 = a1;
  v3 = a2;
  if (MRTelevisionServiceGetEndpoint___once != -1)
    dispatch_once(&MRTelevisionServiceGetEndpoint___once, &__block_literal_global_69);
  if (qword_1EE2C08A8)
    CFRelease((CFTypeRef)qword_1EE2C08A8);
  qword_1EE2C08A8 = objc_msgSend(v3, "copy");

}

void MRTelevisionServiceSendCustomData(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServiceTelevisionSendCustomData(v4, a1, a2);
}

void sub_1939B612C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939B6188(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1939B6388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t _MRPlayerClientPropertiesMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  _MRNowPlayingPlayerPathProtobuf *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v18->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRPairedDeviceCreateSkeletonFrom(void *a1)
{
  objc_msgSend(a1, "skeleton");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPairedDeviceCopyName(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "name");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "identifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyLocalizedModelName(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "localizedModelName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyBuildVersion(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "buildVersion");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyBundleIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "bundleIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyBundleVersion(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "bundleVersion");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopySystemMediaApplication(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "systemMediaApplication");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceEqualToPairedDevice(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 == a2)
    return 1;
  else
    return objc_msgSend(a1, "isEqual:", a2, v2, v3);
}

uint64_t MRPairedDeviceSetSystemMediaApplication(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSystemMediaApplication:", a2);
}

uint64_t MRPairedDeviceSetSystemPodcastApplication(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSystemPodcastApplication:", a2);
}

uint64_t MRPairedDeviceSetDeviceUID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setDeviceUID:", a2);
}

uint64_t MRPairedDeviceCopyDeviceUID(void *a1)
{
  objc_msgSend(a1, "deviceUID");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPairedDeviceCopyLocalReceiverPairingIdentity(void *a1)
{
  objc_msgSend(a1, "deviceUID");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPairedDeviceCopyGroupUID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "groupUID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyGroupName(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "groupName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopySenderDefaultGroupUID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "senderDefaultGroupUID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyManagedConfigDeviceID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "managedConfigurationDeviceIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceSetManagedConfigDeviceID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setManagedConfigurationDeviceIdentifier:", a2);
}

uint64_t MRPairedDeviceIsTightlySyncedGroup(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  objc_msgSend(v1, "tightSyncUID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
    v3 = 1;
  else
    v3 = objc_msgSend(v1, "isTightSyncGroup");

  return v3;
}

uint64_t MRPairedDeviceCopyTightSyncUID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "tightSyncUID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceSetSharedQueueVersion(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSharedQueueVersion:", a2);
}

uint64_t MRPairedDeviceGetSharedQueueVersion(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "hasSharedQueueVersion"))
    v2 = objc_msgSend(v1, "sharedQueueVersion");
  else
    v2 = objc_msgSend(v1, "supportsSharedQueue");

  return v2;
}

uint64_t MRPairedDeviceSetIsProxyGroupPlayer(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setProxyGroupPlayer:", a2);
}

uint64_t MRPairedDeviceSetSupportsExtendedMotion(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSupportsExtendedMotion:", a2);
}

MRDeviceInfo *MRPairedDeviceCreate()
{
  return objc_alloc_init(MRDeviceInfo);
}

uint64_t MRPairedDeviceSetName(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setName:", a2);
}

uint64_t MRPairedDeviceSetIdentifier(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setIdentifier:", a2);
}

uint64_t MRPairedDeviceSetLocalizedModelName(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setLocalizedModelName:", a2);
}

uint64_t MRPairedDeviceSetBuildVersion(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setBuildVersion:", a2);
}

uint64_t MRPairedDeviceSetBundleIdentifier(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setBundleIdentifier:", a2);
}

uint64_t MRPairedDeviceSetBundleVersion(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setBundleVersion:", a2);
}

uint64_t MRPairedDeviceSetProtocolVersion(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setProtocolVersion:", a2);
}

uint64_t MRPairedDeviceSetDeviceClass(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setDeviceClass:", a2);
}

void MRPairedDeviceSetTightSyncUID(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "setTightSyncUID:", a2);
  if (a2)
    objc_msgSend(v3, "setTightSyncGroup:", 1);

}

uint64_t MRPairedDeviceSetGroupUID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setGroupUID:", a2);
}

uint64_t MRPairedDeviceSetGroupName(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setGroupName:", a2);
}

uint64_t MRPairedDeviceSetSenderDefaultGroupUID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSenderDefaultGroupUID:", a2);
}

uint64_t MRPairedDeviceSetIsPairingAllowed(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setPairingAllowed:", a2);
}

uint64_t MRPairedDeviceSetSupportsSystemPairing(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSupportsSystemPairing:", a2);
}

uint64_t MRPairedDeviceSetSupportsACL(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSupportsACL:", a2);
}

uint64_t MRPairedDeviceSetSupportsSharedQueue(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSupportsSharedQueue:", a2);
}

uint64_t MRPairedDeviceSetIsConnected(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setConnected:", a2);
}

uint64_t MRPairedDeviceCopyBluetoothAddress(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "bluetoothAddress");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceSetBluetoothAddress(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setBluetoothAddress:", a2);
}

uint64_t MRPairedDeviceGetGroupLogicalDeviceCount(void *a1)
{
  return objc_msgSend(a1, "groupLogicalDeviceCount");
}

uint64_t MRPairedDeviceSetGroupLogicalDeviceCount(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setGroupLogicalDeviceCount:", a2);
}

void MRPairedDeviceSetGroupedDevices(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = (id)objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setGroupedDevices:", v4);

}

uint64_t MRPairedDeviceCopyGroupedDevices(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "groupedDevices");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceSetIsGroupLeader(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setGroupLeader:", a2);
}

uint64_t MRPairedDeviceSetIsAirPlayActive(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setAirPlayActive:", a2);
}

void MRPairedDeviceSetAirPlayReceivers(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = (id)objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setAirPlayReceivers:", v4);

}

uint64_t MRPairedDeviceCopyAirPlayReceivers(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "airPlayReceivers");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPairedDeviceCopyLinkAgent(void *a1)
{
  objc_msgSend(a1, "linkAgent");
  return objc_claimAutoreleasedReturnValue();
}

void MRPairedDeviceMerge(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPairedDeviceMerge(MRPairedDeviceRef, MRPairedDeviceRef)");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_opt_class();
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRPairedDevice.m"), 438, CFSTR("Type mismatch, expecting %@ found %@"), v8, objc_opt_class());

      if (a2)
        goto LABEL_4;
LABEL_11:
      v9 = a1;
      goto LABEL_12;
    }
  }
  if (!a2)
    goto LABEL_11;
LABEL_4:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRPairedDeviceMerge(MRPairedDeviceRef, MRPairedDeviceRef)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_opt_class();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRPairedDevice.m"), 439, CFSTR("Type mismatch, expecting %@ found %@"), v12, objc_opt_class());

  }
  v3 = a1;
  v4 = a2;
  if (a1)
  {
    objc_msgSend(v4, "groupedDevices");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
      objc_msgSend(v3, "setGroupedDevices:", 0);
    objc_msgSend(v3, "mergeFrom:", v4);
  }
LABEL_12:

}

uint64_t MRPairedDeviceCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

MRDeviceInfo *MRPairedDeviceCreateFromExternalRepresentation(uint64_t a1)
{
  return -[MRDeviceInfo initWithData:]([MRDeviceInfo alloc], "initWithData:", a1);
}

uint64_t MRPairedDevicesCreateExternalRepresentation(uint64_t a1)
{
  +[MRDeviceInfo dataFromDeviceInfos:](MRDeviceInfo, "dataFromDeviceInfos:", a1);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPairedDevicesCreateFromExternalRepresentation(uint64_t a1)
{
  +[MRDeviceInfo deviceInfosFromData:](MRDeviceInfo, "deviceInfosFromData:", a1);
  return objc_claimAutoreleasedReturnValue();
}

void MRMediaRemoteGetDeviceInfo(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __MRMediaRemoteGetDeviceInfo_block_invoke;
    v7[3] = &unk_1E30CC130;
    v8 = v5;
    +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:](MRDeviceInfoRequest, "deviceInfoForOrigin:queue:completion:", a1, a2, v7);

  }
}

uint64_t MRMediaRemoteCopyCachedDeviceInfo(uint64_t a1)
{
  +[MRDeviceInfoRequest cachedDeviceInfoForOrigin:](MRDeviceInfoRequest, "cachedDeviceInfoForOrigin:", a1);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRMediaRemoteCopyDeviceInfo(uint64_t a1)
{
  +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", a1);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPairedDeviceCopyDescription(void *a1)
{
  objc_msgSend(a1, "description");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPairedDeviceCopyMinimalDescription(void *a1)
{
  objc_msgSend(a1, "minimalDescription");
  return objc_claimAutoreleasedReturnValue();
}

id MRPairedDevicesCopyDescription(const __CFArray *a1)
{
  id v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void *v6;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v4 = Count;
    for (i = 0; i != v4; ++i)
    {
      objc_msgSend((id)CFArrayGetValueAtIndex(a1, i), "description");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "appendString:", v6);

    }
  }
  return v2;
}

id MRPairedDevicesCopyMinimalDescription(const __CFArray *a1)
{
  id v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void *v6;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v4 = Count;
    for (i = 0; i != v4; ++i)
    {
      objc_msgSend((id)CFArrayGetValueAtIndex(a1, i), "minimalDescription");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "appendString:", v6);

    }
  }
  return v2;
}

uint64_t MRPairedDeviceCopyDeltaDescription(void *a1, uint64_t a2)
{
  objc_msgSend(a1, "deltaDescriptionFromDeviceInfo:", a2);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRPairedDeviceCopyDeltaMinimalDescription(void *a1, uint64_t a2)
{
  objc_msgSend(a1, "minimalDeltaDescriptionFromDeviceInfo:", a2);
  return objc_claimAutoreleasedReturnValue();
}

BOOL _MRGameControllerMotionProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRGameControllerAccelerationProtobuf *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_MRGameControllerAccelerationProtobuf);
        v18 = 16;
        goto LABEL_25;
      case 2u:
        v17 = objc_alloc_init(_MRGameControllerAccelerationProtobuf);
        v18 = 32;
        goto LABEL_25;
      case 3u:
        v17 = objc_alloc_init(_MRGameControllerAccelerationProtobuf);
        v18 = 8;
        goto LABEL_25;
      case 4u:
        v17 = objc_alloc_init(_MRGameControllerAccelerationProtobuf);
        v18 = 24;
LABEL_25:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (PBReaderPlaceMark()
          && (_MRGameControllerAccelerationProtobufReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_28:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_28;
    }
  }
}

uint64_t _MRSystemPlaybackQueueProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _MRSystemPlaybackCustomDataQueueProtobuf *v37;
  void *v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_55:
        v39 = 48;
        goto LABEL_60;
      case 2u:
        v23 = 0;
        v24 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 68) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v19 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_59:
        v39 = 32;
LABEL_60:
        *(_DWORD *)(a1 + v39) = v19;
        goto LABEL_65;
      case 3u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_64:
        *(_BYTE *)(a1 + 64) = v30 != 0;
        goto LABEL_65;
      case 4u:
        PBReaderReadString();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = 16;
        goto LABEL_51;
      case 6u:
        v37 = objc_alloc_init(_MRSystemPlaybackCustomDataQueueProtobuf);
        objc_storeStrong((id *)(a1 + 8), v37);
        if (!PBReaderPlaceMark() || !_MRSystemPlaybackCustomDataQueueProtobufReadFrom((uint64_t)v37, a2))
          goto LABEL_67;
        goto LABEL_48;
      case 7u:
        v37 = objc_alloc_init(_MRSystemPlaybackGenericTracklistQueueProtobuf);
        objc_storeStrong((id *)(a1 + 40), v37);
        if (PBReaderPlaceMark()
          && (_MRSystemPlaybackGenericTracklistQueueProtobufReadFrom((uint64_t)v37, a2) & 1) != 0)
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_65:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_67:

        return 0;
      case 8u:
        PBReaderReadData();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = 56;
        goto LABEL_51;
      case 9u:
        PBReaderReadData();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = 24;
LABEL_51:
        v38 = *(void **)(a1 + v35);
        *(_QWORD *)(a1 + v35) = v34;

        goto LABEL_65;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_65;
    }
  }
}

MRPlaybackSessionRequest *MRPlaybackSessionRequestCreate(uint64_t a1, uint64_t a2)
{
  return -[MRPlaybackSessionRequest initWithIdentifier:type:]([MRPlaybackSessionRequest alloc], "initWithIdentifier:type:", a1, a2);
}

uint64_t MRPlaybackSessionRequestCopyRequestID(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "requestIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPlaybackSessionRequestCopyIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "identifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPlaybackSessionRequestCopyType(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "type");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPlaybackSessionRequestCopyDescription(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "description");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRPlaybackSessionRequestCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

MRPlaybackSessionRequest *MRPlaybackSessionRequestCreateFromExternalRepresentation(uint64_t a1)
{
  return -[MRPlaybackSessionRequest initWithData:]([MRPlaybackSessionRequest alloc], "initWithData:", a1);
}

BOOL _MRGroupSessionJoinRequestProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRUserIdentityProtobuf *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (_MRUserIdentityProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend((id)a1, "addOobKeys:", v18);
        goto LABEL_27;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_MRUserIdentityProtobuf);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (_MRUserIdentityProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v19 = objc_claimAutoreleasedReturnValue();
    v18 = *(_MRUserIdentityProtobuf **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v19;
LABEL_27:

    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRLanguageOptionProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 44) |= 1u;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 32;
              goto LABEL_34;
            case 3u:
              PBReaderReadString();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              if (v26)
                objc_msgSend((id)a1, "addCharacteristics:", v26);

              goto LABEL_39;
            case 4u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 16;
              goto LABEL_34;
            case 5u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 24;
LABEL_34:
              v27 = *(void **)(a1 + v25);
              *(_QWORD *)(a1 + v25) = v24;

              goto LABEL_39;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_39:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_36;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_38;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_38:
          *(_DWORD *)(a1 + 40) = v19;
          goto LABEL_39;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1939BBC40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_MRAVRouteQueryProtobuf *MRAVRouteQueryCreate()
{
  return objc_alloc_init(_MRAVRouteQueryProtobuf);
}

_MRAVRouteQueryProtobuf *MRAVRouteQueryCreateFromExternalRepresentation(uint64_t a1)
{
  return -[_MRAVRouteQueryProtobuf initWithData:]([_MRAVRouteQueryProtobuf alloc], "initWithData:", a1);
}

uint64_t MRAVRouteQueryCreateExternalRepresentation(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "data");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRAVRouteQuerySetRouteUID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRouteUID:", a2);
}

void _onQueue_MRMediaRemoteSendShortCircutedContentItemArtworkUpdatedNotification(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  char *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t buf[4];
  const __CFString *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "isLocal"))
  {
    +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "existingPlayerClientRequestsForPlayerPath:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = -[MRPlaybackQueueRequest initFromTransactionName:]([MRPlaybackQueueRequest alloc], "initFromTransactionName:", 7);
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
    objc_msgSend(v6, "subscriptionController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = ___onQueue_MRMediaRemoteSendShortCircutedContentItemArtworkUpdatedNotification_block_invoke;
    v22[3] = &unk_1E30CC210;
    v10 = v7;
    v23 = v10;
    v11 = v8;
    v24 = v11;
    objc_msgSend(v9, "enumerateFilteredContentItemsBySubscriptionsForContentItems:block:", v3, v22);

    if (objc_msgSend(v11, "count"))
    {
      v12 = -[MRPlaybackQueueRequest initFromTransactionName:]([MRPlaybackQueueRequest alloc], "initFromTransactionName:", 0);
      v13 = (char *)MRContentItemsCreateFromRequest(v11, v12);
      if (objc_msgSend(v13, "count"))
      {
        v21 = v12;
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 2);
        MRAddContentItemsToUserInfo(v14, v13);
        objc_msgSend(v6, "playerPath");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        MRAddPlayerPathToUserInfo(v14, v15);

        _MRLogForCategory(1uLL);
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v6, "playerPath");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412802;
          v26 = CFSTR("kMRPlayerPlaybackQueueContentItemArtworkChangedNotification");
          v27 = 2114;
          v28 = v20;
          v29 = 2112;
          v30 = v13;
          _os_log_debug_impl(&dword_193827000, v16, OS_LOG_TYPE_DEBUG, "Sending short circuted notification %@ for %{public}@ %@", buf, 0x20u);

        }
        +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "notificationClient");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        MRCreateDecodedUserInfo(v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "dispatchNotification:userInfo:object:", CFSTR("kMRPlayerPlaybackQueueContentItemArtworkChangedNotification"), v19, 0);

        v12 = v21;
      }

    }
  }

}

void MRMediaRemotePlaybackQueueDataSourceContentItemChanged(uint64_t a1, uint64_t a2)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v2[0] = a1;
  MRMediaRemotePlaybackQueueDataSourceContentItemsChanged(objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 1), a2);
}

void MRMediaRemotePlaybackQueueDataSourceContentItemsChanged(uint64_t a1, uint64_t a2)
{
  MRPlayerPath *v3;

  v3 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, 0, 0);
  MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer(a1, v3);

}

void MRMediaRemotePlaybackQueueDataSourceContentItemChangedForPlayer(uint64_t a1, void *a2)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v2[0] = a1;
  MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer(objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 1), a2);
}

void MRMediaRemotePlaybackQueueDataSourceContentItemChangedWithRequest(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = a1;
  MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequest(objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1), a2, a3);
}

void MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequest(uint64_t a1, void *a2, uint64_t a3)
{
  MRPlayerPath *v5;

  v5 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a3, 0, 0);
  MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequestForPlayer(a1, a2, (uint64_t)v5);

}

void MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequestForPlayer(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;

  if (a1)
  {
    v5 = (void *)objc_msgSend(a2, "copy");
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:copyItems:", a1, 1);
    +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "playerClientForPlayerPath:", a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "playerPath");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "playbackQueueDispatchQueue");
      v11 = objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequestForPlayer_block_invoke;
      v13[3] = &unk_1E30C7328;
      v14 = v6;
      v15 = v5;
      v16 = v8;
      MRCreateDonatedQosBlock(v13);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      dispatch_sync(v11, v12);

    }
    else
    {
      MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer((uint64_t)v6, v9);
    }

  }
}

void MRMediaRemotePlaybackQueueDataSourceContentItemChangedWithRequestForPlayer(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = a1;
  MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequestForPlayer(objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1), a2, a3);
}

void _onQueue_MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequestForPlayer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  MRPlaybackQueueRequest *v16;
  void *v17;
  void *v18;
  MRPlaybackQueueRequest *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id obj;
  _QWORD v27[4];
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v25 = MRContentItemsCreateFromRequest(a1, v5);
  +[MRContentItem mergeContentItems:](MRContentItem, "mergeContentItems:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v30;
    obj = v7;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v30 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v11);
        objc_msgSend(v6, "subscriptionController");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "identifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "requestForSubscribedContentItemIdentifier:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = [MRPlaybackQueueRequest alloc];
        objc_msgSend(v12, "identifier");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = v17;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v33, 1);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = -[MRPlaybackQueueRequest initWithIdentifiers:](v16, "initWithIdentifiers:", v18);

        if (objc_msgSend(v5, "includeArtwork"))
        {
          MRContentItemSetArtworkData(v12, 0);
          objc_msgSend(v12, "setArtworks:", 0);
          objc_msgSend(v12, "setRemoteArtworks:", 0);
        }
        if (MRContentItemGetCurrentLanguageOptions(v12))
          v20 = MRContentItemGetAvailableLanguageOptions(v12) != 0;
        else
          v20 = 0;
        if (objc_msgSend(v15, "includeLanguageOptions")
          && ((objc_msgSend(v5, "includeLanguageOptions") ^ 1 | v20) & 1) == 0)
        {
          -[MRPlaybackQueueRequest setIncludeLanguageOptions:](v19, "setIncludeLanguageOptions:", 1);
        }
        if (objc_msgSend(v15, "includeLyrics")
          && objc_msgSend(v5, "includeLyrics")
          && !MRContentItemGetLyrics())
        {
          -[MRPlaybackQueueRequest setIncludeLyrics:](v19, "setIncludeLyrics:", 1);
        }
        if (objc_msgSend(v15, "includeInfo")
          && objc_msgSend(v5, "includeInfo")
          && !MRContentItemGetInfo(v12))
        {
          -[MRPlaybackQueueRequest setIncludeInfo:](v19, "setIncludeInfo:", 1);
        }
        if (objc_msgSend(v15, "includeSections")
          && objc_msgSend(v5, "includeSections")
          && !MRContentItemGetSections(v12))
        {
          -[MRPlaybackQueueRequest setIncludeSections:](v19, "setIncludeSections:", 1);
          -[MRPlaybackQueueRequest setIncludeMetadata:](v19, "setIncludeMetadata:", 1);
        }
        if (objc_msgSend(v15, "includeAlignments")
          && objc_msgSend(v5, "includeAlignments")
          && !MRContentItemGetTranscriptAlignments(v12))
        {
          -[MRPlaybackQueueRequest setIncludeAlignments:](v19, "setIncludeAlignments:", 1);
        }
        if (-[MRPlaybackQueueRequest shouldRequestItem](v19, "shouldRequestItem"))
        {
          objc_msgSend(v6, "playerPath");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "playbackQueueDispatchQueue");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v27[0] = MEMORY[0x1E0C809B0];
          v27[1] = 3221225472;
          v27[2] = ___onQueue_MRMediaRemotePlaybackQueueDataSourceContentItemsChangedWithRequestForPlayer_block_invoke;
          v27[3] = &unk_1E30C7FA0;
          v28 = v6;
          MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync(v19, v21, v23, v27);

        }
        ++v11;
      }
      while (v9 != v11);
      v7 = obj;
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v9);
  }
  objc_msgSend(v6, "playerPath");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  _onQueue_MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer(v7, v24);

  if (objc_msgSend(v5, "includeArtwork"))
    _onQueue_MRMediaRemoteSendContentItemArtworkUpdatedNotification(v7, v6);

}

uint64_t _MRCommandInfoProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t result;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  _MRPreloadedPlaybackSessionInfo *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    v18 = v10 & 7;
    if (v17 || v18 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 8u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_244;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            LODWORD(v22) = 0;
            goto LABEL_246;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_244:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_246:
        v180 = 148;
        goto LABEL_312;
      case 2u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_DWORD *)(a1 + 320) |= 0x200000u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              v15 = v28++ >= 9;
              if (v15)
              {
                v29 = 0;
                goto LABEL_250;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_250:
        v181 = v29 != 0;
        v182 = 313;
        goto LABEL_299;
      case 3u:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_DWORD *)(a1 + 320) |= 0x100000u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v15 = v35++ >= 9;
              if (v15)
              {
                v36 = 0;
                goto LABEL_254;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_254:
        v181 = v36 != 0;
        v182 = 312;
        goto LABEL_299;
      case 4u:
        if (v18 != 2)
        {
          v199 = *v3;
          v200 = *(_QWORD *)(a2 + v199);
          if (v200 <= 0xFFFFFFFFFFFFFFF7 && v200 + 8 <= *(_QWORD *)(a2 + *v4))
            *(_QWORD *)(a2 + v199) = v200 + 8;
          else
            *(_BYTE *)(a2 + v16) = 1;
          PBRepeatedDoubleAdd();
          goto LABEL_364;
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (1)
        {
          v144 = (unint64_t *)(a2 + *v3);
          v145 = *v144;
          v146 = *(_QWORD *)(a2 + *v4);
          if (*v144 >= v146)
            break;
          v147 = *v5;
          if (*(_BYTE *)(a2 + v147))
            break;
          if (v145 > 0xFFFFFFFFFFFFFFF7 || v145 + 8 > v146)
            *(_BYTE *)(a2 + v147) = 1;
          else
            *v144 = v145 + 8;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_208;
      case 5u:
        PBReaderReadString();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = 200;
        goto LABEL_187;
      case 6u:
        *(_DWORD *)(a1 + 320) |= 0x80u;
        v41 = *v3;
        v42 = *(_QWORD *)(a2 + v41);
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v42);
          *(_QWORD *)(a2 + v41) = v42 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v208 = 212;
        goto LABEL_356;
      case 7u:
        *(_DWORD *)(a1 + 320) |= 0x40u;
        v44 = *v3;
        v45 = *(_QWORD *)(a2 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v45);
          *(_QWORD *)(a2 + v44) = v45 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v208 = 208;
        goto LABEL_356;
      case 8u:
        if (v18 != 2)
        {
          v183 = *v3;
          v184 = *(_QWORD *)(a2 + v183);
          if (v184 <= 0xFFFFFFFFFFFFFFFBLL && v184 + 4 <= *(_QWORD *)(a2 + *v4))
            *(_QWORD *)(a2 + v183) = v184 + 4;
          else
            *(_BYTE *)(a2 + v16) = 1;
          PBRepeatedFloatAdd();
          goto LABEL_364;
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (1)
        {
          v47 = (unint64_t *)(a2 + *v3);
          v48 = *v47;
          v49 = *(_QWORD *)(a2 + *v4);
          if (*v47 >= v49)
            break;
          v50 = *v5;
          if (*(_BYTE *)(a2 + v50))
            break;
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > v49)
            *(_BYTE *)(a2 + v50) = 1;
          else
            *v47 = v48 + 4;
          PBRepeatedFloatAdd();
        }
        goto LABEL_208;
      case 9u:
        PBReaderReadString();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = 192;
        goto LABEL_187;
      case 0xAu:
        v149 = 0;
        v150 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x800u;
        while (2)
        {
          v151 = *v3;
          v152 = *(_QWORD *)(a2 + v151);
          v153 = v152 + 1;
          if (v152 == -1 || v153 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v154 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v152);
            *(_QWORD *)(a2 + v151) = v153;
            v22 |= (unint64_t)(v154 & 0x7F) << v149;
            if (v154 < 0)
            {
              v149 += 7;
              v15 = v150++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_303;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_303:
        v180 = 248;
        goto LABEL_312;
      case 0xBu:
        v51 = 0;
        v52 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x1000u;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v55;
            v22 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v15 = v52++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_258;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_258:
        v180 = 252;
        goto LABEL_312;
      case 0xCu:
        v57 = 0;
        v58 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x400u;
        while (2)
        {
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v60);
            *(_QWORD *)(a2 + v59) = v61;
            v22 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              v15 = v58++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_262;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_262:
        v180 = 236;
        goto LABEL_312;
      case 0xDu:
        v63 = 0;
        v64 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x4000u;
        while (2)
        {
          v65 = *v3;
          v66 = *(_QWORD *)(a2 + v65);
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v66);
            *(_QWORD *)(a2 + v65) = v67;
            v22 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              v15 = v64++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_266;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_266:
        v180 = 260;
        goto LABEL_312;
      case 0xEu:
        v69 = 0;
        v70 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x100u;
        while (2)
        {
          v71 = *v3;
          v72 = *(_QWORD *)(a2 + v71);
          v73 = v72 + 1;
          if (v72 == -1 || v73 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v72);
            *(_QWORD *)(a2 + v71) = v73;
            v22 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              v15 = v70++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_270;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_270:
        v180 = 216;
        goto LABEL_312;
      case 0xFu:
        v75 = 0;
        v76 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x2000u;
        while (2)
        {
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
            *(_QWORD *)(a2 + v77) = v79;
            v22 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              v15 = v76++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_274;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_274:
        v180 = 256;
        goto LABEL_312;
      case 0x10u:
        v81 = 0;
        v82 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 4u;
        while (2)
        {
          v83 = *v3;
          v84 = *(_QWORD *)(a2 + v83);
          v85 = v84 + 1;
          if (v84 == -1 || v85 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v84);
            *(_QWORD *)(a2 + v83) = v85;
            v22 |= (unint64_t)(v86 & 0x7F) << v81;
            if (v86 < 0)
            {
              v81 += 7;
              v15 = v82++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_278;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_278:
        v180 = 144;
        goto LABEL_312;
      case 0x11u:
        if (v18 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v155 = 0;
            v156 = 0;
            v157 = 0;
            while (1)
            {
              v158 = *v3;
              v159 = *(_QWORD *)(a2 + v158);
              v160 = v159 + 1;
              if (v159 == -1 || v160 > *(_QWORD *)(a2 + *v4))
                break;
              v161 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v159);
              *(_QWORD *)(a2 + v158) = v160;
              v157 |= (unint64_t)(v161 & 0x7F) << v155;
              if (v161 < 0)
              {
                v155 += 7;
                v15 = v156++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_207;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_207:
            PBRepeatedInt32Add();
          }
LABEL_208:
          PBReaderRecallMark();
        }
        else
        {
          v201 = 0;
          v202 = 0;
          v203 = 0;
          while (1)
          {
            v204 = *v3;
            v205 = *(_QWORD *)(a2 + v204);
            v206 = v205 + 1;
            if (v205 == -1 || v206 > *(_QWORD *)(a2 + *v4))
              break;
            v207 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v205);
            *(_QWORD *)(a2 + v204) = v206;
            v203 |= (unint64_t)(v207 & 0x7F) << v201;
            if (v207 < 0)
            {
              v201 += 7;
              v15 = v202++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_341;
          }
LABEL_340:
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_341:
          PBRepeatedInt32Add();
        }
        goto LABEL_364;
      case 0x12u:
        PBReaderReadString();
        v100 = (_MRPreloadedPlaybackSessionInfo *)objc_claimAutoreleasedReturnValue();
        if (v100)
          objc_msgSend((id)a1, "addSupportedCustomQueueIdentifier:", v100);
        goto LABEL_242;
      case 0x13u:
        if (v18 != 2)
        {
          v185 = 0;
          v186 = 0;
          v187 = 0;
          while (1)
          {
            v188 = *v3;
            v189 = *(_QWORD *)(a2 + v188);
            v190 = v189 + 1;
            if (v189 == -1 || v190 > *(_QWORD *)(a2 + *v4))
              goto LABEL_340;
            v191 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v189);
            *(_QWORD *)(a2 + v188) = v190;
            v187 |= (unint64_t)(v191 & 0x7F) << v185;
            if (v191 < 0)
            {
              v185 += 7;
              v15 = v186++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_341;
          }
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v87 = 0;
          v88 = 0;
          v89 = 0;
          while (1)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            v92 = v91 + 1;
            if (v91 == -1 || v92 > *(_QWORD *)(a2 + *v4))
              break;
            v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v91);
            *(_QWORD *)(a2 + v90) = v92;
            v89 |= (unint64_t)(v93 & 0x7F) << v87;
            if (v93 < 0)
            {
              v87 += 7;
              v15 = v88++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_109;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_109:
          PBRepeatedInt32Add();
        }
        goto LABEL_208;
      case 0x15u:
        v94 = 0;
        v95 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x10000u;
        while (2)
        {
          v96 = *v3;
          v97 = *(_QWORD *)(a2 + v96);
          v98 = v97 + 1;
          if (v97 == -1 || v98 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v99 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v97);
            *(_QWORD *)(a2 + v96) = v98;
            v22 |= (unint64_t)(v99 & 0x7F) << v94;
            if (v99 < 0)
            {
              v94 += 7;
              v15 = v95++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_282;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_282:
        v180 = 296;
        goto LABEL_312;
      case 0x16u:
        *(_DWORD *)(a1 + 320) |= 0x200u;
        v162 = *v3;
        v163 = *(_QWORD *)(a2 + v162);
        if (v163 <= 0xFFFFFFFFFFFFFFFBLL && v163 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v163);
          *(_QWORD *)(a2 + v162) = v163 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v208 = 232;
        goto LABEL_356;
      case 0x17u:
        PBReaderReadString();
        v100 = (_MRPreloadedPlaybackSessionInfo *)objc_claimAutoreleasedReturnValue();
        if (v100)
          objc_msgSend((id)a1, "addSupportedPlaybackSessionTypes:", v100);
        goto LABEL_242;
      case 0x18u:
        PBReaderReadString();
        v100 = (_MRPreloadedPlaybackSessionInfo *)objc_claimAutoreleasedReturnValue();
        if (v100)
          objc_msgSend((id)a1, "addCurrentPlaybackSessionTypes:", v100);
        goto LABEL_242;
      case 0x19u:
        PBReaderReadString();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = 224;
        goto LABEL_187;
      case 0x1Au:
        v103 = 0;
        v104 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x10u;
        while (2)
        {
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          v107 = v106 + 1;
          if (v106 == -1 || v107 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
            *(_QWORD *)(a2 + v105) = v107;
            v22 |= (unint64_t)(v108 & 0x7F) << v103;
            if (v108 < 0)
            {
              v103 += 7;
              v15 = v104++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_286;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_286:
        v180 = 160;
        goto LABEL_312;
      case 0x1Bu:
        if (v18 != 2)
        {
          v192 = 0;
          v193 = 0;
          v194 = 0;
          while (1)
          {
            v195 = *v3;
            v196 = *(_QWORD *)(a2 + v195);
            v197 = v196 + 1;
            if (v196 == -1 || v197 > *(_QWORD *)(a2 + *v4))
              goto LABEL_340;
            v198 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v196);
            *(_QWORD *)(a2 + v195) = v197;
            v194 |= (unint64_t)(v198 & 0x7F) << v192;
            if (v198 < 0)
            {
              v192 += 7;
              v15 = v193++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_341;
          }
        }
        result = PBReaderPlaceMark();
        if (!(_DWORD)result)
          return result;
        while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
        {
          v109 = 0;
          v110 = 0;
          v111 = 0;
          while (1)
          {
            v112 = *v3;
            v113 = *(_QWORD *)(a2 + v112);
            v114 = v113 + 1;
            if (v113 == -1 || v114 > *(_QWORD *)(a2 + *v4))
              break;
            v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
            *(_QWORD *)(a2 + v112) = v114;
            v111 |= (unint64_t)(v115 & 0x7F) << v109;
            if (v115 < 0)
            {
              v109 += 7;
              v15 = v110++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_141;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_141:
          PBRepeatedInt32Add();
        }
        goto LABEL_208;
      case 0x1Cu:
        v164 = 0;
        v165 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x20u;
        while (2)
        {
          v166 = *v3;
          v167 = *(_QWORD *)(a2 + v166);
          v168 = v167 + 1;
          if (v167 == -1 || v168 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v169 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v167);
            *(_QWORD *)(a2 + v166) = v168;
            v22 |= (unint64_t)(v169 & 0x7F) << v164;
            if (v169 < 0)
            {
              v164 += 7;
              v15 = v165++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_307;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_307:
        v180 = 176;
        goto LABEL_312;
      case 0x1Du:
        v100 = objc_alloc_init(_MRPreloadedPlaybackSessionInfo);
        objc_msgSend((id)a1, "addSupportedPlaybackSessionIdentifiers:", v100);
        if (!PBReaderPlaceMark() || (_MRPreloadedPlaybackSessionInfoReadFrom((uint64_t)v100, a2) & 1) == 0)
          goto LABEL_367;
        goto LABEL_241;
      case 0x1Eu:
        v100 = objc_alloc_init(_MRCommandOptionsProtobuf);
        objc_storeStrong((id *)(a1 + 240), v100);
        if (!PBReaderPlaceMark() || (_MRCommandOptionsProtobufReadFrom((uint64_t)v100, a2) & 1) == 0)
          goto LABEL_367;
        goto LABEL_241;
      case 0x1Fu:
        v116 = 0;
        v117 = 0;
        v118 = 0;
        *(_DWORD *)(a1 + 320) |= 0x800000u;
        while (2)
        {
          v119 = *v3;
          v120 = *(_QWORD *)(a2 + v119);
          v121 = v120 + 1;
          if (v120 == -1 || v121 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v122 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v120);
            *(_QWORD *)(a2 + v119) = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if (v122 < 0)
            {
              v116 += 7;
              v15 = v117++ >= 9;
              if (v15)
              {
                v118 = 0;
                goto LABEL_290;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v118 = 0;
LABEL_290:
        v181 = v118 != 0;
        v182 = 315;
        goto LABEL_299;
      case 0x20u:
        *(_DWORD *)(a1 + 320) |= 0x20000u;
        v123 = *v3;
        v124 = *(_QWORD *)(a2 + v123);
        if (v124 <= 0xFFFFFFFFFFFFFFFBLL && v124 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v124);
          *(_QWORD *)(a2 + v123) = v124 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v208 = 300;
        goto LABEL_356;
      case 0x21u:
        *(_DWORD *)(a1 + 320) |= 0x40000u;
        v125 = *v3;
        v126 = *(_QWORD *)(a2 + v125);
        if (v126 <= 0xFFFFFFFFFFFFFFFBLL && v126 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v126);
          *(_QWORD *)(a2 + v125) = v126 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v208 = 304;
        goto LABEL_356;
      case 0x22u:
        *(_DWORD *)(a1 + 320) |= 0x80000u;
        v170 = *v3;
        v171 = *(_QWORD *)(a2 + v170);
        if (v171 <= 0xFFFFFFFFFFFFFFFBLL && v171 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v171);
          *(_QWORD *)(a2 + v170) = v171 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v208 = 308;
LABEL_356:
        *(_DWORD *)(a1 + v208) = v43;
        goto LABEL_364;
      case 0x23u:
        v127 = 0;
        v128 = 0;
        v129 = 0;
        *(_DWORD *)(a1 + 320) |= 0x1000000u;
        while (2)
        {
          v130 = *v3;
          v131 = *(_QWORD *)(a2 + v130);
          v132 = v131 + 1;
          if (v131 == -1 || v132 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v133 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v131);
            *(_QWORD *)(a2 + v130) = v132;
            v129 |= (unint64_t)(v133 & 0x7F) << v127;
            if (v133 < 0)
            {
              v127 += 7;
              v15 = v128++ >= 9;
              if (v15)
              {
                v129 = 0;
                goto LABEL_294;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v129 = 0;
LABEL_294:
        v181 = v129 != 0;
        v182 = 316;
        goto LABEL_299;
      case 0x24u:
        *(_DWORD *)(a1 + 320) |= 2u;
        v172 = *v3;
        v173 = *(_QWORD *)(a2 + v172);
        if (v173 <= 0xFFFFFFFFFFFFFFF7 && v173 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v136 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v173);
          *(_QWORD *)(a2 + v172) = v173 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v136 = 0;
        }
        v209 = 136;
        goto LABEL_359;
      case 0x26u:
        v174 = 0;
        v175 = 0;
        v22 = 0;
        *(_DWORD *)(a1 + 320) |= 0x8000u;
        while (2)
        {
          v176 = *v3;
          v177 = *(_QWORD *)(a2 + v176);
          v178 = v177 + 1;
          if (v177 == -1 || v178 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v179 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v177);
            *(_QWORD *)(a2 + v176) = v178;
            v22 |= (unint64_t)(v179 & 0x7F) << v174;
            if (v179 < 0)
            {
              v174 += 7;
              v15 = v175++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_311;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_311:
        v180 = 264;
LABEL_312:
        *(_DWORD *)(a1 + v180) = v22;
        goto LABEL_364;
      case 0x27u:
        *(_DWORD *)(a1 + 320) |= 1u;
        v134 = *v3;
        v135 = *(_QWORD *)(a2 + v134);
        if (v135 <= 0xFFFFFFFFFFFFFFF7 && v135 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v136 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v135);
          *(_QWORD *)(a2 + v134) = v135 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v136 = 0;
        }
        v209 = 128;
LABEL_359:
        *(_QWORD *)(a1 + v209) = v136;
        goto LABEL_364;
      case 0x29u:
        v100 = objc_alloc_init(_MRDictionaryProtobuf);
        objc_storeStrong((id *)(a1 + 168), v100);
        if (PBReaderPlaceMark() && (_MRDictionaryProtobufReadFrom(v100, a2) & 1) != 0)
        {
LABEL_241:
          PBReaderRecallMark();
LABEL_242:

LABEL_364:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_367:

        return 0;
      case 0x2Au:
        PBReaderReadString();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = 184;
LABEL_187:
        v148 = *(void **)(a1 + v102);
        *(_QWORD *)(a1 + v102) = v101;

        goto LABEL_364;
      case 0x2Bu:
        v137 = 0;
        v138 = 0;
        v139 = 0;
        *(_DWORD *)(a1 + 320) |= 0x400000u;
        while (2)
        {
          v140 = *v3;
          v141 = *(_QWORD *)(a2 + v140);
          v142 = v141 + 1;
          if (v141 == -1 || v142 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v141);
            *(_QWORD *)(a2 + v140) = v142;
            v139 |= (unint64_t)(v143 & 0x7F) << v137;
            if (v143 < 0)
            {
              v137 += 7;
              v15 = v138++ >= 9;
              if (v15)
              {
                v139 = 0;
                goto LABEL_298;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v139 = 0;
LABEL_298:
        v181 = v139 != 0;
        v182 = 314;
LABEL_299:
        *(_BYTE *)(a1 + v182) = v181;
        goto LABEL_364;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_364;
    }
  }
}

BOOL _MRGetKeyboardSessionProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

double MRTimeUtilitiesGetProcessorTimeScale()
{
  if (MRTimeUtilitiesGetProcessorTimeScale_sOnceToken != -1)
    dispatch_once(&MRTimeUtilitiesGetProcessorTimeScale_sOnceToken, &__block_literal_global_73);
  return *(double *)&MRTimeUtilitiesGetProcessorTimeScale_timeScale;
}

unint64_t MRTimeUtilsGetCurrentNanoseconds()
{
  uint64_t v0;

  v0 = mach_absolute_time();
  if (MRTimeUtilitiesGetProcessorTimeScale_sOnceToken != -1)
    dispatch_once(&MRTimeUtilitiesGetProcessorTimeScale_sOnceToken, &__block_literal_global_73);
  return (unint64_t)(*(double *)&MRTimeUtilitiesGetProcessorTimeScale_timeScale * (double)v0);
}

unint64_t MRTimeUtilsGetCurrentMilliseconds()
{
  return (unint64_t)((double)MRTimeUtilsGetCurrentNanoseconds() * 0.000001);
}

unint64_t MRTimeUtilsGetCurrentSeconds()
{
  return (unint64_t)((double)(unint64_t)((double)MRTimeUtilsGetCurrentNanoseconds() * 0.000001) * 0.001);
}

uint64_t _MRCreateHostedEndpointResponseProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRMediaRemoteCommandInfoSetCommand(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setCommand:", a2);
}

uint64_t MRMediaRemoteCommandInfoSetEnabled(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setEnabled:", (_DWORD)a2 != 0);
}

uint64_t MRMediaRemoteCommandInfoCopyOptions(void *a1)
{
  objc_msgSend(a1, "options");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRMediaRemoteCommandInfoSetOptions(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setOptions:", a2);
}

BOOL MRMediaRemoteCommandInfoGetBooleanValueForKey(void *a1, uint64_t a2)
{
  return MRMediaRemoteCommandInfoGetIntegerValueForKey(a1, a2) != 0;
}

void MRMediaRemoteCommandInfoEnumerateSupportedCommandsWithHandler(void *a1, void *a2)
{
  void (**v3)(id, uint64_t, _QWORD);
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = a1;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        v3[2](v3, objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8), "command", (_QWORD)v9), *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8));
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

id MRMediaRemoteCommandInfoCopySupportedCommandsWithPredicate(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __MRMediaRemoteCommandInfoCopySupportedCommandsWithPredicate_block_invoke;
  v10[3] = &unk_1E30CC640;
  v12 = v3;
  v5 = v4;
  v11 = v5;
  v6 = v3;
  MRMediaRemoteCommandInfoEnumerateSupportedCommandsWithHandler(a1, v10);
  v7 = v11;
  v8 = v5;

  return v8;
}

uint64_t MRMediaRemoteCommandInfoSupportedCommandIsEnabled(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = a1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v8, "command", (_QWORD)v11) == a2 && (objc_msgSend(v8, "isEnabled") & 1) != 0)
        {
          v9 = 1;
          goto LABEL_12;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_12:

  return v9;
}

MRCommandInfo *MRMediaRemoteCommandInfoCreate()
{
  return objc_alloc_init(MRCommandInfo);
}

MRCommandInfo *MRMediaRemoteCommandInfoCreateFromExternalRepresentation(uint64_t a1, uint64_t a2)
{
  return -[MRCommandInfo initWithPropertyListData:]([MRCommandInfo alloc], "initWithPropertyListData:", a2);
}

uint64_t MRMediaRemoteCommandInfoCreateExternalRepresentation(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "propertyListData");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRMediaRemoteSupportedCommandsCreateFromExternalRepresentation(uint64_t a1)
{
  +[MRCommandInfo commandInfosFromData:](MRCommandInfo, "commandInfosFromData:", a1);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRMediaRemoteSupportedCommandsCreateExternalRepresentation(uint64_t a1)
{
  +[MRCommandInfo dataFromCommandInfos:](MRCommandInfo, "dataFromCommandInfos:", a1);
  return objc_claimAutoreleasedReturnValue();
}

void MRMediaRemotePostClientNotification(void *a1, void *a2)
{
  void *v4;
  id v5;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "service");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  MRMediaRemoteServicePostNotification(v5, a1, a2);
}

void MRMediaRemotePostDelayedNotification(void *a1, double a2)
{
  void *v4;
  id v5;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "service");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  MRMediaRemoteServicePostDelayedNotification(v5, a1, a2);
}

void MRMediaRemotePostOriginClientNotification(void *a1, uint64_t a2, void *a3)
{
  MRPlayerPath *v5;

  v5 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a2, 0, 0);
  MRMediaRemotePostPlayerClientNotification(a1, v5, a3);

}

void MRMediaRemotePostPlayerClientNotification(void *a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  if (a3)
  {
    v5 = (void *)objc_msgSend(a3, "mutableCopy");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;
  MRAddPlayerPathToUserInfo(v5, a2);
  MRMediaRemotePostClientNotification(a1, v6);

}

CFDataRef MRMediaRemoteCreateErrorExternalRepresentation(__CFError *a1)
{
  id v2;
  void *v3;
  void *v4;
  CFDictionaryRef v5;
  void *v6;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  id ErrorExternalRepresentation;
  void *v16;
  CFDataRef Data;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", CFErrorGetCode(a1));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("_kMRErrorRepErrorCodeKey"));

  CFErrorGetDomain(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("_kMRErrorRepErrorDomainKey"));
  v5 = CFErrorCopyUserInfo(a1);
  if (v5)
  {
    v19 = v4;
    v20 = v2;
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", -[__CFDictionary count](v5, "count"));
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v7 = v5;
    v8 = -[__CFDictionary countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (!v8)
      goto LABEL_20;
    v9 = v8;
    v10 = *(_QWORD *)v22;
    v11 = *MEMORY[0x1E0CB3388];
    while (1)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (CFPropertyListIsValid(v13, kCFPropertyListBinaryFormat_v1_0))
        {
          -[__CFDictionary objectForKey:](v7, "objectForKey:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v13, "isEqualToString:", v11))
          {
            ErrorExternalRepresentation = (id)MRMediaRemoteCreateErrorExternalRepresentation(v14);
LABEL_15:
            v16 = ErrorExternalRepresentation;
            if (ErrorExternalRepresentation)
            {
              objc_msgSend(v6, "setObject:forKey:", ErrorExternalRepresentation, v13);

            }
          }
          else if (CFPropertyListIsValid(v14, kCFPropertyListBinaryFormat_v1_0))
          {
            ErrorExternalRepresentation = v14;
            goto LABEL_15;
          }

          continue;
        }
      }
      v9 = -[__CFDictionary countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (!v9)
      {
LABEL_20:

        v2 = v20;
        if (objc_msgSend(v6, "count"))
          objc_msgSend(v20, "setObject:forKey:", v6, CFSTR("_kMRErrorRepErrorUserInfoKey"));

        v4 = v19;
        break;
      }
    }
  }
  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, kCFPropertyListBinaryFormat_v1_0, 0, 0);

  return Data;
}

const __CFData *MRMediaRemoteCreateErrorFromExternalRepresentation(const __CFData *result)
{
  const __CFAllocator *v1;
  void *v2;
  void *v3;
  CFIndex v4;
  __CFString *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *ErrorFromExternalRepresentation;
  CFErrorRef v12;

  if (result)
  {
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v2 = (void *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], result, 0, 0, 0);
    objc_msgSend(v2, "objectForKey:", CFSTR("_kMRErrorRepErrorCodeKey"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "unsignedIntegerValue");

    objc_msgSend(v2, "objectForKey:", CFSTR("_kMRErrorRepErrorDomainKey"));
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "objectForKey:", CFSTR("_kMRErrorRepErrorUserInfoKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v6, "mutableCopy");

    v8 = *MEMORY[0x1E0CB3388];
    objc_msgSend(v7, "objectForKey:", *MEMORY[0x1E0CB3388]);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    if (v9)
    {
      ErrorFromExternalRepresentation = (void *)MRMediaRemoteCreateErrorFromExternalRepresentation(v9);
      if (ErrorFromExternalRepresentation)
        objc_msgSend(v7, "setObject:forKey:", ErrorFromExternalRepresentation, v8);
      else
        objc_msgSend(v7, "removeObjectForKey:", v8);

    }
    v12 = CFErrorCreate(v1, v5, v4, (CFDictionaryRef)v7);

    return v12;
  }
  return result;
}

uint64_t MRMediaRemoteNowPlayingInfoIsEqual(void *a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (a1 == a2)
    return 1;
  v3 = (void *)objc_msgSend(a1, "mutableCopy");
  v4 = (void *)objc_msgSend(a2, "mutableCopy");
  if (v3)
    objc_msgSend(v3, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoContentItemIdentifier"));
  if (v4)
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoContentItemIdentifier"));
  v5 = objc_msgSend(v3, "MR_isEqualToNowPlayingInfo:", v4);

  return v5;
}

uint64_t MRMediaRemoteNowPlayingInfoIsEmpty(void *a1)
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 1;
  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoContentItemIdentifier"));
  objc_msgSend(v1, "removeObjectForKey:", CFSTR("kMRMediaRemoteNowPlayingInfoTimestamp"));
  v2 = objc_msgSend(v1, "count") == 0;

  return v2;
}

BOOL MRShouldUseLegacyMusicApplicationAsSystemMediaApp()
{
  CFPreferencesAppSynchronize(CFSTR("com.apple.mobileipod"));
  return CFPreferencesGetAppBooleanValue(CFSTR("SiriShouldRouteCommandsToLegacyMusicApplication"), CFSTR("com.apple.mobileipod"), 0) != 0;
}

uint64_t MRProcessIsMediaServerDaemon()
{
  if (MRProcessIsMediaServerDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaServerDaemon_onceToken, &__block_literal_global_16_2);
  return MRProcessIsMediaServerDaemon_isMediaServer;
}

uint64_t MRProcessIsAirPlayDaemon()
{
  if (MRProcessIsAirPlayDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsAirPlayDaemon_onceToken, &__block_literal_global_19_1);
  return MRProcessIsAirPlayDaemon_isDaemon;
}

uint64_t MRProcessIsUIService()
{
  if (MRProcessIsUIService_onceToken != -1)
    dispatch_once(&MRProcessIsUIService_onceToken, &__block_literal_global_20_0);
  return MRProcessIsUIService_isService;
}

uint64_t MRProcessIsHomePodCannedDemo()
{
  if (MRProcessIsHomePodCannedDemo_onceToken != -1)
    dispatch_once(&MRProcessIsHomePodCannedDemo_onceToken, &__block_literal_global_23);
  return MRProcessIsHomePodCannedDemo_isChannelDemo;
}

CFStringRef MRErrorCopyDescription(__CFError *Code)
{
  if (Code)
    Code = (__CFError *)CFErrorGetCode(Code);
  return MRMediaRemoteErrorCopyDescription((unint64_t)Code);
}

const __CFString *MRArrayCopySingleLineDescription(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void *, uint64_t);
  void *v10;
  id v11;
  id v12;

  if (!a1)
    return CFSTR("<null>");
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", CFSTR("{"));
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = __MRArrayCopySingleLineDescription_block_invoke;
  v10 = &unk_1E30CC668;
  v11 = v2;
  v12 = v1;
  v3 = v1;
  v4 = v2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", &v7);
  objc_msgSend(v4, "appendString:", CFSTR("}"), v7, v8, v9, v10);
  v5 = objc_msgSend(v4, "copy");

  return (const __CFString *)v5;
}

uint64_t MRMediaRemoteCreateErrorWithDescription(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithMRError:format:", a1, CFSTR("%@"), a2);
}

uint64_t MRMediaRemoteCreateErrorWithUserInfo(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithMRError:userInfo:", a1, a2);
}

BOOL MRMediaRemoteErrorIsInformational(void *a1)
{
  id v1;
  void *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("kMRMediaRemoteFrameworkErrorDomain"));

  v4 = v3 && objc_msgSend(v1, "code") >= 200 && objc_msgSend(v1, "code") < 300;
  return v4;
}

BOOL MRMediaRemoteErrorCodeIsInformational(uint64_t a1)
{
  return (unint64_t)(a1 - 200) < 0x64;
}

uint64_t MRMediaRemoteCopyApplicationEntitlements(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v3, "count"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CA5860], "applicationProxyForIdentifier:", a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "entitlementValuesForKeys:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
          objc_msgSend(v6, "objectForKey:", v12, (_QWORD)v16);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v13, v12);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v9);
    }

  }
  else
  {
    v4 = 0;
  }
  v14 = objc_msgSend(v4, "copy", (_QWORD)v16);

  return v14;
}

void MRMediaRemoteRequestDeviceUID(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  void *v16;
  _QWORD block[4];
  id v18;
  id v19;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteRequestDeviceUID(__strong dispatch_queue_t, void (^__strong)(CFStringRef))");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRUtility.m"), 687, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("queue"));

    if (v5)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteRequestDeviceUID(__strong dispatch_queue_t, void (^__strong)(CFStringRef))");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("MRUtility.m"), 688, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_3:
  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
  {
    v6 = (void *)MRMediaRemoteCopyDeviceUID();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MRMediaRemoteRequestDeviceUID_block_invoke;
    block[3] = &unk_1E30C6568;
    v18 = v6;
    v19 = v5;
    v7 = v6;
    v8 = v5;
    dispatch_async(v3, block);

  }
  else
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteRequestDeviceUID_block_invoke_2;
    v15[3] = &unk_1E30CC130;
    v16 = v5;
    v10 = v5;
    +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:](MRDeviceInfoRequest, "deviceInfoForOrigin:queue:completion:", v9, v3, v15);

    v7 = v16;
  }

}

uint64_t MRMediaRemoteCopyDeviceUID()
{
  int v0;
  void *v1;
  void *v2;
  uint64_t v3;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  v0 = MRProcessIsMediaRemoteDaemon_isDaemon;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_7;
  }
  +[MRDeviceInfoRequest cachedDeviceInfoForOrigin:](MRDeviceInfoRequest, "cachedDeviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
LABEL_7:
    objc_msgSend(v2, "deviceUID");
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  v3 = 0;
LABEL_8:

  return v3;
}

uint64_t MRMediaRemoteAirPlayReceiverCopyPairingIdentity()
{
  return 0;
}

void _MRMediaRemoteGetDeviceUIDWithRetryIntervals(void *a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  id *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  dispatch_time_t v19;
  NSObject *v20;
  _QWORD v21[4];
  id v22;
  unint64_t v23;
  double v24;
  _QWORD v25[4];
  NSObject *v26;
  id v27;
  id v28;
  unint64_t v29;
  _QWORD block[4];
  id v31;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (_MRMediaRemoteGetDeviceUIDWithRetryIntervals_onceToken != -1)
    dispatch_once(&_MRMediaRemoteGetDeviceUIDWithRetryIntervals_onceToken, &__block_literal_global_246);
  if (objc_msgSend(v7, "count") >= a2)
  {
    v12 = MEMORY[0x1E0C809B0];
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = ___MRMediaRemoteGetDeviceUIDWithRetryIntervals_block_invoke_2;
    v25[3] = &unk_1E30CC6B0;
    v11 = (id *)&v26;
    v26 = v8;
    v28 = v9;
    v29 = a2;
    v13 = v7;
    v27 = v13;
    v14 = MEMORY[0x194036C44](v25);
    v15 = (void *)v14;
    if (a2)
    {
      objc_msgSend(v13, "objectAtIndexedSubscript:", a2 - 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "doubleValue");
      v18 = v17;

      v19 = dispatch_time(0, (uint64_t)(v18 * 1000000000.0));
      v20 = _MRMediaRemoteGetDeviceUIDWithRetryIntervals_workerQueue;
      v21[0] = v12;
      v21[1] = 3221225472;
      v21[2] = ___MRMediaRemoteGetDeviceUIDWithRetryIntervals_block_invoke_249;
      v21[3] = &unk_1E30CC6D8;
      v23 = a2;
      v24 = v18;
      v22 = v15;
      dispatch_after(v19, v20, v21);

    }
    else
    {
      (*(void (**)(uint64_t))(v14 + 16))(v14);
    }

  }
  else
  {
    _MRLogForCategory(0);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      _MRMediaRemoteGetDeviceUIDWithRetryIntervals_cold_1(v7, v10);

    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___MRMediaRemoteGetDeviceUIDWithRetryIntervals_block_invoke_248;
    block[3] = &unk_1E30C6770;
    v11 = &v31;
    v31 = v9;
    dispatch_async(v8, block);
  }

}

void MRMediaRemoteGetDeviceUIDWithRetryIntervals(void *a1, void *a2, void *a3)
{
  _MRMediaRemoteGetDeviceUIDWithRetryIntervals(a1, 0, a2, a3);
}

uint64_t MRSupportsMediaControlReceiver()
{
  return 0;
}

void MRMediaRemoteRequestGroupUID(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD block[4];
  id v13;
  id v14;

  v3 = a1;
  v4 = a2;
  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
  {
    v5 = (void *)MRMediaRemoteCopyGroupUID();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MRMediaRemoteRequestGroupUID_block_invoke;
    block[3] = &unk_1E30C6568;
    v13 = v5;
    v14 = v4;
    v6 = v5;
    v7 = v4;
    dispatch_async(v3, block);

  }
  else
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __MRMediaRemoteRequestGroupUID_block_invoke_2;
    v10[3] = &unk_1E30CC130;
    v11 = v4;
    v9 = v4;
    +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:](MRDeviceInfoRequest, "deviceInfoForOrigin:queue:completion:", v8, v3, v10);

    v6 = v11;
  }

}

uint64_t MRMediaRemoteCopyGroupUID()
{
  int v0;
  void *v1;
  void *v2;
  uint64_t v3;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  v0 = MRProcessIsMediaRemoteDaemon_isDaemon;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_7;
  }
  +[MRDeviceInfoRequest cachedDeviceInfoForOrigin:](MRDeviceInfoRequest, "cachedDeviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
LABEL_7:
    objc_msgSend(v2, "groupUID");
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  MRMediaRemoteAirPlayReceiverCopyGroupIdentity();
  v3 = 0;
LABEL_8:

  return v3;
}

void MRMediaRemoteRequestAirPlayGroupUID(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD block[4];
  id v13;
  id v14;

  v3 = a1;
  v4 = a2;
  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
  {
    v5 = (void *)MRMediaRemoteCopyAirPlayGroupUID();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MRMediaRemoteRequestAirPlayGroupUID_block_invoke;
    block[3] = &unk_1E30C6568;
    v13 = v5;
    v14 = v4;
    v6 = v5;
    v7 = v4;
    dispatch_async(v3, block);

  }
  else
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __MRMediaRemoteRequestAirPlayGroupUID_block_invoke_2;
    v10[3] = &unk_1E30CC130;
    v11 = v4;
    v9 = v4;
    +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:](MRDeviceInfoRequest, "deviceInfoForOrigin:queue:completion:", v8, v3, v10);

    v6 = v11;
  }

}

uint64_t MRMediaRemoteCopyAirPlayGroupUID()
{
  int v0;
  void *v1;
  void *v2;
  uint64_t v3;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  v0 = MRProcessIsMediaRemoteDaemon_isDaemon;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_7;
  }
  +[MRDeviceInfoRequest cachedDeviceInfoForOrigin:](MRDeviceInfoRequest, "cachedDeviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
LABEL_7:
    objc_msgSend(v2, "airPlayGroupUID");
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  v3 = 0;
LABEL_8:

  return v3;
}

uint64_t MRMediaRemoteAirPlayReceiverCopyGroupIdentity()
{
  void *v0;
  int v1;

  +[MRUserSettings currentSettings](MRUserSettings, "currentSettings");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "supportMultiplayerHost");

  if (v1)
    objc_msgSend(0, "length");
  return 0;
}

uint64_t MRMediaRemoteAirPlayReceiverCopyAirPlayGroupIdentity()
{
  return 0;
}

uint64_t MRMediaRemoteAirPlayReceiverCopyAirPlayLeaderInfoData()
{
  return 0;
}

void MRMediaRemoteRequestIsGroupLeader(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  char IsGroupLeader;
  id *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  void *v16;
  _QWORD block[4];
  void *v18;
  char v19;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteRequestIsGroupLeader(__strong dispatch_queue_t, void (^__strong)(_Bool))");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRUtility.m"), 894, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("queue"));

    if (v5)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteRequestIsGroupLeader(__strong dispatch_queue_t, void (^__strong)(_Bool))");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("MRUtility.m"), 895, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

LABEL_3:
  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
  {
    IsGroupLeader = MRMediaRemoteGetIsGroupLeader();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MRMediaRemoteRequestIsGroupLeader_block_invoke;
    block[3] = &unk_1E30C65B8;
    v7 = &v18;
    v18 = v5;
    v19 = IsGroupLeader;
    v8 = v5;
    dispatch_async(v3, block);
  }
  else
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __MRMediaRemoteRequestIsGroupLeader_block_invoke_2;
    v15[3] = &unk_1E30CC130;
    v7 = &v16;
    v16 = v5;
    v10 = v5;
    +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:](MRDeviceInfoRequest, "deviceInfoForOrigin:queue:completion:", v9, v3, v15);

  }
}

uint64_t MRMediaRemoteGetIsGroupLeader()
{
  int v0;
  void *v1;
  void *v2;
  uint64_t v3;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  v0 = MRProcessIsMediaRemoteDaemon_isDaemon;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_7;
  }
  +[MRDeviceInfoRequest cachedDeviceInfoForOrigin:](MRDeviceInfoRequest, "cachedDeviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
LABEL_7:
    v3 = objc_msgSend(v2, "isGroupLeader");
    goto LABEL_8;
  }
  v3 = 1;
LABEL_8:

  return v3;
}

uint64_t MRMediaRemoteAirPlayReceiverGetIsGroupLeader()
{
  return 1;
}

void MRMediaRemoteRequestSenderDefaultGroupUID(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD block[4];
  id v13;
  id v14;

  v3 = a1;
  v4 = a2;
  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
  {
    v5 = (void *)MRMediaRemoteCopySenderDefaultGroupUID();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MRMediaRemoteRequestSenderDefaultGroupUID_block_invoke;
    block[3] = &unk_1E30C6568;
    v13 = v5;
    v14 = v4;
    v6 = v5;
    v7 = v4;
    dispatch_async(v3, block);

  }
  else
  {
    +[MROrigin localOrigin](MROrigin, "localOrigin");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __MRMediaRemoteRequestSenderDefaultGroupUID_block_invoke_2;
    v10[3] = &unk_1E30CC130;
    v11 = v4;
    v9 = v4;
    +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:](MRDeviceInfoRequest, "deviceInfoForOrigin:queue:completion:", v8, v3, v10);

    v6 = v11;
  }

}

uint64_t MRMediaRemoteCopySenderDefaultGroupUID()
{
  int v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  v0 = MRProcessIsMediaRemoteDaemon_isDaemon;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_7;
  }
  +[MRDeviceInfoRequest cachedDeviceInfoForOrigin:](MRDeviceInfoRequest, "cachedDeviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
LABEL_7:
    objc_msgSend(v2, "senderDefaultGroupUID");
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  v3 = (uint64_t)MRMediaRemoteCopyLocalAirPlaySenderDefaultGroupIdentity();
LABEL_8:
  v4 = v3;

  return v4;
}

void *MRMediaRemoteCopyLocalAirPlaySenderDefaultGroupIdentity()
{
  void *result;
  uint64_t v1;

  v1 = 0;
  if (AirPlaySupportLibrary_sOnce != -1)
    dispatch_once(&AirPlaySupportLibrary_sOnce, &__block_literal_global_372);
  if (!AirPlaySupportLibrary_sLib)
    return 0;
  result = dlsym((void *)AirPlaySupportLibrary_sLib, "APSCopyDefaultGroupUUID");
  if (result)
  {
    ((void (*)(uint64_t))softLinkAPSCopyDefaultGroupUUID[0])((uint64_t)&v1);
    return (void *)v1;
  }
  return result;
}

uint64_t MRMediaRemoteCopyLocalAirPlayReceiverTightSyncIdentity()
{
  return 0;
}

uint64_t MRMediaRemoteCopyLocalClusterID()
{
  uint64_t v0;
  void *v1;
  void *v2;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
    return 0;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "clusterID");
  v0 = objc_claimAutoreleasedReturnValue();

  return v0;
}

uint64_t MRMediaRemoteCopyLocalClusterLeaderIdentity()
{
  uint64_t v0;
  void *v1;
  void *v2;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
    return 0;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "clusterLeaderID");
  v0 = objc_claimAutoreleasedReturnValue();

  return v0;
}

uint64_t MRMediaRemoteCopyLocalAirPlayReceiverClusterType()
{
  void *v1;
  void *v2;
  uint64_t v3;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon)
    return 0;
  +[MROrigin localOrigin](MROrigin, "localOrigin");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[MRDeviceInfoRequest deviceInfoForOrigin:](MRDeviceInfoRequest, "deviceInfoForOrigin:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = objc_msgSend(v2, "clusterType");
  return v3;
}

uint64_t MRMediaRemoteGetLocalClusterSize()
{
  return 0;
}

uint64_t MRMediaRemoteIsClusterLeader()
{
  return 1;
}

uint64_t MRMediaRemoteSetClusterLeader()
{
  return 0;
}

uint64_t MRMediaRemoteGetLocalIsProxyGroupPlayer()
{
  return 1;
}

uint64_t MRMediaRemoteGetLocalGroupContainsDiscoverableGroupLeader()
{
  return 1;
}

uint64_t MRMediaRemoteGetParentGroupContainsDiscoverableGroupLeader()
{
  return 1;
}

uint64_t MRMediaRemoteCopyLocalAirPlayGroupName()
{
  return 0;
}

uint64_t MRMediaRemoteGetIsAirPlayActive()
{
  return 0;
}

BOOL MRMediaRemoteAVOutputDeviceIsLocalForAirPlay(void *a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a1, "airPlayProperties");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("IsLocalDevice"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

id MRMediaRemoteAddVirtualOutputDevice(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v4 = (void *)MRGetSharedService();
  v5 = MRMediaRemoteServiceAddVirtualOutputDevice(v4, a1, v3);

  return v5;
}

uint64_t MRMediaRemoteCopyVirtualOutputDevices()
{
  void *v0;

  if (MRProcessIsMediaRemoteDaemon_onceToken != -1)
    dispatch_once(&MRProcessIsMediaRemoteDaemon_onceToken, &__block_literal_global_75);
  if (MRProcessIsMediaRemoteDaemon_isDaemon || !_os_feature_enabled_impl())
    return 0;
  v0 = (void *)MRGetSharedService();
  MRMediaRemoteServiceCopyVirtualOutputDevices(v0);
  return objc_claimAutoreleasedReturnValue();
}

const __CFString *MRMediaRemoteCopyReadableDictionaryDescription(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;

  if (!a1)
    return CFSTR("NULL");
  v1 = (void *)MEMORY[0x1E0CB37A0];
  v2 = a1;
  objc_msgSend(v1, "string");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendFormat:", CFSTR("<NSCFDictionary %p {"), v2);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRMediaRemoteCopyReadableDictionaryDescription_block_invoke;
  v7[3] = &unk_1E30CA498;
  v8 = v3;
  v4 = v3;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v7);

  objc_msgSend(v4, "appendString:", CFSTR("\n}>"));
  v5 = objc_msgSend(v4, "copy");

  return (const __CFString *)v5;
}

uint64_t MRDataCreateStringRepresentation(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    return 0;
  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") < 5)
  {
    objc_msgSend(v1, "description");
    v8 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = (void *)MEMORY[0x1E0C99D50];
    v3 = objc_retainAutorelease(v1);
    objc_msgSend(v2, "dataWithBytesNoCopy:length:freeWhenDone:", objc_msgSend(v3, "bytes"), 4, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0C99D50];
    v6 = objc_retainAutorelease(v3);
    objc_msgSend(v5, "dataWithBytesNoCopy:length:freeWhenDone:", objc_msgSend(v6, "bytes") + objc_msgSend(v6, "length") - 4, 4, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@...%@:%lu bytes"), v4, v7, objc_msgSend(v6, "length"));
    v8 = objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

uint64_t MRCopyMediaRemoteLibraryDirectory()
{
  uint64_t v0;
  __CFString *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  MSVMobileHomeDirectory();
  v0 = objc_claimAutoreleasedReturnValue();
  if (v0)
    v1 = (__CFString *)v0;
  else
    v1 = CFSTR("~");
  v2 = (void *)MEMORY[0x1E0CB3940];
  v8[0] = v1;
  v8[1] = CFSTR("Library");
  v8[2] = CFSTR("MediaRemote");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pathWithComponents:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v4, 1, 0, 0);

  v6 = objc_msgSend(v4, "copy");
  return v6;
}

uint64_t MRCopyDeviceInfoPath()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MRCopyMediaRemoteLibraryDirectory();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("MediaRemoteTelevisionDeviceInfoIdentifier.plist"));
  v1 = objc_claimAutoreleasedReturnValue();

  return v1;
}

CFStringRef MRCreateASCIIRepresentationFromImageData(const __CFData *a1)
{
  CGImageSource *v1;
  CGImage *ImageAtIndex;
  double Width;
  size_t Height;
  double v5;
  double v6;
  double v7;
  CGColorSpace *DeviceGray;
  CGContext *v10;
  unsigned __int8 *Data;
  size_t BytesPerRow;
  double v13;
  unint64_t v14;
  const UInt8 *v15;
  const UInt8 *v16;
  uint64_t v17;
  const UInt8 *v18;
  uint64_t v19;
  unsigned int v20;
  CGRect v21;

  if (!a1)
    return 0;
  v1 = CGImageSourceCreateWithData(a1, 0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v1, 0, 0);
  if (v1)
    CFRelease(v1);
  Width = (double)CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  v5 = 350.0 / Width;
  if (350.0 / Width >= 650.0 / (double)Height)
    v5 = 650.0 / (double)Height;
  v6 = ceil(v5 * Width / 7.0);
  if (v6 == 0.0 || (v7 = ceil(v5 * (double)Height / 13.0), v7 == 0.0))
  {
    CGImageRelease(ImageAtIndex);
    return 0;
  }
  DeviceGray = CGColorSpaceCreateDeviceGray();
  v10 = CGBitmapContextCreate(0, (unint64_t)v6, (unint64_t)v7, 8uLL, 0, DeviceGray, 0);
  CGColorSpaceRelease(DeviceGray);
  CGContextSaveGState(v10);
  v21.origin.x = 0.0;
  v21.origin.y = 0.0;
  v21.size.width = v6;
  v21.size.height = v7;
  CGContextDrawImage(v10, v21, ImageAtIndex);
  CGContextRestoreGState(v10);
  Data = (unsigned __int8 *)CGBitmapContextGetData(v10);
  BytesPerRow = CGBitmapContextGetBytesPerRow(v10);
  v13 = v6 + 1.0;
  v14 = vcvtd_n_u64_f64(v7 * (double)(unint64_t)(v6 + 1.0), 2uLL);
  v15 = (const UInt8 *)malloc_type_malloc(v14, 0x663D2198uLL);
  v16 = v15;
  if (v7 > 0.0)
  {
    v17 = 0;
    v18 = v15;
    do
    {
      if (v6 > 0.0)
      {
        v19 = 0;
        do
        {
          v20 = Data[v19] / 0x19u;
          if (v20 >= 9)
            v20 = 9;
          *(_DWORD *)&v18[4 * v19++] = _MRCharacterForBrightness_chars[v20];
        }
        while (v6 > (double)(int)v19);
      }
      *(_DWORD *)&v15[4 * ++v17 * (unint64_t)v13 - 4] = 10;
      v18 += 4 * (unint64_t)v13;
      Data += BytesPerRow;
    }
    while (v7 > (double)(int)v17);
  }
  CGContextRelease(v10);
  CGImageRelease(ImageAtIndex);
  return CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, v14, 0x1C000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
}

id MRCreateIndentedDebugDescriptionFromDictionary(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __MRCreateIndentedDebugDescriptionFromDictionary_block_invoke;
    v8[3] = &unk_1E30CA498;
    v3 = v2;
    v9 = v3;
    objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v8);
    objc_msgSend(v3, "addObject:", CFSTR("}"));

  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR("\n"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  MRCreateFormattedDebugDescriptionFromClass(v1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  MRCreateIndentedDebugDescriptionFromObject(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

BOOL MRGetDiscoveryDebugEnabled()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("DiscoveryDebugEnabled"), CFSTR("com.apple.mobileipod"), 0) != 0;
}

void MRInvalidateTransactions()
{
  if (_MRRegisteredTransactionsInitialize_onceToken != -1)
    dispatch_once(&_MRRegisteredTransactionsInitialize_onceToken, &__block_literal_global_374);
  dispatch_async((dispatch_queue_t)__registeredTransactionsQueue, &__block_literal_global_340);
}

id MRCopyRegisteredTransactionDescriptions()
{
  void *v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  id v8;

  if (_MRRegisteredTransactionsInitialize_onceToken != -1)
    dispatch_once(&_MRRegisteredTransactionsInitialize_onceToken, &__block_literal_global_374);
  v3 = 0;
  v4 = &v3;
  v5 = 0x3032000000;
  v6 = __Block_byref_object_copy__31;
  v7 = __Block_byref_object_dispose__31;
  v8 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MRCopyRegisteredTransactionDescriptions_block_invoke;
  block[3] = &unk_1E30CC300;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)__registeredTransactionsQueue, block);
  v0 = (void *)objc_msgSend((id)v4[5], "copy");
  _Block_object_dispose(&v3, 8);

  return v0;
}

void sub_1939CBA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRIsObjectOfClass(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (MSVDeviceOSIsInternalInstall())
  {
    if (v3 && (objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL MRIsObjectOfClass(NSObject *__strong, __unsafe_unretained Class)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRUtility.m"), 1617, CFSTR("Type mismatch, expecting %@ found %@"), a2, objc_opt_class());

    }
    goto LABEL_7;
  }
  if (!v3 || (objc_opt_isKindOfClass() & 1) != 0)
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  _MRLogForCategory(0);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v10 = v3;
    v11 = 2112;
    v12 = a2;
    _os_log_impl(&dword_193827000, v8, OS_LOG_TYPE_DEFAULT, "Type mismatch, expecting %@ found %@", buf, 0x16u);
  }

  v6 = 0;
LABEL_8:

  return v6;
}

void MRPerformAsyncOperationsUntilError(void *a1, void *a2)
{
  id v3;
  id v4;
  void (**v5)(_QWORD, _QWORD);
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "firstObject");
  v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __MRPerformAsyncOperationsUntilError_block_invoke;
    v6[3] = &unk_1E30C75E8;
    v7 = v3;
    v8 = v4;
    ((void (**)(_QWORD, _QWORD *))v5)[2](v5, v6);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

id MRComputeBaseGroupID(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v5 = 0;
    softLinkAPSParseGroupID((uint64_t)v1, 0, 0, 0, (uint64_t)&v5);
    v3 = v5;
    if (!v5)
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id MRComputeGroupContextID(id a1)
{
  id v2;

  if (a1)
  {
    v2 = 0;
    softLinkAPSParseGroupID((uint64_t)a1, 0, 0, (uint64_t)&v2, 0);
    a1 = v2;
  }
  return a1;
}

__CFString *MRCopyDeviceName()
{
  __CFString *v0;

  if (objc_msgSend(MEMORY[0x1E0D4D070], "hasBoolEntitlement:", CFSTR("com.apple.developer.device-information.user-assigned-device-name")))v0 = (__CFString *)MGCopyAnswer();
  else
    v0 = (__CFString *)MSVCopyLocalizedModelName();
  if (!v0)
    v0 = CFSTR("Unknown");
  return v0;
}

void MRProcessIDForApplication(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  NSObject *v14;
  id v15;
  id v16;
  _QWORD block[4];
  id v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v7)
  {
    if (v6)
    {
      if (v5)
      {
LABEL_4:
        v8 = objc_alloc(MEMORY[0x1E0CFE2F0]);
        v19[0] = v5;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = (void *)objc_msgSend(v8, "initWithBundleIDs:states:", v9, *MEMORY[0x1E0CFE290]);

        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 3221225472;
        v13[2] = __MRProcessIDForApplication_block_invoke_2;
        v13[3] = &unk_1E30CC7D8;
        v14 = v6;
        v15 = v10;
        v16 = v7;
        v11 = v10;
        objc_msgSend(v11, "applicationInfoForApplication:completion:", v5, v13);

LABEL_7:
        goto LABEL_8;
      }
    }
    else
    {
      v6 = MEMORY[0x1E0C80D38];
      v12 = MEMORY[0x1E0C80D38];
      if (v5)
        goto LABEL_4;
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MRProcessIDForApplication_block_invoke;
    block[3] = &unk_1E30C6770;
    v18 = v7;
    dispatch_async(v6, block);
    v11 = v18;
    goto LABEL_7;
  }
LABEL_8:

}

uint64_t initAPSCopyDefaultGroupUUID(uint64_t a1)
{
  if (AirPlaySupportLibrary_sOnce != -1)
    dispatch_once(&AirPlaySupportLibrary_sOnce, &__block_literal_global_372);
  softLinkAPSCopyDefaultGroupUUID[0] = (uint64_t (*)())dlsym((void *)AirPlaySupportLibrary_sLib, "APSCopyDefaultGroupUUID");
  return ((uint64_t (*)(uint64_t))softLinkAPSCopyDefaultGroupUUID[0])(a1);
}

uint64_t initAPSParseGroupID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AirPlaySupportLibrary_sOnce != -1)
    dispatch_once(&AirPlaySupportLibrary_sOnce, &__block_literal_global_372);
  softLinkAPSParseGroupID = (uint64_t (*)())dlsym((void *)AirPlaySupportLibrary_sLib, "APSParseGroupID");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkAPSParseGroupID)(a1, a2, a3, a4, a5);
}

id MRTransactionPacketsGetShallowCopy(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "copy", (_QWORD)v10);
        objc_msgSend(v2, "addObject:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

void sub_1939CE87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1939CEA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id MRTransactionNameGetDescription(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 > 0xB)
    return 0;
  -[__CFString stringByAppendingString:](off_1E30CCF28[a1], "stringByAppendingString:", CFSTR("Transaction"), v1, v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1939CEEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id MRTransactionPacketsCreateExternalRepresentation(void *a1)
{
  id v1;
  void *v2;
  _MRTransactionPacketsProtobuf *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    v3 = objc_alloc_init(_MRTransactionPacketsProtobuf);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v8), "protobuf", (_QWORD)v12);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          -[_MRTransactionPacketsProtobuf addPackets:](v3, "addPackets:", v9);

          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

    -[_MRTransactionPacketsProtobuf data](v3, "data");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id MRTransactionPacketsGetKeys(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v8, "key", (_QWORD)v16);
        v9 = objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          v10 = (void *)v9;
          objc_msgSend(v8, "key");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "identifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (v12)
          {
            objc_msgSend(v8, "key");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "identifier");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v2, "addObject:", v14);

          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v5);
  }

  return v2;
}

id MRTransactionPacketsCreateFromExternalRepresentation(void *a1)
{
  id v1;
  id v2;
  _MRTransactionPacketsProtobuf *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  MRTransactionPacket *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = -[_MRTransactionPacketsProtobuf initWithData:]([_MRTransactionPacketsProtobuf alloc], "initWithData:", v1);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[_MRTransactionPacketsProtobuf packets](v3, "packets", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = -[MRTransactionPacket initWithProtobuf:]([MRTransactionPacket alloc], "initWithProtobuf:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8));
        objc_msgSend(v2, "addObject:", v9);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v2;
}

void OUTLINED_FUNCTION_0_12(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

const __CFString *NSStringFromMRClientVisibility(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Undefined");
  else
    return off_1E30CCF88[a1 - 1];
}

uint64_t MRMediaRemoteCommandToProtobuf(uint64_t a1)
{
  int v2;
  uint64_t result;

  v2 = a1;
  result = 1;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      result = 2;
      break;
    case 2:
      result = 3;
      break;
    case 3:
      result = 4;
      break;
    case 4:
      result = 5;
      break;
    case 5:
      result = 6;
      break;
    case 6:
      result = 7;
      break;
    case 7:
      result = 8;
      break;
    case 8:
      result = 9;
      break;
    case 9:
      result = 10;
      break;
    case 10:
      result = 11;
      break;
    case 11:
      result = 12;
      break;
    case 12:
      result = 13;
      break;
    case 13:
      result = 14;
      break;
    case 14:
      result = 15;
      break;
    case 15:
      result = 16;
      break;
    case 17:
      result = 18;
      break;
    case 18:
      result = 19;
      break;
    case 19:
      result = 20;
      break;
    case 20:
      result = 21;
      break;
    case 21:
      result = 22;
      break;
    case 22:
      result = 23;
      break;
    case 23:
      result = 24;
      break;
    case 24:
      result = 45;
      break;
    case 25:
      result = 46;
      break;
    case 26:
      result = 47;
      break;
    case 27:
      result = 53;
      break;
    case 28:
      result = 54;
      break;
    case 100:
      result = 25;
      break;
    case 101:
      result = 26;
      break;
    case 102:
      result = 27;
      break;
    case 103:
      result = 28;
      break;
    case 104:
      result = 29;
      break;
    case 105:
      result = 30;
      break;
    case 106:
      result = 31;
      break;
    case 107:
      result = 32;
      break;
    case 108:
      result = 33;
      break;
    case 109:
      result = 34;
      break;
    case 110:
      result = 35;
      break;
    case 116:
      result = 41;
      break;
    case 121:
      result = 50;
      break;
    case 122:
      result = 48;
      break;
    case 124:
    case 135:
    case 142:
    case 143:
    case 144:
    case 145:
      result = a1;
      break;
    case 125:
      result = 52;
      break;
    case 127:
      result = 49;
      break;
    case 128:
      result = 51;
      break;
    case 129:
      result = 56;
      break;
    case 130:
      result = 55;
      break;
    case 131:
      result = 57;
      break;
    case 132:
      result = 58;
      break;
    case 133:
      result = 59;
      break;
    case 134:
      result = 63;
      break;
    case 136:
      result = 60;
      break;
    case 137:
      result = 61;
      break;
    case 138:
      result = 62;
      break;
    case 139:
      result = 64;
      break;
    case 140:
      result = 65;
      break;
    default:
      if ((a1 - 25000) >= 0x124F8)
        result = 0;
      else
        result = a1;
      break;
  }
  return result;
}

uint64_t MRMediaRemoteCommandFromProtobuf(uint64_t a1)
{
  int v2;
  uint64_t result;

  v2 = a1;
  result = 0;
  switch(v2)
  {
    case 0:
      result = 0xFFFFFFFFLL;
      break;
    case 1:
      return result;
    case 2:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 4;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 6;
      break;
    case 8:
      result = 7;
      break;
    case 9:
      result = 8;
      break;
    case 10:
      result = 9;
      break;
    case 11:
      result = 10;
      break;
    case 12:
      result = 11;
      break;
    case 13:
      result = 12;
      break;
    case 14:
      result = 13;
      break;
    case 15:
      result = 14;
      break;
    case 16:
      result = 15;
      break;
    case 18:
      result = 17;
      break;
    case 19:
      result = 18;
      break;
    case 20:
      result = 19;
      break;
    case 21:
      result = 20;
      break;
    case 22:
      result = 21;
      break;
    case 23:
      result = 22;
      break;
    case 24:
      result = 23;
      break;
    case 25:
      result = 100;
      break;
    case 26:
      result = 101;
      break;
    case 27:
      result = 102;
      break;
    case 28:
      result = 103;
      break;
    case 29:
      result = 104;
      break;
    case 30:
      result = 105;
      break;
    case 31:
      result = 106;
      break;
    case 32:
      result = 107;
      break;
    case 33:
      result = 108;
      break;
    case 34:
      result = 109;
      break;
    case 35:
      result = 110;
      break;
    case 41:
      result = 116;
      break;
    case 45:
      result = 24;
      break;
    case 46:
      result = 25;
      break;
    case 47:
      result = 26;
      break;
    case 48:
      result = 122;
      break;
    case 49:
      result = 127;
      break;
    case 50:
      result = 121;
      break;
    case 51:
      result = 128;
      break;
    case 52:
      result = 125;
      break;
    case 53:
      result = 27;
      break;
    case 54:
      result = 28;
      break;
    case 55:
      result = 130;
      break;
    case 56:
      result = 129;
      break;
    case 57:
      result = 131;
      break;
    case 58:
      result = 132;
      break;
    case 59:
      result = 133;
      break;
    case 60:
      result = 136;
      break;
    case 61:
      result = 137;
      break;
    case 62:
      result = 138;
      break;
    case 63:
      result = 134;
      break;
    case 64:
      result = 139;
      break;
    case 65:
      result = 140;
      break;
    case 124:
    case 135:
    case 142:
    case 143:
    case 144:
    case 145:
      result = a1;
      break;
    default:
      if ((a1 - 25000) >= 0x124F8)
        result = 0xFFFFFFFFLL;
      else
        result = a1;
      break;
  }
  return result;
}

id MRMediaRemoteCommandOptionsToProtobuf(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _MRMediaRemoteCommandOptionsSerialization();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "createProtobufFromDictionary:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _MRMediaRemoteCommandOptionsSerialization()
{
  if (_MRMediaRemoteCommandOptionsSerialization___onceToken != -1)
    dispatch_once(&_MRMediaRemoteCommandOptionsSerialization___onceToken, &__block_literal_global_76);
  return (id)_MRMediaRemoteCommandOptionsSerialization___serialization;
}

id MRMediaRemoteCommandOptionsFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _MRMediaRemoteCommandOptionsSerialization();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "createDictionaryFromProtobuf:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t MRMediaRemoteRepeatModeToProtobuf(uint64_t result)
{
  if ((result - 1) >= 3)
    return 0;
  else
    return result;
}

uint64_t MRMediaRemoteRepeatModeFromProtobuf(uint64_t result)
{
  if ((result - 1) >= 3)
    return 0;
  else
    return result;
}

uint64_t MRMediaRemoteShuffleModeToProtobuf(uint64_t result)
{
  if ((result - 1) >= 3)
    return 0;
  else
    return result;
}

uint64_t MRMediaRemoteShuffleModeFromProtobuf(uint64_t result)
{
  if ((result - 1) >= 3)
    return 0;
  else
    return result;
}

_MRSupportedCommandsProtobuf *MRCreateProtobufFromSupportedCommands(void *a1)
{
  id v1;
  _MRSupportedCommandsProtobuf *v2;
  void *v3;
  void *v4;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = objc_alloc_init(_MRSupportedCommandsProtobuf);
  objc_msgSend(v1, "mr_map:", &__block_literal_global_182_0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)objc_msgSend(v3, "mutableCopy");
  -[_MRSupportedCommandsProtobuf setSupportedCommands:](v2, "setSupportedCommands:", v4);

  return v2;
}

uint64_t MRCreateSupportedCommandsFromProtobuf(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "supportedCommands");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "mr_map:", &__block_literal_global_184);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "mutableCopy");

  return v3;
}

id _MRNowPlayingInfoDictionaryKeyToProtobufKeyMapping()
{
  if (_MRNowPlayingInfoDictionaryKeyToProtobufKeyMapping_onceToken != -1)
    dispatch_once(&_MRNowPlayingInfoDictionaryKeyToProtobufKeyMapping_onceToken, &__block_literal_global_186);
  return (id)_MRNowPlayingInfoDictionaryKeyToProtobufKeyMapping___mapping;
}

id _MRNowPlayingInfoSerialization()
{
  if (_MRNowPlayingInfoSerialization___onceToken != -1)
    dispatch_once(&_MRNowPlayingInfoSerialization___onceToken, &__block_literal_global_215);
  return (id)_MRNowPlayingInfoSerialization___serialization;
}

uint64_t MRCreateProtobufFromNowPlayingInfo(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  _MRNowPlayingInfoSerialization();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "createProtobufFromDictionary:", v1);
  v3 = objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t MRCreateNowPlayingInfoFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  _MRNowPlayingInfoSerialization();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "createDictionaryFromProtobuf:", v1);
  v3 = objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t MRProtobufFromGameControllerInputMode(char a1)
{
  return a1 & 7;
}

uint64_t MRGameControllerInputModeFromProtobuf(char a1)
{
  return a1 & 7;
}

uint64_t MRProtobufFromGameControllerProfile(int a1)
{
  if (a1 == 2)
    return 2;
  else
    return a1 == 1;
}

uint64_t MRGameControllerProfileFromProtobuf(int a1)
{
  if (a1 == 1)
    return 1;
  else
    return 2 * (a1 == 2);
}

uint64_t MRProtobufFromConnectionState(uint64_t result)
{
  if ((result - 1) >= 3)
    return 0;
  else
    return result;
}

uint64_t MRConnectionStateFromProtobuf(uint64_t result)
{
  if ((result - 1) >= 3)
    return 0;
  else
    return result;
}

_MRReceivedCommandAppOptionsProtobuf *MRProtobufFromSendCommandAppOptions(char a1)
{
  _MRReceivedCommandAppOptionsProtobuf *v2;

  v2 = objc_alloc_init(_MRReceivedCommandAppOptionsProtobuf);
  -[_MRReceivedCommandAppOptionsProtobuf setLaunchApplication:](v2, "setLaunchApplication:", a1 & 1);
  return v2;
}

uint64_t MRSendCommandAppOptionsFromProtobuf(void *a1)
{
  return objc_msgSend(a1, "launchApplication");
}

uint64_t MRMediaRemoteReplaceIntentToProtobuf(unsigned int a1)
{
  if (a1 <= 3)
    return a1 + 1;
  else
    return 3;
}

uint64_t MRMediaRemoteReplaceIntentFromProtobuf(int a1)
{
  if ((a1 - 1) >= 4)
    return 2;
  else
    return (a1 - 1);
}

uint64_t MRMediaRemotePlaybackQueueTypeToProtobuf(int a1)
{
  if ((a1 - 5) > 3)
    return 1;
  else
    return dword_193ADA1C0[a1 - 5];
}

uint64_t MRMediaRemotePlaybackQueueTypeFromProtobuf(int a1)
{
  if ((a1 - 2) > 2)
    return 0;
  else
    return dword_193ADA1A8[a1 - 2];
}

id MRCreateAllowedNowPlayingInfo(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  _QWORD v6[4];
  id v7;
  id v8;

  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    _MRNowPlayingInfoDictionaryKeyToProtobufKeyMapping();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __MRCreateAllowedNowPlayingInfo_block_invoke;
    v6[3] = &unk_1E30CC7B0;
    v7 = v1;
    v4 = v2;
    v8 = v4;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v6);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t _MRGroupTopologyModificationRequestProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRRequestDetailsProtobuf *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  BOOL v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(_MRRequestDetailsProtobuf);
          objc_storeStrong((id *)(a1 + 8), v17);
          if (PBReaderPlaceMark() && (_MRRequestDetailsProtobufReadFrom((uint64_t)v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            goto LABEL_33;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_64;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_66:
          *(_DWORD *)(a1 + 32) = v21;
          continue;
        case 3u:
          PBReaderReadString();
          v17 = (_MRRequestDetailsProtobuf *)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend((id)a1, "addOutputDeviceUIDs:", v17);
LABEL_33:

          continue;
        case 4u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v27 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v27 = 0;
LABEL_70:
          v51 = v27 != 0;
          v52 = 36;
          goto LABEL_83;
        case 5u:
          PBReaderReadString();
          v31 = objc_claimAutoreleasedReturnValue();
          v32 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v31;

          continue;
        case 6u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_74:
          v51 = v35 != 0;
          v52 = 39;
          goto LABEL_83;
        case 7u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v41 = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v41 = 0;
LABEL_78:
          v51 = v41 != 0;
          v52 = 38;
          goto LABEL_83;
        case 8u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v48 = *v3;
        v49 = *(_QWORD *)(a2 + v48);
        if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          break;
        v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
        *(_QWORD *)(a2 + v48) = v49 + 1;
        v47 |= (unint64_t)(v50 & 0x7F) << v45;
        if ((v50 & 0x80) == 0)
          goto LABEL_80;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          v47 = 0;
          goto LABEL_82;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_80:
      if (*(_BYTE *)(a2 + *v5))
        v47 = 0;
LABEL_82:
      v51 = v47 != 0;
      v52 = 37;
LABEL_83:
      *(_BYTE *)(a1 + v52) = v51;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRVoiceInputDeviceDescriptorProtobufReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRAudioFormatSettingsProtobuf *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(_MRAudioFormatSettingsProtobuf);
        objc_storeStrong(a1 + 1, v17);
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(_MRAudioFormatSettingsProtobuf);
        objc_msgSend(a1, "addSupportedFormats:", v17);
      }
      if (!PBReaderPlaceMark() || (_MRAudioFormatSettingsProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSendCommandResultStatusProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _MRSendCommandResultHandlerDialogProtobuf *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_45;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_47:
        v33 = 40;
        goto LABEL_52;
      case 2u:
        v24 = 0;
        v25 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_51:
        v33 = 44;
LABEL_52:
        *(_DWORD *)(a1 + v33) = v19;
        goto LABEL_53;
      case 3u:
        v29 = objc_alloc_init(_MRSendCommandResultHandlerDialogProtobuf);
        objc_storeStrong((id *)(a1 + 24), v29);
        if (!PBReaderPlaceMark() || !_MRSendCommandResultHandlerDialogProtobufReadFrom((char *)v29, a2))
          goto LABEL_55;
        goto LABEL_40;
      case 4u:
        v29 = objc_alloc_init(_MRErrorProtobuf);
        objc_storeStrong((id *)(a1 + 32), v29);
        if (PBReaderPlaceMark() && (_MRErrorProtobufReadFrom((uint64_t)v29, a2) & 1) != 0)
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      case 5u:
        PBReaderReadData();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = 8;
        goto LABEL_43;
      case 6u:
        PBReaderReadString();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = 16;
LABEL_43:
        v32 = *(void **)(a1 + v31);
        *(_QWORD *)(a1 + v31) = v30;

        goto LABEL_53;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

id MRAVOutputContextGetUniqueIdentifier(void *a1)
{
  return (id)MRAVOutputContextCopyUniqueIdentifier(a1);
}

id MRContentItemGetAppMetrics(void *a1)
{
  return (id)MRContentItemCopyAppMetrics(a1);
}

id MRContentItemGetNowPlayingInfo(void *a1)
{
  return (id)MRContentItemCopyNowPlayingInfo(a1);
}

id MRContentItemGetUserInfo(void *a1)
{
  return (id)MRContentItemCopyUserInfo(a1);
}

id MRContentItemGetDeviceSpecificUserInfo(void *a1)
{
  return (id)MRContentItemCopyDeviceSpecificUserInfo(a1);
}

id MRContentItemGetCollectionInfo(void *a1)
{
  return (id)MRContentItemCopyCollectionInfo(a1);
}

id MRAVOutputDeviceSubstituteLocalDevice()
{
  return (id)MRAVCopyOutputDevicesSubstitutingLocalDevice();
}

uint64_t MRLyricsEventGetStartDate(void *a1)
{
  void *v1;

  v1 = (void *)MEMORY[0x1E0C99D68];
  objc_msgSend(a1, "startTime");
  return objc_msgSend(v1, "dateWithTimeIntervalSinceReferenceDate:");
}

uint64_t MRLyricsEventGetEndDate(void *a1)
{
  void *v2;

  if (!objc_msgSend(a1, "hasEndTime"))
    return 0;
  v2 = (void *)MEMORY[0x1E0C99D68];
  objc_msgSend(a1, "endTime");
  return objc_msgSend(v2, "dateWithTimeIntervalSinceReferenceDate:");
}

BOOL _MRDiscoveryUpdateOutputDevicesProtobufMessageReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRAVOutputDeviceDescriptorProtobuf *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend(a1, "addOutputDevices:", v17);
        if (!PBReaderPlaceMark()
          || (_MRAVOutputDeviceDescriptorProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_MRDiscoverySessionConfigurationProtobuf);
    objc_storeStrong(a1 + 1, v17);
    if (!PBReaderPlaceMark()
      || (_MRDiscoverySessionConfigurationProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRTranscriptAlignmentProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v44 = 16;
          goto LABEL_64;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v44 = 8;
          goto LABEL_64;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v44 = 32;
          goto LABEL_64;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v44 = 24;
LABEL_64:
          *(_QWORD *)(a1 + v44) = v20;
          continue;
        case 5u:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          *(_BYTE *)(a1 + 44) |= 0x10u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if (v34 < 0)
              {
                v28 += 7;
                v15 = v29++ >= 9;
                if (v15)
                {
                  v30 = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v30 = 0;
LABEL_50:
          v42 = v30 != 0;
          v43 = 40;
          goto LABEL_55;
        case 6u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_BYTE *)(a1 + 44) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *v3;
        v39 = *(_QWORD *)(a2 + v38);
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
          break;
        v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
        *(_QWORD *)(a2 + v38) = v40;
        v37 |= (unint64_t)(v41 & 0x7F) << v35;
        if ((v41 & 0x80) == 0)
          goto LABEL_52;
        v35 += 7;
        v15 = v36++ >= 9;
        if (v15)
        {
          v37 = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        v37 = 0;
LABEL_54:
      v42 = v37 != 0;
      v43 = 41;
LABEL_55:
      *(_BYTE *)(a1 + v43) = v42;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSetNowPlayingClientMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRNowPlayingClientProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRNowPlayingClientProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (_MRNowPlayingClientProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRUpdateContentItemArtworkMessageProtobufReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRContentItemProtobuf *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRContentItemProtobuf);
        objc_msgSend(a1, "addContentItems:", v17);
        if (!PBReaderPlaceMark() || (_MRContentItemProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
    objc_storeStrong(a1 + 2, v17);
    if (!PBReaderPlaceMark() || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void MRMediaRemotePlaybackQueueDataSourceInvalidate(uint64_t a1)
{
  MRPlayerPath *v1;

  v1 = -[MRPlayerPath initWithOrigin:client:player:]([MRPlayerPath alloc], "initWithOrigin:client:player:", a1, 0, 0);
  MRMediaRemotePlaybackQueueDataSourceInvalidateForPlayer((uint64_t)v1);

}

void MRMediaRemotePlaybackQueueDataSourceInvalidateForPlayer(uint64_t a1)
{
  void *v2;
  id v3;

  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "playerClientForPlayerPath:", a1);
  v3 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "invalidatePlaybackQueue");
}

void MRMediaRemotePlaybackQueueDataSourceInvalidateWithNowPlayingContentItemForPlayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  MRPlaybackQueue *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = MRContentItemCopy(a1);
    v4 = (void *)v3;
    if (v3)
    {
      v7[0] = v3;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = (void *)MEMORY[0x1E0C9AA60];
    }
    v6 = -[MRPlaybackQueue initWithContentItems:location:]([MRPlaybackQueue alloc], "initWithContentItems:location:", v5, 0);

  }
  else
  {
    v6 = 0;
  }
  MRMediaRemotePlaybackQueueDataSourceInvalidateWithPlaybackQueueForPlayer((uint64_t)v6, a2);

}

void sub_1939DABE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _MRDataArtworkProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRMediaRemoteApplicationIsSystemClassicalRoomApplication(uint64_t a1)
{
  if (MRMediaRemoteApplicationIsSystemClassicalRoomApplication___once != -1)
    dispatch_once(&MRMediaRemoteApplicationIsSystemClassicalRoomApplication___once, &__block_literal_global_18_1);
  return objc_msgSend((id)MRMediaRemoteApplicationIsSystemClassicalRoomApplication___allKnownSystemClassicalRoomApplications, "containsObject:", a1);
}

uint64_t MRMediaRemoteApplicationIsSystemAppleTVApplication(uint64_t a1)
{
  if (MRMediaRemoteApplicationIsSystemAppleTVApplication___once != -1)
    dispatch_once(&MRMediaRemoteApplicationIsSystemAppleTVApplication___once, &__block_literal_global_26_0);
  return objc_msgSend((id)MRMediaRemoteApplicationIsSystemAppleTVApplication___allKnownSystemAppleTVApplications, "containsObject:", a1);
}

uint64_t MRMediaRemoteApplicationIsSystemBooksApplication(uint64_t a1)
{
  if (MRMediaRemoteApplicationIsSystemBooksApplication___once != -1)
    dispatch_once(&MRMediaRemoteApplicationIsSystemBooksApplication___once, &__block_literal_global_35);
  return objc_msgSend((id)MRMediaRemoteApplicationIsSystemBooksApplication___allKnownSystemBooksApplications, "containsObject:", a1);
}

uint64_t MRMediaRemoteApplicationIsSystemApplication(uint64_t a1)
{
  if ((MRMediaRemoteApplicationIsSystemMediaApplication(a1) & 1) != 0
    || (MRMediaRemoteApplicationIsSystemPodcastApplication(a1) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return MRMediaRemoteApplicationIsSystemClassicalRoomApplication(a1);
  }
}

CFStringRef MRMediaRemoteCopyLocalDeviceSystemClassicalRoomApplicationDisplayID()
{
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("com.apple.music.classical"));
}

CFStringRef MRMediaRemoteCopyLocalDeviceSystemAppleTVApplicationDisplayID()
{
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("com.apple.tv"));
}

CFStringRef MRMediaRemoteCopyLocalDeviceSystemBooksApplicationDisplayID()
{
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("com.apple.iBooks"));
}

uint64_t MRMediaRemoteCopyLocalDeviceAirPlayReceiverDisplayID()
{
  return 0;
}

uint64_t MRMediaRemoteApplicationIsAirPlayReceiver(uint64_t a1)
{
  if (MRMediaRemoteApplicationIsAirPlayReceiver___once != -1)
    dispatch_once(&MRMediaRemoteApplicationIsAirPlayReceiver___once, &__block_literal_global_50);
  return objc_msgSend((id)MRMediaRemoteApplicationIsAirPlayReceiver___receivers, "containsObject:", a1);
}

uint64_t MRMediaRemoteCurrentApplicationIsAirPlayReceiver()
{
  if (MRMediaRemoteCurrentApplicationIsAirPlayReceiver___once != -1)
    dispatch_once(&MRMediaRemoteCurrentApplicationIsAirPlayReceiver___once, &__block_literal_global_57_0);
  return MRMediaRemoteCurrentApplicationIsAirPlayReceiver_isAirPlayReceiver;
}

BOOL MRMediaRemoteSystemMediaApplicationWake()
{
  void *v0;

  v0 = (void *)MRGetSharedService();
  return MRMediaRemoteServiceSystemMediaAppWake(v0);
}

BOOL MRMediaRemoteSystemMediaApplicationIsRunning()
{
  const __CFString *v0;
  CFStringRef Copy;
  MRClient *v2;
  void *LocalOrigin;
  MRPlayerPath *v4;
  void *v5;
  void *Client;
  int ProcessIdentifier;
  _BOOL8 result;

  if (_os_feature_enabled_impl())
    v0 = CFSTR("com.apple.sonic.music");
  else
    v0 = CFSTR("com.apple.Music");
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v0);
  v2 = MRNowPlayingClientCreate(0, (uint64_t)Copy);
  LocalOrigin = MRMediaRemoteGetLocalOrigin();
  v4 = MRNowPlayingPlayerPathCreate((uint64_t)LocalOrigin, (uint64_t)v2, 0);
  v5 = (void *)MRMediaRemoteNowPlayingCopyResolvedPlayerPath(v4, 0);
  CFRelease(Copy);
  CFRelease(v2);
  CFRelease(v4);
  result = 0;
  if (v5)
  {
    Client = MRNowPlayingPlayerPathGetClient(v5);
    ProcessIdentifier = MRNowPlayingClientGetProcessIdentifier(Client);
    CFRelease(v5);
    if (ProcessIdentifier > 0)
      return 1;
  }
  return result;
}

uint64_t MRMediaRemoteCopySystemMediaApplicationDefaultSetPlaybackQueueCommandOptions()
{
  _QWORD v1[2];
  _QWORD v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("kMRMediaRemoteCommandInfoSupportedPlaybackQueueTypes");
  v1[1] = CFSTR("kMRMediaRemoteCommandInfoSupportedCustomPlaybackQueueIdentifiers");
  v2[0] = &unk_1E3143C20;
  v2[1] = &unk_1E3143C38;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 2);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRMediaRemoteCopySystemMediaApplicationDefaultSupportedCommands()
{
  if (MRMediaRemoteCopySystemMediaApplicationDefaultSupportedCommands___once != -1)
    dispatch_once(&MRMediaRemoteCopySystemMediaApplicationDefaultSupportedCommands___once, &__block_literal_global_75);
  return objc_msgSend((id)MRMediaRemoteCopySystemMediaApplicationDefaultSupportedCommands___supportedCommands, "copy");
}

CFStringRef MRMediaRemoteCopyLocalizedDisplayID(CFStringRef result)
{
  uint64_t v1;
  int v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFAllocator *v6;
  int IsSystemClassicalRoomApplication;

  if (result)
  {
    v1 = (uint64_t)result;
    if (MRMediaRemoteApplicationIsSystemMediaApplication((uint64_t)result))
    {
      v2 = _os_feature_enabled_impl();
      v3 = CFSTR("com.apple.Music");
      v4 = CFSTR("com.apple.sonic.music");
    }
    else
    {
      if (!MRMediaRemoteApplicationIsSystemPodcastApplication(v1))
      {
        if (MRMediaRemoteApplicationIsSystemBooksApplication(v1))
        {
          v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v5 = CFSTR("com.apple.iBooks");
        }
        else if (MRMediaRemoteApplicationIsSystemAppleTVApplication(v1))
        {
          v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v5 = CFSTR("com.apple.tv");
        }
        else
        {
          IsSystemClassicalRoomApplication = MRMediaRemoteApplicationIsSystemClassicalRoomApplication(v1);
          v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          if (IsSystemClassicalRoomApplication)
            v5 = CFSTR("com.apple.music.classical");
          else
            v5 = (const __CFString *)v1;
        }
        return CFStringCreateCopy(v6, v5);
      }
      v2 = _os_feature_enabled_impl();
      v3 = CFSTR("com.apple.podcasts");
      v4 = CFSTR("com.apple.sonic.podcasts");
    }
    if (v2)
      v5 = v4;
    else
      v5 = v3;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    return CFStringCreateCopy(v6, v5);
  }
  return result;
}

uint64_t _MRPlaybackSessionMigrateRequestProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _MRPlaybackSessionMigrateRequestEventProtobuf *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
        goto LABEL_81;
      case 2u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 108) |= 0x40u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_89:
        v67 = 76;
        goto LABEL_110;
      case 3u:
        v28 = 0;
        v29 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 108) |= 8u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v23 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_93:
        v67 = 36;
        goto LABEL_110;
      case 4u:
        v34 = objc_alloc_init(_MRPlaybackSessionMigrateRequestEventProtobuf);
        objc_msgSend((id)a1, "addEvents:", v34);
        if (!PBReaderPlaceMark()
          || (_MRPlaybackSessionMigrateRequestEventProtobufReadFrom((uint64_t)v34, a2) & 1) == 0)
        {
          goto LABEL_118;
        }
        goto LABEL_85;
      case 5u:
        *(_BYTE *)(a1 + 108) |= 1u;
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v37 = 0;
        }
        v68 = 8;
        goto LABEL_115;
      case 6u:
        v34 = objc_alloc_init(_MRContentItemProtobuf);
        objc_storeStrong((id *)(a1 + 24), v34);
        if (!PBReaderPlaceMark() || (_MRContentItemProtobufReadFrom((uint64_t)v34, a2) & 1) == 0)
          goto LABEL_118;
        goto LABEL_85;
      case 7u:
        v34 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        v38 = 80;
        goto LABEL_83;
      case 8u:
        v39 = 0;
        v40 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 108) |= 0x20u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v43;
            v23 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v15 = v40++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_97:
        v67 = 72;
        goto LABEL_110;
      case 9u:
        *(_BYTE *)(a1 + 108) |= 2u;
        v45 = *v3;
        v46 = *(_QWORD *)(a2 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v46);
          *(_QWORD *)(a2 + v45) = v46 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v37 = 0;
        }
        v68 = 16;
LABEL_115:
        *(_QWORD *)(a1 + v68) = v37;
        goto LABEL_116;
      case 0xAu:
        v34 = objc_alloc_init(_MRPlaybackSessionRequestProtobuf);
        objc_storeStrong((id *)(a1 + 64), v34);
        if (!PBReaderPlaceMark()
          || (_MRPlaybackSessionRequestProtobufReadFrom((uint64_t)v34, a2) & 1) == 0)
        {
          goto LABEL_118;
        }
        goto LABEL_85;
      case 0xBu:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_BYTE *)(a1 + 108) |= 0x80u;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v15 = v48++ >= 9;
              if (v15)
              {
                v49 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v49 = 0;
LABEL_101:
        *(_BYTE *)(a1 + 104) = v49 != 0;
        goto LABEL_116;
      case 0xCu:
        v54 = 0;
        v55 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 108) |= 0x10u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v58;
            v23 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v15 = v55++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_105:
        v67 = 56;
        goto LABEL_110;
      case 0xDu:
        v60 = 0;
        v61 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 108) |= 4u;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          v64 = v63 + 1;
          if (v63 == -1 || v64 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v64;
            v23 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v15 = v61++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_109:
        v67 = 32;
LABEL_110:
        *(_DWORD *)(a1 + v67) = v23;
        goto LABEL_116;
      case 0xEu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
LABEL_81:
        v66 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_116;
      case 0xFu:
        v34 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        v38 = 96;
LABEL_83:
        objc_storeStrong((id *)(a1 + v38), v34);
        if (PBReaderPlaceMark()
          && _MRNowPlayingPlayerPathProtobufReadFrom((id *)&v34->super.super.isa, a2))
        {
LABEL_85:
          PBReaderRecallMark();

LABEL_116:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_118:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_116;
    }
  }
}

void sub_1939DEDE8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

MRLanguageOption *MRLanguageOptionCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MRLanguageOption *v11;

  v11 = objc_alloc_init(MRLanguageOption);
  -[MRLanguageOption setType:](v11, "setType:", a2);
  -[MRLanguageOption setLanguageTag:](v11, "setLanguageTag:", a3);
  -[MRLanguageOption setCharacteristics:](v11, "setCharacteristics:", a4);
  -[MRLanguageOption setDisplayName:](v11, "setDisplayName:", a5);
  -[MRLanguageOption setIdentifier:](v11, "setIdentifier:", a6);
  return v11;
}

MRLanguageOption *MRLanguageOptionCreateAutomaticLanguageOptionForType(uint64_t a1)
{
  return MRLanguageOptionCreate(a1, a1, (uint64_t)CFSTR("__AUTO__"), 0, 0, 0);
}

uint64_t MRLanguageOptionIsAutomaticLanguageOptionForType(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v9;

  v3 = a1;
  if (objc_msgSend(v3, "type") != a2)
    goto LABEL_5;
  objc_msgSend(v3, "characteristics");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4
    || (objc_msgSend(v3, "displayName"), v5 = (void *)objc_claimAutoreleasedReturnValue(), v5, v5)
    || (objc_msgSend(v3, "identifier"), v6 = (void *)objc_claimAutoreleasedReturnValue(), v6, v6))
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    objc_msgSend(v3, "languageTag");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v9, "isEqualToString:", CFSTR("__AUTO__"));

  }
  return v7;
}

uint64_t MRLanguageOptionCopyLanguageTag(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "languageTag");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRLanguageOptionCopyCharacteristics(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "characteristics");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRLanguageOptionCopyDisplayName(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "displayName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRLanguageOptionCopyIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "identifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

const __CFString *MRLanguageOptionTypeCopyDescription(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("NULL");
  if (a1 == 1)
    v1 = CFSTR("MRLanguageOptionTypeLegible");
  if (a1)
    return v1;
  else
    return CFSTR("MRLanguageOptionTypeAudible");
}

uint64_t MRLanguageOptionCreateExternalRepresentation(uint64_t result)
{
  if (result)
  {
    MSVArchivedDataWithRootObject();
    return objc_claimAutoreleasedReturnValue();
  }
  return result;
}

uint64_t MRLanguageOptionsCreateExternalRepresentation(uint64_t result)
{
  if (result)
  {
    MSVArchivedDataWithRootObject();
    return objc_claimAutoreleasedReturnValue();
  }
  return result;
}

MRLanguageOption *MRLanguageOptionCreateFromExternalRepresentation(void *a1)
{
  id v1;
  MRLanguageOption *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  MRLanguageOption *v9;
  id v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = (MRLanguageOption *)v1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || (v3 = v1,
          v2 = -[MRLanguageOption initWithProtobuf:]([MRLanguageOption alloc], "initWithProtobuf:", v3), v3, !v2))
    {
      v4 = (void *)MEMORY[0x1E0C99E60];
      v5 = objc_opt_class();
      objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 0;
      objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v6, v1, &v11);
      v2 = (MRLanguageOption *)objc_claimAutoreleasedReturnValue();
      v7 = v11;
      if (v7)
      {
        _MRLogForCategory(1uLL);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v13 = v7;
          _os_log_impl(&dword_193827000, v8, OS_LOG_TYPE_DEFAULT, "Error %@ deserializing languageOption", buf, 0xCu);
        }

      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v9 = v2;
        v2 = -[MRLanguageOption initWithProtobuf:]([MRLanguageOption alloc], "initWithProtobuf:", v9);

      }
    }
  }

  return v2;
}

uint64_t MRLanguageOptionsCreateFromExternalRepresentation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    MSVPropertyListDataClasses();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = objc_opt_class();
    v8[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setByAddingObjectsFromArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    MSVUnarchivedObjectOfClasses();
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v1;
    else
      v5 = 0;
  }
  objc_msgSend(v5, "mr_map:", &__block_literal_global_79);
  v6 = objc_claimAutoreleasedReturnValue();

  return v6;
}

MRLanguageOptionGroup *MRLanguageOptionGroupCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MRLanguageOptionGroup *v7;

  v7 = objc_alloc_init(MRLanguageOptionGroup);
  -[MRLanguageOptionGroup setLanguageOptions:](v7, "setLanguageOptions:", a2);
  -[MRLanguageOptionGroup setDefaultLanguageOption:](v7, "setDefaultLanguageOption:", a3);
  -[MRLanguageOptionGroup setAllowsEmptySelection:](v7, "setAllowsEmptySelection:", a4);
  return v7;
}

uint64_t MRLanguageOptionGroupCopyLanguageOptions(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "languageOptions");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

void *MRLanguageOptionGroupGetDefaultLanguageOption(void *a1)
{
  void *v1;

  objc_msgSend(a1, "defaultLanguageOption");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t MRLanguageOptionGroupCreateExternalRepresentation(uint64_t result)
{
  if (result)
  {
    MSVArchivedDataWithRootObject();
    return objc_claimAutoreleasedReturnValue();
  }
  return result;
}

uint64_t MRLanguageOptionGroupsCreateExternalRepresentation(uint64_t result)
{
  if (result)
  {
    MSVArchivedDataWithRootObject();
    return objc_claimAutoreleasedReturnValue();
  }
  return result;
}

MRLanguageOptionGroup *MRLanguageOptionGroupCreateFromExternalRepresentation(void *a1)
{
  id v1;
  MRLanguageOptionGroup *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  MRLanguageOptionGroup *v9;
  id v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = (MRLanguageOptionGroup *)v1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0
      || (v3 = v1,
          v2 = -[MRLanguageOptionGroup initWithProtobuf:]([MRLanguageOptionGroup alloc], "initWithProtobuf:", v3), v3, !v2))
    {
      v4 = (void *)MEMORY[0x1E0C99E60];
      v5 = objc_opt_class();
      objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 0;
      objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v6, v1, &v11);
      v2 = (MRLanguageOptionGroup *)objc_claimAutoreleasedReturnValue();
      v7 = v11;
      if (v7)
      {
        _MRLogForCategory(1uLL);
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v13 = v7;
          _os_log_impl(&dword_193827000, v8, OS_LOG_TYPE_DEFAULT, "Error %@ deserializing languageOptionGroup", buf, 0xCu);
        }

      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v9 = v2;
        v2 = -[MRLanguageOptionGroup initWithProtobuf:]([MRLanguageOptionGroup alloc], "initWithProtobuf:", v9);

      }
    }
  }

  return v2;
}

uint64_t MRLanguageOptionGroupsCreateFromExternalRepresentation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    MSVPropertyListDataClasses();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = objc_opt_class();
    v8[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setByAddingObjectsFromArray:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    MSVUnarchivedObjectOfClasses();
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v1;
    else
      v5 = 0;
  }
  objc_msgSend(v5, "mr_map:", &__block_literal_global_35_0);
  v6 = objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t MRLanguageOptionIsEqualToLanguageOption(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqual:", a2);
}

BOOL _MRWakeDeviceMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t _MRPreloadedPlaybackSessionInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_34;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_36:
        *(_DWORD *)(a1 + 16) = v22;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
        }
        v26 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRVolumeControlCapabilitiesDidChangeMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRVolumeControlAvailabilityProtobuf *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 4)
        break;
      if ((_DWORD)v17 == 3)
      {
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 16;
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_MRVolumeControlAvailabilityProtobuf);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark()
          || (_MRVolumeControlAvailabilityProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = 24;
LABEL_26:
    v18 = *(_MRVolumeControlAvailabilityProtobuf **)(a1 + v20);
    *(_QWORD *)(a1 + v20) = v19;
LABEL_27:

    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRPlaybackQueueCapabilitiesProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 12) |= 4u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByRequest;
            goto LABEL_48;
          }
          v26 += 7;
          v24 = v27++ > 8;
          if (v24)
          {
            v20 = 0;
            v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByRequest;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByRequest;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 12) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByRange;
            goto LABEL_47;
          }
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            break;
          v18 += 7;
          v24 = v19++ > 8;
          if (v24)
          {
            v20 = 0;
            v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByRange;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByRange;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v31 = 0;
    v32 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 12) |= 1u;
    while (1)
    {
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
      {
        v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByIdentifiers;
        goto LABEL_47;
      }
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
      *(_QWORD *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        break;
      v31 += 7;
      v24 = v32++ > 8;
      if (v24)
      {
        v20 = 0;
        v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByIdentifiers;
        goto LABEL_50;
      }
    }
    v25 = &OBJC_IVAR____MRPlaybackQueueCapabilitiesProtobuf__requestByIdentifiers;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_50:
    *(_BYTE *)(a1 + *v25) = v20 != 0;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRUpdateOutputDevicesMessageProtobufReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRAVOutputDeviceDescriptorProtobuf *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend(a1, "addClusterAwareOutputDevices:", v18);
        goto LABEL_23;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_MRAVOutputDeviceDescriptorProtobuf);
        objc_msgSend(a1, "addOutputDevices:", v18);
LABEL_23:
        if (!PBReaderPlaceMark()
          || (_MRAVOutputDeviceDescriptorProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v19 = objc_claimAutoreleasedReturnValue();
    v18 = (_MRAVOutputDeviceDescriptorProtobuf *)a1[2];
    a1[2] = v19;
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRRegisterGameControllerResponseMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1939E6804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 224), 8);
  _Block_object_dispose((const void *)(v47 - 176), 8);
  _Block_object_dispose((const void *)(v47 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1939E8E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1939E91E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1939E9548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939E963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MRGetVolumeResultMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRNowPlayingInfoProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  void *v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_81;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
          goto LABEL_81;
        case 3u:
          *(_WORD *)(a1 + 120) |= 1u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v97 = 8;
          goto LABEL_150;
        case 4u:
          *(_WORD *)(a1 + 120) |= 2u;
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v97 = 16;
          goto LABEL_150;
        case 5u:
          *(_WORD *)(a1 + 120) |= 0x20u;
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v28 = 0;
          }
          *(_DWORD *)(a1 + 72) = v28;
          continue;
        case 6u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_WORD *)(a1 + 120) |= 0x40u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v15 = v30++ >= 9;
                if (v15)
                {
                  LODWORD(v31) = 0;
                  goto LABEL_106;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v31) = 0;
LABEL_106:
          v93 = 96;
          goto LABEL_111;
        case 7u:
          v36 = 0;
          v37 = 0;
          v31 = 0;
          *(_WORD *)(a1 + 120) |= 0x80u;
          while (2)
          {
            v38 = *v3;
            v39 = *(_QWORD *)(a2 + v38);
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
              *(_QWORD *)(a2 + v38) = v40;
              v31 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v15 = v37++ >= 9;
                if (v15)
                {
                  LODWORD(v31) = 0;
                  goto LABEL_110;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v31) = 0;
LABEL_110:
          v93 = 100;
LABEL_111:
          *(_DWORD *)(a1 + v93) = v31;
          continue;
        case 8u:
          *(_WORD *)(a1 + 120) |= 8u;
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v97 = 32;
LABEL_150:
          *(_QWORD *)(a1 + v97) = v23;
          continue;
        case 9u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 104;
          goto LABEL_81;
        case 0xAu:
          v44 = 0;
          v45 = 0;
          v46 = 0;
          *(_WORD *)(a1 + 120) |= 0x10u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            v49 = v48 + 1;
            if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v49;
              v46 |= (unint64_t)(v50 & 0x7F) << v44;
              if (v50 < 0)
              {
                v44 += 7;
                v15 = v45++ >= 9;
                if (v15)
                {
                  v46 = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v46 = 0;
LABEL_115:
          v94 = 40;
          goto LABEL_128;
        case 0xBu:
          v51 = 0;
          v52 = 0;
          v53 = 0;
          *(_WORD *)(a1 + 120) |= 0x400u;
          while (2)
          {
            v54 = *v3;
            v55 = *(_QWORD *)(a2 + v54);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
              *(_QWORD *)(a2 + v54) = v56;
              v53 |= (unint64_t)(v57 & 0x7F) << v51;
              if (v57 < 0)
              {
                v51 += 7;
                v15 = v52++ >= 9;
                if (v15)
                {
                  v53 = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v53 = 0;
LABEL_119:
          v95 = v53 != 0;
          v96 = 114;
          goto LABEL_141;
        case 0xCu:
          v58 = 0;
          v59 = 0;
          v60 = 0;
          *(_WORD *)(a1 + 120) |= 0x1000u;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            v63 = v62 + 1;
            if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
              *(_QWORD *)(a2 + v61) = v63;
              v60 |= (unint64_t)(v64 & 0x7F) << v58;
              if (v64 < 0)
              {
                v58 += 7;
                v15 = v59++ >= 9;
                if (v15)
                {
                  v60 = 0;
                  goto LABEL_123;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v60 = 0;
LABEL_123:
          v95 = v60 != 0;
          v96 = 116;
          goto LABEL_141;
        case 0xDu:
          v65 = 0;
          v66 = 0;
          v46 = 0;
          *(_WORD *)(a1 + 120) |= 4u;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
              *(_QWORD *)(a2 + v67) = v69;
              v46 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                v15 = v66++ >= 9;
                if (v15)
                {
                  v46 = 0;
                  goto LABEL_127;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v46 = 0;
LABEL_127:
          v94 = 24;
LABEL_128:
          *(_QWORD *)(a1 + v94) = v46;
          continue;
        case 0xEu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 80;
          goto LABEL_81;
        case 0xFu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 88;
          goto LABEL_81;
        case 0x10u:
          PBReaderReadData();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 64;
LABEL_81:
          v71 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 0x11u:
          v72 = 0;
          v73 = 0;
          v74 = 0;
          *(_WORD *)(a1 + 120) |= 0x200u;
          while (2)
          {
            v75 = *v3;
            v76 = *(_QWORD *)(a2 + v75);
            v77 = v76 + 1;
            if (v76 == -1 || v77 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
              *(_QWORD *)(a2 + v75) = v77;
              v74 |= (unint64_t)(v78 & 0x7F) << v72;
              if (v78 < 0)
              {
                v72 += 7;
                v15 = v73++ >= 9;
                if (v15)
                {
                  v74 = 0;
                  goto LABEL_132;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v74 = 0;
LABEL_132:
          v95 = v74 != 0;
          v96 = 113;
          goto LABEL_141;
        case 0x12u:
          v79 = 0;
          v80 = 0;
          v81 = 0;
          *(_WORD *)(a1 + 120) |= 0x100u;
          while (2)
          {
            v82 = *v3;
            v83 = *(_QWORD *)(a2 + v82);
            v84 = v83 + 1;
            if (v83 == -1 || v84 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
              *(_QWORD *)(a2 + v82) = v84;
              v81 |= (unint64_t)(v85 & 0x7F) << v79;
              if (v85 < 0)
              {
                v79 += 7;
                v15 = v80++ >= 9;
                if (v15)
                {
                  v81 = 0;
                  goto LABEL_136;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v81 = 0;
LABEL_136:
          v95 = v81 != 0;
          v96 = 112;
          goto LABEL_141;
        case 0x13u:
          v86 = 0;
          v87 = 0;
          v88 = 0;
          *(_WORD *)(a1 + 120) |= 0x800u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v89 = *v3;
        v90 = *(_QWORD *)(a2 + v89);
        v91 = v90 + 1;
        if (v90 == -1 || v91 > *(_QWORD *)(a2 + *v4))
          break;
        v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v90);
        *(_QWORD *)(a2 + v89) = v91;
        v88 |= (unint64_t)(v92 & 0x7F) << v86;
        if ((v92 & 0x80) == 0)
          goto LABEL_138;
        v86 += 7;
        v15 = v87++ >= 9;
        if (v15)
        {
          v88 = 0;
          goto LABEL_140;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_138:
      if (*(_BYTE *)(a2 + *v5))
        v88 = 0;
LABEL_140:
      v95 = v88 != 0;
      v96 = 115;
LABEL_141:
      *(_BYTE *)(a1 + v96) = v95;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRNotificationMessageProtobufReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRNowPlayingPlayerPathProtobuf *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_msgSend(a1, "addPlayerPath:", v18);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v18->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = (_MRNowPlayingPlayerPathProtobuf *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(a1, "addNotification:", v18);
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = (_MRNowPlayingPlayerPathProtobuf *)objc_claimAutoreleasedReturnValue();
    if (v18)
      objc_msgSend(a1, "addUserInfo:", v18);
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1939EDBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EDDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EDF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EE0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EE1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EE2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EE3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EE5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EE7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1939EEBD8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1939EEEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1939EF1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _MRRequestGroupSessionMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRRequestDetailsProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRRequestDetailsProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (_MRRequestDetailsProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRMediaRemoteActiveEndpointChangeTypeCopyDescription(uint64_t a1)
{
  const __CFString *v1;
  __CFString *v2;

  v1 = CFSTR("Deferrable");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    v2 = (__CFString *)v1;
  else
    v2 = CFSTR("Immediate");
  return -[__CFString copy](v2, "copy");
}

uint64_t MRMediaRemoteActiveEndpointOperationCopyDescription(uint64_t a1)
{
  const __CFString *v1;
  __CFString *v2;

  v1 = CFSTR("Clear");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    v2 = (__CFString *)v1;
  else
    v2 = CFSTR("Update");
  return -[__CFString copy](v2, "copy");
}

void MRAVEndpointGetActiveSystemEndpointUID(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v5 = a3;
  v6 = a2;
  +[MRNowPlayingOriginClientManager sharedManager](MRNowPlayingOriginClientManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __MRAVEndpointGetActiveSystemEndpointUID_block_invoke;
  v9[3] = &unk_1E30C9110;
  v10 = v5;
  v8 = v5;
  objc_msgSend(v7, "handleActiveSystemEndpointOutputDeviceUIDForType:queue:completion:", a1, v6, v9);

}

void MRAVEndpointUpdateActiveSystemEndpoint(void *a1, uint64_t a2, void *a3, void *a4)
{
  MRAVEndpointUpdateActiveSystemEndpointWithReason(a1, a2, (uint64_t)CFSTR("Legacy API call"), a3, a4);
}

void MRAVEndpointUpdateActiveSystemEndpointWithReason(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  if ((MRAVEndpointIsLocalEndpoint(a1) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    objc_msgSend(a1, "outputDevices");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "firstObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "uid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v14 = v12;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v22;
      while (2)
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v22 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
          if (objc_msgSend(v19, "isGroupLeader", (_QWORD)v21))
          {
            objc_msgSend(v19, "uid");
            v20 = objc_claimAutoreleasedReturnValue();

            v11 = (void *)v20;
            goto LABEL_13;
          }
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        if (v16)
          continue;
        break;
      }
    }
LABEL_13:

  }
  MRAVEndpointUpdateActiveSystemEndpointForOutputDeviceUIDWithChangeType((uint64_t)v11, v10, 1, a3, v8, v9);

}

void MRAVEndpointUpdateActiveSystemEndpointForOutputDeviceUIDWithReason(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  MRAVEndpointUpdateActiveSystemEndpointForOutputDeviceUIDWithChangeType(a1, a2, 1, a3, a4, a5);
}

void MRAVEndpointUpdateActiveSystemEndpointForOutputDeviceUIDWithChangeType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  MRUpdateActiveSystemEndpointRequest *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v10 = a6;
  v11 = a5;
  v12 = -[MRUpdateActiveSystemEndpointRequest initWithOutputDeviceUID:reason:]([MRUpdateActiveSystemEndpointRequest alloc], "initWithOutputDeviceUID:reason:", a1, a4);
  -[MRUpdateActiveSystemEndpointRequest setChangeType:](v12, "setChangeType:", a3);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __MRAVEndpointUpdateActiveSystemEndpointForOutputDeviceUIDWithChangeType_block_invoke;
  v14[3] = &unk_1E30CD3D0;
  v15 = v10;
  v13 = v10;
  -[MRUpdateActiveSystemEndpointRequest perform:completion:](v12, "perform:completion:", v11, v14);

}

void MRAVEndpointResolveActiveSystemEndpoint(void *a1, void *a2)
{
  MRAVEndpointResolveActiveSystemEndpointWithTimeout(a1, a2, 0.0);
}

void MRAVEndpointResolveActiveSystemEndpointWithTimeout(void *a1, void *a2, double a3)
{
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v5 = MRActiveEndpointTypeForCurrentApplication_onceToken;
  v6 = a2;
  v7 = a1;
  v9 = v7;
  if (v5 == -1)
  {
    v8 = v7;
  }
  else
  {
    dispatch_once(&MRActiveEndpointTypeForCurrentApplication_onceToken, &__block_literal_global_82);
    v8 = v9;
  }
  MRAVEndpointResolveActiveSystemEndpointWithType(MRActiveEndpointTypeForCurrentApplication_type, v8, v6, a3);

}

uint64_t MRActiveEndpointTypeForBundleIdentifier(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id v4;
  __CFString *v5;
  void *v6;
  void *v7;
  id v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  _QWORD v19[5];
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  +[MRUserSettings currentSettings](MRUserSettings, "currentSettings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportGroupSessionActiveEndpoint");

  if (!v3)
    goto LABEL_6;
  v4 = objc_alloc(MEMORY[0x1E0C99E60]);
  v5 = (__CFString *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
  v20[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v4, "initWithArray:", v6);

  v8 = objc_alloc(MEMORY[0x1E0C99E60]);
  v9 = (__CFString *)MRMediaRemoteCopyLocalDeviceSystemPodcastApplicationDisplayID();
  v19[0] = v9;
  v10 = (__CFString *)MRMediaRemoteCopyLocalDeviceSystemAppleTVApplicationDisplayID();
  v19[1] = v10;
  v11 = (__CFString *)MRMediaRemoteCopyLocalDeviceSystemBooksApplicationDisplayID();
  v19[2] = v11;
  v12 = (__CFString *)MRMediaRemoteCopyLocalDeviceSystemClassicalRoomApplicationDisplayID();
  v19[3] = v12;
  v13 = (void *)MRMediaRemoteCopyLocalDeviceAirPlayReceiverBundleID();
  v19[4] = v13;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v8, "initWithArray:", v14);

  if (!objc_msgSend(v7, "containsObject:", v1))
  {
    v17 = objc_msgSend(v15, "containsObject:", v1);

    if ((v17 & 1) != 0)
    {
      v16 = 5;
      goto LABEL_7;
    }
LABEL_6:
    v16 = 0;
    goto LABEL_7;
  }

  v16 = 4;
LABEL_7:

  return v16;
}

MRClient *MRNowPlayingClientCreateFromExternalRepresentation(uint64_t a1)
{
  return -[MRClient initWithData:]([MRClient alloc], "initWithData:", a1);
}

uint64_t MRNowPlayingClientCreateExternalRepresentation(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFDataRef MRNowPlayingClientCreateExternalRepresentation(MRNowPlayingClientRef)");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_opt_class();
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRNowPlayingPlayerPath.m"), 52, CFSTR("Type mismatch, expecting %@ found %@"), v7, objc_opt_class());

    }
  }
  objc_msgSend(v1, "data");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  return v3;
}

uint64_t MRNowPlayingClientCopy(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingClientRef MRNowPlayingClientCopy(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 59, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRNowPlayingClientCreateSkeletonFrom(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingClientRef MRNowPlayingClientCreateSkeletonFrom(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 73, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "skeleton");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

void MRNowPlayingClientSetProcessIdentifier(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientSetProcessIdentifier(MRNowPlayingClientRef, pid_t)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 80, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setProcessIdentifier:", a2);

}

void MRNowPlayingClientSetBundleIdentifier(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientSetBundleIdentifier(MRNowPlayingClientRef, CFStringRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 94, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setBundleIdentifier:", a2);

}

void MRNowPlayingClientSetParentAppBundleIdentifier(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientSetParentAppBundleIdentifier(MRNowPlayingClientRef, CFStringRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 108, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setParentApplicationBundleIdentifier:", a2);

}

uint64_t MRNowPlayingClientGetUserIdentifier(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "uid_t MRNowPlayingClientGetUserIdentifier(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 115, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "processUserIdentifier");

  return v2;
}

void MRNowPlayingClientSetUserIdentifier(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientSetUserIdentifier(MRNowPlayingClientRef, uid_t)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 122, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setProcessUserIdentifier:", a2);

}

uint64_t MRNowPlayingClientGetNowPlayingVisibility(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingClientVisibility MRNowPlayingClientGetNowPlayingVisibility(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 129, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "visibility");

  return v2;
}

void MRNowPlayingClientSetNowPlayingVisibility(void *a1, unsigned int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientSetNowPlayingVisibility(MRNowPlayingClientRef, MRNowPlayingClientVisibility)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 136, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setVisibility:", a2);

}

float MRNowPlayingClientGetTintColor(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  float v4;
  float v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;
  void *v11;
  uint64_t v12;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRColor MRNowPlayingClientGetTintColor(MRNowPlayingClientRef)");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_opt_class();
      objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRNowPlayingPlayerPath.m"), 143, CFSTR("Type mismatch, expecting %@ found %@"), v12, objc_opt_class());

    }
  }
  objc_msgSend(v1, "tintColor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v1, "tintColor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "red");
    v5 = v4;
    objc_msgSend(v1, "tintColor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "green");
    objc_msgSend(v1, "tintColor");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "blue");
    objc_msgSend(v1, "tintColor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "alpha");

  }
  else
  {
    v5 = -1.0;
  }

  return v5;
}

void MRNowPlayingClientSetTintColor(void *a1, float a2, float a3, float a4, float a5)
{
  MRColorComponents *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;

  v17 = a1;
  if (v17)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientSetTintColor(MRNowPlayingClientRef, MRColor)");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_opt_class();
      objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRNowPlayingPlayerPath.m"), 160, CFSTR("Type mismatch, expecting %@ found %@"), v16, objc_opt_class());

    }
  }
  if (MRColorIsNull(a2, a3, a4, a5))
  {
    v9 = 0;
  }
  else
  {
    v9 = objc_alloc_init(MRColorComponents);
    *(float *)&v10 = a2;
    -[MRColorComponents setRed:](v9, "setRed:", v10);
    *(float *)&v11 = a3;
    -[MRColorComponents setGreen:](v9, "setGreen:", v11);
    *(float *)&v12 = a4;
    -[MRColorComponents setBlue:](v9, "setBlue:", v12);
    *(float *)&v13 = a5;
    -[MRColorComponents setAlpha:](v9, "setAlpha:", v13);
  }
  objc_msgSend(v17, "setTintColor:", v9);

}

uint64_t MRNowPlayingClientSetDisplayName(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setDisplayName:", a2);
}

void *MRNowPlayingClientGetDisplayName(void *a1)
{
  void *v1;

  objc_msgSend(a1, "displayName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void MRNowPlayingClientAppendBundleIdentifier(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a1;
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientAppendBundleIdentifier(MRNowPlayingClientRef, CFStringRef)");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_opt_class();
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRNowPlayingPlayerPath.m"), 204, CFSTR("Type mismatch, expecting %@ found %@"), v8, objc_opt_class());

      if (!a2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  if (a2)
  {
LABEL_4:
    v3 = objc_alloc(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v9, "extendedBundleIdentifierHierarchy");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v3, "initWithArray:", v4);

    objc_msgSend(v5, "addObject:", a2);
    objc_msgSend(v9, "setExtendedBundleIdentifierHierarchy:", v5);

  }
LABEL_5:

}

uint64_t MRNowPlayingClientSetAppIconURL(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setAppIcon:", a2);
}

uint64_t MRNowPlayingClientCopyAppIconURL(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "appIcon");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRNowPlayingClientGetHasAuxillaryProperties(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRNowPlayingClientGetHasAuxillaryProperties(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 228, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "hasAuxiliaryProperties");

  return v2;
}

uint64_t MRNowPlayingClientEqualToClient(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = a1;
  v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MRNowPlayingClientEqualToClient(MRNowPlayingClientRef, MRNowPlayingClientRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 236, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

    if (!v4)
      goto LABEL_6;
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MRNowPlayingClientEqualToClient(MRNowPlayingClientRef, MRNowPlayingClientRef)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_opt_class();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRNowPlayingPlayerPath.m"), 237, CFSTR("Type mismatch, expecting %@ found %@"), v12, objc_opt_class());

  }
LABEL_6:
  if (v3 == v4)
    v5 = 1;
  else
    v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

void MRNowPlayingClientMerge(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a1;
  v3 = a2;
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientMerge(MRNowPlayingClientRef, MRNowPlayingClientRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_class();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 246, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    if (!v3)
      goto LABEL_8;
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingClientMerge(MRNowPlayingClientRef, MRNowPlayingClientRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 247, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

  }
  if (v10)
    objc_msgSend(v10, "mergeFrom:", v3);
LABEL_8:

}

uint64_t MRNowPlayingPlayerCopy(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerRef MRNowPlayingPlayerCopy(MRNowPlayingPlayerRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 267, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "copy");

  return v2;
}

uint64_t MRNowPlayingPlayerCreateSkeletonFrom(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerRef MRNowPlayingPlayerCreateSkeletonFrom(MRNowPlayingClientRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 274, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "skeleton");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

void MRNowPlayingPlayerSetIdentifier(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerSetIdentifier(MRNowPlayingPlayerRef, CFStringRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 281, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setIdentifier:", a2);

}

void MRNowPlayingPlayerSetDisplayName(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerSetDisplayName(MRNowPlayingPlayerRef, CFStringRef)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 288, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setDisplayName:", a2);

}

void MRNowPlayingPlayerSetAudioSessionType(void *a1, unsigned int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  if (v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerSetAudioSessionType(MRNowPlayingPlayerRef, MRNowPlayingPlayerAudioSessionType)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_opt_class();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("MRNowPlayingPlayerPath.m"), 295, CFSTR("Type mismatch, expecting %@ found %@"), v5, objc_opt_class());

    }
  }
  objc_msgSend(v6, "setAudioSessionType:", a2);

}

void *MRNowPlayingPlayerGetDisplayName(void *a1)
{
  id v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRNowPlayingPlayerGetDisplayName(MRNowPlayingPlayerRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 309, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "displayName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t MRNowPlayingPlayerGetAudioSessionType(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerAudioSessionType MRNowPlayingPlayerGetAudioSessionType(MRNowPlayingPlayerRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 316, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "audioSessionType");

  return v2;
}

__CFString *MRNowPlayingPlayerAudioSessionTypeCopyDescription(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E30CD5F8[a1];
}

uint64_t MRNowPlayingPlayerGetHasAuxillaryProperties(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRNowPlayingPlayerGetHasAuxillaryProperties(MRNowPlayingPlayerRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 341, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "hasAuxiliaryProperties");

  return v2;
}

MRPlayer *MRNowPlayingPlayerCreateFromExternalRepresentation(uint64_t a1)
{
  return -[MRPlayer initWithData:]([MRPlayer alloc], "initWithData:", a1);
}

uint64_t MRNowPlayingPlayerCreateExternalRepresentation(void *a1)
{
  objc_msgSend(a1, "data");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t MRNowPlayingPlayerEqualToPlayer(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = a1;
  v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MRNowPlayingPlayerEqualToPlayer(MRNowPlayingPlayerRef, MRNowPlayingPlayerRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 360, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

    if (!v4)
      goto LABEL_6;
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MRNowPlayingPlayerEqualToPlayer(MRNowPlayingPlayerRef, MRNowPlayingPlayerRef)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_opt_class();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRNowPlayingPlayerPath.m"), 361, CFSTR("Type mismatch, expecting %@ found %@"), v12, objc_opt_class());

  }
LABEL_6:
  if (v3 == v4)
    v5 = 1;
  else
    v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

void MRNowPlayingPlayerMerge(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a1;
  v3 = a2;
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerMerge(MRNowPlayingPlayerRef, MRNowPlayingPlayerRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_class();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 370, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    if (!v3)
      goto LABEL_8;
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerMerge(MRNowPlayingPlayerRef, MRNowPlayingPlayerRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 371, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

  }
  if (v10)
    objc_msgSend(v10, "mergeFrom:", v3);
LABEL_8:

}

uint64_t MRNowPlayingPlayerPathCreateSkeletonFrom(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerPathRef MRNowPlayingPlayerPathCreateSkeletonFrom(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 397, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "skeleton");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

void MRNowPlayingPlayerPathSetOrigin(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a1;
  v3 = a2;
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerPathSetOrigin(MRNowPlayingPlayerPathRef, MROriginRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_class();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 426, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    if (!v3)
      goto LABEL_6;
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerPathSetOrigin(MRNowPlayingPlayerPathRef, MROriginRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 427, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

  }
LABEL_6:
  objc_msgSend(v10, "setOrigin:", v3);

}

void MRNowPlayingPlayerPathSetClient(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a1;
  v3 = a2;
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerPathSetClient(MRNowPlayingPlayerPathRef, MRNowPlayingClientRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_class();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 435, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    if (!v3)
      goto LABEL_6;
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerPathSetClient(MRNowPlayingPlayerPathRef, MRNowPlayingClientRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 436, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

  }
LABEL_6:
  objc_msgSend(v10, "setClient:", v3);

}

void MRNowPlayingPlayerPathSetPlayer(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a1;
  v3 = a2;
  if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerPathSetPlayer(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerRef)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_class();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 444, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    if (!v3)
      goto LABEL_6;
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRNowPlayingPlayerPathSetPlayer(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_class();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRNowPlayingPlayerPath.m"), 445, CFSTR("Type mismatch, expecting %@ found %@"), v9, objc_opt_class());

  }
LABEL_6:
  objc_msgSend(v10, "setPlayer:", v3);

}

MRPlayerPath *MRNowPlayingPlayerPathCreateFromExternalRepresentation(uint64_t a1)
{
  return -[MRPlayerPath initWithData:]([MRPlayerPath alloc], "initWithData:", a1);
}

uint64_t MRNowPlayingPlayerPathCreateExternalRepresentation(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFDataRef MRNowPlayingPlayerPathCreateExternalRepresentation(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 457, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "data");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t MRNowPlayingPlayerPathClientEqualToPlayerPathClient(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v3 = a1;
  v4 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRNowPlayingPlayerPathClientEqualToPlayerPathClient(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_opt_class();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRNowPlayingPlayerPath.m"), 474, CFSTR("Type mismatch, expecting %@ found %@"), v13, objc_opt_class());

    if (!v4)
      goto LABEL_6;
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRNowPlayingPlayerPathClientEqualToPlayerPathClient(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_opt_class();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRNowPlayingPlayerPath.m"), 475, CFSTR("Type mismatch, expecting %@ found %@"), v16, objc_opt_class());

  }
LABEL_6:
  if (v3 == v4)
  {
    v9 = 1;
  }
  else
  {
    objc_msgSend(v3, "origin");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "origin");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "isEqual:", v6))
    {
      objc_msgSend(v3, "client");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "client");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v7, "isEqual:", v8);

    }
    else
    {
      v9 = 0;
    }

  }
  return v9;
}

uint64_t MRNowPlayingPlayerPathGetIsResolved(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRNowPlayingPlayerPathGetIsResolved(MRNowPlayingPlayerPathRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 483, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v2 = objc_msgSend(v1, "isResolved");

  return v2;
}

void MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  char v9;
  id *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  _QWORD block[4];
  _QWORD v19[2];
  char v20;

  v5 = a2;
  v6 = a3;
  v7 = a1;
  if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(MRNowPlayingPlayerPathRef, _Bool))");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_opt_class();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRNowPlayingPlayerPath.m"), 511, CFSTR("Type mismatch, expecting %@ found %@"), v13, objc_opt_class());

    if (!v6)
      goto LABEL_12;
  }
  else if (!v6)
  {
    goto LABEL_12;
  }
  if (!v5)
  {
    v5 = MEMORY[0x1E0C80D38];
    v8 = MEMORY[0x1E0C80D38];
  }
  if (objc_msgSend(v7, "isResolved"))
  {
    if (!v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal(MRNowPlayingPlayerPathRef, __strong dispatch_queue_t, void (^__strong)(MRNowPlayingPlayerPathRef, _Bool))");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRNowPlayingPlayerPath.m"), 517, CFSTR("NULL playerPath cannot be 'resolved'"));

    }
    v9 = objc_msgSend(v7, "isLocal");
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal_block_invoke;
    block[3] = &unk_1E30CD4A0;
    v10 = (id *)v19;
    v19[0] = v6;
    v19[1] = v7;
    v20 = v9;
    dispatch_async(v5, block);
  }
  else
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal_block_invoke_2;
    v16[3] = &unk_1E30C7B60;
    v10 = &v17;
    v17 = v6;
    MRMediaRemoteNowPlayingResolvePlayerPath(v7, v5, v16);
  }

LABEL_12:
}

uint64_t MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocalSync(void *a1, _QWORD *a2)
{
  dispatch_semaphore_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[4];
  NSObject *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocalSync(MRNowPlayingPlayerPathRef, MRNowPlayingPlayerPathRef *)");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_opt_class();
      objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRNowPlayingPlayerPath.m"), 531, CFSTR("Type mismatch, expecting %@ found %@"), v12, objc_opt_class());

    }
  }
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__34;
  v21 = __Block_byref_object_dispose__34;
  v22 = 0;
  v4 = dispatch_semaphore_create(0);
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "workerQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocalSync_block_invoke;
  v13[3] = &unk_1E30CD4C8;
  v15 = &v23;
  v16 = &v17;
  v7 = v4;
  v14 = v7;
  MRMediaRemoteNowPlayingGetResolvedPlayerPathIsLocal(a1, v6, v13);

  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
  if (a2)
    *a2 = (id)v18[5];
  v8 = *((unsigned __int8 *)v24 + 24);

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);
  return v8;
}

void sub_1939F3BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t MRMediaRemoteNowPlayingPlayerPathCreateError(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t ErrorWithUserInfo;
  void *v16;
  void *v17;
  uint64_t v18;
  const __CFString *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v9 = 0;
    v10 = 27;
    goto LABEL_15;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFErrorRef MRMediaRemoteNowPlayingPlayerPathCreateError(MRNowPlayingPlayerPathRef)");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_opt_class();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("MRNowPlayingPlayerPath.m"), 554, CFSTR("Type mismatch, expecting %@ found %@"), v18, objc_opt_class());

  }
  objc_msgSend(v1, "origin");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
  {
    v9 = 0;
    v10 = 5;
    goto LABEL_15;
  }
  objc_msgSend(v1, "client");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
    goto LABEL_14;
  v4 = (void *)v3;
  objc_msgSend(v1, "client");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "processIdentifier"))
  {

    goto LABEL_14;
  }
  objc_msgSend(v1, "client");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "bundleIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
LABEL_14:
    v9 = 0;
    v10 = 35;
    goto LABEL_15;
  }
  objc_msgSend(v1, "player");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = v8 != 0;
  if (v8)
    v10 = 0;
  else
    v10 = 29;
LABEL_15:
  v19 = CFSTR("playerPathDescription");
  objc_msgSend(v1, "description");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v20[0] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)

  if (v9)
    ErrorWithUserInfo = 0;
  else
    ErrorWithUserInfo = MRMediaRemoteCreateErrorWithUserInfo(v10, (uint64_t)v13);

  return ErrorWithUserInfo;
}

uint64_t MRNowPlayingPlayerPathCopyStringRepresentation(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRNowPlayingPlayerPathCopyStringRepresentation(MRNowPlayingPlayerRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRNowPlayingPlayerPath.m"), 582, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  objc_msgSend(v1, "description");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t MRNowPlayingPlayerPathResolveExternalDevicePlayerPath(void *a1, uint64_t a2)
{
  id v3;
  MRPlayerPath *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = a1;
  if (v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRNowPlayingPlayerPathRef MRNowPlayingPlayerPathResolveExternalDevicePlayerPath(MRNowPlayingPlayerPathRef, MROriginRef)");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_opt_class();
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MRNowPlayingPlayerPath.m"), 589, CFSTR("Type mismatch, expecting %@ found %@"), v11, objc_opt_class());

    }
  }
  v4 = [MRPlayerPath alloc];
  objc_msgSend(v3, "client");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "player");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[MRPlayerPath initWithOrigin:client:player:](v4, "initWithOrigin:client:player:", a2, v5, v6);

  return v7;
}

void *MRMediaRemoteGetLocalNowPlayingClient()
{
  void *v0;

  +[MRClient localClient](MRClient, "localClient");
  v0 = (void *)objc_claimAutoreleasedReturnValue();

  return v0;
}

void *MRMediaRemoteGetDefaultNowPlayingPlayer()
{
  void *v0;

  +[MRPlayer defaultPlayer](MRPlayer, "defaultPlayer");
  v0 = (void *)objc_claimAutoreleasedReturnValue();

  return v0;
}

void *MRMediaRemoteGetLocalNowPlayingPlayerPath()
{
  void *v0;

  +[MRPlayerPath localPlayerPath](MRPlayerPath, "localPlayerPath");
  v0 = (void *)objc_claimAutoreleasedReturnValue();

  return v0;
}

uint64_t MRMediaRemoteNowPlayingCopyResolvedPlayerPath(void *a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  _QWORD *v17;

  v3 = a1;
  v4 = (uint64_t)v3;
  if ((objc_msgSend(v3, "isResolved") & 1) == 0)
  {
    +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "activePlayerPath");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
      goto LABEL_13;
    objc_msgSend(v3, "origin");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "origin");
    v8 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "client");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "client");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "player");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "player");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = a2;
    if (v7 && !objc_msgSend(v7, "isEqual:", v8) || v9 && !objc_msgSend(v9, "isEqual:", v10))
    {
      v13 = (void *)v8;
    }
    else
    {
      v13 = (void *)v8;
      if (!v11 || objc_msgSend(v11, "isEqual:", v12))
      {
        v4 = objc_msgSend(v6, "copy");
        v14 = 0;
        goto LABEL_12;
      }
    }
    v14 = 1;
LABEL_12:

    a2 = v17;
    if (!v14)
    {
LABEL_14:

      goto LABEL_15;
    }
LABEL_13:
    v15 = (void *)MRGetSharedService();
    v4 = MRMediaRemoteServiceCopyResolvedPlayerPath(v15, v3, a2);
    goto LABEL_14;
  }
LABEL_15:

  return v4;
}

void MRMediaRemoteRemovePlayerPathInvalidationHandler(uint64_t a1)
{
  id v2;

  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeInvalidationHandler:", a1);

}

uint64_t _MRRegisterForGameControllerEventsMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGetVolumeControlCapabilitiesResultMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRVolumeControlAvailabilityProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRVolumeControlAvailabilityProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (_MRVolumeControlAvailabilityProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *MRHIDTouchPhaseCopyDescription(unsigned int a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E30CD770[a1];
}

uint64_t MRHIDTouchEventCopyDescription(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;

  v1 = *(int *)(a1 + 8);
  if (v1 > 5)
    v2 = 0;
  else
    v2 = off_1E30CD770[v1];
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("{\n\tpoint = {%f, %f}\n\tphase = %@\n\ttimestamp = %llu\n\tfinger = %u\n}"), *(float *)a1, *(float *)(a1 + 4), v2, *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

CFStringRef MRHIDButtonEventCopyDescription(unint64_t a1, char a2)
{
  const char *v2;

  v2 = "true";
  if ((a2 & 1) == 0)
    v2 = "false";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("{\n\tusagePage = %u\n\tusage = %u\n\tdown = %s\n}"), a1, HIDWORD(a1), v2);
}

BOOL _MRPlayerClientParticipantsUpdateMessageProtobufReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRNowPlayingPlayerPathProtobuf *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_MRPlaybackQueueParticipantProtobuf);
    objc_msgSend(a1, "addParticipants:", v17);
    if (!PBReaderPlaceMark() || !_MRPlaybackQueueParticipantProtobufReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSupportedCommandsProtobufReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRCommandInfoProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRCommandInfoProtobuf);
        objc_msgSend(a1, "addSupportedCommand:", v17);
        if (!PBReaderPlaceMark() || (_MRCommandInfoProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MRMediaRemoteApplicationSupportsBrowsableContent(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  void *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean MRMediaRemoteApplicationSupportsBrowsableContent(CFStringRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRBrowsableContent.m"), 41, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("bundleID"));

  }
  v8[0] = CFSTR("com.apple.developer.playable-content");
  v2 = (void *)MRMediaRemoteCopyApplicationEntitlements(a1, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1));
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("com.apple.developer.playable-content"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

id _MRMediaRemoteApplicationValueForKeyInBundle(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyForIdentifier:", a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      v5 = (void *)MEMORY[0x1E0CB34D0];
      objc_msgSend(v3, "bundleURL");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "bundleWithURL:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "infoDictionary");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "objectForKey:", a2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

uint64_t MRMediaRemoteApplicationSupportsSectionedBrowsing(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  _MRMediaRemoteApplicationValueForKeyInBundle(a1, (uint64_t)CFSTR("UIBrowsableContentSupportsSectionedBrowsing"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

uint64_t MRMediaRemoteApplicationSupportsImmediatePlayback(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  _MRMediaRemoteApplicationValueForKeyInBundle(a1, (uint64_t)CFSTR("UIBrowsableContentSupportsImmediatePlayback"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

uint64_t MRMediaRemoteBeginLoadingBrowsableContent(void *a1, const void *a2, uint64_t a3)
{
  id v3;
  id v4;
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const void *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14 = a3;
  v3 = a1;
  v4 = objc_alloc(MEMORY[0x1E0CB3940]);
  v5 = MRMediaRemoteIndexPathCopyDescription(&v13);
  v6 = (void *)objc_msgSend(v4, "initWithFormat:", CFSTR("bundleID=%@, indexPath=%@"), v3, v5);

  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("beginLoadingBrowsableContent"), 0);
  v8 = v7;
  if (v6)
    objc_msgSend(v7, "appendFormat:", CFSTR(" for %@"), v6);
  _MRLogForCategory(0xAuLL);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v16 = v8;
    _os_log_impl(&dword_193827000, v9, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v10 = (void *)MRGetSharedService();
  v11 = MRMediaRemoteServiceBeginLoadingBrowsableContent(v10, v3, v13, v14);

  return v11;
}

__CFString *MRMediaRemoteIndexPathCopyDescription(_QWORD *a1)
{
  __CFString *Mutable;
  uint64_t v3;
  unsigned int v4;

  if (!a1)
    return 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1[1])
  {
    v3 = 0;
    v4 = 1;
    do
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("%llu "), *(_QWORD *)(*a1 + 8 * v3));
      v3 = v4;
    }
    while (a1[1] > (unint64_t)v4++);
  }
  return Mutable;
}

void MRMediaRemoteBrowsableContentGetNowPlayingContentIdentifiers(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  __CFString *v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0C99D68];
  v7 = a2;
  objc_msgSend(v6, "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = a1;
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("nowPlayingContentIdentifiers"), v10);
  v13 = v12;
  if (v11)
    objc_msgSend(v12, "appendFormat:", CFSTR(" for %@"), v11);
  _MRLogForCategory(0xAuLL);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v27 = v13;
    _os_log_impl(&dword_193827000, v14, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v15 = (void *)MRGetSharedService();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __MRMediaRemoteBrowsableContentGetNowPlayingContentIdentifiers_block_invoke;
  v20[3] = &unk_1E30CD808;
  v21 = v11;
  v22 = CFSTR("nowPlayingContentIdentifiers");
  v23 = v10;
  v24 = v8;
  v25 = v5;
  v16 = v5;
  v17 = v8;
  v18 = v10;
  v19 = v11;
  MRMediaRemoteServiceCopyBrowsableContentNowPlayingIdentifiers(v15, v19, v7, v20);

}

void MRMediaRemoteBrowsableContentSupportsPlaybackProgress(void *a1, const void *a2, uint64_t a3, void *a4, void *a5)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  __CFString *v29;
  id v30;
  id v31;
  id v32;
  const void *v33;
  uint64_t v34;
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v34 = a3;
  v7 = a5;
  v8 = (void *)MEMORY[0x1E0C99D68];
  v9 = a4;
  objc_msgSend(v8, "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = a1;
  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  v15 = MRMediaRemoteIndexPathCopyDescription(&v33);
  v16 = (void *)objc_msgSend(v14, "initWithFormat:", CFSTR("bundleID=%@, indexPath=%@"), v13, v15);

  v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("supportsBrowsableContentPlaybackProgress"), v12);
  v18 = v17;
  if (v16)
    objc_msgSend(v17, "appendFormat:", CFSTR(" for %@"), v16);
  _MRLogForCategory(0xAuLL);
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v36 = v18;
    _os_log_impl(&dword_193827000, v19, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v20 = (void *)MRGetSharedService();
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __MRMediaRemoteBrowsableContentSupportsPlaybackProgress_block_invoke;
  v27[3] = &unk_1E30CD830;
  v28 = v16;
  v29 = CFSTR("supportsBrowsableContentPlaybackProgress");
  v30 = v12;
  v31 = v10;
  v32 = v7;
  v21 = v33;
  v22 = v34;
  v23 = v7;
  v24 = v10;
  v25 = v12;
  v26 = v16;
  MRMediaRemoteServiceGetBrowsableContentSupportsPlaybackProgress(v20, v13, v21, v22, v9, v27);

}

void MRMediaRemoteGetCountOfBrowsableContentChildItems(void *a1, const void *a2, uint64_t a3, void *a4, void *a5)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  __CFString *v29;
  id v30;
  id v31;
  id v32;
  const void *v33;
  uint64_t v34;
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v34 = a3;
  v7 = a5;
  v8 = (void *)MEMORY[0x1E0C99D68];
  v9 = a4;
  objc_msgSend(v8, "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = a1;
  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  v15 = MRMediaRemoteIndexPathCopyDescription(&v33);
  v16 = (void *)objc_msgSend(v14, "initWithFormat:", CFSTR("bundleID=%@, indexPath=%@"), v13, v15);

  v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("countOfBrowsableContentChildItems"), v12);
  v18 = v17;
  if (v16)
    objc_msgSend(v17, "appendFormat:", CFSTR(" for %@"), v16);
  _MRLogForCategory(0xAuLL);
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v36 = v18;
    _os_log_impl(&dword_193827000, v19, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v20 = (void *)MRGetSharedService();
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __MRMediaRemoteGetCountOfBrowsableContentChildItems_block_invoke;
  v27[3] = &unk_1E30CD858;
  v28 = v16;
  v29 = CFSTR("countOfBrowsableContentChildItems");
  v30 = v12;
  v31 = v10;
  v32 = v7;
  v21 = v33;
  v22 = v34;
  v23 = v7;
  v24 = v10;
  v25 = v12;
  v26 = v16;
  MRMediaRemoteServiceGetCountOfBrowsableContentChildItems(v20, v13, v21, v22, v9, v27);

}

void MRMediaRemoteGetBrowsableContentChildItems(void *a1, const void *a2, uint64_t a3, int64_t a4, int64_t a5, void *a6, void *a7)
{
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;
  int64_t v32;
  _QWORD v33[4];
  id v34;
  __CFString *v35;
  id v36;
  id v37;
  id v38;
  const void *v39;
  uint64_t v40;
  uint8_t buf[4];
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v39 = a2;
  v40 = a3;
  v11 = a7;
  v12 = (void *)MEMORY[0x1E0C99D68];
  v13 = a6;
  objc_msgSend(v12, "date");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "UUIDString");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = a1;
  v18 = objc_alloc(MEMORY[0x1E0CB3940]);
  v19 = MRMediaRemoteIndexPathCopyDescription(&v39);
  v31 = a4;
  v32 = a5;
  v20 = (void *)objc_msgSend(v18, "initWithFormat:", CFSTR("bundleID=%@, indexPath=%@, location=%ld, length=%ld"), v17, v19, a4, a5);

  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("browsableContentChildItems"), v16);
  v22 = v21;
  if (v20)
    objc_msgSend(v21, "appendFormat:", CFSTR(" for %@"), v20);
  _MRLogForCategory(0xAuLL);
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v42 = v22;
    _os_log_impl(&dword_193827000, v23, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v24 = (void *)MRGetSharedService();
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __MRMediaRemoteGetBrowsableContentChildItems_block_invoke;
  v33[3] = &unk_1E30CD808;
  v34 = v20;
  v35 = CFSTR("browsableContentChildItems");
  v36 = v16;
  v37 = v14;
  v38 = v11;
  v25 = v39;
  v26 = v40;
  v27 = v11;
  v28 = v14;
  v29 = v16;
  v30 = v20;
  MRMediaRemoteServiceCopyBrowsableContentChildItems(v24, v17, v25, v26, v31, v32, v13, v33);

}

void MRMediaRemoteRequestPlaybackInitialization(void *a1, const void *a2, uint64_t a3)
{
  __CFString *v4;
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = a3;
  v4 = MRMediaRemoteIndexPathCopyDescription(&v10);
  v5 = a1;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("browsableContentPlaybackInitalization"), v5);
  v7 = v6;
  if (v4)
    objc_msgSend(v6, "appendFormat:", CFSTR(" for %@"), v4);
  _MRLogForCategory(0xAuLL);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v13 = v7;
    _os_log_impl(&dword_193827000, v8, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v9 = (void *)MRGetSharedService();
  MRMediaRemoteServiceRequestPlaybackInitialization(v9, v5, v10, v11);

}

void MRMediaRemotePostBrowsableContentNotification(void *a1, void *a2)
{
  void *v4;

  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServicePostBrowsableContentNotification(v4, a1, a2);
}

void MRMediaRemoteGetContentItemsForIdentifiers(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  __CFString *v26;
  id v27;
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = (void *)MEMORY[0x1E0C99D68];
  v9 = a3;
  objc_msgSend(v8, "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = a1;
  v14 = a2;
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("bundleID=%@, identifiers=%@"), v13, v14);
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("supportedBrowsableContentAPIs"), v12);
  v17 = v16;
  if (v15)
    objc_msgSend(v16, "appendFormat:", CFSTR(" for %@"), v15);
  _MRLogForCategory(0xAuLL);
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v31 = v17;
    _os_log_impl(&dword_193827000, v18, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v19 = (void *)MRGetSharedService();
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __MRMediaRemoteGetContentItemsForIdentifiers_block_invoke;
  v24[3] = &unk_1E30CD880;
  v25 = v15;
  v26 = CFSTR("supportedBrowsableContentAPIs");
  v27 = v12;
  v28 = v10;
  v29 = v7;
  v20 = v7;
  v21 = v10;
  v22 = v12;
  v23 = v15;
  MRMediaRemoteServiceGetContentItemsForIdentifiers(v19, v13, v14, v9, v24);

}

void MRMediaRemoteSetBrowsableContentEndpoint(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint8_t buf[4];
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%p"), a1);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("setBrowsableContentEndpoint"), 0);
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "appendFormat:", CFSTR(" for %@"), v2);
  _MRLogForCategory(0xAuLL);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v8 = v4;
    _os_log_impl(&dword_193827000, v5, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v6 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetBrowsableContentEndpoint((uint64_t)v6, a1);
  MRMediaRemoteServicePostBrowsableContentNotification(v6, CFSTR("kMRMediaRemoteBrowsableContentEndpointChangedNotification"), 0);

}

void MRMediaRemoteGetSupportedBrowsableContentAPIs(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  __CFString *v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0C99D68];
  v7 = a2;
  objc_msgSend(v6, "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = a1;
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("supportedBrowsableContentAPIs"), v10);
  v13 = v12;
  if (v11)
    objc_msgSend(v12, "appendFormat:", CFSTR(" for %@"), v11);
  _MRLogForCategory(0xAuLL);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v27 = v13;
    _os_log_impl(&dword_193827000, v14, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v15 = (void *)MRGetSharedService();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __MRMediaRemoteGetSupportedBrowsableContentAPIs_block_invoke;
  v20[3] = &unk_1E30CD8A8;
  v21 = v11;
  v22 = CFSTR("supportedBrowsableContentAPIs");
  v23 = v10;
  v24 = v8;
  v25 = v5;
  v16 = v5;
  v17 = v8;
  v18 = v10;
  v19 = v11;
  MRMediaRemoteServiceGetSupportedBrowsableContentAPI(v15, v19, v7, v20);

}

const __CFString *MRMediaRemoteCopyBrowsableContentAPIMaskDescription(char a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  const __CFString *v7;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = v3;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("BeginLoadingContent"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v4, "addObject:", CFSTR("PlaybackProgress"));
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  objc_msgSend(v4, "addObject:", CFSTR("ContentFetching"));
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  objc_msgSend(v4, "addObject:", CFSTR("InitiatePlayback"));
  if ((a1 & 0x20) == 0)
  {
LABEL_6:
    if ((a1 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_14:
  objc_msgSend(v4, "addObject:", CFSTR("InitializePlaybackQueue"));
  if ((a1 & 0x40) != 0)
LABEL_7:
    objc_msgSend(v4, "addObject:", CFSTR("ContextChanges"));
LABEL_8:
  if (objc_msgSend(v4, "count"))
  {
    v5 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (const __CFString *)objc_msgSend(v5, "initWithFormat:", CFSTR("(%@)"), v6);

  }
  else
  {
    v7 = CFSTR("(None)");
  }

  objc_autoreleasePoolPop(v2);
  return v7;
}

void MRMediaRemoteGetAppsSupportingBrowsableContentAPIs(unsigned int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  __CFString *v18;
  _QWORD v19[4];
  __CFString *v20;
  __CFString *v21;
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a2;
  v7 = (__CFString *)MRMediaRemoteCopyBrowsableContentAPIMaskDescription(a1);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("appsSupportingBrowsableContentAPIs"), v10);
  v12 = v11;
  if (v7)
    objc_msgSend(v11, "appendFormat:", CFSTR(" for %@"), v7);
  _MRLogForCategory(0xAuLL);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v26 = v12;
    _os_log_impl(&dword_193827000, v13, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v14 = (void *)MRGetSharedService();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __MRMediaRemoteGetAppsSupportingBrowsableContentAPIs_block_invoke;
  v19[3] = &unk_1E30CD8D0;
  v20 = v7;
  v21 = CFSTR("appsSupportingBrowsableContentAPIs");
  v22 = v10;
  v23 = v8;
  v24 = v5;
  v15 = v5;
  v16 = v8;
  v17 = v10;
  v18 = v7;
  MRMediaRemoteServiceGetAppsSupportingBrowsableContentAPIs(v14, a1, v6, v19);

}

void MRMediaRemoteSetSupportedBrowsableContentAPIs(unsigned int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  __CFString *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a2;
  v7 = (__CFString *)MRMediaRemoteCopyBrowsableContentAPIMaskDescription(a1);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("setSupportedBrowsableContentAPIs"), 0);
  v9 = v8;
  if (v7)
    objc_msgSend(v8, "appendFormat:", CFSTR(" for %@"), v7);
  _MRLogForCategory(0xAuLL);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v13 = v9;
    _os_log_impl(&dword_193827000, v10, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v11 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetSupportedBrowsableContentAPI(v11, a1, v6, v5);

}

void MRMediaRemoteInvalidateBrowsableContent()
{
  void *v0;
  NSObject *v1;
  void *v2;
  uint8_t buf[4];
  void *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("invalidateBrowsableContentDataSource"), 0);
  _MRLogForCategory(0xAuLL);
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v4 = v0;
    _os_log_impl(&dword_193827000, v1, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v2 = (void *)MRGetSharedService();
  MRMediaRemoteServicePostBrowsableContentNotification(v2, CFSTR("kMRMediaRemoteApplicationInvalidatedBrowsableContentDataSourceNotification"), 0);

}

void MRMediaRemoteUpdateNowPlayingIdentifiers(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint8_t buf[4];
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = CFSTR("kMRMediaRemoteUpdatedNowPlayingIdentifiersInfoKey");
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("setBrowsableContentNowPlayingIdentifiers"), 0);
  v4 = v3;
  if (v1)
    objc_msgSend(v3, "appendFormat:", CFSTR(" for %@"), v1);
  _MRLogForCategory(0xAuLL);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v8 = v4;
    _os_log_impl(&dword_193827000, v5, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v6 = (void *)MRGetSharedService();
  MRMediaRemoteServicePostBrowsableContentNotification(v6, CFSTR("kMRMediaRemoteBrowsableContentNowPlayingIdentifiersUpdatedNotification"), v2);

}

void MRMediaRemoteUpdateBrowsableContentItems(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *ExternalRepresentation;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  __CFString *v14;
  __CFString *v15;
  NSObject *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  const __CFString *v24;
  void *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    v7 = *MEMORY[0x1E0C9AE00];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        ExternalRepresentation = (void *)MRContentItemCreateExternalRepresentation(v7, *(void **)(*((_QWORD *)&v18 + 1) + 8 * v8));
        objc_msgSend(v2, "addObject:", ExternalRepresentation);

        ++v8;
      }
      while (v5 != v8);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v5);
  }

  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v2, 200, 0, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = CFSTR("kMRMediaRemoteUpdatedContentItemsDataUserInfoKey");
  v25 = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_alloc(MEMORY[0x1E0CB37A0]);
  v13 = (void *)objc_msgSend(v12, "initWithFormat:", CFSTR("%@<%@>"), CFSTR("setBrowsableContentItems"), 0, (_QWORD)v18);
  v14 = (__CFString *)MRContentItemsCopyMinimalReadableDescription(v3, 0);

  if (v14)
  {
    v15 = (__CFString *)MRContentItemsCopyMinimalReadableDescription(v3, 0);
    objc_msgSend(v13, "appendFormat:", CFSTR(" for %@"), v15);

  }
  _MRLogForCategory(0xAuLL);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v23 = v13;
    _os_log_impl(&dword_193827000, v16, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v17 = (void *)MRGetSharedService();
  MRMediaRemoteServicePostBrowsableContentNotification(v17, CFSTR("kMRMediaRemoteContentItemsUpdatedNotification"), v11);

}

void MRMediaRemoteFinishedPlaybackInitialization(uint64_t a1, uint64_t a2, __CFError *a3)
{
  void *v4;
  void *v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[2];
  uint8_t buf[4];
  void *v17;
  const __CFString *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v15[0] = a1;
  v15[1] = a2;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a1, 8 * a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = CFSTR("kMRMediaRemoteIndexPathDataUserInfoKey");
  v19[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "mutableCopy");

  if (a3)
  {
    v7 = (__CFString *)CFErrorCopyDescription(a3);
    if (v7)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("kMRMediaRemoteBrowsableContentErrorLocalizedDescriptionKey"));
    v8 = (void *)-[__CFString copy]((id)CFErrorGetDomain(a3), "copy");
    if (v8)
    {
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("kMRMediaRemoteBrowsableContentErrorDomainKey"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", CFErrorGetCode(a3));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("kMRMediaRemoteBrowsableContentErrorCodeKey"));

    }
  }
  v10 = MRMediaRemoteIndexPathCopyDescription(v15);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", CFSTR("%@<%@>"), CFSTR("finishedBrowsableContentPlaybackInitialization"), 0);
  v12 = v11;
  if (v10)
    objc_msgSend(v11, "appendFormat:", CFSTR(" for %@"), v10);
  _MRLogForCategory(0xAuLL);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v17 = v12;
    _os_log_impl(&dword_193827000, v13, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v14 = (void *)MRGetSharedService();
  MRMediaRemoteServicePostBrowsableContentNotification(v14, CFSTR("kMRMediaRemoteApplicationInitiatedPlaybackOfContentItemNotification"), v6);

}

void sub_1939FFFE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A0006C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A000D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A0172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_193A0221C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_193A02B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_193A03648(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193A03F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193A04E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_193A05914(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

Class initAVAudioSession_2()
{
  Class result;

  if (AVFoundationLibrary_sOnce_8 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_8, &__block_literal_global_159);
  result = objc_getClass("AVAudioSession");
  classAVAudioSession_2 = (uint64_t)result;
  getAVAudioSessionClass_2[0] = (uint64_t (*)())AVAudioSessionFunction_2;
  return result;
}

id AVAudioSessionFunction_2()
{
  return (id)classAVAudioSession_2;
}

BOOL _MRDestinationProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  _MRAVEndpointDescriptorProtobuf *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_29;
      case 2u:
        v19 = objc_alloc_init(_MRAVEndpointDescriptorProtobuf);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (!PBReaderPlaceMark() || (_MRAVEndpointDescriptorProtobufReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_34;
        goto LABEL_27;
      case 3u:
        v19 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 32), v19);
        if (PBReaderPlaceMark()
          && _MRNowPlayingPlayerPathProtobufReadFrom((id *)&v19->super.super.isa, a2))
        {
LABEL_27:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_34:

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_29:
        v19 = *(_MRAVEndpointDescriptorProtobuf **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;
        goto LABEL_30;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_31;
    }
  }
}

uint64_t _MRVolumeMutedDidChangeMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGroupSessionLeaderDiscoveryMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MRGroupSessionAllowsMigrationForEndpoint(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = a1;
  objc_msgSend(v1, "groupSessionInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v1, "designatedGroupLeader");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "transportType") != 6;

  }
  else
  {
    v4 = 1;
  }

  return v4;
}

__CFString *NSStringFromMRAVEndpointConnectionType(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E30CE760[a1];
}

void sub_193A0A174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A0E480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193A110E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 224), 8);
  _Block_object_dispose((const void *)(v43 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193A16034(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_193A1D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *MRAVEndpointCreateUniqueIdentifier(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  __CFString *v7;
  uint64_t v9;

  v5 = a2;
  v6 = a3;
  switch(a1)
  {
    case 1:
      v7 = CFSTR("LOCAL");
      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("direct://%@"), v5, v9);
      goto LABEL_9;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("relay://%@/%@"), v5, v6);
      goto LABEL_9;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("airplay://%@"), v6, v9);
      goto LABEL_9;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("remote-hosted://%@/%@"), v5, v6);
      goto LABEL_9;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("local-hosted://%@/%@"), v5, v6);
LABEL_9:
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v7 = 0;
      break;
  }

  return v7;
}

void OUTLINED_FUNCTION_4_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x2Au);
}

uint64_t OUTLINED_FUNCTION_13(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 48));
}

uint64_t OUTLINED_FUNCTION_16(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 48));
}

uint64_t MRExternalDeviceCopyUniqueIdentifier(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v7;
  void *v8;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRExternalDeviceCopyUniqueIdentifier(MRExternalDeviceRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 25, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "deviceInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "copy");

  objc_autoreleasePoolPop(v2);
  return v5;
}

uint64_t MRExternalDeviceCopyName(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRExternalDeviceCopyName(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRExternalDevice_Deprecated.m"), 35, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRExternalDeviceCopyHostName(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRExternalDeviceCopyHostName(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRExternalDevice_Deprecated.m"), 45, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "hostName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRExternalDeviceCopySystemBuildVersion(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v7;
  void *v8;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef MRExternalDeviceCopySystemBuildVersion(MRExternalDeviceRef)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 55, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "deviceInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "buildVersion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "copy");

  objc_autoreleasePoolPop(v2);
  return v5;
}

uint64_t MRExternalDeviceGetNetworkPort(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int64_t MRExternalDeviceGetNetworkPort(MRExternalDeviceRef)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 66, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "port");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRExternalDeviceCopyDeviceInfo(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRPairedDeviceRef MRExternalDeviceCopyDeviceInfo(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRExternalDevice_Deprecated.m"), 76, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "deviceInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

void MRExternalDeviceSetNameCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetNameCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceNameCallback)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 91, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setNameCallback:withQueue:", v5, v9);
  objc_autoreleasePoolPop(v6);

}

uint64_t MRExternalDeviceIsValid(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isValid");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRExternalDeviceCopyCustomOrigin(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MROriginRef MRExternalDeviceCopyCustomOrigin(MRExternalDeviceRef)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 113, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "customOrigin");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRExternalDeviceSetWantsNowPlayingUpdates(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetWantsNowPlayingUpdates(MRExternalDeviceRef, _Bool)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 123, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setWantsNowPlayingNotifications:", a2);
  objc_autoreleasePoolPop(v4);
}

void MRExternalDeviceSetWantsNowPlayingArtworkUpdates(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetWantsNowPlayingArtworkUpdates(MRExternalDeviceRef, _Bool)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 133, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setWantsNowPlayingArtworkNotifications:", a2);
  objc_autoreleasePoolPop(v4);
}

void MRExternalDeviceSetWantsVolumeUpdates(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetWantsVolumeUpdates(MRExternalDeviceRef, _Bool)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 143, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setWantsVolumeNotifications:", a2);
  objc_autoreleasePoolPop(v4);
}

void MRExternalDeviceSetWantsOutputDeviceUpdates(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetWantsOutputDeviceUpdates(MRExternalDeviceRef, _Bool)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 153, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v4 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setWantsOutputDeviceNotifications:", a2);
  objc_autoreleasePoolPop(v4);
}

void MRExternalDeviceGetVolume(void *a1, void *a2, void *a3)
{
  MRExternalDeviceGetOutputDeviceUIDVolume(a1, 0, a2, a3);
}

void MRExternalDeviceGetOutputDeviceUIDVolume(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v7 = a3;
  v8 = a4;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceGetOutputDeviceUIDVolume(MRExternalDeviceRef, CFStringRef, __strong dispatch_queue_t, __strong MRExternalDeviceGetVolumeCallback)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRExternalDevice_Deprecated.m"), 175, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v9 = (void *)MEMORY[0x194036A64]();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __MRExternalDeviceGetOutputDeviceUIDVolume_block_invoke;
  v13[3] = &unk_1E30CBBE8;
  v10 = v8;
  v14 = v10;
  objc_msgSend(a1, "outputDeviceVolume:queue:completion:", a2, v7, v13);

  objc_autoreleasePoolPop(v9);
}

void MRExternalDeviceGetOutputDeviceVolume(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const void *v9;

  v7 = a4;
  v8 = a3;
  v9 = (const void *)MRAVOutputDeviceCopyUniqueIdentifier(a2);
  MRExternalDeviceGetOutputDeviceUIDVolume(a1, (uint64_t)v9, v8, v7);

  if (v9)
    CFRelease(v9);
}

void MRExternalDeviceSetVolume(void *a1, void *a2, void *a3, float a4)
{
  MRExternalDeviceSetOutputDeviceUIDVolume(a1, 0, a2, a3, a4);
}

void MRExternalDeviceSetOutputDeviceUIDVolume(void *a1, uint64_t a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;

  v9 = a3;
  v10 = a4;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetOutputDeviceUIDVolume(MRExternalDeviceRef, CFStringRef, float, __strong dispatch_queue_t, __strong MRExternalDeviceSetVolumeCallback)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("MRExternalDevice_Deprecated.m"), 201, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v11 = (void *)MEMORY[0x194036A64]();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __MRExternalDeviceSetOutputDeviceUIDVolume_block_invoke;
  v16[3] = &unk_1E30C6798;
  v12 = v10;
  v17 = v12;
  *(float *)&v13 = a5;
  objc_msgSend(a1, "setOutputDeviceVolume:outputDeviceUID:queue:completion:", a2, v9, v16, v13);

  objc_autoreleasePoolPop(v11);
}

void MRExternalDeviceSetOutputDeviceVolume(void *a1, void *a2, void *a3, void *a4, float a5)
{
  id v9;
  id v10;
  const void *v11;

  v9 = a4;
  v10 = a3;
  v11 = (const void *)MRAVOutputDeviceCopyUniqueIdentifier(a2);
  MRExternalDeviceSetOutputDeviceUIDVolume(a1, (uint64_t)v11, v10, v9, a5);

  if (v11)
    CFRelease(v11);
}

void MRExternalDeviceSetVolumeChangedCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetVolumeChangedCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceVolumeCallback)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 215, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setVolumeCallback:withQueue:", v5, v9);
  objc_autoreleasePoolPop(v6);

}

void MRExternalDeviceSendButtonEvent(void *a1, uint64_t a2, unsigned int a3)
{
  void *v6;
  void *v7;
  void *v8;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSendButtonEvent(MRExternalDeviceRef, MRHIDButtonEvent)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 225, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "sendButtonEvent:", a2, a3);
  objc_autoreleasePoolPop(v6);
}

BOOL MRExternalDeviceIsConnected(void *a1)
{
  void *v2;
  _BOOL8 v3;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRExternalDeviceIsConnected(MRExternalDeviceRef)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 235, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "connectionState") == 2;
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRExternalDeviceConnect(void *a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceConnect(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRExternalDevice_Deprecated.m"), 245, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v8 = CFSTR("MRExternalDeviceConnectionReasonUserInfoKey");
  v9[0] = CFSTR("deprecated");
  v3 = (void *)MEMORY[0x1E0C99D80];
  v4 = a1;
  objc_msgSend(v3, "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "connectWithOptions:userInfo:", 0, v5);

  objc_autoreleasePoolPop(v2);
}

void MRExternalDeviceConnectEx(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceConnectEx(MRExternalDeviceRef, MRExternalDeviceConnectOptions)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("MRExternalDevice_Deprecated.m"), 257, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v4 = (void *)MEMORY[0x194036A64]();
  v10 = CFSTR("MRExternalDeviceConnectionReasonUserInfoKey");
  v11[0] = CFSTR("deprecated");
  v5 = (void *)MEMORY[0x1E0C99D80];
  v6 = a1;
  objc_msgSend(v5, "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "connectWithOptions:userInfo:", a2, v7);

  objc_autoreleasePoolPop(v4);
}

void MRExternalDeviceDisconnect(void *a1)
{
  void *v2;
  id v3;
  void *Error;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceDisconnect(MRExternalDeviceRef)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 269, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = a1;
  Error = (void *)MRMediaRemoteCreateError(104);
  objc_msgSend(v3, "disconnect:", Error);

  objc_autoreleasePoolPop(v2);
}

uint64_t MRExternalDeviceGetConnectionState(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MRExternalDeviceConnectionState MRExternalDeviceGetConnectionState(MRExternalDeviceRef)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("MRExternalDevice_Deprecated.m"), 280, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "connectionState");
  objc_autoreleasePoolPop(v2);
  return v3;
}

void MRExternalDeviceSetConnectionStateCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetConnectionStateCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceConnectionStateCallback)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 292, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setConnectionStateCallback:withQueue:", v5, v9);
  objc_autoreleasePoolPop(v6);

}

void MRExternalDeviceSetPairingCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetPairingCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDevicePairingCallback)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 302, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setPairingCallback:withQueue:", v5, v9);
  objc_autoreleasePoolPop(v6);

}

uint64_t MRExternalDeviceIsPairingAllowed(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "_Bool MRExternalDeviceIsPairingAllowed(MRExternalDeviceRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRExternalDevice_Deprecated.m"), 312, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "deviceInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isPairingAllowed");

  objc_autoreleasePoolPop(v2);
  return v4;
}

void MRExternalDeviceSetPairingAllowedCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetPairingAllowedCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDevicePairingAllowedCallback)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 324, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setPairingAllowedCallback:withQueue:", v5, v9);
  objc_autoreleasePoolPop(v6);

}

uint64_t MRExternalDeviceIsPaired()
{
  return 1;
}

void MRExternalDeviceGetPairedDevices(void *a1)
{
  void (**v1)(id, id);
  void *v2;
  MRExternalDevicePairingSession *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceGetPairedDevices(void (^__strong)(CFArrayRef))");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRExternalDevice_Deprecated.m"), 344, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("completion"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = -[MRExternalDevicePairingSession initWithDevice:]([MRExternalDevicePairingSession alloc], "initWithDevice:", 0);
  -[MRExternalDevicePairingSession open](v3, "open");
  -[MRExternalDevicePairingSession pairedDevices](v3, "pairedDevices");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i));
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  v1[2](v1, v5);
  objc_autoreleasePoolPop(v2);

}

void MRExternalDeviceDeletePairedDevice(uint64_t a1)
{
  void *v2;
  MRDeviceInfo *v3;
  MRExternalDevicePairingSession *v4;
  id v5;
  void *v6;
  void *v7;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceDeletePairedDevice(CFStringRef)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("MRExternalDevice_Deprecated.m"), 362, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("identifier"));

  }
  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_alloc_init(MRDeviceInfo);
  -[MRDeviceInfo setIdentifier:](v3, "setIdentifier:", a1);
  v4 = -[MRExternalDevicePairingSession initWithDevice:]([MRExternalDevicePairingSession alloc], "initWithDevice:", v3);
  -[MRExternalDevicePairingSession open](v4, "open");
  v5 = -[MRExternalDevicePairingSession removePeer](v4, "removePeer");

  objc_autoreleasePoolPop(v2);
}

void MRExternalDeviceRequestOutputContextModification(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  void *v14;
  id v15;
  MRRequestDetails *v16;
  void *v17;
  void *v18;
  MRRequestDetails *v19;
  uint64_t v20;
  id v21;
  MRGroupTopologyModificationRequest *v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;

  v12 = a6;
  v13 = a7;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceRequestOutputContextModification(MRExternalDeviceRef, MRAVOutputContextType, CFArrayRef, CFArrayRef, CFArrayRef, __strong dispatch_queue_t, void (^__strong)(CFErrorRef))");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("MRExternalDevice_Deprecated.m"), 382, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v14 = (void *)MEMORY[0x194036A64]();
  v15 = a1;
  v16 = [MRRequestDetails alloc];
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "UUIDString");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[MRRequestDetails initWithName:requestID:reason:](v16, "initWithName:requestID:reason:", CFSTR("MRExternalDeviceRequestOutputContextModification"), v18, 0);

  if (objc_msgSend(a3, "count"))
  {
    v20 = 1;
  }
  else if (objc_msgSend(a4, "count"))
  {
    v20 = 2;
    a3 = a4;
  }
  else
  {
    if (!objc_msgSend(a5, "count"))
    {
      v20 = 0;
      v21 = 0;
      goto LABEL_10;
    }
    v20 = 3;
    a3 = a5;
  }
  v21 = a3;
LABEL_10:
  v22 = -[MRGroupTopologyModificationRequest initWithRequestDetails:type:outputDeviceUIDs:]([MRGroupTopologyModificationRequest alloc], "initWithRequestDetails:type:outputDeviceUIDs:", v19, v20, v21);
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __MRExternalDeviceRequestOutputContextModification_block_invoke;
  v26[3] = &unk_1E30C6798;
  v23 = v13;
  v27 = v23;
  objc_msgSend(v15, "modifyTopologyWithRequest:withReplyQueue:completion:", v22, v12, v26);

  objc_autoreleasePoolPop(v14);
}

void MRExternalDeviceSetCustomDataCallback(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSetCustomDataCallback(MRExternalDeviceRef, __strong dispatch_queue_t, __strong MRExternalDeviceCustomDataCallback)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 417, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  }
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "setCustomDataCallback:withQueue:", v5, v9);
  objc_autoreleasePoolPop(v6);

}

void MRExternalDeviceSendCustomData(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSendCustomData(MRExternalDeviceRef, CFStringRef, CFDataRef)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("MRExternalDevice_Deprecated.m"), 430, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("name"));

    if (a3)
      goto LABEL_4;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSendCustomData(MRExternalDeviceRef, CFStringRef, CFDataRef)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("MRExternalDevice_Deprecated.m"), 431, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("data"));

    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDeviceSendCustomData(MRExternalDeviceRef, CFStringRef, CFDataRef)");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("MRExternalDevice_Deprecated.m"), 429, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

  if (!a2)
    goto LABEL_6;
LABEL_3:
  if (!a3)
    goto LABEL_7;
LABEL_4:
  v6 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "sendCustomData:withName:", a3, a2);
  objc_autoreleasePoolPop(v6);
}

void MRExternalDevicePing(void *a1, void *a2, void *a3, double a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v7 = a3;
  v8 = v7;
  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDevicePing(MRExternalDeviceRef, CFTimeInterval, __strong dispatch_queue_t, __strong MRExternalDevicePingCallback)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("MRExternalDevice_Deprecated.m"), 441, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("device"));

    if (v8)
      goto LABEL_3;
LABEL_5:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRExternalDevicePing(MRExternalDeviceRef, CFTimeInterval, __strong dispatch_queue_t, __strong MRExternalDevicePingCallback)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MRExternalDevice_Deprecated.m"), 442, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("callback"));

    goto LABEL_3;
  }
  if (!v7)
    goto LABEL_5;
LABEL_3:
  v9 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "ping:callback:withQueue:", v8, v14, a4);
  objc_autoreleasePoolPop(v9);

}

CFStringRef MRExternalDeviceConnectionStateCopyDescription(unsigned int a1)
{
  const __CFString *v1;

  if (a1 > 3)
    v1 = 0;
  else
    v1 = off_1E30CE798[a1];
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

CFStringRef MRExternalDeviceConnectOptionsCopyDescription(char a1)
{
  const __CFString *v1;

  if ((a1 & 1) != 0)
    v1 = CFSTR("(EnableSystemAuthenticationPrompt)");
  else
    v1 = CFSTR("(None)");
  return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1);
}

uint64_t MRAVOutputDeviceTypeFromAVType(unint64_t a1)
{
  if (a1 < 5)
    return (a1 + 1);
  else
    return 0;
}

unint64_t MRAVOutputDeviceClusterTypeFromAVClusterType(unint64_t result)
{
  if (result < 3)
    return dword_193ADA554[result];
  return result;
}

Class initNINearbyObject()
{
  Class result;

  if (NearbyInteractionLibrary_sOnce != -1)
    dispatch_once(&NearbyInteractionLibrary_sOnce, &__block_literal_global_205_0);
  result = objc_getClass("NINearbyObject");
  classNINearbyObject = (uint64_t)result;
  getNINearbyObjectClass = (uint64_t (*)())NINearbyObjectFunction;
  return result;
}

id NINearbyObjectFunction()
{
  return (id)classNINearbyObject;
}

uint64_t MRPowerLogDeviceTypeFromDeviceInfo(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "deviceClass");
  if ((unint64_t)(v1 - 1) > 8)
    return -1;
  else
    return qword_193ADA560[v1 - 1];
}

uint64_t MRPowerLogConnectionTransportTypeFromTransport(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v2 = 2;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v2 = 3;
        else
          v2 = -1;
      }
    }
  }

  return v2;
}

uint64_t initPLLogRegisteredEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (PowerLogLibrary_sOnce != -1)
    dispatch_once(&PowerLogLibrary_sOnce, &__block_literal_global_36);
  softLinkPLLogRegisteredEvent = (uint64_t (*)())dlsym((void *)PowerLogLibrary_sLib, "PLLogRegisteredEvent");
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))softLinkPLLogRegisteredEvent)(a1, a2, a3, a4);
}

void sub_193A24480(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A24870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A248F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193A24980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193A265E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A26634(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A26AFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A26C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193A26E70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A27194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A274B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A27748(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A2796C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A27AD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A27BF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A27EE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A28068(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A2846C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  id *v11;
  id *v12;
  id *v13;
  id *v14;
  id *v15;
  id *v16;
  id *v17;
  id *v18;
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v20 - 112));
  _Unwind_Resume(a1);
}

void sub_193A284F8()
{
  JUMPOUT(0x193A284B8);
}

void sub_193A28500()
{
  JUMPOUT(0x193A284C0);
}

void sub_193A28508()
{
  JUMPOUT(0x193A284C8);
}

void sub_193A28510()
{
  JUMPOUT(0x193A284D0);
}

void sub_193A28518()
{
  JUMPOUT(0x193A284D8);
}

void sub_193A28520()
{
  JUMPOUT(0x193A284E0);
}

void sub_193A293DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A29520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_6(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 56));
}

uint64_t _MRVirtualTouchEventProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 8;
          goto LABEL_54;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 16;
LABEL_54:
          *(_QWORD *)(a1 + v38) = v20;
          continue;
        case 3u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_44;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_44:
          v37 = 28;
          goto LABEL_49;
        case 4u:
          v31 = 0;
          v32 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
          break;
        v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
        *(_QWORD *)(a2 + v33) = v35;
        v26 |= (unint64_t)(v36 & 0x7F) << v31;
        if ((v36 & 0x80) == 0)
          goto LABEL_46;
        v31 += 7;
        v15 = v32++ >= 9;
        if (v15)
        {
          LODWORD(v26) = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_48:
      v37 = 24;
LABEL_49:
      *(_DWORD *)(a1 + v37) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *NSStringFromMRPlayerAudioSessionType(uint64_t a1)
{
  uint64_t v1;

  v1 = 2 * (a1 == 2);
  if (a1 == 1)
    v1 = 1;
  return off_1E30CEAC0[v1];
}

uint64_t MRDeviceSupportsSystemAperture()
{
  return softLinkSBSIsSystemApertureAvailable();
}

void sub_193A2B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193A2B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A2B98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MRPrefersExpandedLockScreenPlatter()
{
  void *v0;
  uint64_t v1;

  +[MRUserSettings currentSettings](MRUserSettings, "currentSettings");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "prefersExpandedLockScreenPlatter");

  return v1;
}

void MRSetPrefersExpandedLockScreenPlatter(uint64_t a1)
{
  id v2;

  +[MRUserSettings currentSettings](MRUserSettings, "currentSettings");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setPrefersExpandedLockScreenPlatter:", a1);

}

void MRSetUIServiceRelayEndpoint(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  if (MRProcessIsUIService())
  {
    MRGetSharedService();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setUIServiceRelayEndpoint:", v2);

  }
}

uint64_t MRSupportsSystemUIActivities()
{
  if (MRSupportsSystemUIActivities_onceToken != -1)
    dispatch_once(&MRSupportsSystemUIActivities_onceToken, &__block_literal_global_216);
  return MRSupportsSystemUIActivities___supportsSystemUIActivities;
}

uint64_t MRUseInternalUI()
{
  void *v0;
  uint64_t v1;

  +[MRUserSettings currentSettings](MRUserSettings, "currentSettings");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "internalUI");

  return v1;
}

uint64_t initSBSIsSystemApertureAvailable()
{
  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_218_1);
  softLinkSBSIsSystemApertureAvailable = (uint64_t (*)())dlsym((void *)SpringBoardServicesLibrary_sLib, "SBSIsSystemApertureAvailable");
  return softLinkSBSIsSystemApertureAvailable();
}

uint64_t MRAVOutputDeviceArrayContainsLocalDevice(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v1);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * i), "isLocalDevice", (_QWORD)v6) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_11;
        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_11:

  return v2;
}

BOOL MRAVOutputDeviceArrayContainsOnlyLocalDevices(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v5), "isLocalDevice", (_QWORD)v8))
        {

          v6 = 0;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }

  v6 = objc_msgSend(v1, "count") != 0;
LABEL_11:

  return v6;
}

BOOL MRAVOutputDeviceArrayContainsOnlyAirPlayDevices(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v5), "deviceType", (_QWORD)v8) != 1)
        {

          v6 = 0;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }

  v6 = objc_msgSend(v1, "count") != 0;
LABEL_11:

  return v6;
}

BOOL MRAVOutputDeviceArrayContainsOnlyGroupableDevices(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v5), "isGroupable", (_QWORD)v8))
        {

          v6 = 0;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }

  v6 = objc_msgSend(v1, "count") != 0;
LABEL_11:

  return v6;
}

uint64_t MRAVOutputDeviceArrayNumberOfLogicalDevices(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v8, "logicalDeviceID", (_QWORD)v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
          objc_msgSend(v8, "logicalDeviceID");
        else
          objc_msgSend(v8, "uid");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v10);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  v11 = objc_msgSend(v2, "count");
  return v11;
}

id MRAVOutputDeviceArrayDescription(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v7), "debugName");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  v9 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (objc_msgSend(v2, "count") == 1)
  {
    objc_msgSend(v2, "firstObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v9, "initWithFormat:", CFSTR("%@"), v10);

  }
  else
  {
    v11 = (void *)objc_msgSend(v9, "initWithFormat:", CFSTR("%@"), v2);
  }

  return v11;
}

uint64_t MRAVOutputDeviceCopyLogicalDeviceID(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "logicalDeviceID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputDeviceGetName(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "name");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceGetUniqueIdentifier(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "uid");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyUniqueIdentifier(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "uid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputDeviceGetSubtype(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "deviceSubtype");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceGetModelID(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "modelID");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyFirmwareVersion(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "firmwareVersion");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputDeviceGetGroupIdentifier(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "groupID");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyGroupIdentifier(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "groupID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputDeviceGetMACAddress(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "MACAddress");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyMACAddress(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "MACAddress");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputDeviceCopyPlayingPairedDeviceName(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "playingPairedDeviceName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputDeviceCanAccessRemoteAssets(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "canAccessRemoteAssets");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceIsRemoteControllable(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isRemoteControllable");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCanRelayCommunicationChannel(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "canRelayCommunicationChannel");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceSupportsBufferedAirPlay(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "supportsBufferedAirPlay");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceIsGroupLeader(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isGroupLeader");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceGroupContainsGroupLeader(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "groupContainsGroupLeader");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceisAirPlayReceiverSessionActive(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isAirPlayReceiverSessionActive");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceParentGroupContainsDiscoverableLeader(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "parentGroupContainsDiscoverableLeader");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceParentGroupIdentifier(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "parentGroupIdentifier");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceIsGroupable(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isGroupable");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceSupportsBluetoothSharing(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "supportsBluetoothSharing");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceIsProxyGroupPlayer(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isProxyGroupPlayer");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceIsPickedOnPairedDevice(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isPickedOnPairedDevice");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceIsVolumeControlAvailable(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isVolumeControlAvailable");
  objc_autoreleasePoolPop(v2);
  return v3;
}

float MRAVOutputDeviceGetBatteryLevel(void *a1)
{
  void *v2;
  float v3;
  float v4;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "batteryLevel");
  v4 = v3;
  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t MRAVOutputDeviceCanAccessAppleMusic(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "canAccessAppleMusic");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCanPlayEncryptedProgressiveDownloadAssets(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "canPlayEncryptedProgressiveDownloadAssets");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCanFetchMediaDataFromSender(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "canFetchMediaDataFromSender");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDevicePresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceGetModelSpecificInformation(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "modelSpecificInfo");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceSupportsExternalScreen(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "supportsExternalScreen");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceRequiresAuthorization(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "requiresAuthorization");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCreateLocalDevice()
{
  return 0;
}

MRAVConcreteOutputDevice *MRAVOutputDeviceCreateFromAVOutputDevice(void *a1)
{
  id v1;
  MRAVOutputDeviceSourceInfo *v2;
  void *v3;
  MRAVOutputDeviceSourceInfo *v4;
  MRAVConcreteOutputDevice *v5;

  v1 = a1;
  v2 = [MRAVOutputDeviceSourceInfo alloc];
  objc_msgSend(v1, "deviceID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[MRAVOutputDeviceSourceInfo initWithRoutingContextUID:multipleBuiltInDevices:](v2, "initWithRoutingContextUID:multipleBuiltInDevices:", v3, 0);

  v5 = -[MRAVConcreteOutputDevice initWithAVOutputDevice:sourceInfo:]([MRAVConcreteOutputDevice alloc], "initWithAVOutputDevice:sourceInfo:", v1, v4);
  return v5;
}

void MRAVOutputDeviceSetRecentAVOutputDeviceUID(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  v6 = (void *)MRGetSharedService();
  MRMediaRemoteServiceSetRecentAVOutputDeviceUID(v6, v7, a1, v5);

}

void MRAVOutputDeviceGetRecentAVOutputDeviceUIDs(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = a1;
  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServiceGetRecentAVOutputDeviceUIDs(v4, v5, v3);

}

uint64_t MRAVOutputDeviceGetAVOutputDevice(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = objc_msgSend(v1, "avOutputDevice");
  else
    v2 = 0;

  return v2;
}

uint64_t MRAVCopyOutputDevicesSubstitutingLocalDevice()
{
  return 0;
}

void MRAVOutputDeviceRemoveFromParentGroup(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = (void *)MRGetSharedService();
  MRMediaRemoteServiceRemoveFromParentGroup(v7, a1, v8, v5);
  objc_autoreleasePoolPop(v6);

}

uint64_t MRAVOutputDeviceSupportsRapport(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "supportsRapport");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceIsAddedToHomeKit(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isAddedToHomeKit");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyBluetoothID(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "bluetoothID");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyCurrentBluetoothListeningMode(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "currentBluetoothListeningMode");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceSetCurrentBluetoothListeningMode(void *a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v19;
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    _MRLogForCategory(0);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v7, "debugName");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v9;
      v24 = 2114;
      v25 = a2;
      _os_log_impl(&dword_193827000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ - Setting listening mode: %{public}@", buf, 0x16u);

    }
    v21 = 0;
    v10 = objc_msgSend(v7, "setCurrentBluetoothListeningMode:error:", a2, &v21);
    v11 = v21;
    if (!v11)
      goto LABEL_16;
LABEL_13:
    _MRLogForCategory(0);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v7, "debugName");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v23 = v19;
      v24 = 2114;
      v25 = a2;
      v26 = 2114;
      v27 = v11;
      _os_log_error_impl(&dword_193827000, v17, OS_LOG_TYPE_ERROR, "%{public}@ - Failed to set listening mode: %{public}@ - error: %{public}@", buf, 0x20u);

    }
    goto LABEL_16;
  }
  +[MRAVLocalEndpoint sharedLocalEndpoint](MRAVLocalEndpoint, "sharedLocalEndpoint");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "outputDeviceForUID:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    _MRLogForCategory(0);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v7, "debugName");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v16;
      v24 = 2114;
      v25 = a2;
      _os_log_impl(&dword_193827000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@ - Setting listening mode: %{public}@", buf, 0x16u);

    }
    v20 = 0;
    v10 = objc_msgSend(v14, "setCurrentBluetoothListeningMode:error:", a2, &v20);
    v11 = v20;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }

  if (v11)
    goto LABEL_13;
LABEL_16:
  if (a3)
    *a3 = v11;

  objc_autoreleasePoolPop(v6);
  return v10;
}

uint64_t MRAVOutputDeviceCopyAvailableBluetoothListeningMode(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "availableBluetoothListeningModes");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceSupportsHeadTrackedSpatialAudio(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "supportsHeadTrackedSpatialAudio");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceAllowsHeadTrackedSpatialAudio(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "allowsHeadTrackedSpatialAudio");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceSetAllowsHeadTrackedSpatialAudio(void *a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v11;

  v6 = (void *)MEMORY[0x194036A64]();
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = 0;
    v8 = objc_msgSend(v7, "setAllowsHeadTrackedSpatialAudio:error:", a2, &v11);
    v9 = v11;
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = 0;
  v8 = 0;
  if (a3)
LABEL_5:
    *a3 = v9;
LABEL_6:

  objc_autoreleasePoolPop(v6);
  return v8;
}

uint64_t MRAVOutputDeviceCopyHeadTrackedSpatialAudioMode(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "headTrackedSpatialAudioMode");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceHeadTrackedSpatialAudioActive(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  v3 = objc_msgSend(a1, "isHeadTrackedSpatialAudioActive");
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MRAVOutputDeviceCopyDNSNames(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x194036A64]();
  objc_msgSend(a1, "dnsNames");
  v3 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v3;
}

void sub_193A2D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_13(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

uint64_t _MRRequestDetailsProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_24:
          v20 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 4u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 52) |= 2u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if (v26 < 0)
              {
                v21 += 7;
                v14 = v22++ >= 9;
                if (v14)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_49;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_49:
          *(_DWORD *)(a1 + 24) = v23;
          continue;
        case 5u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 52) |= 1u;
          while (2)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
              *(_QWORD *)(a2 + v30) = v31 + 1;
              v29 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v14 = v28++ >= 9;
                if (v14)
                {
                  v29 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v29 = 0;
LABEL_53:
          *(_QWORD *)(a1 + 8) = v29;
          continue;
        case 6u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_BYTE *)(a1 + 52) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v36 = *v3;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          break;
        v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
        *(_QWORD *)(a2 + v36) = v37 + 1;
        v35 |= (unint64_t)(v38 & 0x7F) << v33;
        if ((v38 & 0x80) == 0)
          goto LABEL_55;
        v33 += 7;
        v14 = v34++ >= 9;
        if (v14)
        {
          v35 = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      if (*(_BYTE *)(a2 + *v5))
        v35 = 0;
LABEL_57:
      *(_BYTE *)(a1 + 48) = v35 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRRegisterVoiceInputDeviceResponseMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR____MRRegisterVoiceInputDeviceResponseMessageProtobuf__deviceID;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR____MRRegisterVoiceInputDeviceResponseMessageProtobuf__deviceID;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR____MRRegisterVoiceInputDeviceResponseMessageProtobuf__deviceID;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR____MRRegisterVoiceInputDeviceResponseMessageProtobuf__errorCode;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR____MRRegisterVoiceInputDeviceResponseMessageProtobuf__errorCode;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR____MRRegisterVoiceInputDeviceResponseMessageProtobuf__errorCode;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

MRNowPlayingArtworkImage *MRNowPlayingArtworkCreateWithImageData(uint64_t a1, uint64_t a2)
{
  return -[MRNowPlayingArtworkImage initWithImageData:mimeType:]([MRNowPlayingArtworkImage alloc], "initWithImageData:mimeType:", a1, a2);
}

uint64_t MRNowPlayingArtworkCopyIOSurface()
{
  return 0;
}

uint64_t _MRSendCommandMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _MRNowPlayingPlayerPathProtobuf *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark()
          || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v24->super.super.isa, a2))
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_39:
            *(_DWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(_MRCommandOptionsProtobuf);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (_MRCommandOptionsProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRSetVolumeMutedMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _MRRequestDetailsProtobuf *v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(_MRRequestDetailsProtobuf);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || (_MRRequestDetailsProtobufReadFrom((uint64_t)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v25;

      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_35;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_37:
        *(_BYTE *)(a1 + 24) = v20 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_193A32818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_193A329AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _MRCommandOptionsProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t result;
  char v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char v222;
  _MRSystemPlaybackQueueProtobuf *v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char v251;
  void *v252;
  uint64_t v253;
  unint64_t v254;
  BOOL v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 424;
        goto LABEL_315;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 208;
        goto LABEL_315;
      case 4u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_QWORD *)(a1 + 496) |= 0x20000000uLL;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if (v26 < 0)
            {
              v20 += 7;
              v15 = v21++ >= 9;
              if (v15)
              {
                v22 = 0;
                goto LABEL_322;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_322:
        v255 = v22 != 0;
        v256 = 480;
        goto LABEL_440;
      case 5u:
        *(_QWORD *)(a1 + 496) |= 0x100000uLL;
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        v259 = 416;
        goto LABEL_466;
      case 6u:
        *(_QWORD *)(a1 + 496) |= 0x800uLL;
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        v259 = 260;
        goto LABEL_466;
      case 7u:
        *(_QWORD *)(a1 + 496) |= 0x8000uLL;
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        v259 = 344;
        goto LABEL_466;
      case 8u:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_QWORD *)(a1 + 496) |= 0x40000000uLL;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v15 = v35++ >= 9;
              if (v15)
              {
                v36 = 0;
                goto LABEL_326;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_326:
        v255 = v36 != 0;
        v256 = 481;
        goto LABEL_440;
      case 9u:
        *(_QWORD *)(a1 + 496) |= 8uLL;
        v41 = *v3;
        v42 = *(_QWORD *)(a2 + v41);
        if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v42);
          *(_QWORD *)(a2 + v41) = v42 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v260 = 32;
        goto LABEL_471;
      case 0xAu:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x10000uLL;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v15 = v45++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_330;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_330:
        v257 = 360;
        goto LABEL_445;
      case 0xBu:
        v51 = 0;
        v52 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x80000uLL;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v55;
            v46 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v15 = v52++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_334;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_334:
        v257 = 392;
        goto LABEL_445;
      case 0xCu:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_QWORD *)(a1 + 496) |= 0x80uLL;
        while (2)
        {
          v60 = *v3;
          v61 = *(_QWORD *)(a2 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
            *(_QWORD *)(a2 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v15 = v58++ >= 9;
              if (v15)
              {
                v59 = 0;
                goto LABEL_338;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
LABEL_338:
        v258 = 64;
        goto LABEL_343;
      case 0xDu:
        v64 = 0;
        v65 = 0;
        v59 = 0;
        *(_QWORD *)(a1 + 496) |= 0x10uLL;
        while (2)
        {
          v66 = *v3;
          v67 = *(_QWORD *)(a2 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
            *(_QWORD *)(a2 + v66) = v68;
            v59 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              v15 = v65++ >= 9;
              if (v15)
              {
                v59 = 0;
                goto LABEL_342;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
LABEL_342:
        v258 = 40;
LABEL_343:
        *(_QWORD *)(a1 + v258) = v59;
        goto LABEL_472;
      case 0xEu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 336;
        goto LABEL_315;
      case 0xFu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 448;
        goto LABEL_315;
      case 0x10u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 136;
        goto LABEL_315;
      case 0x11u:
        v70 = 0;
        v71 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x40000uLL;
        while (2)
        {
          v72 = *v3;
          v73 = *(_QWORD *)(a2 + v72);
          v74 = v73 + 1;
          if (v73 == -1 || v74 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
            *(_QWORD *)(a2 + v72) = v74;
            v46 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              v15 = v71++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_347;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_347:
        v257 = 368;
        goto LABEL_445;
      case 0x12u:
        v76 = 0;
        v77 = 0;
        v78 = 0;
        *(_QWORD *)(a1 + 496) |= 0x1000000000uLL;
        while (2)
        {
          v79 = *v3;
          v80 = *(_QWORD *)(a2 + v79);
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v80);
            *(_QWORD *)(a2 + v79) = v81;
            v78 |= (unint64_t)(v82 & 0x7F) << v76;
            if (v82 < 0)
            {
              v76 += 7;
              v15 = v77++ >= 9;
              if (v15)
              {
                v78 = 0;
                goto LABEL_351;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v78 = 0;
LABEL_351:
        v255 = v78 != 0;
        v256 = 487;
        goto LABEL_440;
      case 0x13u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 120;
        goto LABEL_315;
      case 0x14u:
        v83 = 0;
        v84 = 0;
        v85 = 0;
        *(_QWORD *)(a1 + 496) |= 0x4000000000uLL;
        while (2)
        {
          v86 = *v3;
          v87 = *(_QWORD *)(a2 + v86);
          v88 = v87 + 1;
          if (v87 == -1 || v88 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v87);
            *(_QWORD *)(a2 + v86) = v88;
            v85 |= (unint64_t)(v89 & 0x7F) << v83;
            if (v89 < 0)
            {
              v83 += 7;
              v15 = v84++ >= 9;
              if (v15)
              {
                v85 = 0;
                goto LABEL_355;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v85 = 0;
LABEL_355:
        v255 = v85 != 0;
        v256 = 489;
        goto LABEL_440;
      case 0x15u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 432;
        goto LABEL_315;
      case 0x16u:
        v90 = 0;
        v91 = 0;
        v92 = 0;
        *(_QWORD *)(a1 + 496) |= 0x2000000000uLL;
        while (2)
        {
          v93 = *v3;
          v94 = *(_QWORD *)(a2 + v93);
          v95 = v94 + 1;
          if (v94 == -1 || v95 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v94);
            *(_QWORD *)(a2 + v93) = v95;
            v92 |= (unint64_t)(v96 & 0x7F) << v90;
            if (v96 < 0)
            {
              v90 += 7;
              v15 = v91++ >= 9;
              if (v15)
              {
                v92 = 0;
                goto LABEL_359;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v92 = 0;
LABEL_359:
        v255 = v92 != 0;
        v256 = 488;
        goto LABEL_440;
      case 0x17u:
        v97 = 0;
        v98 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x200uLL;
        while (2)
        {
          v99 = *v3;
          v100 = *(_QWORD *)(a2 + v99);
          v101 = v100 + 1;
          if (v100 == -1 || v101 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v100);
            *(_QWORD *)(a2 + v99) = v101;
            v46 |= (unint64_t)(v102 & 0x7F) << v97;
            if (v102 < 0)
            {
              v97 += 7;
              v15 = v98++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_363;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_363:
        v257 = 252;
        goto LABEL_445;
      case 0x18u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 112;
        goto LABEL_315;
      case 0x19u:
        v103 = 0;
        v104 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x400uLL;
        while (2)
        {
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          v107 = v106 + 1;
          if (v106 == -1 || v107 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
            *(_QWORD *)(a2 + v105) = v107;
            v46 |= (unint64_t)(v108 & 0x7F) << v103;
            if (v108 < 0)
            {
              v103 += 7;
              v15 = v104++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_367;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_367:
        v257 = 256;
        goto LABEL_445;
      case 0x1Au:
        v109 = 0;
        v110 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x100uLL;
        while (2)
        {
          v111 = *v3;
          v112 = *(_QWORD *)(a2 + v111);
          v113 = v112 + 1;
          if (v112 == -1 || v113 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v112);
            *(_QWORD *)(a2 + v111) = v113;
            v46 |= (unint64_t)(v114 & 0x7F) << v109;
            if (v114 < 0)
            {
              v109 += 7;
              v15 = v110++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_371;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_371:
        v257 = 248;
        goto LABEL_445;
      case 0x1Bu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 200;
        goto LABEL_315;
      case 0x1Cu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 240;
        goto LABEL_315;
      case 0x1Du:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 184;
        goto LABEL_315;
      case 0x1Eu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 216;
        goto LABEL_315;
      case 0x1Fu:
        v115 = 0;
        v116 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x20000uLL;
        while (2)
        {
          v117 = *v3;
          v118 = *(_QWORD *)(a2 + v117);
          v119 = v118 + 1;
          if (v118 == -1 || v119 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v118);
            *(_QWORD *)(a2 + v117) = v119;
            v46 |= (unint64_t)(v120 & 0x7F) << v115;
            if (v120 < 0)
            {
              v115 += 7;
              v15 = v116++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_375;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_375:
        v257 = 364;
        goto LABEL_445;
      case 0x20u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 96;
        goto LABEL_315;
      case 0x21u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 376;
        goto LABEL_315;
      case 0x22u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 352;
        goto LABEL_315;
      case 0x28u:
        v122 = 0;
        v123 = 0;
        v124 = 0;
        *(_QWORD *)(a1 + 496) |= 0x8000000uLL;
        while (2)
        {
          v125 = *v3;
          v126 = *(_QWORD *)(a2 + v125);
          v127 = v126 + 1;
          if (v126 == -1 || v127 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v128 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v126);
            *(_QWORD *)(a2 + v125) = v127;
            v124 |= (unint64_t)(v128 & 0x7F) << v122;
            if (v128 < 0)
            {
              v122 += 7;
              v15 = v123++ >= 9;
              if (v15)
              {
                v124 = 0;
                goto LABEL_379;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v124 = 0;
LABEL_379:
        v255 = v124 != 0;
        v256 = 478;
        goto LABEL_440;
      case 0x29u:
        v129 = 0;
        v130 = 0;
        v131 = 0;
        *(_QWORD *)(a1 + 496) |= 0x10000000uLL;
        while (2)
        {
          v132 = *v3;
          v133 = *(_QWORD *)(a2 + v132);
          v134 = v133 + 1;
          if (v133 == -1 || v134 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v135 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v133);
            *(_QWORD *)(a2 + v132) = v134;
            v131 |= (unint64_t)(v135 & 0x7F) << v129;
            if (v135 < 0)
            {
              v129 += 7;
              v15 = v130++ >= 9;
              if (v15)
              {
                v131 = 0;
                goto LABEL_383;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v131 = 0;
LABEL_383:
        v255 = v131 != 0;
        v256 = 479;
        goto LABEL_440;
      case 0x2Au:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 264;
        goto LABEL_315;
      case 0x2Bu:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 456;
        goto LABEL_315;
      case 0x2Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 192;
        goto LABEL_315;
      case 0x2Du:
        v136 = 0;
        v137 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x4000uLL;
        while (2)
        {
          v138 = *v3;
          v139 = *(_QWORD *)(a2 + v138);
          v140 = v139 + 1;
          if (v139 == -1 || v140 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v141 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v139);
            *(_QWORD *)(a2 + v138) = v140;
            v46 |= (unint64_t)(v141 & 0x7F) << v136;
            if (v141 < 0)
            {
              v136 += 7;
              v15 = v137++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_387;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_387:
        v257 = 332;
        goto LABEL_445;
      case 0x2Eu:
        v142 = 0;
        v143 = 0;
        v144 = 0;
        *(_QWORD *)(a1 + 496) |= 0x400000000uLL;
        while (2)
        {
          v145 = *v3;
          v146 = *(_QWORD *)(a2 + v145);
          v147 = v146 + 1;
          if (v146 == -1 || v147 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v148 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v146);
            *(_QWORD *)(a2 + v145) = v147;
            v144 |= (unint64_t)(v148 & 0x7F) << v142;
            if (v148 < 0)
            {
              v142 += 7;
              v15 = v143++ >= 9;
              if (v15)
              {
                v144 = 0;
                goto LABEL_391;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v144 = 0;
LABEL_391:
        v255 = v144 != 0;
        v256 = 485;
        goto LABEL_440;
      case 0x2Fu:
        v149 = 0;
        v150 = 0;
        v151 = 0;
        *(_QWORD *)(a1 + 496) |= 0x800000000uLL;
        while (2)
        {
          v152 = *v3;
          v153 = *(_QWORD *)(a2 + v152);
          v154 = v153 + 1;
          if (v153 == -1 || v154 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v155 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v153);
            *(_QWORD *)(a2 + v152) = v154;
            v151 |= (unint64_t)(v155 & 0x7F) << v149;
            if (v155 < 0)
            {
              v149 += 7;
              v15 = v150++ >= 9;
              if (v15)
              {
                v151 = 0;
                goto LABEL_395;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v151 = 0;
LABEL_395:
        v255 = v151 != 0;
        v256 = 486;
        goto LABEL_440;
      case 0x30u:
        v156 = 0;
        v157 = 0;
        v158 = 0;
        *(_QWORD *)(a1 + 496) |= 0x200000000uLL;
        while (2)
        {
          v159 = *v3;
          v160 = *(_QWORD *)(a2 + v159);
          v161 = v160 + 1;
          if (v160 == -1 || v161 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v162 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v160);
            *(_QWORD *)(a2 + v159) = v161;
            v158 |= (unint64_t)(v162 & 0x7F) << v156;
            if (v162 < 0)
            {
              v156 += 7;
              v15 = v157++ >= 9;
              if (v15)
              {
                v158 = 0;
                goto LABEL_399;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v158 = 0;
LABEL_399:
        v255 = v158 != 0;
        v256 = 484;
        goto LABEL_440;
      case 0x31u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 176;
        goto LABEL_315;
      case 0x32u:
        v163 = 0;
        v164 = 0;
        v165 = 0;
        *(_QWORD *)(a1 + 496) |= 0x10000000000uLL;
        while (2)
        {
          v166 = *v3;
          v167 = *(_QWORD *)(a2 + v166);
          v168 = v167 + 1;
          if (v167 == -1 || v168 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v169 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v167);
            *(_QWORD *)(a2 + v166) = v168;
            v165 |= (unint64_t)(v169 & 0x7F) << v163;
            if (v169 < 0)
            {
              v163 += 7;
              v15 = v164++ >= 9;
              if (v15)
              {
                v165 = 0;
                goto LABEL_403;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v165 = 0;
LABEL_403:
        v255 = v165 != 0;
        v256 = 491;
        goto LABEL_440;
      case 0x33u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 280;
        goto LABEL_315;
      case 0x34u:
        v170 = 0;
        v171 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x1000uLL;
        while (2)
        {
          v172 = *v3;
          v173 = *(_QWORD *)(a2 + v172);
          v174 = v173 + 1;
          if (v173 == -1 || v174 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v175 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v173);
            *(_QWORD *)(a2 + v172) = v174;
            v46 |= (unint64_t)(v175 & 0x7F) << v170;
            if (v175 < 0)
            {
              v170 += 7;
              v15 = v171++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_407;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_407:
        v257 = 296;
        goto LABEL_445;
      case 0x35u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 272;
        goto LABEL_315;
      case 0x36u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 304;
        goto LABEL_315;
      case 0x37u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 288;
        goto LABEL_315;
      case 0x38u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 312;
        goto LABEL_315;
      case 0x39u:
        v176 = 0;
        v177 = 0;
        v178 = 0;
        *(_QWORD *)(a1 + 496) |= 0x8000000000uLL;
        while (2)
        {
          v179 = *v3;
          v180 = *(_QWORD *)(a2 + v179);
          v181 = v180 + 1;
          if (v180 == -1 || v181 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v182 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v180);
            *(_QWORD *)(a2 + v179) = v181;
            v178 |= (unint64_t)(v182 & 0x7F) << v176;
            if (v182 < 0)
            {
              v176 += 7;
              v15 = v177++ >= 9;
              if (v15)
              {
                v178 = 0;
                goto LABEL_411;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v178 = 0;
LABEL_411:
        v255 = v178 != 0;
        v256 = 490;
        goto LABEL_440;
      case 0x3Au:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 232;
        goto LABEL_315;
      case 0x3Bu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 168;
        goto LABEL_315;
      case 0x3Cu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 160;
        goto LABEL_315;
      case 0x3Du:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 384;
        goto LABEL_315;
      case 0x3Eu:
        *(_QWORD *)(a1 + 496) |= 4uLL;
        v183 = *v3;
        v184 = *(_QWORD *)(a2 + v183);
        if (v184 <= 0xFFFFFFFFFFFFFFF7 && v184 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v184);
          *(_QWORD *)(a2 + v183) = v184 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v260 = 24;
        goto LABEL_471;
      case 0x3Fu:
        *(_QWORD *)(a1 + 496) |= 2uLL;
        v185 = *v3;
        v186 = *(_QWORD *)(a2 + v185);
        if (v186 <= 0xFFFFFFFFFFFFFFF7 && v186 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v186);
          *(_QWORD *)(a2 + v185) = v186 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v260 = 16;
        goto LABEL_471;
      case 0x40u:
        *(_QWORD *)(a1 + 496) |= 1uLL;
        v187 = *v3;
        v188 = *(_QWORD *)(a2 + v187);
        if (v188 <= 0xFFFFFFFFFFFFFFF7 && v188 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v188);
          *(_QWORD *)(a2 + v187) = v188 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v260 = 8;
        goto LABEL_471;
      case 0x41u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 224;
        goto LABEL_315;
      case 0x42u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 144;
        goto LABEL_315;
      case 0x43u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 128;
        goto LABEL_315;
      case 0x44u:
        v189 = 0;
        v190 = 0;
        v191 = 0;
        *(_QWORD *)(a1 + 496) |= 0x2000000uLL;
        while (2)
        {
          v192 = *v3;
          v193 = *(_QWORD *)(a2 + v192);
          v194 = v193 + 1;
          if (v193 == -1 || v194 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v195 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v193);
            *(_QWORD *)(a2 + v192) = v194;
            v191 |= (unint64_t)(v195 & 0x7F) << v189;
            if (v195 < 0)
            {
              v189 += 7;
              v15 = v190++ >= 9;
              if (v15)
              {
                v191 = 0;
                goto LABEL_415;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v191 = 0;
LABEL_415:
        v255 = v191 != 0;
        v256 = 476;
        goto LABEL_440;
      case 0x45u:
        v196 = 0;
        v197 = 0;
        v198 = 0;
        *(_QWORD *)(a1 + 496) |= 0x4000000uLL;
        while (2)
        {
          v199 = *v3;
          v200 = *(_QWORD *)(a2 + v199);
          v201 = v200 + 1;
          if (v200 == -1 || v201 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v202 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v200);
            *(_QWORD *)(a2 + v199) = v201;
            v198 |= (unint64_t)(v202 & 0x7F) << v196;
            if (v202 < 0)
            {
              v196 += 7;
              v15 = v197++ >= 9;
              if (v15)
              {
                v198 = 0;
                goto LABEL_419;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v198 = 0;
LABEL_419:
        v255 = v198 != 0;
        v256 = 477;
        goto LABEL_440;
      case 0x46u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 104;
        goto LABEL_315;
      case 0x47u:
        v203 = 0;
        v204 = 0;
        v205 = 0;
        *(_QWORD *)(a1 + 496) |= 0x80000000uLL;
        while (2)
        {
          v206 = *v3;
          v207 = *(_QWORD *)(a2 + v206);
          v208 = v207 + 1;
          if (v207 == -1 || v208 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v209 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v207);
            *(_QWORD *)(a2 + v206) = v208;
            v205 |= (unint64_t)(v209 & 0x7F) << v203;
            if (v209 < 0)
            {
              v203 += 7;
              v15 = v204++ >= 9;
              if (v15)
              {
                v205 = 0;
                goto LABEL_423;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v205 = 0;
LABEL_423:
        v255 = v205 != 0;
        v256 = 482;
        goto LABEL_440;
      case 0x48u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 408;
        goto LABEL_315;
      case 0x49u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 400;
        goto LABEL_315;
      case 0x4Au:
        v210 = 0;
        v211 = 0;
        v212 = 0;
        *(_QWORD *)(a1 + 496) |= 0x100000000uLL;
        while (2)
        {
          v213 = *v3;
          v214 = *(_QWORD *)(a2 + v213);
          v215 = v214 + 1;
          if (v214 == -1 || v215 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v216 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v214);
            *(_QWORD *)(a2 + v213) = v215;
            v212 |= (unint64_t)(v216 & 0x7F) << v210;
            if (v216 < 0)
            {
              v210 += 7;
              v15 = v211++ >= 9;
              if (v15)
              {
                v212 = 0;
                goto LABEL_427;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v212 = 0;
LABEL_427:
        v255 = v212 != 0;
        v256 = 483;
        goto LABEL_440;
      case 0x4Bu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 320;
        goto LABEL_315;
      case 0x4Cu:
        v217 = 0;
        v218 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x2000uLL;
        while (2)
        {
          v219 = *v3;
          v220 = *(_QWORD *)(a2 + v219);
          v221 = v220 + 1;
          if (v220 == -1 || v221 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v222 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v220);
            *(_QWORD *)(a2 + v219) = v221;
            v46 |= (unint64_t)(v222 & 0x7F) << v217;
            if (v222 < 0)
            {
              v217 += 7;
              v15 = v218++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_431;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_431:
        v257 = 328;
        goto LABEL_445;
      case 0x4Du:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
        goto LABEL_315;
      case 0x4Eu:
        v223 = objc_alloc_init(_MRSystemPlaybackQueueProtobuf);
        objc_storeStrong((id *)(a1 + 440), v223);
        if (!PBReaderPlaceMark() || (_MRSystemPlaybackQueueProtobufReadFrom((uint64_t)v223, a2) & 1) == 0)
          goto LABEL_474;
        goto LABEL_313;
      case 0x4Fu:
        v224 = 0;
        v225 = 0;
        v226 = 0;
        *(_QWORD *)(a1 + 496) |= 0x20000000000uLL;
        while (2)
        {
          v227 = *v3;
          v228 = *(_QWORD *)(a2 + v227);
          v229 = v228 + 1;
          if (v228 == -1 || v229 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v230 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v228);
            *(_QWORD *)(a2 + v227) = v229;
            v226 |= (unint64_t)(v230 & 0x7F) << v224;
            if (v230 < 0)
            {
              v224 += 7;
              v15 = v225++ >= 9;
              if (v15)
              {
                v226 = 0;
                goto LABEL_435;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v226 = 0;
LABEL_435:
        v255 = v226 != 0;
        v256 = 492;
        goto LABEL_440;
      case 0x50u:
        *(_QWORD *)(a1 + 496) |= 0x400000uLL;
        v231 = *v3;
        v232 = *(_QWORD *)(a2 + v231);
        if (v232 <= 0xFFFFFFFFFFFFFFFBLL && v232 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v232);
          *(_QWORD *)(a2 + v231) = v232 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        v259 = 464;
        goto LABEL_466;
      case 0x51u:
        *(_QWORD *)(a1 + 496) |= 0x1000000uLL;
        v233 = *v3;
        v234 = *(_QWORD *)(a2 + v233);
        if (v234 <= 0xFFFFFFFFFFFFFFFBLL && v234 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v234);
          *(_QWORD *)(a2 + v233) = v234 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        v259 = 472;
        goto LABEL_466;
      case 0x52u:
        *(_QWORD *)(a1 + 496) |= 0x800000uLL;
        v235 = *v3;
        v236 = *(_QWORD *)(a2 + v235);
        if (v236 <= 0xFFFFFFFFFFFFFFFBLL && v236 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v236);
          *(_QWORD *)(a2 + v235) = v236 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        v259 = 468;
LABEL_466:
        *(_DWORD *)(a1 + v259) = v29;
        goto LABEL_472;
      case 0x53u:
        v237 = 0;
        v238 = 0;
        v239 = 0;
        *(_QWORD *)(a1 + 496) |= 0x40000000000uLL;
        while (2)
        {
          v240 = *v3;
          v241 = *(_QWORD *)(a2 + v240);
          v242 = v241 + 1;
          if (v241 == -1 || v242 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v243 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v241);
            *(_QWORD *)(a2 + v240) = v242;
            v239 |= (unint64_t)(v243 & 0x7F) << v237;
            if (v243 < 0)
            {
              v237 += 7;
              v15 = v238++ >= 9;
              if (v15)
              {
                v239 = 0;
                goto LABEL_439;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v239 = 0;
LABEL_439:
        v255 = v239 != 0;
        v256 = 493;
LABEL_440:
        *(_BYTE *)(a1 + v256) = v255;
        goto LABEL_472;
      case 0x54u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 80;
        goto LABEL_315;
      case 0x55u:
        *(_QWORD *)(a1 + 496) |= 0x40uLL;
        v244 = *v3;
        v245 = *(_QWORD *)(a2 + v244);
        if (v245 <= 0xFFFFFFFFFFFFFFF7 && v245 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v245);
          *(_QWORD *)(a2 + v244) = v245 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v260 = 56;
        goto LABEL_471;
      case 0x56u:
        v246 = 0;
        v247 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 496) |= 0x200000uLL;
        while (2)
        {
          v248 = *v3;
          v249 = *(_QWORD *)(a2 + v248);
          v250 = v249 + 1;
          if (v249 == -1 || v250 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v251 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v249);
            *(_QWORD *)(a2 + v248) = v250;
            v46 |= (unint64_t)(v251 & 0x7F) << v246;
            if (v251 < 0)
            {
              v246 += 7;
              v15 = v247++ >= 9;
              if (v15)
              {
                LODWORD(v46) = 0;
                goto LABEL_444;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v46) = 0;
LABEL_444:
        v257 = 420;
LABEL_445:
        *(_DWORD *)(a1 + v257) = v46;
        goto LABEL_472;
      case 0x57u:
        v223 = objc_alloc_init(_MRDictionaryProtobuf);
        objc_storeStrong((id *)(a1 + 152), v223);
        if (PBReaderPlaceMark() && (_MRDictionaryProtobufReadFrom(v223, a2) & 1) != 0)
        {
LABEL_313:
          PBReaderRecallMark();

LABEL_472:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_474:

        return 0;
      case 0x58u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
LABEL_315:
        v252 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_472;
      case 0x59u:
        *(_QWORD *)(a1 + 496) |= 0x20uLL;
        v253 = *v3;
        v254 = *(_QWORD *)(a2 + v253);
        if (v254 <= 0xFFFFFFFFFFFFFFF7 && v254 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v43 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v254);
          *(_QWORD *)(a2 + v253) = v254 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v43 = 0;
        }
        v260 = 48;
LABEL_471:
        *(_QWORD *)(a1 + v260) = v43;
        goto LABEL_472;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_472;
    }
  }
}

uint64_t _MRRegisterVoiceInputDeviceMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRVoiceInputDeviceDescriptorProtobuf *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRVoiceInputDeviceDescriptorProtobuf);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || !_MRVoiceInputDeviceDescriptorProtobufReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_193A3D930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3DA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__49(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x194036C44](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_193A3DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3DEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3E0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3E270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3E438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3E7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3E990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3EB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A3F98C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_193A404B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A40608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A40A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193A40AC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A40B38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A40C70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A40DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193A40E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_193A40EC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A410AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A414A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A416C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A41CDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A41DA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A41F98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id AVSystemControllerFunction_0()
{
  return (id)classAVSystemController_0;
}

id AVSystemController_SubscribeToNotificationsAttributeFunction()
{
  return (id)constantValAVSystemController_SubscribeToNotificationsAttribute;
}

id AVSystemController_CanBeNowPlayingAppAttributeFunction_0()
{
  return (id)constantValAVSystemController_CanBeNowPlayingAppAttribute_0;
}

BOOL _MRDiscoveryUpdateEndpointsProtobufMessageReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRAVEndpointDescriptorProtobuf *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRAVEndpointDescriptorProtobuf);
        objc_msgSend(a1, "addEndpoints:", v17);
        if (!PBReaderPlaceMark() || (_MRAVEndpointDescriptorProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_MRDiscoverySessionConfigurationProtobuf);
    objc_storeStrong(a1 + 1, v17);
    if (!PBReaderPlaceMark()
      || (_MRDiscoverySessionConfigurationProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRRemoteArtworkProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 16;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRLyricsEventProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _MRLyricsTokenProtobuf *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v22 = objc_alloc_init(_MRLyricsTokenProtobuf);
        objc_storeStrong((id *)(a1 + 24), v22);
        if (!PBReaderPlaceMark() || !_MRLyricsTokenProtobufReadFrom((uint64_t)v22, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v26 = 8;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          *(_BYTE *)(a1 + 32) |= 2u;
          v19 = *v3;
          v20 = *(_QWORD *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
            *(_QWORD *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v26 = 16;
        }
        *(_QWORD *)(a1 + v26) = v21;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL _MRSendCommandResultHandlerDialogProtobufReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  _MRSendCommandResultHandlerDialogActionProtobuf *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 24;
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(_MRSendCommandResultHandlerDialogActionProtobuf);
        objc_msgSend(a1, "addActions:", v18);
        if (!PBReaderPlaceMark()
          || (_MRSendCommandResultHandlerDialogActionProtobufReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = 16;
LABEL_26:
    v18 = *(_MRSendCommandResultHandlerDialogActionProtobuf **)&a1[v20];
    *(_QWORD *)&a1[v20] = v19;
LABEL_27:

    goto LABEL_29;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRGroupSessionInfoProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  BOOL v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_38;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_38;
        case 3u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_49;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_49:
          *(_DWORD *)(a1 + 32) = v22;
          continue;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_53:
          v39 = v28 != 0;
          v40 = 36;
          goto LABEL_58;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
LABEL_38:
          v32 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 6u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v36 = *v3;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          break;
        v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
        *(_QWORD *)(a2 + v36) = v37 + 1;
        v35 |= (unint64_t)(v38 & 0x7F) << v33;
        if ((v38 & 0x80) == 0)
          goto LABEL_55;
        v33 += 7;
        v14 = v34++ >= 9;
        if (v14)
        {
          v35 = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      if (*(_BYTE *)(a2 + *v5))
        v35 = 0;
LABEL_57:
      v39 = v35 != 0;
      v40 = 37;
LABEL_58:
      *(_BYTE *)(a1 + v40) = v39;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

CFTypeRef MRContentItemGetSubtitle(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "subtitle");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetSubtitle(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetSubtitle(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 138, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetSubtitle_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

CFTypeRef MRContentItemGetClassicalWork(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "classicalWork");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetClassicalWork(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetClassicalWork(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 150, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetClassicalWork_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

CFTypeRef MRContentItemGetSeriesName(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "seriesName");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetSeriesName(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetSeriesName(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 209, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetSeriesName_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

CFTypeRef MRContentItemGetDirectorName(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "directorName");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetDirectorName(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetDirectorName(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 221, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetDirectorName_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetSeasonNumber(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "seasonNumber") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasSeasonNumber");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setSeasonNumber:", a2);

LABEL_8:
  }
}

void MRContentItemSetEpisodeNumber(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "episodeNumber") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasEpisodeNumber");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setEpisodeNumber:", a2);

LABEL_8:
  }
}

void MRContentItemSetPlayCount(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "playCount") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasPlayCount");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setPlayCount:", a2);

LABEL_8:
  }
}

void MRContentItemSetDiscNumber(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "discNumber") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasDiscNumber");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDiscNumber:", a2);

LABEL_8:
  }
}

void MRContentItemSetTotalDiscCount(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "totalDiscCount") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasTotalDiscCount");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTotalDiscCount:", a2);

LABEL_8:
  }
}

void MRContentItemSetTotalTrackCount(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "totalTrackCount") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasTotalTrackCount");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTotalTrackCount:", a2);

LABEL_8:
  }
}

uint64_t MRContentItemGetIsCurrentlyPlaying(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isCurrentlyPlaying");

  return v2;
}

void MRContentItemSetIsCurrentlyPlaying(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isCurrentlyPlaying") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasCurrentlyPlaying");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setCurrentlyPlaying:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetHasDuration(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "hasDuration");

  return v2;
}

float MRContentItemGetPlaybackProgress(void *a1)
{
  void *v1;
  float v2;
  float v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "playbackProgress");
  v3 = v2;

  return v3;
}

void MRContentItemSetPlaybackProgress(void *a1, float a2)
{
  void *v4;
  float v5;
  void *v6;
  char v7;
  void *v8;
  double v9;
  id v10;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v10 = a1;
    objc_msgSend(v10, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "playbackProgress");
    if (v5 == a2)
    {
      objc_msgSend(v10, "metadata");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasPlaybackProgress");

      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v10, "metadata");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(float *)&v9 = a2;
    objc_msgSend(v8, "setPlaybackProgress:", v9);

LABEL_8:
  }
}

void MRContentItemSetStartTime(void *a1, double a2)
{
  void *v4;
  double v5;
  void *v6;
  char v7;
  void *v8;
  id v9;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v9 = a1;
    objc_msgSend(v9, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "startTime");
    if (v5 == a2)
    {
      objc_msgSend(v9, "metadata");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasStartTime");

      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v9, "metadata");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setStartTime:", a2);

LABEL_8:
  }
}

void MRContentItemSetCurrentPlaybackDate(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetCurrentPlaybackDate_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

CFTypeRef MRContentItemGetCurrentPlaybackDate(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "currentPlaybackDate");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

CFTypeRef MRContentItemGetLocalizedContentRating(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localizedContentRating");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetLocalizedContentRating(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetLocalizedContentRating(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 485, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetLocalizedContentRating_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetIsContainer(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isContainer") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasContainer");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setContainer:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetIsSharable(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isSharable");

  return v2;
}

void MRContentItemSetIsSharable(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isSharable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasSharable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setSharable:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetIsLiked(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isLiked");

  return v2;
}

void MRContentItemSetIsLiked(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isLiked") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasLiked");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setLiked:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetIsInWishList(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isInWishList");

  return v2;
}

void MRContentItemSetIsInWishList(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isInWishList") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasInWishList");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setInWishList:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetLocalizedDurationString(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetLocalizedDurationString(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 594, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetLocalizedDurationString_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

CFTypeRef MRContentItemGetDurationStringLocalizationKey(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "durationStringLocalizationKey");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetDurationStringLocalizationKey(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetDurationStringLocalizationKey(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 606, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetDurationStringLocalizationKey_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetExplicitItem(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isExplicitItem") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasExplicitItem");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setExplicitItem:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetIsInTransition(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isInTransition");

  return v2;
}

void MRContentItemSetIsInTransition(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isInTransition") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasInTransition");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setInTransition:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetPlaylistType(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "playlistType");

  return v2;
}

void MRContentItemSetPlaylistType(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "playlistType") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasPlaylistType");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setPlaylistType:", a2);

LABEL_8:
  }
}

uint64_t MRContentItemGetRadioStationType(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "radioStationType");

  return v2;
}

void MRContentItemSetRadioStationType(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "radioStationType") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasRadioStationType");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setRadioStationType:", a2);

LABEL_8:
  }
}

CFTypeRef MRContentItemGetAssetURL(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "assetURL");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetAssetURL(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetAssetURL_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

void MRContentItemSetArtworkData(void *a1, uint64_t a2)
{
  MRArtwork *v3;
  id v4;

  v4 = a1;
  v3 = objc_alloc_init(MRArtwork);
  -[MRArtwork setImageData:](v3, "setImageData:", a2);
  objc_msgSend(v4, "setArtwork:", v3);
  if (!a2)
    MRContentItemSetArtworkDataSize(v4, 0, 0);

}

void MRContentItemSetArtworkDataSize(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;

  objc_msgSend(a1, "artwork");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWidth:", a2);

  objc_msgSend(a1, "artwork");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setHeight:", a3);

}

CFTypeRef MRContentItemGetArtworkMIMEType(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "artworkMIMEType");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetArtworkMIMEType(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetArtworkMIMEType(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 736, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetArtworkMIMEType_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

uint64_t MRContentItemGetArtworkDataWidth(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "artwork");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "width");

  return v2;
}

uint64_t MRContentItemGetArtworkDataHeight(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "artwork");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "height");

  return v2;
}

CFTypeRef MRContentItemGetTranscriptAlignments(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "transcriptAlignments");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

void MRContentItemSetTranscriptAlignments(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = (id)objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setTranscriptAlignments:", v4);

}

uint64_t MRContentItemGetHasTranscriptAlignments(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "transcriptAlignmentsAvailable");

  return v2;
}

void MRContentItemSetHasTranscriptAlignments(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "transcriptAlignmentsAvailable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasTranscriptAlignmentsAvailable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTranscriptAlignmentsAvailable:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetAvailableLanguageOptions(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char isKindOfClass;
  NSObject *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  MRLanguageOptionGroup *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[8];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "firstObject");
    v6 = objc_claimAutoreleasedReturnValue();
    if (v6
      && (v7 = (void *)v6,
          objc_msgSend(v5, "firstObject"),
          v8 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          isKindOfClass = objc_opt_isKindOfClass(),
          v8,
          v7,
          (isKindOfClass & 1) != 0))
    {
      _MRLogForCategory(0);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_193827000, v10, OS_LOG_TYPE_DEFAULT, "MRContentItemSetAvailableLanguageOptions: Expecting a CFArrayRef of MRLanguageOptionGroupRefs but instead found a CFArrayRef of CFDataRef. Please fix.", buf, 2u);
      }

      v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v12 = v5;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v20;
        do
        {
          v16 = 0;
          do
          {
            if (*(_QWORD *)v20 != v15)
              objc_enumerationMutation(v12);
            v17 = MRLanguageOptionGroupCreateFromExternalRepresentation(*(void **)(*((_QWORD *)&v19 + 1) + 8 * v16));
            if (v17)
              objc_msgSend(v11, "addObject:", v17, (_QWORD)v19);

            ++v16;
          }
          while (v14 != v16);
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
        }
        while (v14);
      }

    }
    else
    {
      v11 = v5;
    }
  }
  else
  {
    v11 = 0;
  }
  v18 = (void *)objc_msgSend(v11, "mutableCopy", (_QWORD)v19);
  objc_msgSend(v3, "setAvailableLanguageOptions:", v18);

}

void MRContentItemSetCurrentLanguageOptions(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char isKindOfClass;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  MRLanguageOption *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[8];
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "firstObject");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5
    && (v6 = (void *)v5,
        objc_msgSend(v4, "firstObject"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_opt_class(),
        isKindOfClass = objc_opt_isKindOfClass(),
        v7,
        v6,
        (isKindOfClass & 1) != 0))
  {
    _MRLogForCategory(0);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_193827000, v9, OS_LOG_TYPE_DEFAULT, "MRContentItemSetCurrentLanguageOptions: Expecting a CFArrayRef of MRLanguageOptionRefs but instead found a CFArrayRef of CFDataRef. Please fix.", buf, 2u);
    }

    v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v11 = v4;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v19;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v19 != v14)
            objc_enumerationMutation(v11);
          v16 = MRLanguageOptionCreateFromExternalRepresentation(*(void **)(*((_QWORD *)&v18 + 1) + 8 * v15));
          if (v16)
            objc_msgSend(v10, "addObject:", v16, (_QWORD)v18);

          ++v15;
        }
        while (v13 != v15);
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      }
      while (v13);
    }

  }
  else
  {
    v10 = v4;
  }
  v17 = (void *)objc_msgSend(v10, "mutableCopy", (_QWORD)v18);
  objc_msgSend(v3, "setCurrentLanguageOptions:", v17);

}

void MRContentItemSetHasLanguageOptions(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "languageOptionsAvailable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasLanguageOptionsAvailable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setLanguageOptionsAvailable:", a2);

    goto LABEL_7;
  }
}

void MRContentItemSetSections(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a1;
  v4 = (id)objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setSections:", v4);

}

void MRContentItemSetNumberOfSections(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "numberOfSections") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasNumberOfSections");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setNumberOfSections:", a2);

LABEL_8:
  }
}

CFTypeRef MRContentItemGetArtworkURL(void *a1)
{
  void *v1;
  void *v2;
  const void *v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "artworkURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "absoluteString");
  v3 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    return CFAutorelease(v3);
  else
    return 0;
}

CFTypeRef MRContentItemGetArtworkURLTemplates(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "artworkURLTemplates");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetArtworkURLTemplates(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetArtworkURLTemplates_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

void MRContentItemSetArtworkURL(void *a1, const __CFString *a2)
{
  CFURLRef v3;
  _QWORD v4[5];

  v3 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __MRContentItemSetArtworkURL_block_invoke;
  v4[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v4[4] = v3;
  MRContentItemSetMetadataRef(a1, (uint64_t)v3, v4);
  if (v3)
    CFRelease(v3);
}

CFTypeRef MRContentItemGetLyricsURL(void *a1)
{
  void *v1;
  void *v2;
  const void *v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "lyricsURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "absoluteString");
  v3 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    return CFAutorelease(v3);
  else
    return 0;
}

void MRContentItemSetLyricsURL(void *a1, const __CFString *a2)
{
  CFURLRef v3;
  _QWORD v4[5];

  v3 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __MRContentItemSetLyricsURL_block_invoke;
  v4[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v4[4] = v3;
  MRContentItemSetMetadataRef(a1, (uint64_t)v3, v4);
  if (v3)
    CFRelease(v3);
}

void MRContentItemSetHasLyrics(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "lyricsAvailable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasLyricsAvailable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setLyricsAvailable:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetRadioStationIdentifier(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "radioStationIdentifier");

  return v2;
}

void MRContentItemSetRadioStationIdentifier(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "radioStationIdentifier") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasRadioStationIdentifier");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setRadioStationIdentifier:", a2);

LABEL_8:
  }
}

void MRContentItemSetITunesStoreSubscriptionIdentifier(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "iTunesStoreSubscriptionIdentifier") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasITunesStoreSubscriptionIdentifier");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setITunesStoreSubscriptionIdentifier:", a2);

LABEL_8:
  }
}

CFTypeRef MRContentItemGetPurchaseInfoData(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "purchaseInfoData");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetPurchaseInfoData(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetPurchaseInfoData_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

uint64_t MRContentItemGetDownloadState(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "downloadState");

  return v2;
}

void MRContentItemSetDownloadState(void *a1, unsigned int a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "downloadState") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasDownloadState");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDownloadState:", a2);

LABEL_8:
  }
}

float MRContentItemGetDownloadProgress(void *a1)
{
  void *v1;
  float v2;
  float v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "downloadProgress");
  v3 = v2;

  return v3;
}

void MRContentItemSetDownloadProgress(void *a1, float a2)
{
  void *v4;
  float v5;
  void *v6;
  char v7;
  void *v8;
  double v9;
  id v10;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v10 = a1;
    objc_msgSend(v10, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "downloadProgress");
    if (v5 == a2)
    {
      objc_msgSend(v10, "metadata");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "hasDownloadProgress");

      if ((v7 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v10, "metadata");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(float *)&v9 = a2;
    objc_msgSend(v8, "setDownloadProgress:", v9);

LABEL_8:
  }
}

uint64_t MRContentItemCopyAppMetrics(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "appMetrics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");

  return v3;
}

void MRContentItemSetAppMetrics(void *a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __MRContentItemSetAppMetrics_block_invoke;
  v2[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v2[4] = a2;
  MRContentItemSetMetadataRef(a1, a2, v2);
}

uint64_t MRContentItemGetIsAdvertisement(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isAdvertisement");

  return v2;
}

void MRContentItemSetIsAdvertisement(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isAdvertisement") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasAdvertisement");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAdvertisement:", a2);

    goto LABEL_7;
  }
}

uint64_t MRContentItemGetIsSteerable(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isSteerable");

  return v2;
}

void MRContentItemSetIsSteerable(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isSteerable") == (_DWORD)a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasSteerable");

      if ((v6 & 1) != 0)
      {
LABEL_7:

        return;
      }
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setSteerable:", a2);

    goto LABEL_7;
  }
}

CFTypeRef MRContentItemGetProfileIdentifier(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "profileIdentifier");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

CFTypeRef MRContentItemGetServiceIdentifier(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "serviceIdentifier");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

void MRContentItemSetServiceIdentifier(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetServiceIdentifier(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 1185, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetServiceIdentifier_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetProfileIdentifier(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetProfileIdentifier(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 1190, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetProfileIdentifier_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

void MRContentItemSetBrandIdentifier(void *a1, void *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    a2 = (void *)objc_msgSend(a2, "performSelector:", sel_stringValue);
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MRContentItemSetBrandIdentifier(MRContentItemRef, CFStringRef)");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_opt_class();
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MRContentItem_Deprecated.m"), 1195, CFSTR("Type mismatch, expecting %@ found %@"), v6, objc_opt_class());

    }
  }
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __MRContentItemSetBrandIdentifier_block_invoke;
  v7[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v7[4] = a2;
  MRContentItemSetMetadataRef(a1, (uint64_t)a2, v7);
}

CFTypeRef MRContentItemGetBrandIdentifier(void *a1)
{
  void *v1;
  const void *v2;

  objc_msgSend(a1, "metadata");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "brandIdentifier");
  v2 = (const void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return CFAutorelease(v2);
  else
    return 0;
}

CFTypeRef MRContentItemGetParentIdentifier(void *a1)
{
  CFTypeRef result;

  objc_msgSend(a1, "parentIdentifier");
  result = (CFTypeRef)objc_claimAutoreleasedReturnValue();
  if (result)
    return CFAutorelease(result);
  return result;
}

uint64_t MRContentItemSetParentIdentifier(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setParentIdentifier:", a2);
}

CFTypeRef MRContentItemGetAncestorIdentifier(void *a1)
{
  id v1;
  void *v2;
  const void *v3;
  CFTypeRef v4;

  v1 = a1;
  objc_msgSend(v1, "ancestorIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
    objc_msgSend(v1, "ancestorIdentifier");
  else
    objc_msgSend(v1, "identifier");
  v3 = (const void *)objc_claimAutoreleasedReturnValue();

  v4 = CFAutorelease(v3);
  return v4;
}

uint64_t MRContentItemSetAncestorIdentifier(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setAncestorIdentifier:", a2);
}

uint64_t MRContentItemSetRequestIdentifier(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRequestIdentifier:", a2);
}

void MRContentItemSetReportingAdamID(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "reportingAdamID") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasReportingAdamID");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setReportingAdamID:", a2);

LABEL_8:
  }
}

void MRContentItemSetLyricsAdamID(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  id v8;

  if (a1)
  {
    MRCreateItemMetadataIfNotPresent(a1);
    v8 = a1;
    objc_msgSend(v8, "metadata");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "lyricsAdamID") == a2)
    {
      objc_msgSend(v8, "metadata");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "hasLyricsAdamID");

      if ((v6 & 1) != 0)
        goto LABEL_8;
    }
    else
    {

    }
    objc_msgSend(v8, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setLyricsAdamID:", a2);

LABEL_8:
  }
}

BOOL MRContentItemCalculatedPlaybackPositionIsEqual(void *a1, void *a2)
{
  void *v4;
  double CalculatedPlaybackPosition;
  double v6;
  void *v7;
  float v8;
  float v9;
  void *v10;
  float v11;
  float v12;
  void *v13;
  void *v14;
  float v15;
  float v16;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CalculatedPlaybackPosition = _MRContentItemGetCalculatedPlaybackPosition(a1, v4);
  v6 = _MRContentItemGetCalculatedPlaybackPosition(a2, v4);
  objc_msgSend(a1, "metadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "playbackRate");
  v9 = v8;

  objc_msgSend(a2, "metadata");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "playbackRate");
  v12 = v11;

  if (v9 >= v12)
    v13 = a2;
  else
    v13 = a1;
  objc_msgSend(v13, "metadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "playbackRate");
  v16 = v15;

  return vabdd_f64(CalculatedPlaybackPosition, v6) < v16;
}

void MRContentItemSetArtworkFileURL(void *a1, const __CFString *a2)
{
  CFURLRef v3;
  _QWORD v4[5];

  v3 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __MRContentItemSetArtworkFileURL_block_invoke;
  v4[3] = &__block_descriptor_40_e27_B24__0__MRContentItem_8_v16l;
  v4[4] = v3;
  MRContentItemSetMetadataRef(a1, (uint64_t)v3, v4);
  if (v3)
    CFRelease(v3);
}

MRContentItem *MRContentItemCreateFromNowPlayingInfo(uint64_t a1)
{
  return -[MRContentItem initWithNowPlayingInfo:]([MRContentItem alloc], "initWithNowPlayingInfo:", a1);
}

uint64_t MRContentItemEqualToItem(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqual:", a2);
}

uint64_t MRContentItemCopyExtractedIdentifierFromNowPlayingInfo(uint64_t a1)
{
  +[MRContentItem extractedIdentifierFromNowPlayingInfo:](MRContentItem, "extractedIdentifierFromNowPlayingInfo:", a1);
  return objc_claimAutoreleasedReturnValue();
}

void *MRContentItemsCopyIdentifiers(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v1, "count"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "identifier", (_QWORD)v11);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v9);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t MRContentItemCopyReadableDescription(void *a1)
{
  objc_msgSend(a1, "description");
  return objc_claimAutoreleasedReturnValue();
}

const __CFString *MRContentItemsCopyReadableDescription(void *a1, uint64_t a2)
{
  return _MRContentItemsCopyReadableDescription(a1, a2, 0);
}

void *MRContentItemCreateMergedItem(void *a1, void *a2)
{
  void *v3;

  v3 = (void *)objc_msgSend(a1, "copy");
  MRContentItemMerge(v3, a2);
  return v3;
}

void *MRContentItemCopyWithIdentifier(void *a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)objc_msgSend(a1, "copy");
  objc_msgSend(v3, "setIdentifier:", a2);
  return v3;
}

uint64_t _MRVideoThumbnailProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_QWORD *)(a1 + 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v18;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void MRVirtualVoiceInputSetRecordingEndpoint(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)MRGetSharedService();
  MRMediaRemoteServiceSetVoiceRecordingEndpoint(v2, a1);
}

void MRVirtualVoiceInputSetRecordingState(unsigned int a1, unsigned int a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;

  v7 = a4;
  v9 = a3;
  v8 = (void *)MRGetSharedService();
  MRMediaRemoteServiceVirtualVoiceSetRecordingState(v8, a1, a2, v9, v7);

}

void MRVirtualVoiceInputGetDevices(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = a1;
  v4 = (void *)MRGetSharedService();
  MRMediaRemoteServiceVirtualVoiceGetDevices(v4, v5, v3);

}

void MRVirtualVoiceInputRegisterDevice(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  v6 = (void *)MRGetSharedService();
  MRMediaRemoteServiceVirtualVoiceRegisterDevice(v6, a1, v7, v5);

}

void MRVirtualVoiceInputUnregisterDevice(unsigned int a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  v6 = (void *)MRGetSharedService();
  MRMediaRemoteServiceVirtualVoiceUnregisterDevice(v6, a1, v7, v5);

}

void MRVirtualVoiceInputSetRecordingStateCallback(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  +[MRMediaRemoteServiceClient sharedServiceClient](MRMediaRemoteServiceClient, "sharedServiceClient");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "notificationClient");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setReceivesVoiceInputRecordingStateNotifications:", 1);

  +[MRVVIClient sharedClient](MRVVIClient, "sharedClient");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setRecordingStateCallback:forDeviceID:", v4, a1);

}

void MRVirtualVoiceInputProcessAudioData(unsigned int a1, const char *a2, double a3, double a4, float a5)
{
  void *v10;

  v10 = (void *)MRGetSharedService();
  MRMediaRemoteServiceVirtualVoiceProcessAudioData(v10, a1, a2, a3, a4, a5);
}

void sub_193A4BE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MRClientUpdatesConfigurationProtobufReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  _MRNowPlayingPlayerPathProtobuf *v54;
  BOOL v55;
  uint64_t v56;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        a1[24] |= 4u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_67;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_69;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_67:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_69:
        v55 = v19 != 0;
        v56 = 18;
        goto LABEL_90;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        a1[24] |= 1u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_73:
        v55 = v26 != 0;
        v56 = 16;
        goto LABEL_90;
      case 3u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        a1[24] |= 0x20u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_77:
        v55 = v32 != 0;
        v56 = 21;
        goto LABEL_90;
      case 4u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        a1[24] |= 2u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              v14 = v37++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_81:
        v55 = v38 != 0;
        v56 = 17;
        goto LABEL_90;
      case 5u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        a1[24] |= 8u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_85:
        v55 = v44 != 0;
        v56 = 19;
        goto LABEL_90;
      case 6u:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        a1[24] |= 0x10u;
        while (2)
        {
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
            *(_QWORD *)(a2 + v51) = v52 + 1;
            v50 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                v50 = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v50 = 0;
LABEL_89:
        v55 = v50 != 0;
        v56 = 20;
LABEL_90:
        a1[v56] = v55;
        goto LABEL_91;
      case 7u:
        v54 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
        objc_msgSend(a1, "addSubscribedPlayerPaths:", v54);
        if (PBReaderPlaceMark()
          && _MRNowPlayingPlayerPathProtobufReadFrom((id *)&v54->super.super.isa, a2))
        {
          PBReaderRecallMark();

LABEL_91:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_91;
    }
  }
}

void sub_193A4DC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A4DDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A4ED98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_193A4FCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A51330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A51484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_193A51AB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A5239C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A52434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_193A527E0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_193A52E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _MRSystemPlaybackCustomDataQueueProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_193A540BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193A54BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_193A56570(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id initValAVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequired()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_11, "AVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequired");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequired, *v0);
  getAVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequired = (uint64_t (*)())AVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequiredFunction;
  return (id)constantValAVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequired;
}

id AVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequiredFunction()
{
  return (id)constantValAVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequired;
}

id initValAVOutputDeviceGroupAddOutputDeviceOptionInitiator()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_11, "AVOutputDeviceGroupAddOutputDeviceOptionInitiator");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceGroupAddOutputDeviceOptionInitiator, *v0);
  getAVOutputDeviceGroupAddOutputDeviceOptionInitiator = (uint64_t (*)())AVOutputDeviceGroupAddOutputDeviceOptionInitiatorFunction;
  return (id)constantValAVOutputDeviceGroupAddOutputDeviceOptionInitiator;
}

id AVOutputDeviceGroupAddOutputDeviceOptionInitiatorFunction()
{
  return (id)constantValAVOutputDeviceGroupAddOutputDeviceOptionInitiator;
}

id initValAVOutputDeviceGroupRemoveOutputDeviceOptionInitiator()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_11, "AVOutputDeviceGroupRemoveOutputDeviceOptionInitiator");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceGroupRemoveOutputDeviceOptionInitiator, *v0);
  getAVOutputDeviceGroupRemoveOutputDeviceOptionInitiator = (uint64_t (*)())AVOutputDeviceGroupRemoveOutputDeviceOptionInitiatorFunction;
  return (id)constantValAVOutputDeviceGroupRemoveOutputDeviceOptionInitiator;
}

id AVOutputDeviceGroupRemoveOutputDeviceOptionInitiatorFunction()
{
  return (id)constantValAVOutputDeviceGroupRemoveOutputDeviceOptionInitiator;
}

id initValAVOutputDeviceGroupVolumeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_11, "AVOutputDeviceGroupVolumeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceGroupVolumeDidChangeNotification, *v0);
  getAVOutputDeviceGroupVolumeDidChangeNotification = (uint64_t (*)())AVOutputDeviceGroupVolumeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceGroupVolumeDidChangeNotification;
}

id AVOutputDeviceGroupVolumeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceGroupVolumeDidChangeNotification;
}

id initValAVOutputDeviceGroupVolumeControlTypeDidChangeNotification()
{
  id *v0;

  if (AVFoundationLibrary_sOnce_11 != -1)
    dispatch_once(&AVFoundationLibrary_sOnce_11, &__block_literal_global_98);
  v0 = (id *)dlsym((void *)AVFoundationLibrary_sLib_11, "AVOutputDeviceGroupVolumeControlTypeDidChangeNotification");
  if (v0)
    objc_storeStrong((id *)&constantValAVOutputDeviceGroupVolumeControlTypeDidChangeNotification, *v0);
  getAVOutputDeviceGroupVolumeControlTypeDidChangeNotification = (uint64_t (*)())AVOutputDeviceGroupVolumeControlTypeDidChangeNotificationFunction;
  return (id)constantValAVOutputDeviceGroupVolumeControlTypeDidChangeNotification;
}

id AVOutputDeviceGroupVolumeControlTypeDidChangeNotificationFunction()
{
  return (id)constantValAVOutputDeviceGroupVolumeControlTypeDidChangeNotification;
}

id AVOutputDeviceVolumeDidChangeNotificationFunction_0()
{
  return (id)constantValAVOutputDeviceVolumeDidChangeNotification_0;
}

id AVOutputDeviceCanSetVolumeDidChangeNotificationFunction_0()
{
  return (id)constantValAVOutputDeviceCanSetVolumeDidChangeNotification_0;
}

uint64_t OUTLINED_FUNCTION_4_7(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 72));
}

uint64_t OUTLINED_FUNCTION_6_2(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 64));
}

BOOL _MRUpdateContentItemMessageProtobufReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  _MRContentItemProtobuf *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(_MRContentItemProtobuf);
        objc_msgSend(a1, "addContentItems:", v17);
        if (!PBReaderPlaceMark() || (_MRContentItemProtobufReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(_MRNowPlayingPlayerPathProtobuf);
    objc_storeStrong(a1 + 2, v17);
    if (!PBReaderPlaceMark() || !_MRNowPlayingPlayerPathProtobufReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _MRAudioBufferProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  _MRAudioFormatSettingsProtobuf *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(_MRAudioFormatSettingsProtobuf);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (PBReaderPlaceMark() && (_MRAudioFormatSettingsProtobufReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_48;
        goto LABEL_64;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 56) |= 2u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_52:
        v37 = 16;
        goto LABEL_61;
      case 3u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_56:
        v37 = 8;
        goto LABEL_61;
      case 4u:
        v30 = 0;
        v31 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 56) |= 4u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v21 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_60:
        v37 = 24;
LABEL_61:
        *(_QWORD *)(a1 + v37) = v21;
        goto LABEL_62;
      case 5u:
        PBReaderReadData();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v35;

        goto LABEL_62;
      case 6u:
        v17 = objc_alloc_init(_MRAudioStreamPacketDescriptionProtobuf);
        objc_msgSend((id)a1, "addPacketDescriptions:", v17);
        if (PBReaderPlaceMark()
          && (_MRAudioStreamPacketDescriptionProtobufReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_62:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_64:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_62;
    }
  }
}

uint64_t _MRGameControllerMessageProtobufReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  _MRGameControllerMotionProtobuf *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_38;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_40:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_41;
      case 2u:
        v24 = objc_alloc_init(_MRGameControllerMotionProtobuf);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark() || !_MRGameControllerMotionProtobufReadFrom((uint64_t)v24, a2))
          goto LABEL_43;
        goto LABEL_36;
      case 3u:
        v24 = objc_alloc_init(_MRGameControllerButtonsProtobuf);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || !_MRGameControllerButtonsProtobufReadFrom((uint64_t)v24, a2))
          goto LABEL_43;
        goto LABEL_36;
      case 4u:
        v24 = objc_alloc_init(_MRGameControllerDigitizerProtobuf);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (PBReaderPlaceMark()
          && (_MRGameControllerDigitizerProtobufReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

