Swift::OpaquePointer_optional __swiftcall calculatePercentiles(_:percentiles:)(Swift::OpaquePointer _, Swift::OpaquePointer percentiles)
{
  unint64_t v4;
  float v5;
  unint64_t v6;
  Swift::Bool v7;
  char *v8;
  float v9;
  _QWORD *v11;
  uint64_t v12;
  float v13;
  char *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  char *rawValue;
  Swift::OpaquePointer_optional result;

  v4 = sub_24B2C7820((uint64_t)percentiles._rawValue);
  if ((v4 & 0x100000000) != 0)
    v5 = -INFINITY;
  else
    v5 = *(float *)&v4;
  v6 = sub_24B2C7878((uint64_t)percentiles._rawValue);
  v8 = 0;
  v9 = *(float *)&v6;
  if ((v6 & 0x100000000) != 0)
    v9 = INFINITY;
  if (!*((_QWORD *)_._rawValue + 2))
    goto LABEL_35;
  if (v5 < 0.0 || v9 > 100.0)
    goto LABEL_35;
  rawValue = (char *)_._rawValue;
  swift_bridgeObjectRetain();
  sub_24B2C78D0((uint64_t *)&rawValue);
  v11 = rawValue;
  v12 = *((_QWORD *)percentiles._rawValue + 2);
  if (!v12)
  {
    swift_release();
    v8 = (char *)MEMORY[0x24BEE4AF8];
LABEL_35:
    v27 = v8;
    goto LABEL_47;
  }
  v13 = (float)(*((_QWORD *)rawValue + 2) - 1);
  v14 = rawValue + 32;
  swift_bridgeObjectRetain();
  v15 = 0;
  v8 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v16 = (float)(*((float *)percentiles._rawValue + v15 + 8) * v13) / 100.0;
    v17 = floorf(v16);
    if ((~LODWORD(v17) & 0x7F800000) == 0)
      break;
    if (v17 <= -9.2234e18)
      goto LABEL_37;
    if (v17 >= 9.2234e18)
      goto LABEL_38;
    v18 = ceilf(v16);
    if ((~LODWORD(v18) & 0x7F800000) == 0)
      goto LABEL_39;
    if (v18 <= -9.2234e18)
      goto LABEL_40;
    if (v18 >= 9.2234e18)
      goto LABEL_41;
    v19 = (uint64_t)v17;
    v20 = (uint64_t)v18;
    if ((uint64_t)v17 == (uint64_t)v18)
    {
      if (v19 < 0)
        goto LABEL_43;
      if (v11[2] <= (unint64_t)v19)
        goto LABEL_45;
      v21 = *(float *)&v14[4 * v19];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_24B2C8148(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    }
    else
    {
      if (v19 < 0)
        goto LABEL_42;
      v22 = v11[2];
      if (v22 <= v19)
        goto LABEL_44;
      if (v22 <= v20)
        goto LABEL_46;
      v23 = *(float *)&v14[4 * v19];
      v24 = *(float *)&v14[4 * v20];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_24B2C8148(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v21 = (float)((float)(1.0 - (float)(v16 - (float)v19)) * v23) + (float)((float)(v16 - (float)v19) * v24);
    }
    v26 = *((_QWORD *)v8 + 2);
    v25 = *((_QWORD *)v8 + 3);
    if (v26 >= v25 >> 1)
      v8 = sub_24B2C8148((char *)(v25 > 1), v26 + 1, 1, v8);
    ++v15;
    *((_QWORD *)v8 + 2) = v26 + 1;
    *(float *)&v8[4 * v26 + 32] = v21;
    if (v12 == v15)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  v27 = (void *)swift_release();
  __break(1u);
LABEL_47:
  result.value._rawValue = v27;
  result.is_nil = v7;
  return result;
}

unint64_t sub_24B2C7820(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v5 < v2)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

unint64_t sub_24B2C7878(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v2 < v5)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t sub_24B2C78D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24B309204(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_24B2C8D70(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24B2C7938(uint64_t a1, uint64_t a2)
{
  return sub_24B2C7E14(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

void sub_24B2C7950(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_24B2C7958@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_24B2C796C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_24B2C7980@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_24B2C7994(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_24B2C79C4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_24B2C79F0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_24B2C7A14(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_24B2C7A28(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_24B2C7A3C(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_24B2C7A50@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_24B2C7A64(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_24B2C7A78(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_24B2C7A8C(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_24B2C7AA0()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_24B2C7AB0()
{
  return sub_24B30BBF0();
}

_QWORD *sub_24B2C7AC8(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_24B2C7ADC(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_24B30B8C0();
  *a2 = 0;
  return result;
}

uint64_t sub_24B2C7B50(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_24B30B8CC();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_24B2C7BCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_24B30B8D8();
  v2 = sub_24B30B8B4();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

BOOL sub_24B2C7C10(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24B2C7C24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_24B2C9A30(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_QWORD *sub_24B2C7C60@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_24B2C7C70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_24B30B8D8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24B2C7C98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_24B30B8B4();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_24B2C7CDC()
{
  sub_24B2C8020(&qword_257967558, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageHeaderKey, (uint64_t)&unk_24B30C980);
  sub_24B2C8020(&qword_257967560, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageHeaderKey, (uint64_t)&unk_24B30C920);
  return sub_24B30BD1C();
}

_QWORD *sub_24B2C7D60@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_24B2C7D70(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_24B2C7D7C()
{
  sub_24B2C8020(&qword_2579674A8, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_24B30C808);
  sub_24B2C8020(&qword_2579674B0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_24B30C7A8);
  return sub_24B30BD1C();
}

uint64_t sub_24B2C7E08(uint64_t a1, uint64_t a2)
{
  return sub_24B2C7E14(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_24B2C7E14(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_24B30B8D8();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_24B2C7E50()
{
  sub_24B30B8D8();
  sub_24B30B914();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2C7E90()
{
  uint64_t v0;

  sub_24B30B8D8();
  sub_24B30BE90();
  sub_24B30B914();
  v0 = sub_24B30BEA8();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24B2C7F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_24B30B8D8();
  v2 = v1;
  if (v0 == sub_24B30B8D8() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_24B30BE48();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
  sub_24B2C9F94(a1, &qword_257967458);
}

void type metadata accessor for ECMessageBodyStringAccumulatorOptions(uint64_t a1)
{
  sub_24B2C9F94(a1, &qword_257967460);
}

void type metadata accessor for AssetsResult(uint64_t a1)
{
  sub_24B2C9F94(a1, &qword_257967468);
}

uint64_t sub_24B2C7FC8()
{
  return sub_24B2C8020(&qword_257967470, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageBodyStringAccumulatorOptions, (uint64_t)&unk_24B30C5C0);
}

uint64_t sub_24B2C7FF4()
{
  return sub_24B2C8020(&qword_257967478, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageBodyStringAccumulatorOptions, (uint64_t)&unk_24B30C58C);
}

uint64_t sub_24B2C8020(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24BD1D214](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B2C8060()
{
  return sub_24B2C8020(&qword_257967480, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageBodyStringAccumulatorOptions, (uint64_t)&unk_24B30C5EC);
}

uint64_t sub_24B2C808C()
{
  return sub_24B2C8020(&qword_257967488, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageBodyStringAccumulatorOptions, (uint64_t)&unk_24B30C628);
}

uint64_t sub_24B2C80B8()
{
  return sub_24B2C8020(&qword_257967490, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_24B30C76C);
}

uint64_t sub_24B2C80E4()
{
  return sub_24B2C8020(&qword_257967498, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_24B30C740);
}

uint64_t sub_24B2C8110()
{
  return sub_24B2C8020(&qword_2579674A0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_24B30C7DC);
}

_QWORD *sub_24B2C813C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C8260(a1, a2, a3, a4, &qword_2579674D8);
}

char *sub_24B2C8148(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967528);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_24B2C9844(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24B2C8254(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C8260(a1, a2, a3, a4, &qword_257967530);
}

_QWORD *sub_24B2C8260(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24B2C975C(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_24B2C8368(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967520);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_24B2C9844(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24B2C8474(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C849C(a1, a2, a3, a4, &qword_257967510, &qword_257967518);
}

_QWORD *sub_24B2C8488(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C849C(a1, a2, a3, a4, &qword_2579674C8, &qword_2579674D0);
}

_QWORD *sub_24B2C849C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24B2C992C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24B2C85B4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967508);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24B2C966C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2C86C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967500);
  v10 = *(_QWORD *)(type metadata accessor for ExtractedMessage() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_24B30BCC8();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for ExtractedMessage() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_24B2C9AA8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_24B2C88C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579674F8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24B2C9BC0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24B2C89E8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C8A00(a1, a2, a3, a4, &qword_2579674E0);
}

_QWORD *sub_24B2C89F4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C8A00(a1, a2, a3, a4, &qword_2579674F0);
}

_QWORD *sub_24B2C8A00(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24B2C9CB4(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24B2C8B08(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C8C3C(a1, a2, a3, a4, &qword_2579674E8);
}

_QWORD *sub_24B2C8B1C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579674C0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24B2C9D9C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24B2C8C28(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B2C8C3C(a1, a2, a3, a4, &qword_2579674B8);
}

_QWORD *sub_24B2C8C3C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v9 + 4])
          memmove(v13, a4 + 4, 56 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24B2C9E8C(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2C8D70(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  float *v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(float *)(v81 + 4 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 4 * v84;
          if (v83 >= *(float *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_DWORD *)(v85 + 4) = *(_DWORD *)v85;
          *(float *)(v81 + 4 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_24B2C9400((float *)(v86 + 4 * v90), (float *)(v86 + 4 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 4 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = sub_24B3080B0((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_24B30BA28();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (float *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 4;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(float *)(v10 + 4 * v9);
      v15 = *(float *)(v10 + 4 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(float *)(v10 + 4 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (int *)(v95 + 4 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (int *)(v10 + 4 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (float *)(v95 + 4 * v9);
      do
      {
        v25 = *(float *)(v10 + 4 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_24B307CB4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_24B307CB4((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_24B2C9400((float *)(v10 + 4 * *(_QWORD *)v73), (float *)(v10 + 4 * *(_QWORD *)v76), v10 + 4 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B2C9400(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  uint64_t result;
  float *v22;
  float *v23;
  float *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 3;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 3;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 2;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 2)
  {
    if (v11 >= -3)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 4 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 4)
      {
        v17 = (float *)(a3 - 4);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -3)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 4 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 4)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_24B307DAC((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2C966C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

char *sub_24B2C975C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_24B30BD10();
  __break(1u);
  return result;
}

char *sub_24B2C9844(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2C992C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2C9A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD1D1FC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_24B2C9AA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for ExtractedMessage() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2C9BC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

char *sub_24B2C9CB4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2C9D9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2C9E8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

void type metadata accessor for ECMessageHeaderKey(uint64_t a1)
{
  sub_24B2C9F94(a1, &qword_257967538);
}

void sub_24B2C9F94(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_24B2C9FD8()
{
  return sub_24B2C8020(&qword_257967540, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageHeaderKey, (uint64_t)&unk_24B30C8E4);
}

uint64_t sub_24B2CA004()
{
  return sub_24B2C8020(&qword_257967548, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageHeaderKey, (uint64_t)&unk_24B30C8B8);
}

uint64_t sub_24B2CA030()
{
  return sub_24B2C8020(&qword_257967550, (uint64_t (*)(uint64_t))type metadata accessor for ECMessageHeaderKey, (uint64_t)&unk_24B30C954);
}

uint64_t sub_24B2CA068(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  __int128 v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v3 = (uint64_t *)(v1 + 32);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 32) + 16))
    return 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967568);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 40;
  if (v5 < 40)
    v6 = v5 - 25;
  v4[2] = v6 >> 4;
  v4[3] = 0;
  v4[4] = 0;
  sub_24B2CB4D0((uint64_t)(v4 + 2), v4 + 5, 1uLL, a1);
  v64 = v4;
  if (!v4[3])
  {
    v7 = 0;
LABEL_82:
    swift_release();
    return v7;
  }
  v7 = 0;
  while (1)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = sub_24B2CAB68(&qword_257967568, (void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))sub_24B2F3FFC);
    v9 = v64[4];
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    v11 = &v64[2 * v9 + 5];
    v12 = *v11;
    v13 = v11[1];
    if (v10 >= v64[2])
      v10 = 0;
    v64[4] = v10;
    v14 = v64[3];
    v34 = __OFSUB__(v14, 1);
    v15 = v14 - 1;
    if (v34)
      goto LABEL_85;
    v64[3] = v15;
    if (v13 > v7)
      v7 = v13;
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_86;
    v16 = *v3;
    v17 = *(_QWORD *)(*v3 + 16);
    if (v12 >= v17)
      goto LABEL_87;
    v18 = v16 + 56 * v12;
    if ((*(_BYTE *)(v18 + 56) & 1) != 0)
    {
      v19 = (uint64_t)v64;
    }
    else
    {
      if (__OFADD__(v13, 1))
        goto LABEL_89;
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_90;
      v63 = *(_QWORD *)(v18 + 48);
      result = swift_isUniquelyReferenced_nonNull_native();
      v21 = v64[2];
      if (v21 >= v20 && (result & 1) != 0)
      {
        v19 = (uint64_t)v64;
      }
      else
      {
        if (v21 >= v20)
        {
          v19 = swift_allocObject();
          v26 = *(_OWORD *)(v64 + 3);
          *(_QWORD *)(v19 + 16) = v21;
          *(_OWORD *)(v19 + 24) = v26;
          if ((uint64_t)v64[3] > 0)
            sub_24B2F3FFC(v19 + 16, (char *)(v19 + 40), v64 + 2, (char *)v64 + 40);
        }
        else
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName(&qword_257967570);
          sub_24B30B77C();
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v23 = v64[3];
            v19 = swift_allocObject();
            v24 = _swift_stdlib_malloc_size((const void *)v19);
            v25 = v24 - 40;
            if (v24 < 40)
              v25 = v24 - 25;
            *(_QWORD *)(v19 + 16) = v25 >> 4;
            *(_QWORD *)(v19 + 24) = v23;
            *(_QWORD *)(v19 + 32) = 0;
            if (v23 > 0)
            {
              swift_retain();
              sub_24B2F36FC(v19 + 16, (char *)(v19 + 40), v64 + 2, (char *)v64 + 40);
              v64[3] = 0;
              swift_release();
            }
          }
          else
          {
            v19 = swift_allocObject();
            v27 = _swift_stdlib_malloc_size((const void *)v19);
            v28 = v27 - 40;
            if (v27 < 40)
              v28 = v27 - 25;
            v29 = v64[3];
            *(_QWORD *)(v19 + 16) = v28 >> 4;
            *(_QWORD *)(v19 + 24) = v29;
            *(_QWORD *)(v19 + 32) = 0;
            if ((uint64_t)v64[3] > 0)
              sub_24B2F3B90(v19 + 16, (char *)(v19 + 40), v64 + 2, (char *)v64 + 40);
          }
          v3 = (uint64_t *)(v1 + 32);
        }
        result = swift_release();
        v64 = (_QWORD *)v19;
      }
      v31 = *(_QWORD *)(v19 + 24);
      v30 = *(_QWORD *)(v19 + 32);
      v34 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v34)
        goto LABEL_91;
      if (v31 < 0)
      {
        if (v32 < 0)
        {
          v36 = *(_QWORD *)(v19 + 16);
          v34 = __OFADD__(v32, v36);
          v32 += v36;
          if (v34)
            goto LABEL_99;
        }
      }
      else
      {
        v33 = *(_QWORD *)(v19 + 16);
        v34 = __OFSUB__(v32, v33);
        v35 = v32 - v33;
        if (v35 < 0 == v34)
        {
          v32 = v35;
          if (v34)
            goto LABEL_97;
        }
      }
      v37 = v19 + 16 * v32;
      *(_QWORD *)(v37 + 40) = v63;
      *(_QWORD *)(v37 + 48) = v13 + 1;
      v38 = *(_QWORD *)(v19 + 24);
      v34 = __OFADD__(v38, 1);
      v15 = v38 + 1;
      if (v34)
        goto LABEL_92;
      *(_QWORD *)(v19 + 24) = v15;
      v16 = *v3;
      v17 = *(_QWORD *)(*v3 + 16);
    }
    if (v12 >= v17)
      goto LABEL_88;
    v39 = v16 + 56 * v12;
    if ((*(_BYTE *)(v39 + 72) & 1) != 0)
    {
      if (!v15)
        goto LABEL_82;
    }
    else
    {
      v40 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_93;
      v41 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_94;
      v42 = *(_QWORD *)(v39 + 64);
      result = swift_isUniquelyReferenced_nonNull_native();
      v43 = *(_QWORD *)(v19 + 16);
      if (v43 >= v41 && (result & 1) != 0)
      {
        v44 = v19;
      }
      else
      {
        if (v43 >= v41)
        {
          v44 = swift_allocObject();
          v49 = *(_OWORD *)(v19 + 24);
          *(_QWORD *)(v44 + 16) = v43;
          *(_OWORD *)(v44 + 24) = v49;
          if (*(uint64_t *)(v19 + 24) > 0)
            sub_24B2F3FFC(v44 + 16, (char *)(v44 + 40), (_QWORD *)(v19 + 16), (char *)(v19 + 40));
        }
        else
        {
          v45 = swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName(&qword_257967570);
          sub_24B30B77C();
          if ((v45 & 1) != 0)
          {
            v46 = *(_QWORD *)(v19 + 24);
            v44 = swift_allocObject();
            v47 = _swift_stdlib_malloc_size((const void *)v44);
            v48 = v47 - 40;
            if (v47 < 40)
              v48 = v47 - 25;
            *(_QWORD *)(v44 + 16) = v48 >> 4;
            *(_QWORD *)(v44 + 24) = v46;
            *(_QWORD *)(v44 + 32) = 0;
            if (v46 > 0)
            {
              swift_retain();
              sub_24B2F36FC(v44 + 16, (char *)(v44 + 40), (_QWORD *)(v19 + 16), (char *)(v19 + 40));
              *(_QWORD *)(v19 + 24) = 0;
              swift_release();
            }
          }
          else
          {
            v44 = swift_allocObject();
            v50 = _swift_stdlib_malloc_size((const void *)v44);
            v51 = v50 - 40;
            if (v50 < 40)
              v51 = v50 - 25;
            v52 = *(_QWORD *)(v19 + 24);
            *(_QWORD *)(v44 + 16) = v51 >> 4;
            *(_QWORD *)(v44 + 24) = v52;
            *(_QWORD *)(v44 + 32) = 0;
            if (*(uint64_t *)(v19 + 24) > 0)
              sub_24B2F3B90(v44 + 16, (char *)(v44 + 40), (_QWORD *)(v19 + 16), (char *)(v19 + 40));
          }
          v3 = (uint64_t *)(v1 + 32);
        }
        result = swift_release();
        v64 = (_QWORD *)v44;
      }
      v54 = *(_QWORD *)(v44 + 24);
      v53 = *(_QWORD *)(v44 + 32);
      v34 = __OFADD__(v53, v54);
      v55 = v53 + v54;
      if (v34)
        goto LABEL_95;
      if (v54 < 0)
      {
        if (v55 < 0)
        {
          v59 = *(_QWORD *)(v44 + 16);
          v34 = __OFADD__(v55, v59);
          v55 += v59;
          if (v34)
            goto LABEL_100;
        }
      }
      else
      {
        v56 = *(_QWORD *)(v44 + 16);
        v57 = __OFSUB__(v55, v56);
        v58 = v55 - v56;
        if (v58 < 0 == v57)
        {
          v55 = v58;
          if (v57)
            goto LABEL_98;
        }
      }
      v60 = v44 + 16 * v55;
      *(_QWORD *)(v60 + 40) = v42;
      *(_QWORD *)(v60 + 48) = v40;
      v61 = *(_QWORD *)(v44 + 24);
      v34 = __OFADD__(v61, 1);
      v62 = v61 + 1;
      if (v34)
        goto LABEL_96;
      *(_QWORD *)(v44 + 24) = v62;
      if (!v62)
        goto LABEL_82;
    }
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
  return result;
}

Swift::Int __swiftcall BinaryMetricTree.maxDepth()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v16)(uint64_t, uint64_t);
  Swift::Int result;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char *v28;
  uint64_t (*v29)(char *, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  Swift::Int v32;
  uint64_t (*v33)(char *, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  char v50;
  char v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  uint64_t (*v66)(uint64_t, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  Swift::Int v73;
  void (*v74)(uint64_t, uint64_t);
  _QWORD *v75;

  v3 = v0;
  v4 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v67 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)&v65 - v8;
  v9 = v2;
  v10 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(v3, v4) & 1) != 0)
    return v10;
  v71 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967568);
  v11 = (_QWORD *)swift_allocObject();
  v12 = _swift_stdlib_malloc_size(v11);
  v13 = v12 - 40;
  if (v12 < 40)
    v13 = v12 - 25;
  v11[2] = v13 >> 4;
  v11[3] = 0;
  v11[4] = 0;
  sub_24B2CB4D0((uint64_t)(v11 + 2), v11 + 5, 1uLL, (uint64_t)&unk_251C3A000);
  v75 = v11;
  if (!v11[3])
  {
    swift_release();
    return 0;
  }
  v14 = *(void (**)(uint64_t, uint64_t))(v71 + 64);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = 0;
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  v65 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v66 = v16;
  v74 = v14;
  v70 = AssociatedConformanceWitness;
  while (1)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_24B2CAB68(&qword_257967568, (void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))sub_24B2F3FFC);
      v11 = v75;
    }
    v18 = v11[4];
    v19 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    v20 = v11[2 * v18 + 6];
    v21 = v11[3];
    if (v19 >= v11[2])
      v19 = 0;
    v11[4] = v19;
    if (__OFSUB__(v21, 1))
      goto LABEL_51;
    v11[3] = v21 - 1;
    if (v20 > v10)
      v10 = v20;
    v72 = v10;
    v73 = v20;
    v22 = v71;
    v14(v3, v71);
    v23 = v68;
    sub_24B30BA94();
    swift_bridgeObjectRelease();
    v24 = v66(AssociatedTypeWitness, AssociatedConformanceWitness);
    v25 = v3;
    v27 = v26;
    v28 = v23;
    v29 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
    result = v29(v28, AssociatedTypeWitness);
    v30 = v74;
    v31 = v9;
    if ((v27 & 1) == 0)
    {
      v32 = v73 + 1;
      if (__OFADD__(v73, 1))
        goto LABEL_52;
      v33 = v29;
      v34 = v75;
      v35 = v75[3];
      v36 = v35 + 1;
      if (__OFADD__(v35, 1))
        goto LABEL_53;
      result = swift_isUniquelyReferenced_nonNull_native();
      if (v34[2] < v36 || (result & 1) == 0)
      {
        result = sub_24B2CAD48(v36);
        v34 = v75;
      }
      v38 = v34[3];
      v37 = v34[4];
      v41 = __OFADD__(v37, v38);
      v39 = v37 + v38;
      if (v41)
        goto LABEL_54;
      if (v38 < 0)
      {
        v29 = v33;
        if (v39 < 0)
        {
          v43 = v34[2];
          v41 = __OFADD__(v39, v43);
          v39 += v43;
          if (v41)
            goto LABEL_62;
        }
      }
      else
      {
        v40 = v34[2];
        v41 = __OFSUB__(v39, v40);
        v42 = v39 - v40;
        v29 = v33;
        if (v42 < 0 == v41)
        {
          v39 = v42;
          if (v41)
            goto LABEL_60;
        }
      }
      v44 = &v34[2 * v39];
      v44[5] = v24;
      v44[6] = v32;
      v45 = v34[3];
      v41 = __OFADD__(v45, 1);
      v46 = v45 + 1;
      if (v41)
        goto LABEL_55;
      v34[3] = v46;
      v31 = v9;
      AssociatedConformanceWitness = v70;
      v22 = v71;
      v30 = v74;
    }
    v9 = v31;
    v30(v25, v22);
    v47 = v29;
    v48 = v67;
    sub_24B30BA94();
    swift_bridgeObjectRelease();
    v49 = v65(AssociatedTypeWitness, AssociatedConformanceWitness);
    v51 = v50;
    result = v47(v48, AssociatedTypeWitness);
    v3 = v25;
    if ((v51 & 1) != 0)
    {
      v11 = v75;
      v10 = v72;
      AssociatedConformanceWitness = v70;
      v14 = v74;
      if (!v75[3])
        goto LABEL_47;
    }
    else
    {
      v52 = v73 + 1;
      if (__OFADD__(v73, 1))
        goto LABEL_56;
      v11 = v75;
      v53 = v75[3];
      v54 = v53 + 1;
      if (__OFADD__(v53, 1))
        goto LABEL_57;
      result = swift_isUniquelyReferenced_nonNull_native();
      if (v11[2] < v54 || (result & 1) == 0)
      {
        result = sub_24B2CAD48(v54);
        v11 = v75;
      }
      v56 = v11[3];
      v55 = v11[4];
      v41 = __OFADD__(v55, v56);
      v57 = v55 + v56;
      AssociatedConformanceWitness = v70;
      if (v41)
        goto LABEL_58;
      if (v56 < 0)
      {
        v10 = v72;
        if (v57 < 0)
        {
          v61 = v11[2];
          v41 = __OFADD__(v57, v61);
          v57 += v61;
          if (v41)
            goto LABEL_63;
        }
      }
      else
      {
        v58 = v11[2];
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        v10 = v72;
        if (v60 < 0 == v59)
        {
          v57 = v60;
          if (v59)
            goto LABEL_61;
        }
      }
      v62 = &v11[2 * v57];
      v62[5] = v49;
      v62[6] = v52;
      v63 = v11[3];
      v41 = __OFADD__(v63, 1);
      v64 = v63 + 1;
      if (v41)
        goto LABEL_59;
      v11[3] = v64;
      v14 = v74;
      if (!v64)
      {
LABEL_47:
        swift_release();
        return v10;
      }
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_24B2CAB04()
{
  return sub_24B2CA068((uint64_t)&unk_251C39FA0);
}

uint64_t sub_24B2CAB2C()
{
  return sub_24B2CA068((uint64_t)&unk_251C39FD0);
}

uint64_t sub_24B2CAB54()
{
  return sub_24B2CAB68(&qword_257967590, (void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))sub_24B2F4150);
}

uint64_t sub_24B2CAB68(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t *, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t result;

  v4 = *v2;
  v5 = (uint64_t *)(*v2 + 16);
  v6 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v7 = swift_allocObject();
  v8 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(v7 + 16) = v6;
  *(_OWORD *)(v7 + 24) = v8;
  if ((uint64_t)v8 >= 1)
    a2(v7 + 16, v7 + 40, v5, v4 + 40);
  result = swift_release();
  *v2 = v7;
  return result;
}

uint64_t sub_24B2CABF8()
{
  return sub_24B2CACB4(&qword_257967588, (void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))sub_24B2F42A8);
}

uint64_t sub_24B2CAC0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;

  v1 = *v0;
  v2 = (uint64_t *)(*v0 + 16);
  v3 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967580);
  v4 = swift_allocObject();
  v5 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  if ((uint64_t)v5 >= 1)
    sub_24B2F42C4(v4 + 16, (char *)(v4 + 40), v2, (char *)(v1 + 40));
  result = swift_release();
  *v0 = v4;
  return result;
}

uint64_t sub_24B2CACA0()
{
  return sub_24B2CACB4(&qword_257967578, (void (*)(uint64_t, uint64_t, uint64_t *, uint64_t))sub_24B2F4418);
}

uint64_t sub_24B2CACB4(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t *, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t result;

  v4 = *v2;
  v5 = (uint64_t *)(*v2 + 16);
  v6 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v7 = swift_allocObject();
  v8 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(v7 + 16) = v6;
  *(_OWORD *)(v7 + 24) = v8;
  if ((uint64_t)v8 >= 1)
    a2(v7 + 16, v7 + 40, v5, v4 + 40);
  result = swift_release();
  *v2 = v7;
  return result;
}

uint64_t sub_24B2CAD48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  __int128 v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = *v1;
  v3 = (uint64_t *)(*v1 + 16);
  v4 = *v3;
  if (*v3 >= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967568);
    v8 = swift_allocObject();
    v11 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v8 + 16) = v4;
    *(_OWORD *)(v8 + 24) = v11;
    if ((uint64_t)v11 >= 1)
      sub_24B2F3FFC(v8 + 16, (char *)(v8 + 40), v3, (char *)(v2 + 40));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967570);
    sub_24B30B77C();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v7 = *(_QWORD *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967568);
      v8 = swift_allocObject();
      v9 = _swift_stdlib_malloc_size((const void *)v8);
      v10 = v9 - 40;
      if (v9 < 40)
        v10 = v9 - 25;
      *(_QWORD *)(v8 + 16) = v10 >> 4;
      *(_QWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = 0;
      if (v7 >= 1)
      {
        swift_retain();
        sub_24B2F36FC(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
        *(_QWORD *)(v6 + 24) = 0;
        swift_release();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967568);
      v8 = swift_allocObject();
      v12 = _swift_stdlib_malloc_size((const void *)v8);
      v13 = v12 - 40;
      if (v12 < 40)
        v13 = v12 - 25;
      v14 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v8 + 16) = v13 >> 4;
      *(_QWORD *)(v8 + 24) = v14;
      *(_QWORD *)(v8 + 32) = 0;
      if (v14 >= 1)
        sub_24B2F3B90(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_24B2CAF1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  __int128 v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = *v1;
  v3 = (uint64_t *)(*v1 + 16);
  v4 = *v3;
  if (*v3 >= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967590);
    v8 = swift_allocObject();
    v11 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v8 + 16) = v4;
    *(_OWORD *)(v8 + 24) = v11;
    if ((uint64_t)v11 >= 1)
      sub_24B2F4150(v8 + 16, (char *)(v8 + 40), v3, (char *)(v2 + 40));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967598);
    sub_24B30B77C();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v7 = *(_QWORD *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967590);
      v8 = swift_allocObject();
      v9 = _swift_stdlib_malloc_size((const void *)v8);
      v10 = v9 - 40;
      if (v9 < 40)
        v10 = v9 - 25;
      *(_QWORD *)(v8 + 16) = v10 >> 4;
      *(_QWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = 0;
      if (v7 >= 1)
      {
        swift_retain();
        sub_24B2F3818(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
        *(_QWORD *)(v6 + 24) = 0;
        swift_release();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967590);
      v8 = swift_allocObject();
      v12 = _swift_stdlib_malloc_size((const void *)v8);
      v13 = v12 - 40;
      if (v12 < 40)
        v13 = v12 - 25;
      v14 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v8 + 16) = v13 >> 4;
      *(_QWORD *)(v8 + 24) = v14;
      *(_QWORD *)(v8 + 32) = 0;
      if (v14 >= 1)
        sub_24B2F3B90(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_24B2CB0F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  size_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = *v1;
  v3 = (uint64_t *)(*v1 + 16);
  v4 = *v3;
  if (*v3 >= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967588);
    v8 = swift_allocObject();
    v9 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v8 + 16) = v4;
    *(_OWORD *)(v8 + 24) = v9;
    if ((uint64_t)v9 >= 1)
      sub_24B2F42A8(v8 + 16, v8 + 40, v3, v2 + 40);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v1;
    sub_24B30B77C();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v7 = *(_QWORD *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967588);
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = (uint64_t)(_swift_stdlib_malloc_size((const void *)v8) - 40) / 24;
      *(_QWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = 0;
      if (v7 >= 1)
      {
        swift_retain();
        sub_24B2F3934(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
        *(_QWORD *)(v6 + 24) = 0;
        swift_release();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967588);
      v8 = swift_allocObject();
      v10 = _swift_stdlib_malloc_size((const void *)v8);
      v11 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v8 + 16) = (uint64_t)(v10 - 40) / 24;
      *(_QWORD *)(v8 + 24) = v11;
      *(_QWORD *)(v8 + 32) = 0;
      if (v11 >= 1)
        sub_24B2F3CF4(v8 + 16, v8 + 40, (_QWORD *)(v6 + 16), v6 + 40);
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_24B2CB2E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  size_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = *v1;
  v3 = (uint64_t *)(*v1 + 16);
  v4 = *v3;
  if (*v3 >= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967578);
    v8 = swift_allocObject();
    v9 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v8 + 16) = v4;
    *(_OWORD *)(v8 + 24) = v9;
    if ((uint64_t)v9 >= 1)
      sub_24B2F4418(v8 + 16, v8 + 40, v3, v2 + 40);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v1;
    sub_24B30B77C();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v7 = *(_QWORD *)(v6 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967578);
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = (uint64_t)(_swift_stdlib_malloc_size((const void *)v8) - 40) / 24;
      *(_QWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = 0;
      if (v7 >= 1)
      {
        swift_retain();
        sub_24B2F3934(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
        *(_QWORD *)(v6 + 24) = 0;
        swift_release();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967578);
      v8 = swift_allocObject();
      v10 = _swift_stdlib_malloc_size((const void *)v8);
      v11 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v8 + 16) = (uint64_t)(v10 - 40) / 24;
      *(_QWORD *)(v8 + 24) = v11;
      *(_QWORD *)(v8 + 32) = 0;
      if (v11 >= 1)
        sub_24B2F3E74(v8 + 16, v8 + 40, (_QWORD *)(v6 + 16), v6 + 40);
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_24B2CB4D0(uint64_t result, void *__dst, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  v6 = *(_QWORD *)(a4 + 16);
  if (!v6)
  {
LABEL_9:
    *(_QWORD *)(v5 + 8) = a3;
    return result;
  }
  if (v6 > a3)
    goto LABEL_11;
  if (a4 + 32 >= (unint64_t)__dst + 16 * v6 || a4 + 32 + 16 * v6 <= (unint64_t)__dst)
  {
    result = (uint64_t)memcpy(__dst, (const void *)(a4 + 32), 16 * v6);
    goto LABEL_9;
  }
LABEL_12:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of BinaryTreeNode.left.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BinaryTreeNode.right.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_24B2CB5E0(uint64_t result, void *__dst, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  v6 = *(_QWORD *)(a4 + 16);
  if (!v6)
  {
LABEL_9:
    *(_QWORD *)(v5 + 8) = a3;
    return result;
  }
  if (v6 > a3)
    goto LABEL_11;
  if (a4 + 32 >= (unint64_t)__dst + 8 * v6 || a4 + 32 + 8 * v6 <= (unint64_t)__dst)
  {
    result = (uint64_t)memcpy(__dst, (const void *)(a4 + 32), 8 * v6);
    goto LABEL_9;
  }
LABEL_12:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t JSONLinesLoader.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v25 = sub_24B30B428();
  v11 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_24B30B434();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a6[3] = 0;
  v18 = type metadata accessor for JSONLinesLoader(0, a3, a4, a5);
  v19 = (char *)a6 + *(int *)(v18 + 52);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)((char *)a6 + *(int *)(v18 + 56)) = 0;
  v21 = v24;
  *a6 = a1;
  a6[1] = v21;
  sub_24B30B470();
  swift_allocObject();
  v22 = sub_24B30B464();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BDCB1D8], v14);
  sub_24B30B44C();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BDCB1B8], v25);
  sub_24B30B440();
  a6[2] = v22;
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a6, 0, 1, v18);
}

uint64_t type metadata accessor for JSONLinesLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONLinesLoader);
}

uint64_t JSONLinesLoader.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t JSONLinesLoader.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B0);
  v3[11] = v5;
  v3[12] = *(_QWORD *)(v5 - 8);
  v3[13] = swift_task_alloc();
  v6 = sub_24B30BB90();
  v3[14] = v6;
  v3[15] = *(_QWORD *)(v6 - 8);
  v3[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
  v3[17] = swift_task_alloc();
  v7 = sub_24B30B500();
  v3[18] = v7;
  v3[19] = *(_QWORD *)(v7 - 8);
  v3[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C0);
  v3[21] = swift_task_alloc();
  v8 = sub_24B30B530();
  v3[22] = v8;
  v3[23] = *(_QWORD *)(v8 - 8);
  v3[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2CB9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_24B30BB00();
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(int *)(v1 + 56);
  *(_DWORD *)(v0 + 232) = v3;
  if (!*(_QWORD *)(v2 + v3))
  {
    v16 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 152);
    v19 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 144);
    sub_24B2CCDA8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v18, 1, 1, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v19, *MEMORY[0x24BDCD7A0], v21);
    swift_bridgeObjectRetain();
    sub_24B30B524();
    v22 = sub_24B2CC570(v15);
    v25 = v22;
    if (!v22)
      goto LABEL_15;
    v27 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 136);
    v28 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 104);
    v37 = *(_QWORD *)(v0 + 120);
    v38 = *(_QWORD *)(v0 + 96);
    v30 = *(_QWORD *)(v0 + 88);
    v31 = *(_QWORD *)(v0 + 56);
    v39 = *(_QWORD *)(v0 + 48);
    v32 = *(void **)(v31 + 24);
    v33 = v22;

    *(_QWORD *)(v31 + 24) = v25;
    sub_24B30BB9C();
    sub_24B2CCDE4();
    sub_24B30BB0C();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v27, v28);
    sub_24B30B4DC();

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v29, v30);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v26, 0, 1, v34);
    sub_24B2CCE2C(v26, v31 + *(int *)(v39 + 52));
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)(v0 + 56);
  }
  v4 = v2 + *(int *)(v1 + 52);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v23;
    *v23 = v0;
    v23[1] = sub_24B2CBE58;
    return sub_24B30B4E8();
  }
  if (qword_257967450 != -1)
    swift_once();
  v6 = sub_24B30B7A0();
  __swift_project_value_buffer(v6, (uint64_t)qword_25796F248);
  v7 = sub_24B30B788();
  v8 = sub_24B30BBB4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_24B2C5000, v7, v8, "Reached the end of the file.", v9, 2u);
    MEMORY[0x24BD1D2BC](v9, -1, -1);
  }
  v10 = *(_QWORD *)(v0 + 56);

  v11 = *(void **)(v10 + 24);
  if (v11)
  {
    *(_QWORD *)(v0 + 16) = 0;
    v12 = objc_msgSend(v11, sel_closeAndReturnError_, v0 + 16);
    v13 = *(void **)(v0 + 16);
    if (v12)
    {
      v14 = v13;
    }
    else
    {
      v35 = v13;
      v36 = (void *)sub_24B30B4F4();

      swift_willThrow();
    }
  }
LABEL_15:
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 40), 1, 1, *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2CBE58(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[26] = a1;
  v4[27] = a2;
  v4[28] = v2;
  swift_task_dealloc();
  if (v2)

  return swift_task_switch();
}

uint64_t sub_24B2CBF14()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  id v42;

  v1 = *(_QWORD *)(v0 + 216);
  if (!v1)
  {
    if (qword_257967450 != -1)
      swift_once();
    v17 = sub_24B30B7A0();
    __swift_project_value_buffer(v17, (uint64_t)qword_25796F248);
    v18 = sub_24B30B788();
    v19 = sub_24B30BBB4();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_24B2C5000, v18, v19, "Reached the end of the file.", v20, 2u);
      MEMORY[0x24BD1D2BC](v20, -1, -1);
    }
    v21 = *(_QWORD *)(v0 + 56);

    v22 = *(void **)(v21 + 24);
    if (!v22)
      goto LABEL_25;
    *(_QWORD *)(v0 + 16) = 0;
    v23 = objc_msgSend(v22, sel_closeAndReturnError_, v0 + 16);
    v24 = *(void **)(v0 + 16);
    if (v23)
    {
      v25 = v24;
LABEL_25:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 40), 1, 1, *(_QWORD *)(v0 + 64));
      goto LABEL_26;
    }
    v42 = v24;
    v41 = sub_24B30B4F4();

    swift_willThrow();
    goto LABEL_23;
  }
  v2 = *(void **)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  swift_retain();
  v4 = sub_24B2CC684(v3, v1);
  v6 = v5;
  sub_24B30B458();
  if (v2)
  {
    v7 = v2;
    sub_24B2CCD64(v4, v6);
    swift_release();
    if (qword_257967450 != -1)
      swift_once();
    v8 = sub_24B30B7A0();
    __swift_project_value_buffer(v8, (uint64_t)qword_25796F248);
    v9 = v2;
    v10 = v2;
    v11 = sub_24B30B788();
    v12 = sub_24B30BBC0();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v13 = 138412290;
      v15 = v7;
      v16 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 32) = v16;
      sub_24B30BBD8();
      *v14 = v16;

      _os_log_impl(&dword_24B2C5000, v11, v12, "Failed at parsing data: %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C8);
      swift_arrayDestroy();
      MEMORY[0x24BD1D2BC](v14, -1, -1);
      MEMORY[0x24BD1D2BC](v13, -1, -1);
    }
    else
    {

    }
    v35 = *(void **)(*(_QWORD *)(v0 + 56) + 24);
    if (!v35)
      goto LABEL_20;
    *(_QWORD *)(v0 + 24) = 0;
    v36 = objc_msgSend(v35, sel_closeAndReturnError_, v0 + 24);
    v37 = *(void **)(v0 + 24);
    if (v36)
    {
      v38 = v37;
LABEL_20:
      v39 = v7;
LABEL_24:

      goto LABEL_25;
    }
    v40 = v37;
    v41 = sub_24B30B4F4();

    swift_willThrow();
LABEL_23:
    v39 = (void *)v41;
    goto LABEL_24;
  }
  v26 = *(int *)(v0 + 232);
  v27 = *(_QWORD *)(v0 + 56);
  sub_24B2CCD64(v4, v6);
  swift_release();
  v28 = *(_QWORD *)(v27 + v26);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
    __break(1u);
  v32 = *(_QWORD *)(v0 + 72);
  v31 = *(_QWORD *)(v0 + 80);
  v33 = *(_QWORD *)(v0 + 64);
  v34 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 232)) = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v34, v31, v33);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v33);
LABEL_26:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2CC398()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;
  id v10;
  void *v11;

  if (qword_257967450 != -1)
    swift_once();
  v1 = sub_24B30B7A0();
  __swift_project_value_buffer(v1, (uint64_t)qword_25796F248);
  v2 = sub_24B30B788();
  v3 = sub_24B30BBB4();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_24B2C5000, v2, v3, "Reached the end of the file.", v4, 2u);
    MEMORY[0x24BD1D2BC](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 56);

  v6 = *(void **)(v5 + 24);
  if (v6)
  {
    *(_QWORD *)(v0 + 16) = 0;
    v7 = objc_msgSend(v6, sel_closeAndReturnError_, v0 + 16);
    v8 = *(void **)(v0 + 16);
    if (v7)
    {
      v9 = v8;
    }
    else
    {
      v10 = v8;
      v11 = (void *)sub_24B30B4F4();

      swift_willThrow();
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 40), 1, 1, *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_24B2CC570(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  id v8;
  uint64_t v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)sub_24B30B50C();
  v11[0] = 0;
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, v11);

  v4 = v11[0];
  if (v3)
  {
    v5 = sub_24B30B530();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v7 = v4;
    v6(a1, v5);
  }
  else
  {
    v8 = v11[0];
    sub_24B30B4F4();

    swift_willThrow();
    v9 = sub_24B30B530();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

uint64_t sub_24B2CC684(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967678);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_24B2CD718((uint64_t)v14);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_24B30BC5C();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_24B2CDE0C(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_24B30B938();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_24B2CDE70(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_24B2CD758();
    __asm { BR              X12 }
  }
  sub_24B2CDF7C(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_24B30B4D0();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_24B2CCB80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24B2CCBE0;
  return JSONLinesLoader.next()(a1, a2);
}

uint64_t sub_24B2CCBE0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24B2CCC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_24B2CCCC0;
  return sub_24B30BAE8();
}

uint64_t sub_24B2CCCC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_24B2CCD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  JSONLinesLoader.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_24B2CCD64(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_24B2CCDA8()
{
  unint64_t result;

  result = qword_2579675D0;
  if (!qword_2579675D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2579675D0);
  }
  return result;
}

unint64_t sub_24B2CCDE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2579675D8[0];
  if (!qword_2579675D8[0])
  {
    v1 = sub_24B30BB90();
    result = MEMORY[0x24BD1D214](MEMORY[0x24BDCFE48], v1);
    atomic_store(result, qword_2579675D8);
  }
  return result;
}

uint64_t sub_24B2CCE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_24B2CCE74()
{
  return MEMORY[0x24BEE3F20];
}

void sub_24B2CCE80()
{
  JUMPOUT(0x24BD1D214);
}

uint64_t sub_24B2CCE90()
{
  return swift_allocateGenericValueMetadata();
}

void sub_24B2CCE98()
{
  unint64_t v0;

  sub_24B2CD67C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_24B2CCF30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (void *)a2[3];
    a1[2] = a2[2];
    a1[3] = (uint64_t)v8;
    v9 = *(int *)(a3 + 52);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = v8;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v11, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 56));
  }
  return a1;
}

uint64_t sub_24B2CD050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();

  v4 = a1 + *(int *)(a2 + 52);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_24B2CD0E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 52);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  swift_bridgeObjectRetain();
  swift_retain();
  v11 = v7;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v9, v10, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 56)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 56));
  return a1;
}

_QWORD *sub_24B2CD1D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = (void *)a1[3];
  v7 = (void *)a2[3];
  a1[3] = v7;
  v8 = v7;

  v9 = *(int *)(a3 + 52);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 56)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 56));
  return a1;
}

_OWORD *sub_24B2CD340(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 52);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 56)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 56));
  return a1;
}

_QWORD *sub_24B2CD41C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_release();
  v7 = (void *)a1[3];
  a1[3] = a2[3];

  v8 = *(int *)(a3 + 52);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 56)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t sub_24B2CD56C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2CD578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t sub_24B2CD5F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2CD604(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

void sub_24B2CD67C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257967670)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2579675A0);
    v0 = sub_24B30BBCC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257967670);
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD1D208](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_24B2CD718(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967680);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_24B2CD758()
{
  __asm { BR              X11 }
}

_QWORD *sub_24B2CD7B8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_24B2CDA48@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_24B2CDC54(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_24B2CDD14((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_24B2CDD8C((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_24B2CDABC(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_24B2CDB20(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_24B30B494();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_24B30B4B8();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_24B30B4AC();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_24B2CDBCC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_24B30BC38();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2CDC54(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_24B2CDD14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_24B30B4C4();
  swift_allocObject();
  result = sub_24B30B488();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_24B30B548();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_24B2CDD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_24B30B4C4();
  swift_allocObject();
  result = sub_24B30B488();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_24B2CDE0C(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_24B2CDC54(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_24B2CDD14((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_24B2CDD8C((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_24B2CDE70(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_24B30B4C4();
      swift_allocObject();
      sub_24B30B4A0();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_24B30B548();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *sub_24B2CDF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_24B2CDABC((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_24B2CDFD8, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_24B2CDF68(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_24B2CCD64(a1, a2);
  return a1;
}

uint64_t sub_24B2CDF7C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_24B2CDFD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_24B2CDBCC(a1, a2);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24BD1D1A8](a1, v6, a5);
}

uint64_t ExtractedMessage.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_24B30B5B4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ExtractedMessage.sender.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ExtractedMessage() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for ExtractedMessage()
{
  uint64_t result;

  result = qword_257967830;
  if (!qword_257967830)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ExtractedMessage.receiver.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ExtractedMessage() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtractedMessage.subject.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ExtractedMessage() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtractedMessage.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ExtractedMessage() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtractedMessage.conversationId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ExtractedMessage() + 36));
}

uint64_t ExtractedMessage.autoSubmitted.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ExtractedMessage() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

int *ExtractedMessage.init(date:sender:receiver:subject:body:conversationId:autoSubmitted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21;
  int *result;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v28;

  v21 = sub_24B30B5B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a9, a1, v21);
  result = (int *)type metadata accessor for ExtractedMessage();
  v23 = (_QWORD *)(a9 + result[5]);
  *v23 = a2;
  v23[1] = a3;
  v24 = (_QWORD *)(a9 + result[6]);
  *v24 = a4;
  v24[1] = a5;
  v25 = (_QWORD *)(a9 + result[7]);
  *v25 = a6;
  v25[1] = a7;
  v26 = (_QWORD *)(a9 + result[8]);
  *v26 = a8;
  v26[1] = a10;
  if ((a12 & 1) != 0)
    a11 = 0;
  *(_QWORD *)(a9 + result[9]) = a11;
  v28 = (_QWORD *)(a9 + result[10]);
  *v28 = a13;
  v28[1] = a14;
  return result;
}

uint64_t sub_24B2CE2E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24B2CE310 + 4 * byte_24B30CB60[*v0]))(1702125924, 0xE400000000000000);
}

uint64_t sub_24B2CE310()
{
  return 0x7265646E6573;
}

uint64_t sub_24B2CE324()
{
  return 0x7265766965636572;
}

uint64_t sub_24B2CE33C()
{
  return 0x7463656A627573;
}

uint64_t sub_24B2CE354()
{
  return 2036625250;
}

uint64_t sub_24B2CE360()
{
  return 0x61737265766E6F63;
}

uint64_t sub_24B2CE384()
{
  return 0x6D6275536F747561;
}

uint64_t sub_24B2CE3A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D3948(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24B2CE3CC()
{
  return 0;
}

void sub_24B2CE3D8(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_24B2CE3E4()
{
  sub_24B2CE678();
  return sub_24B30BECC();
}

uint64_t sub_24B2CE40C()
{
  sub_24B2CE678();
  return sub_24B30BED8();
}

uint64_t ExtractedMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967688);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CE678();
  sub_24B30BEC0();
  v8[15] = 0;
  sub_24B30B5B4();
  sub_24B2C8020(&qword_257967698, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  sub_24B30BDE8();
  if (!v1)
  {
    type metadata accessor for ExtractedMessage();
    v8[14] = 1;
    sub_24B30BDC4();
    v8[13] = 2;
    sub_24B30BDC4();
    v8[12] = 3;
    sub_24B30BDC4();
    v8[11] = 4;
    sub_24B30BDC4();
    v8[10] = 5;
    sub_24B30BDF4();
    v8[9] = 6;
    sub_24B30BDA0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_24B2CE678()
{
  unint64_t result;

  result = qword_257967690;
  if (!qword_257967690)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D958, &type metadata for ExtractedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967690);
  }
  return result;
}

uint64_t ExtractedMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v32 = a2;
  v33 = sub_24B30B5B4();
  v3 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579676A0);
  v5 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ExtractedMessage();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CE678();
  v36 = v7;
  v11 = (uint64_t)v37;
  sub_24B30BEB4();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v37 = a1;
  v12 = (uint64_t)v10;
  v44 = 0;
  sub_24B2C8020(&qword_2579676A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v13 = v34;
  v14 = v33;
  sub_24B30BD7C();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v12, v35, v14);
  v43 = 1;
  v15 = sub_24B30BD58();
  v16 = (uint64_t *)(v12 + v8[5]);
  *v16 = v15;
  v16[1] = v17;
  v42 = 2;
  v18 = sub_24B30BD58();
  v19 = (uint64_t *)(v12 + v8[6]);
  *v19 = v18;
  v19[1] = v20;
  v41 = 3;
  v21 = sub_24B30BD58();
  v22 = (uint64_t *)(v12 + v8[7]);
  *v22 = v21;
  v22[1] = v23;
  v40 = 4;
  v35 = 0;
  v24 = sub_24B30BD58();
  v25 = (uint64_t *)(v12 + v8[8]);
  *v25 = v24;
  v25[1] = v26;
  v39 = 5;
  *(_QWORD *)(v12 + v8[9]) = sub_24B30BD88();
  v38 = 6;
  v27 = sub_24B30BD34();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v36, v13);
  v30 = (uint64_t *)(v12 + v8[10]);
  *v30 = v27;
  v30[1] = v29;
  sub_24B2CEB00(v12, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  return sub_24B2CEB44(v12);
}

uint64_t sub_24B2CEB00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ExtractedMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24B2CEB44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ExtractedMessage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24B2CEB80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ExtractedMessage.init(from:)(a1, a2);
}

uint64_t sub_24B2CEB94(_QWORD *a1)
{
  return ExtractedMessage.encode(to:)(a1);
}

uint64_t ExtractedConversation.conversationId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ExtractedConversation.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ExtractedConversation.messages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExtractedConversation.conversationText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtractedConversation.init(conversationId:count:messages:conversationText:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_24B2CEBFC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24B2CEC38 + 4 * byte_24B30CB67[*v0]))(0x61737265766E6F63, 0xEE0064496E6F6974);
}

uint64_t sub_24B2CEC38()
{
  return 0x746E756F63;
}

uint64_t sub_24B2CEC4C()
{
  return 0x736567617373656DLL;
}

unint64_t sub_24B2CEC64()
{
  return 0xD000000000000010;
}

uint64_t sub_24B2CEC80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D3C4C(a1, a2);
  *a3 = result;
  return result;
}

void sub_24B2CECA4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_24B2CECB0()
{
  sub_24B2CEECC();
  return sub_24B30BECC();
}

uint64_t sub_24B2CECD8()
{
  sub_24B2CEECC();
  return sub_24B30BED8();
}

uint64_t ExtractedConversation.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579676B0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v13 = v1[2];
  v14 = v8;
  v9 = v1[3];
  v12[1] = v1[4];
  v12[2] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CEECC();
  sub_24B30BEC0();
  v19 = 0;
  sub_24B30BDF4();
  if (!v2)
  {
    v10 = v13;
    v18 = 1;
    sub_24B30BDDC();
    v15 = v10;
    v17 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579676C0);
    sub_24B2CF154(&qword_2579676C8, &qword_2579676D0, (uint64_t)&protocol conformance descriptor for ExtractedMessage, MEMORY[0x24BEE12A0]);
    sub_24B30BDE8();
    v16 = 3;
    sub_24B30BDC4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24B2CEECC()
{
  unint64_t result;

  result = qword_2579676B8;
  if (!qword_2579676B8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D908, &type metadata for ExtractedConversation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579676B8);
  }
  return result;
}

uint64_t ExtractedConversation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579676D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CEECC();
  sub_24B30BEB4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = 0;
  v9 = sub_24B30BD88();
  v20 = 1;
  v10 = sub_24B30BD70();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579676C0);
  v19 = 2;
  sub_24B2CF154(&qword_2579676E0, &qword_2579676E8, (uint64_t)&protocol conformance descriptor for ExtractedMessage, MEMORY[0x24BEE12D0]);
  sub_24B30BD7C();
  v18 = 3;
  v17[0] = v17[1];
  swift_bridgeObjectRetain();
  v11 = sub_24B30BD58();
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15 = v11;
  v14(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v17[0];
  a2[3] = v15;
  a2[4] = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2CF154(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2579676C0);
    v10 = sub_24B2C8020(a2, (uint64_t (*)(uint64_t))type metadata accessor for ExtractedMessage, a3);
    result = MEMORY[0x24BD1D214](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B2CF1D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ExtractedConversation.init(from:)(a1, a2);
}

uint64_t sub_24B2CF1EC(_QWORD *a1)
{
  return ExtractedConversation.encode(to:)(a1);
}

uint64_t ConversationEmbedding.conversationId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ConversationEmbedding.embedding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationEmbedding.embeddingModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationEmbedding.init(conversationId:embedding:embeddingModel:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t sub_24B2CF248()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E69646465626D65;
  else
    return 0x61737265766E6F63;
}

uint64_t sub_24B2CF2C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D3E1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_24B2CF2E4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_24B2CF2F0()
{
  sub_24B2CF4E0();
  return sub_24B30BECC();
}

uint64_t sub_24B2CF318()
{
  sub_24B2CF4E0();
  return sub_24B30BED8();
}

uint64_t ConversationEmbedding.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579676F0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v10[1] = v1[2];
  v11 = v8;
  v10[0] = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CF4E0();
  sub_24B30BEC0();
  v15 = 0;
  sub_24B30BDF4();
  if (!v2)
  {
    v12 = v11;
    v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
    sub_24B2D07B8(&qword_257967700, &qword_2579674D0, MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
    sub_24B30BDE8();
    v13 = 2;
    sub_24B30BDA0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24B2CF4E0()
{
  unint64_t result;

  result = qword_2579676F8;
  if (!qword_2579676F8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D8B8, &type metadata for ConversationEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579676F8);
  }
  return result;
}

uint64_t ConversationEmbedding.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967708);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CF4E0();
  sub_24B30BEB4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = 0;
  v9 = sub_24B30BD88();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
  v19 = 1;
  sub_24B2D07B8(&qword_257967710, &qword_2579674D0, MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
  sub_24B30BD7C();
  v10 = v17[1];
  v18 = 2;
  swift_bridgeObjectRetain();
  v11 = sub_24B30BD34();
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15 = v11;
  v14(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v15;
  a2[3] = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2CF730@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ConversationEmbedding.init(from:)(a1, a2);
}

uint64_t sub_24B2CF744(_QWORD *a1)
{
  return ConversationEmbedding.encode(to:)(a1);
}

uint64_t ExtractedItem.itemId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ExtractedItem.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtractedItem.init(itemId:text:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

BOOL sub_24B2CF798(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_24B2CF7B0()
{
  return sub_24B30BE9C();
}

uint64_t sub_24B2CF7D8()
{
  _BYTE *v0;

  if (*v0)
    return 1954047348;
  else
    return 0x64496D657469;
}

uint64_t sub_24B2CF808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D3FBC(a1, a2);
  *a3 = result;
  return result;
}

void sub_24B2CF82C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_24B2CF838()
{
  sub_24B2CF9AC();
  return sub_24B30BECC();
}

uint64_t sub_24B2CF860()
{
  sub_24B2CF9AC();
  return sub_24B30BED8();
}

uint64_t ExtractedItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967718);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v10[0] = *(_QWORD *)(v1 + 16);
  v10[1] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CF9AC();
  sub_24B30BEC0();
  v12 = 0;
  sub_24B30BDF4();
  if (!v2)
  {
    v11 = 1;
    sub_24B30BDC4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24B2CF9AC()
{
  unint64_t result;

  result = qword_257967720;
  if (!qword_257967720)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D868, &type metadata for ExtractedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967720);
  }
  return result;
}

uint64_t ExtractedItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967728);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CF9AC();
  sub_24B30BEB4();
  if (!v2)
  {
    v16 = 0;
    v9 = sub_24B30BD88();
    v15 = 1;
    v11 = sub_24B30BD58();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
    a2[2] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24B2CFB40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ExtractedItem.init(from:)(a1, a2);
}

uint64_t sub_24B2CFB54(_QWORD *a1)
{
  return ExtractedItem.encode(to:)(a1);
}

uint64_t EmbeddingItem.itemId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EmbeddingItem.embedding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EmbeddingItem.embeddingModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EmbeddingItem.sourceType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EmbeddingItem.init(itemId:embedding:embeddingModel:sourceType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

BOOL sub_24B2CFBE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24B2CFBF4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24B2CFC20 + 4 * byte_24B30CB6B[*v0]))(0x64496D657469, 0xE600000000000000);
}

uint64_t sub_24B2CFC20()
{
  return 0x6E69646465626D65;
}

uint64_t sub_24B2CFC50()
{
  return 0x7954656372756F73;
}

uint64_t sub_24B2CFC6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D4094(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24B2CFC90()
{
  sub_24B2CFEBC();
  return sub_24B30BECC();
}

uint64_t sub_24B2CFCB8()
{
  sub_24B2CFEBC();
  return sub_24B30BED8();
}

uint64_t EmbeddingItem.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967730);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v11[3] = v1[2];
  v12 = v8;
  v9 = v1[3];
  v11[0] = v1[4];
  v11[1] = v1[5];
  v11[2] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CFEBC();
  sub_24B30BEC0();
  v17 = 0;
  sub_24B30BDF4();
  if (!v2)
  {
    v13 = v12;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
    sub_24B2D07B8(&qword_257967700, &qword_2579674D0, MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
    sub_24B30BDE8();
    v15 = 2;
    sub_24B30BDA0();
    v14 = 3;
    sub_24B30BDA0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24B2CFEBC()
{
  unint64_t result;

  result = qword_257967738;
  if (!qword_257967738)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D818, &type metadata for EmbeddingItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967738);
  }
  return result;
}

uint64_t EmbeddingItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967740);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2CFEBC();
  sub_24B30BEB4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v26 = 0;
  v9 = sub_24B30BD88();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
  v25 = 1;
  sub_24B2D07B8(&qword_257967710, &qword_2579674D0, MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
  sub_24B30BD7C();
  v10 = v22;
  v24 = 2;
  swift_bridgeObjectRetain();
  v20 = sub_24B30BD34();
  v21 = v11;
  v23 = 3;
  swift_bridgeObjectRetain();
  v12 = sub_24B30BD34();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16 = v12;
  v15(v8, v5);
  swift_bridgeObjectRetain();
  *a2 = v9;
  a2[1] = v10;
  v17 = v21;
  a2[2] = v20;
  a2[3] = v17;
  a2[4] = v16;
  a2[5] = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2D0180@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return EmbeddingItem.init(from:)(a1, a2);
}

uint64_t sub_24B2D0194(_QWORD *a1)
{
  return EmbeddingItem.encode(to:)(a1);
}

uint64_t NNScore.topKScores.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NNScore.topKIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NNScore.k.getter()
{
  _QWORD *v0;

  if (*(_QWORD *)(v0[1] + 16) >= *(_QWORD *)(*v0 + 16))
    return *(_QWORD *)(*v0 + 16);
  else
    return *(_QWORD *)(v0[1] + 16);
}

BOOL static NNScore.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a2[1];
  return sub_24B2D0218(*a1, *a2) && sub_24B2D028C(v2, v3);
}

BOOL sub_24B2D0218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (float *)(a1 + 36);
  v6 = (float *)(a2 + 36);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

BOOL sub_24B2D028C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_24B2D0300()
{
  _BYTE *v0;

  if (*v0)
    return 0x69646E494B706F74;
  else
    return 0x726F63534B706F74;
}

uint64_t sub_24B2D0348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D4278(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24B2D036C()
{
  sub_24B2D0560();
  return sub_24B30BECC();
}

uint64_t sub_24B2D0394()
{
  sub_24B2D0560();
  return sub_24B30BED8();
}

uint64_t NNScore.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967748);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v10 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D0560();
  sub_24B30BEC0();
  v12 = v8;
  v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
  sub_24B2D07B8(&qword_257967700, &qword_2579674D0, MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
  sub_24B30BDE8();
  if (!v2)
  {
    v12 = v10;
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967758);
    sub_24B2D07B8(&qword_257967760, &qword_257967758, MEMORY[0x24BEE1770], MEMORY[0x24BEE12A0]);
    sub_24B30BDE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24B2D0560()
{
  unint64_t result;

  result = qword_257967750;
  if (!qword_257967750)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D7C8, &type metadata for NNScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967750);
  }
  return result;
}

uint64_t NNScore.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967768);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D0560();
  sub_24B30BEB4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
  v13 = 0;
  sub_24B2D07B8(&qword_257967710, &qword_2579674D0, MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
  sub_24B30BD7C();
  v9 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967758);
  v13 = 1;
  sub_24B2D07B8(&qword_257967770, &qword_257967758, MEMORY[0x24BEE1798], MEMORY[0x24BEE12D0]);
  swift_bridgeObjectRetain();
  sub_24B30BD7C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v14;
  *a2 = v9;
  a2[1] = v10;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2D07B8(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x24BD1D214](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B2D0814@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NNScore.init(from:)(a1, a2);
}

uint64_t sub_24B2D0828(_QWORD *a1)
{
  return NNScore.encode(to:)(a1);
}

BOOL sub_24B2D083C(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a2[1];
  return sub_24B2D0218(*a1, *a2) && sub_24B2D028C(v2, v3);
}

float ScoreStatistics.min.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float ScoreStatistics.max.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

float ScoreStatistics.mean.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

float ScoreStatistics.standardDeviation.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

float ScoreStatistics.median.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

void __swiftcall ScoreStatistics.init(nnScore:)(ZeoliteFramework::ScoreStatistics *__return_ptr retstr, ZeoliteFramework::NNScore nnScore)
{
  uint64_t v3;
  unint64_t v4;
  Swift::Float v5;
  unint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  vDSP_Length v10;
  Swift::Float v11;
  float v12;
  Swift::Float v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)nnScore.topKScores._rawValue;
  v4 = (unint64_t)calculatePercentiles(_:percentiles:)(*(Swift::OpaquePointer *)nnScore.topKScores._rawValue, (Swift::OpaquePointer)&unk_251C3A030);
  v5 = 0.0;
  if (v4)
  {
    if (!*(_QWORD *)(v4 + 16))
      __break(1u);
    v5 = *(float *)(v4 + 32);
    swift_bridgeObjectRelease();
  }
  v6 = sub_24B2C7820(v3);
  if ((v6 & 0x100000000) != 0)
    v7 = 0.0;
  else
    v7 = *(float *)&v6;
  v8 = sub_24B2C7878(v3);
  if ((v8 & 0x100000000) != 0)
    v9 = 0.0;
  else
    v9 = *(float *)&v8;
  v10 = *(_QWORD *)(v3 + 16);
  LODWORD(v14[0]) = 2143289344;
  swift_bridgeObjectRetain();
  vDSP_meanv((const float *)(v3 + 32), 1, (float *)v14, v10);
  swift_bridgeObjectRelease();
  v11 = *(float *)v14;
  v14[0] = v3;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
  sub_24B2D0A0C();
  sub_24B30B404();
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  retstr->min = v7;
  retstr->max = v9;
  retstr->mean = v11;
  retstr->standardDeviation = v13;
  retstr->median = v5;
}

unint64_t sub_24B2D0A0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257967778;
  if (!qword_257967778)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2579674D0);
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEDFD28], v1);
    atomic_store(result, (unint64_t *)&qword_257967778);
  }
  return result;
}

uint64_t sub_24B2D0A5C()
{
  sub_24B30BE90();
  sub_24B30BE9C();
  return sub_24B30BEA8();
}

uint64_t sub_24B2D0AA0()
{
  sub_24B30BE90();
  sub_24B30BE9C();
  return sub_24B30BEA8();
}

uint64_t sub_24B2D0AE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24B2D0B08 + 4 * byte_24B30CB6F[*v0]))(7235949, 0xE300000000000000);
}

uint64_t sub_24B2D0B08()
{
  return 7889261;
}

uint64_t sub_24B2D0B14()
{
  return 1851876717;
}

unint64_t sub_24B2D0B24()
{
  return 0xD000000000000011;
}

uint64_t sub_24B2D0B40()
{
  return 0x6E616964656DLL;
}

uint64_t sub_24B2D0B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D438C(a1, a2);
  *a3 = result;
  return result;
}

void sub_24B2D0B78(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_24B2D0B84()
{
  sub_24B2D16F0();
  return sub_24B30BECC();
}

uint64_t sub_24B2D0BAC()
{
  sub_24B2D16F0();
  return sub_24B30BED8();
}

uint64_t ScoreStatistics.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967780);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D16F0();
  sub_24B30BEC0();
  v13 = 0;
  sub_24B30BDD0();
  if (!v1)
  {
    v12 = 1;
    sub_24B30BDD0();
    v11 = 2;
    sub_24B30BDD0();
    v10 = 3;
    sub_24B30BDD0();
    v9 = 4;
    sub_24B30BDD0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ScoreStatistics.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  _BYTE v20[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967790);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D16F0();
  sub_24B30BEB4();
  if (!v2)
  {
    v20[15] = 0;
    sub_24B30BD64();
    v10 = v9;
    v20[14] = 1;
    sub_24B30BD64();
    v12 = v11;
    v20[13] = 2;
    sub_24B30BD64();
    v14 = v13;
    v20[12] = 3;
    sub_24B30BD64();
    v17 = v16;
    v20[11] = 4;
    sub_24B30BD64();
    v19 = v18;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
    a2[1] = v12;
    a2[2] = v14;
    a2[3] = v17;
    a2[4] = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24B2D0F60@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return ScoreStatistics.init(from:)(a1, a2);
}

uint64_t sub_24B2D0F74(_QWORD *a1)
{
  return ScoreStatistics.encode(to:)(a1);
}

uint64_t ConversationScore.conversationId.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ConversationScore.nnScore.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 ConversationScore.init(conversationId:nnScore:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;

  *(_QWORD *)a3 = a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

uint64_t sub_24B2D0FCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x65726F63536E6ELL;
  else
    return 0x61737265766E6F63;
}

uint64_t sub_24B2D1014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D4568(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24B2D1038()
{
  sub_24B2D1734();
  return sub_24B30BECC();
}

uint64_t sub_24B2D1060()
{
  sub_24B2D1734();
  return sub_24B30BED8();
}

uint64_t ConversationScore.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967798);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_OWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D1734();
  sub_24B30BEC0();
  LOBYTE(v10) = 0;
  sub_24B30BDF4();
  if (!v2)
  {
    v10 = v9;
    v11 = 1;
    sub_24B2D1778();
    sub_24B30BDE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ConversationScore.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v12;
  char v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579677B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D1734();
  sub_24B30BEB4();
  if (!v2)
  {
    LOBYTE(v12) = 0;
    v9 = sub_24B30BD88();
    v13 = 1;
    sub_24B2D17BC();
    sub_24B30BD7C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v12;
    *(_QWORD *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24B2D132C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ConversationScore.init(from:)(a1, a2);
}

uint64_t sub_24B2D1340(_QWORD *a1)
{
  return ConversationScore.encode(to:)(a1);
}

float PercentileScore.percentile.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float PercentileScore.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

ZeoliteFramework::PercentileScore __swiftcall PercentileScore.init(percentile:score:)(Swift::Float percentile, Swift::Float score)
{
  Swift::Float *v2;
  ZeoliteFramework::PercentileScore result;

  *v2 = percentile;
  v2[1] = score;
  result.score = score;
  result.percentile = percentile;
  return result;
}

uint64_t sub_24B2D136C()
{
  _BYTE *v0;

  if (*v0)
    return 0x65726F6373;
  else
    return 0x69746E6563726570;
}

uint64_t sub_24B2D13A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2D467C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24B2D13CC()
{
  sub_24B2D1800();
  return sub_24B30BECC();
}

uint64_t sub_24B2D13F4()
{
  sub_24B2D1800();
  return sub_24B30BED8();
}

uint64_t PercentileScore.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579677C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D1800();
  sub_24B30BEC0();
  v8[15] = 0;
  sub_24B30BDD0();
  if (!v1)
  {
    v8[14] = 1;
    sub_24B30BDD0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PercentileScore.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579677D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2D1800();
  sub_24B30BEB4();
  if (!v2)
  {
    v16 = 0;
    sub_24B30BD64();
    v10 = v9;
    v15 = 1;
    sub_24B30BD64();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24B2D1688@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return PercentileScore.init(from:)(a1, a2);
}

uint64_t sub_24B2D169C(_QWORD *a1)
{
  return PercentileScore.encode(to:)(a1);
}

BOOL _s16ZeoliteFramework15ScoreStatisticsV2eeoiySbAC_ACtFZ_0(float32x4_t *a1, float32x4_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1) != 0
      && a1[1].f32[0] == a2[1].f32[0];
}

unint64_t sub_24B2D16F0()
{
  unint64_t result;

  result = qword_257967788;
  if (!qword_257967788)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D778, &type metadata for ScoreStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967788);
  }
  return result;
}

unint64_t sub_24B2D1734()
{
  unint64_t result;

  result = qword_2579677A0;
  if (!qword_2579677A0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D728, &type metadata for ConversationScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579677A0);
  }
  return result;
}

unint64_t sub_24B2D1778()
{
  unint64_t result;

  result = qword_2579677A8;
  if (!qword_2579677A8)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for NNScore, &type metadata for NNScore);
    atomic_store(result, (unint64_t *)&qword_2579677A8);
  }
  return result;
}

unint64_t sub_24B2D17BC()
{
  unint64_t result;

  result = qword_2579677B8;
  if (!qword_2579677B8)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for NNScore, &type metadata for NNScore);
    atomic_store(result, (unint64_t *)&qword_2579677B8);
  }
  return result;
}

unint64_t sub_24B2D1800()
{
  unint64_t result;

  result = qword_2579677C8;
  if (!qword_2579677C8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D6D8, &type metadata for PercentileScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579677C8);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExtractedMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_24B30B5B4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ExtractedMessage(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24B30B5B4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtractedMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = sub_24B30B5B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtractedMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = sub_24B30B5B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v19 = a3[10];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ExtractedMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_24B30B5B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for ExtractedMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_24B30B5B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractedMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2D1D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_24B30B5B4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractedMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2D1DF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_24B30B5B4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_24B2D1E74()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24B30B5B4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ExtractedConversation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtractedConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ExtractedConversation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExtractedConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractedConversation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractedConversation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractedConversation()
{
  return &type metadata for ExtractedConversation;
}

uint64_t destroy for ConversationEmbedding()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ConversationEmbedding(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ConversationEmbedding(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ConversationEmbedding(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationEmbedding(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationEmbedding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationEmbedding()
{
  return &type metadata for ConversationEmbedding;
}

uint64_t initializeBufferWithCopyOfBuffer for ExtractedItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ExtractedItem()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ExtractedItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ExtractedItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractedItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractedItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractedItem()
{
  return &type metadata for ExtractedItem;
}

uint64_t initializeBufferWithCopyOfBuffer for EmbeddingItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for EmbeddingItem()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for EmbeddingItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EmbeddingItem(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for EmbeddingItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmbeddingItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmbeddingItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmbeddingItem()
{
  return &type metadata for EmbeddingItem;
}

uint64_t destroy for NNScore()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s16ZeoliteFramework7NNScoreVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NNScore(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for NNScore(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NNScore(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NNScore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NNScore()
{
  return &type metadata for NNScore;
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScoreStatistics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScoreStatistics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScoreStatistics()
{
  return &type metadata for ScoreStatistics;
}

uint64_t destroy for ConversationScore()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s16ZeoliteFramework17ConversationScoreVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ConversationScore(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConversationScore(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationScore(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationScore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationScore()
{
  return &type metadata for ConversationScore;
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PercentileScore(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PercentileScore(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PercentileScore()
{
  return &type metadata for PercentileScore;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for PercentileScore.CodingKeys()
{
  return &type metadata for PercentileScore.CodingKeys;
}

ValueMetadata *type metadata accessor for ConversationScore.CodingKeys()
{
  return &type metadata for ConversationScore.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ScoreStatistics.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ScoreStatistics.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24B2D2B7C + 4 * byte_24B30CB79[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24B2D2BB0 + 4 * byte_24B30CB74[v4]))();
}

uint64_t sub_24B2D2BB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D2BB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2D2BC0);
  return result;
}

uint64_t sub_24B2D2BCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2D2BD4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24B2D2BD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D2BE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScoreStatistics.CodingKeys()
{
  return &type metadata for ScoreStatistics.CodingKeys;
}

ValueMetadata *type metadata accessor for NNScore.CodingKeys()
{
  return &type metadata for NNScore.CodingKeys;
}

uint64_t sub_24B2D2C14(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_24B2D2C1C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EmbeddingItem.CodingKeys()
{
  return &type metadata for EmbeddingItem.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ClusterLabels(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s16ZeoliteFramework15PercentileScoreV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B2D2D10 + 4 * byte_24B30CB83[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B2D2D44 + 4 * byte_24B30CB7E[v4]))();
}

uint64_t sub_24B2D2D44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D2D4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2D2D54);
  return result;
}

uint64_t sub_24B2D2D60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2D2D68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B2D2D6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D2D74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_24B2D2D80(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ExtractedItem.CodingKeys()
{
  return &type metadata for ExtractedItem.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ConversationEmbedding.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationEmbedding.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24B2D2E78 + 4 * byte_24B30CB8D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24B2D2EAC + 4 * byte_24B30CB88[v4]))();
}

uint64_t sub_24B2D2EAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D2EB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2D2EBCLL);
  return result;
}

uint64_t sub_24B2D2EC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2D2ED0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24B2D2ED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D2EDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationEmbedding.CodingKeys()
{
  return &type metadata for ConversationEmbedding.CodingKeys;
}

uint64_t getEnumTagSinglePayload for DistanceMetric(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s16ZeoliteFramework13EmbeddingItemV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24B2D2FD4 + 4 * byte_24B30CB97[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24B2D3008 + 4 * byte_24B30CB92[v4]))();
}

uint64_t sub_24B2D3008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D3010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2D3018);
  return result;
}

uint64_t sub_24B2D3024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2D302CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24B2D3030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D3038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtractedConversation.CodingKeys()
{
  return &type metadata for ExtractedConversation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ExtractedMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractedMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24B2D3130 + 4 * byte_24B30CBA1[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24B2D3164 + 4 * byte_24B30CB9C[v4]))();
}

uint64_t sub_24B2D3164(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D316C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2D3174);
  return result;
}

uint64_t sub_24B2D3180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2D3188);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24B2D318C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D3194(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtractedMessage.CodingKeys()
{
  return &type metadata for ExtractedMessage.CodingKeys;
}

unint64_t sub_24B2D31B4()
{
  unint64_t result;

  result = qword_257967880;
  if (!qword_257967880)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D0F0, &type metadata for ExtractedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967880);
  }
  return result;
}

unint64_t sub_24B2D31FC()
{
  unint64_t result;

  result = qword_257967888;
  if (!qword_257967888)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D1A8, &type metadata for ExtractedConversation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967888);
  }
  return result;
}

unint64_t sub_24B2D3244()
{
  unint64_t result;

  result = qword_257967890;
  if (!qword_257967890)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D260, &type metadata for ConversationEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967890);
  }
  return result;
}

unint64_t sub_24B2D328C()
{
  unint64_t result;

  result = qword_257967898;
  if (!qword_257967898)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D318, &type metadata for ExtractedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967898);
  }
  return result;
}

unint64_t sub_24B2D32D4()
{
  unint64_t result;

  result = qword_2579678A0;
  if (!qword_2579678A0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D3D0, &type metadata for EmbeddingItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678A0);
  }
  return result;
}

unint64_t sub_24B2D331C()
{
  unint64_t result;

  result = qword_2579678A8;
  if (!qword_2579678A8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D488, &type metadata for NNScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678A8);
  }
  return result;
}

unint64_t sub_24B2D3364()
{
  unint64_t result;

  result = qword_2579678B0;
  if (!qword_2579678B0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D540, &type metadata for ScoreStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678B0);
  }
  return result;
}

unint64_t sub_24B2D33AC()
{
  unint64_t result;

  result = qword_2579678B8;
  if (!qword_2579678B8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D5F8, &type metadata for ConversationScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678B8);
  }
  return result;
}

unint64_t sub_24B2D33F4()
{
  unint64_t result;

  result = qword_2579678C0;
  if (!qword_2579678C0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D6B0, &type metadata for PercentileScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678C0);
  }
  return result;
}

unint64_t sub_24B2D343C()
{
  unint64_t result;

  result = qword_2579678C8;
  if (!qword_2579678C8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D620, &type metadata for PercentileScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678C8);
  }
  return result;
}

unint64_t sub_24B2D3484()
{
  unint64_t result;

  result = qword_2579678D0;
  if (!qword_2579678D0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D648, &type metadata for PercentileScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678D0);
  }
  return result;
}

unint64_t sub_24B2D34CC()
{
  unint64_t result;

  result = qword_2579678D8;
  if (!qword_2579678D8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D568, &type metadata for ConversationScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678D8);
  }
  return result;
}

unint64_t sub_24B2D3514()
{
  unint64_t result;

  result = qword_2579678E0;
  if (!qword_2579678E0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D590, &type metadata for ConversationScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678E0);
  }
  return result;
}

unint64_t sub_24B2D355C()
{
  unint64_t result;

  result = qword_2579678E8;
  if (!qword_2579678E8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D4B0, &type metadata for ScoreStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678E8);
  }
  return result;
}

unint64_t sub_24B2D35A4()
{
  unint64_t result;

  result = qword_2579678F0;
  if (!qword_2579678F0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D4D8, &type metadata for ScoreStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678F0);
  }
  return result;
}

unint64_t sub_24B2D35EC()
{
  unint64_t result;

  result = qword_2579678F8;
  if (!qword_2579678F8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D3F8, &type metadata for NNScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579678F8);
  }
  return result;
}

unint64_t sub_24B2D3634()
{
  unint64_t result;

  result = qword_257967900;
  if (!qword_257967900)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D420, &type metadata for NNScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967900);
  }
  return result;
}

unint64_t sub_24B2D367C()
{
  unint64_t result;

  result = qword_257967908;
  if (!qword_257967908)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D340, &type metadata for EmbeddingItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967908);
  }
  return result;
}

unint64_t sub_24B2D36C4()
{
  unint64_t result;

  result = qword_257967910;
  if (!qword_257967910)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D368, &type metadata for EmbeddingItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967910);
  }
  return result;
}

unint64_t sub_24B2D370C()
{
  unint64_t result;

  result = qword_257967918;
  if (!qword_257967918)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D288, &type metadata for ExtractedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967918);
  }
  return result;
}

unint64_t sub_24B2D3754()
{
  unint64_t result;

  result = qword_257967920;
  if (!qword_257967920)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D2B0, &type metadata for ExtractedItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967920);
  }
  return result;
}

unint64_t sub_24B2D379C()
{
  unint64_t result;

  result = qword_257967928;
  if (!qword_257967928)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D1D0, &type metadata for ConversationEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967928);
  }
  return result;
}

unint64_t sub_24B2D37E4()
{
  unint64_t result;

  result = qword_257967930;
  if (!qword_257967930)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D1F8, &type metadata for ConversationEmbedding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967930);
  }
  return result;
}

unint64_t sub_24B2D382C()
{
  unint64_t result;

  result = qword_257967938;
  if (!qword_257967938)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D118, &type metadata for ExtractedConversation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967938);
  }
  return result;
}

unint64_t sub_24B2D3874()
{
  unint64_t result;

  result = qword_257967940;
  if (!qword_257967940)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D140, &type metadata for ExtractedConversation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967940);
  }
  return result;
}

unint64_t sub_24B2D38BC()
{
  unint64_t result;

  result = qword_257967948;
  if (!qword_257967948)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D060, &type metadata for ExtractedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967948);
  }
  return result;
}

unint64_t sub_24B2D3904()
{
  unint64_t result;

  result = qword_257967950;
  if (!qword_257967950)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30D088, &type metadata for ExtractedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257967950);
  }
  return result;
}

uint64_t sub_24B2D3948(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265646E6573 && a2 == 0xE600000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265766965636572 && a2 == 0xE800000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7463656A627573 && a2 == 0xE700000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 2036625250 && a2 == 0xE400000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x61737265766E6F63 && a2 == 0xEE0064496E6F6974 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6D6275536F747561 && a2 == 0xED00006465747469)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_24B2D3C4C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61737265766E6F63 && a2 == 0xEE0064496E6F6974;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736567617373656DLL && a2 == 0xE800000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024B30FCA0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_24B2D3E1C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61737265766E6F63 && a2 == 0xEE0064496E6F6974;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69646465626D65 && a2 == 0xE900000000000067 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E69646465626D65 && a2 == 0xEE006C65646F4D67)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_24B2D3FBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64496D657469 && a2 == 0xE600000000000000;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24B2D4094(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64496D657469 && a2 == 0xE600000000000000;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69646465626D65 && a2 == 0xE900000000000067 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E69646465626D65 && a2 == 0xEE006C65646F4D67 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7954656372756F73 && a2 == 0xEA00000000006570)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_24B2D4278(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F63534B706F74 && a2 == 0xEA00000000007365;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69646E494B706F74 && a2 == 0xEB00000000736563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24B2D438C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7235949 && a2 == 0xE300000000000000;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7889261 && a2 == 0xE300000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1851876717 && a2 == 0xE400000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024B30FCC0 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E616964656DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_24B2D4568(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61737265766E6F63 && a2 == 0xEE0064496E6F6974;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F63536E6ELL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24B2D467C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x69746E6563726570 && a2 == 0xEA0000000000656CLL;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24B2D4790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t sub_24B2D47AC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_24B30BB00();
  *(_QWORD *)(v0 + 56) = 0;
  v2 = *(_QWORD **)(v0 + 48);
  v4 = *v2;
  v3 = v2[1];
  if (v3 >= *(_QWORD *)(*v2 + 16))
  {
    v6 = sub_24B30B734();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = 1;
    goto LABEL_5;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(v0 + 24);
    v6 = sub_24B30B734();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v5, v4+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v3, v6);
    v8 = 0;
    v2[1] = v3 + 1;
LABEL_5:
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v7 + 56))(*(_QWORD *)(v0 + 24), v8, 1, v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2D48E8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967A40);
  swift_willThrowTypedImpl();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InMemoryTensorLoader.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t InMemoryTensorLoader.makeAsyncIterator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

Swift::Int __swiftcall InMemoryTensorLoader.totalTensors()()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

uint64_t InMemoryTensorLoader.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_24B2D4978()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_24B30BB00();
  v2 = *(_QWORD **)(v0 + 24);
  v4 = *v2;
  v3 = v2[1];
  if (v3 >= *(_QWORD *)(*v2 + 16))
  {
    v6 = sub_24B30B734();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = 1;
    goto LABEL_5;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(v0 + 16);
    v6 = sub_24B30B734();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v5, v4+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v3, v6);
    v8 = 0;
    v2[1] = v3 + 1;
LABEL_5:
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v7 + 56))(*(_QWORD *)(v0 + 16), v8, 1, v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2D4A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24B2D7078;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch();
}

uint64_t sub_24B2D4AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = a4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_257967A38 + dword_257967A38);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = sub_24B2D4B48;
  return v10(a1, a2, a3);
}

uint64_t sub_24B2D4B48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 16) = v0;
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_24B2D4BA4(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t BatchedTensorLoader.filePath.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BatchedTensorLoader.batchSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t BatchedTensorLoader.init(filePath:batchSize:fieldKeyPath:scalarType:computeDevice:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int *v18;
  char *v19;
  uint64_t v20;

  v18 = (int *)type metadata accessor for BatchedTensorLoader(0, *(_QWORD *)(*a4 + *MEMORY[0x24BEE46A8]), a8, a10);
  *(_QWORD *)((char *)a9 + v18[15]) = 0;
  v19 = (char *)a9 + v18[16];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_QWORD *)((char *)a9 + v18[17]) = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  return sub_24B2D4CC8(a7, (uint64_t)a9 + v18[14]);
}

uint64_t type metadata accessor for BatchedTensorLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BatchedTensorLoader);
}

uint64_t sub_24B2D4CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t BatchedTensorLoader.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t BatchedTensorLoader.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
  v3[8] = swift_task_alloc();
  sub_24B30B614();
  v3[9] = swift_task_alloc();
  v5 = *(_QWORD *)(a2 + 16);
  v3[10] = v5;
  v6 = sub_24B30BBCC();
  v3[11] = v6;
  v3[12] = *(_QWORD *)(v6 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = *(_QWORD *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B0);
  v3[16] = v7;
  v3[17] = *(_QWORD *)(v7 - 8);
  v3[18] = swift_task_alloc();
  v8 = sub_24B30BB90();
  v3[19] = v8;
  v3[20] = *(_QWORD *)(v8 - 8);
  v3[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
  v3[22] = swift_task_alloc();
  v9 = sub_24B30B500();
  v3[23] = v9;
  v3[24] = *(_QWORD *)(v9 - 8);
  v3[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C0);
  v3[26] = swift_task_alloc();
  v10 = sub_24B30B530();
  v3[27] = v10;
  v3[28] = *(_QWORD *)(v10 - 8);
  v3[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2D4F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  _QWORD *v28;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_24B30BB00();
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(int *)(*(_QWORD *)(v0 + 48) + 68);
  *(_DWORD *)(v0 + 320) = v2;
  if (*(_QWORD *)(v1 + v2))
  {
LABEL_2:
    *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
    v3 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v0 + 240) = v3;
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      if (v3)
      {
        v4 = *(int *)(*(_QWORD *)(v0 + 48) + 64);
        *(_DWORD *)(v0 + 324) = v4;
        v5 = v1 + v4;
        v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
        *(_QWORD *)(v0 + 248) = v6;
        v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
        *(_QWORD *)(v0 + 256) = v7;
        if (!v7(v5, 1, v6))
        {
          *(_QWORD *)(v0 + 272) = 0;
          *(_QWORD *)(v0 + 280) = 1;
          *(_QWORD *)(v0 + 264) = 0;
          v28 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 288) = v28;
          *v28 = v0;
          v28[1] = sub_24B2D53B4;
          return sub_24B30B4E8();
        }
      }
      v8 = *(int *)(v0 + 320);
      v9 = *(_QWORD *)(v1 + v8);
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (!v10)
      {
        *(_QWORD *)(v1 + v8) = v11;
        v12 = *(_QWORD *)(v0 + 48);
        v13 = *(_QWORD *)(v0 + 56);
        swift_bridgeObjectRelease();
        v14 = *(void **)(v13 + *(int *)(v12 + 60));
        if (v14)
        {
          *(_QWORD *)(v0 + 24) = 0;
          v15 = objc_msgSend(v14, sel_closeAndReturnError_, v0 + 24);
          v16 = *(void **)(v0 + 24);
          if (v15)
          {
            v17 = v16;
          }
          else
          {
            v26 = v16;
            v27 = (void *)sub_24B30B4F4();

            swift_willThrow();
          }
        }
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  v19 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 216);
  v23 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 184);
  sub_24B2CCDA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, 1, 1, v20);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v22, *MEMORY[0x24BDCD7A0], v24);
  swift_bridgeObjectRetain();
  sub_24B30B524();
  v25 = sub_24B2CC570(v18);
  v30 = v25;
  if (v25)
  {
    v31 = *(_QWORD *)(v0 + 168);
    v32 = *(_QWORD *)(v0 + 152);
    v42 = *(_QWORD *)(v0 + 160);
    v43 = *(_QWORD *)(v0 + 176);
    v33 = *(_QWORD *)(v0 + 144);
    v34 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 56);
    v44 = *(_QWORD *)(v0 + 136);
    v45 = *(_QWORD *)(v0 + 48);
    v36 = *(int *)(v45 + 60);
    v37 = *(void **)(v35 + v36);
    v38 = v25;

    *(_QWORD *)(v35 + v36) = v30;
    sub_24B30BB9C();
    sub_24B2C8020(qword_2579675D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCFE38], MEMORY[0x24BDCFE48]);
    sub_24B30BB0C();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v31, v32);
    sub_24B30B4DC();

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v33, v34);
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v43, 0, 1, v39);
    sub_24B2CCE2C(v43, v35 + *(int *)(v45 + 64));
    v1 = *(_QWORD *)(v0 + 56);
    goto LABEL_2;
  }
LABEL_14:
  v40 = *(_QWORD *)(v0 + 40);
  v41 = sub_24B30B734();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2D53B4(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[37] = a1;
  v4[38] = a2;
  v4[39] = v2;
  swift_task_dealloc();
  if (v2)

  return swift_task_switch();
}

uint64_t sub_24B2D5470()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 304);
  if (!v1)
    goto LABEL_4;
  v2 = *(void **)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  sub_24B30B470();
  swift_allocObject();
  sub_24B30B464();
  v4 = sub_24B2CC684(v3, v1);
  v6 = v5;
  sub_24B30B458();
  if (v2)
  {
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 80);

    sub_24B2CCD64(v4, v6);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, 1, 1, v11);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
LABEL_4:
    v12 = *(_QWORD *)(v0 + 272);
    v13 = (uint64_t *)(v0 + 264);
LABEL_5:
    v14 = *v13;
    goto LABEL_6;
  }
  v47 = *(_QWORD *)(v0 + 272);
  v48 = *(_QWORD *)(v0 + 264);
  v33 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 120);
  v34 = *(_QWORD *)(v0 + 104);
  v35 = *(_QWORD *)(v0 + 80);
  sub_24B2CCD64(v4, v6);
  swift_release();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v32, v34, v35);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v12 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  if (v48 && v47 != v12)
  {
    v13 = (uint64_t *)(v0 + 264);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 80));
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 272);
    goto LABEL_5;
  }
  v13 = (uint64_t *)(v0 + 240);
  v36 = *(_QWORD *)(v0 + 240);
  v37 = *(_QWORD *)(v0 + 280);
  v39 = *(_QWORD *)(v0 + 112);
  v38 = *(_QWORD *)(v0 + 120);
  v40 = *(_QWORD *)(v0 + 80);
  sub_24B2D5D08(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
  if (v37 == v36)
    goto LABEL_5;
  v14 = *(_QWORD *)(v0 + 280);
  if (!(*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 56) + *(int *)(v0 + 324), 1, *(_QWORD *)(v0 + 248)))
  {
    *(_QWORD *)(v0 + 272) = v12;
    *(_QWORD *)(v0 + 280) = v14 + 1;
    *(_QWORD *)(v0 + 264) = v14;
    v41 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v41;
    *v41 = v0;
    v41[1] = sub_24B2D53B4;
    return sub_24B30B4E8();
  }
LABEL_6:
  v15 = *(int *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v16 + v15);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  *(_QWORD *)(v16 + v15) = v19;
  if (v14 < 1)
  {
    v26 = *(_QWORD *)(v0 + 48);
    v27 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();
    v28 = *(void **)(v27 + *(int *)(v26 + 60));
    if (v28)
    {
      *(_QWORD *)(v0 + 24) = 0;
      v29 = objc_msgSend(v28, sel_closeAndReturnError_, v0 + 24);
      v30 = *(void **)(v0 + 24);
      if (v29)
      {
        v31 = v30;
      }
      else
      {
        v43 = v30;
        v44 = (void *)sub_24B30B4F4();

        swift_willThrow();
      }
    }
    v45 = *(_QWORD *)(v0 + 40);
    v46 = sub_24B30B734();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 1, 1, v46);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 48);
    v21 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 40);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_24B30D9B0;
    *(_QWORD *)(v24 + 32) = v14;
    *(_QWORD *)(v24 + 40) = v12;
    sub_24B30B620();
    sub_24B2D5B40(*(_QWORD *)(v0 + 16));
    swift_bridgeObjectRelease();
    sub_24B2D5C30(v21 + *(int *)(v22 + 56), v20);
    sub_24B30B6B0();
    v25 = sub_24B30B734();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v23, 0, 1, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2D5904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(int *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v2 + v1);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
    __break(1u);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v2 + v1) = v5;
  if (v7 < 1)
  {
    v14 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();
    v16 = *(void **)(v15 + *(int *)(v14 + 60));
    if (v16)
    {
      *(_QWORD *)(v0 + 24) = 0;
      v17 = objc_msgSend(v16, sel_closeAndReturnError_, v0 + 24);
      v18 = *(void **)(v0 + 24);
      if (v17)
      {
        v19 = v18;
      }
      else
      {
        v20 = v18;
        v21 = (void *)sub_24B30B4F4();

        swift_willThrow();
      }
    }
    v22 = *(_QWORD *)(v0 + 40);
    v23 = sub_24B30B734();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 40);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_24B30D9B0;
    *(_QWORD *)(v12 + 32) = v7;
    *(_QWORD *)(v12 + 40) = v6;
    sub_24B30B620();
    sub_24B2D5B40(*(_QWORD *)(v0 + 16));
    swift_bridgeObjectRelease();
    sub_24B2D5C30(v9 + *(int *)(v10 + 56), v8);
    sub_24B30B6B0();
    v13 = sub_24B30B734();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 0, 1, v13);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2D5B40(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_24B2DC050(0, v1, 0);
    v2 = v14;
    v4 = (int *)(a1 + 32);
    v5 = MEMORY[0x24BEE14E8];
    v6 = MEMORY[0x24BE6C230];
    do
    {
      v7 = *v4;
      v14 = v2;
      v9 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_24B2DC050(v8 > 1, v9 + 1, 1);
        v2 = v14;
      }
      v12 = v5;
      v13 = v6;
      LODWORD(v11) = v7;
      *(_QWORD *)(v2 + 16) = v9 + 1;
      sub_24B2CDF7C(&v11, v2 + 40 * v9 + 32);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_24B2D5C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24B2D5C78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24B2CCBE0;
  return BatchedTensorLoader.next()(a1, a2);
}

uint64_t sub_24B2D5CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  BatchedTensorLoader.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_24B2D5D08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24B2C7F88(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (void *)(v3 + 4 * v8 + 32);
  if (a1 + 32 < (unint64_t)v9 + 4 * v2 && (unint64_t)v9 < a1 + 32 + 4 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *(_QWORD *)(v3 + 16);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *(_QWORD *)(v3 + 16) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

unint64_t sub_24B2D5E4C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_24B2D5E78();
  result = sub_24B2D5EBC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_24B2D5E78()
{
  unint64_t result;

  result = qword_257967970;
  if (!qword_257967970)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for InMemoryTensorLoader, &type metadata for InMemoryTensorLoader);
    atomic_store(result, (unint64_t *)&qword_257967970);
  }
  return result;
}

unint64_t sub_24B2D5EBC()
{
  unint64_t result;

  result = qword_257967978[0];
  if (!qword_257967978[0])
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for InMemoryTensorLoader, &type metadata for InMemoryTensorLoader);
    atomic_store(result, qword_257967978);
  }
  return result;
}

uint64_t sub_24B2D5F04(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x24BD1D214](&protocol conformance descriptor for BatchedTensorLoader<A>);
  result = MEMORY[0x24BD1D214](&protocol conformance descriptor for BatchedTensorLoader<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_24B2D5F48()
{
  JUMPOUT(0x24BD1D214);
}

uint64_t sub_24B2D5F58(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t result;

  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BE72E28];
  *(_QWORD *)(a1 + 8) = sub_24B2C8020(&qword_2579679A0, MEMORY[0x24BE72E28], MEMORY[0x24BE72E38]);
  result = sub_24B2C8020(qword_2579679A8, v2, MEMORY[0x24BE72E40]);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for InMemoryTensorLoader(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for InMemoryTensorLoader()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for InMemoryTensorLoader(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for InMemoryTensorLoader(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for InMemoryTensorLoader()
{
  return &type metadata for InMemoryTensorLoader;
}

uint64_t sub_24B2D6080()
{
  return swift_allocateGenericValueMetadata();
}

void sub_24B2D6088()
{
  unint64_t v0;
  unint64_t v1;

  sub_24B2D6CFC();
  if (v0 <= 0x3F)
  {
    sub_24B2CD67C();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *sub_24B2D6148(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[5];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v9 = a3[14];
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    *(_QWORD *)(a1 + 40) = v8;
    v12 = sub_24B30B638();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[15];
    v18 = a3[16];
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)v4 + v17) = v19;
    v20 = (char *)v4 + v18;
    v21 = (char *)a2 + v18;
    v22 = v19;
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v20, v21, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
    }
    *(_QWORD *)((char *)v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
  }
  return v4;
}

uint64_t sub_24B2D6320(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + a2[14];
  v5 = sub_24B30B638();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

  v7 = a1 + a2[16];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

uint64_t sub_24B2D6400(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a3[14];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_24B30B638();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[15];
  v16 = a3[16];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = (void *)(a1 + v16);
  v19 = (const void *)(a2 + v16);
  v20 = v17;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v18, v19, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
  }
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_24B2D65AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = a3[14];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_24B30B638();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[15];
  v16 = *(void **)(a1 + v15);
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = v17;

  v19 = a3[16];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_24B2D67F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a3[14];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_24B30B638();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_24B2D6974(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v8 = a3[14];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_24B30B638();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[15];
  v18 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);

  v19 = a3[16];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_24B2D6B98()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2D6BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 56);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_24B2D6C4C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2D6C58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 56);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_24B2D6CFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257967A30)
  {
    sub_24B30B638();
    v0 = sub_24B30BBCC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257967A30);
  }
}

uint64_t sub_24B2D6D50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_24B2C7F88(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *(_QWORD *)(v7 + 16);
  if ((*(_QWORD *)(v7 + 24) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)(v7 + 4 * v14 + 32);
  v16 = (char *)(a2 + 4 * a3);
  if (v16 < &v15[4 * v6] && v15 < &v16[4 * v6])
    goto LABEL_27;
  result = (uint64_t)memcpy(v15, v16, 4 * v6);
  if (!v6)
  {
LABEL_22:
    *v4 = v7;
    return result;
  }
  v18 = *(_QWORD *)(v7 + 16);
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    *(_QWORD *)(v7 + 16) = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

char *sub_24B2D6EE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *((_QWORD *)*v4 + 2);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > *((_QWORD *)v7 + 3) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_24B2C8368(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *((_QWORD *)v7 + 2);
  if ((*((_QWORD *)v7 + 3) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = &v7[4 * v14 + 32];
  v16 = (char *)(a2 + 4 * a3);
  if (v16 < &v15[4 * v6] && v15 < &v16[4 * v6])
    goto LABEL_27;
  result = (char *)memcpy(v15, v16, 4 * v6);
  if (!v6)
  {
LABEL_22:
    *v4 = v7;
    return result;
  }
  v18 = *((_QWORD *)v7 + 2);
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    *((_QWORD *)v7 + 2) = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (char *)sub_24B30BD10();
  __break(1u);
  return result;
}

ZeoliteFramework::ClusterLabels_optional __swiftcall ClusterLabels.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == -2)
    v2 = 1;
  else
    v2 = 2;
  if (rawValue == -1)
    v2 = 0;
  *v1 = v2;
  return (ZeoliteFramework::ClusterLabels_optional)rawValue;
}

void *static ClusterLabels.allCases.getter()
{
  return &unk_251C3A058;
}

uint64_t ClusterLabels.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return -2;
  else
    return -1;
}

uint64_t sub_24B2D70BC()
{
  sub_24B30BE90();
  sub_24B30BE9C();
  return sub_24B30BEA8();
}

uint64_t sub_24B2D7108()
{
  return sub_24B30BE9C();
}

uint64_t sub_24B2D713C()
{
  sub_24B30BE90();
  sub_24B30BE9C();
  return sub_24B30BEA8();
}

_QWORD *sub_24B2D7184@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == -2)
    v2 = 1;
  else
    v2 = 2;
  if (*result == -1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void sub_24B2D71A4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = -2;
  if (!*v1)
    v2 = -1;
  *a1 = v2;
}

void sub_24B2D71BC(_QWORD *a1@<X8>)
{
  *a1 = &unk_251C3A080;
}

void DBSCAN.metric.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

float DBSCAN.epsilon.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 20);
}

uint64_t DBSCAN.epsilon.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 20) = a1;
  return result;
}

uint64_t (*DBSCAN.epsilon.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t DBSCAN.minSamples.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 24);
}

uint64_t DBSCAN.minSamples.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*DBSCAN.minSamples.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t DBSCAN.__allocating_init(epsilon:minSamples:metric:)(uint64_t a1, char *a2, float a3)
{
  uint64_t result;
  char v7;

  result = swift_allocObject();
  v7 = *a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(float *)(result + 20) = a3;
  *(_QWORD *)(result + 24) = a1;
  *(_BYTE *)(result + 16) = v7;
  return result;
}

uint64_t DBSCAN.init(epsilon:minSamples:metric:)(uint64_t a1, char *a2, float a3)
{
  uint64_t v3;
  char v4;

  v4 = *a2;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(float *)(v3 + 20) = a3;
  *(_QWORD *)(v3 + 24) = a1;
  *(_BYTE *)(v3 + 16) = v4;
  return v3;
}

uint64_t DBSCAN.setRangeQueryFunction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  sub_24B2D73D0(v3);
  return swift_retain();
}

uint64_t sub_24B2D73D0(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_24B2D73E0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  if ((a2 & 0x8000000000000000) != 0)
    return MEMORY[0x24BEE4B08];
  v3 = MEMORY[0x24BEE4B08];
  if (*(_QWORD *)(a1 + 16) > a2)
    __asm { BR              X10 }
  return v3;
}

Swift::OpaquePointer_optional __swiftcall DBSCAN.cluster(points:)(Swift::OpaquePointer points)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  Swift::Bool v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::OpaquePointer_optional result;

  v2 = *((_QWORD *)points._rawValue + 2);
  if (v2)
  {
    v3 = v1;
    v4 = (_QWORD *)sub_24B2D7ACC(0xFFFFFFFFFFFFFFFELL, v2);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_beginAccess();
    v7 = 0;
    v8 = 0;
    v25 = v2;
    while (1)
    {
      if (v8 >= v4[2])
        goto LABEL_58;
      if (v4[v8 + 4] == -2)
        break;
LABEL_4:
      if (++v8 == v2)
        goto LABEL_51;
    }
    isUniquelyReferenced_nonNull_native = sub_24B2D73E0((uint64_t)points._rawValue, v8);
    v9 = isUniquelyReferenced_nonNull_native;
    if (*(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) < *(_QWORD *)(v3 + 24))
    {
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_24B2D8228(v4);
        v4 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      if (v8 >= v4[2])
        goto LABEL_59;
      v4[v8 + 4] = -1;
      goto LABEL_4;
    }
    if (__OFADD__(v7++, 1))
      goto LABEL_60;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_24B2D8228(v4);
      v4 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    if (v8 < v4[2])
    {
      v11 = v4 + 4;
      v4[v8 + 4] = v7;
      while (1)
      {
        if (!*(_QWORD *)(v9 + 16))
        {
          isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
          v2 = v25;
          goto LABEL_4;
        }
        v12 = *(_QWORD *)(v9 + 56);
        if (v12)
          break;
        v20 = *(unsigned __int8 *)(v9 + 32);
        v21 = v20 & 0x3F;
        v14 = 1 << v20;
        if (v21 < 7)
          goto LABEL_21;
        v12 = *(_QWORD *)(v9 + 64);
        if (v12)
        {
          v13 = 1;
          goto LABEL_20;
        }
        if (v21 < 8)
          goto LABEL_21;
        v12 = *(_QWORD *)(v9 + 72);
        if (v12)
        {
          v13 = 2;
          goto LABEL_20;
        }
        v12 = *(_QWORD *)(v9 + 80);
        if (v12)
        {
          v13 = 3;
          goto LABEL_20;
        }
        v22 = 0;
        v23 = (v14 + 63) >> 6;
        if (v23 <= 4)
          v23 = 4;
        v24 = v23 - 4;
        while (v24 != v22)
        {
          v12 = *(_QWORD *)(v9 + 88 + 8 * v22++);
          if (v12)
          {
            v13 = v22 + 3;
            goto LABEL_20;
          }
        }
LABEL_21:
        v15 = *(_DWORD *)(v9 + 36);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((v14 & 0x8000000000000000) != 0 || (uint64_t)v14 >= 1 << *(_BYTE *)(v9 + 32))
        {
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if (((*(_QWORD *)(v9 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          goto LABEL_53;
        if (v15 != *(_DWORD *)(v9 + 36))
          goto LABEL_54;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_24B2D7F24();
        v16 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v14);
        sub_24B2D80A4(v14);
        isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_55;
        v17 = v4[2];
        if (v16 >= v17)
          goto LABEL_56;
        v18 = v11[v16];
        if (v18 == -1)
        {
          v11[v16] = v7;
          v17 = v4[2];
          v18 = v7;
        }
        if (v16 >= v17)
          goto LABEL_57;
        if (v18 == -2)
        {
          v11[v16] = v7;
          v19 = sub_24B2D73E0((uint64_t)points._rawValue, v16);
          if (*(_QWORD *)(v19 + 16) >= *(_QWORD *)(v3 + 24))
            sub_24B2D7D9C(v19);
          else
            swift_bridgeObjectRelease();
        }
      }
      v13 = 0;
LABEL_20:
      v14 = __clz(__rbit64(v12)) + (v13 << 6);
      goto LABEL_21;
    }
LABEL_61:
    __break(1u);
  }
  else
  {
    v4 = 0;
LABEL_51:
    isUniquelyReferenced_nonNull_native = (uint64_t)v4;
  }
  result.value._rawValue = (void *)isUniquelyReferenced_nonNull_native;
  result.is_nil = v6;
  return result;
}

uint64_t sub_24B2D79D0(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_24B30BCC8();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = sub_24B30BA28();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_24B2D7AC0(unint64_t a1, unint64_t a2)
{
  return sub_24B2D7ACC(a1, a2);
}

uint64_t sub_24B2D7ACC(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_24B30BCC8();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24B30BA28();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_24B2D7BB0(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_24B30BCC8();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24B30BA28();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_24B2D7C98(uint64_t a1, uint64_t a2)
{
  return sub_24B2D7CB0(a1, a2, &qword_2579674D0);
}

uint64_t sub_24B2D7CA4(uint64_t a1, uint64_t a2)
{
  return sub_24B2D7CB0(a1, a2, &qword_257967518);
}

uint64_t sub_24B2D7CB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_24B30BCC8();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(a3);
      v5 = (_QWORD *)sub_24B30BA28();
      v6 = v5;
      v5[2] = a2;
      v5[4] = a1;
      if (a2 != 1)
      {
        v5[5] = a1;
        v7 = a2 - 2;
        if (v7)
        {
          v8 = v5 + 6;
          do
          {
            *v8++ = a1;
            swift_bridgeObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_24B2D7D9C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = sub_24B2EF06C(&v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release();
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t DBSCAN.deinit()
{
  uint64_t v0;

  sub_24B2D73D0(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t DBSCAN.__deallocating_deinit()
{
  uint64_t v0;

  sub_24B2D73D0(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance();
}

void *sub_24B2D7F24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967B18);
  v2 = *v0;
  v3 = sub_24B30BC08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
        break;
    }
LABEL_25:
    v19 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v19 + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 2;
  if (v18 >= v13)
    goto LABEL_26;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_24B2D80A4(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_24B30BBFC();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = sub_24B30BE84() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

_QWORD *sub_24B2D8228(_QWORD *a1)
{
  return sub_24B2C813C(0, a1[2], 0, a1);
}

unint64_t sub_24B2D8240()
{
  unint64_t result;

  result = qword_257967A48;
  if (!qword_257967A48)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for ClusterLabels, &type metadata for ClusterLabels);
    atomic_store(result, (unint64_t *)&qword_257967A48);
  }
  return result;
}

unint64_t sub_24B2D8288()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257967A50;
  if (!qword_257967A50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257967A58);
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_257967A50);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClusterLabels(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B2D8320 + 4 * byte_24B30DBE9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B2D8354 + 4 * byte_24B30DBE4[v4]))();
}

uint64_t sub_24B2D8354(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D835C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2D8364);
  return result;
}

uint64_t sub_24B2D8370(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2D8378);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B2D837C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2D8384(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClusterLabels()
{
  return &type metadata for ClusterLabels;
}

uint64_t type metadata accessor for DBSCAN()
{
  return objc_opt_self();
}

uint64_t method lookup function for DBSCAN()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DBSCAN.__allocating_init(epsilon:minSamples:metric:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_24B2D83D4(uint64_t a1)
{
  return sub_24B2C7F88(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_24B2D83E8(_QWORD *a1)
{
  return sub_24B2C8254(0, a1[2], 0, a1);
}

_QWORD *sub_24B2D83FC(_QWORD *a1)
{
  return sub_24B2C8474(0, a1[2], 0, a1);
}

_QWORD *sub_24B2D8410(_QWORD *a1)
{
  return sub_24B2C8488(0, a1[2], 0, a1);
}

_QWORD *sub_24B2D8424(_QWORD *a1)
{
  return sub_24B2C89E8(0, a1[2], 0, a1);
}

_QWORD *sub_24B2D8438(_QWORD *a1)
{
  return sub_24B2C89F4(0, a1[2], 0, a1);
}

uint64_t sub_24B2D844C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v11 = result;
  v25 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DC06C(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
    goto LABEL_19;
  if ((a5 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2 < v11)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v12 > a5)
  {
    v24 = a4 + 32;
    v13 = *(_QWORD *)(a4 + 32 + 8 * a5);
    v6 = v25;
    v14 = *(char *)(a3 + 16);
    v15 = v12 >= v11;
    v16 = v12 - v11;
    if (v15)
      v17 = v16;
    else
      v17 = 0;
    while (a2 != v11)
    {
      if (!v17)
        goto LABEL_17;
      v18 = off_251C3B540[v14];
      v19 = *(_QWORD *)(v24 + 8 * v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = ((float (*)(uint64_t, uint64_t))v18)(v13, v19);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v22 = *(_QWORD *)(v25 + 16);
      v21 = *(_QWORD *)(v25 + 24);
      if (v22 >= v21 >> 1)
        result = sub_24B2DC06C(v21 > 1, v22 + 1, 1);
      *(_QWORD *)(v25 + 16) = v22 + 1;
      v23 = v25 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v11;
      *(float *)(v23 + 40) = v20;
      ++v11;
      --v17;
      if (a2 == v11)
        return v6;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_24B2D85E4(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t InMemoryMatrixLoader.maxRows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t InMemoryMatrixLoader.columnCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

ZeoliteFramework::InMemoryMatrixLoader __swiftcall InMemoryMatrixLoader.init(_:columnCount:maxRows:)(Swift::OpaquePointer _, Swift::Int columnCount, Swift::Int maxRows)
{
  Swift::OpaquePointer *v3;
  ZeoliteFramework::InMemoryMatrixLoader result;

  v3->_rawValue = _._rawValue;
  v3[1]._rawValue = 0;
  v3[2]._rawValue = (void *)maxRows;
  v3[3]._rawValue = (void *)columnCount;
  result.maxRows = maxRows;
  result.current = columnCount;
  result.matrixValues = _;
  return result;
}

ZeoliteFramework::InMemoryMatrixLoader __swiftcall InMemoryMatrixLoader.makeAsyncIterator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  ZeoliteFramework::InMemoryMatrixLoader result;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_OWORD *)(v0 + 8) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(v0 + 24) = v2;
  v3 = (void *)swift_bridgeObjectRetain();
  result.columnCount = v6;
  result.maxRows = v5;
  result.current = v4;
  result.matrixValues._rawValue = v3;
  return result;
}

uint64_t InMemoryMatrixLoader.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_24B2D8648()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;

  result = sub_24B30BB00();
  v2 = *(_QWORD **)(v0 + 16);
  v4 = *v2;
  v3 = v2[1];
  v5 = *(_QWORD *)(*v2 + 16);
  if (v3 >= v5)
  {
    v12 = 0;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
  }
  v6 = v2[2];
  v7 = v2[3];
  v8 = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_22;
  }
  v9 = __OFADD__(v3, v8);
  v10 = v3 + v8;
  if (v9)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v5 >= v10)
    v11 = v10;
  else
    v11 = *(_QWORD *)(*v2 + 16);
  if (v11 < v3)
    goto LABEL_23;
  if (v11 == v3)
  {
    v12 = MEMORY[0x24BEE4AF8];
LABEL_10:
    v2[1] = v11;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
  }
  v13 = v11 - v3;
  if (v11 <= v3)
    goto LABEL_24;
  if (v3 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v11 - 1 < (unint64_t)v5)
  {
    v12 = sub_24B2C7F88(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v14 = *(_QWORD *)(v12 + 16);
    v15 = (int *)(v4 + 4 * v3 + 32);
    do
    {
      v16 = *v15;
      v17 = *(_QWORD *)(v12 + 24);
      if (v14 >= v17 >> 1)
        v12 = sub_24B2C7F88(v17 > 1, v14 + 1, 1, v12);
      *(_QWORD *)(v12 + 16) = v14 + 1;
      *(_DWORD *)(v12 + 4 * v14 + 32) = v16;
      ++v15;
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_10;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_24B2D87C0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_24B2D87C8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_24B2D87D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_24B2DC1C8;
  v3[2] = v1;
  return swift_task_switch();
}

uint64_t sub_24B2D8830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v5[5] = a3;
  v5[6] = a4;
  v5[3] = a1;
  v5[4] = a2;
  v6 = (_QWORD *)swift_task_alloc();
  v5[7] = v6;
  *v6 = v5;
  v6[1] = sub_24B2D8894;
  v6[2] = v4;
  return swift_task_switch();
}

uint64_t sub_24B2D8894(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    if (v5)
    {
      swift_getObjectType();
      sub_24B30BAA0();
    }
  }
  else
  {
    if (v5)
    {
      swift_getObjectType();
      sub_24B30BAA0();
    }
    *(_QWORD *)(v4 + 72) = a1;
  }
  return swift_task_switch();
}

__n128 sub_24B2D8960@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v2;
  return result;
}

uint64_t JSONLMatrixLoader.filePath.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t JSONLMatrixLoader.maxRows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t JSONLMatrixLoader.columnCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t JSONLMatrixLoader.init(filePath:maxRows:columnCount:fieldKeyPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v14 = *a5;
  a8[5] = 0;
  v15 = type metadata accessor for JSONLMatrixLoader(0, *(_QWORD *)(v14 + *MEMORY[0x24BEE46A8]), a6, a7);
  v16 = (char *)a8 + *(int *)(v15 + 60);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)((char *)a8 + *(int *)(v15 + 64)) = 0;
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  return result;
}

uint64_t JSONLMatrixLoader.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t JSONLMatrixLoader.next()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[5] = a1;
  v2[6] = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v2[7] = v3;
  v4 = sub_24B30BBCC();
  v2[8] = v4;
  v2[9] = *(_QWORD *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B0);
  v2[13] = v5;
  v2[14] = *(_QWORD *)(v5 - 8);
  v2[15] = swift_task_alloc();
  v6 = sub_24B30BB90();
  v2[16] = v6;
  v2[17] = *(_QWORD *)(v6 - 8);
  v2[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
  v2[19] = swift_task_alloc();
  v7 = sub_24B30B500();
  v2[20] = v7;
  v2[21] = *(_QWORD *)(v7 - 8);
  v2[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C0);
  v2[23] = swift_task_alloc();
  v8 = sub_24B30B530();
  v2[24] = v8;
  v2[25] = *(_QWORD *)(v8 - 8);
  v2[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2D8C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  _QWORD *v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_24B30BB00();
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(int *)(*(_QWORD *)(v0 + 40) + 64);
  *(_DWORD *)(v0 + 288) = v2;
  if (*(_QWORD *)(v1 + v2))
  {
LABEL_2:
    *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
    v3 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v0 + 216) = v3;
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      if (v3)
      {
        v4 = *(int *)(*(_QWORD *)(v0 + 40) + 60);
        *(_DWORD *)(v0 + 292) = v4;
        v5 = v1 + v4;
        v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
        *(_QWORD *)(v0 + 224) = v6;
        v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
        *(_QWORD *)(v0 + 232) = v7;
        if (!v7(v5, 1, v6))
        {
          *(_OWORD *)(v0 + 240) = xmmword_24B30DD30;
          v27 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 256) = v27;
          *v27 = v0;
          v27[1] = sub_24B2D9068;
          return sub_24B30B4E8();
        }
      }
      v8 = *(int *)(v0 + 288);
      v9 = *(_QWORD *)(v1 + v8);
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (!v10)
      {
        *(_QWORD *)(v1 + v8) = v11;
        v12 = *(_QWORD *)(v0 + 48);
        swift_bridgeObjectRelease();
        v13 = *(void **)(v12 + 40);
        if (v13)
        {
          *(_QWORD *)(v0 + 24) = 0;
          v14 = objc_msgSend(v13, sel_closeAndReturnError_, v0 + 24);
          v15 = *(void **)(v0 + 24);
          if (v14)
          {
            v16 = v15;
          }
          else
          {
            v25 = v15;
            v26 = (void *)sub_24B30B4F4();

            swift_willThrow();
          }
        }
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  v18 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 160);
  sub_24B2CCDA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v20, 1, 1, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v21, *MEMORY[0x24BDCD7A0], v23);
  swift_bridgeObjectRetain();
  sub_24B30B524();
  v24 = sub_24B2CC570(v17);
  v29 = v24;
  if (v24)
  {
    v31 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 128);
    v33 = *(_QWORD *)(v0 + 120);
    v39 = *(_QWORD *)(v0 + 136);
    v40 = *(_QWORD *)(v0 + 112);
    v34 = *(_QWORD *)(v0 + 104);
    v35 = *(_QWORD *)(v0 + 48);
    v41 = *(_QWORD *)(v0 + 40);
    v36 = *(void **)(v35 + 40);
    v37 = v24;

    *(_QWORD *)(v35 + 40) = v29;
    sub_24B30BB9C();
    sub_24B2CCDE4();
    sub_24B30BB0C();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v31, v32);
    sub_24B30B4DC();

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v33, v34);
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v30, 0, 1, v38);
    sub_24B2CCE2C(v30, v35 + *(int *)(v41 + 60));
    v1 = *(_QWORD *)(v0 + 48);
    goto LABEL_2;
  }
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_24B2D9068(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[33] = a1;
  v4[34] = a2;
  v4[35] = v2;
  swift_task_dealloc();
  if (v2)

  return swift_task_switch();
}

uint64_t sub_24B2D9124()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v46;
  _QWORD *v47;

  v1 = (uint64_t *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 272);
  if (v2)
  {
    v3 = *(void **)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 264);
    sub_24B30B470();
    swift_allocObject();
    sub_24B30B464();
    v5 = sub_24B2CC684(v4, v2);
    v7 = v6;
    sub_24B30B458();
    if (!v3)
    {
      v14 = *(_QWORD *)(v0 + 88);
      v13 = *(_QWORD *)(v0 + 96);
      v15 = *(_QWORD *)(v0 + 80);
      v16 = *(_QWORD *)(v0 + 48);
      v17 = *(_QWORD *)(v0 + 56);
      sub_24B2CCD64(v5, v7);
      swift_release();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v17);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v13, v15, v17);
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      v18 = *(_QWORD *)(v0 + 32);
      if (*(_QWORD *)(v16 + 24) != *(_QWORD *)(v18 + 16))
      {
        swift_bridgeObjectRelease();
        v1 = (uint64_t *)(v0 + 16);
        if (qword_257967450 == -1)
          goto LABEL_8;
        goto LABEL_23;
      }
      v19 = *(_QWORD *)(v0 + 248);
      v20 = *(_QWORD *)(v0 + 216);
      v22 = *(_QWORD *)(v0 + 88);
      v21 = *(_QWORD *)(v0 + 96);
      v23 = *(_QWORD *)(v0 + 56);
      v1 = (uint64_t *)(v0 + 16);
      sub_24B2D5D08(v18);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      if (v19 == v20)
      {
        v24 = 1;
        goto LABEL_12;
      }
      v24 = 1;
      if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v0 + 232))(*(_QWORD *)(v0 + 48) + *(int *)(v0 + 292), 1, *(_QWORD *)(v0 + 224)))
      {
        goto LABEL_12;
      }
      v46 = *(_QWORD *)(v0 + 248);
      *(_QWORD *)(v0 + 240) = v46;
      *(_QWORD *)(v0 + 248) = v46 + 1;
      v47 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 256) = v47;
      *v47 = v0;
      v47[1] = sub_24B2D9068;
      return sub_24B30B4E8();
    }
    v9 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 56);

    sub_24B2CCD64(v5, v7);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, 1, 1, v12);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v1 = (uint64_t *)(v0 + 16);
  }
  while (1)
  {
    v24 = *(_QWORD *)(v0 + 240);
LABEL_12:
    v32 = *(int *)(v0 + 288);
    v33 = *(_QWORD *)(v0 + 48);
    v34 = *(_QWORD *)(v33 + v32);
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (!v35)
      break;
    __break(1u);
LABEL_23:
    swift_once();
LABEL_8:
    v25 = sub_24B30B7A0();
    __swift_project_value_buffer(v25, (uint64_t)qword_25796F248);
    v26 = sub_24B30B788();
    v27 = sub_24B30BBC0();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_24B2C5000, v26, v27, "Vector length mismatched.", v28, 2u);
      MEMORY[0x24BD1D2BC](v28, -1, -1);
    }
    v29 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
  }
  *(_QWORD *)(v33 + v32) = v36;
  v37 = *v1;
  if (!v24)
  {
    v38 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease();
    v39 = *(void **)(v38 + 40);
    if (v39)
    {
      *(_QWORD *)(v0 + 24) = 0;
      v40 = objc_msgSend(v39, sel_closeAndReturnError_, v0 + 24);
      v41 = *(void **)(v0 + 24);
      if (v40)
      {
        v42 = v41;
      }
      else
      {
        v43 = v41;
        v44 = (void *)sub_24B30B4F4();

        swift_willThrow();
      }
    }
    v37 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v37);
}

uint64_t sub_24B2D9578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  void *v11;
  id v12;
  id v13;
  void *v14;

  v1 = *(int *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v2 + v1);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
    __break(1u);
  v6 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v2 + v1) = v5;
  v7 = *(_QWORD *)(v0 + 16);
  if (!v6)
  {
    v8 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease();
    v9 = *(void **)(v8 + 40);
    if (v9)
    {
      *(_QWORD *)(v0 + 24) = 0;
      v10 = objc_msgSend(v9, sel_closeAndReturnError_, v0 + 24);
      v11 = *(void **)(v0 + 24);
      if (v10)
      {
        v12 = v11;
      }
      else
      {
        v13 = v11;
        v14 = (void *)sub_24B30B4F4();

        swift_willThrow();
      }
    }
    v7 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_24B2D96E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_24B2D9730;
  return JSONLMatrixLoader.next()(a2);
}

uint64_t sub_24B2D9730(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_24B2D978C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  JSONLMatrixLoader.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t AsyncMatrixSequence.maxRows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t AsyncMatrixSequence.columnCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

double AsyncMatrixSequence.init(reader:label:columnCount:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;

  v10 = sub_24B30B7C4();
  v11 = sub_24B2D9A30(a2, a3, v10);
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = sub_24B30B7AC();
    sub_24B30B7B8();
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = v12;
    a5[4] = 0;
    a5[5] = v13;
    a5[6] = a4;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    if (qword_257967450 != -1)
      swift_once();
    v15 = sub_24B30B7A0();
    __swift_project_value_buffer(v15, (uint64_t)qword_25796F248);
    swift_bridgeObjectRetain();
    v16 = sub_24B30B788();
    v17 = sub_24B30BBC0();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v20 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain();
      sub_24B2DA8C8(a2, a3, &v20);
      sub_24B30BBD8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24B2C5000, v16, v17, "Invalid label: %s for AsyncMatrixSequence.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD1D2BC](v19, -1, -1);
      MEMORY[0x24BD1D2BC](v18, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
    }
    a5[6] = 0;
    result = 0.0;
    *((_OWORD *)a5 + 1) = 0u;
    *((_OWORD *)a5 + 2) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

uint64_t sub_24B2D9A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_24B30BE90();
    sub_24B30B914();
    v6 = sub_24B30BEA8();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_24B30BE48() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_24B30BE48() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t AsyncMatrixSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t AsyncMatrixSequence.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[2] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967B38);
  v1[3] = swift_task_alloc();
  v1[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2D9C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((sub_24B30BAF4() & 1) != 0 || (v1 = *(_QWORD *)(v0 + 16), *(_QWORD *)(v1 + 32) >= *(_QWORD *)(v1 + 24)))
  {
LABEL_20:
    v11 = 0;
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
  }
  v2 = *(_QWORD *)(v0 + 32);
  sub_24B30B7D0();
  v3 = sub_24B30B7F4();
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_15:
    if (qword_257967450 != -1)
      swift_once();
    v20 = sub_24B30B7A0();
    __swift_project_value_buffer(v20, (uint64_t)qword_25796F248);
    v21 = sub_24B30B788();
    v22 = sub_24B30BBC0();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_24B2C5000, v21, v22, "Unsupported field type.", v23, 2u);
      MEMORY[0x24BD1D2BC](v23, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 32);

    sub_24B2DA998(v24);
    goto LABEL_20;
  }
  v5 = *(_QWORD *)(v0 + 24);
  sub_24B2DA9D8(*(_QWORD *)(v0 + 32), v5);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v5, v3);
  if (v6 != *MEMORY[0x24BE72E48])
  {
    if (v6 == *MEMORY[0x24BE72E50])
    {
      v11 = sub_24B30B7DC();
      goto LABEL_24;
    }
    (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v0 + 24), v3);
    goto LABEL_15;
  }
  v7 = sub_24B30B7DC();
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v28 = MEMORY[0x24BEE4AF8];
      sub_24B2DB008(0, v9, 0);
      v10 = 0;
      v11 = v28;
      v12 = *(_QWORD *)(v28 + 16);
      do
      {
        _H8 = *(_WORD *)(v8 + 2 * v10 + 32);
        v14 = *(_QWORD *)(v28 + 24);
        if (v12 >= v14 >> 1)
          sub_24B2DB008(v14 > 1, v12 + 1, 1);
        ++v10;
        __asm { FCVT            S0, H8 }
        *(_QWORD *)(v28 + 16) = v12 + 1;
        *(_DWORD *)(v28 + 4 * v12++ + 32) = _S0;
      }
      while (v9 != v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v11 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_24:
  result = sub_24B2DA998(*(_QWORD *)(v0 + 32));
  v26 = *(_QWORD *)(v1 + 32);
  _VF = __OFADD__(v26, 1);
  v27 = v26 + 1;
  if (!_VF)
  {
    *(_QWORD *)(v1 + 32) = v27;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2D9F10()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_24B2D9F18()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_24B2D9F20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_24B2DC1C8;
  return AsyncMatrixSequence.next()();
}

uint64_t sub_24B2D9F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[7] = v5;
  *v5 = v4;
  v5[1] = sub_24B2D9FB4;
  return AsyncMatrixSequence.next()();
}

uint64_t sub_24B2D9FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    if (v5)
    {
      swift_getObjectType();
      sub_24B30BAA0();
    }
  }
  else
  {
    if (v5)
    {
      swift_getObjectType();
      sub_24B30BAA0();
    }
    *(_QWORD *)(v4 + 72) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_24B2DA080()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2DA098()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD **)(v0 + 48);
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967A40);
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_24B2DA100@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t AsyncTransformedMatrixSequence.maxRows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t AsyncTransformedMatrixSequence.columnCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

double AsyncTransformedMatrixSequence.init(reader:label:columnCount:quantization:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;

  v12 = sub_24B30B7C4();
  v13 = sub_24B2D9A30(a2, a3, v12);
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = sub_24B30B7AC();
    sub_24B30B7B8();
    *a6 = a1;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = v14;
    a6[4] = a5;
    a6[5] = 0;
    a6[6] = v15;
    a6[7] = a4;
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    if (qword_257967450 != -1)
      swift_once();
    v17 = sub_24B30B7A0();
    __swift_project_value_buffer(v17, (uint64_t)qword_25796F248);
    swift_bridgeObjectRetain();
    v18 = sub_24B30B788();
    v19 = sub_24B30BBC0();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v22 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      sub_24B2DA8C8(a2, a3, &v22);
      sub_24B30BBD8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24B2C5000, v18, v19, "Invalid label: %s for AsyncTransformedMatrixSequence.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD1D2BC](v21, -1, -1);
      MEMORY[0x24BD1D2BC](v20, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
    }
    result = 0.0;
    *((_OWORD *)a6 + 2) = 0u;
    *((_OWORD *)a6 + 3) = 0u;
    *(_OWORD *)a6 = 0u;
    *((_OWORD *)a6 + 1) = 0u;
  }
  return result;
}

uint64_t AsyncTransformedMatrixSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 56) = v6;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t AsyncTransformedMatrixSequence.next()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967B38);
  v2[4] = swift_task_alloc();
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2DA44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((sub_24B30BAF4() & 1) != 0 || (v1 = *(_QWORD *)(v0 + 24), *(_QWORD *)(v1 + 40) >= *(_QWORD *)(v1 + 24)))
  {
LABEL_20:
    v11 = 0;
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
  }
  v2 = *(_QWORD *)(v0 + 40);
  sub_24B30B7D0();
  v3 = sub_24B30B7F4();
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_15:
    if (qword_257967450 != -1)
      swift_once();
    v20 = sub_24B30B7A0();
    __swift_project_value_buffer(v20, (uint64_t)qword_25796F248);
    v21 = sub_24B30B788();
    v22 = sub_24B30BBC0();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_24B2C5000, v21, v22, "Unsupported field type.", v23, 2u);
      MEMORY[0x24BD1D2BC](v23, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 40);

    sub_24B2DA998(v24);
    goto LABEL_20;
  }
  v5 = *(_QWORD *)(v0 + 32);
  sub_24B2DA9D8(*(_QWORD *)(v0 + 40), v5);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v5, v3);
  if (v6 != *MEMORY[0x24BE72E48])
  {
    if (v6 == *MEMORY[0x24BE72E50])
    {
      sub_24B2DB024();
      v11 = sub_24B30B7E8();
      goto LABEL_24;
    }
    (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v0 + 32), v3);
    goto LABEL_15;
  }
  sub_24B2DB068();
  v7 = sub_24B30B7E8();
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      v28 = MEMORY[0x24BEE4AF8];
      sub_24B2DB008(0, v9, 0);
      v10 = 0;
      v11 = v28;
      v12 = *(_QWORD *)(v28 + 16);
      do
      {
        _H8 = *(_WORD *)(v8 + 2 * v10 + 32);
        v14 = *(_QWORD *)(v28 + 24);
        if (v12 >= v14 >> 1)
          sub_24B2DB008(v14 > 1, v12 + 1, 1);
        ++v10;
        __asm { FCVT            S0, H8 }
        *(_QWORD *)(v28 + 16) = v12 + 1;
        *(_DWORD *)(v28 + 4 * v12++ + 32) = _S0;
      }
      while (v9 != v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v11 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_24:
  result = sub_24B2DA998(*(_QWORD *)(v0 + 40));
  v26 = *(_QWORD *)(v1 + 40);
  _VF = __OFADD__(v26, 1);
  v27 = v26 + 1;
  if (!_VF)
  {
    *(_QWORD *)(v1 + 40) = v27;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2DA7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_24B2DC1C8;
  return AsyncTransformedMatrixSequence.next()(a2);
}

uint64_t sub_24B2DA7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_24B2DC1C4;
  return sub_24B30BAE8();
}

uint64_t sub_24B2DA890@<X0>(uint64_t a1@<X8>)
{
  AsyncTransformedMatrixSequence.makeAsyncIterator()(a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t type metadata accessor for JSONLMatrixLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JSONLMatrixLoader);
}

uint64_t sub_24B2DA8C8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_24B2DAA20(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_24B2DC184((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_24B2DC184((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_24B2DA998(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967B38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24B2DA9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967B38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24B2DAA20(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_24B30BBE4();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_24B2DABD8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_24B30BC5C();
  if (!v8)
  {
    sub_24B30BCC8();
    __break(1u);
LABEL_17:
    result = sub_24B30BD10();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_24B2DABD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_24B2DAC6C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24B2DAEBC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_24B2DAEBC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24B2DAC6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_24B2DADE0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_24B30BC38();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_24B30BCC8();
      __break(1u);
LABEL_10:
      v2 = sub_24B30B938();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_24B30BD10();
    __break(1u);
LABEL_14:
    result = sub_24B30BCC8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_24B2DADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967CB8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_24B2DAE44(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_24B30B968();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24BD1C890](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_24B2DAEBC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967CB8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2DB008(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B308164(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

unint64_t sub_24B2DB024()
{
  unint64_t result;

  result = qword_257967B48;
  if (!qword_257967B48)
  {
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&qword_257967B48);
  }
  return result;
}

unint64_t sub_24B2DB068()
{
  unint64_t result;

  result = qword_257967B50;
  if (!qword_257967B50)
  {
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE4680], MEMORY[0x24BEE4678]);
    atomic_store(result, (unint64_t *)&qword_257967B50);
  }
  return result;
}

uint64_t sub_24B2DB0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24B2DB184(a1, a2, a3, (uint64_t (*)(void))sub_24B2DB0C0, (uint64_t (*)(void))sub_24B2DB104);
}

unint64_t sub_24B2DB0C0()
{
  unint64_t result;

  result = qword_257967B58;
  if (!qword_257967B58)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for InMemoryMatrixLoader, &type metadata for InMemoryMatrixLoader);
    atomic_store(result, (unint64_t *)&qword_257967B58);
  }
  return result;
}

unint64_t sub_24B2DB104()
{
  unint64_t result;

  result = qword_257967B60[0];
  if (!qword_257967B60[0])
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for InMemoryMatrixLoader, &type metadata for InMemoryMatrixLoader);
    atomic_store(result, qword_257967B60);
  }
  return result;
}

uint64_t sub_24B2DB14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24B2DB254(a1, a2, a3, (uint64_t)&protocol conformance descriptor for JSONLMatrixLoader<A>, (uint64_t)&protocol conformance descriptor for JSONLMatrixLoader<A>);
}

void sub_24B2DB160()
{
  JUMPOUT(0x24BD1D214);
}

uint64_t sub_24B2DB170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24B2DB184(a1, a2, a3, (uint64_t (*)(void))sub_24B2DB1B4, (uint64_t (*)(void))sub_24B2DB1F8);
}

uint64_t sub_24B2DB184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_24B2DB1B4()
{
  unint64_t result;

  result = qword_257967B88;
  if (!qword_257967B88)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for AsyncMatrixSequence, &type metadata for AsyncMatrixSequence);
    atomic_store(result, (unint64_t *)&qword_257967B88);
  }
  return result;
}

unint64_t sub_24B2DB1F8()
{
  unint64_t result;

  result = qword_257967B90[0];
  if (!qword_257967B90[0])
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for AsyncMatrixSequence, &type metadata for AsyncMatrixSequence);
    atomic_store(result, qword_257967B90);
  }
  return result;
}

uint64_t sub_24B2DB240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24B2DB254(a1, a2, a3, (uint64_t)&protocol conformance descriptor for AsyncTransformedMatrixSequence<A>, (uint64_t)&protocol conformance descriptor for AsyncTransformedMatrixSequence<A>);
}

uint64_t sub_24B2DB254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x24BD1D214](a4);
  result = MEMORY[0x24BD1D214](a5, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_24B2DB29C()
{
  JUMPOUT(0x24BD1D214);
}

uint64_t dispatch thunk of MatrixLoader.maxRows.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MatrixLoader.columnCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t initializeWithCopy for InMemoryMatrixLoader(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InMemoryMatrixLoader(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for InMemoryMatrixLoader(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for InMemoryMatrixLoader(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InMemoryMatrixLoader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InMemoryMatrixLoader()
{
  return &type metadata for InMemoryMatrixLoader;
}

void sub_24B2DB430()
{
  unint64_t v0;

  sub_24B2CD67C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_24B2DB4CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v8 = (void *)a2[5];
    v9 = *(int *)(a3 + 60);
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = v8;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v10, v11, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    *(_QWORD *)(a1 + *(int *)(a3 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 64));
  }
  return a1;
}

uint64_t sub_24B2DB5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_release();

  v4 = a1 + *(int *)(a2 + 60);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_24B2DB684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(int *)(a3 + 60);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_retain();
  v11 = v7;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v9, v10, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 64)) = *(_QWORD *)(a2 + *(int *)(a3 + 64));
  return a1;
}

_QWORD *sub_24B2DB780(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  v6 = (void *)a1[5];
  v7 = (void *)a2[5];
  a1[5] = v7;
  v8 = v7;

  v9 = *(int *)(a3 + 60);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 64));
  return a1;
}

_OWORD *sub_24B2DB8FC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 60);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 64));
  return a1;
}

uint64_t sub_24B2DB9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v8 = *(int *)(a3 + 60);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675A0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(a3 + 64)) = *(_QWORD *)(a2 + *(int *)(a3 + 64));
  return a1;
}

uint64_t sub_24B2DBB38()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2DBB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_24B2DBBC4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2DBBD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675B8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t destroy for AsyncMatrixSequence()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AsyncMatrixSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AsyncMatrixSequence(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AsyncMatrixSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncMatrixSequence(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncMatrixSequence(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AsyncMatrixSequence()
{
  return &type metadata for AsyncMatrixSequence;
}

uint64_t sub_24B2DBE54()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_24B2DBE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_24B2DBEB0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_24B2DBF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_24B2DBFAC(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24B2DBFF4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AsyncTransformedMatrixSequence()
{
  JUMPOUT(0x24BD1D1A8);
}

uint64_t sub_24B2DC050(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24B3082C0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_24B2DC06C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B308460(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC088(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B30846C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC0A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B3085D4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC0C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B3085E0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC0DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24B308744(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_24B2DC0F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B308758(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC114(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B3088B4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC130(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B308C14(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC14C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B308D70(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC168(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24B308EE4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24B2DC184(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24B2DC1D4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = v7;
  v10 = MEMORY[0x24BEE4AF8];
  if (!v8)
    return v10;
  v13 = result;
  v27 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DC088(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v10 = v27;
    if (a2 <= v13)
      v14 = v13;
    else
      v14 = a2;
    v15 = a3 & 1;
    v16 = v13;
    while (a2 != v16)
    {
      v25 = v16;
      result = (uint64_t)sub_24B2DE4BC(&v25, v15, a4, a5, a6, a7, &v26);
      if (v9)
      {
        swift_release();
        return v10;
      }
      v9 = 0;
      v17 = v26;
      v27 = v10;
      v19 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      if (v19 >= v18 >> 1)
      {
        v20 = v26;
        result = sub_24B2DC088(v18 > 1, v19 + 1, 1);
        v17 = v20;
        v10 = v27;
      }
      *(_QWORD *)(v10 + 16) = v19 + 1;
      *(_OWORD *)(v10 + 16 * v19 + 32) = v17;
      if (a2 < v13)
        goto LABEL_19;
      if (v14 == v16)
        goto LABEL_20;
      if (a2 == ++v16)
        return v10;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t MatrixNNScorer.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96), a1);
  return v2;
}

uint64_t MatrixNNScorer.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1);
  return v1;
}

uint64_t sub_24B2DC3BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  *(_QWORD *)(v4 + 176) = a2;
  *(_QWORD *)(v4 + 184) = v3;
  *(_BYTE *)(v4 + 500) = a3;
  *(_QWORD *)(v4 + 168) = a1;
  v5 = *v3;
  v6 = sub_24B30BAD0();
  *(_QWORD *)(v4 + 192) = v6;
  *(_QWORD *)(v4 + 200) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 208) = swift_task_alloc();
  v7 = sub_24B30B41C();
  *(_QWORD *)(v4 + 216) = v7;
  *(_QWORD *)(v4 + 224) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 232) = swift_task_alloc();
  *(_QWORD *)(v4 + 240) = swift_task_alloc();
  *(_QWORD *)(v4 + 248) = swift_task_alloc();
  *(_QWORD *)(v4 + 256) = swift_task_alloc();
  v8 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v4 + 264) = v8;
  *(_QWORD *)(v4 + 272) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 280) = swift_task_alloc();
  v9 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v4 + 288) = v9;
  *(_QWORD *)(v4 + 296) = *(_QWORD *)(v9 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v4 + 304) = AssociatedTypeWitness;
  *(_QWORD *)(v4 + 312) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v4 + 320) = swift_task_alloc();
  *(_QWORD *)(v4 + 328) = *(_QWORD *)(v9 + 8);
  v11 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v4 + 336) = v11;
  *(_QWORD *)(v4 + 344) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v4 + 352) = swift_task_alloc();
  *(_QWORD *)(v4 + 360) = swift_task_alloc();
  *(_QWORD *)(v4 + 368) = swift_task_alloc();
  *(_QWORD *)(v4 + 376) = swift_task_alloc();
  *(_QWORD *)(v4 + 384) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2DC594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  uint64_t v17;
  int32x2_t v19;
  uint64_t v20;
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(_QWORD *)(v0 + 176);
  if (*(_BYTE *)(v0 + 500) == 1 && __OFADD__(v1++, 1))
    goto LABEL_37;
  *(_QWORD *)(v0 + 392) = v1;
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 184) + *(_QWORD *)(**(_QWORD **)(v0 + 184) + 96);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v4, v3);
  *(_QWORD *)(v0 + 400) = v7;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v4, v3);
  *(_QWORD *)(v0 + 408) = v8;
  v10 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v0 + 416) = v10;
  if (!v8)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (*(uint64_t *)(v0 + 176) < 1)
  {
    if (qword_257967450 != -1)
      swift_once();
    v17 = sub_24B30B7A0();
    __swift_project_value_buffer(v17, (uint64_t)qword_25796F248);
    v13 = sub_24B30B788();
    v14 = sub_24B30BBC0();
    if (!os_log_type_enabled(v13, v14))
      goto LABEL_14;
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    v16 = "top-k must be positive.";
    goto LABEL_13;
  }
  v11 = v10 / v8;
  if (v10 % v8)
  {
    if (qword_257967450 == -1)
    {
LABEL_7:
      v12 = sub_24B30B7A0();
      __swift_project_value_buffer(v12, (uint64_t)qword_25796F248);
      v13 = sub_24B30B788();
      v14 = sub_24B30BBC0();
      if (!os_log_type_enabled(v13, v14))
      {
LABEL_14:

        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
      }
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      v16 = "testMatrixValues count must be divisible by columnCount.";
LABEL_13:
      _os_log_impl(&dword_24B2C5000, v13, v14, v16, v15, 2u);
      MEMORY[0x24BD1D2BC](v15, -1, -1);
      goto LABEL_14;
    }
LABEL_38:
    swift_once();
    goto LABEL_7;
  }
  if ((unsigned __int128)(v11 * (__int128)v1) >> 64 != (v11 * v1) >> 63)
  {
    __break(1u);
    goto LABEL_40;
  }
  v9.i32[0] = 0;
  *(_QWORD *)(v0 + 160) = sub_24B2D79D0(v11 * v1, v9);
  *(_QWORD *)(v0 + 152) = sub_24B2D7AC0(0, v11 * v1);
  if ((unsigned __int128)(v11 * (__int128)v7) >> 64 != (v11 * v7) >> 63)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v19.i32[0] = 0;
  v20 = sub_24B2D79D0(v11 * v7, v19);
  if (v1 + 0x4000000000000000 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v22 = v20;
  v41 = v6;
  v6 = 2 * v1;
  v21.i32[0] = -1.0;
  v23 = sub_24B2D79D0(2 * v1, v21);
  if (2 * v1 < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v39 = v23;
  v40 = v22;
  v24 = sub_24B2DE870(0, 2 * v1);
  v25 = v24[2];
  v26 = MEMORY[0x24BEE4AF8];
  if (!v25)
  {
    swift_release();
    v1 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 424) = MEMORY[0x24BEE4AF8];
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_25;
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v38 = v11;
  v42 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_24B2DC0A4(0, v25, 0);
  v27 = 0;
  v1 = (uint64_t)v42;
  v28 = v42[2];
  do
  {
    v29 = v24[v27 + 4];
    v30 = v42[3];
    if (v28 >= v30 >> 1)
      sub_24B2DC0A4(v30 > 1, v28 + 1, 1);
    ++v27;
    v42[2] = v28 + 1;
    v42[v28++ + 4] = v29;
  }
  while (v25 != v27);
  swift_release();
  v11 = v38;
  v26 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 424) = v42;
  if (v7 < 0)
    goto LABEL_32;
LABEL_25:
  v31 = sub_24B2DE870(0, v7);
  v32 = v31[2];
  if (!v32)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  sub_24B2DC0A4(0, v32, 0);
  v33 = 0;
  v34 = *(_QWORD *)(v26 + 16);
  do
  {
    v35 = v31[v33 + 4];
    v36 = *(_QWORD *)(v26 + 24);
    if (v34 >= v36 >> 1)
      sub_24B2DC0A4(v36 > 1, v34 + 1, 1);
    ++v33;
    *(_QWORD *)(v26 + 16) = v34 + 1;
    *(_QWORD *)(v26 + 8 * v34++ + 32) = v35;
  }
  while (v32 != v33);
LABEL_34:
  swift_release();
  *(_QWORD *)(v0 + 432) = v26;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 272) + 16))(*(_QWORD *)(v0 + 280), v41, *(_QWORD *)(v0 + 264));
  sub_24B30BB18();
  v6 = v40;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_43:
    v1 = (uint64_t)sub_24B2D83E8((_QWORD *)v1);
  *(_DWORD *)(v0 + 496) = *MEMORY[0x24BEDFB70];
  *(_QWORD *)(v0 + 440) = v1;
  *(_QWORD *)(v0 + 448) = v11 & ~(v11 >> 63);
  *(_QWORD *)(v0 + 464) = v39;
  *(_QWORD *)(v0 + 472) = v6;
  *(_QWORD *)(v0 + 456) = 0;
  swift_getAssociatedConformanceWitness();
  v37 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v37;
  *v37 = v0;
  v37[1] = sub_24B2DCB84;
  return sub_24B30BADC();
}

uint64_t sub_24B2DCB84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_24B2DCC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  vDSP_Length v29;
  uint64_t v30;
  const float *v31;
  float v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  size_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  vDSP_Length v60;
  const float *v61;
  float v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  vDSP_Length v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const float *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  BOOL v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  vDSP_Length v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  vDSP_Length v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  void (*v164)(uint64_t, uint64_t, uint64_t);
  uint64_t v165;
  unint64_t v166;
  vDSP_Length __N;
  int64_t __Na;
  float *__B;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v1 = *(_QWORD *)(v0 + 96);
  v160 = (uint64_t *)(v0 + 160);
  v161 = (uint64_t *)(v0 + 152);
  if (!v1)
  {
    v12 = *(_QWORD *)(v0 + 456);
    v13 = *(_QWORD *)(v0 + 392);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0 || v13 < v12)
    {
      v46 = *(unsigned __int8 *)(v0 + 500);
      v47 = *(_QWORD *)(v0 + 392);
      v48 = v47;
      if (v46 == 1)
      {
        if (v47 == 0x8000000000000000)
          goto LABEL_245;
        v48 = v47 - 1;
      }
      v49 = *(_QWORD *)(v0 + 416) / *(uint64_t *)(v0 + 408);
      if ((v49 & 0x8000000000000000) == 0)
      {
        v172 = sub_24B2DC1D4(0, v49, v46, v47, v160, v48, v161);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
    }
    swift_bridgeObjectRelease();
    if (qword_257967450 == -1)
    {
LABEL_11:
      v14 = sub_24B30B7A0();
      __swift_project_value_buffer(v14, (uint64_t)qword_25796F248);
      v15 = sub_24B30B788();
      v16 = sub_24B30BBC0();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = *(_QWORD *)(v0 + 456);
        v18 = *(_QWORD *)(v0 + 176);
        v19 = swift_slowAlloc();
        *(_DWORD *)v19 = 134218240;
        *(_QWORD *)(v0 + 112) = v18;
        sub_24B30BBD8();
        *(_WORD *)(v19 + 12) = 2048;
        *(_QWORD *)(v0 + 120) = v17;
        sub_24B30BBD8();
        _os_log_impl(&dword_24B2C5000, v15, v16, "Not enough samples to score with top-k = %ld, target samples = %lu.", (uint8_t *)v19, 0x16u);
        MEMORY[0x24BD1D2BC](v19, -1, -1);
      }
      swift_bridgeObjectRelease();

      goto LABEL_14;
    }
LABEL_242:
    swift_once();
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v1 + 16) / v2;
  if (*(_QWORD *)(v0 + 400) < v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_257967450 != -1)
      swift_once();
    v4 = sub_24B30B7A0();
    __swift_project_value_buffer(v4, (uint64_t)qword_25796F248);
    v5 = sub_24B30B788();
    v6 = sub_24B30BBC0();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = *(_QWORD *)(v0 + 400);
      v8 = swift_slowAlloc();
      *(_DWORD *)v8 = 134218240;
      *(_QWORD *)(v0 + 136) = v3;
      sub_24B30BBD8();
      *(_WORD *)(v8 + 12) = 2048;
      *(_QWORD *)(v0 + 144) = v7;
      sub_24B30BBD8();
      _os_log_impl(&dword_24B2C5000, v5, v6, "Invalid data size. Number of rows %ld > specified batch size %ld.", (uint8_t *)v8, 0x16u);
      MEMORY[0x24BD1D2BC](v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 312);
    v9 = *(_QWORD *)(v0 + 320);
    v11 = *(_QWORD *)(v0 + 304);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    v172 = 0;
LABEL_54:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v172);
  }
  if (v2 < 0)
    return sub_24B30BCC8();
  v20 = *(_QWORD *)(v0 + 416) / v2;
  v21 = sub_24B30BA28();
  *(_QWORD *)(v21 + 16) = v2;
  memset_pattern16((void *)(v21 + 32), &unk_24B30E140, 4 * v2);
  if (v20 < 0)
  {
    __break(1u);
    goto LABEL_240;
  }
  v173 = v1;
  if (!(*(_QWORD *)(v0 + 416) / *(uint64_t *)(v0 + 408)))
  {
    swift_bridgeObjectRelease();
    v175 = MEMORY[0x24BEE4AF8];
LABEL_57:
    v51 = *(_QWORD *)(v0 + 408);
    v52 = sub_24B30BA28();
    *(_QWORD *)(v52 + 16) = v51;
    memset_pattern16((void *)(v52 + 32), &unk_24B30E140, 4 * v51);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v177 = v3;
      if (v3)
      {
        v53 = 0;
        v54 = (float *)(v0 + 92);
        v55 = *(_QWORD *)(v1 + 16);
        __B = (float *)(v0 + 88);
        v170 = v1 + 32;
        v56 = MEMORY[0x24BEE4AF8];
        do
        {
          v57 = *(_QWORD *)(v0 + 408);
          v58 = v53 * v57;
          if ((unsigned __int128)(v53 * (__int128)v57) >> 64 != (v53 * v57) >> 63)
            goto LABEL_203;
          if (v55 < v58)
            goto LABEL_204;
          if (v58 < 0)
            goto LABEL_205;
          if (v55 - v58 < 0 || (v59 = v55, v55 - v58 >= v57))
          {
            v59 = v58 + v57;
            if (__OFADD__(v58, v57))
              goto LABEL_213;
          }
          if (v59 < v58)
            goto LABEL_206;
          if (v55 < v59)
            goto LABEL_207;
          v60 = v59 - v58;
          if (v59 - v58 < 0)
            goto LABEL_208;
          *v54 = NAN;
          v61 = (const float *)(v170 + 4 * v58);
          swift_bridgeObjectRetain();
          vDSP_svesq(v61, 1, v54, v60);
          v62 = sqrtf(*v54);
          if (v62 > 0.0)
          {
            if (v60 != *(_QWORD *)(v52 + 16))
              goto LABEL_214;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v52 = sub_24B2D83D4(v52);
            v63 = v52 + 32;
            *__B = v62;
            vDSP_vsdiv(v61, 1, __B, (float *)(v52 + 32), 1, v60);
            v64 = *(_QWORD *)(v52 + 16);
            v65 = *(_QWORD *)(v56 + 16);
            v66 = v65 + v64;
            if (__OFADD__(v65, v64))
              goto LABEL_215;
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (!(_DWORD)isUniquelyReferenced_nonNull_native || v66 > *(_QWORD *)(v56 + 24) >> 1)
            {
              if (v65 <= v66)
                v68 = v65 + v64;
              else
                v68 = v65;
              v56 = sub_24B2C7F88(isUniquelyReferenced_nonNull_native, v68, 1, v56);
            }
            v3 = v177;
            if (*(_QWORD *)(v52 + 16))
            {
              v69 = *(_QWORD *)(v56 + 16);
              if ((*(_QWORD *)(v56 + 24) >> 1) - v69 < v64)
              {
                __break(1u);
                goto LABEL_220;
              }
              v70 = (void *)(v56 + 4 * v69 + 32);
              v71 = 4 * v64;
              if (v63 < (unint64_t)v70 + 4 * v64 && (unint64_t)v70 < v63 + v71)
                return sub_24B30BD10();
              memcpy(v70, (const void *)(v52 + 32), v71);
              if (v64)
              {
                v72 = *(_QWORD *)(v56 + 16);
                v44 = __OFADD__(v72, v64);
                v73 = v72 + v64;
                if (v44)
                  goto LABEL_229;
                *(_QWORD *)(v56 + 16) = v73;
              }
            }
            else if (v64)
            {
              goto LABEL_216;
            }
            swift_bridgeObjectRelease();
          }
          ++v53;
          swift_bridgeObjectRelease();
        }
        while (v3 != v53);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v56 = MEMORY[0x24BEE4AF8];
      }
      v74 = *(_QWORD *)(v0 + 408);
      v75 = v74 * v3;
      if ((unsigned __int128)(v74 * (__int128)v3) >> 64 == (v74 * v3) >> 63)
      {
        if (v75 < 0)
          return sub_24B30BCC8();
        if (v75)
        {
          v76 = sub_24B30BA28();
          *(_QWORD *)(v76 + 16) = v75;
          memset_pattern16((void *)(v76 + 32), &unk_24B30E150, 4 * v3 * v74);
          v74 = *(_QWORD *)(v0 + 408);
        }
        else
        {
          v76 = MEMORY[0x24BEE4AF8];
        }
        vDSP_mtrans((const float *)(v56 + 32), 1, (float *)(v76 + 32), 1, v74, v3);
        swift_bridgeObjectRelease();
        v77 = swift_isUniquelyReferenced_nonNull_native();
        v78 = *(_QWORD *)(v0 + 472);
        if ((v77 & 1) == 0)
          v78 = sub_24B2C7F88(0, *(_QWORD *)(v78 + 16), 0, *(_QWORD *)(v0 + 472));
        v79 = v78 + 32;
        v80 = *(_QWORD *)(v0 + 416) / *(uint64_t *)(v0 + 408);
        vDSP_mmul((const float *)(v175 + 32), 1, (const float *)(v76 + 32), 1, (float *)(v78 + 32), 1, v80, v3, *(_QWORD *)(v0 + 408));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v80)
        {
          v158 = 0;
          v162 = 0;
          v176 = 0;
          v81 = 0;
          v82 = *(_QWORD *)(v0 + 464);
          v157 = v78;
          v159 = v78 + 32;
          while (v81 != *(_QWORD *)(v0 + 448))
          {
            v83 = v81 * v177;
            if ((unsigned __int128)(v81 * (__int128)v177) >> 64 != (v81 * v177) >> 63)
              goto LABEL_221;
            v84 = *(_QWORD *)(v78 + 16);
            if (v84 < v83)
              goto LABEL_222;
            if (v83 < 0)
              goto LABEL_223;
            if (v177 < 1 || v84 - v83 < 0 || (v85 = *(_QWORD *)(v78 + 16), v84 - v83 >= v177))
            {
              v85 = v83 + v177;
              if (__OFADD__(v83, v177))
                goto LABEL_230;
            }
            if (v85 < v83)
              goto LABEL_224;
            if (v84 < v85)
              goto LABEL_225;
            v164 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 104);
            v164(*(_QWORD *)(v0 + 256), *(unsigned int *)(v0 + 496), *(_QWORD *)(v0 + 216));
            __N = v85 - v83;
            if (v85 - v83 < 0)
              return sub_24B30BCC8();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            v86 = swift_isUniquelyReferenced_nonNull_native();
            v174 = *(_QWORD **)(v0 + 432);
            v165 = v81;
            if ((v86 & 1) == 0)
              v174 = sub_24B2D83E8(v174);
            v166 = (2 * v85) | 1;
            v87 = *(unsigned int *)(v0 + 496);
            v89 = *(_QWORD *)(v0 + 248);
            v88 = *(_QWORD *)(v0 + 256);
            v90 = (const float *)(v79 + 4 * v83);
            v92 = *(_QWORD *)(v0 + 216);
            v91 = *(_QWORD *)(v0 + 224);
            v93 = sub_24B30B410();
            vDSP_vsorti(v90, v174 + 4, 0, __N, v93);
            v163 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
            v163(v88, v92);
            swift_bridgeObjectRelease();
            v164(v89, v87, v92);
            v171 = v83;
            if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
            {
              v94 = v159;
              v95 = v165;
              v96 = v166;
            }
            else
            {
              sub_24B2DEEAC(v159, v83, v166);
              v94 = v97;
              v83 = v98;
              v96 = v99;
              swift_unknownObjectRelease();
              v95 = v165;
            }
            v100 = *(_QWORD *)(v0 + 392);
            v101 = *(_QWORD *)(v0 + 248);
            v102 = *(_QWORD *)(v0 + 216);
            v103 = sub_24B30B410();
            vDSP_vsort((float *)(v94 + 4 * v83), __N, v103);
            v163(v101, v102);
            if (v100 < 0)
            {
              __break(1u);
              goto LABEL_228;
            }
            v104 = *(_QWORD *)(v0 + 392);
            if (v104)
            {
              if ((unsigned __int128)(v95 * (__int128)v104) >> 64 != (v95 * v104) >> 63)
                goto LABEL_231;
              if ((unint64_t)(v104 - 1) >= *(_QWORD *)(v82 + 16))
                goto LABEL_232;
              if ((unint64_t)(v104 - 1) >= *(_QWORD *)(*(_QWORD *)(v0 + 440) + 16))
                goto LABEL_233;
              v105 = *v160;
              v106 = *v161;
              swift_bridgeObjectRetain();
              if ((v176 & 0x8000000000000000) == 0)
              {
                __Na = v83;
                v107 = v96;
                v108 = 0;
                v109 = v107 >> 1;
                v110 = v106 + v104 * v162 + 32;
                v111 = v104 * v95;
                v112 = v105 + v104 * v158 + 32;
                while ((unint64_t)(v111 + v108) < *(_QWORD *)(v105 + 16))
                {
                  v114 = *(_DWORD *)(v112 + 4 * v108);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v82 = sub_24B2D83D4(v82);
                  *(_DWORD *)(v82 + 4 * v108 + 32) = v114;
                  if ((unint64_t)(v111 + v108) >= *(_QWORD *)(v106 + 16))
                    goto LABEL_179;
                  v115 = v82 + 32;
                  v116 = *(_QWORD *)(v0 + 392);
                  *(_QWORD *)(*(_QWORD *)(v0 + 440) + 8 * v108 + 32) = *(_QWORD *)(v110 + 8 * v108);
                  v117 = v116 + v108;
                  v118 = __OFADD__(v116, v108);
                  if (v108 >= v177)
                  {
                    if (v118)
                      goto LABEL_186;
                    if ((v117 & 0x8000000000000000) != 0)
                      goto LABEL_188;
                    if (v117 >= *(_QWORD *)(v82 + 16))
                      goto LABEL_190;
                    v125 = *(_QWORD *)(v0 + 440);
                    *(_DWORD *)(v115 + 4 * v117) = 0;
                    if (v117 >= *(_QWORD *)(v125 + 16))
                      goto LABEL_192;
                    v123 = 0;
                    v124 = *(_QWORD *)(v0 + 440);
                  }
                  else
                  {
                    if (v118)
                      goto LABEL_185;
                    v119 = v171 + v108;
                    if (__OFADD__(v171, v108))
                      goto LABEL_187;
                    if (v119 < __Na || v119 >= v109)
                      goto LABEL_189;
                    if ((v117 & 0x8000000000000000) != 0)
                      goto LABEL_191;
                    if (v117 >= *(_QWORD *)(v82 + 16))
                      goto LABEL_193;
                    *(_DWORD *)(v115 + 4 * v117) = *(_DWORD *)(v94 + 4 * v119);
                    if ((unint64_t)v108 >= v174[2])
                      goto LABEL_194;
                    v120 = *(_QWORD *)(v0 + 456);
                    v121 = v174[v108 + 4];
                    v122 = __CFADD__(v120, v121);
                    v123 = v120 + v121;
                    if (v122)
                      goto LABEL_195;
                    v124 = *(_QWORD *)(v0 + 440);
                    if (v117 >= *(_QWORD *)(v124 + 16))
                      goto LABEL_196;
                  }
                  ++v108;
                  v113 = *(_QWORD *)(v0 + 392);
                  *(_QWORD *)(v124 + 8 * v117 + 32) = v123;
                  if (v108 == v113)
                    goto LABEL_151;
                }
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
LABEL_186:
                __break(1u);
LABEL_187:
                __break(1u);
LABEL_188:
                __break(1u);
LABEL_189:
                __break(1u);
LABEL_190:
                __break(1u);
LABEL_191:
                __break(1u);
LABEL_192:
                __break(1u);
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
                goto LABEL_197;
              }
              goto LABEL_234;
            }
            swift_bridgeObjectRetain();
LABEL_151:
            v164(*(_QWORD *)(v0 + 240), *(unsigned int *)(v0 + 496), *(_QWORD *)(v0 + 216));
            v126 = *(_QWORD *)(v82 + 16);
            swift_bridgeObjectRetain();
            v127 = swift_isUniquelyReferenced_nonNull_native();
            v128 = *(_QWORD **)(v0 + 424);
            if ((v127 & 1) == 0)
              v128 = sub_24B2D83E8(*(_QWORD **)(v0 + 424));
            v129 = *(unsigned int *)(v0 + 496);
            v131 = *(_QWORD *)(v0 + 232);
            v130 = *(_QWORD *)(v0 + 240);
            v132 = *(_QWORD *)(v0 + 216);
            v133 = sub_24B30B410();
            vDSP_vsorti((const float *)(v82 + 32), v128 + 4, 0, v126, v133);
            v163(v130, v132);
            swift_bridgeObjectRelease();
            v164(v131, v129, v132);
            v134 = *(_QWORD *)(v82 + 16);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v82 = sub_24B2D83D4(v82);
            v79 = v159;
            v135 = *(_QWORD *)(v0 + 392);
            v136 = *(_QWORD *)(v0 + 232);
            v137 = (int *)(v82 + 32);
            v138 = *(_QWORD *)(v0 + 216);
            v139 = sub_24B30B410();
            vDSP_vsort((float *)(v82 + 32), v134, v139);
            v163(v136, v138);
            if (v135)
            {
              v140 = *(_QWORD *)(v0 + 392);
              if ((unsigned __int128)(v165 * (__int128)v140) >> 64 != (v165 * v140) >> 63)
                goto LABEL_235;
              v141 = *(_QWORD *)(v82 + 16);
              if (!v141 || v140 - 1 >= v141)
                goto LABEL_236;
              v142 = v128[2];
              if (!v142 || v140 - 1 >= v142)
                goto LABEL_237;
              v143 = *v160;
              v144 = (_QWORD *)*v161;
              v145 = v140 * v162;
              v146 = 4;
              v147 = v140 * v165;
              do
              {
                v148 = *v137;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
                  if (v176 < 0)
                    goto LABEL_180;
                }
                else
                {
                  v143 = sub_24B2D83D4(v143);
                  if (v176 < 0)
                    goto LABEL_180;
                }
                if (v147 >= *(_QWORD *)(v143 + 16))
                  goto LABEL_181;
                *(_DWORD *)(v143 + 4 * v147 + 32) = v148;
                v149 = v128[v146];
                if ((v149 & 0x8000000000000000) != 0)
                  goto LABEL_182;
                v150 = *(_QWORD *)(v0 + 440);
                if (v149 >= *(_QWORD *)(v150 + 16))
                  goto LABEL_183;
                v151 = *(_QWORD *)(v150 + 8 * v149 + 32);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v144 = sub_24B2D83E8(v144);
                if (v147 >= v144[2])
                  goto LABEL_184;
                v152 = *(_QWORD *)(v0 + 392);
                *(_QWORD *)((char *)&v144[v146] + v145) = v151;
                v153 = v146 - 3;
                ++v146;
                ++v137;
                ++v147;
              }
              while (v153 != v152);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              *v161 = (uint64_t)v144;
              v79 = v159;
              *v160 = v143;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            v78 = v157;
            v81 = v165 + 1;
            v176 += *(_QWORD *)(v0 + 392);
            v162 += 8;
            v158 += 4;
            if (v165 + 1 == *(_QWORD *)(v0 + 416) / *(uint64_t *)(v0 + 408))
              goto LABEL_176;
          }
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
          return sub_24B30BCC8();
        }
        v82 = *(_QWORD *)(v0 + 464);
LABEL_176:
        v154 = *(_QWORD *)(v0 + 456);
        v122 = __CFADD__(v154, v177);
        v155 = v154 + v177;
        if (!v122)
        {
          *(_QWORD *)(v0 + 464) = v82;
          *(_QWORD *)(v0 + 472) = v78;
          *(_QWORD *)(v0 + 456) = v155;
          swift_getAssociatedConformanceWitness();
          v156 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 480) = v156;
          *v156 = v0;
          v156[1] = sub_24B2DCB84;
          return sub_24B30BADC();
        }
        goto LABEL_244;
      }
      goto LABEL_241;
    }
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }
  v22 = 0;
  v175 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v25 = *(_QWORD *)(v0 + 408);
    v26 = v22 * v25;
    if ((unsigned __int128)(v22 * (__int128)v25) >> 64 != (v22 * v25) >> 63)
      break;
    v27 = *(_QWORD *)(v0 + 416);
    if (v27 < v26)
      goto LABEL_198;
    if (v26 < 0)
      goto LABEL_199;
    if (v27 - v26 < 0 || (v28 = *(_QWORD *)(v0 + 416), v27 - v26 >= v25))
    {
      v28 = v26 + v25;
      if (__OFADD__(v26, v25))
        goto LABEL_209;
    }
    if (v28 < v26)
      goto LABEL_200;
    if (v27 < v28)
      goto LABEL_201;
    v29 = v28 - v26;
    if (v28 - v26 < 0)
      goto LABEL_202;
    v30 = *(_QWORD *)(v0 + 168) + 4 * v26;
    *(_DWORD *)(v0 + 52) = 2143289344;
    v31 = (const float *)(v30 + 32);
    swift_bridgeObjectRetain();
    vDSP_svesq(v31, 1, (float *)(v0 + 52), v29);
    v32 = sqrtf(*(float *)(v0 + 52));
    if (v32 > 0.0)
    {
      if (v29 != *(_QWORD *)(v21 + 16))
        goto LABEL_210;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = sub_24B2D83D4(v21);
      v33 = v21 + 32;
      *(float *)(v0 + 48) = v32;
      vDSP_vsdiv(v31, 1, (const float *)(v0 + 48), (float *)(v21 + 32), 1, v29);
      v34 = *(_QWORD *)(v21 + 16);
      v35 = *(_QWORD *)(v175 + 16);
      v36 = v35 + v34;
      if (__OFADD__(v35, v34))
        goto LABEL_211;
      swift_bridgeObjectRetain();
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v38 = v175;
      if (!(_DWORD)v37 || v36 > *(_QWORD *)(v175 + 24) >> 1)
      {
        if (v35 <= v36)
          v39 = v35 + v34;
        else
          v39 = v35;
        v38 = sub_24B2C7F88(v37, v39, 1, v175);
      }
      v175 = v38;
      if (*(_QWORD *)(v21 + 16))
      {
        v40 = *(_QWORD *)(v38 + 16);
        if ((*(_QWORD *)(v38 + 24) >> 1) - v40 < v34)
          goto LABEL_217;
        v41 = (void *)(v38 + 4 * v40 + 32);
        v42 = 4 * v34;
        if (v33 < (unint64_t)v41 + 4 * v34 && (unint64_t)v41 < v33 + v42)
          return sub_24B30BD10();
        memcpy(v41, (const void *)(v21 + 32), v42);
        if (v34)
        {
          v43 = *(_QWORD *)(v175 + 16);
          v44 = __OFADD__(v43, v34);
          v45 = v43 + v34;
          if (v44)
          {
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
            return sub_24B30BCC8();
          }
          *(_QWORD *)(v175 + 16) = v45;
        }
      }
      else if (v34)
      {
        goto LABEL_212;
      }
      swift_bridgeObjectRelease();
    }
    ++v22;
    v24 = *(_QWORD *)(v0 + 408);
    v23 = *(_QWORD *)(v0 + 416);
    swift_bridgeObjectRelease();
    v1 = v173;
    if (v22 == v23 / v24)
    {
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
  }
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
  return sub_24B30BD10();
}

uint64_t sub_24B2DDF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v42;
  os_log_type_t v43;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v5(v2, v1, v3);
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (qword_257967450 != -1)
      swift_once();
    v6 = sub_24B30B7A0();
    __swift_project_value_buffer(v6, (uint64_t)qword_25796F248);
    v7 = sub_24B30B788();
    v8 = sub_24B30BBA8();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_24B2C5000, v7, v8, "Task canceled at scoring.", v9, 2u);
      MEMORY[0x24BD1D2BC](v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 384);
    v11 = *(_QWORD *)(v0 + 336);
    v12 = *(_QWORD *)(v0 + 344);
    v14 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 344) + 16);
    v16(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 336));
    if (qword_257967450 != -1)
      swift_once();
    v17 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 368);
    v19 = *(_QWORD *)(v0 + 336);
    v20 = sub_24B30B7A0();
    __swift_project_value_buffer(v20, (uint64_t)qword_25796F248);
    v16(v17, v18, v19);
    v21 = sub_24B30B788();
    v22 = sub_24B30BBC0();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 360);
    if (v23)
    {
      v43 = v22;
      v25 = *(_QWORD *)(v0 + 352);
      v26 = *(_QWORD *)(v0 + 336);
      v27 = (uint8_t *)swift_slowAlloc();
      v42 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v27 = 138412290;
      v16(v25, v24, v26);
      swift_getAssociatedConformanceWitness();
      v28 = sub_24B30BE30();
      v29 = *(_QWORD *)(v0 + 352);
      if (v28)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
      }
      else
      {
        v33 = *(_QWORD *)(v0 + 336);
        swift_allocError();
        v5(v34, v29, v33);
      }
      v35 = *(_QWORD *)(v0 + 360);
      v37 = *(_QWORD *)(v0 + 336);
      v36 = *(_QWORD *)(v0 + 344);
      v38 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 104) = v38;
      sub_24B30BBD8();
      *v42 = v38;
      v32 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v32(v35, v37);
      _os_log_impl(&dword_24B2C5000, v21, v43, "Error: %@", v27, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C8);
      swift_arrayDestroy();
      MEMORY[0x24BD1D2BC](v42, -1, -1);
      MEMORY[0x24BD1D2BC](v27, -1, -1);

    }
    else
    {
      v30 = *(_QWORD *)(v0 + 336);
      v31 = *(_QWORD *)(v0 + 344);

      v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v32(v24, v30);
    }
    v39 = *(_QWORD *)(v0 + 384);
    v40 = *(_QWORD *)(v0 + 336);
    v32(*(_QWORD *)(v0 + 368), v40);
    v32(v39, v40);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_24B2DE3FC(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  int64_t v7;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = a5 >> 1;
  v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result || v6 < 0 || (v7 = a5 >> 1, v6 >= result))
  {
    v7 = a4 + result;
    if (__OFADD__(a4, result))
      goto LABEL_18;
  }
  if (v7 < a4)
    goto LABEL_14;
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0)
      return a2;
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

int64_t sub_24B2DE478(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t *sub_24B2DE4BC@<X0>(uint64_t *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  int64_t v7;
  BOOL v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v43;
  uint64_t v44;

  v7 = *result * a3;
  v8 = (unsigned __int128)(*result * (__int128)a3) >> 64 != v7 >> 63;
  if ((a2 & 1) == 0)
  {
LABEL_6:
    if (v8)
    {
LABEL_49:
      __break(1u);
      return result;
    }
    goto LABEL_7;
  }
  if ((unsigned __int128)(*result * (__int128)a3) >> 64 != v7 >> 63)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (__OFADD__(v7++, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  v10 = *(_QWORD *)(*a4 + 16);
  if (v10 < v7)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v7 < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  result = (uint64_t *)sub_24B2DE3FC(a5, *a4, *a4 + 32, v7, (2 * v10) | 1);
  v14 = v13 >> 1;
  v15 = (v13 >> 1) - v12;
  if (__OFSUB__(v13 >> 1, v12))
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v15)
  {
    v16 = v11;
    v17 = v12;
    v43 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    result = (uint64_t *)sub_24B2DB008(0, v15 & ~(v15 >> 63), 0);
    if (v15 < 0)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v18 = v43;
    if (v17 <= v14)
      v19 = v14;
    else
      v19 = v17;
    v20 = v19 - v17;
    v21 = (int *)(v16 + 4 * v17);
    while (v20)
    {
      v22 = *v21;
      v24 = *(_QWORD *)(v43 + 16);
      v23 = *(_QWORD *)(v43 + 24);
      if (v24 >= v23 >> 1)
        result = (uint64_t *)sub_24B2DB008(v23 > 1, v24 + 1, 1);
      *(_QWORD *)(v43 + 16) = v24 + 1;
      *(_DWORD *)(v43 + 4 * v24 + 32) = v22;
      --v20;
      ++v21;
      if (!--v15)
      {
        swift_unknownObjectRelease();
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  v18 = MEMORY[0x24BEE4AF8];
LABEL_22:
  result = (uint64_t *)a5;
  v25 = *(_QWORD *)(*a6 + 16);
  if (v25 < v7)
    goto LABEL_44;
  result = (uint64_t *)sub_24B2DE3FC(a5, *a6, *a6 + 32, v7, (2 * v25) | 1);
  v29 = v28 >> 1;
  v30 = (v28 >> 1) - v27;
  if (__OFSUB__(v28 >> 1, v27))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v30)
  {
    v31 = v26;
    v32 = v27;
    v44 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    result = (uint64_t *)sub_24B2DC0C0(0, v30 & ~(v30 >> 63), 0);
    if (v30 < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v33 = v44;
    if (v32 <= v29)
      v34 = v29;
    else
      v34 = v32;
    v35 = v34 - v32;
    v36 = (uint64_t *)(v31 + 8 * v32);
    while (v35)
    {
      v37 = *v36;
      if (*v36 < 0)
        goto LABEL_40;
      v39 = *(_QWORD *)(v44 + 16);
      v38 = *(_QWORD *)(v44 + 24);
      if (v39 >= v38 >> 1)
        result = (uint64_t *)sub_24B2DC0C0(v38 > 1, v39 + 1, 1);
      *(_QWORD *)(v44 + 16) = v39 + 1;
      *(_QWORD *)(v44 + 8 * v39 + 32) = v37;
      --v35;
      ++v36;
      if (!--v30)
      {
        result = (uint64_t *)swift_unknownObjectRelease();
        goto LABEL_37;
      }
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  result = (uint64_t *)swift_unknownObjectRelease();
  v33 = MEMORY[0x24BEE4AF8];
LABEL_37:
  *a7 = v18;
  a7[1] = v33;
  return result;
}

uint64_t MatrixNNScorer.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return v0;
}

uint64_t MatrixNNScorer.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_deallocClassInstance();
}

uint64_t sub_24B2DE808(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *a1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_24B2DF100;
  return sub_24B2DC3BC(v6, a2, a3);
}

int64_t *sub_24B2DE870(int64_t *result, int64_t a2)
{
  uint64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x24BEE4AF8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = sub_24B2DED6C(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2DE934(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2DEA9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967528);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 29;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2DEC04(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 16 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 16 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 16 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579674E0);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

int64_t *sub_24B2DED6C(int64_t *result, int64_t *a2, uint64_t a3, int64_t a4, int64_t a5)
{
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64_t *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  v6 = a5 - a4;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    if (a3 == 1)
      goto LABEL_7;
    if (v5 == a5)
    {
      a3 = 1;
      v5 = a5;
      goto LABEL_7;
    }
    v7 = v6 - 2;
    if (v6 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 >= ~a4 + a5)
      v7 = ~a4 + a5;
    v8 = v7 + 1;
    if (v8 >= 5)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v13 = v5 + v8 - v11;
      v10 = &a2[v8 - v11];
      v9 = v12 + 2;
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_24B30DD30);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 2;
      v10 = a2;
    }
    v17 = v10 + 1;
    while (v5 < a5)
    {
      v18 = v5 + 1;
      *v17 = v5;
      if (a3 == v9)
      {
        ++v5;
        goto LABEL_7;
      }
      ++v9;
      ++v17;
      ++v5;
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2DEEAC(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v3 = a3 >> 1;
  v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_13;
  v6 = result;
  if (!v4)
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v3 >= a2)
      goto LABEL_6;
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967528);
  v7 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v7);
  v8 = result - 32;
  if (result < 32)
    v8 = result - 29;
  v7[2] = v4;
  v7[3] = 2 * (v8 >> 2);
  if (v3 < a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  result = (uint64_t)memcpy(v7 + 4, (const void *)(v6 + 4 * a2), 4 * v4);
  if (__OFSUB__(0, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v7[2];
  v10 = __OFADD__(a2, v9);
  v11 = a2 + v9;
  if (v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v11 & 0x8000000000000000) == 0)
    return (uint64_t)v7;
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_24B2DEFA4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for MatrixNNScorer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MatrixNNScorer);
}

uint64_t method lookup function for MatrixNNScorer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MatrixNNScorer.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MatrixNNScorer.score(_:topK:skipFirst:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 112)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 112));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_24B2DF0B0;
  return v10(a1, a2, a3);
}

uint64_t sub_24B2DF0B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_24B2DF104(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = v4;
  v20 = a1;
  v21 = a2;
  v19 = sub_24B30B734();
  v8 = *(_QWORD *)(v19 - 8);
  result = MEMORY[0x24BDAC7A8](v19);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a3;
  v12 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
    return v13;
  v24 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DC0DC(0, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = v24;
    v14 = v22;
    if (a4 <= v22)
      v15 = v22;
    else
      v15 = a4;
    v18 = v15;
    while (a4 != v14)
    {
      v23 = v14;
      v20(&v23);
      if (v5)
      {
        swift_release();
        return v13;
      }
      v5 = 0;
      v24 = v13;
      v17 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_24B2DC0DC(v16 > 1, v17 + 1, 1);
        v13 = v24;
      }
      *(_QWORD *)(v13 + 16) = v17 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v17, v11, v19);
      if (a4 < v22)
        goto LABEL_19;
      if (v18 == v14)
        goto LABEL_20;
      if (a4 == ++v14)
        return v13;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_24B2DF2AC(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *i;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  void (*v16)(uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v16 = a1;
  v17 = a2;
  v15 = sub_24B30B734();
  v6 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_24B2DC0DC(0, v9, 0);
    v10 = v19;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v18 = *i;
      swift_bridgeObjectRetain();
      v16(&v18);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v19 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_24B2DC0DC(v12 > 1, v13 + 1, 1);
        v10 = v19;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13, v8, v15);
      if (!--v9)
        return v10;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t TensorNNScorer.__allocating_init(_:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 80) - 8) + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 104), a1);
  sub_24B2D4CC8(a2, v4 + qword_25796F240);
  return v4;
}

uint64_t TensorNNScorer.init(_:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104), a1);
  sub_24B2D4CC8(a2, v2 + qword_25796F240);
  return v2;
}

uint64_t sub_24B2DF4E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v4 + 168) = a2;
  *(_QWORD *)(v4 + 176) = v3;
  *(_BYTE *)(v4 + 608) = a3;
  *(_QWORD *)(v4 + 160) = a1;
  v5 = *v3;
  v6 = sub_24B30BAD0();
  *(_QWORD *)(v4 + 184) = v6;
  *(_QWORD *)(v4 + 192) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967D78);
  *(_QWORD *)(v4 + 208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967D80);
  *(_QWORD *)(v4 + 216) = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967D88);
  *(_QWORD *)(v4 + 224) = v7;
  *(_QWORD *)(v4 + 232) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 240) = swift_task_alloc();
  *(_QWORD *)(v4 + 248) = swift_task_alloc();
  *(_QWORD *)(v4 + 256) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
  *(_QWORD *)(v4 + 264) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967D90);
  *(_QWORD *)(v4 + 272) = swift_task_alloc();
  v8 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v4 + 280) = v8;
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 296) = swift_task_alloc();
  v9 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v4 + 304) = v9;
  *(_QWORD *)(v4 + 312) = *(_QWORD *)(v9 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v4 + 320) = AssociatedTypeWitness;
  *(_QWORD *)(v4 + 328) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v4 + 336) = swift_task_alloc();
  *(_QWORD *)(v4 + 344) = *(_QWORD *)(v9 + 8);
  v11 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v4 + 352) = v11;
  *(_QWORD *)(v4 + 360) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v4 + 368) = swift_task_alloc();
  *(_QWORD *)(v4 + 376) = swift_task_alloc();
  *(_QWORD *)(v4 + 384) = swift_task_alloc();
  *(_QWORD *)(v4 + 392) = swift_task_alloc();
  *(_QWORD *)(v4 + 400) = swift_task_alloc();
  v12 = sub_24B30B614();
  *(_QWORD *)(v4 + 408) = v12;
  *(_QWORD *)(v4 + 416) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v4 + 424) = swift_task_alloc();
  *(_QWORD *)(v4 + 432) = swift_task_alloc();
  *(_QWORD *)(v4 + 440) = swift_task_alloc();
  *(_QWORD *)(v4 + 448) = swift_task_alloc();
  v13 = sub_24B30B5FC();
  *(_QWORD *)(v4 + 456) = v13;
  *(_QWORD *)(v4 + 464) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v4 + 472) = swift_task_alloc();
  v14 = sub_24B30B734();
  *(_QWORD *)(v4 + 480) = v14;
  *(_QWORD *)(v4 + 488) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v4 + 496) = swift_task_alloc();
  *(_QWORD *)(v4 + 504) = swift_task_alloc();
  *(_QWORD *)(v4 + 512) = swift_task_alloc();
  *(_QWORD *)(v4 + 520) = swift_task_alloc();
  *(_QWORD *)(v4 + 528) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2DF7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 488) + 16);
  *(_QWORD *)(v0 + 536) = v8;
  v8(v1, v6, v2);
  sub_24B30B65C();
  LOBYTE(v1) = sub_24B30B5F0();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((v1 & 1) != 0 && v7 >= 1)
  {
    v10 = *(_QWORD *)(v0 + 168);
    if (*(_BYTE *)(v0 + 608) == 1 && (v11 = __OFADD__(v10, 1), ++v10, v11))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v0 + 544) = v10;
      v12 = *(_QWORD *)(v0 + 448);
      v14 = *(_QWORD *)(v0 + 408);
      v13 = *(_QWORD *)(v0 + 416);
      v15 = *(_QWORD *)(v0 + 296);
      v25 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 280);
      v17 = *(_QWORD *)(v0 + 176);
      sub_24B30B6BC();
      v18 = sub_24B30B62C();
      v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      *(_QWORD *)(v0 + 552) = v19;
      v19(v12, v14);
      v20 = MEMORY[0x24BEE4AF8];
      v24 = sub_24B2D7C98(MEMORY[0x24BEE4AF8], v18);
      sub_24B30B6BC();
      v21 = sub_24B30B62C();
      v19(v12, v14);
      v22 = sub_24B2D7CA4(v20, v21);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v15, v17 + *(_QWORD *)(*(_QWORD *)v17 + 104), v16);
      sub_24B30BB18();
      *(_QWORD *)(v0 + 560) = qword_25796F240;
      *(_QWORD *)(v0 + 584) = v24;
      *(_QWORD *)(v0 + 576) = v22;
      *(_QWORD *)(v0 + 568) = 0;
      swift_getAssociatedConformanceWitness();
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 592) = v23;
      *v23 = v0;
      v23[1] = sub_24B2DFB6C;
      return sub_24B30BADC();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 488) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 480));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  return result;
}

uint64_t sub_24B2DFB6C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 600) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24B2DFBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  _QWORD *v17;
  int64_t v18;
  void (*v19)(_QWORD);
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  void (*v56)(void (*)(char *, uint64_t, uint64_t), uint64_t);
  void (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t, uint64_t);
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  void (*v86)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t);
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  void (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 272);
  v180 = (_QWORD *)v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 584);
    v5 = *(_QWORD *)(v0 + 576);
    v177 = *(_QWORD *)(v0 + 568);
    v173 = *(_QWORD *)(v0 + 544);
    v6 = *(_QWORD *)(v0 + 456);
    v7 = *(_QWORD *)(v0 + 464);
    v8 = *(_QWORD *)(v0 + 208);
    v9 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
    swift_bridgeObjectRetain();
    sub_24B2DF2AC((void (*)(uint64_t *))sub_24B2E22AC, v9, v4);
    swift_bridgeObjectRelease();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v10(v8, 1, 1, v6);
    sub_24B30B71C();
    swift_bridgeObjectRetain();
    sub_24B2DF2AC((void (*)(uint64_t *))sub_24B2E22E0, v9, v5);
    swift_bridgeObjectRelease();
    v10(v8, 1, 1, v6);
    sub_24B30B71C();
    if (v173 < v177)
    {
      v11 = *(char **)(v0 + 528);
      v13 = *(char **)(v0 + 496);
      v12 = *(_QWORD *)(v0 + 504);
      v14 = *(_QWORD *)(v0 + 480);
      v15 = *(_QWORD *)(v0 + 488);
      v161 = sub_24B2E34C8(v12, v13, *(unsigned __int8 *)(v0 + 608));
      v16 = *(void (**)(char *, uint64_t))(v15 + 8);
      v16(v13, v14);
      v16((char *)v12, v14);
      v16(v11, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = (_QWORD *)v0;
LABEL_20:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return ((uint64_t (*)(uint64_t))v17[1])(v161);
    }
    if (qword_257967450 == -1)
      goto LABEL_15;
    goto LABEL_113;
  }
  v18 = *(_QWORD *)(v0 + 568);
  v19 = *(void (**)(_QWORD))(v2 + 32);
  ((void (*)(_QWORD, uint64_t, uint64_t))v19)(*(_QWORD *)(v0 + 520), v3, v1);
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_106;
  v20 = *(_QWORD *)(v0 + 568);
  if (v20 > 0x7FFFFFFF)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v21 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v22 = *(_QWORD *)(v0 + 448);
  v23 = *(_QWORD *)(v0 + 408);
  sub_24B30B6BC();
  v24 = sub_24B30B62C();
  v21(v22, v23);
  v25 = v20 + v24;
  if (__OFADD__(v20, v24))
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  if (v25 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (v25 > 0x7FFFFFFF)
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  v168 = (void (*)(uint64_t, uint64_t, uint64_t))v19;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 536);
  v27 = *(_QWORD *)(v0 + 520);
  v28 = *(_QWORD *)(v0 + 512);
  v29 = *(_QWORD *)(v0 + 480);
  v30 = *(_QWORD *)(v0 + 176) + *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 264);
  v32 = *(_QWORD *)(v0 + 256);
  v33 = *(unsigned int *)(v0 + 568) | (unint64_t)(v25 << 32);
  v34 = *(_QWORD *)(v0 + 224);
  v180[9] = sub_24B2E2C8C(v33, 1);
  sub_24B2D5C30(v30, v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967518);
  sub_24B2E3C44(&qword_257967D98, &qword_257967518);
  sub_24B30B740();
  v35 = v32 + *(int *)(v34 + 48);
  v26(v32, v27, v29);
  v26(v35, v28, v29);
  sub_24B30B6BC();
  sub_24B2E3A7C();
  sub_24B30BB48();
  v36 = v180[11];
  if (v36 < 1)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v37 = (void (*)(uint64_t, uint64_t))v180[69];
  v38 = v180[56];
  v39 = v180[51];
  v180[4] = 1;
  v180[5] = v36;
  sub_24B30BB6C();
  v37(v38, v39);
  sub_24B30B6BC();
  sub_24B30BB48();
  v40 = v180[13];
  if (v40 < 1)
  {
LABEL_112:
    __break(1u);
LABEL_113:
    swift_once();
LABEL_15:
    v65 = sub_24B30B7A0();
    __swift_project_value_buffer(v65, (uint64_t)qword_25796F248);
    v66 = sub_24B30B788();
    v67 = sub_24B30BBC0();
    v17 = v180;
    if (os_log_type_enabled(v66, v67))
    {
      v68 = v180[71];
      v69 = v180[21];
      v70 = swift_slowAlloc();
      *(_DWORD *)v70 = 134218240;
      v180[7] = v69;
      sub_24B30BBD8();
      *(_WORD *)(v70 + 12) = 2048;
      v180[8] = v68;
      sub_24B30BBD8();
      _os_log_impl(&dword_24B2C5000, v66, v67, "Not enough samples to score with top-k = %ld, target samples = %ld.", (uint8_t *)v70, 0x16u);
      MEMORY[0x24BD1D2BC](v70, -1, -1);
    }
    v71 = v180[66];
    v73 = v180[62];
    v72 = v180[63];
    v75 = v180[60];
    v74 = v180[61];

    v76 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v76(v73, v75);
    v76(v72, v75);
    v76(v71, v75);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v41 = (void (*)(uint64_t, uint64_t))v180[69];
  v43 = v180[54];
  v42 = v180[55];
  v44 = v180[53];
  v45 = v180[51];
  v180[2] = 1;
  v180[3] = v40;
  sub_24B30BB6C();
  v41(v43, v45);
  v46 = sub_24B30B608();
  v47 = (_QWORD *)sub_24B30B608();
  v48 = sub_24B2E2F90(v46, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41(v44, v45);
  v41(v42, v45);
  if ((v48 & 1) == 0)
  {
    v77 = v180[66];
    v78 = v180[65];
    v79 = v180[64];
    v81 = v180[60];
    v80 = v180[61];
    v82 = v180[42];
    v83 = v180[41];
    v84 = v180[40];
    sub_24B2E3C08(v180[32], &qword_257967D88);
    v85 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v85(v79, v81);
    v85(v78, v81);
    v86 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v17 = v180;
    v86(v82, v84);
    v85(v77, v81);
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    v161 = 0;
    goto LABEL_20;
  }
  v49 = (void (*)(char *, uint64_t, uint64_t))v180[67];
  v50 = v180[66];
  v51 = v180[60];
  v171 = v180[68];
  v174 = v180[61];
  v52 = (char *)v180[30];
  v178 = v180[29];
  v54 = v180[27];
  v53 = v180[28];
  v55 = (void (*)(char *, uint64_t, uint64_t))&v52[*(int *)(v53 + 48)];
  v49(v52, v180[32], v51);
  v49((char *)v55, v35, v51);
  sub_24B2E14E0(v50, v52, v55, v171, v54);
  v56 = *(void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v174 + 8);
  v56(v55, v51);
  v56((void (*)(char *, uint64_t, uint64_t))v52, v51);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48))(v54, 1, v53) == 1)
  {
    v57 = (void (*)(char *, uint64_t, uint64_t))v180[66];
    v58 = (void (*)(char *, uint64_t, uint64_t))v180[65];
    v59 = (void (*)(char *, uint64_t, uint64_t))v180[64];
    v60 = v180[60];
    v61 = v180[41];
    v62 = v180[42];
    v63 = v180[40];
    v64 = v180[27];
    sub_24B2E3C08(v180[32], &qword_257967D88);
    v56(v59, v60);
    v56(v58, v60);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
    v56(v57, v60);
    sub_24B2E3C08(v64, &qword_257967D80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v161 = 0;
    v17 = v180;
    goto LABEL_20;
  }
  v88 = v180[60];
  v89 = *(int *)(v180[28] + 48);
  v90 = v180[31] + v89;
  v91 = v180[27] + v89;
  ((void (*)(_QWORD))v168)(v180[31]);
  v168(v90, v91, v88);
  v92 = sub_24B30B6EC();
  v93 = *(_QWORD *)(v92 + 16);
  if (v93)
  {
    v94 = v180 + 14;
    v180[14] = MEMORY[0x24BEE4AF8];
    sub_24B2DB008(0, v93, 0);
    v95 = 0;
    v96 = v180[14];
    v97 = *(_QWORD *)(v96 + 16);
    do
    {
      v98 = *(_DWORD *)(v92 + 4 * v95 + 32);
      *v94 = v96;
      v99 = *(_QWORD *)(v96 + 24);
      if (v97 >= v99 >> 1)
      {
        sub_24B2DB008(v99 > 1, v97 + 1, 1);
        v96 = *v94;
      }
      ++v95;
      *(_QWORD *)(v96 + 16) = v97 + 1;
      *(_DWORD *)(v96 + 4 * v97++ + 32) = v98;
    }
    while (v93 != v95);
    v169 = v96;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v169 = MEMORY[0x24BEE4AF8];
  }
  v100 = sub_24B30B6EC();
  v101 = *(_QWORD *)(v100 + 16);
  v162 = (void (*)(uint64_t, uint64_t))v56;
  if (v101)
  {
    v102 = v180 + 15;
    v180[15] = MEMORY[0x24BEE4AF8];
    sub_24B2DC0F8(0, v101, 0);
    v103 = 0;
    v104 = v180[15];
    v105 = *(_QWORD *)(v104 + 16);
    do
    {
      v106 = *(_DWORD *)(v100 + 4 * v103 + 32);
      *v102 = v104;
      v107 = *(_QWORD *)(v104 + 24);
      if (v105 >= v107 >> 1)
      {
        sub_24B2DC0F8(v107 > 1, v105 + 1, 1);
        v104 = *v102;
      }
      ++v103;
      *(_QWORD *)(v104 + 16) = v105 + 1;
      *(_DWORD *)(v104 + 4 * v105++ + 32) = v106;
    }
    while (v101 != v103);
    v172 = v104;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v172 = MEMORY[0x24BEE4AF8];
  }
  v108 = (uint64_t (*)(uint64_t, uint64_t))v180[69];
  v109 = v180[56];
  v110 = v180[51];
  sub_24B30B6BC();
  v111 = sub_24B30B62C();
  result = v108(v109, v110);
  if (v111 < 0)
  {
    __break(1u);
  }
  else
  {
    v112 = v169;
    if (v111)
    {
      v113 = 0;
      v114 = v180[75];
      v163 = v180 + 19;
      v164 = v180 + 18;
      v115 = (_QWORD *)v180[73];
      v166 = v180 + 16;
      v179 = (_QWORD *)v180[72];
      v165 = v111;
      while (1)
      {
        v116 = v180[68];
        v117 = v113 * v116;
        if ((unsigned __int128)((uint64_t)v113 * (__int128)v116) >> 64 != (uint64_t)(v113 * v116) >> 63)
          break;
        v118 = (v113 + 1) * v116;
        if ((unsigned __int128)((uint64_t)(v113 + 1) * (__int128)v116) >> 64 != v118 >> 63)
          goto LABEL_95;
        if (v118 < (uint64_t)v117)
          goto LABEL_96;
        if ((v117 & 0x8000000000000000) != 0)
          goto LABEL_97;
        v119 = *(_QWORD *)(v112 + 16);
        if (v119 < v117 || (uint64_t)v119 < v118)
          goto LABEL_98;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v115 = sub_24B2D8410(v115);
        if (v113 >= v115[2])
          goto LABEL_99;
        v175 = v115;
        v121 = (uint64_t)&v115[v113 + 4];
        sub_24B2D6D50(v169, v169 + 32, v117, (2 * v118) | 1);
        swift_bridgeObjectRelease();
        v122 = *(_QWORD *)(v172 + 16);
        if (v122 < v117 || v122 < v118)
          goto LABEL_100;
        swift_bridgeObjectRetain();
        v167 = v113 + 1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v123 = v179;
        else
          v123 = sub_24B2D83FC(v179);
        if (v113 >= v123[2])
          goto LABEL_101;
        v179 = v123;
        v124 = (uint64_t)&v123[v113 + 4];
        sub_24B2D6EE4(v172, v172 + 32, v117, (2 * v118) | 1);
        swift_bridgeObjectRelease();
        if (v113 >= v115[2])
          goto LABEL_102;
        v125 = *(_QWORD *)v121;
        swift_bridgeObjectRetain_n();
        v126 = sub_24B2E30D0(v125);
        swift_bridgeObjectRelease();
        *v166 = v126;
        sub_24B2E2244(v166);
        if (v114)
          return swift_release();
        v127 = v180[68];
        swift_bridgeObjectRelease();
        if (v127 < 0)
          goto LABEL_103;
        v128 = v180[16];
        v129 = v180[68];
        if (*(_QWORD *)(v128 + 16) < v129)
          v129 = *(_QWORD *)(v128 + 16);
        v130 = sub_24B2E33A0(v128 + 32, 0, (2 * v129) | 1);
        swift_release();
        v131 = *(_QWORD *)(v130 + 16);
        if (v131)
        {
          v132 = v180 + 18;
          *v164 = MEMORY[0x24BEE4AF8];
          sub_24B2DB008(0, v131, 0);
          v133 = *v164;
          v134 = (unint64_t *)(v130 + 32);
          v135 = v175;
          while (v113 < v135[2])
          {
            v137 = *v134++;
            v136 = v137;
            if ((v137 & 0x8000000000000000) != 0)
              goto LABEL_89;
            if (v136 >= *(_QWORD *)(*(_QWORD *)v121 + 16))
              goto LABEL_90;
            v138 = *(_DWORD *)(*(_QWORD *)v121 + 4 * v136 + 32);
            *v132 = v133;
            v140 = *(_QWORD *)(v133 + 16);
            v139 = *(_QWORD *)(v133 + 24);
            if (v140 >= v139 >> 1)
            {
              sub_24B2DB008(v139 > 1, v140 + 1, 1);
              v132 = v180 + 18;
              v135 = v175;
              v133 = *v164;
            }
            *(_QWORD *)(v133 + 16) = v140 + 1;
            *(_DWORD *)(v133 + 4 * v140 + 32) = v138;
            if (!--v131)
            {
              v141 = MEMORY[0x24BEE4AF8];
              goto LABEL_69;
            }
          }
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        v141 = MEMORY[0x24BEE4AF8];
        v133 = MEMORY[0x24BEE4AF8];
LABEL_69:
        if (v113 >= v175[2])
          goto LABEL_104;
        *(_QWORD *)v121 = v133;
        swift_bridgeObjectRelease();
        v142 = *(_QWORD *)(v130 + 16);
        if (v142)
        {
          *v163 = v141;
          sub_24B2DC0F8(0, v142, 0);
          v143 = v180 + 19;
          v144 = 0;
          v145 = *v163;
          v146 = v179;
          while (v113 < v146[2])
          {
            v147 = *(_QWORD *)(v130 + 8 * v144 + 32);
            if ((v147 & 0x8000000000000000) != 0)
              goto LABEL_92;
            if (v147 >= *(_QWORD *)(*(_QWORD *)v124 + 16))
              goto LABEL_93;
            v148 = *(_DWORD *)(*(_QWORD *)v124 + 4 * v147 + 32);
            *v143 = v145;
            v150 = *(_QWORD *)(v145 + 16);
            v149 = *(_QWORD *)(v145 + 24);
            if (v150 >= v149 >> 1)
            {
              sub_24B2DC0F8(v149 > 1, v150 + 1, 1);
              v143 = v180 + 19;
              v146 = v179;
              v145 = *v163;
            }
            ++v144;
            *(_QWORD *)(v145 + 16) = v150 + 1;
            *(_DWORD *)(v145 + 4 * v150 + 32) = v148;
            if (v142 == v144)
            {
              swift_bridgeObjectRelease();
              goto LABEL_80;
            }
          }
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          break;
        }
        swift_bridgeObjectRelease();
        v145 = v141;
LABEL_80:
        if (v113 >= v179[2])
          goto LABEL_105;
        *(_QWORD *)v124 = v145;
        swift_bridgeObjectRelease();
        ++v113;
        v112 = v169;
        v115 = v175;
        if (v167 == v165)
          goto LABEL_85;
      }
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    v115 = (_QWORD *)v180[73];
    v179 = (_QWORD *)v180[72];
LABEL_85:
    v176 = v115;
    v170 = v180[71];
    v151 = (void (*)(uint64_t, uint64_t))v180[69];
    v152 = v180[65];
    v153 = v180[64];
    v154 = v180[60];
    v155 = v180[56];
    v156 = v180[51];
    v158 = v180[31];
    v157 = v180[32];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24B30B6BC();
    v159 = sub_24B30B62C();
    v151(v155, v156);
    sub_24B2E3C08(v158, &qword_257967D88);
    sub_24B2E3C08(v157, &qword_257967D88);
    v162(v153, v154);
    result = ((uint64_t (*)(uint64_t, uint64_t))v162)(v152, v154);
    if (!__OFADD__(v170, v159))
    {
      v180[73] = v176;
      v180[72] = v179;
      v180[71] = v170 + v159;
      swift_getAssociatedConformanceWitness();
      v160 = (_QWORD *)swift_task_alloc();
      v180[74] = v160;
      *v160 = v180;
      v160[1] = sub_24B2DFB6C;
      return sub_24B30BADC();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2E0CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v48;
  uint64_t v49;
  _QWORD *v50;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v5(v2, v1, v3);
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (qword_257967450 != -1)
      swift_once();
    v6 = sub_24B30B7A0();
    __swift_project_value_buffer(v6, (uint64_t)qword_25796F248);
    v7 = sub_24B30B788();
    v8 = sub_24B30BBA8();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_24B2C5000, v7, v8, "Task canceled at scoring.", v9, 2u);
      MEMORY[0x24BD1D2BC](v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 528);
    v12 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 488);
    v49 = *(_QWORD *)(v0 + 400);
    v14 = *(_QWORD *)(v0 + 352);
    v13 = *(_QWORD *)(v0 + 360);
    v15 = v7;
    v16 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 184);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v49, v14);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 360) + 16);
    v19(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
    if (qword_257967450 != -1)
      swift_once();
    v20 = *(_QWORD *)(v0 + 376);
    v21 = *(_QWORD *)(v0 + 384);
    v22 = *(_QWORD *)(v0 + 352);
    v23 = sub_24B30B7A0();
    __swift_project_value_buffer(v23, (uint64_t)qword_25796F248);
    v19(v20, v21, v22);
    v24 = sub_24B30B788();
    v25 = sub_24B30BBC0();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(_QWORD *)(v0 + 376);
    if (v26)
    {
      v48 = v25;
      v28 = *(_QWORD *)(v0 + 368);
      v29 = *(_QWORD *)(v0 + 352);
      v30 = (uint8_t *)swift_slowAlloc();
      v50 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v30 = 138412290;
      v19(v28, v27, v29);
      swift_getAssociatedConformanceWitness();
      v31 = sub_24B30BE30();
      v32 = *(_QWORD *)(v0 + 368);
      if (v31)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 352));
      }
      else
      {
        v36 = *(_QWORD *)(v0 + 352);
        swift_allocError();
        v5(v37, v32, v36);
      }
      v38 = *(_QWORD *)(v0 + 376);
      v40 = *(_QWORD *)(v0 + 352);
      v39 = *(_QWORD *)(v0 + 360);
      v41 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 96) = v41;
      sub_24B30BBD8();
      *v50 = v41;
      v35 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v35(v38, v40);
      _os_log_impl(&dword_24B2C5000, v24, v48, "Error: %@", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C8);
      swift_arrayDestroy();
      MEMORY[0x24BD1D2BC](v50, -1, -1);
      MEMORY[0x24BD1D2BC](v30, -1, -1);

    }
    else
    {
      v33 = *(_QWORD *)(v0 + 352);
      v34 = *(_QWORD *)(v0 + 360);

      v35 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v35(v27, v33);
    }
    v42 = *(_QWORD *)(v0 + 528);
    v44 = *(_QWORD *)(v0 + 480);
    v43 = *(_QWORD *)(v0 + 488);
    v45 = *(_QWORD *)(v0 + 400);
    v46 = *(_QWORD *)(v0 + 352);
    v35(*(_QWORD *)(v0 + 384), v46);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    v35(v45, v46);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_24B2E120C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t (*a6)(uint64_t *, char *, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  sub_24B2D5C30(a2 + qword_25796F240, (uint64_t)v13);
  swift_bridgeObjectRetain();
  v14 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v15 = sub_24B2E3C44(a5, a4);
  return a6(&v18, v13, v14, v15);
}

uint64_t sub_24B2E12F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;

  v10 = *a1;
  v11 = *a1 * a3;
  if ((unsigned __int128)(*a1 * (__int128)a3) >> 64 != v11 >> 63)
  {
    __break(1u);
    goto LABEL_24;
  }
  v12 = __OFADD__(v10, 1);
  v13 = v10 + 1;
  if (v12)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v6 = v13 * a3;
  if ((unsigned __int128)(v13 * (__int128)a3) >> 64 != (v13 * a3) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v8 = v6 - v11;
  if (v6 < v11)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v11 < 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRelease();
    v18 = sub_24B2DEA9C(v7, v7 + 32, v11, v24);
    goto LABEL_15;
  }
  v7 = a2;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14 < v11 || (uint64_t)v14 < v6)
    goto LABEL_28;
  v5 = a4;
  v24 = (2 * v6) | 1;
  sub_24B30BE54();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  v17 = *(_QWORD *)(v16 + 16);
  swift_release();
  if (v17 != v8)
    goto LABEL_29;
  v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v5 + 16);
  if (v19 < v11 || v19 < v6)
  {
    __break(1u);
LABEL_31:
    swift_bridgeObjectRelease();
    v22 = sub_24B2DE934(v5, v5 + 32, v11, v24);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
  v21 = *(_QWORD *)(v20 + 16);
  swift_release();
  if (v21 != v8)
    goto LABEL_31;
  v22 = swift_dynamicCastClass();
  if (!v22)
  {
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24BEE4AF8];
  }
LABEL_22:
  result = swift_bridgeObjectRelease();
  *a5 = v18;
  a5[1] = v22;
  return result;
}

uint64_t sub_24B2E14E0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void (*a3)(char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char *v55;
  void (*v56)(void);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(void);
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  char *v69;
  void (*v70)(void);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  BOOL v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void (*v98)(void);
  uint64_t v99;
  char *v100;
  void (*v101)(uint64_t, char *, uint64_t);
  char *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  void (*v118)(void);
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, uint64_t, uint64_t);
  uint64_t v131;
  __int128 v132;
  _QWORD v133[5];

  v125 = a4;
  v129 = a2;
  v130 = a3;
  *(_QWORD *)&v132 = a1;
  v128 = a5;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967960);
  MEMORY[0x24BDAC7A8](v5);
  v112 = (uint64_t)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967D78);
  MEMORY[0x24BDAC7A8](v7);
  v119 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E60);
  v9 = MEMORY[0x24BDAC7A8](v120);
  v116 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v121 = (char *)&v104 - v11;
  v12 = sub_24B30B614();
  v122 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v104 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967D90);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_24B30B734();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v113 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v123 = (char *)&v104 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v114 = (char *)&v104 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v124 = (char *)&v104 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v126 = (char *)&v104 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v104 - v33;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967D88);
  v127 = *(_QWORD *)(v35 - 8);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v115 = (char *)&v104 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v104 - v39;
  v131 = v38;
  v41 = (char *)&v104 + *(int *)(v38 + 48) - v39;
  v42 = *(void (**)(void))(v22 + 16);
  ((void (*)(char *, char *, uint64_t))v42)((char *)&v104 - v39, v129, v21);
  v129 = v41;
  ((void (*)(char *, _QWORD, uint64_t))v42)(v41, v130, v21);
  cosineSimilarityTensor(_:_:)(v132, (uint64_t)v40, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_24B2E3C08((uint64_t)v40, &qword_257967D88);
    sub_24B2E3C08((uint64_t)v20, &qword_257967D90);
    v43 = 1;
    v44 = v128;
    v45 = v131;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v44, v43, 1, v45);
  }
  v118 = v42;
  v117 = v40;
  v46 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v46(v34, v20, v21);
  sub_24B30B6BC();
  v47 = sub_24B30B62C();
  v48 = *(void (**)(char *, uint64_t))(v122 + 8);
  v48(v17, v12);
  v49 = v125;
  v122 = v47;
  if (v47 >= v125)
    v50 = v125;
  else
    v50 = v47;
  sub_24B30B6BC();
  v51 = sub_24B30B62C();
  v48(v15, v12);
  v52 = v50;
  v53 = v50 == v51;
  v54 = v12;
  v108 = v34;
  v106 = v15;
  v130 = (void (*)(char *, uint64_t, uint64_t))v46;
  v110 = v22;
  v105 = v48;
  v109 = v52;
  if (v53)
  {
    v55 = v126;
    v56 = v118;
    v118();
    sub_24B30B6BC();
    v57 = v124;
    sub_24B30B650();
    result = ((uint64_t (*)(char *, uint64_t))v48)(v15, v54);
    v58 = (uint64_t)v117;
  }
  else
  {
    v59 = v120;
    v60 = *(int *)(v120 + 48);
    v107 = v12;
    v61 = v121;
    v62 = &v121[v60];
    sub_24B30B6A4();
    v63 = (uint64_t)v116;
    v64 = &v116[*(int *)(v59 + 48)];
    v65 = v118;
    ((void (*)(char *, char *, uint64_t))v118)(v116, v61, v21);
    v104 = v62;
    ((void (*)(char *, char *, uint64_t))v65)(v64, v62, v21);
    v130(v126, v63, v21);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v64, v21);
    sub_24B30B6BC();
    v66 = sub_24B30B62C();
    result = ((uint64_t (*)(char *, uint64_t))v48)(v15, v107);
    if (v66 < 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v68 = (uint64_t)v115;
    v69 = &v115[*(int *)(v131 + 48)];
    v70 = v118;
    ((void (*)(char *, char *, uint64_t))v118)(v115, v117, v21);
    v71 = v69;
    v72 = (uint64_t)v121;
    v55 = v126;
    ((void (*)(char *, char *, uint64_t))v70)(v71, v129, v21);
    v73 = v63 + *(int *)(v120 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v70)(v63, v72, v21);
    v74 = ((uint64_t (*)(uint64_t, char *, uint64_t))v70)(v73, v104, v21);
    MEMORY[0x24BDAC7A8](v74);
    *(&v104 - 2) = (char *)v68;
    *(&v104 - 1) = (char *)v63;
    sub_24B2DF104((void (*)(uint64_t *))sub_24B2E3BEC, (uint64_t)(&v104 - 4), 0, v66);
    sub_24B2E3C08(v68, &qword_257967D88);
    sub_24B2E3C08(v63, &qword_257967E60);
    v75 = sub_24B30B5FC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v119, 1, 1, v75);
    v57 = v124;
    sub_24B30B71C();
    result = sub_24B2E3C08(v72, &qword_257967E60);
    v56 = v70;
    v58 = (uint64_t)v117;
    v49 = v125;
    v54 = v107;
  }
  v76 = v123;
  if (v122 >= v49)
  {
    (*(void (**)(char *, uint64_t))(v110 + 8))(v108, v21);
    sub_24B2E3C08(v58, &qword_257967D88);
    v44 = v128;
    v101 = (void (*)(uint64_t, char *, uint64_t))v130;
    v102 = v55;
LABEL_16:
    v45 = v131;
    v103 = v44 + *(int *)(v131 + 48);
    v101(v44, v102, v21);
    v101(v103, v57, v21);
    v43 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v44, v43, 1, v45);
  }
  v77 = __OFSUB__(v49, v109);
  v78 = (char *)(v49 - v109);
  if (v77)
    goto LABEL_19;
  v79 = v55;
  ((void (*)(char *, char *, uint64_t))v56)(v123, v55, v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967E68);
  v80 = swift_allocObject();
  v132 = xmmword_24B30D9B0;
  *(_OWORD *)(v80 + 16) = xmmword_24B30D9B0;
  *(_QWORD *)(v80 + 32) = 0;
  *(_QWORD *)(v80 + 40) = 0;
  *(_QWORD *)(v80 + 48) = 0;
  *(_QWORD *)(v80 + 56) = v78;
  v81 = v113;
  sub_24B30B668();
  v133[3] = MEMORY[0x24BEE14E8];
  v133[4] = MEMORY[0x24BE6C230];
  sub_24B30B6E0();
  v82 = *(void (**)(char *, uint64_t))(v110 + 8);
  v82(v81, v21);
  v83 = v114;
  sub_24B30B6D4();
  swift_bridgeObjectRelease();
  v84 = v76;
  v85 = v82;
  v82(v84, v21);
  v82(v79, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
  v130(v79, (uint64_t)v83, v21);
  v86 = v106;
  sub_24B30B6BC();
  v87 = sub_24B30B62C();
  v88 = v105;
  result = ((uint64_t (*)(char *, uint64_t))v105)(v86, v54);
  v129 = v78;
  if ((unsigned __int128)(v87 * (__int128)(uint64_t)v78) >> 64 == (v87 * (uint64_t)v78) >> 63)
  {
    v133[0] = sub_24B2D7BB0(0x80000000, v87 * (_QWORD)v78);
    sub_24B2D5C30(v111 + qword_25796F240, v112);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967518);
    sub_24B2E3C44(&qword_257967D98, &qword_257967518);
    v89 = v123;
    sub_24B30B740();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
    v90 = swift_allocObject();
    *(_OWORD *)(v90 + 16) = v132;
    v91 = v126;
    sub_24B30B6BC();
    v92 = sub_24B30B62C();
    v88(v86, v54);
    v93 = v129;
    *(_QWORD *)(v90 + 32) = v92;
    *(_QWORD *)(v90 + 40) = v93;
    sub_24B30B620();
    sub_24B30B704();
    v88(v86, v54);
    v85(v89, v21);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967E70);
    v94 = *(_QWORD *)(v110 + 72);
    v95 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
    v96 = swift_allocObject();
    *(_OWORD *)(v96 + 16) = v132;
    v97 = v96 + v95;
    v57 = v124;
    v98 = v118;
    ((void (*)(unint64_t, char *, uint64_t))v118)(v97, v124, v21);
    ((void (*)(unint64_t, char *, uint64_t))v98)(v97 + v94, v83, v21);
    v99 = sub_24B30B5FC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v119, 1, 1, v99);
    sub_24B30B674();
    v85(v83, v21);
    v85(v57, v21);
    v85(v108, v21);
    sub_24B2E3C08((uint64_t)v117, &qword_257967D88);
    v100 = v89;
    v101 = (void (*)(uint64_t, char *, uint64_t))v130;
    v130(v57, (uint64_t)v100, v21);
    v44 = v128;
    v102 = v91;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_24B2E1F84@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[2];

  v24[1] = a4;
  v7 = sub_24B30B734();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E60);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v24[0] = a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_257967D88) + 48);
  v15 = *(int *)(v11 + 48);
  v16 = &v13[v15];
  v17 = a3 + v15;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v13, a3, v7);
  v18(v16, v17, v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967E78);
  v19 = swift_allocObject();
  v20 = MEMORY[0x24BEE1768];
  *(_OWORD *)(v19 + 16) = xmmword_24B30E190;
  v21 = MEMORY[0x24BE6C248];
  *(_QWORD *)(v19 + 56) = v20;
  *(_QWORD *)(v19 + 64) = v21;
  *(_QWORD *)(v19 + 32) = v14;
  sub_24B30B74C();
  swift_bridgeObjectRelease();
  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v16, v7);
  sub_24B30B728();
  v22(v10, v7);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, v7);
}

uint64_t *TensorNNScorer.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_24B2E3C08((uint64_t)v0 + qword_25796F240, &qword_257967960);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));
  return v0;
}

uint64_t TensorNNScorer.__deallocating_deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_24B2E3C08((uint64_t)v0 + qword_25796F240, &qword_257967960);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));
  return swift_deallocClassInstance();
}

uint64_t sub_24B2E21DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_24B2DF100;
  return sub_24B2DF4E8(a1, a2, a3);
}

uint64_t sub_24B2E2244(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24B309218(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_24B2E2314(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24B2E22AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24B2E120C(a1, v2, a2, &qword_2579674D0, &qword_257967E80, MEMORY[0x24BE6C060]);
}

uint64_t sub_24B2E22E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24B2E120C(a1, v2, a2, &qword_257967518, &qword_257967D98, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))MEMORY[0x24BE6C068]);
}

uint64_t sub_24B2E2314(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(float *)(v89 + 8);
          if (*(float *)(v89 - 8) >= v90)
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_24B2E2A04((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_24B3080B0((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967E58);
    v8 = sub_24B30BA28();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(float *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v14);
        while (v17 < v15 != *(v18 - 4) >= *v18)
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v17 < v15)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (float *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = v29[2];
          if (*(v29 - 2) >= v31)
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *(_QWORD *)v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((_QWORD *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_24B307CB4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_24B307CB4((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_24B2E2A04((char *)(v11 + 16 * *(_QWORD *)v78), (char *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B2E2A04(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 16 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v25 = &v4[v19];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (char *)(a3 - 16);
        do
        {
          v22 = v21 + 16;
          if (*((float *)v6 - 2) >= *((float *)v20 - 2))
          {
            v25 = v20 - 16;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 16;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v27 = v6 - 16;
            if (v23 <= v7)
              break;
          }
          v21 -= 16;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      sub_24B307E54(&v27, &v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (*((float *)v16 + 2) >= *((float *)v6 + 2))
        {
          v4 = v16 + 16;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 16;
          }
        }
        else
        {
          v17 = v6 + 16;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 16;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2E2C8C(unint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  int *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const void *v26;
  BOOL v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;

  v3 = a1;
  v4 = HIDWORD(a1);
  result = sub_24B2E3028(a1, a2);
  v6 = result;
  v7 = a2 >> 63;
  if (result <= 0)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      v8 = (int *)MEMORY[0x24BEE4AF8];
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
      v11 = (int *)(MEMORY[0x24BEE4AF8] + 32);
      goto LABEL_22;
    }
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967520);
    v8 = (int *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v8);
    v9 = result - 32;
    if (result < 32)
      v9 = result - 29;
    v10 = v9 >> 2;
    *((_QWORD *)v8 + 2) = v6;
    *((_QWORD *)v8 + 3) = 2 * v10;
    v11 = v8 + 8;
    v12 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - v6;
    while (1)
    {
      v13 = v3 <= (int)v4;
      if (a2 > 0)
        v13 = v3 >= (int)v4;
      if (v13)
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (a2 < 0 != v3 >= 0)
      {
        if (a2 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_59;
        if (a2 > 0x7FFFFFFF)
          goto LABEL_60;
        LODWORD(v14) = v3 + a2;
        if (__OFADD__(v3, (_DWORD)a2))
          LODWORD(v14) = v7 ^ 0x7FFFFFFF;
        goto LABEL_5;
      }
      v14 = a2 + v3;
      if (__OFADD__(a2, v3))
        goto LABEL_61;
      if (v14 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_62;
      if (v14 > 0x7FFFFFFF)
        break;
LABEL_5:
      *v11++ = v3;
      v3 = v14;
      if (!--v6)
        goto LABEL_19;
    }
    __break(1u);
LABEL_19:
    v3 = v14;
LABEL_22:
    v15 = v3 <= (int)v4;
    if (a2 > 0)
      v15 = v3 >= (int)v4;
    if (!v15)
    {
      v32 = v7 ^ 0x7FFFFFFF;
      while (a2 < 0 != v3 >= 0)
      {
        if (a2 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_63;
        if (a2 > 0x7FFFFFFF)
          goto LABEL_64;
        LODWORD(v16) = v3 + a2;
        if (!__OFADD__(v3, (_DWORD)a2))
          goto LABEL_36;
        LODWORD(v16) = v32;
        if (!v12)
          goto LABEL_37;
        LODWORD(v16) = v32;
LABEL_49:
        v27 = __OFSUB__(v12--, 1);
        if (v27)
          goto LABEL_58;
        *v11++ = v3;
        v28 = (int)v16 <= (int)v4;
        if (a2 > 0)
          v28 = (int)v16 >= (int)v4;
        v3 = v16;
        if (v28)
          goto LABEL_53;
      }
      v16 = a2 + v3;
      if (__OFADD__(a2, v3))
        goto LABEL_65;
      if (v16 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_66;
      if (v16 > 0x7FFFFFFF)
        goto LABEL_67;
LABEL_36:
      if (!v12)
      {
LABEL_37:
        v17 = *((_QWORD *)v8 + 3);
        if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_68;
        v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
        if (v18 <= 1)
          v19 = 1;
        else
          v19 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&qword_257967520);
        v20 = (int *)swift_allocObject();
        v21 = _swift_stdlib_malloc_size(v20);
        v22 = v21 - 32;
        if (v21 < 32)
          v22 = v21 - 29;
        v23 = v22 >> 2;
        *((_QWORD *)v20 + 2) = v19;
        *((_QWORD *)v20 + 3) = 2 * (v22 >> 2);
        v24 = (unint64_t)(v20 + 8);
        v25 = *((_QWORD *)v8 + 3) >> 1;
        if (*((_QWORD *)v8 + 2))
        {
          v26 = v8 + 8;
          if (v20 != v8 || v24 >= (unint64_t)v26 + 4 * v25)
            memmove(v20 + 8, v26, 4 * v25);
          *((_QWORD *)v8 + 2) = 0;
        }
        v11 = (int *)(v24 + 4 * v25);
        v12 = (v23 & 0x7FFFFFFFFFFFFFFFLL) - v25;
        result = swift_release();
        v8 = v20;
        goto LABEL_49;
      }
      goto LABEL_49;
    }
LABEL_53:
    v29 = *((_QWORD *)v8 + 3);
    if (v29 >= 2)
    {
      v30 = v29 >> 1;
      v27 = __OFSUB__(v30, v12);
      v31 = v30 - v12;
      if (v27)
        goto LABEL_70;
      *((_QWORD *)v8 + 2) = v31;
    }
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_24B2E2F90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2[2])
    return 0;
  if (!v2 || (_QWORD *)result == a2)
    return 1;
  if (*(_QWORD *)(result + 32) != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  if (*(_QWORD *)(result + 40) != a2[5])
    return 0;
  if (v2 == 2)
    return 1;
  v3 = 3 - v2;
  v4 = (uint64_t *)(result + 48);
  v5 = a2 + 6;
  while (v3 != 1)
  {
    v7 = *v4++;
    v6 = v7;
    v8 = *v5++;
    result = v6 == v8;
    if (v6 != v8 || v3++ == 0)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2E3028(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  BOOL v6;

  result = 0;
  v4 = HIDWORD(a1);
  while (1)
  {
    v6 = (int)a1 <= (int)v4;
    if (a2 > 0)
      v6 = (int)a1 >= (int)v4;
    if (v6)
      return result;
    if (a2 < 0 != (int)a1 >= 0)
    {
      if (a2 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_18;
      if (a2 > 0x7FFFFFFF)
        goto LABEL_19;
      v5 = __OFADD__((_DWORD)a1, (_DWORD)a2);
      LODWORD(a1) = a1 + a2;
      if (v5)
        LODWORD(a1) = (a2 >> 63) ^ 0x7FFFFFFF;
    }
    else
    {
      v5 = __OFADD__(a2, (int)a1);
      a1 = a2 + (int)a1;
      if (v5)
        goto LABEL_20;
      if (a1 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_21;
      if (a1 > 0x7FFFFFFF)
      {
        __break(1u);
        return result;
      }
    }
    v5 = __OFADD__(result++, 1);
    if (v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
  }
}

uint64_t sub_24B2E30D0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = v2 + 4;
    while (1)
    {
      v7 = *(_DWORD *)(v3 + 4 * v5 + 32);
      if (!v4)
      {
        v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&qword_257967E50);
        v11 = (_QWORD *)swift_allocObject();
        v12 = _swift_stdlib_malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 17;
        v14 = v13 >> 4;
        v11[2] = v10;
        v11[3] = 2 * (v13 >> 4);
        v15 = (unint64_t)(v11 + 4);
        v16 = v2[3] >> 1;
        v17 = 16 * v16;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[v17 / 8 + 4])
            memmove(v11 + 4, v2 + 4, v17);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v15 + v17);
        v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        result = swift_release();
        v2 = v11;
      }
      v19 = __OFSUB__(v4--, 1);
      if (v19)
        break;
      *v6 = v5;
      *((_DWORD *)v6 + 2) = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v4 = 0;
LABEL_23:
  v20 = v2[3];
  if (v20 < 2)
    return (uint64_t)v2;
  v21 = v20 >> 1;
  v19 = __OFSUB__(v21, v4);
  v22 = v21 - v4;
  if (!v19)
  {
    v2[2] = v22;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_24B2E324C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = v5;
  v8 = MEMORY[0x24BEE4AF8];
  if (!v6)
    return v8;
  v11 = result;
  v22 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DC088(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = v22;
    if (a2 <= v11)
      v12 = v11;
    else
      v12 = a2;
    v13 = v11;
    while (a2 != v13)
    {
      v20 = v13;
      result = sub_24B2E12F0(&v20, a3, a4, a5, (uint64_t *)&v21);
      if (v7)
      {
        swift_release();
        return v8;
      }
      v7 = 0;
      v14 = v21;
      v22 = v8;
      v16 = *(_QWORD *)(v8 + 16);
      v15 = *(_QWORD *)(v8 + 24);
      if (v16 >= v15 >> 1)
      {
        v17 = v21;
        result = sub_24B2DC088(v15 > 1, v16 + 1, 1);
        v14 = v17;
        v8 = v22;
      }
      *(_QWORD *)(v8 + 16) = v16 + 1;
      *(_OWORD *)(v8 + 16 * v16 + 32) = v14;
      if (a2 < v11)
        goto LABEL_19;
      if (v12 == v13)
        goto LABEL_20;
      if (a2 == ++v13)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_24B2E33A0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_14;
  v4 = result;
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v13 = a3 >> 1;
    v14 = MEMORY[0x24BEE4AF8];
    result = sub_24B2DC0C0(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0)
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v6 = 0;
    result = v14;
    v7 = (uint64_t *)(v4 + 16 * a2);
    v8 = v13;
    while (1)
    {
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      if (a2 + v6 >= v8 || v6 >= v3)
        goto LABEL_13;
      v10 = *v7;
      v15 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        sub_24B2DC0C0(v11 > 1, v12 + 1, 1);
        v8 = v13;
        result = v15;
      }
      *(_QWORD *)(result + 16) = v12 + 1;
      *(_QWORD *)(result + 8 * v12 + 32) = v10;
      ++v6;
      v7 += 2;
      if (v9 == v3)
        return result;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_24B2E34C8(uint64_t a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *);
  void (*v54)(char *, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;

  LODWORD(v54) = a3;
  v55 = a2;
  v4 = sub_24B30B614();
  v57 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_24B30B734();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v58 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v60 = (char *)&v54 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967D88);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v54 - v17;
  v19 = (char *)&v54 + *(int *)(v16 + 48) - v17;
  v20 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v20((char *)&v54 - v17, a1, v7);
  v20(v19, (uint64_t)v55, v7);
  v21 = &v15[*(int *)(v12 + 48)];
  v20(v15, (uint64_t)v18, v7);
  v55 = v19;
  v20(v21, (uint64_t)v19, v7);
  v59 = v4;
  v56 = v6;
  if ((v54 & 1) != 0)
  {
    sub_24B30B6BC();
    v22 = (void (*)(char *, uint64_t))v8[1];
    v22(v15, v7);
    sub_24B30B608();
    v54 = *(void (**)(char *, uint64_t))(v57 + 8);
    v54(v6, v59);
    sub_24B30B6C8();
    swift_bridgeObjectRelease();
    v22(v21, v7);
    v23 = &v15[*(int *)(v12 + 48)];
    v20(v15, (uint64_t)v18, v7);
    v20(v23, (uint64_t)v55, v7);
    sub_24B30B6BC();
    v22(v23, v7);
    sub_24B30B608();
    v54(v6, v59);
    v24 = v58;
    sub_24B30B6C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = (void (*)(char *, char *, uint64_t))v8[4];
    v25(v60, v15, v7);
    v22 = (void (*)(char *, uint64_t))v8[1];
    v22(v21, v7);
    v26 = &v15[*(int *)(v12 + 48)];
    v20(v15, (uint64_t)v18, v7);
    v20(v26, (uint64_t)v55, v7);
    v24 = v58;
    v25(v58, v26, v7);
  }
  v54 = v22;
  v55 = (char *)v7;
  v22(v15, v7);
  v27 = sub_24B30B6EC();
  v28 = *(_QWORD *)(v27 + 16);
  v29 = MEMORY[0x24BEE4AF8];
  if (v28)
  {
    v30 = v24;
    v61 = MEMORY[0x24BEE4AF8];
    sub_24B2DB008(0, v28, 0);
    v31 = 0;
    v32 = v61;
    v33 = *(_QWORD *)(v61 + 16);
    v34 = v59;
    do
    {
      v35 = *(_DWORD *)(v27 + 4 * v31 + 32);
      v61 = v32;
      v36 = *(_QWORD *)(v32 + 24);
      if (v33 >= v36 >> 1)
      {
        sub_24B2DB008(v36 > 1, v33 + 1, 1);
        v32 = v61;
      }
      ++v31;
      *(_QWORD *)(v32 + 16) = v33 + 1;
      *(_DWORD *)(v32 + 4 * v33++ + 32) = v35;
    }
    while (v28 != v31);
    swift_bridgeObjectRelease();
    v24 = v30;
    v29 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x24BEE4AF8];
    v34 = v59;
  }
  v37 = sub_24B30B6EC();
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v61 = v29;
    sub_24B2DC0C0(0, v38, 0);
    v39 = 0;
    v40 = v61;
    v41 = *(_QWORD *)(v61 + 16);
    v42 = v56;
    do
    {
      v43 = *(int *)(v37 + 4 * v39 + 32);
      v61 = v40;
      v44 = *(_QWORD *)(v40 + 24);
      if (v41 >= v44 >> 1)
      {
        sub_24B2DC0C0(v44 > 1, v41 + 1, 1);
        v40 = v61;
      }
      ++v39;
      *(_QWORD *)(v40 + 16) = v41 + 1;
      *(_QWORD *)(v40 + 8 * v41++ + 32) = v43;
    }
    while (v38 != v39);
    swift_bridgeObjectRelease();
    v24 = v58;
    v34 = v59;
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = MEMORY[0x24BEE4AF8];
    v42 = v56;
  }
  v45 = v60;
  v46 = v42;
  sub_24B30B6BC();
  v47 = sub_24B30B62C();
  v48 = *(void (**)(char *, uint64_t))(v57 + 8);
  v48(v42, v34);
  sub_24B30B6BC();
  v49 = sub_24B30B62C();
  result = ((uint64_t (*)(char *, uint64_t))v48)(v46, v34);
  if (v49 < 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v51 = sub_24B2E324C(0, v49, v32, v47, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53 = (void (*)(char *, char *))v54;
    v52 = v55;
    v54(v24, (uint64_t)v55);
    v53(v45, v52);
    sub_24B2E3C08((uint64_t)v18, &qword_257967D88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v51;
  }
  return result;
}

unint64_t sub_24B2E3A7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257967DA0;
  if (!qword_257967DA0)
  {
    v1 = sub_24B30B614();
    result = MEMORY[0x24BD1D214](MEMORY[0x24BE6B910], v1);
    atomic_store(result, (unint64_t *)&qword_257967DA0);
  }
  return result;
}

void sub_24B2E3AC4()
{
  unint64_t v0;
  unint64_t v1;

  sub_24B2D6CFC();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for TensorNNScorer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TensorNNScorer);
}

uint64_t method lookup function for TensorNNScorer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TensorNNScorer.__allocating_init(_:on:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of TensorNNScorer.score(_:topK:skipFirst:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 120)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 120));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_24B2DF0B0;
  return v10(a1, a2, a3);
}

uint64_t sub_24B2E3BEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_24B2E1F84(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_24B2E3C08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24B2E3C44(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B2E3C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *rawValue;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  int64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::OpaquePointer v34;
  uint64_t v35;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = a1;
  v35 = MEMORY[0x24BEE4AF8];
  sub_24B2DC114(0, v3, 0);
  v4 = v35;
  v7 = sub_24B2E96FC(v5);
  v8 = 0;
  v9 = v5 + 64;
  v28 = v5 + 80;
  v29 = v3;
  v30 = v6;
  v31 = v5 + 64;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(v5 + 32))
  {
    v13 = (unint64_t)v7 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0)
      goto LABEL_24;
    if (*(_DWORD *)(v5 + 36) != v6)
      goto LABEL_25;
    v32 = v8;
    v14 = v5;
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7);
    v16 = *(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * v7);
    v34._rawValue = v16;
    swift_bridgeObjectRetain_n();
    sub_24B2E6A88(&v34);
    if (v2)
      goto LABEL_29;
    rawValue = v34._rawValue;
    v18 = joinMessages(_:)(v34);
    v33 = v16[2];
    swift_bridgeObjectRelease();
    v35 = v4;
    v20 = *(_QWORD *)(v4 + 16);
    v19 = *(_QWORD *)(v4 + 24);
    if (v20 >= v19 >> 1)
    {
      sub_24B2DC114(v19 > 1, v20 + 1, 1);
      v4 = v35;
    }
    *(_QWORD *)(v4 + 16) = v20 + 1;
    v21 = v4 + 40 * v20;
    *(_QWORD *)(v21 + 32) = v15;
    *(_QWORD *)(v21 + 40) = v33;
    *(_QWORD *)(v21 + 48) = rawValue;
    *(Swift::String *)(v21 + 56) = v18;
    v10 = 1 << *(_BYTE *)(v14 + 32);
    if (v7 >= v10)
      goto LABEL_26;
    v9 = v31;
    v22 = *(_QWORD *)(v31 + 8 * v13);
    if ((v22 & (1 << v7)) == 0)
      goto LABEL_27;
    v5 = v14;
    v6 = v30;
    if (*(_DWORD *)(v14 + 36) != v30)
      goto LABEL_28;
    v23 = v22 & (-2 << (v7 & 0x3F));
    if (v23)
    {
      v10 = __clz(__rbit64(v23)) | v7 & 0xFFFFFFFFFFFFFFC0;
      v11 = v32;
      v2 = 0;
      v12 = v29;
    }
    else
    {
      v24 = v13 + 1;
      v25 = (unint64_t)(v10 + 63) >> 6;
      v11 = v32;
      v2 = 0;
      v12 = v29;
      if (v13 + 1 < v25)
      {
        v26 = *(_QWORD *)(v31 + 8 * v24);
        if (v26)
        {
LABEL_21:
          v10 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v13)
          {
            v26 = *(_QWORD *)(v28 + 8 * v13++);
            if (v26)
            {
              v24 = v13 + 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
    v8 = v11 + 1;
    v7 = v10;
    if (v8 == v12)
      return v4;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t MessageExtractor.init(lastDays:maxMessages:maxLength:lastMessageDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t result;
  _QWORD v15[6];

  v10 = (int *)type metadata accessor for MessageExtractor();
  *(_QWORD *)((char *)a5 + v10[11]) = 0;
  *(_QWORD *)((char *)a5 + v10[12]) = MEMORY[0x24BEE4AF8];
  *a5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE2E3B8]), sel_init);
  v11 = objc_allocWithZone(MEMORY[0x24BE2E3B0]);
  v15[4] = sub_24B2E6B08;
  v15[5] = 0;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = sub_24B2E6B0C;
  v15[3] = &block_descriptor;
  v12 = _Block_copy(v15);
  v13 = objc_msgSend(v11, sel_initWithBuilder_, v12);
  _Block_release(v12);
  swift_release();
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    a5[1] = v13;
    a5[2] = 49;
    a5[3] = a2;
    *(_QWORD *)((char *)a5 + v10[10]) = a3;
    a5[4] = a1;
    return sub_24B2E6B60(a4, (uint64_t)a5 + v10[9]);
  }
  return result;
}

uint64_t type metadata accessor for MessageExtractor()
{
  uint64_t result;

  result = qword_257967F50;
  if (!qword_257967F50)
    return swift_getSingletonMetadata();
  return result;
}

void sub_24B2E4090(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;

  objc_msgSend(a1, sel_setRequestedRepresentation_, *MEMORY[0x24BE2E378]);
  objc_msgSend(a1, sel_setNetworkUsage_, 1);
  objc_msgSend(a1, sel_setRequestAllHeaders_, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257968010);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_24B30E190;
  v3 = (void *)*MEMORY[0x24BE2E420];
  *(_QWORD *)(v2 + 32) = *MEMORY[0x24BE2E420];
  type metadata accessor for ECMessageHeaderKey(0);
  v4 = v3;
  v5 = (id)sub_24B30B9D4();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setRequestedHeaderKeys_, v5);

}

uint64_t MessageExtractor.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24B2E7CEC(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for MessageExtractor);
}

uint64_t MessageExtractor.isDataAccessible()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[18] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E98);
  v1[19] = v2;
  v1[20] = *(_QWORD *)(v2 - 8);
  v1[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2E41FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = objc_msgSend(**(id **)(v0 + 144), sel_messageRepository);
  *(_QWORD *)(v0 + 176) = v4;
  *(_QWORD *)(v0 + 56) = v0 + 184;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_24B2E432C;
  swift_continuation_init();
  *(_QWORD *)(v0 + 136) = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 112));
  sub_24B30BAAC();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(boxed_opaque_existential_0, v1, v3);
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v6 = (_QWORD *)(v0 + 80);
  v6[1] = 1107296256;
  v6[2] = sub_24B2E43B8;
  v6[3] = &block_descriptor_3;
  objc_msgSend(v4, sel_isDataAccessible_, v6);
  return swift_continuation_await();
}

uint64_t sub_24B2E432C()
{
  return swift_task_switch();
}

uint64_t sub_24B2E4378()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 184);

  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_24B2E43B8(uint64_t a1)
{
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967E98);
  return sub_24B30BAC4();
}

uint64_t sub_24B2E440C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[19] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967FD0);
  v1[20] = v2;
  v1[21] = *(_QWORD *)(v2 - 8);
  v1[22] = swift_task_alloc();
  v3 = sub_24B30B5D8();
  v1[23] = v3;
  v1[24] = *(_QWORD *)(v3 - 8);
  v1[25] = swift_task_alloc();
  v4 = sub_24B30B5E4();
  v1[26] = v4;
  v1[27] = *(_QWORD *)(v4 - 8);
  v1[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v5 = sub_24B30B5B4();
  v1[31] = v5;
  v1[32] = *(_QWORD *)(v5 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2E4550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t ObjCClassFromMetadata;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = objc_msgSend((id)objc_opt_self(), sel_currentCalendar);
  sub_24B30B5C0();

  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x24BDCF220], v3);
  if (__OFSUB__(0, *(_QWORD *)(v4 + 32)))
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 224);
    v12 = *(_QWORD *)(v0 + 200);
    v51 = *(_QWORD *)(v0 + 216);
    v52 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 192);
    sub_24B30B5A8();
    sub_24B30B5CC();
    v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    *(_QWORD *)(v0 + 304) = v15;
    v15(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v11, v52);
    v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v16(v10, 1, v8) == 1)
    {
      sub_24B2E3C08(*(_QWORD *)(v0 + 240), &qword_257967E88);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
    }
    else
    {
      v17 = v15;
      v18 = *(_QWORD *)(v0 + 296);
      v19 = *(_QWORD *)(v0 + 280);
      v20 = *(_QWORD *)(v0 + 248);
      v21 = *(_QWORD *)(v0 + 256);
      v22 = *(_QWORD *)(v0 + 232);
      v23 = *(_QWORD *)(v0 + 152);
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
      v24(v18, *(_QWORD *)(v0 + 240), v20);
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
      v25(v19, v18, v20);
      v26 = type metadata accessor for MessageExtractor();
      sub_24B2E9880(v23 + *(int *)(v26 + 36), v22);
      if (v16(v22, 1, v20) == 1)
      {
        sub_24B2E3C08(*(_QWORD *)(v0 + 232), &qword_257967E88);
      }
      else
      {
        v27 = *(_QWORD *)(v0 + 296);
        v29 = *(_QWORD *)(v0 + 272);
        v28 = *(_QWORD *)(v0 + 280);
        v30 = *(_QWORD *)(v0 + 264);
        v31 = *(_QWORD *)(v0 + 248);
        v24(v29, *(_QWORD *)(v0 + 232), v31);
        sub_24B2C8020(&qword_257967FF8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        if ((sub_24B30B890() & 1) != 0)
          v32 = v29;
        else
          v32 = v27;
        v25(v30, v32, v31);
        v17(v29, v31);
        v17(v28, v31);
        v24(v28, v30, v31);
      }
      v33 = *(_QWORD *)(v0 + 176);
      v53 = *(_QWORD *)(v0 + 168);
      v34 = *(_QWORD *)(v0 + 152);
      v35 = *(_QWORD *)(v0 + 160);
      v36 = (void *)objc_opt_self();
      v37 = (void *)sub_24B30B584();
      v38 = objc_msgSend(v36, sel_predicateForMessagesNewerThanDate_, v37);
      *(_QWORD *)(v0 + 312) = v38;

      v39 = objc_msgSend(v36, sel_sortDescriptorForDateAscending_, 0);
      *(_QWORD *)(v0 + 320) = v39;
      sub_24B2E98D0(0, &qword_257967FD8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967FE0);
      v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_24B30E1E0;
      *(_QWORD *)(v40 + 32) = v39;
      sub_24B30B9F8();
      v41 = objc_allocWithZone(MEMORY[0x24BE2E3E0]);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      sub_24B2E98D0(0, &qword_257967FE8);
      v43 = v38;
      v44 = v39;
      v45 = (void *)sub_24B30B9D4();
      swift_bridgeObjectRelease();
      v46 = objc_msgSend(v41, sel_initWithTargetClass_predicate_sortDescriptors_, ObjCClassFromMetadata, v43, v45);
      *(_QWORD *)(v0 + 328) = v46;

      v47 = objc_msgSend(*(id *)v34, sel_messageRepository);
      *(_QWORD *)(v0 + 336) = v47;
      v48 = *(_QWORD *)(v34 + 24);
      *(_QWORD *)(v0 + 56) = v0 + 144;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_24B2E4AA4;
      swift_continuation_init();
      *(_QWORD *)(v0 + 136) = v35;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 112));
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967FF0);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257967A40);
      sub_24B30BAAC();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 32))(boxed_opaque_existential_0, v33, v35);
      *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
      v50 = (_QWORD *)(v0 + 80);
      v50[1] = 1107296256;
      v50[2] = sub_24B2E4D08;
      v50[3] = &block_descriptor_14;
      objc_msgSend(v47, sel_performQuery_limit_completionHandler_, v46, v48, v50);
      return swift_continuation_await();
    }
  }
  return result;
}

uint64_t sub_24B2E4AA4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 344) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_24B2E4B04()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(void **)(v0 + 336);
  v3 = *(void **)(v0 + 312);
  v2 = *(void **)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  v6 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 248);

  v5(v6, v7);
  v5(v4, v7);
  v9 = *(_QWORD *)(v0 + 144);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t sub_24B2E4BFC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void (*v4)(uint64_t, uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;

  v1 = *(void **)(v0 + 344);
  v10 = *(void **)(v0 + 336);
  v3 = *(void **)(v0 + 320);
  v2 = *(void **)(v0 + 328);
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  v5 = *(void **)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 248);
  swift_willThrow();

  v4(v7, v8);
  v4(v6, v8);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_24B2E4D08(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  if (a3)
  {
    v4 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967FD0);
    sub_24B30BAB8();

  }
  else
  {
    sub_24B2E98D0(0, &qword_257968000);
    sub_24B30B9E0();
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967FD0);
    sub_24B30BAC4();
  }
}

uint64_t MessageExtractor.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_24B2E4DD8()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24B30BB00();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_24B2E4E50;
  return MessageExtractor.isDataAccessible()();
}

uint64_t sub_24B2E4E50(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 132) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24B2E4EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(v0 + 132) != 1)
    goto LABEL_12;
  v1 = *(_QWORD *)(v0 + 64);
  result = type metadata accessor for MessageExtractor();
  *(_QWORD *)(v0 + 80) = result;
  v3 = *(int *)(result + 44);
  *(_DWORD *)(v0 + 128) = v3;
  v4 = *(_QWORD *)(v1 + v3);
  if (!v4)
  {
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v11;
    *v11 = v0;
    v11[1] = sub_24B2E5094;
    return sub_24B2E440C();
  }
  v5 = *(_QWORD *)(v1 + *(int *)(result + 48));
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = sub_24B30BCE0();
    result = swift_bridgeObjectRelease();
    if (v4 < v12)
      goto LABEL_5;
LABEL_12:
    v13 = *(_QWORD *)(v0 + 56);
    v14 = type metadata accessor for ExtractedMessage();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (v4 >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_12;
LABEL_5:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x24BD1CB90](v4, v5);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v4 < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(v5 + 8 * v4 + 32);
LABEL_9:
    v7 = v6;
    *(_QWORD *)(v0 + 104) = v6;
    v8 = *(_QWORD *)(v0 + 64);
    v9 = swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v9;
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967EA8);
    *v10 = v0;
    v10[1] = sub_24B2E53F4;
    return sub_24B30BE24();
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2E5094(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_24B2E50F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  unint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 96);
  if (!v1)
    goto LABEL_17;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(int *)(*(_QWORD *)(v0 + 80) + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v3) = v1;
  if (qword_257967450 != -1)
    swift_once();
  v4 = sub_24B30B7A0();
  __swift_project_value_buffer(v4, (uint64_t)qword_25796F248);
  swift_bridgeObjectRetain();
  v5 = sub_24B30B788();
  v6 = sub_24B30BBA8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 96);
    v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v8 = 134217984;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = sub_24B30BCE0();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 48) = v9;
    sub_24B30BBD8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24B2C5000, v5, v6, "Queried %ld messages.", v8, 0xCu);
    MEMORY[0x24BD1D2BC](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v10 + *(int *)(v0 + 128));
  v12 = *(_QWORD *)(v10 + *(int *)(*(_QWORD *)(v0 + 80) + 48));
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = sub_24B30BCE0();
    swift_bridgeObjectRelease();
    if (v11 < v18)
      goto LABEL_11;
LABEL_17:
    v19 = *(_QWORD *)(v0 + 56);
    v20 = type metadata accessor for ExtractedMessage();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_17;
LABEL_11:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v13 = (id)MEMORY[0x24BD1CB90](v11, v12);
    goto LABEL_15;
  }
  if (v11 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v11 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(v12 + 8 * v11 + 32);
LABEL_15:
    v14 = v13;
    *(_QWORD *)(v0 + 104) = v13;
    v15 = *(_QWORD *)(v0 + 64);
    v16 = swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v16;
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v15;
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967EA8);
    *v17 = v0;
    v17[1] = sub_24B2E53F4;
    sub_24B30BE24();
    return;
  }
  __break(1u);
}

uint64_t sub_24B2E53F4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24B2E5450()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;
  id v12;
  void *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  int *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (*(_QWORD *)(v0 + 24))
  {
    v43 = *(_QWORD *)(v0 + 40);
    v44 = *(_QWORD *)(v0 + 32);
    v1 = 0xE90000000000003ELL;
    v2 = 0x6E776F6E6B6E753CLL;
    v3 = objc_msgSend(*(id *)(v0 + 104), sel_senderAddress);
    if (v3)
    {
      v4 = objc_msgSend(v3, sel_stringValue);
      swift_unknownObjectRelease();
      v41 = sub_24B30B8D8();
      v6 = v5;

    }
    else
    {
      v41 = 0x6E776F6E6B6E753CLL;
      v6 = 0xE90000000000003ELL;
    }
    v12 = objc_msgSend(*(id *)(v0 + 104), sel_subject, v41);
    if (v12)
    {
      v13 = v12;
      v14 = objc_msgSend(v12, sel_subjectString);

      v2 = sub_24B30B8D8();
      v1 = v15;

    }
    v16 = *(int *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 64);
    v19 = (void *)objc_opt_self();
    v20 = (void *)sub_24B30B8B4();
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v19, sel_snippetFromHTMLBody_options_maxLength_preservingQuotedForwardedContent_, v20, *(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + *(int *)(v17 + 40)), 0);

    v22 = sub_24B30B8D8();
    v24 = v23;

    v25 = *(_QWORD *)(v18 + v16);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v28 = *(void **)(v0 + 104);
      v29 = *(_QWORD *)(v0 + 56);
      *(_QWORD *)(*(_QWORD *)(v0 + 64) + *(int *)(v0 + 128)) = v27;
      v30 = objc_msgSend(v28, sel_date);
      sub_24B30B59C();

      v31 = objc_msgSend(v28, sel_conversationID);
      v32 = (int *)type metadata accessor for ExtractedMessage();
      v33 = (_QWORD *)(v29 + v32[5]);
      *v33 = v42;
      v33[1] = v6;
      v34 = (_QWORD *)(v29 + v32[6]);
      *v34 = 25965;
      v34[1] = 0xE200000000000000;
      v35 = (uint64_t *)(v29 + v32[7]);
      *v35 = v2;
      v35[1] = v1;
      v36 = (uint64_t *)(v29 + v32[8]);
      *v36 = v22;
      v36[1] = v24;
      *(_QWORD *)(v29 + v32[9]) = v31;
      v37 = (_QWORD *)(v29 + v32[10]);
      *v37 = v44;
      v37[1] = v43;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v32 - 1) + 56))(v29, 0, 1, v32);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    __break(1u);
    goto LABEL_16;
  }
  if (qword_257967450 != -1)
LABEL_16:
    swift_once();
  v7 = sub_24B30B7A0();
  __swift_project_value_buffer(v7, (uint64_t)qword_25796F248);
  v8 = sub_24B30B788();
  v9 = sub_24B30BBC0();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_24B2C5000, v8, v9, "Failed to extract message content. Terminated extraction loop.", v10, 2u);
    MEMORY[0x24BD1D2BC](v10, -1, -1);
    v11 = *(NSObject **)(v0 + 104);
  }
  else
  {
    v11 = v8;
    v8 = *(NSObject **)(v0 + 104);
  }
  v38 = *(_QWORD *)(v0 + 56);

  v39 = type metadata accessor for ExtractedMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_24B2E57CC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968008);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = *(void **)(a3 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_24B2E996C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24B2E5C14;
  aBlock[3] = &block_descriptor_17;
  v12 = _Block_copy(aBlock);
  v13 = v9;
  swift_release();
  v14 = objc_msgSend(a2, sel_requestRepresentationWithOptions_completionHandler_, v13, v12);
  _Block_release(v12);

}

void sub_24B2E5928(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  id v14;
  void *v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  __int128 v26;
  __int128 v27;

  v2 = sub_24B30B8F0();
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_24B30B530();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v25[-v11];
  if (!a1)
  {
    v26 = 0u;
    v27 = 0u;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968008);
    sub_24B30BAC4();
    return;
  }
  v13 = a1;
  v14 = objc_msgSend(v13, sel_contentURL);
  if (v14)
  {
    v15 = v14;
    sub_24B30B518();

    v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
    v16(v5, v10, v6);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v16(v12, v5, v6);
      sub_24B30B8E4();
      v17 = sub_24B30B8A8();
      v19 = v18;
      v20 = objc_msgSend(v13, sel_requestedHeaders);
      v21 = v20;
      if (v20)
      {
        v22 = objc_msgSend(v20, sel_firstHeaderForKey_, *MEMORY[0x24BE2E420]);

        if (v22)
        {
          v21 = (void *)sub_24B30B8D8();
          v24 = v23;

LABEL_14:
          *(_QWORD *)&v26 = v17;
          *((_QWORD *)&v26 + 1) = v19;
          *(_QWORD *)&v27 = v21;
          *((_QWORD *)&v27 + 1) = v24;
          __swift_instantiateConcreteTypeFromMangledName(&qword_257968008);
          sub_24B30BAC4();

          (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
          return;
        }
        v21 = 0;
      }
      v24 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  sub_24B2E3C08((uint64_t)v5, &qword_2579675C0);
  v26 = 0u;
  v27 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257968008);
  sub_24B30BAC4();

}

void sub_24B2E5C14(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_24B2E5C88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24B2E9384(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for MessageExtractor);
}

uint64_t sub_24B2E5CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24B2CCBE0;
  v4[7] = a1;
  v4[8] = v1;
  return swift_task_switch();
}

uint64_t sub_24B2E5D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v5[4] = a3;
  v5[5] = a4;
  v5[3] = a2;
  v7 = (_QWORD *)swift_task_alloc();
  v5[6] = v7;
  *v7 = v5;
  v7[1] = sub_24B2E5D74;
  v7[7] = a1;
  v7[8] = v4;
  return swift_task_switch();
}

uint64_t sub_24B2E5D74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (*(_QWORD *)(v2 + 24))
  {
    swift_getObjectType();
    sub_24B30BAA0();
  }
  return swift_task_switch();
}

uint64_t sub_24B2E5E0C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD **)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967A40);
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::String __swiftcall joinMessages(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  Swift::String result;
  void *rawValue;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v2 = type metadata accessor for ExtractedMessage();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&rawValue - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = (_QWORD *)sub_24B2E6274(MEMORY[0x24BEE4AF8]);
  v8 = *((_QWORD *)a1._rawValue + 2);
  if (!v8)
  {
LABEL_29:
    v51 = (uint64_t)v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967EB8);
    sub_24B2E8A60(&qword_257967EC0, &qword_257967EB8, MEMORY[0x24BEE12B0]);
    v39 = sub_24B30B884();
    v41 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42 = v39;
    v43 = v41;
    goto LABEL_33;
  }
  v9 = (char *)a1._rawValue
     + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v10 = *(_QWORD *)(v3 + 72);
  rawValue = a1._rawValue;
  v46 = v10;
  swift_bridgeObjectRetain();
  v47 = v5;
  v48 = v2;
  while (1)
  {
    v49 = v6;
    sub_24B2E7CEC((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
    v11 = &v5[*(int *)(v2 + 20)];
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v14 = v12 & 0xFFFFFFFFFFFFLL;
    if (v14)
    {
      v15 = sub_24B30B908();
      v17 = v16;
      if (!v7[2])
        goto LABEL_10;
    }
    else
    {
      v17 = 0xE700000000000000;
      v15 = 0x6E776F6E6B6E75;
      if (!v7[2])
      {
LABEL_10:
        v20 = 0;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRetain();
    v18 = sub_24B2E7C88(v15, v17);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(v7[7] + 8 * v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v20 = v7[2];
    }
LABEL_12:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51 = (uint64_t)v7;
    v23 = sub_24B2E7C88(v15, v17);
    v24 = v7[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (v7[3] >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v7 = (_QWORD *)v51;
        if ((v22 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        sub_24B2E8870();
        v7 = (_QWORD *)v51;
        if ((v27 & 1) != 0)
          goto LABEL_19;
      }
    }
    else
    {
      sub_24B2E7DD4(v26, isUniquelyReferenced_nonNull_native);
      v28 = sub_24B2E7C88(v15, v17);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_32;
      v23 = v28;
      v7 = (_QWORD *)v51;
      if ((v27 & 1) != 0)
      {
LABEL_19:
        *(_QWORD *)(v7[7] + 8 * v23) = v20;
        goto LABEL_23;
      }
    }
    v7[(v23 >> 6) + 8] |= 1 << v23;
    v30 = (uint64_t *)(v7[6] + 16 * v23);
    *v30 = v15;
    v30[1] = v17;
    *(_QWORD *)(v7[7] + 8 * v23) = v20;
    v31 = v7[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_31;
    v7[2] = v33;
    swift_bridgeObjectRetain();
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = v20;
    v51 = 0x207265646E6553;
    v52 = 0xE700000000000000;
    sub_24B30BE18();
    sub_24B30B92C();
    swift_bridgeObjectRelease();
    sub_24B30B92C();
    v5 = v47;
    v2 = v48;
    swift_bridgeObjectRetain();
    sub_24B30B92C();
    swift_bridgeObjectRelease();
    v34 = v51;
    v35 = v52;
    v6 = v49;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_24B2C85B4(0, v6[2] + 1, 1, v6);
    v37 = v6[2];
    v36 = v6[3];
    if (v37 >= v36 >> 1)
      v6 = sub_24B2C85B4((_QWORD *)(v36 > 1), v37 + 1, 1, v6);
    v6[2] = v37 + 1;
    v38 = &v6[2 * v37];
    v38[4] = v34;
    v38[5] = v35;
    sub_24B2CEB44((uint64_t)v5);
    v9 += v46;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  v42 = sub_24B30BE78();
  __break(1u);
LABEL_33:
  result._object = v43;
  result._countAndFlagsBits = v42;
  return result;
}

unint64_t sub_24B2E6274(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967FC8);
  v2 = (_QWORD *)sub_24B30BD04();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_24B2E7C88(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t groupAndSortMessages(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *@<X8>);
  _QWORD *v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  char isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *@<X8>);
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v2 = type metadata accessor for ExtractedMessage();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v47 = (uint64_t)&v43 - v8;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = *(int *)(v6 + 36);
    v45 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v46 = v10;
    v11 = a1 + v45;
    v12 = *(_QWORD *)(v7 + 72);
    v43 = a1;
    v44 = v12;
    swift_bridgeObjectRetain();
    v13 = 0;
    v14 = (_QWORD *)MEMORY[0x24BEE4B00];
    v15 = type metadata accessor for ExtractedMessage;
    while (1)
    {
      v16 = v47;
      sub_24B2E7CEC(v11, v47, (uint64_t (*)(_QWORD))v15);
      v17 = *(_QWORD *)(v16 + v46);
      v18 = (uint64_t)v5;
      v19 = v15;
      sub_24B2E9384(v16, (uint64_t)v5, (uint64_t (*)(_QWORD))v15);
      sub_24B2D73D0((uint64_t)v13);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v48 = v14;
      v22 = sub_24B2E7D30(v17);
      v23 = v14[2];
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
        break;
      v26 = v21;
      if (v14[3] >= v25)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_24B2E93D4(&qword_257967FC0);
          v14 = v48;
        }
      }
      else
      {
        sub_24B2E80E8(v25, isUniquelyReferenced_nonNull_native, &qword_257967FC0);
        v14 = v48;
        v27 = sub_24B2E7D30(v17);
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_26;
        v22 = v27;
      }
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v14[(v22 >> 6) + 8] |= 1 << v22;
        *(_QWORD *)(v14[6] + 8 * v22) = v17;
        *(_QWORD *)(v14[7] + 8 * v22) = MEMORY[0x24BEE4AF8];
        v29 = v14[2];
        v30 = v29 + 1;
        v31 = __OFADD__(v29, 1);
        swift_bridgeObjectRetain();
        if (v31)
          goto LABEL_25;
        v14[2] = v30;
      }
      v32 = v14[7];
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(v32 + 8 * v22);
      v34 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v32 + 8 * v22) = v33;
      if ((v34 & 1) == 0)
      {
        v33 = sub_24B2C86C0(0, *(_QWORD *)(v33 + 16) + 1, 1, v33);
        *(_QWORD *)(v32 + 8 * v22) = v33;
      }
      v36 = *(_QWORD *)(v33 + 16);
      v35 = *(_QWORD *)(v33 + 24);
      if (v36 >= v35 >> 1)
      {
        v33 = sub_24B2C86C0(v35 > 1, v36 + 1, 1, v33);
        *(_QWORD *)(v32 + 8 * v22) = v33;
      }
      *(_QWORD *)(v33 + 16) = v36 + 1;
      v37 = v44;
      v38 = v33 + v45 + v36 * v44;
      v5 = (char *)v18;
      v15 = v19;
      sub_24B2E9384(v18, v38, (uint64_t (*)(_QWORD))v19);
      v11 += v37;
      v13 = sub_24B2E66C0;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        v39 = sub_24B2E66C0;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    result = sub_24B30BE78();
    __break(1u);
  }
  else
  {
    v39 = 0;
LABEL_23:
    v40 = swift_bridgeObjectRetain();
    v41 = sub_24B2E3C84(v40);
    swift_bridgeObjectRelease_n();
    sub_24B2D73D0((uint64_t)v39);
    return v41;
  }
  return result;
}

void sub_24B2E66C0(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t filterBySender(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  _QWORD v7[4];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967EC8);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24B30B764();
  type metadata accessor for ExtractedMessage();
  v7[1] = sub_24B30B908();
  v7[2] = v4;
  sub_24B2E8A1C();
  sub_24B2E8A60(&qword_257967ED8, &qword_257967EC8, MEMORY[0x24BEE7460]);
  v5 = sub_24B30B878();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5 & 1;
}

_QWORD *convertSingleMessagesToConversations(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD v20[2];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = type metadata accessor for ExtractedMessage();
  MEMORY[0x24BDAC7A8](v26);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = *(unsigned __int8 *)(v2 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = a1 + v7;
  v24 = *(_QWORD *)(v2 + 72);
  v25 = v7;
  v22 = v6 | 7;
  v23 = v24 + v7;
  v20[1] = a1;
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v21 = xmmword_24B30E190;
  do
  {
    sub_24B2E7CEC(v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
    v10 = v26;
    v11 = *(_QWORD *)&v4[*(int *)(v26 + 36)];
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967500);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = v21;
    sub_24B2E7CEC((uint64_t)v4, v12 + v25, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
    v13 = &v4[*(int *)(v10 + 32)];
    v15 = *(_QWORD *)v13;
    v14 = *((_QWORD *)v13 + 1);
    swift_bridgeObjectRetain();
    sub_24B2CEB44((uint64_t)v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_24B2C88C8(0, v9[2] + 1, 1, v9);
    v17 = v9[2];
    v16 = v9[3];
    if (v17 >= v16 >> 1)
      v9 = sub_24B2C88C8((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
    v9[2] = v17 + 1;
    v18 = &v9[5 * v17];
    v18[4] = v11;
    v18[5] = 1;
    v18[6] = v12;
    v18[7] = v15;
    v18[8] = v14;
    v8 += v24;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_24B2E6A88(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for ExtractedMessage() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_24B309244(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_24B2E6BFC(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_24B2E6B0C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_24B2E6B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  return sub_24B2DC184(a2 + 32, a1 + 32);
}

void sub_24B2E6BF4(uint64_t a1)
{
  uint64_t v1;

  sub_24B2E57CC(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_24B2E6BFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;

  v2 = v1;
  v4 = type metadata accessor for ExtractedMessage();
  v129 = *(_QWORD *)(v4 - 8);
  v130 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v126 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v136 = (uint64_t)&v121 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v133 = (uint64_t)&v121 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v132 = (uint64_t)&v121 - v11;
  v12 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_140;
    if (v12)
      return sub_24B2E75CC(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_148;
  v123 = result;
  if (v12 < 2)
  {
    v18 = (char *)MEMORY[0x24BEE4AF8];
    v128 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    v122 = MEMORY[0x24BEE4AF8];
    if (v12 != 1)
    {
      v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_106:
      if (v20 >= 2)
      {
        v114 = *a1;
        do
        {
          v115 = v20 - 2;
          if (v20 < 2)
            goto LABEL_135;
          if (!v114)
            goto LABEL_147;
          v116 = v18;
          v117 = *(_QWORD *)&v18[16 * v115 + 32];
          v118 = *(_QWORD *)&v18[16 * v20 + 24];
          sub_24B2E7800(v114 + *(_QWORD *)(v129 + 72) * v117, v114 + *(_QWORD *)(v129 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v114 + *(_QWORD *)(v129 + 72) * v118, v128);
          if (v2)
            break;
          if (v118 < v117)
            goto LABEL_136;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v116 = sub_24B3080B0((uint64_t)v18);
          if (v115 >= *((_QWORD *)v116 + 2))
            goto LABEL_137;
          v119 = &v116[16 * v115 + 32];
          *(_QWORD *)v119 = v117;
          *((_QWORD *)v119 + 1) = v118;
          v120 = *((_QWORD *)v116 + 2);
          if (v20 > v120)
            goto LABEL_138;
          memmove(&v116[16 * v20 + 16], &v116[16 * v20 + 32], 16 * (v120 - v20));
          *((_QWORD *)v116 + 2) = v120 - 1;
          v20 = v120 - 1;
          v18 = v116;
        }
        while (v120 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v122 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = sub_24B30BA28();
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v129 + 80);
    v122 = v16;
    v128 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)MEMORY[0x24BEE4AF8];
  v135 = a1;
  while (1)
  {
    v21 = v19;
    v22 = v19 + 1;
    if (v19 + 1 >= v12)
    {
      v38 = v19 + 1;
      goto LABEL_58;
    }
    v124 = v2;
    v23 = *a1;
    v24 = v19;
    v127 = v19;
    v25 = *(_QWORD *)(v129 + 72);
    v26 = v132;
    sub_24B2E7CEC(v23 + v25 * v22, v132, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
    v134 = v12;
    v27 = v133;
    sub_24B2E7CEC(v23 + v25 * v24, v133, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
    v28 = sub_24B30B590();
    v29 = v27;
    v30 = v134;
    sub_24B2CEB44(v29);
    sub_24B2CEB44(v26);
    v137 = v25;
    v131 = v23;
    if (v127 + 2 < v30)
      break;
    v33 = v127 + 2;
    v21 = v127;
    if ((v28 & 1) == 0)
      goto LABEL_37;
LABEL_23:
    v39 = v137;
    if (v33 < v21)
      goto LABEL_141;
    v38 = v33;
    if (v21 >= v33)
      goto LABEL_38;
    v121 = v18;
    v40 = 0;
    v41 = v137 * (v33 - 1);
    v42 = v21;
    v43 = v33 * v137;
    v44 = v42;
    v45 = v42 * v137;
    v46 = v131;
    do
    {
      if (v44 != v38 + v40 - 1)
      {
        if (!v46)
          goto LABEL_146;
        sub_24B2E9384(v46 + v45, v126, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
        if (v45 < v41 || v46 + v45 >= (unint64_t)(v46 + v43))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v45 != v41)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        sub_24B2E9384(v126, v46 + v41, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
        a1 = v135;
        v38 = v33;
        v39 = v137;
      }
      ++v44;
      --v40;
      v41 -= v39;
      v43 -= v39;
      v45 += v39;
    }
    while (v44 < v38 + v40);
    v18 = v121;
    v2 = v124;
    v21 = v127;
    v30 = v134;
    if (v38 < v134)
      goto LABEL_41;
LABEL_58:
    if (v38 < v21)
      goto LABEL_134;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v134 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_24B307CB4(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v63 = *((_QWORD *)v18 + 2);
    v62 = *((_QWORD *)v18 + 3);
    v20 = v63 + 1;
    if (v63 >= v62 >> 1)
      v18 = sub_24B307CB4((char *)(v62 > 1), v63 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v64 = v18 + 32;
    v65 = &v18[16 * v63 + 32];
    v66 = v134;
    *(_QWORD *)v65 = v21;
    *((_QWORD *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        v67 = v20 - 1;
        if (v20 >= 4)
        {
          v72 = &v64[16 * v20];
          v73 = *((_QWORD *)v72 - 8);
          v74 = *((_QWORD *)v72 - 7);
          v78 = __OFSUB__(v74, v73);
          v75 = v74 - v73;
          if (v78)
            goto LABEL_123;
          v77 = *((_QWORD *)v72 - 6);
          v76 = *((_QWORD *)v72 - 5);
          v78 = __OFSUB__(v76, v77);
          v70 = v76 - v77;
          v71 = v78;
          if (v78)
            goto LABEL_124;
          v79 = v20 - 2;
          v80 = &v64[16 * v20 - 32];
          v82 = *(_QWORD *)v80;
          v81 = *((_QWORD *)v80 + 1);
          v78 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          if (v78)
            goto LABEL_126;
          v78 = __OFADD__(v70, v83);
          v84 = v70 + v83;
          if (v78)
            goto LABEL_129;
          if (v84 >= v75)
          {
            v102 = &v64[16 * v67];
            v104 = *(_QWORD *)v102;
            v103 = *((_QWORD *)v102 + 1);
            v78 = __OFSUB__(v103, v104);
            v105 = v103 - v104;
            if (v78)
              goto LABEL_133;
            v95 = v70 < v105;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v96 = *((_QWORD *)v18 + 4);
            v97 = *((_QWORD *)v18 + 5);
            v78 = __OFSUB__(v97, v96);
            v89 = v97 - v96;
            v90 = v78;
            goto LABEL_89;
          }
          v69 = *((_QWORD *)v18 + 4);
          v68 = *((_QWORD *)v18 + 5);
          v78 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          v71 = v78;
        }
        if ((v71 & 1) != 0)
          goto LABEL_125;
        v79 = v20 - 2;
        v85 = &v64[16 * v20 - 32];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v88 = __OFSUB__(v86, v87);
        v89 = v86 - v87;
        v90 = v88;
        if (v88)
          goto LABEL_128;
        v91 = &v64[16 * v67];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v78 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v78)
          goto LABEL_131;
        if (__OFADD__(v89, v94))
          goto LABEL_132;
        if (v89 + v94 >= v70)
        {
          v95 = v70 < v94;
LABEL_95:
          if (v95)
            v67 = v79;
          goto LABEL_97;
        }
LABEL_89:
        if ((v90 & 1) != 0)
          goto LABEL_127;
        v98 = &v64[16 * v67];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v78 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v78)
          goto LABEL_130;
        if (v101 < v89)
          goto LABEL_14;
LABEL_97:
        v106 = v67 - 1;
        if (v67 - 1 >= v20)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v107 = *a1;
        if (!*a1)
          goto LABEL_145;
        v108 = v18;
        v109 = &v64[16 * v106];
        v110 = *(_QWORD *)v109;
        v111 = &v64[16 * v67];
        v112 = *((_QWORD *)v111 + 1);
        sub_24B2E7800(v107 + *(_QWORD *)(v129 + 72) * *(_QWORD *)v109, v107 + *(_QWORD *)(v129 + 72) * *(_QWORD *)v111, v107 + *(_QWORD *)(v129 + 72) * v112, v128);
        if (v2)
          goto LABEL_117;
        if (v112 < v110)
          goto LABEL_120;
        if (v67 > *((_QWORD *)v108 + 2))
          goto LABEL_121;
        *(_QWORD *)v109 = v110;
        *(_QWORD *)&v64[16 * v106 + 8] = v112;
        v113 = *((_QWORD *)v108 + 2);
        if (v67 >= v113)
          goto LABEL_122;
        v18 = v108;
        v20 = v113 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v113 - 1 - v67));
        *((_QWORD *)v108 + 2) = v113 - 1;
        a1 = v135;
        if (v113 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v134;
    if (v134 >= v12)
      goto LABEL_106;
  }
  v31 = v25 * v22;
  v32 = v23;
  v33 = v127 + 2;
  v34 = v25 * (v127 + 2);
  while (1)
  {
    v35 = v132;
    sub_24B2E7CEC(v32 + v34, v132, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
    v36 = v133;
    sub_24B2E7CEC(v32 + v31, v133, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
    v37 = sub_24B30B590();
    sub_24B2CEB44(v36);
    sub_24B2CEB44(v35);
    if (((v28 ^ v37) & 1) != 0)
      break;
    v32 += v137;
    if (v134 == ++v33)
    {
      v30 = v134;
      a1 = v135;
      v33 = v134;
      goto LABEL_36;
    }
  }
  v30 = v134;
  a1 = v135;
LABEL_36:
  v21 = v127;
  if ((v28 & 1) != 0)
    goto LABEL_23;
LABEL_37:
  v38 = v33;
LABEL_38:
  v2 = v124;
  if (v38 >= v30)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v38, v21))
    goto LABEL_139;
  if (v38 - v21 >= v123)
    goto LABEL_58;
  if (__OFADD__(v21, v123))
    goto LABEL_142;
  if (v21 + v123 >= v30)
    v47 = v30;
  else
    v47 = v21 + v123;
  if (v47 >= v21)
  {
    if (v38 != v47)
    {
      v127 = v21;
      v121 = v18;
      v124 = v2;
      v125 = v47;
      v48 = *(_QWORD *)(v129 + 72);
      v137 = v48 * (v38 - 1);
      v131 = v48;
      v49 = v38 * v48;
      do
      {
        v51 = 0;
        v52 = v127;
        v134 = v38;
        while (1)
        {
          v53 = *a1;
          v54 = v49;
          v55 = v49 + v51 + *a1;
          v56 = a1;
          v57 = v132;
          sub_24B2E7CEC(v55, v132, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
          v58 = v133;
          sub_24B2E7CEC(v137 + v51 + v53, v133, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
          LOBYTE(v53) = sub_24B30B590();
          sub_24B2CEB44(v58);
          sub_24B2CEB44(v57);
          if ((v53 & 1) == 0)
            break;
          v59 = *v56;
          if (!*v56)
            goto LABEL_144;
          v49 = v54;
          v60 = v59 + v137 + v51;
          sub_24B2E9384(v59 + v54 + v51, v136, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
          swift_arrayInitWithTakeFrontToBack();
          sub_24B2E9384(v136, v60, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
          v51 -= v131;
          ++v52;
          v50 = v134;
          a1 = v135;
          if (v134 == v52)
            goto LABEL_51;
        }
        v50 = v134;
        a1 = v56;
        v49 = v54;
LABEL_51:
        v38 = v50 + 1;
        v137 += v131;
        v49 += v131;
      }
      while (v38 != v125);
      v38 = v125;
      v2 = v124;
      v18 = v121;
      v21 = v127;
    }
    goto LABEL_58;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B2E75CC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  _QWORD *v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a1;
  v29 = type metadata accessor for ExtractedMessage();
  v7 = MEMORY[0x24BDAC7A8](v29);
  v33 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v30 = (uint64_t)&v26 - v10;
  result = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v26 - v13;
  v32 = a3;
  v27 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v35 = v15 * (v32 - 1);
    v31 = v15;
    v34 = v15 * v32;
    v16 = type metadata accessor for ExtractedMessage;
LABEL_5:
    v17 = 0;
    v18 = v28;
    while (1)
    {
      v19 = *a4;
      sub_24B2E7CEC(v34 + v17 + *a4, (uint64_t)v14, (uint64_t (*)(_QWORD))v16);
      v20 = v30;
      sub_24B2E7CEC(v35 + v17 + v19, v30, (uint64_t (*)(_QWORD))v16);
      LOBYTE(v19) = sub_24B30B590();
      sub_24B2CEB44(v20);
      result = sub_24B2CEB44((uint64_t)v14);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v35 += v31;
        v34 += v31;
        if (++v32 == v27)
          return result;
        goto LABEL_5;
      }
      v21 = *a4;
      if (!*a4)
        break;
      v22 = v16;
      v23 = a4;
      v24 = v21 + v35 + v17;
      v25 = v22;
      sub_24B2E9384(v21 + v34 + v17, v33, (uint64_t (*)(_QWORD))v22);
      swift_arrayInitWithTakeFrontToBack();
      result = sub_24B2E9384(v33, v24, (uint64_t (*)(_QWORD))v25);
      v17 -= v31;
      ++v18;
      a4 = v23;
      v16 = v25;
      if (v32 == v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24B2E7800(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v42 = type metadata accessor for ExtractedMessage();
  v8 = MEMORY[0x24BDAC7A8](v42);
  v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v46 = a1;
  v45 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v26 = a4 + v18;
      v44 = a4 + v18;
      v46 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v28 = -v13;
        v41 = a1;
        do
        {
          v29 = a3 + v28;
          sub_24B2E7CEC(v26 + v28, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
          v30 = a2 + v28;
          v31 = a3;
          v32 = (uint64_t)v11;
          v33 = v43;
          sub_24B2E7CEC(a2 + v28, v43, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
          v34 = sub_24B30B590();
          v35 = v33;
          v11 = (char *)v32;
          sub_24B2CEB44(v35);
          sub_24B2CEB44(v32);
          if ((v34 & 1) != 0)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v37 = v41;
            }
            else
            {
              v36 = v31 == a2;
              v37 = v41;
              if (!v36)
                swift_arrayInitWithTakeBackToFront();
            }
            v46 += v28;
          }
          else
          {
            v38 = v44;
            v44 += v28;
            if (v31 < v38 || v29 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              v30 = a2;
              v37 = v41;
            }
            else
            {
              v36 = v31 == v38;
              v37 = v41;
              if (!v36)
                swift_arrayInitWithTakeBackToFront();
              v30 = a2;
            }
          }
          v26 = v44;
          if (v44 <= a4)
            break;
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v37);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v19 = a4 + v17;
    v44 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v21 = v43;
      do
      {
        sub_24B2E7CEC(a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
        sub_24B2E7CEC(a4, v21, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
        v22 = sub_24B30B590();
        sub_24B2CEB44(v21);
        sub_24B2CEB44((uint64_t)v11);
        v23 = v46;
        if ((v22 & 1) != 0)
        {
          v24 = a2 + v13;
          if (v46 < a2 || v46 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 == a2)
          {
            v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v25 = v45 + v13;
          if (v46 < v45 || v46 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 != v45)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v45 = v25;
          v24 = a2;
        }
        v46 = v23 + v13;
        a4 = v45;
        if (v45 >= v19)
          break;
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_60:
    sub_24B307E58(&v46, &v45, (uint64_t *)&v44);
    return 1;
  }
LABEL_64:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

unint64_t sub_24B2E7C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24B30BE90();
  sub_24B30B914();
  v4 = sub_24B30BEA8();
  return sub_24B2E8678(a1, a2, v4);
}

uint64_t sub_24B2E7CEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_24B2E7D30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24B30BE84();
  return sub_24B2E8758(a1, v2);
}

unint64_t sub_24B2E7D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24B30BE90();
  sub_24B30BE9C();
  sub_24B30BE9C();
  v4 = sub_24B30BEA8();
  return sub_24B2E87F4(a1, a2, v4);
}

uint64_t sub_24B2E7DD4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967FC8);
  v37 = a2;
  v6 = sub_24B30BCF8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_24B30BE90();
    sub_24B30B914();
    result = sub_24B30BEA8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24B2E80DC(uint64_t a1, char a2)
{
  return sub_24B2E80E8(a1, a2, &qword_257967FB0);
}

uint64_t sub_24B2E80E8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = sub_24B30BCF8();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_24B30BE84();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_24B2E8398(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967FB8);
  result = sub_24B30BCF8();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v12)
          goto LABEL_31;
        v19 = v34[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v12)
            goto LABEL_31;
          v19 = v34[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v19 = v34[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v17);
      sub_24B30BE90();
      sub_24B30BE9C();
      sub_24B30BE9C();
      result = sub_24B30BEA8();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v14) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

unint64_t sub_24B2E8678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_24B30BE48() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_24B30BE48() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24B2E8758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_24B2E87F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

void *sub_24B2E8870()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967FC8);
  v2 = *v0;
  v3 = sub_24B30BCEC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_24B2E8A1C()
{
  unint64_t result;

  result = qword_257967ED0;
  if (!qword_257967ED0)
  {
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_257967ED0);
  }
  return result;
}

uint64_t sub_24B2E8A60(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24BD1D214](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B2E8AA0()
{
  return sub_24B2C8020(qword_257967EE0, (uint64_t (*)(uint64_t))type metadata accessor for MessageExtractor, (uint64_t)&protocol conformance descriptor for MessageExtractor);
}

char *initializeBufferWithCopyOfBuffer for MessageExtractor(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_QWORD *)a1 + 4) = a2[4];
    v9 = a3[9];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = sub_24B30B5B4();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    v16 = v8;
    if (v14(v11, 1, v12))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[11];
    *(_QWORD *)&v7[a3[10]] = *(char **)((char *)a2 + a3[10]);
    *(_QWORD *)&v7[v18] = *(char **)((char *)a2 + v18);
    *(_QWORD *)&v7[a3[12]] = *(char **)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for MessageExtractor(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = sub_24B30B5B4();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MessageExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_24B30B5B4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v6;
  v15 = v7;
  if (v13(v10, 1, v11))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MessageExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v12 = a3[9];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = sub_24B30B5B4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MessageExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[9];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_24B30B5B4();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for MessageExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_24B30B5B4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageExtractor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24B2E9190(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MessageExtractor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24B2E921C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

void sub_24B2E9294()
{
  unint64_t v0;

  sub_24B2E9330();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_24B2E9330()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257967F60)
  {
    sub_24B30B5B4();
    v0 = sub_24B30BBCC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_257967F60);
  }
}

uint64_t sub_24B2E9384(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_24B2E93C8()
{
  return sub_24B2E93D4(&qword_257967FB0);
}

void *sub_24B2E93D4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_24B30BCEC();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24B2E956C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967FB8);
  v2 = *v0;
  v3 = sub_24B30BCEC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v12 = (v20 - 1) & v20;
    v15 = v22 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 4 * v15;
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v17);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24B2E96FC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_24B2E9784(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967FB0);
  v3 = (_QWORD *)sub_24B30BD04();
  v5 = a1[4];
  v4 = a1[5];
  result = sub_24B2E7D30(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_bridgeObjectRetain();
    result = sub_24B2E7D30(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2E9880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257967E88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t block_destroy_helper_13(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t sub_24B2E98D0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_24B2E9908()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968008);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void sub_24B2E996C(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_257968008);
  sub_24B2E5928(a1);
}

uint64_t sub_24B2E99CC(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x73726579616CLL;
  else
    v2 = 0x63697274656DLL;
  if ((a2 & 1) != 0)
    v3 = 0x73726579616CLL;
  else
    v3 = 0x63697274656DLL;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_24B30BE48();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_24B2E9A44(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7365646F6ELL;
  else
    v3 = 0x63697274656DLL;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7365646F6ELL;
  else
    v5 = 0x63697274656DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_24B30BE48();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24B2E9AE0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656572547076;
  else
    v3 = 0x656572546C6C6162;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656572547076;
  else
    v5 = 0x656572546C6C6162;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_24B30BE48();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24B2E9B80(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24B2E9BB8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24B2E9C20 + 4 * byte_24B30E2A4[a2]))(12876);
}

uint64_t sub_24B2E9C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 12876 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_24B30BE48();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24B2E9CC8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEA00000000007265;
  v3 = 0x646465626D454C4ELL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000014;
    else
      v5 = 0x457478655444414DLL;
    if (v4 == 1)
      v6 = 0x800000024B30FAA0;
    else
      v6 = 0xEF7265646465626DLL;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x646465626D454C4ELL;
  v6 = 0xEA00000000007265;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000014;
    else
      v3 = 0x457478655444414DLL;
    if (v7 == 1)
      v2 = 0x800000024B30FAA0;
    else
      v2 = 0xEF7265646465626DLL;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_24B30BE48();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24B2E9DF8(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x78697274616DLL;
  else
    v2 = 0x726F736E6574;
  if ((a2 & 1) != 0)
    v3 = 0x78697274616DLL;
  else
    v3 = 0x726F736E6574;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_24B30BE48();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_24B2E9E6C(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_24B2DC0C0(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 2;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_24B2DC0C0(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void HNSWIndex.metric.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t HNSWIndex.points.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t HNSWIndex.layers.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B2E9F9C(char *a1, char *a2)
{
  return sub_24B2E99CC(*a1, *a2);
}

uint64_t sub_24B2E9FA8()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

uint64_t sub_24B2EA014()
{
  sub_24B30B914();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2EA054()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

uint64_t sub_24B2EA0BC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24B30BD28();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24B2EA118(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x63697274656DLL;
  if (*v1)
    v2 = 0x73726579616CLL;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_24B2EA148()
{
  _BYTE *v0;

  if (*v0)
    return 0x73726579616CLL;
  else
    return 0x63697274656DLL;
}

uint64_t sub_24B2EA174@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24B30BD28();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24B2EA1D4()
{
  sub_24B2ED8E0();
  return sub_24B30BECC();
}

uint64_t sub_24B2EA1FC()
{
  sub_24B2ED8E0();
  return sub_24B30BED8();
}

uint64_t HNSWIndex.__allocating_init(points:metric:)(uint64_t a1, char *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_allocObject();
  v5 = *a2;
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 32) = v6;
  *(_BYTE *)(v4 + 16) = v5;
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = sub_24B2EA3BC(a1, 4, 16);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v4 + 32) = v7;
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t HNSWIndex.init(points:metric:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 32) = v5;
  *(_BYTE *)(v2 + 16) = v4;
  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = sub_24B2EA3BC(a1, 4, 16);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = v6;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24B2EA3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  double v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  float *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  float *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float *v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  uint64_t v162;
  size_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  float *v169;
  float *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float *v175;
  float *v176;
  unint64_t v177;
  float *v178;
  float *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t j;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int64_t v196;
  unint64_t v197;
  unint64_t v198;
  int64_t v199;
  unint64_t v200;
  int64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  char v205;
  unint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t result;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int64_t v230;
  uint64_t v231;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t (*v245)();
  unint64_t v246;
  float *v247;
  uint64_t v248[4];
  uint64_t v249[4];
  unint64_t v250;

  if (a3 + 0x4000000000000000 < 0)
    goto LABEL_317;
  v7 = log((double)a3);
  v250 = MEMORY[0x24BEE4AF8];
  if (a2 < 0)
  {
LABEL_318:
    __break(1u);
    goto LABEL_319;
  }
  v8 = v7;
  v228 = a3;
  if (a2)
  {
    v9 = 0;
    v4 = MEMORY[0x24BEE4B00];
    v3 = MEMORY[0x24BEE4AF8];
    do
    {
      v249[0] = 0x5F726579616CLL;
      v249[1] = 0xE600000000000000;
      v248[0] = v9;
      sub_24B30BE18();
      sub_24B30B92C();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_257968048);
      v10 = (_QWORD *)swift_allocObject();
      v10[5] = v4;
      v10[4] = sub_24B2E9784((_QWORD *)v3);
      v11 = v10 + 4;
      v10[2] = 0x5F726579616CLL;
      v10[3] = 0xE600000000000000;
      swift_beginAccess();
      if (!*(_QWORD *)(v10[4] + 16) || (sub_24B2E7D30(0), (v12 & 1) == 0))
      {
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v248[0] = *v11;
        *v11 = 0x8000000000000000;
        sub_24B2EFA0C(v3, 0, isUniquelyReferenced_nonNull_native);
        *v11 = v248[0];
        swift_bridgeObjectRelease();
        swift_endAccess();
      }
      v14 = swift_retain();
      MEMORY[0x24BD1C908](v14);
      if (*(_QWORD *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v250 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_24B30BA10();
      ++v9;
      sub_24B30BA40();
      sub_24B30B9F8();
      swift_release();
    }
    while (a2 != v9);
  }
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == 1)
    return v250;
  if (v15)
  {
    v16 = 0;
    v220 = a1 + 32;
    v17 = 1.0 / v8;
    v18 = 1;
    v219 = *(_QWORD *)(a1 + 16);
LABEL_14:
    if (v18 == v15)
      goto LABEL_322;
    v19 = v250;
    v229 = v18;
    if (v250 >> 62)
    {
      swift_bridgeObjectRetain();
      v217 = sub_24B30BCE0();
      swift_bridgeObjectRelease();
      v21 = __OFSUB__(v217, 1);
      v22 = v217 - 1;
      if (v21)
      {
LABEL_277:
        __break(1u);
        return v250;
      }
    }
    else
    {
      v20 = *(_QWORD *)((v250 & 0xFFFFFFFFFFFFF8) + 0x10);
      v21 = __OFSUB__(v20, 1);
      v22 = v20 - 1;
      if (v21)
        goto LABEL_277;
    }
    do
    {
      v249[0] = 0;
      MEMORY[0x24BD1D2D4](v249, 8);
    }
    while ((unint64_t)(0x20000000000001 * v249[0]) < 0x1FFFFFFFFFF801);
    v23 = floor(-(log((double)(((unint64_t)v249[0] * (unsigned __int128)0x20000000000001uLL) >> 64)* 1.11022302e-16+ 0.0)* v17));
    if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) == 0)
      goto LABEL_323;
    if (v23 <= -9.22337204e18)
      goto LABEL_324;
    if (v23 >= 9.22337204e18)
      goto LABEL_325;
    v3 = v22 & ~(v22 >> 63);
    if (v3 >= (uint64_t)v23)
      v24 = (uint64_t)v23;
    else
      v24 = v22 & ~(v22 >> 63);
    if (v3 <= (uint64_t)v23)
    {
      v26 = &unk_251C3A1A8;
    }
    else
    {
      v4 = v24;
      v25 = *(_QWORD *)(v220 + 8 * v229);
      v26 = &unk_251C3A1A8;
      do
      {
        if ((v19 & 0xC000000000000001) != 0)
        {
          v28 = MEMORY[0x24BD1CB90](v3, v19);
        }
        else
        {
          if (v3 < 0)
            goto LABEL_298;
          if ((unint64_t)v3 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
            goto LABEL_307;
          }
          v28 = *(_QWORD *)(v19 + 8 * v3 + 32);
          swift_retain();
        }
        swift_bridgeObjectRetain();
        v29 = sub_24B2EBDA0(a1, v28, v25, (uint64_t)v26, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
        v26 = (_OWORD *)swift_allocObject();
        v26[1] = xmmword_24B30E190;
        if (*(_QWORD *)(v29 + 16))
          v27 = *(_QWORD *)(v29 + 32);
        else
          v27 = 0;
        --v3;
        swift_bridgeObjectRelease();
        *((_QWORD *)v26 + 4) = v27;
        v24 = v4;
      }
      while (v4 < v3);
    }
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_273;
    if (v228 < 0)
      goto LABEL_326;
LABEL_38:
    v239 = v24;
    if ((v250 & 0xC000000000000001) != 0)
    {
      v30 = MEMORY[0x24BD1CB90]();
    }
    else
    {
      if (v24 >= *(_QWORD *)((v250 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_320;
      v30 = *(_QWORD *)(v250 + 8 * v24 + 32);
      swift_retain();
    }
    v3 = *(_QWORD *)(v220 + 8 * v229);
    swift_bridgeObjectRetain();
    v31 = sub_24B2EBDA0(a1, v30, v3, (uint64_t)v26, 100);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v228)
    {
      v32 = *(_QWORD *)(v31 + 16);
      if (v32 >= v228)
        v32 = v228;
    }
    else
    {
      v32 = 0;
    }
    v33 = v239;
    v224 = v32;
    v34 = v250;
    v222 = v31;
    if ((v250 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v35 = MEMORY[0x24BD1CB90](v239, v34);
    }
    else
    {
      if ((unint64_t)v239 >= *(_QWORD *)((v250 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_321;
      v35 = *(_QWORD *)(v250 + 8 * v239 + 32);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    v249[0] = v229;
    (*(void (**)(uint64_t *))(*(_QWORD *)v35 + 216))(v249);
    swift_release();
    if (!v224)
      goto LABEL_269;
    swift_bridgeObjectRetain();
    v36 = v224;
    v37 = 0;
    while (1)
    {
      if (v37 == v36)
        goto LABEL_309;
      v38 = v222 + 32 + 16 * v37;
      v241 = *(_QWORD *)v38;
      v39 = *(float *)(v38 + 8);
      v40 = v250;
      v41 = v250 & 0xC000000000000001;
      v227 = v37;
      if ((v250 & 0xC000000000000001) != 0)
      {
        MEMORY[0x24BD1CB90](v239, v250);
      }
      else
      {
        if (v239 >= *(_QWORD *)((v250 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_310;
        swift_retain();
      }
      sub_24B2ED604(v229, v241, v39);
      swift_release();
      if (v41)
      {
        MEMORY[0x24BD1CB90](v239, v40);
      }
      else
      {
        if (v239 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_311;
        swift_retain();
      }
      sub_24B2ED604(v241, v229, v39);
      swift_release();
      if (v41)
      {
        v42 = MEMORY[0x24BD1CB90](v239, v40);
      }
      else
      {
        if (v239 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_312;
        v42 = *(_QWORD *)(v40 + 8 * v239 + 32);
        swift_retain();
      }
      swift_beginAccess();
      v43 = *(_QWORD *)(v42 + 32);
      if (*(_QWORD *)(v43 + 16)
        && (v44 = sub_24B2E7D30(v241), (v45 & 1) != 0)
        && (v46 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v44), (v47 = *(_QWORD *)(v46 + 16)) != 0))
      {
        v3 = v42 + 40;
        swift_bridgeObjectRetain();
        swift_beginAccess();
        v48 = 0;
        v4 = MEMORY[0x24BEE4AF8];
        do
        {
          v50 = *(_QWORD *)v3;
          if (*(_QWORD *)(*(_QWORD *)v3 + 16))
          {
            v51 = *(_QWORD *)(v46 + 8 * v48 + 32);
            v52 = sub_24B2E7D68(v241, v51);
            if ((v53 & 1) != 0)
            {
              v54 = *(_DWORD *)(*(_QWORD *)(v50 + 56) + 4 * v52);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v4 = (uint64_t)sub_24B2C89F4(0, *(_QWORD *)(v4 + 16) + 1, 1, (_QWORD *)v4);
              v56 = *(_QWORD *)(v4 + 16);
              v55 = *(_QWORD *)(v4 + 24);
              if (v56 >= v55 >> 1)
                v4 = (uint64_t)sub_24B2C89F4((_QWORD *)(v55 > 1), v56 + 1, 1, (_QWORD *)v4);
              *(_QWORD *)(v4 + 16) = v56 + 1;
              v49 = v4 + 16 * v56;
              *(_QWORD *)(v49 + 32) = v51;
              *(_DWORD *)(v49 + 40) = v54;
            }
          }
          ++v48;
        }
        while (v47 != v48);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
        v4 = MEMORY[0x24BEE4AF8];
      }
      if (*(_QWORD *)(v4 + 16) > v228)
        break;
      swift_bridgeObjectRelease();
LABEL_52:
      v37 = v227 + 1;
      v36 = v224;
      if (v227 + 1 == v224)
      {
        swift_bridgeObjectRelease();
        v33 = v239;
LABEL_269:
        v215 = v33 - 1;
        v3 = v222;
        v216 = v33;
        v26 = (_OWORD *)sub_24B2E9E6C(v222);
        swift_bridgeObjectRelease_n();
        v24 = v215;
        if (v216 > 0)
          goto LABEL_38;
LABEL_273:
        swift_bridgeObjectRelease();
        v18 = v229 + 1;
        v15 = v219;
        if (v229 + 1 == v219)
          return v250;
        goto LABEL_14;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = (uint64_t)sub_24B2D8438((_QWORD *)v4);
    v57 = *(_QWORD *)(v4 + 16);
    v242 = v4 + 32;
    v58 = sub_24B30BE0C();
    v59 = v57;
    v236 = v4;
    if (v58 >= (uint64_t)v57)
    {
      v64 = v228 << (v239 == 0);
      if (v57 >= 2)
      {
        v65 = -1;
        v66 = v4 + 32;
        for (i = 1; i != v57; ++i)
        {
          v68 = v66;
          v69 = v65;
          do
          {
            v70 = *(float *)(v68 + 24);
            if (v70 >= *(float *)(v68 + 8))
              break;
            v71 = *(_QWORD *)(v68 + 16);
            *(_OWORD *)(v68 + 16) = *(_OWORD *)v68;
            *(_QWORD *)v68 = v71;
            *(float *)(v68 + 8) = v70;
            v68 -= 16;
          }
          while (!__CFADD__(v69++, 1));
          --v65;
          v66 += 16;
        }
      }
LABEL_215:
      if ((v64 & 0x8000000000000000) == 0)
      {
        if (v64)
        {
          if (*(_QWORD *)(v4 + 16) >= v64)
            v3 = v64;
          else
            v3 = *(_QWORD *)(v4 + 16);
        }
        else
        {
          v3 = 0;
        }
        v183 = swift_bridgeObjectRetain();
        v184 = sub_24B2E9E6C(v183);
        v185 = sub_24B30BB24();
        v249[0] = v185;
        v186 = *(_QWORD *)(v184 + 16);
        if (v186)
        {
          for (j = 0; j != v186; ++j)
          {
            v188 = *(_QWORD *)(v184 + 8 * j + 32);
            sub_24B2EF06C(v248, v188);
          }
          swift_bridgeObjectRelease();
          v189 = v249[0];
        }
        else
        {
          v189 = v185;
          swift_bridgeObjectRelease();
        }
        v190 = sub_24B2E33A0(v242, 0, (2 * v3) | 1);
        swift_bridgeObjectRelease();
        v191 = sub_24B2EFB44(v190, v189);
        swift_bridgeObjectRelease();
        v4 = 0;
        v192 = v191 + 56;
        v193 = 1 << *(_BYTE *)(v191 + 32);
        if (v193 < 64)
          v194 = ~(-1 << v193);
        else
          v194 = -1;
        v195 = v194 & *(_QWORD *)(v191 + 56);
        v196 = (unint64_t)(v193 + 63) >> 6;
        while (1)
        {
          if (v195)
          {
            v197 = __clz(__rbit64(v195));
            v195 &= v195 - 1;
            v198 = v197 | (v4 << 6);
          }
          else
          {
            v199 = v4 + 1;
            if (__OFADD__(v4, 1))
              goto LABEL_297;
            if (v199 >= v196)
            {
LABEL_264:
              swift_bridgeObjectRelease();
              swift_release();
              goto LABEL_52;
            }
            v200 = *(_QWORD *)(v192 + 8 * v199);
            ++v4;
            if (!v200)
            {
              v4 = v199 + 1;
              if (v199 + 1 >= v196)
                goto LABEL_264;
              v200 = *(_QWORD *)(v192 + 8 * v4);
              if (!v200)
              {
                v4 = v199 + 2;
                if (v199 + 2 >= v196)
                  goto LABEL_264;
                v200 = *(_QWORD *)(v192 + 8 * v4);
                if (!v200)
                {
                  v201 = v199 + 3;
                  if (v201 >= v196)
                    goto LABEL_264;
                  v200 = *(_QWORD *)(v192 + 8 * v201);
                  if (!v200)
                  {
                    while (1)
                    {
                      v4 = v201 + 1;
                      if (__OFADD__(v201, 1))
                        break;
                      if (v4 >= v196)
                        goto LABEL_264;
                      v200 = *(_QWORD *)(v192 + 8 * v4);
                      ++v201;
                      if (v200)
                        goto LABEL_247;
                    }
LABEL_307:
                    __break(1u);
LABEL_308:
                    __break(1u);
LABEL_309:
                    __break(1u);
LABEL_310:
                    __break(1u);
LABEL_311:
                    __break(1u);
LABEL_312:
                    __break(1u);
LABEL_313:
                    __break(1u);
LABEL_314:
                    __break(1u);
                    goto LABEL_315;
                  }
                  v4 = v201;
                }
              }
            }
LABEL_247:
            v195 = (v200 - 1) & v200;
            v198 = __clz(__rbit64(v200)) + (v4 << 6);
          }
          v3 = *(_QWORD *)(*(_QWORD *)(v191 + 48) + 8 * v198);
          if ((v250 & 0xC000000000000001) != 0)
          {
            v202 = MEMORY[0x24BD1CB90](v239);
          }
          else
          {
            if (v239 >= *(_QWORD *)((v250 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_281;
            v202 = *(_QWORD *)(v250 + 8 * v239 + 32);
            swift_retain();
          }
          swift_beginAccess();
          v203 = *(_QWORD *)(v202 + 32);
          if (*(_QWORD *)(v203 + 16))
          {
            sub_24B2E7D30(v241);
            if ((v204 & 1) != 0)
            {
              sub_24B2E7D30(v3);
              if ((v205 & 1) != 0)
              {
                v206 = sub_24B2E7D30(v241);
                if ((v207 & 1) != 0)
                {
                  v208 = *(_QWORD *)(*(_QWORD *)(v203 + 56) + 8 * v206);
                  v209 = *(_QWORD *)(v208 + 16);
                  if (v209)
                  {
                    if (*(_QWORD *)(v208 + 32) == v3)
                    {
                      v210 = 0;
LABEL_261:
                      v245 = sub_24B2ED47C();
                      v3 = (uint64_t)sub_24B2ED4B8(v248, v241);
                      if (*v214)
                        sub_24B2ED534(v210);
                      ((void (*)(uint64_t *, _QWORD))v3)(v248, 0);
                      ((void (*)(uint64_t *, _QWORD))v245)(v249, 0);
                    }
                    else
                    {
                      v210 = 0;
                      v211 = v208 + 40;
                      v212 = v209 - 1;
                      while (v212 != v210)
                      {
                        v213 = *(_QWORD *)(v211 + 8 * v210++);
                        if (v213 == v3)
                          goto LABEL_261;
                      }
                    }
                  }
                }
              }
            }
          }
          swift_release();
        }
      }
      goto LABEL_316;
    }
    v60 = v58;
    v230 = v57;
    if (v57 >= 2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257968160);
      v62 = sub_24B30BA28();
      v59 = v57;
      *(_QWORD *)(v62 + 16) = v57 >> 1;
      v3 = v62 + 32;
      v249[0] = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v61 = MEMORY[0x24BEE4AF8];
      v249[0] = MEMORY[0x24BEE4AF8];
      v3 = MEMORY[0x24BEE4AF8] + 32;
      v62 = MEMORY[0x24BEE4AF8];
      if (!v57)
      {
        v63 = MEMORY[0x24BEE4AF8];
LABEL_159:
        v235 = v63;
        if (*(_QWORD *)(v61 + 16) >= 2uLL)
        {
          v231 = v4 + 16;
          do
          {
            v146 = sub_24B30B3DC(v61);
            v147 = v146 - 1;
            if (__OFSUB__(v146, 1))
              goto LABEL_301;
            v148 = v146 - 2;
            if (__OFSUB__(v147, 1))
              goto LABEL_302;
            if ((v148 & 0x8000000000000000) != 0)
              goto LABEL_303;
            v149 = *(_QWORD *)(v61 + 16);
            if (v148 >= v149)
              goto LABEL_304;
            if (v147 >= v149)
              goto LABEL_305;
            v234 = v146 - 2;
            v238 = v146 - 1;
            v150 = (_QWORD *)(v61 + 32 + 16 * v147);
            v244 = *(_QWORD *)(v61 + 32 + 16 * v148);
            v4 = v242 + 16 * v244;
            v151 = 16 * *v150;
            v152 = (float *)(v242 + v151);
            v240 = v150[1];
            v153 = 16 * v240;
            v154 = v242 + 16 * v240;
            v155 = v151 - 16 * v244;
            v156 = v155 + 15;
            if (v155 >= 0)
              v156 = (uint64_t)v152 - v4;
            v157 = v156 >> 4;
            v158 = (float *)v3;
            v3 = v154 - (_QWORD)v152;
            v159 = v154 - (_QWORD)v152 + 15;
            if ((uint64_t)(v154 - (_QWORD)v152) >= 0)
              v159 = v154 - (_QWORD)v152;
            v160 = v159 >> 4;
            v247 = v158;
            v248[0] = v242 + 16 * v244;
            v161 = v158;
            if (v157 >= v160)
            {
              v171 = v235;
              if (v3 < -15)
                goto LABEL_327;
              v172 = 16 * v160;
              if (v158 != v152 || v158 >= &v152[(unint64_t)v172 / 4])
              {
                v173 = v151;
                memmove(v158, v152, 16 * v160);
                v151 = v173;
                v153 = 16 * v240;
                v171 = v235;
              }
              v174 = v172 + 32;
              v246 = v171 + v172 + 32;
              v248[0] = (uint64_t)v152;
              if (16 * v244 < v151 && (unint64_t)(v3 - 16) <= 0xFFFFFFFFFFFFFFE0)
              {
                v3 = (uint64_t)v161;
                v175 = (float *)(v231 + v153);
                v168 = v244;
                while (1)
                {
                  v176 = v175 + 4;
                  v177 = v171 + v174;
                  if (*(float *)(v171 + v174 - 8) >= *(v152 - 2))
                  {
                    v174 -= 16;
                    v179 = (float *)(v171 + v174);
                    v246 = v171 + v174;
                    if ((unint64_t)v176 < v177 || (unint64_t)v175 >= v177 || v175 != v179)
                      *(_OWORD *)v175 = *(_OWORD *)v179;
                    v178 = v152;
                    if (v4 >= (unint64_t)v152)
                      goto LABEL_212;
                  }
                  else
                  {
                    v178 = v152 - 4;
                    if (v176 != v152 || v175 >= v152)
                      *(_OWORD *)v175 = *(_OWORD *)v178;
                    v248[0] = (uint64_t)(v152 - 4);
                    if (v4 >= (unint64_t)v178)
                      goto LABEL_212;
                  }
                  v175 -= 4;
                  v152 = v178;
                  if (v174 <= 32)
                    goto LABEL_212;
                }
              }
              v3 = (uint64_t)v161;
            }
            else
            {
              v162 = v235;
              if (v155 < -15)
                goto LABEL_327;
              v163 = 16 * v157;
              v3 = (uint64_t)v158;
              if (v158 != (float *)v4 || (unint64_t)v158 >= v4 + v163)
              {
                v164 = v151;
                memmove(v158, (const void *)v4, v163);
                v151 = v164;
                v153 = 16 * v240;
                v162 = v235;
              }
              v165 = v163 + v162 + 32;
              v246 = v165;
              if (v151 < v153 && (unint64_t)(v155 - 16) <= 0xFFFFFFFFFFFFFFE0)
              {
                v166 = v3;
                v167 = v3;
                v168 = v244;
                while (1)
                {
                  if (v152[2] >= *(float *)(v166 + 8))
                  {
                    v167 = v166 + 16;
                    v170 = (float *)v166;
                    v169 = v152;
                    if (v4 == v166)
                    {
                      v166 += 16;
                      if (v4 < v167)
                        goto LABEL_187;
                    }
                    else
                    {
                      v166 += 16;
                    }
                  }
                  else
                  {
                    v169 = v152 + 4;
                    v170 = v152;
                    if ((float *)v4 == v152 && v4 < (unint64_t)v169)
                      goto LABEL_187;
                  }
                  *(_OWORD *)v4 = *(_OWORD *)v170;
LABEL_187:
                  v4 += 16;
                  if (v166 < v165)
                  {
                    v152 = v169;
                    if ((unint64_t)v169 < v154)
                      continue;
                  }
                  v247 = (float *)v167;
                  v248[0] = v4;
                  goto LABEL_212;
                }
              }
            }
            v168 = v244;
LABEL_212:
            sub_24B307E54(v248, &v247, &v246);
            if (v240 < v168)
              goto LABEL_306;
            sub_24B307BD4();
            v180 = v249[0];
            v181 = sub_24B307C10(v234, v249[0]);
            v182 = v180 + 16 * v234;
            *(_QWORD *)(v182 + 32) = v168;
            *(_QWORD *)(v182 + 40) = v240;
            nullsub_1(v181);
            sub_24B307C2C(v238);
            v61 = v249[0];
            v4 = v236;
          }
          while (sub_24B30769C(v249[0]) > 1);
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v235 + 16) = 0;
        swift_bridgeObjectRelease();
        v64 = v228 << (v239 == 0);
        goto LABEL_215;
      }
    }
    v235 = v62;
    v73 = 0;
    v225 = v60;
    v226 = v4 + 40;
    v223 = v4 + 72;
    v221 = v4 + 24;
    v237 = v3;
    while (1)
    {
      v4 = v73;
      v74 = v73 + 1;
      if (v73 + 1 < v59)
      {
        v75 = *(float *)(v226 + 16 * v74);
        v76 = 16 * v73;
        v77 = *(float *)(v226 + 16 * v73);
        v74 = v73 + 2;
        if (v73 + 2 < v59)
        {
          v78 = (float *)(v223 + 16 * v73);
          while (v75 < v77 == *v78 < *(v78 - 4))
          {
            ++v74;
            v78 += 4;
            if (v59 == v74)
            {
              v74 = v59;
              break;
            }
          }
        }
        if (v75 < v77)
        {
          if (v74 < v73)
            goto LABEL_313;
          if (v73 < v74)
          {
            v79 = 16 * v74;
            v80 = v74;
            v81 = v4;
            do
            {
              if (v81 != --v80)
              {
                v82 = v236 + v79;
                v83 = *(_QWORD *)(v236 + v76 + 32);
                v84 = *(_DWORD *)(v236 + v76 + 40);
                *(_OWORD *)(v236 + v76 + 32) = *(_OWORD *)(v236 + v79 + 16);
                *(_QWORD *)(v82 + 16) = v83;
                *(_DWORD *)(v82 + 24) = v84;
              }
              ++v81;
              v79 -= 16;
              v76 += 16;
            }
            while (v81 < v80);
          }
        }
      }
      if (v74 < v59)
      {
        if (__OFSUB__(v74, v4))
          goto LABEL_308;
        if (v74 - v4 < v225)
        {
          v85 = v4 + v225;
          if (__OFADD__(v4, v225))
            goto LABEL_314;
          if (v85 >= v59)
            v85 = v59;
          if (v85 < v4)
          {
LABEL_315:
            __break(1u);
LABEL_316:
            __break(1u);
LABEL_317:
            __break(1u);
            goto LABEL_318;
          }
          if (v74 != v85)
          {
            v86 = v221 + 16 * v74;
            do
            {
              v87 = v4;
              v88 = v86;
              do
              {
                v89 = *(float *)(v88 + 16);
                if (v89 >= *(float *)v88)
                  break;
                v90 = *(_QWORD *)(v88 + 8);
                *(_OWORD *)(v88 + 8) = *(_OWORD *)(v88 - 8);
                *(_QWORD *)(v88 - 8) = v90;
                *(float *)v88 = v89;
                v88 -= 16;
                ++v87;
              }
              while (v74 != v87);
              ++v74;
              v86 += 16;
            }
            while (v74 != v85);
            v74 = v85;
          }
        }
      }
      if (v74 < v4)
        goto LABEL_300;
      sub_24B3075F8();
      v91 = *(char **)(v249[0] + 16);
      sub_24B307644(v91);
      v233 = v74;
      v92 = sub_24B307684((uint64_t)v91, v4, v74);
      nullsub_1(v92);
      v61 = v249[0];
      if (sub_24B30769C(v249[0]) >= 2)
        break;
LABEL_94:
      v59 = v230;
      v73 = v233;
      v63 = v235;
      if (v233 >= v230)
      {
        v4 = v236;
        goto LABEL_159;
      }
    }
    while (1)
    {
      v93 = sub_24B30769C(v61);
      v4 = v93 - 1;
      if (__OFSUB__(v93, 1))
      {
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
        goto LABEL_299;
      }
      v94 = v93 - 4;
      v243 = v16;
      if (v4 >= 3)
        break;
      if (v93 == 3)
      {
        v95 = 0;
LABEL_135:
        sub_24B3076A4(v95, 1, v61);
        v112 = v61 + 32;
        v113 = (_QWORD *)(v61 + 32 + 16 * v95);
        v115 = v113[1];
        v114 = v113 + 1;
        v116 = v115 - *v113;
        if (__OFSUB__(v115, *v113))
          goto LABEL_284;
        v117 = v3;
        sub_24B3076A4(v4 - 1, 1, v61);
        v118 = (uint64_t *)(v112 + 16 * (v4 - 1));
        v120 = *v118;
        v119 = v118[1];
        v3 = v119 - v120;
        if (__OFSUB__(v119, v120))
          goto LABEL_287;
        sub_24B3076A4(v4, 1, v61);
        v121 = (_QWORD *)(v112 + 16 * v4);
        v123 = v121 + 1;
        v122 = v121[1];
        v124 = v122 - *v121;
        if (__OFSUB__(v122, *v121))
          goto LABEL_290;
        v21 = __OFADD__(v3, v124);
        v125 = v3 + v124;
        if (v21)
          goto LABEL_292;
        v3 = v117;
        if (v125 >= v116)
        {
          sub_24B3076A4(v95, 1, v61);
          v21 = __OFSUB__(*v114, *v113);
          v139 = *v114 - *v113;
          if (v21)
            goto LABEL_295;
          sub_24B3076A4(v4, 1, v61);
          if (__OFSUB__(*v123, *v121))
            goto LABEL_296;
          if (v139 < *v123 - *v121)
            --v4;
          v16 = v243;
          goto LABEL_155;
        }
      }
      if (__OFSUB__(v4, 1))
        goto LABEL_286;
      sub_24B3076A4(v4 - 1, 1, v61);
      v126 = (uint64_t *)(v61 + 32 + 16 * (v4 - 1));
      v128 = *v126;
      v127 = v126[1];
      v129 = v127 - v128;
      if (__OFSUB__(v127, v128))
        goto LABEL_289;
      sub_24B3076A4(v4, 1, v61);
      v130 = (uint64_t *)(v61 + 32 + 16 * v4);
      v132 = *v130;
      v131 = v130[1];
      v21 = __OFSUB__(v131, v132);
      v133 = v131 - v132;
      if (v21)
        goto LABEL_291;
      v16 = v243;
      if (v133 < v129)
        goto LABEL_94;
LABEL_155:
      sub_24B3076A4(v4 - 1, 1, v61);
      v140 = *(_QWORD *)(v61 + 32 + 16 * (v4 - 1));
      sub_24B3076A4(v4, 1, v61);
      v141 = (_QWORD *)(v61 + 32 + 16 * v4);
      v142 = v141[1];
      sub_24B2EEDD0((char *)(v242 + 16 * v140), (char *)(v242 + 16 * *v141), v242 + 16 * v142, (char *)v3, (void (*)(char **, char **, char **))sub_24B307E54);
      if (v142 < v140)
        goto LABEL_280;
      sub_24B307BD4();
      v143 = v249[0];
      v144 = sub_24B307C10(v4 - 1, v249[0]);
      v145 = v143 + 16 * (v4 - 1);
      *(_QWORD *)(v145 + 32) = v140;
      *(_QWORD *)(v145 + 40) = v142;
      nullsub_1(v144);
      sub_24B307C2C(v4);
      v61 = v249[0];
      if (sub_24B30769C(v249[0]) <= 1)
        goto LABEL_94;
    }
    sub_24B3076A4(v93 - 4, 1, v61);
    v96 = v61 + 32;
    v97 = (uint64_t *)(v61 + 32 + 16 * v94);
    v99 = *v97;
    v98 = v97[1];
    v100 = v98 - v99;
    if (__OFSUB__(v98, v99))
      goto LABEL_282;
    v3 = v4 - 2;
    sub_24B3076A4(v4 - 2, 1, v61);
    v101 = v61;
    v102 = (_QWORD *)(v96 + 16 * (v4 - 2));
    v104 = v102[1];
    v103 = v102 + 1;
    v105 = v104 - *v102;
    if (__OFSUB__(v104, *v102))
      goto LABEL_283;
    v106 = v101;
    sub_24B3076A4(v4 - 1, 1, v101);
    v107 = (uint64_t *)(v96 + 16 * (v4 - 1));
    v109 = *v107;
    v108 = v107[1];
    v21 = __OFSUB__(v108, v109);
    v110 = v108 - v109;
    if (v21)
      goto LABEL_285;
    v21 = __OFADD__(v105, v110);
    v111 = v105 + v110;
    if (v21)
      goto LABEL_288;
    if (v111 >= v100)
    {
      sub_24B3076A4(v4 - 2, 1, v106);
      v134 = *v103 - *v102;
      if (__OFSUB__(*v103, *v102))
        goto LABEL_293;
      sub_24B3076A4(v4, 1, v106);
      v135 = (uint64_t *)(v96 + 16 * v4);
      v137 = *v135;
      v136 = v135[1];
      v21 = __OFSUB__(v136, v137);
      v138 = v136 - v137;
      if (v21)
        goto LABEL_294;
      v61 = v106;
      if (v134 < v138)
        --v4;
      v3 = v237;
      goto LABEL_155;
    }
    v61 = v106;
    v95 = v4 - 2;
    v3 = v237;
    goto LABEL_135;
  }
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  sub_24B30BD10();
  __break(1u);
  v247 = (float *)v3;
  v248[0] = v4;
  sub_24B307E54(v248, &v247, &v246);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v235 + 16) = 0;
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t HNSWIndex.search(query:k:)(uint64_t a1, uint64_t a2)
{
  return HNSWIndex.search(query:k:ef:)(a1, a2, 10);
}

uint64_t HNSWIndex.search(query:k:ef:)(uint64_t a1, uint64_t inited, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  __int128 v30;

  v6 = v3 + 32;
  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 32);
  if (v7 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v27 = sub_24B30BCE0();
    swift_bridgeObjectRelease();
    v9 = v27 - 1;
    if (!__OFSUB__(v27, 1))
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - 1;
    if (!__OFSUB__(v8, 1))
    {
LABEL_3:
      v28 = a3;
      v29 = inited;
      v10 = v9 & ~(v9 >> 63);
      v7 = v3 + 24;
      swift_beginAccess();
      a3 = 0;
      v11 = 0;
      v30 = xmmword_24B30E190;
      while (1)
      {
        v12 = v10 - 1;
        if (v10 <= 1)
        {
          if ((v10 != 1) | v11 & 1)
          {
            v7 = *(_QWORD *)v7;
            swift_beginAccess();
            v6 = *(_QWORD *)v6;
            if ((v6 & 0xC000000000000001) != 0)
              goto LABEL_31;
            if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v17 = *(_QWORD *)(v6 + 32);
              swift_bridgeObjectRetain();
              swift_retain();
              goto LABEL_18;
            }
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          v11 = 1;
          v12 = 1;
        }
        v13 = *(_QWORD *)v7;
        swift_beginAccess();
        v14 = *(_QWORD *)v6;
        if ((*(_QWORD *)v6 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v15 = MEMORY[0x24BD1CB90](v10, v14);
        }
        else
        {
          if (v10 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_28;
          }
          v15 = *(_QWORD *)(v14 + 8 * v10 + 32);
          swift_bridgeObjectRetain();
          swift_retain();
        }
        swift_endAccess();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_24B30E190;
        *(_QWORD *)(inited + 32) = a3;
        v16 = sub_24B2EBDA0(v13, v15, a1, inited, 1);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_release();
        if (*(_QWORD *)(v16 + 16))
          a3 = *(_QWORD *)(v16 + 32);
        else
          a3 = 0;
        swift_bridgeObjectRelease();
        v10 = v12;
      }
    }
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRetain();
  v17 = MEMORY[0x24BD1CB90](0, v6);
LABEL_18:
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
  v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = v30;
  *(_QWORD *)(v18 + 32) = a3;
  v19 = sub_24B2EBDA0(v7, v17, a1, v18, v28);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_release();
  inited = sub_24B2DE478(v29, v19);
  v3 = v20;
  a3 = v21;
  v12 = v22;
  if ((v22 & 1) == 0)
    goto LABEL_19;
  sub_24B30BE54();
  swift_unknownObjectRetain_n();
  v24 = swift_dynamicCastClass();
  if (!v24)
  {
    swift_unknownObjectRelease();
    v24 = MEMORY[0x24BEE4AF8];
  }
  v25 = *(_QWORD *)(v24 + 16);
  swift_release();
  if (__OFSUB__(v12 >> 1, a3))
    goto LABEL_33;
  if (v25 != (v12 >> 1) - a3)
  {
LABEL_34:
    swift_unknownObjectRelease();
LABEL_19:
    v23 = sub_24B2DEC04(inited, v3, a3, v12);
    goto LABEL_26;
  }
  v23 = swift_dynamicCastClass();
  if (!v23)
  {
    swift_unknownObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
  }
LABEL_26:
  swift_unknownObjectRelease();
  return v23;
}

uint64_t sub_24B2EBDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v48)();
  uint64_t v49;
  float v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  _QWORD *v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;

  v6 = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = sub_24B2F04A8(a4, v6, a3, a1);
  v108 = v6;
  swift_release();
  v107 = a3;
  swift_bridgeObjectRelease();
  v109 = a1;
  swift_bridgeObjectRelease();
  v116 = (_QWORD *)v12;
  sub_24B2ECEE8((uint64_t *)&v116, (uint64_t (*)(uint64_t))sub_24B2D8424);
  v13 = v116;
  v14 = v116[2];
  if (v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967590);
    v15 = (_QWORD *)swift_allocObject();
    v16 = _swift_stdlib_malloc_size(v15);
    v17 = v16 - 40;
    if (v16 < 40)
      v17 = v16 - 25;
    v15[2] = v17 >> 4;
    v15[3] = 0;
    v15[4] = 0;
    sub_24B2CB4D0((uint64_t)(v15 + 2), v15 + 5, v14, (uint64_t)v13);
  }
  else
  {
    swift_bridgeObjectRetain();
    v15 = *(_QWORD **)sub_24B30B770();
    swift_retain();
    swift_bridgeObjectRelease();
  }
  v115 = v15;
  v18 = swift_bridgeObjectRetain();
  v19 = sub_24B2F05E4(v18);
  swift_bridgeObjectRelease();
  v20 = v15[3];
  if (!v20)
  {
LABEL_123:
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v116;
  }
  v101 = (uint64_t *)(a2 + 32);
  v102 = a5;
  v106 = a1 + 32;
LABEL_9:
  while (v20 >= 1)
  {
    v21 = v15[4];
    v22 = v15[2];
    if (v21 < v22)
      v22 = 0;
    v23 = v13[2];
    if (v23)
      v24 = *(float *)&v13[2 * v23 + 3];
    else
      v24 = INFINITY;
    v25 = (float *)&v15[2 * (v21 - v22)];
    v26 = *((_QWORD *)v25 + 5);
    v27 = v25[12];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_24B2CAB54();
    v15 = v115;
    v28 = v115[4];
    v59 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v59)
      goto LABEL_146;
    v30 = v115[3];
    if (v29 >= v115[2])
      v29 = 0;
    v115[4] = v29;
    if (__OFSUB__(v30, 1))
      goto LABEL_147;
    v15[3] = v30 - 1;
    if (v24 < v27)
      goto LABEL_123;
    swift_beginAccess();
    v31 = *v101;
    if (*(_QWORD *)(*v101 + 16))
    {
      v32 = sub_24B2E7D30(v26);
      v33 = MEMORY[0x24BEE4AF8];
      if ((v34 & 1) != 0)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v33 = MEMORY[0x24BEE4AF8];
    }
    v112 = *(_QWORD *)(v33 + 16);
    if (v112)
    {
      v35 = 0;
      v110 = v33;
      v111 = v33 + 32;
      while (1)
      {
        if (v35 >= *(_QWORD *)(v33 + 16))
          goto LABEL_126;
        v36 = *(_QWORD *)(v111 + 8 * v35);
        if (!*(_QWORD *)(v19 + 16))
          goto LABEL_38;
        v37 = sub_24B30BE84();
        v38 = -1 << *(_BYTE *)(v19 + 32);
        v39 = v37 & ~v38;
        if (((*(_QWORD *)(v19 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
          goto LABEL_38;
        v40 = *(_QWORD *)(v19 + 48);
        if (*(_QWORD *)(v40 + 8 * v39) != v36)
          break;
LABEL_29:
        if (++v35 == v112)
        {
          swift_bridgeObjectRelease();
          v15 = v115;
          v20 = v115[3];
          if (!v20)
            goto LABEL_123;
          goto LABEL_9;
        }
      }
      v41 = ~v38;
      while (1)
      {
        v39 = (v39 + 1) & v41;
        if (((*(_QWORD *)(v19 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
          break;
        if (*(_QWORD *)(v40 + 8 * v39) == v36)
          goto LABEL_29;
      }
LABEL_38:
      v42 = sub_24B30BE84();
      v43 = -1 << *(_BYTE *)(v19 + 32);
      v44 = v42 & ~v43;
      if (((*(_QWORD *)(v19 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) != 0)
      {
        v45 = *(_QWORD *)(v19 + 48);
        if (*(_QWORD *)(v45 + 8 * v44) != v36)
        {
          v46 = ~v43;
          do
          {
            v44 = (v44 + 1) & v46;
            if (((*(_QWORD *)(v19 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
              goto LABEL_44;
          }
          while (*(_QWORD *)(v45 + 8 * v44) != v36);
        }
      }
      else
      {
LABEL_44:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v113 = (_QWORD *)v19;
        sub_24B2EF3D0(v36, v44, isUniquelyReferenced_nonNull_native);
        v19 = (uint64_t)v113;
        swift_bridgeObjectRelease();
      }
      if ((v36 & 0x8000000000000000) != 0)
        goto LABEL_127;
      if (v36 >= *(_QWORD *)(v109 + 16))
        goto LABEL_128;
      v48 = off_251C3BC88[*(char *)(v108 + 16)];
      v49 = *(_QWORD *)(v106 + 8 * v36);
      swift_bridgeObjectRetain();
      v50 = ((float (*)(uint64_t, uint64_t))v48)(v107, v49);
      swift_bridgeObjectRelease();
      if (v50 >= v24)
      {
        v13 = v116;
        if (v116[2] >= a5)
          goto LABEL_28;
      }
      v51 = v115;
      v52 = v115[3];
      v53 = v52 + 1;
      if (__OFADD__(v52, 1))
        goto LABEL_129;
      v54 = swift_isUniquelyReferenced_nonNull_native();
      if (v51[2] < v53 || (v54 & 1) == 0)
      {
        sub_24B2CAF1C(v53);
        v51 = v115;
      }
      v56 = v51[3];
      v55 = v51[4];
      v59 = __OFADD__(v55, v56);
      v57 = v55 + v56;
      if (v59)
        goto LABEL_130;
      if (v56 < 0)
      {
        if (v57 < 0)
        {
          v61 = v51[2];
          v59 = __OFADD__(v57, v61);
          v57 += v61;
          if (v59)
            goto LABEL_144;
        }
      }
      else
      {
        v58 = v51[2];
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        if (v60 < 0 == v59)
        {
          v57 = v60;
          if (v59)
            goto LABEL_140;
        }
      }
      v62 = (float *)&v51[2 * v57];
      *((_QWORD *)v62 + 5) = v36;
      v62[12] = v50;
      v63 = v51[3];
      v59 = __OFADD__(v63, 1);
      v64 = v63 + 1;
      if (v59)
        goto LABEL_131;
      v51[3] = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24B2CAB54();
        v51 = v115;
      }
      v66 = v51[3];
      v65 = v51[4];
      v67 = v51[2];
      v68 = v66 + v65;
      if (v67 >= v66 + v65)
      {
        if (v68 < v65)
          goto LABEL_133;
        if (__OFSUB__(v68, v65))
          goto LABEL_134;
        v113 = &v51[2 * v65 + 5];
        v114 = v66;
        sub_24B2EE360((uint64_t (*)(uint64_t *, uint64_t *))sub_24B2ECF58, 0);
      }
      else
      {
        if (v66 < 0)
          goto LABEL_148;
        swift_retain();
        if (v66)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_257967598);
          v69 = sub_24B30BA28();
          *(_QWORD *)(v69 + 16) = v66;
          v70 = v51[2];
          v65 = v51[4];
          v71 = v70 - v65;
          if (__OFSUB__(v70, v65))
            goto LABEL_132;
        }
        else
        {
          v69 = MEMORY[0x24BEE4AF8];
          v71 = v67 - v65;
          if (__OFSUB__(v67, v65))
            goto LABEL_132;
        }
        v72 = v51[3];
        if (v71 >= v72)
        {
          v75 = 0;
          v73 = 0;
          v74 = v51[3];
        }
        else
        {
          v73 = v72 - v71;
          if (__OFSUB__(v72, v71))
            goto LABEL_141;
          v74 = v71;
          v75 = (char *)(v51 + 5);
        }
        if (v74 < 0)
          goto LABEL_135;
        v105 = v19;
        v76 = v69 + 32;
        if (v74)
        {
          v103 = v75;
          v104 = v69;
          v77 = &v51[2 * v65 + 5];
          v78 = 2 * v74;
          if ((unint64_t)v77 < v76 + 16 * v74 && v76 < (unint64_t)&v77[v78])
            goto LABEL_149;
          memcpy((void *)(v69 + 32), v77, v78 * 8);
          v75 = v103;
          v69 = v104;
        }
        if (v71 >= v72)
        {
          v79 = v74;
          v19 = v105;
          if (v66 < v74)
            goto LABEL_136;
        }
        else
        {
          v79 = v74 + v73;
          if (__OFADD__(v74, v73))
            goto LABEL_142;
          if (v79 < v74)
            goto LABEL_143;
          if (v75 && v73)
          {
            if (v73 < 0)
              goto LABEL_149;
            v80 = v69;
            v81 = (char *)(v76 + 16 * v74);
            v82 = 16 * v73;
            if (&v81[16 * v73] > v75 && v81 < &v75[v82])
              goto LABEL_149;
            memcpy(v81, v75, v82);
            v19 = v105;
            v69 = v80;
            if (v66 < v79)
              goto LABEL_136;
          }
          else
          {
            v19 = v105;
            if (v66 < v79)
              goto LABEL_136;
          }
        }
        *(_QWORD *)(v69 + 16) = v79;
        v83 = v69;
        swift_release();
        v113 = (_QWORD *)v83;
        sub_24B2ECEE8((uint64_t *)&v113, sub_24B309278);
        v84 = (uint64_t)v113;
        v85 = v51[3];
        if (v85 < 0)
          goto LABEL_137;
        if (v85)
        {
          v86 = v113[2];
          if (v86)
          {
            v87 = 0;
            v88 = v85 - 1;
            v89 = v113 + 5;
            while (v87 < *(_QWORD *)(v84 + 16))
            {
              if ((int64_t)v87 >= v51[3])
                goto LABEL_125;
              v90 = *((_QWORD *)v89 - 1);
              v91 = *v89;
              v51 = v115;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_24B2CAB54();
                v51 = v115;
              }
              v92 = v51[4];
              if ((int64_t)(v87 + v92) >= v51[2])
                v93 = v51[2];
              else
                v93 = 0;
              v94 = &v51[2 * v87 + 2 * (v92 - v93)];
              v94[5] = v90;
              *((_DWORD *)v94 + 12) = v91;
              if (v88 != v87)
              {
                ++v87;
                v89 += 4;
                if (v86 != v87)
                  continue;
              }
              swift_release();
              a5 = v102;
              v19 = v105;
              goto LABEL_111;
            }
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            break;
          }
        }
        swift_release();
        a5 = v102;
      }
LABEL_111:
      v13 = v116;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_24B2C89E8(0, v13[2] + 1, 1, v13);
      v96 = v13[2];
      v95 = v13[3];
      if (v96 >= v95 >> 1)
        v13 = sub_24B2C89E8((_QWORD *)(v95 > 1), v96 + 1, 1, v13);
      v13[2] = v96 + 1;
      v97 = (uint64_t)&v13[2 * v96 + 4];
      *(_QWORD *)v97 = v36;
      *(float *)(v97 + 8) = v50;
      v113 = v13 + 4;
      v114 = v96 + 1;
      sub_24B2EDC5C((uint64_t *)&v113);
      v116 = v13;
      v98 = v13[2];
      if (v98 <= a5)
      {
LABEL_28:
        v33 = v110;
      }
      else
      {
        v33 = v110;
        if (!v98)
          goto LABEL_138;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v99 = v13[2];
          if (!v99)
            goto LABEL_139;
        }
        else
        {
          v13 = sub_24B2D8424(v13);
          v99 = v13[2];
          if (!v99)
            goto LABEL_139;
        }
        v13[2] = v99 - 1;
        v116 = v13;
      }
      goto LABEL_29;
    }
    swift_bridgeObjectRelease();
    v20 = v15[3];
    if (!v20)
      goto LABEL_123;
  }
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
  __break(1u);
LABEL_148:
  sub_24B30BCC8();
  __break(1u);
LABEL_149:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

void HNSWIndex.search(query:radius:sorted:)()
{
  __asm { BR              X10 }
}

uint64_t sub_24B2EC7A8()
{
  uint64_t v0;
  float v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = sub_24B30BE48();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    v1 = v1 * v1;
  v3 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 32);
  if (v4 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v19 = sub_24B30BCE0();
    swift_bridgeObjectRelease();
    v6 = v19 - 1;
    if (!__OFSUB__(v19, 1))
      goto LABEL_5;
LABEL_26:
    __break(1u);
LABEL_27:
    v16 = MEMORY[0x24BD1CB90](0);
    goto LABEL_20;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 - 1;
  if (__OFSUB__(v5, 1))
    goto LABEL_26;
LABEL_5:
  v7 = v6 & ~(v6 >> 63);
  swift_beginAccess();
  v4 = 0;
  v8 = 0;
  while (1)
  {
    v9 = v7 - 1;
    if (v7 > 1)
      goto LABEL_11;
    if ((v7 != 1) | v8 & 1)
      break;
    v8 = 1;
    v9 = 1;
LABEL_11:
    v10 = *(_QWORD *)(v0 + 24);
    swift_beginAccess();
    v11 = *v3;
    if ((*v3 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v12 = MEMORY[0x24BD1CB90](v7, v11);
    }
    else
    {
      if (v7 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_24;
      }
      v12 = *(_QWORD *)(v11 + 8 * v7 + 32);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_24B30E190;
    *(_QWORD *)(inited + 32) = v4;
    v14 = sub_24B2EBDA0(v10, v12, v21, inited, 1);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_release();
    if (*(_QWORD *)(v14 + 16))
      v4 = *(_QWORD *)(v14 + 32);
    else
      v4 = 0;
    swift_bridgeObjectRelease();
    v7 = v9;
  }
  swift_beginAccess();
  v15 = *v3;
  if ((*v3 & 0xC000000000000001) != 0)
    goto LABEL_27;
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    JUMPOUT(0x24B2ECA7CLL);
  }
  v16 = *(_QWORD *)(v15 + 32);
  swift_retain();
LABEL_20:
  swift_endAccess();
  v17 = sub_24B2ECA8C(v16, v21, v4, v1);
  swift_release();
  v22 = v17;
  if ((v20 & 1) != 0)
  {
    sub_24B2ECEE8((uint64_t *)&v22, (uint64_t (*)(uint64_t))sub_24B2D8424);
    return (uint64_t)v22;
  }
  return (uint64_t)v17;
}

_QWORD *sub_24B2ECA8C(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t inited;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t (*v43)();
  uint64_t v44;
  float v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v8 = off_251C3BC88[*(char *)(v4 + 16)];
  v52 = *(char *)(v4 + 16);
  v53 = v4 + 24;
  swift_beginAccess();
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_46;
  v9 = *(_QWORD *)(v4 + 24);
  if (*(_QWORD *)(v9 + 16) <= a3)
LABEL_47:
    __break(1u);
  v10 = *(_QWORD *)(v9 + 8 * a3 + 32);
  swift_bridgeObjectRetain();
  v11 = ((float (*)(uint64_t, uint64_t))v8)(a2, v10);
  swift_bridgeObjectRelease();
  v56 = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674E0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24B30E190;
  *(_QWORD *)(inited + 32) = a3;
  *(float *)(inited + 40) = v11;
  v50 = (uint64_t *)(a1 + 32);
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 1;
  do
  {
    v15 = v14 - 1;
    v16 = inited + 16 * v15;
    v17 = *(_QWORD *)(v16 + 32);
    v18 = *(float *)(v16 + 40);
    *(_QWORD *)(inited + 16) = v15;
    v19 = v56;
    if (*(_QWORD *)(v56 + 16))
    {
      v20 = sub_24B30BE84();
      v21 = -1 << *(_BYTE *)(v19 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = *(_QWORD *)(v19 + 48);
        if (*(_QWORD *)(v23 + 8 * v22) == v17)
          goto LABEL_5;
        v24 = ~v21;
        while (1)
        {
          v22 = (v22 + 1) & v24;
          if (((*(_QWORD *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            break;
          if (*(_QWORD *)(v23 + 8 * v22) == v17)
            goto LABEL_5;
        }
      }
    }
    sub_24B2EF06C(&v55, v17);
    if (v18 <= a4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_24B2C89E8(0, v13[2] + 1, 1, v13);
      v26 = v13[2];
      v25 = v13[3];
      if (v26 >= v25 >> 1)
        v13 = sub_24B2C89E8((_QWORD *)(v25 > 1), v26 + 1, 1, v13);
      v13[2] = v26 + 1;
      v27 = (float *)&v13[2 * v26];
      *((_QWORD *)v27 + 4) = v17;
      v27[10] = v18;
    }
    swift_beginAccess();
    v28 = *v50;
    if (*(_QWORD *)(*v50 + 16))
    {
      v29 = sub_24B2E7D30(v17);
      v30 = MEMORY[0x24BEE4AF8];
      if ((v31 & 1) != 0)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
        swift_bridgeObjectRetain();
      }
      v32 = *(_QWORD *)(v30 + 16);
      if (v32)
      {
LABEL_23:
        v51 = v13;
        v33 = 0;
        v34 = v56;
        v35 = v56 + 56;
        while (1)
        {
          if (v33 >= *(_QWORD *)(v30 + 16))
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
            goto LABEL_47;
          }
          v36 = *(_QWORD *)(v30 + 32 + 8 * v33);
          if (!*(_QWORD *)(v34 + 16))
            goto LABEL_34;
          v37 = sub_24B30BE84();
          v38 = -1 << *(_BYTE *)(v34 + 32);
          v39 = v37 & ~v38;
          if (((*(_QWORD *)(v35 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
            goto LABEL_34;
          v40 = *(_QWORD *)(v34 + 48);
          if (*(_QWORD *)(v40 + 8 * v39) != v36)
            break;
LABEL_25:
          if (++v33 == v32)
          {
            swift_bridgeObjectRelease();
            v13 = v51;
            goto LABEL_5;
          }
        }
        v41 = ~v38;
        while (1)
        {
          v39 = (v39 + 1) & v41;
          if (((*(_QWORD *)(v35 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
            break;
          if (*(_QWORD *)(v40 + 8 * v39) == v36)
            goto LABEL_25;
        }
LABEL_34:
        if ((v36 & 0x8000000000000000) != 0)
          goto LABEL_44;
        if (v36 >= *(_QWORD *)(*(_QWORD *)v53 + 16))
          goto LABEL_45;
        v42 = (_QWORD *)inited;
        v43 = off_251C3BC88[v52];
        v44 = *(_QWORD *)(*(_QWORD *)v53 + 8 * v36 + 32);
        swift_bridgeObjectRetain();
        v45 = ((float (*)(uint64_t, uint64_t))v43)(a2, v44);
        swift_bridgeObjectRelease();
        if (v45 > a4)
        {
          inited = (uint64_t)v42;
        }
        else
        {
          inited = (uint64_t)v42;
          v47 = v42[2];
          v46 = v42[3];
          if (v47 >= v46 >> 1)
            inited = (uint64_t)sub_24B2C89E8((_QWORD *)(v46 > 1), v47 + 1, 1, v42);
          *(_QWORD *)(inited + 16) = v47 + 1;
          v48 = inited + 16 * v47;
          *(_QWORD *)(v48 + 32) = v36;
          *(float *)(v48 + 40) = v45;
        }
        goto LABEL_25;
      }
    }
    else
    {
      v30 = MEMORY[0x24BEE4AF8];
      v32 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v32)
        goto LABEL_23;
    }
    swift_bridgeObjectRelease();
LABEL_5:
    v14 = *(_QWORD *)(inited + 16);
  }
  while (v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_24B2ECEE8(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = a2(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = sub_24B2EDC5C(v7);
  *a1 = v4;
  return result;
}

BOOL sub_24B2ECF58(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

uint64_t HNSWIndex.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HNSWIndex.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t HNSWIndex.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968018);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2ED8E0();
  sub_24B30BEC0();
  v12 = *(_BYTE *)(v3 + 16);
  LOBYTE(v11) = 0;
  sub_24B2ED924();
  sub_24B30BDE8();
  if (!v2)
  {
    swift_beginAccess();
    v11 = *(_QWORD *)(v3 + 32);
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968030);
    sub_24B2ED9AC(&qword_257968038, &qword_257968040, (uint64_t)&protocol conformance descriptor for DirectedIndexGraph<A>, MEMORY[0x24BEE12A0]);
    sub_24B30BDE8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t HNSWIndex.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  HNSWIndex.init(from:)(a1);
  return v2;
}

uint64_t HNSWIndex.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v3 = v1;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968050);
  v5 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = v8;
  v9 = a1[3];
  v16 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_24B2ED8E0();
  sub_24B30BEB4();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v5;
    LOBYTE(v18) = 0;
    sub_24B2ED968();
    v11 = v15;
    sub_24B30BD7C();
    *(_BYTE *)(v3 + 16) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968030);
    v17 = 1;
    sub_24B2ED9AC(&qword_257968060, &qword_257968068, (uint64_t)&protocol conformance descriptor for DirectedIndexGraph<A>, MEMORY[0x24BEE12D0]);
    sub_24B30BD7C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v11);
    v13 = v18;
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = v13;
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v3;
}

uint64_t sub_24B2ED3BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = HNSWIndex.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_24B2ED410(_QWORD *a1)
{
  return HNSWIndex.encode(to:)(a1);
}

uint64_t sub_24B2ED430(uint64_t *a1, uint64_t a2)
{
  return HNSWIndex.search(query:k:ef:)(*a1, a2, 10);
}

void sub_24B2ED458()
{
  HNSWIndex.search(query:radius:sorted:)();
}

uint64_t (*sub_24B2ED47C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void (*sub_24B2ED4B8(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_24B2F0194(v4, a2);
  return sub_24B2ED504;
}

void sub_24B2ED504(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_24B2ED534(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_24B2D8228(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2ED604(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v9;
  char v10;
  char v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;

  v5 = v3;
  v9 = (_QWORD **)(v3 + 32);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16))
    return 0;
  sub_24B2E7D30(a1);
  if ((v10 & 1) == 0)
    return 0;
  sub_24B2E7D30(a2);
  if ((v11 & 1) == 0)
    return 0;
  swift_beginAccess();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_24B2ED8D4;
  *(_QWORD *)(v12 + 24) = 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v9;
  v33 = *v9;
  *v9 = (_QWORD *)0x8000000000000000;
  v16 = sub_24B2E7D30(a1);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_19;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_24B2E93C8();
      v14 = v33;
    }
  }
  else
  {
    sub_24B2E80DC(v19, isUniquelyReferenced_nonNull_native);
    v14 = v33;
    v21 = sub_24B2E7D30(a1);
    if ((v20 & 1) != (v22 & 1))
    {
LABEL_21:
      result = sub_24B30BE78();
      __break(1u);
      return result;
    }
    v16 = v21;
  }
  *v9 = v14;
  swift_bridgeObjectRelease();
  v24 = *v9;
  swift_bridgeObjectRetain();
  if ((v20 & 1) != 0)
    goto LABEL_14;
  v25 = sub_24B2ED8D4();
  v24[(v16 >> 6) + 8] |= 1 << v16;
  *(_QWORD *)(v24[6] + 8 * v16) = a1;
  *(_QWORD *)(v24[7] + 8 * v16) = v25;
  v26 = v24[2];
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
  {
    __break(1u);
    goto LABEL_21;
  }
  v24[2] = v28;
LABEL_14:
  v4 = v24[7];
  swift_bridgeObjectRelease();
  v14 = *(_QWORD **)(v4 + 8 * v16);
  v29 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 8 * v16) = v14;
  if ((v29 & 1) == 0)
  {
LABEL_19:
    v14 = sub_24B2C813C(0, v14[2] + 1, 1, v14);
    *(_QWORD *)(v4 + 8 * v16) = v14;
  }
  v31 = v14[2];
  v30 = v14[3];
  if (v31 >= v30 >> 1)
  {
    v14 = sub_24B2C813C((_QWORD *)(v30 > 1), v31 + 1, 1, v14);
    *(_QWORD *)(v4 + 8 * v16) = v14;
  }
  v14[2] = v31 + 1;
  v14[v31 + 4] = a2;
  swift_endAccess();
  swift_beginAccess();
  v32 = swift_isUniquelyReferenced_nonNull_native();
  v34 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0x8000000000000000;
  sub_24B2EF8D0(a1, a2, v32, a3);
  *(_QWORD *)(v5 + 40) = v34;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  return 1;
}

uint64_t sub_24B2ED8D4()
{
  return MEMORY[0x24BEE4AF8];
}

unint64_t sub_24B2ED8E0()
{
  unint64_t result;

  result = qword_257968020;
  if (!qword_257968020)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E45C, &type metadata for HNSWIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968020);
  }
  return result;
}

unint64_t sub_24B2ED924()
{
  unint64_t result;

  result = qword_257968028;
  if (!qword_257968028)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for DistanceMetric, &type metadata for DistanceMetric);
    atomic_store(result, (unint64_t *)&qword_257968028);
  }
  return result;
}

unint64_t sub_24B2ED968()
{
  unint64_t result;

  result = qword_257968058;
  if (!qword_257968058)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for DistanceMetric, &type metadata for DistanceMetric);
    atomic_store(result, (unint64_t *)&qword_257968058);
  }
  return result;
}

uint64_t sub_24B2ED9AC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257968030);
    v10 = sub_24B2EDA28(a2, a3);
    result = MEMORY[0x24BD1D214](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B2EDA28(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257968048);
    result = MEMORY[0x24BD1D214](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for HNSWIndex()
{
  return objc_opt_self();
}

uint64_t method lookup function for HNSWIndex()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HNSWIndex.__allocating_init(points:metric:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of HNSWIndex.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t storeEnumTagSinglePayload for HNSWIndex.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B2EDB04 + 4 * byte_24B30E2AD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B2EDB38 + 4 * byte_24B30E2A8[v4]))();
}

uint64_t sub_24B2EDB38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2EDB40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2EDB48);
  return result;
}

uint64_t sub_24B2EDB54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2EDB5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B2EDB60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2EDB68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HNSWIndex.CodingKeys()
{
  return &type metadata for HNSWIndex.CodingKeys;
}

unint64_t sub_24B2EDB88()
{
  unint64_t result;

  result = qword_257968148;
  if (!qword_257968148)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E434, &type metadata for HNSWIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968148);
  }
  return result;
}

unint64_t sub_24B2EDBD0()
{
  unint64_t result;

  result = qword_257968150;
  if (!qword_257968150)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E36C, &type metadata for HNSWIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968150);
  }
  return result;
}

unint64_t sub_24B2EDC18()
{
  unint64_t result;

  result = qword_257968158;
  if (!qword_257968158)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E394, &type metadata for HNSWIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968158);
  }
  return result;
}

uint64_t sub_24B2EDC5C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(float *)(v89 + 8);
          if (v90 >= *(float *)(v89 - 8))
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_24B2EEDD0((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst, (void (*)(char **, char **, char **))sub_24B307E54);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_24B3080B0((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967598);
    v8 = sub_24B30BA28();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(float *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 4))
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (float *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = v29[2];
          if (v31 >= *(v29 - 2))
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *(_QWORD *)v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((_QWORD *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_24B307CB4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_24B307CB4((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_24B2EEDD0((char *)(v11 + 16 * *(_QWORD *)v78), (char *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst, (void (*)(char **, char **, char **))sub_24B307E54);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B2EE360(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  int v91;
  char v92;
  uint64_t v93;
  int v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *__dst;
  uint64_t v110;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;

  v116 = a2;
  v4 = v2[1];
  result = sub_24B30BE0C();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_138;
    if (v4)
      return sub_24B30750C(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 <= -2)
    goto LABEL_147;
  v107 = result;
  v108 = v4;
  if (v4 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 != 1)
    {
      v37 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_104:
      v96 = v12;
      if (v37 >= 2)
      {
        v97 = *v2;
        do
        {
          v98 = v37 - 2;
          if (v37 < 2)
            goto LABEL_133;
          if (!v97)
            goto LABEL_146;
          v99 = v96;
          v100 = *(_QWORD *)&v96[16 * v98 + 32];
          v101 = *(_QWORD *)&v96[16 * v37 + 24];
          sub_24B2EEAE0((char *)(v97 + 16 * v100), (char *)(v97 + 16 * *(_QWORD *)&v96[16 * v37 + 16]), v97 + 16 * v101, __dst, a1);
          if (v3)
            break;
          if (v101 < v100)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v99 = sub_24B3080B0((uint64_t)v99);
          if (v98 >= *((_QWORD *)v99 + 2))
            goto LABEL_135;
          v102 = &v99[16 * v98 + 32];
          *(_QWORD *)v102 = v100;
          *((_QWORD *)v102 + 1) = v101;
          v103 = *((_QWORD *)v99 + 2);
          if (v37 > v103)
            goto LABEL_136;
          memmove(&v99[16 * v37 + 16], &v99[16 * v37 + 32], 16 * (v103 - v37));
          v96 = v99;
          *((_QWORD *)v99 + 2) = v103 - 1;
          v37 = v103 - 1;
        }
        while (v103 > 2);
      }
      swift_bridgeObjectRelease();
LABEL_116:
      *(_QWORD *)(v9 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v6 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967598);
    v8 = sub_24B30BA28();
    *(_QWORD *)(v8 + 16) = v7;
    v106 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *v2;
  v104 = v2;
  v105 = *v2 + 24;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v13 = v108;
  v110 = *v2;
  while (1)
  {
    v14 = v10++;
    if (v10 < v13)
    {
      v15 = (uint64_t *)(v11 + 16 * v10);
      v16 = *((_DWORD *)v15 + 2);
      v114 = *v15;
      v115 = v16;
      v17 = (uint64_t *)(v11 + 16 * v14);
      v18 = *((_DWORD *)v17 + 2);
      v112 = *v17;
      v113 = v18;
      v19 = a1(&v114, &v112);
      if (v3)
      {
LABEL_102:
        swift_bridgeObjectRelease();
        v9 = v106;
        goto LABEL_116;
      }
      v20 = v19;
      v10 = v14 + 2;
      if (v14 + 2 < v108)
      {
        v21 = v105 + 16 * v14;
        v22 = v21;
        while (1)
        {
          v23 = *(_DWORD *)(v22 + 16);
          v22 += 16;
          v114 = *(_QWORD *)(v21 + 8);
          v115 = v23;
          v24 = *(_DWORD *)v21;
          v112 = *(_QWORD *)(v21 - 8);
          v113 = v24;
          if (((v20 ^ a1(&v114, &v112)) & 1) != 0)
            break;
          ++v10;
          v21 = v22;
          if (v108 == v10)
          {
            v10 = v108;
            break;
          }
        }
      }
      v11 = v110;
      if ((v20 & 1) != 0)
      {
        if (v10 < v14)
          goto LABEL_142;
        v13 = v108;
        if (v14 < v10)
        {
          v25 = 16 * v10 - 16;
          v26 = 16 * v14;
          v27 = v10;
          v28 = v14;
          do
          {
            if (v28 != --v27)
            {
              if (!v110)
                goto LABEL_145;
              v30 = (_OWORD *)(v110 + v26);
              v31 = (_OWORD *)(v110 + v25);
              v32 = *(_QWORD *)(v110 + v26);
              v33 = *(_DWORD *)(v110 + v26 + 8);
              if (v26 != v25 || v30 >= v31 + 1)
                *v30 = *v31;
              v29 = v110 + v25;
              *(_QWORD *)v29 = v32;
              *(_DWORD *)(v29 + 8) = v33;
            }
            ++v28;
            v25 -= 16;
            v26 += 16;
          }
          while (v28 < v27);
        }
      }
      else
      {
        v13 = v108;
      }
    }
    if (v10 >= v13)
      goto LABEL_43;
    if (__OFSUB__(v10, v14))
      goto LABEL_139;
    if (v10 - v14 >= v107)
      goto LABEL_43;
    if (__OFADD__(v14, v107))
      goto LABEL_140;
    v34 = v14 + v107 >= v13 ? v13 : v14 + v107;
    if (v34 < v14)
      break;
    if (v10 != v34)
    {
      v87 = (uint64_t *)(v11 + 16 * v10);
      do
      {
        v88 = v87;
        v89 = v14;
        do
        {
          v90 = *((_DWORD *)v88 + 2);
          v114 = *v88;
          v115 = v90;
          v91 = *((_DWORD *)v88 - 2);
          v112 = *(v88 - 2);
          v113 = v91;
          v92 = a1(&v114, &v112);
          if (v3)
            goto LABEL_102;
          if ((v92 & 1) == 0)
            break;
          if (!v110)
            goto LABEL_144;
          v93 = *v88;
          v94 = *((_DWORD *)v88 + 2);
          *(_OWORD *)v88 = *((_OWORD *)v88 - 1);
          *((_DWORD *)v88 - 2) = v94;
          *(v88 - 2) = v93;
          v88 -= 2;
          ++v89;
        }
        while (v10 != v89);
        ++v10;
        v87 += 2;
      }
      while (v10 != v34);
      v10 = v34;
      if (v34 < v14)
        goto LABEL_137;
      goto LABEL_44;
    }
LABEL_43:
    if (v10 < v14)
      goto LABEL_137;
LABEL_44:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_24B307CB4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v36 = *((_QWORD *)v12 + 2);
    v35 = *((_QWORD *)v12 + 3);
    v37 = v36 + 1;
    v11 = v110;
    if (v36 >= v35 >> 1)
    {
      v95 = sub_24B307CB4((char *)(v35 > 1), v36 + 1, 1, v12);
      v11 = v110;
      v12 = v95;
    }
    *((_QWORD *)v12 + 2) = v37;
    v38 = v12 + 32;
    v39 = &v12[16 * v36 + 32];
    *(_QWORD *)v39 = v14;
    *((_QWORD *)v39 + 1) = v10;
    if (v36)
    {
      while (1)
      {
        v40 = v37 - 1;
        if (v37 >= 4)
        {
          v45 = &v38[16 * v37];
          v46 = *((_QWORD *)v45 - 8);
          v47 = *((_QWORD *)v45 - 7);
          v51 = __OFSUB__(v47, v46);
          v48 = v47 - v46;
          if (v51)
            goto LABEL_122;
          v50 = *((_QWORD *)v45 - 6);
          v49 = *((_QWORD *)v45 - 5);
          v51 = __OFSUB__(v49, v50);
          v43 = v49 - v50;
          v44 = v51;
          if (v51)
            goto LABEL_123;
          v52 = v37 - 2;
          v53 = &v38[16 * v37 - 32];
          v55 = *(_QWORD *)v53;
          v54 = *((_QWORD *)v53 + 1);
          v51 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          if (v51)
            goto LABEL_125;
          v51 = __OFADD__(v43, v56);
          v57 = v43 + v56;
          if (v51)
            goto LABEL_128;
          if (v57 >= v48)
          {
            v75 = &v38[16 * v40];
            v77 = *(_QWORD *)v75;
            v76 = *((_QWORD *)v75 + 1);
            v51 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v51)
              goto LABEL_132;
            v68 = v43 < v78;
            goto LABEL_80;
          }
        }
        else
        {
          if (v37 != 3)
          {
            v69 = *((_QWORD *)v12 + 4);
            v70 = *((_QWORD *)v12 + 5);
            v51 = __OFSUB__(v70, v69);
            v62 = v70 - v69;
            v63 = v51;
            goto LABEL_74;
          }
          v42 = *((_QWORD *)v12 + 4);
          v41 = *((_QWORD *)v12 + 5);
          v51 = __OFSUB__(v41, v42);
          v43 = v41 - v42;
          v44 = v51;
        }
        if ((v44 & 1) != 0)
          goto LABEL_124;
        v52 = v37 - 2;
        v58 = &v38[16 * v37 - 32];
        v60 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        v61 = __OFSUB__(v59, v60);
        v62 = v59 - v60;
        v63 = v61;
        if (v61)
          goto LABEL_127;
        v64 = &v38[16 * v40];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v51 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v51)
          goto LABEL_130;
        if (__OFADD__(v62, v67))
          goto LABEL_131;
        if (v62 + v67 >= v43)
        {
          v68 = v43 < v67;
LABEL_80:
          if (v68)
            v40 = v52;
          goto LABEL_82;
        }
LABEL_74:
        if ((v63 & 1) != 0)
          goto LABEL_126;
        v71 = &v38[16 * v40];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v51 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v51)
          goto LABEL_129;
        if (v74 < v62)
          goto LABEL_91;
LABEL_82:
        v79 = v40 - 1;
        if (v40 - 1 >= v37)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v11)
          goto LABEL_143;
        v80 = v10;
        v81 = v12;
        v82 = &v38[16 * v79];
        v83 = *(_QWORD *)v82;
        v84 = &v38[16 * v40];
        v85 = *((_QWORD *)v84 + 1);
        sub_24B2EEAE0((char *)(v11 + 16 * *(_QWORD *)v82), (char *)(v11 + 16 * *(_QWORD *)v84), v11 + 16 * v85, __dst, a1);
        if (v3)
          goto LABEL_102;
        if (v85 < v83)
          goto LABEL_119;
        if (v40 > *((_QWORD *)v81 + 2))
          goto LABEL_120;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v38[16 * v79 + 8] = v85;
        v86 = *((_QWORD *)v81 + 2);
        if (v40 >= v86)
          goto LABEL_121;
        v12 = v81;
        v37 = v86 - 1;
        memmove(&v38[16 * v40], v84 + 16, 16 * (v86 - 1 - v40));
        *((_QWORD *)v81 + 2) = v86 - 1;
        v11 = v110;
        v10 = v80;
        if (v86 <= 2)
          goto LABEL_91;
      }
    }
    v37 = 1;
LABEL_91:
    v13 = v108;
    if (v10 >= v108)
    {
      v9 = v106;
      v2 = v104;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B2EEAE0(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v5;
  char *v6;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  int v18;
  int v19;
  char v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  char *v30;
  uint64_t result;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;

  v6 = __dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 4;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 4;
  v39 = __src;
  v38 = __dst;
  if (v12 >= v15)
  {
    if (v13 > -16)
    {
      v22 = 16 * v15;
      if (__dst != a2 || &a2[v22] <= __dst)
        memmove(__dst, a2, 16 * v15);
      v23 = &v6[v22];
      v37 = &v6[v22];
      v39 = v8;
      if (v9 < v8 && (unint64_t)(v13 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v24 = (char *)(a3 - 16);
        v25 = v8;
        while (1)
        {
          v26 = *((_DWORD *)v23 - 2);
          v35 = *((_QWORD *)v23 - 2);
          v36 = v26;
          v27 = *((_QWORD *)v25 - 2);
          v25 -= 16;
          v28 = *((_DWORD *)v25 + 2);
          v33 = v27;
          v34 = v28;
          v29 = a5(&v35, &v33);
          if (v5)
            break;
          v30 = v24 + 16;
          if ((v29 & 1) != 0)
          {
            if (v30 != v8 || v24 >= v8)
              *(_OWORD *)v24 = *(_OWORD *)v25;
            v39 = v25;
            if (v25 <= v9)
              goto LABEL_44;
          }
          else
          {
            v37 = v23 - 16;
            if (v30 < v23 || v24 >= v23 || v30 != v23)
              *(_OWORD *)v24 = *((_OWORD *)v23 - 1);
            v25 = v8;
            v23 -= 16;
            if (v8 <= v9)
              goto LABEL_44;
          }
          v24 -= 16;
          v8 = v25;
          if (v23 <= v6)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v10 > -16)
  {
    v16 = 16 * v12;
    if (__dst != __src || &__src[v16] <= __dst)
      memmove(__dst, __src, v16);
    v17 = &v6[v16];
    v37 = v17;
    if ((unint64_t)v8 < a3 && (unint64_t)(v10 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      do
      {
        v18 = *((_DWORD *)v8 + 2);
        v35 = *(_QWORD *)v8;
        v36 = v18;
        v19 = *((_DWORD *)v6 + 2);
        v33 = *(_QWORD *)v6;
        v34 = v19;
        v20 = a5(&v35, &v33);
        if (v5)
          break;
        if ((v20 & 1) != 0)
        {
          v21 = v8 + 16;
          if (v9 < v8 || v9 >= v21 || v9 != v8)
            *(_OWORD *)v9 = *(_OWORD *)v8;
        }
        else
        {
          if (v9 != v6)
            *(_OWORD *)v9 = *(_OWORD *)v6;
          v6 += 16;
          v38 = v6;
          v21 = v8;
        }
        v9 += 16;
        v39 = v9;
        if (v6 >= v17)
          break;
        v8 = v21;
      }
      while ((unint64_t)v21 < a3);
    }
LABEL_44:
    sub_24B307E54(&v39, &v38, &v37);
    return 1;
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2EEDD0(char *__src, char *a2, unint64_t a3, char *__dst, void (*a5)(char **, char **, char **))
{
  char *v6;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t result;
  char *v27;
  char *v28;
  char *v29;

  v6 = __dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 4;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 4;
  v29 = __src;
  v28 = __dst;
  if (v12 >= v15)
  {
    if (v13 >= -15)
    {
      v21 = 16 * v15;
      if (__dst != a2 || &a2[v21] <= __dst)
        memmove(__dst, a2, 16 * v15);
      v22 = &v6[v21];
      v27 = &v6[v21];
      v29 = v8;
      if (v9 < v8 && (unint64_t)(v13 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v23 = (char *)(a3 - 16);
        do
        {
          v24 = v23 + 16;
          if (*((float *)v22 - 2) >= *((float *)v8 - 2))
          {
            v27 = v22 - 16;
            if (v24 < v22 || v23 >= v22 || v24 != v22)
              *(_OWORD *)v23 = *((_OWORD *)v22 - 1);
            v25 = v8;
            v22 -= 16;
            if (v8 <= v9)
              break;
          }
          else
          {
            v25 = v8 - 16;
            if (v24 != v8 || v23 >= v8)
              *(_OWORD *)v23 = *(_OWORD *)v25;
            v29 = v8 - 16;
            if (v25 <= v9)
              break;
          }
          v23 -= 16;
          v8 = v25;
        }
        while (v22 > v6);
      }
LABEL_44:
      a5(&v29, &v28, &v27);
      return 1;
    }
  }
  else if (v10 >= -15)
  {
    v16 = 16 * v12;
    if (__dst != __src || &__src[v16] <= __dst)
      memmove(__dst, __src, v16);
    v17 = &v6[v16];
    v27 = &v6[v16];
    if ((unint64_t)v8 < a3 && (unint64_t)(v10 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v18 = v6;
      while (1)
      {
        if (*((float *)v8 + 2) >= *((float *)v18 + 2))
        {
          v6 = v18 + 16;
          v20 = v18;
          v19 = v8;
          if (v9 == v18)
          {
            v18 += 16;
            if (v9 < v6)
              goto LABEL_22;
          }
          else
          {
            v18 += 16;
          }
        }
        else
        {
          v19 = v8 + 16;
          v20 = v8;
          if (v9 == v8 && v9 < v19)
            goto LABEL_22;
        }
        *(_OWORD *)v9 = *(_OWORD *)v20;
LABEL_22:
        v9 += 16;
        if (v18 < v17)
        {
          v8 = v19;
          if ((unint64_t)v19 < a3)
            continue;
        }
        v28 = v6;
        v29 = v9;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B2EF06C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_24B30BE84();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_24B2EF3D0(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_24B2EF164()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967B18);
  result = sub_24B30BC14();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_31;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_31;
          v16 = v6[v5];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_31:
              if (v28 >= 64)
                bzero((void *)(v2 + 56), 8 * v10);
              else
                *v6 = v26;
              v1 = v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_37;
                if (v5 >= v10)
                  goto LABEL_31;
                v16 = v6[v5];
                ++v17;
                if (v16)
                  goto LABEL_21;
              }
            }
            v5 = v17;
          }
        }
LABEL_21:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_24B30BE84();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_24B2EF3D0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_24B2EF164();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_24B2D7F24();
      goto LABEL_14;
    }
    sub_24B2EF4F0();
  }
  v8 = *v3;
  result = sub_24B30BE84();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_24B30BE6C();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_24B2EF4F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967B18);
  result = sub_24B30BC14();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_33:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_31;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
        break;
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_22:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_24B30BE84();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 2;
  if (v17 >= v10)
  {
LABEL_31:
    result = swift_release();
    v1 = v26;
    goto LABEL_33;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
  return result;
}

unint64_t sub_24B2EF73C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_24B30BBFC();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = sub_24B30BE84();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_24B2EF8D0(uint64_t a1, uint64_t a2, char a3, float a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_24B2E7D68(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_24B2E956C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(float *)(v18[7] + 4 * v12) = a4;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a1;
    v20[1] = a2;
    *(float *)(v18[7] + 4 * v12) = a4;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_24B2E8398(result, a3 & 1);
  result = sub_24B2E7D68(a1, a2);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  __swift_instantiateConcreteTypeFromMangledName(&qword_257968168);
  result = sub_24B30BE78();
  __break(1u);
  return result;
}

uint64_t sub_24B2EFA0C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_24B2E7D30(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_24B2E93C8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_24B2E80DC(result, a3 & 1);
  result = sub_24B2E7D30(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24B30BE78();
  __break(1u);
  return result;
}

uint64_t sub_24B2EFB44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v2 = a2;
  v20[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 16))
  {
    v20[0] = a1;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = 0;
      v6 = a2 + 56;
      v19 = -1 << *(_BYTE *)(a2 + 32);
      v7 = ~v19;
      while (1)
      {
        v8 = *(_QWORD *)(a1 + 32 + 8 * v5++);
        v9 = sub_24B30BE84();
        v10 = v9 & v7;
        if (((*(_QWORD *)(v6 + (((v9 & (unint64_t)v7) >> 3) & 0xFFFFFFFFFFFFF8)) >> (v9 & v7)) & 1) != 0)
          break;
LABEL_4:
        if (v5 == v4)
          return v2;
      }
      while (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10) != v8)
      {
        v10 = (v10 + 1) & v7;
        if (((*(_QWORD *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_4;
      }
      v20[1] = v5;
      v11 = (unint64_t)(63 - v19) >> 6;
      isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v11 < 0x81 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
      {
        MEMORY[0x24BDAC7A8](isStackAllocationSafe);
        v14 = (char *)&v18 - v13;
        memcpy((char *)&v18 - v13, (const void *)(v2 + 56), 8 * v11);
        v15 = sub_24B2EFDBC((uint64_t)v14, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = (void *)swift_slowAlloc();
        memcpy(v16, (const void *)(v2 + 56), 8 * v11);
        v15 = sub_24B2EFDBC((uint64_t)v16, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x24BD1D2BC](v16, -1, -1);
      }
      return v15;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t sub_24B2EFDBC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = (unint64_t *)result;
  v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v10 = *a5;
  v9 = a5[1];
  v11 = *(_QWORD *)(*a5 + 16);
  if (v9 == v11)
  {
LABEL_2:
    swift_retain();
    return sub_24B2EFF50(v6, a2, v8, a3);
  }
  else
  {
    v13 = a3 + 56;
    v14 = ~(-1 << *(_BYTE *)(a3 + 32));
    while (v9 < v11)
    {
      if (__OFADD__(v9, 1))
        goto LABEL_19;
      v15 = *(_QWORD *)(v10 + 32 + 8 * v9);
      a5[1] = v9 + 1;
      result = sub_24B30BE84();
      v16 = result & v14;
      v17 = (result & (unint64_t)v14) >> 6;
      v18 = 1 << (result & v14);
      if ((v18 & *(_QWORD *)(v13 + 8 * v17)) != 0)
      {
        v19 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v19 + 8 * v16) == v15)
        {
LABEL_14:
          v22 = v17;
          v23 = v6[v17];
          v6[v22] = v23 & ~v18;
          if ((v18 & v23) != 0)
          {
            if (__OFSUB__(v8--, 1))
              goto LABEL_20;
            if (!v8)
              return MEMORY[0x24BEE4B08];
          }
        }
        else
        {
          for (i = v16 + 1; ; i = v21 + 1)
          {
            v21 = i & v14;
            if (((*(_QWORD *)(v13 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              break;
            if (*(_QWORD *)(v19 + 8 * v21) == v15)
            {
              v17 = v21 >> 6;
              v18 = 1 << v21;
              goto LABEL_14;
            }
          }
        }
      }
      v9 = a5[1];
      v11 = *(_QWORD *)(v10 + 16);
      if (v9 == v11)
        goto LABEL_2;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_24B2EFF50(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967B18);
  result = sub_24B30BC20();
  v9 = result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = sub_24B30BE84();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void (*sub_24B2F0194(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x50uLL);
  *a1 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_24B2F047C(v4);
  v4[9] = sub_24B2F024C(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_24B2F0210;
}

void sub_24B2F0210(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_24B2F024C(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*result)(uint64_t **, char);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  v8[2] = v4;
  v9 = *v4;
  v11 = sub_24B2E7D30(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(*(_QWORD *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *v8 = v17;
        return sub_24B2F0368;
      }
LABEL_11:
      v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_24B2E93C8();
      goto LABEL_7;
    }
    sub_24B2E80DC(v14, a3 & 1);
    v18 = sub_24B2E7D30(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      v11 = v18;
      v8[3] = v18;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **, char))sub_24B30BE78();
  __break(1u);
  return result;
}

void sub_24B2F0368(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = **a1;
  LOBYTE(v4) = *((_BYTE *)*a1 + 32);
  if ((a2 & 1) != 0)
  {
    if (!v3)
      goto LABEL_10;
    v5 = v2[3];
    v6 = *(_QWORD **)v2[2];
    if (((*a1)[4] & 1) != 0)
    {
LABEL_9:
      *(_QWORD *)(v6[7] + 8 * v5) = v3;
LABEL_14:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      free(v2);
      return;
    }
    v7 = v2[1];
    v6[(v5 >> 6) + 8] |= 1 << v5;
    v8 = 8 * v5;
    *(_QWORD *)(v6[6] + v8) = v7;
    *(_QWORD *)(v6[7] + v8) = v3;
    v9 = v6[2];
    v10 = __OFADD__(v9, 1);
    v4 = v9 + 1;
    if (!v10)
      goto LABEL_13;
    __break(1u);
  }
  if (!v3)
  {
LABEL_10:
    if ((v4 & 1) != 0)
      sub_24B2EF73C(v2[3], *(_QWORD *)v2[2]);
    goto LABEL_14;
  }
  v5 = v2[3];
  v6 = *(_QWORD **)v2[2];
  if ((v4 & 1) != 0)
    goto LABEL_9;
  v11 = v2[1];
  v6[(v5 >> 6) + 8] |= 1 << v5;
  v12 = 8 * v5;
  *(_QWORD *)(v6[6] + v12) = v11;
  *(_QWORD *)(v6[7] + v12) = v3;
  v13 = v6[2];
  v10 = __OFADD__(v13, 1);
  v4 = v13 + 1;
  if (!v10)
  {
LABEL_13:
    v6[2] = v4;
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t (*sub_24B2F047C(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_24B2F049C;
}

uint64_t sub_24B2F049C(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_24B2F04A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v23 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DC06C(0, v4, 0);
  v5 = v23;
  v10 = (unint64_t *)(a1 + 32);
  v21 = a4 + 32;
  v11 = *(char *)(a2 + 16);
  v12 = *(_QWORD *)(a4 + 16);
  while (1)
  {
    v14 = *v10++;
    v13 = v14;
    if (v14 >= v12)
      break;
    v15 = off_251C3BC88[v11];
    v16 = *(_QWORD *)(v21 + 8 * v13);
    swift_bridgeObjectRetain();
    v17 = ((float (*)(uint64_t, uint64_t))v15)(a3, v16);
    result = swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v23 + 16);
    v18 = *(_QWORD *)(v23 + 24);
    if (v19 >= v18 >> 1)
      result = sub_24B2DC06C(v18 > 1, v19 + 1, 1);
    *(_QWORD *)(v23 + 16) = v19 + 1;
    v20 = v23 + 16 * v19;
    *(_QWORD *)(v20 + 32) = v13;
    *(float *)(v20 + 40) = v17;
    if (!--v4)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2F05E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_24B30BB24();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_24B2EF06C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_24B2F0654()
{
  return swift_deallocObject();
}

uint64_t sub_24B2F0664()
{
  uint64_t v0;

  v0 = sub_24B30B7A0();
  __swift_allocate_value_buffer(v0, qword_25796F248);
  __swift_project_value_buffer(v0, (uint64_t)qword_25796F248);
  return sub_24B30B794();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t dispatch thunk of SearchIndex.search(query:k:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of SearchIndex.search(query:radius:sorted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t sub_24B2F0734(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24B2D8424(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_24B2F2D84(v5);
  *a1 = v2;
  return result;
}

uint64_t VPTree.Node.pointIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VPTree.Node.pointIndex.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*VPTree.Node.pointIndex.modify())()
{
  return nullsub_1;
}

float VPTree.Node.threshold.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void VPTree.Node.threshold.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*VPTree.Node.threshold.modify())()
{
  return nullsub_1;
}

uint64_t VPTree.Node.left.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t VPTree.Node.left.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*VPTree.Node.left.modify())()
{
  return nullsub_1;
}

uint64_t VPTree.Node.right.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t VPTree.Node.right.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*VPTree.Node.right.modify())()
{
  return nullsub_1;
}

uint64_t VPTree.Node.storedIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VPTree.Node.storedIndices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*VPTree.Node.storedIndices.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B2F0878()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24B2F08AC + 4 * byte_24B30E4D0[*v0]))(0x646E49746E696F70, 0xEA00000000007865);
}

uint64_t sub_24B2F08AC()
{
  return 0x6C6F687365726874;
}

uint64_t sub_24B2F08C8()
{
  return 1952867692;
}

uint64_t sub_24B2F08D8()
{
  return 0x7468676972;
}

uint64_t sub_24B2F08EC()
{
  return 0x6E496465726F7473;
}

uint64_t sub_24B2F0910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24B2F4960(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24B2F0934()
{
  sub_24B2F0BA0();
  return sub_24B30BECC();
}

uint64_t sub_24B2F095C()
{
  sub_24B2F0BA0();
  return sub_24B30BED8();
}

uint64_t VPTree.Node.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968170);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 16);
  v12 = *(unsigned __int8 *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + 32);
  v10 = *(unsigned __int8 *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2F0BA0();
  sub_24B30BEC0();
  v19 = 0;
  sub_24B30BDDC();
  if (!v2)
  {
    v18 = 1;
    sub_24B30BDD0();
    v17 = 2;
    sub_24B30BDAC();
    v16 = 3;
    sub_24B30BDAC();
    v15 = v9;
    v14 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967758);
    sub_24B2F0E44(&qword_257967760, MEMORY[0x24BEE1770], MEMORY[0x24BEE12A0]);
    sub_24B30BDB8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24B2F0BA0()
{
  unint64_t result;

  result = qword_257968178;
  if (!qword_257968178)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E850, &type metadata for VPTree.Node.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968178);
  }
  return result;
}

uint64_t VPTree.Node.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968180);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2F0BA0();
  sub_24B30BEB4();
  if (!v2)
  {
    v27 = 0;
    v9 = sub_24B30BD70();
    v26 = 1;
    sub_24B30BD64();
    v11 = v10;
    v25 = 2;
    v12 = sub_24B30BD40();
    v21 = v13;
    v24 = 3;
    v14 = sub_24B30BD40();
    v19 = v16;
    v20 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967758);
    v22 = 4;
    sub_24B2F0E44(&qword_257967770, MEMORY[0x24BEE1798], MEMORY[0x24BEE12D0]);
    sub_24B30BD4C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = v21 & 1;
    *(_QWORD *)(a2 + 32) = v20;
    *(_BYTE *)(a2 + 40) = v19 & 1;
    *(_QWORD *)(a2 + 48) = v17;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2F0E44(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257967758);
    v8 = a2;
    result = MEMORY[0x24BD1D214](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24B2F0EA4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_24B2F0EB0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_24B2F0EBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VPTree.Node.init(from:)(a1, a2);
}

uint64_t sub_24B2F0ED0(_QWORD *a1)
{
  return VPTree.Node.encode(to:)(a1);
}

void VPTree.metric.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t VPTree.points.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t VPTree.nodes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

float sub_24B2F0F58(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2;
  float __C;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    __break(1u);
  __C = NAN;
  vDSP_distancesq((const float *)(a1 + 32), 1, (const float *)(a2 + 32), 1, &__C, v2);
  return sqrtf(__C);
}

uint64_t sub_24B2F0FD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24B2E9A40(*a1, *a2);
}

uint64_t sub_24B2F0FE4()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

uint64_t sub_24B2F105C()
{
  sub_24B30B914();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2F10B0()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

uint64_t sub_24B2F1124@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24B30BD28();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24B2F1180(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x63697274656DLL;
  if (*v1)
    v2 = 0x7365646F6ELL;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24B2F11B8()
{
  _BYTE *v0;

  if (*v0)
    return 0x7365646F6ELL;
  else
    return 0x63697274656DLL;
}

uint64_t sub_24B2F11EC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24B30BD28();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24B2F124C()
{
  sub_24B2F538C();
  return sub_24B30BECC();
}

uint64_t sub_24B2F1274()
{
  sub_24B2F538C();
  return sub_24B30BED8();
}

uint64_t VPTree.__allocating_init(points:metric:maxNodePoints:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  VPTree.init(points:metric:maxNodePoints:)(a1, a2, a3);
  return v6;
}

uint64_t VPTree.init(points:metric:maxNodePoints:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  float (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = MEMORY[0x24BEE4AF8];
  v6 = *a2;
  *(_QWORD *)(v3 + 32) = v5;
  *(_BYTE *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 40) = off_251C3BFD0[v6];
  *(_QWORD *)(v3 + 48) = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    swift_beginAccess();
    *(_QWORD *)(v3 + 24) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v8 = *(float (**)(uint64_t, uint64_t))(v3 + 40);
    v9 = *(_QWORD *)(v3 + 48);
    swift_retain();
    v10 = sub_24B2F4BA0(a1, v8, v9, a3);
    swift_release();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = v10;
  }
  swift_bridgeObjectRelease();
  return v3;
}

BOOL VPTree.isEmpty.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16) == 0;
}

uint64_t VPTree.search(query:k:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  float (*v23)(uint64_t, uint64_t);
  float v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  __int128 v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  __int128 v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char __dst;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  _QWORD *v139;

  v131 = v2 + 24;
  result = swift_beginAccess();
  v136 = v2;
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16))
    return MEMORY[0x24BEE4AF8];
  if (__OFADD__(a2, 1))
    goto LABEL_210;
  v5 = sub_24B2C89E8(0, (a2 + 1) & ~((a2 + 1) >> 63), 0, MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967580);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 40;
  if (v7 < 40)
    v8 = v7 - 33;
  v6[2] = v8 >> 3;
  v6[3] = 0;
  v6[4] = 0;
  sub_24B2CB5E0((uint64_t)(v6 + 2), v6 + 5, 1uLL, (uint64_t)&unk_251C3A220);
  v139 = v6;
  if (!v6[3])
  {
LABEL_178:
    swift_release();
    return (uint64_t)v5;
  }
  v130 = v136 + 32;
  result = swift_beginAccess();
  v9 = v6[3];
  v10 = INFINITY;
  while (1)
  {
    if (!v9)
      goto LABEL_183;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_24B2CAC0C();
      v6 = v139;
    }
    v13 = v6[4];
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    v15 = v6[v13 + 5];
    v16 = v6[3];
    if (v14 >= v6[2])
      v14 = 0;
    v6[4] = v14;
    if (__OFSUB__(v16, 1))
      goto LABEL_185;
    v6[3] = v16 - 1;
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_186;
    if (v15 >= *(_QWORD *)(*(_QWORD *)v130 + 16))
      goto LABEL_187;
    v17 = *(_QWORD *)v130 + 56 * v15;
    v18 = *(_QWORD *)(v17 + 32);
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_188;
    if (v18 >= *(_QWORD *)(*(_QWORD *)v131 + 16))
      goto LABEL_189;
    v19 = *(float *)(v17 + 40);
    v20 = *(_BYTE *)(v17 + 56);
    v132 = *(_QWORD *)(v17 + 48);
    v133 = *(_QWORD *)(v17 + 64);
    __dst = *(_BYTE *)(v17 + 72);
    v21 = *(_QWORD *)(v17 + 80);
    v22 = *(_QWORD *)(*(_QWORD *)v131 + 8 * v18 + 32);
    v23 = *(float (**)(uint64_t, uint64_t))(v136 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v24 = v23(a1, v22);
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v24 < v10)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_24B2C89E8(0, v5[2] + 1, 1, v5);
      v26 = v5[2];
      v25 = v5[3];
      if (v26 >= v25 >> 1)
        v5 = sub_24B2C89E8((_QWORD *)(v25 > 1), v26 + 1, 1, v5);
      v5[2] = v26 + 1;
      v27 = (uint64_t)&v5[2 * v26 + 4];
      *(_QWORD *)v27 = v18;
      *(float *)(v27 + 8) = v24;
      v137 = v5 + 4;
      v138 = v26 + 1;
      result = sub_24B2F2D84((uint64_t *)&v137);
      v28 = v5[2];
      if (v28 > a2)
      {
        if (!v28)
          goto LABEL_190;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          v29 = v5[2];
          if (!v29)
            goto LABEL_177;
        }
        else
        {
          result = (uint64_t)sub_24B2D8424(v5);
          v5 = (_QWORD *)result;
          v29 = *(_QWORD *)(result + 16);
          if (!v29)
          {
LABEL_177:
            __break(1u);
            goto LABEL_178;
          }
        }
        v5[2] = v29 - 1;
        if (v29 == 1)
          goto LABEL_191;
        v30 = v5[2 * v29];
        if ((v30 & 0x8000000000000000) != 0)
          goto LABEL_192;
        if (v30 >= *(_QWORD *)(*(_QWORD *)v131 + 16))
          goto LABEL_193;
        v31 = *(float (**)(uint64_t, uint64_t))(v136 + 40);
        v32 = *(_QWORD *)(*(_QWORD *)v131 + 8 * v30 + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        v10 = v31(a1, v32);
        swift_bridgeObjectRelease();
        result = swift_release();
      }
    }
    if (v21)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v33 = sub_24B2F4810(v21, v136, a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v34 = *(_QWORD *)(v33 + 16);
      if (v34)
      {
        v129 = v20;
        swift_bridgeObjectRetain();
        v35 = (_DWORD *)(v33 + 40);
        while (1)
        {
          v36 = *((_QWORD *)v35 - 1);
          v37 = *v35;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = sub_24B2C89E8(0, v5[2] + 1, 1, v5);
          v39 = v5[2];
          v38 = v5[3];
          if (v39 >= v38 >> 1)
            v5 = sub_24B2C89E8((_QWORD *)(v38 > 1), v39 + 1, 1, v5);
          v5[2] = v39 + 1;
          v40 = (uint64_t)&v5[2 * v39 + 4];
          *(_QWORD *)v40 = v36;
          *(_DWORD *)(v40 + 8) = v37;
          v137 = v5 + 4;
          v138 = v39 + 1;
          result = sub_24B2F2D84((uint64_t *)&v137);
          v41 = v5[2];
          if (v41 > a2)
          {
            if (!v41)
            {
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
              goto LABEL_184;
            }
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
            {
              v42 = v5[2];
              if (!v42)
                goto LABEL_182;
            }
            else
            {
              result = (uint64_t)sub_24B2D8424(v5);
              v5 = (_QWORD *)result;
              v42 = *(_QWORD *)(result + 16);
              if (!v42)
                goto LABEL_182;
            }
            v5[2] = v42 - 1;
          }
          v35 += 4;
          if (!--v34)
          {
            swift_bridgeObjectRelease();
            v20 = v129;
            break;
          }
        }
      }
      result = swift_bridgeObjectRelease();
    }
    if (v24 >= v19)
    {
      v49 = __dst;
      if ((float)(v19 - v10) > v24)
        v49 = 1;
      if ((v49 & 1) == 0)
      {
        v50 = (uint64_t)v139;
        v51 = v139[3];
        v52 = v51 + 1;
        if (__OFADD__(v51, 1))
          goto LABEL_196;
        result = swift_isUniquelyReferenced_nonNull_native();
        v53 = *(_QWORD *)(v50 + 16);
        if (v53 >= v52 && (result & 1) != 0)
        {
          v54 = v50;
        }
        else
        {
          if (v53 >= v52)
          {
            v54 = swift_allocObject();
            v64 = *(_OWORD *)(v50 + 24);
            *(_QWORD *)(v54 + 16) = v53;
            *(_OWORD *)(v54 + 24) = v64;
            if (*(uint64_t *)(v50 + 24) > 0)
              sub_24B2F42C4(v54 + 16, (char *)(v54 + 40), (_QWORD *)(v50 + 16), (char *)(v50 + 40));
          }
          else
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            sub_24B30B77C();
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v60 = *(_QWORD *)(v50 + 24);
              v54 = swift_allocObject();
              v61 = _swift_stdlib_malloc_size((const void *)v54);
              v62 = v61 - 40;
              if (v61 < 40)
                v62 = v61 - 33;
              *(_QWORD *)(v54 + 16) = v62 >> 3;
              *(_QWORD *)(v54 + 24) = v60;
              *(_QWORD *)(v54 + 32) = 0;
              if (v60 > 0)
              {
                swift_retain();
                sub_24B2F3948(v54 + 16, (char *)(v54 + 40), (_QWORD *)(v50 + 16), (char *)(v50 + 40));
                *(_QWORD *)(v50 + 24) = 0;
                swift_release();
              }
            }
            else
            {
              v54 = swift_allocObject();
              v89 = _swift_stdlib_malloc_size((const void *)v54);
              v90 = v89 - 40;
              if (v89 < 40)
                v90 = v89 - 33;
              v91 = *(_QWORD *)(v50 + 24);
              *(_QWORD *)(v54 + 16) = v90 >> 3;
              *(_QWORD *)(v54 + 24) = v91;
              *(_QWORD *)(v54 + 32) = 0;
              if (*(uint64_t *)(v50 + 24) > 0)
                sub_24B2F3D10(v54 + 16, (char *)(v54 + 40), (_QWORD *)(v50 + 16), (char *)(v50 + 40));
            }
          }
          result = swift_release();
          v139 = (_QWORD *)v54;
        }
        v93 = *(_QWORD *)(v54 + 24);
        v92 = *(_QWORD *)(v54 + 32);
        v74 = __OFADD__(v92, v93);
        v94 = v92 + v93;
        if (v74)
          goto LABEL_200;
        if (v93 < 0)
        {
          if (v94 < 0)
          {
            v98 = *(_QWORD *)(v54 + 16);
            v74 = __OFADD__(v94, v98);
            v94 += v98;
            if (v74)
              goto LABEL_213;
          }
        }
        else
        {
          v95 = *(_QWORD *)(v54 + 16);
          v96 = __OFSUB__(v94, v95);
          v97 = v94 - v95;
          if (v97 < 0 == v96)
          {
            v94 = v97;
            if (v96)
              goto LABEL_207;
          }
        }
        *(_QWORD *)(v54 + 8 * v94 + 40) = v133;
        v99 = *(_QWORD *)(v54 + 24);
        v74 = __OFADD__(v99, 1);
        v100 = v99 + 1;
        if (v74)
          goto LABEL_201;
        *(_QWORD *)(v54 + 24) = v100;
      }
      result = swift_bridgeObjectRelease();
      if (v24 >= (float)(v19 + v10))
        v101 = 1;
      else
        v101 = v20;
      v6 = v139;
      if ((v101 & 1) == 0)
      {
        v102 = v139[3];
        v103 = v102 + 1;
        if (__OFADD__(v102, 1))
          goto LABEL_202;
        result = swift_isUniquelyReferenced_nonNull_native();
        v104 = v6[2];
        if (v104 >= v103 && (result & 1) != 0)
        {
          v83 = (uint64_t)v6;
        }
        else
        {
          if (v104 >= v103)
          {
            v83 = swift_allocObject();
            v109 = *(_OWORD *)(v6 + 3);
            *(_QWORD *)(v83 + 16) = v104;
            *(_OWORD *)(v83 + 24) = v109;
            if ((uint64_t)v6[3] > 0)
              sub_24B2F42C4(v83 + 16, (char *)(v83 + 40), v6 + 2, (char *)v6 + 40);
          }
          else
          {
            v105 = swift_isUniquelyReferenced_nonNull_native();
            sub_24B30B77C();
            if ((v105 & 1) != 0)
            {
              v106 = v6[3];
              v83 = swift_allocObject();
              v107 = _swift_stdlib_malloc_size((const void *)v83);
              v108 = v107 - 40;
              if (v107 < 40)
                v108 = v107 - 33;
              *(_QWORD *)(v83 + 16) = v108 >> 3;
              *(_QWORD *)(v83 + 24) = v106;
              *(_QWORD *)(v83 + 32) = 0;
              if (v106 > 0)
              {
                swift_retain();
                sub_24B2F3948(v83 + 16, (char *)(v83 + 40), v6 + 2, (char *)v6 + 40);
                v6[3] = 0;
                swift_release();
              }
            }
            else
            {
              v83 = swift_allocObject();
              v118 = _swift_stdlib_malloc_size((const void *)v83);
              v119 = v118 - 40;
              if (v118 < 40)
                v119 = v118 - 33;
              v120 = v6[3];
              *(_QWORD *)(v83 + 16) = v119 >> 3;
              *(_QWORD *)(v83 + 24) = v120;
              *(_QWORD *)(v83 + 32) = 0;
              if ((uint64_t)v6[3] > 0)
                sub_24B2F3D10(v83 + 16, (char *)(v83 + 40), v6 + 2, (char *)v6 + 40);
            }
          }
          result = swift_release();
          v139 = (_QWORD *)v83;
        }
        v122 = *(_QWORD *)(v83 + 24);
        v121 = *(_QWORD *)(v83 + 32);
        v74 = __OFADD__(v121, v122);
        v123 = v121 + v122;
        if (v74)
          goto LABEL_204;
        if (v122 < 0)
        {
          if (v123 < 0)
          {
            v127 = *(_QWORD *)(v83 + 16);
            v74 = __OFADD__(v123, v127);
            v123 += v127;
            if (v74)
              goto LABEL_214;
          }
        }
        else
        {
          v124 = *(_QWORD *)(v83 + 16);
          v125 = __OFSUB__(v123, v124);
          v126 = v123 - v124;
          if (v126 < 0 == v125)
          {
            v123 = v126;
            if (v125)
              goto LABEL_209;
          }
        }
        *(_QWORD *)(v83 + 8 * v123 + 40) = v132;
        v128 = *(_QWORD *)(v83 + 24);
        v74 = __OFADD__(v128, 1);
        v12 = v128 + 1;
        if (v74)
          goto LABEL_205;
LABEL_9:
        *(_QWORD *)(v83 + 24) = v12;
        v6 = (_QWORD *)v83;
      }
    }
    else
    {
      if (v24 >= (float)(v19 + v10))
        v43 = 1;
      else
        v43 = v20;
      if ((v43 & 1) == 0)
      {
        v44 = (uint64_t)v139;
        v45 = v139[3];
        v46 = v45 + 1;
        if (__OFADD__(v45, 1))
          goto LABEL_195;
        result = swift_isUniquelyReferenced_nonNull_native();
        v47 = *(_QWORD *)(v44 + 16);
        if (v47 >= v46 && (result & 1) != 0)
        {
          v48 = v44;
        }
        else
        {
          if (v47 >= v46)
          {
            v48 = swift_allocObject();
            v63 = *(_OWORD *)(v44 + 24);
            *(_QWORD *)(v48 + 16) = v47;
            *(_OWORD *)(v48 + 24) = v63;
            if (*(uint64_t *)(v44 + 24) > 0)
              sub_24B2F42C4(v48 + 16, (char *)(v48 + 40), (_QWORD *)(v44 + 16), (char *)(v44 + 40));
          }
          else
          {
            v55 = swift_isUniquelyReferenced_nonNull_native();
            sub_24B30B77C();
            if ((v55 & 1) != 0)
            {
              v56 = *(_QWORD *)(v44 + 24);
              v48 = swift_allocObject();
              v57 = _swift_stdlib_malloc_size((const void *)v48);
              v58 = v57 - 40;
              if (v57 < 40)
                v58 = v57 - 33;
              *(_QWORD *)(v48 + 16) = v58 >> 3;
              *(_QWORD *)(v48 + 24) = v56;
              *(_QWORD *)(v48 + 32) = 0;
              if (v56 > 0)
              {
                swift_retain();
                sub_24B2F3948(v48 + 16, (char *)(v48 + 40), (_QWORD *)(v44 + 16), (char *)(v44 + 40));
                *(_QWORD *)(v44 + 24) = 0;
                swift_release();
              }
            }
            else
            {
              v48 = swift_allocObject();
              v67 = _swift_stdlib_malloc_size((const void *)v48);
              v68 = v67 - 40;
              if (v67 < 40)
                v68 = v67 - 33;
              v69 = *(_QWORD *)(v44 + 24);
              *(_QWORD *)(v48 + 16) = v68 >> 3;
              *(_QWORD *)(v48 + 24) = v69;
              *(_QWORD *)(v48 + 32) = 0;
              if (*(uint64_t *)(v44 + 24) > 0)
                sub_24B2F3D10(v48 + 16, (char *)(v48 + 40), (_QWORD *)(v44 + 16), (char *)(v44 + 40));
            }
          }
          result = swift_release();
          v139 = (_QWORD *)v48;
        }
        v71 = *(_QWORD *)(v48 + 24);
        v70 = *(_QWORD *)(v48 + 32);
        v74 = __OFADD__(v70, v71);
        v72 = v70 + v71;
        if (v74)
          goto LABEL_197;
        if (v71 < 0)
        {
          if (v72 < 0)
          {
            v76 = *(_QWORD *)(v48 + 16);
            v74 = __OFADD__(v72, v76);
            v72 += v76;
            if (v74)
              goto LABEL_212;
          }
        }
        else
        {
          v73 = *(_QWORD *)(v48 + 16);
          v74 = __OFSUB__(v72, v73);
          v75 = v72 - v73;
          if (v75 < 0 == v74)
          {
            v72 = v75;
            if (v74)
              goto LABEL_206;
          }
        }
        *(_QWORD *)(v48 + 8 * v72 + 40) = v132;
        v77 = *(_QWORD *)(v48 + 24);
        v74 = __OFADD__(v77, 1);
        v78 = v77 + 1;
        if (v74)
          goto LABEL_198;
        *(_QWORD *)(v48 + 24) = v78;
      }
      result = swift_bridgeObjectRelease();
      v79 = __dst;
      if ((float)(v19 - v10) > v24)
        v79 = 1;
      v6 = v139;
      if ((v79 & 1) == 0)
      {
        v80 = v139[3];
        v81 = v80 + 1;
        if (__OFADD__(v80, 1))
          goto LABEL_199;
        result = swift_isUniquelyReferenced_nonNull_native();
        v82 = v6[2];
        if (v82 >= v81 && (result & 1) != 0)
        {
          v83 = (uint64_t)v6;
        }
        else
        {
          if (v82 >= v81)
          {
            v83 = swift_allocObject();
            v88 = *(_OWORD *)(v6 + 3);
            *(_QWORD *)(v83 + 16) = v82;
            *(_OWORD *)(v83 + 24) = v88;
            if ((uint64_t)v6[3] > 0)
              sub_24B2F42C4(v83 + 16, (char *)(v83 + 40), v6 + 2, (char *)v6 + 40);
          }
          else
          {
            v84 = swift_isUniquelyReferenced_nonNull_native();
            sub_24B30B77C();
            if ((v84 & 1) != 0)
            {
              v85 = v6[3];
              v83 = swift_allocObject();
              v86 = _swift_stdlib_malloc_size((const void *)v83);
              v87 = v86 - 40;
              if (v86 < 40)
                v87 = v86 - 33;
              *(_QWORD *)(v83 + 16) = v87 >> 3;
              *(_QWORD *)(v83 + 24) = v85;
              *(_QWORD *)(v83 + 32) = 0;
              if (v85 > 0)
              {
                swift_retain();
                sub_24B2F3948(v83 + 16, (char *)(v83 + 40), v6 + 2, (char *)v6 + 40);
                v6[3] = 0;
                swift_release();
              }
            }
            else
            {
              v83 = swift_allocObject();
              v110 = _swift_stdlib_malloc_size((const void *)v83);
              v111 = v110 - 40;
              if (v110 < 40)
                v111 = v110 - 33;
              v112 = v6[3];
              *(_QWORD *)(v83 + 16) = v111 >> 3;
              *(_QWORD *)(v83 + 24) = v112;
              *(_QWORD *)(v83 + 32) = 0;
              if ((uint64_t)v6[3] > 0)
                sub_24B2F3D10(v83 + 16, (char *)(v83 + 40), v6 + 2, (char *)v6 + 40);
            }
          }
          result = swift_release();
          v139 = (_QWORD *)v83;
        }
        v114 = *(_QWORD *)(v83 + 24);
        v113 = *(_QWORD *)(v83 + 32);
        v74 = __OFADD__(v113, v114);
        v66 = v113 + v114;
        if (v74)
          goto LABEL_203;
        if (v114 < 0)
        {
          if (v66 < 0)
          {
            v65 = *(_QWORD *)(v83 + 16);
            v74 = __OFADD__(v66, v65);
            v66 += v65;
            if (v74)
              goto LABEL_211;
          }
        }
        else
        {
          v115 = *(_QWORD *)(v83 + 16);
          v116 = __OFSUB__(v66, v115);
          v117 = v66 - v115;
          if (v117 < 0 == v116)
          {
            v66 = v117;
            if (v116)
              goto LABEL_208;
          }
        }
        *(_QWORD *)(v83 + 8 * v66 + 40) = v133;
        v11 = *(_QWORD *)(v83 + 24);
        v74 = __OFADD__(v11, 1);
        v12 = v11 + 1;
        if (v74)
          goto LABEL_194;
        goto LABEL_9;
      }
    }
    v9 = v6[3];
    if (!v9)
      goto LABEL_178;
  }
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
  return result;
}

_QWORD *VPTree.search(query:radius:sorted:)(uint64_t a1, char a2, float a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  float (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  _QWORD *v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  float v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char v66;
  uint64_t v67;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  _QWORD *v75;
  _QWORD *v76[14];

  v4 = (uint64_t)v3;
  v76[12] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v7 = v3[3];
  v8 = *(_QWORD *)(v7 + 16);
  v67 = MEMORY[0x24BEE4AF8];
  if (!v8 || a3 <= 0.0)
    return (_QWORD *)v67;
  v9 = (float (*)(uint64_t, uint64_t))v3[5];
  v69 = v3 + 4;
  swift_beginAccess();
  v10 = v3[4];
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_75;
  v11 = *(_QWORD *)(v10 + 32);
  if (v11 >= v8)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
  }
  v12 = *(_QWORD *)(v7 + 8 * v11 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = v9(a1, v12);
  swift_bridgeObjectRelease();
  swift_release();
  if (!*(_QWORD *)(*v69 + 16))
    goto LABEL_77;
  v67 = MEMORY[0x24BEE4AF8];
  if ((float)(v13 - *(float *)(*v69 + 40)) > a3)
    return (_QWORD *)v67;
  v66 = a2;
  v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v76[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
  inited = swift_initStackObject();
  v16 = 0;
  *(_OWORD *)(inited + 16) = xmmword_24B30E190;
  *(_QWORD *)(inited + 32) = 0;
  v17 = 1;
  v18 = a1;
  do
  {
    while (1)
    {
      v23 = v17 - 1;
      v24 = *(_QWORD *)(inited + 8 * (v17 - 1) + 32);
      *(_QWORD *)(inited + 16) = v23;
      if ((v24 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      if (v24 >= *(_QWORD *)(*v69 + 16))
        goto LABEL_72;
      v25 = *v69 + 56 * v24;
      v26 = *(_QWORD *)(v25 + 32);
      if ((v26 & 0x8000000000000000) != 0)
        goto LABEL_73;
      v27 = *(_QWORD *)(v4 + 24);
      if (v26 >= *(_QWORD *)(v27 + 16))
        goto LABEL_74;
      v75 = (_QWORD *)inited;
      v28 = *(float *)(v25 + 40);
      v74 = *(_BYTE *)(v25 + 56);
      v71 = *(_QWORD *)(v25 + 64);
      v72 = *(_QWORD *)(v25 + 48);
      v73 = *(_BYTE *)(v25 + 72);
      v29 = *(_QWORD *)(v25 + 80);
      v30 = *(float (**)(uint64_t, uint64_t))(v4 + 40);
      v31 = *(_QWORD *)(v27 + 8 * v26 + 32);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v32 = v30(v18, v31);
      swift_bridgeObjectRelease();
      swift_release();
      if (v32 <= a3)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v14 = sub_24B2C89E8(0, v14[2] + 1, 1, v14);
        v34 = v14[2];
        v33 = v14[3];
        if (v34 >= v33 >> 1)
          v14 = sub_24B2C89E8((_QWORD *)(v33 > 1), v34 + 1, 1, v14);
        v14[2] = v34 + 1;
        v35 = (float *)&v14[2 * v34];
        *((_QWORD *)v35 + 4) = v26;
        v35[10] = v32;
      }
      if (v29)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        v36 = sub_24B2F4810(v29, v4, v18);
        v70 = v16;
        swift_bridgeObjectRelease();
        v37 = v4;
        swift_release();
        swift_bridgeObjectRelease();
        v38 = *(_QWORD *)(v36 + 16);
        if (v38)
        {
          v39 = (_DWORD *)(v36 + 40);
          v40 = MEMORY[0x24BEE4AF8];
          do
          {
            v44 = *(float *)v39;
            if (*(float *)v39 <= a3)
            {
              v45 = *((_QWORD *)v39 - 1);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                sub_24B2DC06C(0, *(_QWORD *)(v40 + 16) + 1, 1);
              v42 = *(_QWORD *)(v40 + 16);
              v41 = *(_QWORD *)(v40 + 24);
              if (v42 >= v41 >> 1)
                sub_24B2DC06C(v41 > 1, v42 + 1, 1);
              *(_QWORD *)(v40 + 16) = v42 + 1;
              v43 = v40 + 16 * v42;
              *(_QWORD *)(v43 + 32) = v45;
              *(float *)(v43 + 40) = v44;
            }
            v39 += 4;
            --v38;
          }
          while (v38);
        }
        else
        {
          v40 = MEMORY[0x24BEE4AF8];
        }
        swift_bridgeObjectRelease();
        v46 = *(_QWORD *)(v40 + 16);
        if (v46)
        {
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = sub_24B2C89E8(0, v14[2] + 1, 1, v14);
          v47 = 0;
          v48 = v14[2];
          v49 = 2 * v48;
          do
          {
            v50 = *(_QWORD *)(v40 + v47 * 8 + 32);
            v51 = *(_DWORD *)(v40 + v47 * 8 + 40);
            v52 = v14[3];
            v53 = v48 + 1;
            if (v48 >= v52 >> 1)
              v14 = sub_24B2C89E8((_QWORD *)(v52 > 1), v48 + 1, 1, v14);
            v14[2] = v53;
            v54 = &v14[v49 + v47];
            v54[4] = v50;
            *((_DWORD *)v54 + 10) = v51;
            v47 += 2;
            v48 = v53;
            --v46;
          }
          while (v46);
          swift_release();
        }
        v18 = a1;
        swift_release();
        v4 = v37;
        v16 = v70;
      }
      v55 = v28 + a3;
      if (v32 >= v28)
        break;
      v56 = v74;
      if (v32 >= v55)
        v56 = 1;
      if ((v56 & 1) == 0)
      {
        v58 = v75[2];
        v57 = v75[3];
        if (v58 >= v57 >> 1)
          v75 = sub_24B2C813C((_QWORD *)(v57 > 1), v58 + 1, 1, v75);
        v75[2] = v58 + 1;
        v75[v58 + 4] = v72;
      }
      swift_bridgeObjectRelease();
      v59 = v73;
      if ((float)(v28 - a3) > v32)
        v59 = 1;
      if ((v59 & 1) == 0)
      {
        inited = (uint64_t)v75;
        v20 = v75[2];
        v19 = v75[3];
        v21 = v20 + 1;
        if (v20 >= v19 >> 1)
          inited = (uint64_t)sub_24B2C813C((_QWORD *)(v19 > 1), v20 + 1, 1, v75);
        v22 = v71;
        goto LABEL_13;
      }
LABEL_8:
      inited = (uint64_t)v75;
      v17 = v75[2];
      if (!v17)
        goto LABEL_67;
    }
    v60 = v73;
    if ((float)(v28 - a3) > v32)
      v60 = 1;
    if ((v60 & 1) == 0)
    {
      v62 = v75[2];
      v61 = v75[3];
      if (v62 >= v61 >> 1)
        v75 = sub_24B2C813C((_QWORD *)(v61 > 1), v62 + 1, 1, v75);
      v75[2] = v62 + 1;
      v75[v62 + 4] = v71;
    }
    swift_bridgeObjectRelease();
    v63 = v74;
    if (v32 >= v55)
      v63 = 1;
    if ((v63 & 1) != 0)
      goto LABEL_8;
    inited = (uint64_t)v75;
    v20 = v75[2];
    v64 = v75[3];
    v21 = v20 + 1;
    if (v20 >= v64 >> 1)
      inited = (uint64_t)sub_24B2C813C((_QWORD *)(v64 > 1), v20 + 1, 1, v75);
    v22 = v72;
LABEL_13:
    *(_QWORD *)(inited + 16) = v21;
    *(_QWORD *)(inited + 8 * v20 + 32) = v22;
    v17 = *(_QWORD *)(inited + 16);
  }
  while (v17);
LABEL_67:
  v76[0] = v14;
  if ((v66 & 1) != 0)
    sub_24B2F0734(v76);
  swift_bridgeObjectRelease();
  return v76[0];
}

uint64_t VPTree.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t VPTree.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t VPTree.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968188);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B2F538C();
  sub_24B30BEC0();
  v12 = *(_BYTE *)(v3 + 16);
  LOBYTE(v11) = 0;
  sub_24B2ED924();
  sub_24B30BDE8();
  if (!v2)
  {
    swift_beginAccess();
    v11 = *(_QWORD *)(v3 + 32);
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968198);
    sub_24B2F5414(&qword_2579681A0, (uint64_t (*)(void))sub_24B2F53D0, MEMORY[0x24BEE12A0]);
    sub_24B30BDE8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t VPTree.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  VPTree.init(from:)(a1);
  return v2;
}

uint64_t VPTree.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v3 = v1;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2579681B0);
  v5 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = v8;
  *(_QWORD *)(v3 + 40) = sub_24B2F0F58;
  *(_QWORD *)(v3 + 48) = 0;
  v9 = a1[3];
  v16 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_24B2F538C();
  sub_24B30BEB4();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v5;
    LOBYTE(v18) = 0;
    sub_24B2ED968();
    v11 = v15;
    sub_24B30BD7C();
    *(_BYTE *)(v3 + 16) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968198);
    v17 = 1;
    sub_24B2F5414(&qword_2579681B8, (uint64_t (*)(void))sub_24B2F547C, MEMORY[0x24BEE12D0]);
    sub_24B30BD7C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v11);
    v13 = v18;
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = v13;
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v3;
}

uint64_t sub_24B2F2C30(uint64_t *a1, uint64_t a2)
{
  return VPTree.search(query:k:)(*a1, a2);
}

_QWORD *sub_24B2F2C54(uint64_t *a1, char a2, float a3)
{
  return VPTree.search(query:radius:sorted:)(*a1, a2, a3);
}

void sub_24B2F2C78(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)v1 + 16);
}

uint64_t sub_24B2F2C88()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

BOOL sub_24B2F2CC8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16) == 0;
}

uint64_t sub_24B2F2D10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = VPTree.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_24B2F2D64(_QWORD *a1)
{
  return VPTree.encode(to:)(a1);
}

uint64_t sub_24B2F2D84(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(float *)(v89 + 8);
          if (v90 >= *(float *)(v89 - 8))
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_24B2F3474((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_24B3080B0((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967598);
    v8 = sub_24B30BA28();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(float *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 4))
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (float *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = v29[2];
          if (v31 >= *(v29 - 2))
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *(_QWORD *)v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((_QWORD *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_24B307CB4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_24B307CB4((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_24B2F3474((char *)(v11 + 16 * *(_QWORD *)v78), (char *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B2F3474(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 16 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v25 = &v4[v19];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (char *)(a3 - 16);
        do
        {
          v22 = v21 + 16;
          if (*((float *)v20 - 2) >= *((float *)v6 - 2))
          {
            v25 = v20 - 16;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 16;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v27 = v6 - 16;
            if (v23 <= v7)
              break;
          }
          v21 -= 16;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      sub_24B307E54(&v27, &v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (*((float *)v6 + 2) >= *((float *)v16 + 2))
        {
          v4 = v16 + 16;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 16;
          }
        }
        else
        {
          v17 = v6 + 16;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 16;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

void sub_24B2F36FC(int a1, char *__dst, _QWORD *a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_28;
  }
  v7 = a3[1];
  if (v5 < v7)
  {
    v8 = v7 - v5;
    if (!__OFSUB__(v7, v5))
    {
      v9 = *a3 - v4;
      v10 = a4;
      goto LABEL_6;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v10 = 0;
  v8 = 0;
  v9 = a3[1];
LABEL_6:
  v11 = v5 < v7;
  v12 = v8 != 0;
  v13 = v11 && v12;
  if (v11 && v12)
    v14 = v10;
  else
    v14 = 0;
  if (v11 && v12)
    v15 = v8;
  else
    v15 = 0;
  if (v9 < 1)
  {
    v9 = 0;
    goto LABEL_18;
  }
  if (!a4)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v16 = &a4[16 * v4];
  if (v16 != __dst || &v16[16 * v9] <= __dst)
    memmove(__dst, v16, 16 * v9);
LABEL_18:
  if (!v13 || v15 <= 0)
    return;
  if (!v14)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v17 = &__dst[16 * v9];
  if (v17 != v14 || v17 >= &v14[16 * v15])
    memmove(v17, v14, 16 * v15);
}

void sub_24B2F3818(int a1, char *__dst, _QWORD *a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_28;
  }
  v7 = a3[1];
  if (v5 < v7)
  {
    v8 = v7 - v5;
    if (!__OFSUB__(v7, v5))
    {
      v9 = *a3 - v4;
      v10 = a4;
      goto LABEL_6;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v10 = 0;
  v8 = 0;
  v9 = a3[1];
LABEL_6:
  v11 = v5 < v7;
  v12 = v8 != 0;
  v13 = v11 && v12;
  if (v11 && v12)
    v14 = v10;
  else
    v14 = 0;
  if (v11 && v12)
    v15 = v8;
  else
    v15 = 0;
  if (v9 < 1)
  {
    v9 = 0;
    goto LABEL_18;
  }
  if (!a4)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v16 = &a4[16 * v4];
  v17 = 16 * v9;
  if (v16 != __dst || &v16[v17] <= __dst)
    memmove(__dst, v16, v17);
LABEL_18:
  if (!v13 || v15 <= 0)
    return;
  if (!v14)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v18 = &__dst[16 * v9];
  if (v18 != v14 || v18 >= &v14[16 * v15])
    memmove(v18, v14, 16 * v15);
}

void sub_24B2F3934(int a1, char *a2, _QWORD *a3, char *a4)
{
  sub_24B2F3A64(a1, a2, a3, a4);
}

void sub_24B2F3948(int a1, char *__dst, _QWORD *a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_28;
  }
  v7 = a3[1];
  if (v5 < v7)
  {
    v8 = v7 - v5;
    if (!__OFSUB__(v7, v5))
    {
      v9 = *a3 - v4;
      v10 = a4;
      goto LABEL_6;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v10 = 0;
  v8 = 0;
  v9 = a3[1];
LABEL_6:
  v11 = v5 < v7;
  v12 = v8 != 0;
  v13 = v11 && v12;
  if (v11 && v12)
    v14 = v10;
  else
    v14 = 0;
  if (v11 && v12)
    v15 = v8;
  else
    v15 = 0;
  if (v9 < 1)
  {
    v9 = 0;
    goto LABEL_18;
  }
  if (!a4)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v16 = &a4[8 * v4];
  if (v16 != __dst || &v16[8 * v9] <= __dst)
    memmove(__dst, v16, 8 * v9);
LABEL_18:
  if (!v13 || v15 <= 0)
    return;
  if (!v14)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v17 = &__dst[8 * v9];
  if (v17 != v14 || v17 >= &v14[8 * v15])
    memmove(v17, v14, 8 * v15);
}

void sub_24B2F3A64(int a1, char *__dst, _QWORD *a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v18;
  size_t v19;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_27;
  }
  v7 = a3[1];
  if (v5 < v7)
  {
    v8 = v7 - v5;
    if (!__OFSUB__(v7, v5))
    {
      v9 = *a3 - v4;
      v10 = a4;
      goto LABEL_6;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v10 = 0;
  v8 = 0;
  v9 = a3[1];
LABEL_6:
  v11 = v5 < v7;
  v12 = v8 != 0;
  v13 = v11 && v12;
  if (v11 && v12)
    v14 = v10;
  else
    v14 = 0;
  if (v11 && v12)
    v15 = v8;
  else
    v15 = 0;
  if (v9 < 1)
  {
    v9 = 0;
    goto LABEL_20;
  }
  if (!a4)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v16 = &a4[24 * v4];
  if (v16 != __dst || &v16[24 * v9] <= __dst)
    memmove(__dst, v16, 24 * v9);
LABEL_20:
  if (!v13 || v15 <= 0)
    return;
  if (!v14)
  {
LABEL_29:
    __break(1u);
    return;
  }
  v18 = &__dst[24 * v9];
  v19 = 24 * v15;
  if (v18 != v14 || v18 >= &v14[v19])
    memmove(v18, v14, v19);
}

void sub_24B2F3B90(int a1, char *__dst, _QWORD *a3, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v14;
  size_t v15;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_5;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = *a3 - v4;
  v10 = __src;
  if (v5 < 1)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_13;
  }
LABEL_7:
  if (!__src)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    sub_24B30BD10();
    __break(1u);
    return;
  }
  v11 = &__src[16 * v4];
  if (v11 < &__dst[16 * v9] && &v11[16 * v9] > __dst)
    goto LABEL_27;
  memcpy(__dst, v11, 16 * v9);
LABEL_13:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      v14 = &__dst[16 * v9];
      v15 = 16 * v8;
      if (&v14[16 * v8] <= v10 || v14 >= &v10[v15])
      {
        memcpy(v14, v10, v15);
        return;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
}

void sub_24B2F3CF4(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  sub_24B2F3E90(a1, a2, a3, a4);
}

void sub_24B2F3D10(int a1, char *__dst, _QWORD *a3, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v14;
  size_t v15;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_5;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = *a3 - v4;
  v10 = __src;
  if (v5 < 1)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_13;
  }
LABEL_7:
  if (!__src)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    sub_24B30BD10();
    __break(1u);
    return;
  }
  v11 = &__src[8 * v4];
  if (v11 < &__dst[8 * v9] && &v11[8 * v9] > __dst)
    goto LABEL_27;
  memcpy(__dst, v11, 8 * v9);
LABEL_13:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      v14 = &__dst[8 * v9];
      v15 = 8 * v8;
      if (&v14[8 * v8] <= v10 || v14 >= &v10[v15])
      {
        memcpy(v14, v10, v15);
        return;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
}

void sub_24B2F3E74(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  sub_24B2F3E90(a1, a2, a3, a4);
}

void sub_24B2F3E90(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v14;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_26;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_5;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = *a3 - v4;
  v10 = a4;
  if (v5 < 1)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_13;
  }
LABEL_7:
  if (!a4)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v11 = a4 + 24 * v4;
  if (v11 < a2 + 24 * v9 && v11 + 24 * v9 > a2)
    goto LABEL_29;
  swift_arrayInitWithCopy();
LABEL_13:
  if (v5 >= v7 || v8 < 1)
    return;
  if (!v10)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    sub_24B30BD10();
    __break(1u);
    return;
  }
  v14 = a2 + 24 * v9;
  if (v14 + 24 * v8 > v10 && v14 < v10 + 24 * v8)
    goto LABEL_29;
  swift_arrayInitWithCopy();
}

void sub_24B2F3FFC(int a1, char *__dst, _QWORD *a3, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v18;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_25;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_14;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *a3 - v4;
  v10 = __src;
  if (v5 < 1)
    goto LABEL_14;
LABEL_7:
  if (!__src)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_24B30BD10();
    __break(1u);
    return;
  }
  v11 = &__src[16 * v4];
  v12 = &__dst[16 * v4];
  v13 = 16 * v9;
  v14 = &v12[16 * v9];
  v15 = &v11[16 * v9];
  if (v11 < v14 && v12 < v15)
    goto LABEL_28;
  memcpy(v12, v11, v13);
LABEL_14:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      v18 = 16 * v8;
      if (&__dst[16 * v8] <= v10 || &v10[v18] <= __dst)
      {
        memcpy(__dst, v10, v18);
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
}

void sub_24B2F4150(int a1, char *__dst, _QWORD *a3, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v19;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_25;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_14;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *a3 - v4;
  v10 = __src;
  if (v5 < 1)
    goto LABEL_14;
LABEL_7:
  if (!__src)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_24B30BD10();
    __break(1u);
    return;
  }
  v11 = 16 * v4;
  v12 = &__src[v11];
  v13 = &__dst[v11];
  v14 = 16 * v9;
  v15 = &__dst[16 * v9 + v11];
  v16 = &v12[16 * v9];
  if (v12 < v15 && v13 < v16)
    goto LABEL_28;
  memcpy(v13, v12, v14);
LABEL_14:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      v19 = 16 * v8;
      if (&__dst[16 * v8] <= v10 || &v10[v19] <= __dst)
      {
        memcpy(__dst, v10, v19);
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
}

void sub_24B2F42A8(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  sub_24B2F4434(a1, a2, a3, a4);
}

void sub_24B2F42C4(int a1, char *__dst, _QWORD *a3, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v18;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_25;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_14;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *a3 - v4;
  v10 = __src;
  if (v5 < 1)
    goto LABEL_14;
LABEL_7:
  if (!__src)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_24B30BD10();
    __break(1u);
    return;
  }
  v11 = &__src[8 * v4];
  v12 = &__dst[8 * v4];
  v13 = 8 * v9;
  v14 = &v12[8 * v9];
  v15 = &v11[8 * v9];
  if (v11 < v14 && v12 < v15)
    goto LABEL_28;
  memcpy(v12, v11, v13);
LABEL_14:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      v18 = 8 * v8;
      if (&__dst[8 * v8] <= v10 || &v10[v18] <= __dst)
      {
        memcpy(__dst, v10, v18);
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
}

void sub_24B2F4418(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  sub_24B2F4434(a1, a2, a3, a4);
}

void sub_24B2F4434(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_14;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = *a3 - v4;
  v10 = a4;
  if (v5 < 1)
    goto LABEL_14;
LABEL_7:
  if (!a4)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v11 = 24 * v4;
  v12 = a4 + v11;
  v13 = a2 + v11;
  v14 = a2 + v11 + 24 * v9;
  v15 = a4 + v11 + 24 * v9;
  if (v12 < v14 && v13 < v15)
    goto LABEL_27;
  swift_arrayInitWithCopy();
LABEL_14:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      if (a2 + 24 * v8 <= v10 || v10 + 24 * v8 <= a2)
      {
        swift_arrayInitWithCopy();
        return;
      }
LABEL_27:
      sub_24B30BD10();
      __break(1u);
      return;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
}

uint64_t sub_24B2F459C(uint64_t a1, float (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v22 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DB008(0, v5, 0);
  if ((a5 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v11 = *(_QWORD *)(a4 + 16);
  if (v11 > a5)
  {
    v12 = (unint64_t *)(a1 + 32);
    v13 = a4 + 32;
    v14 = *(_QWORD *)(a4 + 32 + 8 * a5);
    v6 = v22;
    while (1)
    {
      v16 = *v12++;
      v15 = v16;
      if (v16 >= v11)
        break;
      v17 = *(_QWORD *)(v13 + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = a2(v14, v17);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v22 + 16);
      v19 = *(_QWORD *)(v22 + 24);
      if (v20 >= v19 >> 1)
        result = sub_24B2DB008(v19 > 1, v20 + 1, 1);
      *(_QWORD *)(v22 + 16) = v20 + 1;
      *(float *)(v22 + 4 * v20 + 32) = v18;
      if (!--v5)
        return v6;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2F46EC(uint64_t a1, float (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v22 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DC06C(0, v5, 0);
  v6 = v22;
  v10 = (unint64_t *)(a1 + 32);
  v11 = a5 + 32;
  v12 = *(_QWORD *)(a5 + 16);
  while (1)
  {
    v14 = *v10++;
    v13 = v14;
    if (v14 >= v12)
      break;
    v15 = *(_QWORD *)(v11 + 8 * v13);
    swift_bridgeObjectRetain();
    v16 = a2(a4, v15);
    result = swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v22 + 16);
    v17 = *(_QWORD *)(v22 + 24);
    if (v18 >= v17 >> 1)
      result = sub_24B2DC06C(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v22 + 16) = v18 + 1;
    v19 = v22 + 16 * v18;
    *(_QWORD *)(v19 + 32) = v13;
    *(float *)(v19 + 40) = v16;
    if (!--v5)
      return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2F4810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  unint64_t *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v19 = MEMORY[0x24BEE4AF8];
  sub_24B2DC06C(0, v3, 0);
  v4 = v19;
  v8 = (unint64_t *)(a1 + 32);
  result = swift_beginAccess();
  while (1)
  {
    v11 = *v8++;
    v10 = v11;
    if ((v11 & 0x8000000000000000) != 0)
      break;
    v12 = *(_QWORD *)(a2 + 24);
    if (v10 >= *(_QWORD *)(v12 + 16))
      goto LABEL_10;
    v13 = *(float (**)(uint64_t, uint64_t))(a2 + 40);
    v14 = *(_QWORD *)(v12 + 8 * v10 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    v15 = v13(a3, v14);
    swift_bridgeObjectRelease();
    result = swift_release();
    v17 = *(_QWORD *)(v19 + 16);
    v16 = *(_QWORD *)(v19 + 24);
    if (v17 >= v16 >> 1)
      result = sub_24B2DC06C(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v19 + 16) = v17 + 1;
    v18 = v19 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v10;
    *(float *)(v18 + 40) = v15;
    if (!--v3)
      return v4;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24B2F4960(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646E49746E696F70 && a2 == 0xEA00000000007865;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1952867692 && a2 == 0xE400000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7468676972 && a2 == 0xE500000000000000 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E496465726F7473 && a2 == 0xED00007365636964)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_24B2F4BA0(uint64_t a1, float (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  int64_t v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE *v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float v52;
  float v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v90;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94[2];
  _QWORD *v95;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = a4 < 1;
  else
    v5 = 1;
  if (v5)
    return MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD **)sub_24B30B770();
  v95 = v6;
  v86 = v4;
  result = (uint64_t)sub_24B2DE870(0, v4);
  v8 = v6[3];
  v9 = v8 + 1;
  if (__OFADD__(v8, 1))
    goto LABEL_131;
  v10 = result;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (v6[2] < v9 || (isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_24B2CB0F0(v9);
    v6 = v95;
  }
  sub_24B3080C4(v6 + 2, (uint64_t)(v6 + 5), v10, 0, 257);
  swift_release();
  if (!v6[3])
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  v92 = 0;
  v93 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v13 = v95;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_24B2CABF8();
      v13 = v95;
    }
    v14 = v13[4];
    v15 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    v16 = &v13[3 * v14];
    v18 = v16[5];
    v17 = v16[6];
    v19 = *((unsigned __int8 *)v16 + 56);
    v20 = *((unsigned __int8 *)v16 + 57);
    v21 = v13[3];
    if (v15 >= v13[2])
      v15 = 0;
    v13[4] = v15;
    if (__OFSUB__(v21, 1))
      goto LABEL_109;
    v13[3] = v21 - 1;
    v22 = *(_QWORD *)(v18 + 16);
    if (!v22)
      goto LABEL_87;
    if ((uint64_t)v22 > a4)
    {
      v94[0] = 0;
      swift_bridgeObjectRetain();
      result = MEMORY[0x24BD1D2D4](v94, 8);
      v23 = ((unint64_t)v94[0] * (unsigned __int128)v22) >> 64;
      if (v22 > v94[0] * v22)
      {
        v24 = -(uint64_t)v22 % v22;
        if (v24 > v94[0] * v22)
        {
          do
          {
            v94[0] = 0;
            result = MEMORY[0x24BD1D2D4](v94, 8);
          }
          while (v24 > v94[0] * v22);
          v23 = ((unint64_t)v94[0] * (unsigned __int128)v22) >> 64;
        }
      }
      if (v23 >= *(_QWORD *)(v18 + 16))
        goto LABEL_110;
      v25 = *(_QWORD *)(v18 + 8 * v23 + 32);
      result = swift_bridgeObjectRelease();
      if (v25 >= v86)
        goto LABEL_111;
      v26 = *(_QWORD *)(a1 + 32 + 8 * v25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = (_QWORD *)sub_24B2F46EC(v18, a2, a3, v26, a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = sub_24B2D8424(v27);
      v28 = v27[2];
      v94[0] = (uint64_t)(v27 + 4);
      v94[1] = v28;
      result = sub_24B2F2D84(v94);
      v29 = v27[2];
      v30 = v29 >> 1;
      if (v29 >> 1 >= v29)
        goto LABEL_112;
      if (v29 < 2)
        goto LABEL_113;
      v31 = v27[2 * v30 + 5];
      result = sub_24B2E33A0((uint64_t)(v27 + 4), 1, v29 | 1);
      v32 = v27[2];
      if (v32 < v30)
        goto LABEL_114;
      v33 = result;
      v90 = sub_24B2E33A0((uint64_t)(v27 + 4), v30, (2 * v32) | 1);
      v34 = v93[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v35 = v93;
      else
        v35 = sub_24B2C8B08(0, v34 + 1, 1, v93);
      v37 = v35[2];
      v36 = v35[3];
      if (v37 >= v36 >> 1)
        v35 = sub_24B2C8B08((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
      v35[2] = v37 + 1;
      v93 = v35;
      v38 = v35 + 4;
      v39 = (uint64_t)&v35[7 * v37 + 4];
      *(_QWORD *)v39 = v25;
      *(_DWORD *)(v39 + 8) = v31;
      *(_QWORD *)(v39 + 16) = 0;
      *(_BYTE *)(v39 + 24) = 1;
      *(_QWORD *)(v39 + 32) = 0;
      *(_BYTE *)(v39 + 40) = 1;
      *(_QWORD *)(v39 + 48) = 0;
      result = swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        if (v20)
        {
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_123;
          if (v17 >= v93[2])
            goto LABEL_124;
          v40 = &v38[7 * v17];
          v40[2] = v34;
          v41 = v40 + 3;
        }
        else
        {
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_125;
          if (v17 >= v93[2])
            goto LABEL_126;
          v54 = &v38[7 * v17];
          v54[4] = v34;
          v41 = v54 + 5;
        }
        *v41 = 0;
      }
      v55 = v95;
      v56 = v95[3];
      v57 = v56 + 1;
      if (__OFADD__(v56, 1))
        goto LABEL_115;
      result = swift_isUniquelyReferenced_nonNull_native();
      if (v55[2] < v57 || (result & 1) == 0)
      {
        result = sub_24B2CB0F0(v57);
        v55 = v95;
      }
      v59 = v55[3];
      v58 = v55[4];
      v62 = __OFADD__(v58, v59);
      v60 = v58 + v59;
      if (v62)
        goto LABEL_116;
      if (v59 < 0)
      {
        if (v60 < 0)
        {
          v64 = v55[2];
          v62 = __OFADD__(v60, v64);
          v60 += v64;
          if (v62)
            goto LABEL_132;
        }
      }
      else
      {
        v61 = v55[2];
        v62 = __OFSUB__(v60, v61);
        v63 = v60 - v61;
        if (v63 < 0 == v62)
        {
          v60 = v63;
          if (v62)
            goto LABEL_121;
        }
      }
      v65 = &v55[3 * v60];
      v65[5] = v33;
      v65[6] = v34;
      *((_WORD *)v65 + 28) = 256;
      v66 = v55[3];
      v62 = __OFADD__(v66, 1);
      v67 = v66 + 1;
      if (v62)
        goto LABEL_117;
      v55[3] = v67;
      v68 = v67 + 1;
      if (__OFADD__(v67, 1))
        goto LABEL_118;
      result = swift_isUniquelyReferenced_nonNull_native();
      if (v55[2] < v68 || (result & 1) == 0)
      {
        result = sub_24B2CB0F0(v68);
        v55 = v95;
      }
      v70 = v55[3];
      v69 = v55[4];
      v62 = __OFADD__(v69, v70);
      v71 = v69 + v70;
      if (v62)
        goto LABEL_119;
      if (v70 < 0)
      {
        if (v71 < 0)
        {
          v75 = v55[2];
          v62 = __OFADD__(v71, v75);
          v71 += v75;
          if (v62)
            goto LABEL_133;
        }
      }
      else
      {
        v72 = v55[2];
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        if (v74 < 0 == v73)
        {
          v71 = v74;
          if (v73)
            goto LABEL_122;
        }
      }
      v76 = &v55[3 * v71];
      v76[5] = v90;
      v76[6] = v34;
      *((_WORD *)v76 + 28) = 0;
      v77 = v55[3];
      v62 = __OFADD__(v77, 1);
      v78 = v77 + 1;
      if (v62)
        goto LABEL_120;
      v55[3] = v78;
LABEL_87:
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    v42 = *(_QWORD *)(v18 + 32);
    if (v22 == 1)
    {
      v43 = 0;
      v44 = 0.0;
    }
    else
    {
      sub_24B30BE54();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v45 = swift_dynamicCastClass();
      if (!v45)
      {
        swift_bridgeObjectRelease();
        v45 = MEMORY[0x24BEE4AF8];
      }
      v46 = *(_QWORD *)(v45 + 16);
      swift_release();
      if (v46 == v22 - 1)
      {
        v43 = swift_dynamicCastClass();
        v47 = v92;
        if (!v43)
        {
          swift_bridgeObjectRelease();
          v43 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v43 = sub_24B2DE934(v18, v18 + 32, 1, (2 * v22) | 1);
        v47 = v92;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48 = sub_24B2F459C(v18, a2, a3, a1, v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = *(_QWORD *)(v48 + 16);
      if (v49)
      {
        v44 = *(float *)(v48 + 32);
        v50 = v49 - 1;
        if (v50)
        {
          v51 = (float *)(v48 + 36);
          do
          {
            v52 = *v51++;
            v53 = v52;
            if (v44 < v52)
              v44 = v53;
            --v50;
          }
          while (v50);
        }
      }
      else
      {
        v44 = 0.0;
      }
      v92 = v47;
      swift_bridgeObjectRelease();
    }
    v79 = v93[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v80 = v93;
    else
      v80 = sub_24B2C8B08(0, v79 + 1, 1, v93);
    v82 = v80[2];
    v81 = v80[3];
    if (v82 >= v81 >> 1)
      v80 = sub_24B2C8B08((_QWORD *)(v81 > 1), v82 + 1, 1, v80);
    v80[2] = v82 + 1;
    v93 = v80;
    v83 = v80 + 4;
    v84 = (uint64_t)&v80[7 * v82 + 4];
    *(_QWORD *)v84 = v42;
    *(float *)(v84 + 8) = v44;
    *(_QWORD *)(v84 + 16) = 0;
    *(_BYTE *)(v84 + 24) = 1;
    *(_QWORD *)(v84 + 32) = 0;
    *(_BYTE *)(v84 + 40) = 1;
    *(_QWORD *)(v84 + 48) = v43;
    result = swift_bridgeObjectRelease();
    if (!v19)
    {
      if (v20)
      {
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_127;
        if (v17 >= v93[2])
          goto LABEL_128;
        v85 = &v83[7 * v17];
        v85[2] = v79;
        *((_BYTE *)v85 + 24) = 0;
      }
      else
      {
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_129;
        if (v17 >= v93[2])
          goto LABEL_130;
        v12 = &v83[7 * v17];
        v12[4] = v79;
        *((_BYTE *)v12 + 40) = 0;
      }
    }
LABEL_12:
    if (!v95[3])
    {
      swift_release();
      return (uint64_t)v93;
    }
  }
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
  return result;
}

unint64_t sub_24B2F538C()
{
  unint64_t result;

  result = qword_257968190;
  if (!qword_257968190)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E800, &type metadata for VPTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968190);
  }
  return result;
}

unint64_t sub_24B2F53D0()
{
  unint64_t result;

  result = qword_2579681A8;
  if (!qword_2579681A8)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for VPTree.Node, &type metadata for VPTree.Node);
    atomic_store(result, (unint64_t *)&qword_2579681A8);
  }
  return result;
}

uint64_t sub_24B2F5414(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257968198);
    v8 = a2();
    result = MEMORY[0x24BD1D214](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24B2F547C()
{
  unint64_t result;

  result = qword_2579681C0;
  if (!qword_2579681C0)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for VPTree.Node, &type metadata for VPTree.Node);
    atomic_store(result, (unint64_t *)&qword_2579681C0);
  }
  return result;
}

_UNKNOWN **sub_24B2F54C0()
{
  return &protocol witness table for VPTree.Node;
}

uint64_t sub_24B2F54CC(uint64_t a1)
{
  uint64_t result;

  result = sub_24B2F5574(&qword_2579681E0, (uint64_t)&protocol conformance descriptor for VPTree);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for VPTree()
{
  return objc_opt_self();
}

uint64_t sub_24B2F5528(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_24B2F5574(&qword_257968260, (uint64_t)&protocol conformance descriptor for VPTree);
  result = sub_24B2F5574(&qword_257968268, (uint64_t)&protocol conformance descriptor for VPTree);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24B2F5574(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for VPTree();
    result = MEMORY[0x24BD1D214](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for VPTree()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VPTree.__allocating_init(points:metric:maxNodePoints:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VPTree.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t destroy for VPTree.Node()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VPTree.Node(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VPTree.Node(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VPTree.Node(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VPTree.Node(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VPTree.Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VPTree.Node()
{
  return &type metadata for VPTree.Node;
}

uint64_t storeEnumTagSinglePayload for VPTree.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B2F5820 + 4 * byte_24B30E4DA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B2F5854 + 4 * byte_24B30E4D5[v4]))();
}

uint64_t sub_24B2F5854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2F585C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2F5864);
  return result;
}

uint64_t sub_24B2F5870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2F5878);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B2F587C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2F5884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VPTree.CodingKeys()
{
  return &type metadata for VPTree.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for VPTree.Node.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24B2F58EC + 4 * byte_24B30E4E4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24B2F5920 + 4 * byte_24B30E4DF[v4]))();
}

uint64_t sub_24B2F5920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2F5928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2F5930);
  return result;
}

uint64_t sub_24B2F593C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2F5944);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24B2F5948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2F5950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VPTree.Node.CodingKeys()
{
  return &type metadata for VPTree.Node.CodingKeys;
}

unint64_t sub_24B2F5970()
{
  unint64_t result;

  result = qword_257968330;
  if (!qword_257968330)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E6E8, &type metadata for VPTree.Node.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968330);
  }
  return result;
}

unint64_t sub_24B2F59B8()
{
  unint64_t result;

  result = qword_257968338;
  if (!qword_257968338)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E7D8, &type metadata for VPTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968338);
  }
  return result;
}

unint64_t sub_24B2F5A00()
{
  unint64_t result;

  result = qword_257968340;
  if (!qword_257968340)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E710, &type metadata for VPTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968340);
  }
  return result;
}

unint64_t sub_24B2F5A48()
{
  unint64_t result;

  result = qword_257968348;
  if (!qword_257968348)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E738, &type metadata for VPTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968348);
  }
  return result;
}

unint64_t sub_24B2F5A90()
{
  unint64_t result;

  result = qword_257968350;
  if (!qword_257968350)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E658, &type metadata for VPTree.Node.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968350);
  }
  return result;
}

unint64_t sub_24B2F5AD8()
{
  unint64_t result;

  result = qword_257968358[0];
  if (!qword_257968358[0])
  {
    result = MEMORY[0x24BD1D214](&unk_24B30E680, &type metadata for VPTree.Node.CodingKeys);
    atomic_store(result, qword_257968358);
  }
  return result;
}

uint64_t sub_24B2F5B20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VPTree.BuildTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VPTree.BuildTask(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for VPTree.BuildTask(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VPTree.BuildTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VPTree.BuildTask()
{
  return &type metadata for VPTree.BuildTask;
}

uint64_t cosineSimilarityTensor(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t result;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = sub_24B30B734();
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v55 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)&v55 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v61 = (char *)&v55 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v55 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v63 = (char *)&v55 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v64 = (char *)&v55 - v20;
  v21 = sub_24B30B614();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v55 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v55 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v55 - v32;
  v65 = a1;
  if (sub_24B30B698() < 2 || (v58 = a2, sub_24B30B698() < 2))
  {
    v38 = 1;
    v42 = v66;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(a3, v38, 1, v67);
  }
  v57 = a3;
  sub_24B30B6BC();
  sub_24B2E3A7C();
  result = sub_24B30BB48();
  v35 = v68;
  if (v68 < 1)
  {
    __break(1u);
  }
  else
  {
    v56 = v11;
    v68 = 1;
    v69 = v35;
    sub_24B30BB6C();
    v36 = *(void (**)(char *, uint64_t))(v22 + 8);
    v36(v33, v21);
    sub_24B30B6BC();
    result = sub_24B30BB48();
    v37 = v68;
    if (v68 >= 1)
    {
      v38 = 1;
      v68 = 1;
      v69 = v37;
      sub_24B30BB6C();
      v36(v28, v21);
      v39 = sub_24B30B608();
      v40 = (_QWORD *)sub_24B30B608();
      v41 = sub_24B2E2F90(v39, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36(v25, v21);
      v36(v31, v21);
      a3 = v57;
      v42 = v66;
      if ((v41 & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
        v43 = swift_allocObject();
        v55 = xmmword_24B30D9B0;
        *(_OWORD *)(v43 + 16) = xmmword_24B30D9B0;
        sub_24B30B6BC();
        v44 = sub_24B30B62C();
        v36(v33, v21);
        *(_QWORD *)(v43 + 32) = v44;
        *(_QWORD *)(v43 + 40) = -1;
        sub_24B30B620();
        sub_24B30B704();
        v36(v33, v21);
        v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = v55;
        sub_24B30B6BC();
        v46 = sub_24B30B62C();
        v36(v33, v21);
        *(_QWORD *)(v45 + 32) = v46;
        *(_QWORD *)(v45 + 40) = -1;
        sub_24B30B620();
        sub_24B30B704();
        v36(v33, v21);
        v47 = v62;
        sub_24B30B6F8();
        v48 = v61;
        sub_24B30B68C();
        v49 = *(void (**)(char *, uint64_t))(v42 + 8);
        v50 = v67;
        v49(v47, v67);
        v51 = v60;
        sub_24B30B644();
        v49(v48, v50);
        v52 = v56;
        sub_24B30B6F8();
        sub_24B30B68C();
        v49(v52, v50);
        sub_24B30B644();
        v49(v47, v50);
        sub_24B30B710();
        sub_24B30B680();
        v49(v52, v50);
        v53 = v59;
        sub_24B30B710();
        a3 = v57;
        v54 = v63;
        sub_24B30B680();
        v49(v53, v50);
        sub_24B30B758();
        v49(v52, v50);
        v49(v47, v50);
        v49(v48, v50);
        v49(v51, v50);
        v49(v54, v50);
        v49(v64, v50);
        v38 = 0;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(a3, v38, 1, v67);
    }
  }
  __break(1u);
  return result;
}

uint64_t l2Norm(_:alongAxes:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, uint64_t);
  uint64_t v9;

  v0 = sub_24B30B734();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v9 - v5;
  sub_24B30B6F8();
  sub_24B30B68C();
  v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v4, v0);
  sub_24B30B644();
  return ((uint64_t (*)(char *, uint64_t))v7)(v6, v0);
}

uint64_t sub_24B2F632C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_24B30BB3C();
  if (!v18)
    return sub_24B30BA1C();
  v19 = v18;
  v25 = v15;
  v39 = sub_24B30BC80();
  v32 = sub_24B30BC8C();
  sub_24B30BC68();
  v36 = v17;
  result = sub_24B30BB30();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_24B30BB78();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_24B30BC74();
      sub_24B30BB54();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

void DirectedWeightedGraph.__allocating_init(name:)()
{
  swift_allocObject();
  DirectedWeightedGraph.init(name:)();
}

uint64_t sub_24B2F6640()
{
  uint64_t v0;

  return v0;
}

uint64_t DirectedEdge.from.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t DirectedEdge.from.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*DirectedEdge.from.modify())()
{
  return nullsub_1;
}

uint64_t DirectedEdge.to.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t DirectedEdge.to.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*DirectedEdge.to.modify())()
{
  return nullsub_1;
}

uint64_t DirectedEdge.hash(into:)()
{
  sub_24B30B86C();
  return sub_24B30B86C();
}

uint64_t static DirectedEdge.== infix(_:_:)()
{
  if ((sub_24B30B89C() & 1) != 0)
    type metadata accessor for DirectedEdge();
  return 0;
}

BOOL sub_24B2F67DC(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_24B2F67EC()
{
  return sub_24B30BE9C();
}

uint64_t sub_24B2F6810(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1836020326 && a2 == 0xE400000000000000;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28532 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24B2F68D8(char a1)
{
  if ((a1 & 1) != 0)
    return 28532;
  else
    return 1836020326;
}

uint64_t sub_24B2F68FC(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  return sub_24B2F8934(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2F67DC);
}

uint64_t sub_24B2F690C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_24B2F8980(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2F67EC);
}

uint64_t sub_24B2F6918(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_24B2F89A4(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2F67EC);
}

uint64_t sub_24B2F6924(_QWORD *a1, uint64_t a2)
{
  return sub_24B2F8A04(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2F68D8);
}

uint64_t sub_24B2F6930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_24B2F8A28(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2F6810, a4);
}

uint64_t sub_24B2F693C@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_24B2F8A5C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_24B2FBAD0, a2);
}

uint64_t sub_24B2F6948(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EF90, a1);
  return sub_24B30BECC();
}

uint64_t sub_24B2F697C(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EF90, a1);
  return sub_24B30BED8();
}

void DirectedEdge.encode(to:)()
{
  type metadata accessor for DirectedEdge.CodingKeys();
}

uint64_t sub_24B2F69F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x24BD1D214](&unk_24B30EF90, a1);
  v3 = sub_24B30BE00();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_24B30BEC0();
  *(_BYTE *)(v2 - 112) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  sub_24B30BDE8();
  if (!v7)
  {
    *(_BYTE *)(v2 - 112) = 1;
    sub_24B30BDE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t DirectedEdge.hashValue.getter()
{
  sub_24B30BE90();
  sub_24B30B86C();
  sub_24B30B86C();
  return sub_24B30BEA8();
}

void DirectedEdge.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[14];

  v10[0] = a3;
  v10[3] = *(_QWORD *)(a2 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v10[2] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v10[5] = (char *)v10 - v5;
  v10[10] = v6;
  v10[11] = v7;
  v10[12] = v8;
  v10[13] = v9;
  type metadata accessor for DirectedEdge.CodingKeys();
}

void sub_24B2F6C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 120) = MEMORY[0x24BD1D214](&unk_24B30EF90, a1);
  v6 = sub_24B30BD94();
  *(_QWORD *)(v5 - 128) = v6;
  *(_QWORD *)(v5 - 184) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 160) = v3;
  *(_QWORD *)(v5 - 96) = v4;
  *(_QWORD *)(v5 - 88) = v2;
  type metadata accessor for DirectedEdge();
}

uint64_t sub_24B2F6CA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(_QWORD *)(v3 - 136) = v2;
  v8 = *(_QWORD *)(v3 - 72);
  sub_24B30BEB4();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  *(_QWORD *)(v3 - 120) = v5;
  v10 = *(_QWORD *)(v3 - 184);
  v9 = *(_QWORD *)(v3 - 176);
  *(_QWORD *)(v3 - 72) = a1;
  v11 = *(_QWORD *)(v3 - 168);
  *(_BYTE *)(v3 - 112) = 0;
  sub_24B30BD7C();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  v13 = *(_QWORD *)(v3 - 152);
  v14 = *(_QWORD *)(v3 - 144);
  *(_QWORD *)(v3 - 152) = v12;
  v12(v7, v13, v14);
  *(_BYTE *)(v3 - 112) = 1;
  sub_24B30BD7C();
  (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v3 - 136), *(_QWORD *)(v3 - 128));
  v15 = *(_QWORD *)(v3 - 72);
  (*(void (**)(char *, uint64_t, _QWORD))(v3 - 152))(&v7[*(int *)(v15 + 52)], v9, *(_QWORD *)(v3 - 144));
  v16 = *(_QWORD *)(v3 - 120);
  (*(void (**)(_QWORD, char *, uint64_t))(v16 + 16))(*(_QWORD *)(v3 - 192), v7, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v7, v15);
}

uint64_t sub_24B2F6E58()
{
  sub_24B30BE90();
  DirectedEdge.hash(into:)();
  return sub_24B30BEA8();
}

void sub_24B2F6E98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  DirectedEdge.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_24B2F6EB8()
{
  DirectedEdge.encode(to:)();
}

uint64_t sub_24B2F6ECC()
{
  return static DirectedEdge.== infix(_:_:)();
}

uint64_t DirectedEdge.description.getter()
{
  sub_24B30BC2C();
  sub_24B30B92C();
  sub_24B30BE3C();
  sub_24B30B92C();
  sub_24B30BE3C();
  sub_24B30B92C();
  return 0;
}

uint64_t sub_24B2F6F9C()
{
  uint64_t v0;

  v0 = sub_24B2FBAD8();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_24B2F6FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2F7020()
{
  sub_24B2FBAA0();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B2F7034(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t DirectedIndexGraph.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  DirectedIndexGraph.init(name:)(a1, a2);
  return v4;
}

_QWORD *DirectedIndexGraph.init(name:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  sub_24B30BA7C();
  swift_getTupleTypeMetadata2();
  sub_24B30BA1C();
  v5 = sub_24B30B80C();
  v2[3] = a2;
  v2[4] = v5;
  v2[2] = a1;
  return v2;
}

uint64_t sub_24B2F714C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 80);
  v3 = sub_24B30BA7C();
  v4 = *(_QWORD *)(v1 + 104);
  v5 = swift_bridgeObjectRetain();
  LOBYTE(v2) = MEMORY[0x24BD1C764](v5, v2, v3, v4);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24B2F71D0()
{
  uint64_t v0;

  swift_beginAccess();
  sub_24B30BA7C();
  v0 = sub_24B30B818();
  swift_bridgeObjectRetain();
  MEMORY[0x24BD1D214](MEMORY[0x24BEE0310], v0);
  return sub_24B30BA88();
}

void sub_24B2F726C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[24];

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v11[15] = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11[9] = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[8] = sub_24B30BA7C();
  v11[12] = swift_getTupleTypeMetadata2();
  v5 = sub_24B30BBCC();
  v11[10] = *(_QWORD *)(v5 - 8);
  v11[11] = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v11[13] = (char *)v11 - v7;
  v11[14] = v3;
  v8 = v2[11];
  v9 = v2[12];
  v10 = v2[13];
  v11[20] = v3;
  v11[21] = v8;
  v11[6] = v9;
  v11[7] = v8;
  v11[22] = v9;
  v11[23] = v10;
  v11[5] = v10;
  type metadata accessor for DirectedEdge();
}

void sub_24B2F7710(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = a5;
  v11 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v18 - v15;
  v17 = *(void (**)(char *))(v11 + 16);
  v17((char *)&v18 - v15);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v14, a1, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a6, v16, a2);
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = v19;
  type metadata accessor for DirectedEdge();
}

uint64_t sub_24B2F77DC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(v3 + *(int *)(a1 + 52), v4, v2);
}

uint64_t sub_24B2F7814()
{
  uint64_t v0;

  swift_beginAccess();
  sub_24B30BA7C();
  v0 = sub_24B30B818();
  MEMORY[0x24BD1D214](MEMORY[0x24BEE0310], v0);
  return sub_24B30B980() & 1;
}

BOOL sub_24B2F78B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  _BYTE v9[24];
  uint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_24B2F7814();
  if ((v7 & 1) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    v10 = sub_24B30BA1C();
    swift_beginAccess();
    sub_24B30BA7C();
    sub_24B30B830();
    sub_24B30B854();
    swift_endAccess();
  }
  return (v7 & 1) == 0;
}

uint64_t sub_24B2F79B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t (*v27)();
  uint64_t (*v28)();
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t (*)(), unint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)();
  void (*v39)(_QWORD *, _QWORD);
  _QWORD *v40;
  _BYTE *v41;
  uint64_t (*v42)();
  uint64_t (*v43)();
  _BYTE *v44;
  void (*v45)(_BYTE *, uint64_t);
  _BYTE *v46;
  uint64_t v47;
  _BYTE v48[12];
  int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t (*v55)();
  uint64_t (*v56)();
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  _QWORD v65[4];
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = sub_24B30BBCC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v48[-v9];
  v11 = *(_QWORD *)(v5 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v55 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = &v48[-v15];
  MEMORY[0x24BDAC7A8](v14);
  v56 = (uint64_t (*)())&v48[-v17];
  v18 = sub_24B2F7814();
  if ((v18 & 1) == 0)
    return v18 & 1;
  v49 = v18;
  v50 = v10;
  v52 = v7;
  v53 = v6;
  v19 = v1 + 4;
  swift_beginAccess();
  v20 = sub_24B30BA7C();
  v21 = a1;
  v22 = *(_QWORD *)(v4 + 104);
  v23 = v20;
  v24 = sub_24B30B830();
  v58 = v21;
  v51 = v24;
  sub_24B30B800();
  swift_endAccess();
  swift_bridgeObjectRelease();
  v61 = v19;
  swift_beginAccess();
  v54 = v2;
  swift_bridgeObjectRetain();
  result = sub_24B30BCA4();
  v62 = v69;
  v57 = v70;
  i = v72;
  v26 = v73;
  v59 = (unint64_t)(v71 + 64) >> 6;
  v27 = (uint64_t (*)())v55;
  v28 = v56;
  v63 = v23;
  v60 = v22;
  if (v73)
    goto LABEL_5;
LABEL_6:
  v31 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v31 < v59)
    {
      v32 = *(_QWORD *)(v57 + 8 * v31);
      v33 = i + 1;
      if (v32)
        goto LABEL_21;
      v33 = i + 2;
      if (i + 2 < v59)
      {
        v32 = *(_QWORD *)(v57 + 8 * v33);
        if (v32)
          goto LABEL_21;
        v33 = i + 3;
        if (i + 3 < v59)
        {
          v32 = *(_QWORD *)(v57 + 8 * v33);
          if (v32)
            goto LABEL_21;
          v33 = i + 4;
          if (i + 4 < v59)
          {
            v32 = *(_QWORD *)(v57 + 8 * v33);
            if (v32)
              goto LABEL_21;
            v33 = i + 5;
            if (i + 5 < v59)
            {
              v32 = *(_QWORD *)(v57 + 8 * v33);
              if (!v32)
              {
                v34 = i + 6;
                do
                {
                  if (v59 == v34)
                    goto LABEL_29;
                  v32 = *(_QWORD *)(v57 + 8 * v34++);
                }
                while (!v32);
                v33 = v34 - 1;
              }
LABEL_21:
              v26 = (v32 - 1) & v32;
              v30 = __clz(__rbit64(v32)) + (v33 << 6);
              for (i = v33; ; v30 = v29 | (i << 6))
              {
                v35 = *(void (**)(uint64_t (*)(), unint64_t, uint64_t))(v11 + 16);
                v35(v28, *(_QWORD *)(v62 + 48) + *(_QWORD *)(v11 + 72) * v30, v5);
                (*(void (**)(_BYTE *, uint64_t (*)(), uint64_t))(v11 + 32))(v16, v28, v5);
                v36 = v61;
                swift_beginAccess();
                v37 = *v36;
                swift_bridgeObjectRetain();
                MEMORY[0x24BD1C788](v65, v16, v37, v5, v23, v22);
                swift_bridgeObjectRelease();
                if (!v65[0]
                  || (v68 = v65[0],
                      MEMORY[0x24BD1D214](MEMORY[0x24BEE12E0], v23),
                      sub_24B30BB60(),
                      swift_bridgeObjectRelease(),
                      (v67 & 1) != 0))
                {
                  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v16, v5);
                  v23 = v63;
                  v22 = v60;
                  if (!v26)
                    goto LABEL_6;
                }
                else
                {
                  v35(v27, (unint64_t)v16, v5);
                  v38 = sub_24B2ED47C();
                  v39 = (void (*)(_QWORD *, _QWORD))sub_24B30B83C();
                  if (*v40)
                  {
                    v56 = v38;
                    v41 = v16;
                    v42 = v28;
                    v43 = v27;
                    v44 = v50;
                    sub_24B30BA64();
                    v39(v65, 0);
                    v45 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
                    v46 = v43;
                    v28 = v42;
                    v16 = v41;
                    v45(v46, v5);
                    ((void (*)(uint64_t *, _QWORD))v56)(&v66, 0);
                    v47 = 0;
                  }
                  else
                  {
                    v39(v65, 0);
                    v45 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
                    v45(v27, v5);
                    ((void (*)(uint64_t *, _QWORD))v38)(&v66, 0);
                    v47 = 1;
                    v44 = v50;
                  }
                  v22 = v60;
                  v45(v16, v5);
                  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v44, v47, 1, v5);
                  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v52 + 8))(v44, v53);
                  v27 = (uint64_t (*)())v55;
                  v23 = v63;
                  if (!v26)
                    goto LABEL_6;
                }
LABEL_5:
                v29 = __clz(__rbit64(v26));
                v26 &= v26 - 1;
              }
            }
          }
        }
      }
    }
LABEL_29:
    swift_release();
    LOBYTE(v18) = v49;
    return v18 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B2F7F80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = *v1;
  swift_beginAccess();
  v4 = v1[4];
  v5 = *(_QWORD *)(v3 + 80);
  v6 = sub_24B30BA7C();
  v7 = *(_QWORD *)(v3 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x24BD1C788](&v9, a1, v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  result = v9;
  if (!v9)
    return sub_24B30BA1C();
  return result;
}

uint64_t sub_24B2F8024()
{
  uint64_t v0;

  swift_beginAccess();
  sub_24B30BA7C();
  v0 = sub_24B30B830();
  swift_bridgeObjectRetain();
  MEMORY[0x24BD1D214](MEMORY[0x24BEE04D8], v0);
  LOBYTE(v0) = sub_24B30B974();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_24B2F8114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD v15[2];

  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_24B30B89C();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, a5);
  if ((v11 & 1) != 0)
  {
    v15[1] = a2;
    v12 = sub_24B30BA7C();
    MEMORY[0x24BD1D214](MEMORY[0x24BEE12C8], v12);
    v13 = sub_24B30B980();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a5);
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_24B2F8224(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v5 = (_QWORD *)*v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v32 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v32 - v14;
  if ((sub_24B2F7814() & 1) == 0 || (sub_24B2F7814() & 1) == 0)
    return 0;
  v32 = v10;
  v36 = v7;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v15, a1, v6);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v6;
  v18 = v5[11];
  v17[3] = v18;
  v19 = v5[12];
  v17[4] = v19;
  v20 = v5[13];
  v17[5] = v20;
  v33 = (void (*)(char *, char *, uint64_t))v16;
  v16(v13, a2, v6);
  v21 = v20;
  v22 = v2 + 4;
  swift_beginAccess();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v6;
  v23[3] = v18;
  v23[4] = v19;
  v23[5] = v21;
  v23[6] = sub_24B2FBBC4;
  v23[7] = v17;
  v37 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v38 = v2[4];
  v24 = v38;
  v2[4] = 0x8000000000000000;
  sub_24B2FB940((uint64_t)v15, v6, v21);
  if (__OFADD__(*(_QWORD *)(v24 + 16), (v25 & 1) == 0))
  {
    __break(1u);
LABEL_12:
    result = sub_24B30BE78();
    __break(1u);
    return result;
  }
  v26 = v25;
  v34 = sub_24B30BA7C();
  sub_24B30BCBC();
  v27 = sub_24B30BC98();
  v28 = v38;
  if ((v27 & 1) != 0)
  {
    sub_24B2FB940((uint64_t)v15, v6, v21);
    if ((v26 & 1) != (v29 & 1))
      goto LABEL_12;
  }
  *v22 = v28;
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = swift_bridgeObjectRetain();
    v38 = ((uint64_t (*)(uint64_t))v23[6])(v31);
    v33(v32, v15, v6);
    sub_24B30BCB0();
  }
  swift_bridgeObjectRelease();
  sub_24B30BA58();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v6);
  swift_endAccess();
  swift_release();
  swift_release();
  return 1;
}

uint64_t sub_24B2F851C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)();
  void (*v20)(_QWORD *, _QWORD);
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  char v34;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_24B30BBCC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v26 - v10;
  if ((sub_24B2F7814() & 1) == 0)
    return 0;
  v30 = v7;
  v31 = v5;
  v28 = v11;
  v29 = v9;
  v27 = v8;
  if ((sub_24B2F7814() & 1) == 0)
    return 0;
  swift_beginAccess();
  v12 = v1[4];
  v13 = sub_24B30BA7C();
  v14 = *(_QWORD *)(v3 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x24BD1C788](&v33, a1, v12, v4, v13, v14);
  swift_bridgeObjectRelease();
  if (!v33)
    return 0;
  v32[0] = v33;
  MEMORY[0x24BD1D214](MEMORY[0x24BEE12E0], v13);
  sub_24B30BB60();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
    return 0;
  v26[1] = v33;
  v17 = v30;
  v18 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, a1, v4);
  v19 = sub_24B2ED47C();
  sub_24B30B830();
  v20 = (void (*)(_QWORD *, _QWORD))sub_24B30B83C();
  if (*v21)
  {
    v22 = v28;
    sub_24B30BA64();
    v20(v32, 0);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v4);
    ((void (*)(uint64_t *, _QWORD))v19)(&v33, 0);
    v23 = 0;
    v24 = v27;
  }
  else
  {
    v20(v32, 0);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v4);
    ((void (*)(uint64_t *, _QWORD))v19)(&v33, 0);
    v23 = 1;
    v24 = v27;
    v22 = v28;
  }
  v25 = v29;
  v15 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v22, v23, 1, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
  return v15;
}

uint64_t sub_24B2F87C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_24B30BE48() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E6563616A6461 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_24B30BE48();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24B2F88B0()
{
  sub_24B30BE90();
  sub_24B30BE9C();
  return sub_24B30BEA8();
}

uint64_t sub_24B2F88F4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x636E6563616A6461;
  else
    return 1701667182;
}

uint64_t sub_24B2F8928(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  return sub_24B2F8934(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2FC980);
}

uint64_t sub_24B2F8934(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a1, *a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_24B2F8950()
{
  return sub_24B2F88B0();
}

uint64_t sub_24B2F8974(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_24B2F8980(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2FC978);
}

uint64_t sub_24B2F8980(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;

  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_24B2F8998(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_24B2F89A4(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2FC978);
}

uint64_t sub_24B2F89A4(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  sub_24B30BE90();
  a4(v8, *v4, a2[2], a2[3], a2[4], a2[5]);
  return sub_24B30BEA8();
}

uint64_t sub_24B2F89F8(_QWORD *a1, uint64_t a2)
{
  return sub_24B2F8A04(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2F88F4);
}

uint64_t sub_24B2F8A04(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v3;

  return a3(*v3, a1[2], a1[3], a1[4], a1[5]);
}

uint64_t sub_24B2F8A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_24B2F8A28(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_24B2F87C4, a4);
}

uint64_t sub_24B2F8A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5]);
  *a5 = result;
  return result;
}

uint64_t sub_24B2F8A5C@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5]);
  *a3 = result;
  return result;
}

uint64_t sub_24B2F8A90(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EF40, a1);
  return sub_24B30BECC();
}

uint64_t sub_24B2F8AC4(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EF40, a1);
  return sub_24B30BED8();
}

uint64_t DirectedIndexGraph.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DirectedIndexGraph.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_24B2F8B48()
{
  type metadata accessor for DirectedIndexGraph.CodingKeys();
}

uint64_t sub_24B2F8B9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x24BD1D214](&unk_24B30EF40, a1);
  v4 = sub_24B30BE00();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_24B30BEC0();
  swift_beginAccess();
  *(_BYTE *)(v3 - 144) = 0;
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(v3 - 184);
  sub_24B30BDC4();
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v5;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v3 - 72) = *(_QWORD *)(v2 + 32);
    *(_BYTE *)(v3 - 145) = 1;
    v11 = sub_24B30BA7C();
    v12 = sub_24B30B830();
    v13 = *(_QWORD *)(v3 - 192);
    *(_QWORD *)(v3 - 160) = v13;
    v14 = MEMORY[0x24BD1D214](MEMORY[0x24BEE12A0], v11, v3 - 160);
    *(_QWORD *)(v3 - 176) = v13;
    *(_QWORD *)(v3 - 168) = v14;
    MEMORY[0x24BD1D214](MEMORY[0x24BEE04C0], v12, v3 - 176);
    sub_24B30BDE8();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v7, v4);
  }
}

void DirectedIndexGraph.__allocating_init(from:)()
{
  swift_allocObject();
  DirectedIndexGraph.init(from:)();
}

uint64_t sub_24B2F8DAC()
{
  uint64_t v0;

  return v0;
}

void DirectedIndexGraph.init(from:)()
{
  type metadata accessor for DirectedIndexGraph.CodingKeys();
}

uint64_t sub_24B2F8E14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x24BD1D214](&unk_24B30EF40, a1);
  v6 = sub_24B30BD94();
  *(_QWORD *)(v5 - 200) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 192) = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - v7;
  v9 = sub_24B30BA7C();
  swift_getTupleTypeMetadata2();
  sub_24B30BA1C();
  *(_QWORD *)(v5 - 168) = v1;
  v10 = sub_24B30B80C();
  *(_QWORD *)(v5 - 176) = v4;
  *(_QWORD *)(v4 + 32) = v10;
  v11 = (_QWORD *)(v4 + 32);
  v12 = v3[3];
  *(_QWORD *)(v5 - 152) = v3;
  __swift_project_boxed_opaque_existential_1(v3, v12);
  v13 = v8;
  v14 = *(_QWORD *)(v5 - 144);
  sub_24B30BEB4();
  if (v14)
  {
    v17 = *(_QWORD *)(v5 - 168);
    v18 = *(_QWORD *)(v5 - 160);
    v19 = *(_QWORD *)(v5 - 184);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 - 112) = v2;
    *(_QWORD *)(v5 - 104) = v18;
    *(_QWORD *)(v5 - 96) = v19;
    *(_QWORD *)(v5 - 88) = v17;
    type metadata accessor for DirectedIndexGraph();
  }
  *(_BYTE *)(v5 - 112) = 0;
  v15 = *(_QWORD *)(v5 - 192);
  v16 = sub_24B30BD58();
  v21 = *(_QWORD *)(v5 - 176);
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v22;
  v23 = sub_24B30B830();
  *(_BYTE *)(v5 - 112) = 1;
  v24 = *(_QWORD *)(v5 - 160);
  *(_QWORD *)(v5 - 120) = v24;
  v25 = MEMORY[0x24BD1D214](MEMORY[0x24BEE12D0], v9, v5 - 120);
  *(_QWORD *)(v5 - 136) = v24;
  *(_QWORD *)(v5 - 128) = v25;
  MEMORY[0x24BD1D214](MEMORY[0x24BEE04E0], v23, v5 - 136);
  sub_24B30BD7C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 200) + 8))(v13, v15);
  v26 = *(_QWORD *)(v5 - 72);
  swift_beginAccess();
  *v11 = v26;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 152));
  return v21;
}

uint64_t sub_24B2F9088@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 272))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24B2F90B4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

uint64_t sub_24B2F90DC()
{
  sub_24B2FBC28();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B2F90F0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

void DirectedWeightedGraph.init(name:)()
{
  swift_retain();
  type metadata accessor for DirectedEdge();
}

uint64_t sub_24B2F918C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_getTupleTypeMetadata2();
  sub_24B30BA1C();
  MEMORY[0x24BD1D214](&protocol conformance descriptor for DirectedEdge<A>, a1);
  *(_QWORD *)(v2 + 40) = sub_24B30B80C();
  swift_release();
  DirectedIndexGraph.init(name:)(v3, v1);
  return v2;
}

void type metadata accessor for DirectedEdge()
{
  JUMPOUT(0x24BD1D1A8);
}

void type metadata accessor for DirectedEdge.CodingKeys()
{
  JUMPOUT(0x24BD1D1A8);
}

BOOL sub_24B2F9230()
{
  uint64_t v0;

  v0 = sub_24B30BD28();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t sub_24B2F9274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24BD1D214](&unk_24B30ED10, a3);
  return sub_24B30BE60();
}

uint64_t sub_24B2F92C8(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30ED10, a1);
  return sub_24B30B998();
}

uint64_t sub_24B2F9314()
{
  MEMORY[0x24BD1D214](&unk_24B30ED10);
  return sub_24B30B9B0();
}

uint64_t sub_24B2F9364()
{
  MEMORY[0x24BD1D214](&unk_24B30ED10);
  return sub_24B30B9A4();
}

BOOL sub_24B2F93B4@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = sub_24B2F9230();
  *a1 = result;
  return result;
}

void sub_24B2F9404(_QWORD *a1@<X8>)
{
  *a1 = 0x756C615665676465;
  a1[1] = 0xEA00000000007365;
}

uint64_t sub_24B2F9424()
{
  return 0x756C615665676465;
}

BOOL sub_24B2F9440@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = sub_24B2F9230();
  *a1 = result;
  return result;
}

uint64_t sub_24B2F9488@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24B2FC92C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24B2F94C4(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EEF0, a1);
  return sub_24B30BECC();
}

uint64_t sub_24B2F94F8(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EEF0, a1);
  return sub_24B30BED8();
}

void sub_24B2F952C()
{
  swift_allocObject();
  sub_24B2F9578();
}

uint64_t sub_24B2F9564()
{
  uint64_t v0;

  return v0;
}

void sub_24B2F9578()
{
  type metadata accessor for DirectedWeightedGraph.CodingKeys();
}

void sub_24B2F95E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 192) = MEMORY[0x24BD1D214](&unk_24B30EEF0, a1);
  v6 = sub_24B30BD94();
  *(_QWORD *)(v5 - 272) = v6;
  *(_QWORD *)(v5 - 288) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  swift_retain();
  *(_QWORD *)(v5 - 240) = v2;
  *(_QWORD *)(v5 - 232) = v1;
  *(_QWORD *)(v5 - 144) = v1;
  *(_QWORD *)(v5 - 136) = v2;
  *(_QWORD *)(v5 - 256) = v4;
  *(_QWORD *)(v5 - 248) = v3;
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 120) = v4;
  type metadata accessor for DirectedEdge();
}

void sub_24B2F9668(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_getTupleTypeMetadata2();
  sub_24B30BA1C();
  MEMORY[0x24BD1D214](&protocol conformance descriptor for DirectedEdge<A>, a1);
  *(_QWORD *)(v4 - 216) = v1;
  v6 = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v6 + 40) = sub_24B30B80C();
  v7 = v2[3];
  *(_QWORD *)(v4 - 208) = v2;
  __swift_project_boxed_opaque_existential_1(v2, v7);
  *(_QWORD *)(v4 - 280) = v3;
  v8 = *(_QWORD *)(v4 - 72);
  sub_24B30BEB4();
  if (v8)
  {
    swift_release();
    v9 = *(_QWORD *)(v4 - 216);
    v10 = *(_QWORD *)(v4 - 232);
    v11 = *(_QWORD *)(v4 - 224);
    v16 = *(_QWORD *)(v4 - 248);
    v15 = *(_QWORD *)(v4 - 240);
    v17 = *(_QWORD *)(v4 - 256);
    v18 = *(_QWORD *)(v4 - 264);
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 208));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 - 144) = v10;
    *(_QWORD *)(v4 - 136) = v9;
    *(_QWORD *)(v4 - 128) = v15;
    *(_QWORD *)(v4 - 120) = v16;
    *(_QWORD *)(v4 - 112) = v17;
    *(_QWORD *)(v4 - 104) = v11;
    *(_QWORD *)(v4 - 96) = v18;
    type metadata accessor for DirectedWeightedGraph();
  }
  v12 = sub_24B30B830();
  v13 = MEMORY[0x24BD1D214](&protocol conformance descriptor for DirectedEdge<A>, a1);
  v14 = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 160) = v13;
  *(_QWORD *)(v4 - 152) = v14;
  MEMORY[0x24BD1D214](MEMORY[0x24BEE04E0], v12, v4 - 160);
  sub_24B30BD7C();
  v19 = *(_QWORD *)(v4 - 144);
  swift_beginAccess();
  *(_QWORD *)(v6 + 40) = v19;
  swift_release();
  swift_bridgeObjectRelease();
  sub_24B2FC934(*(_QWORD *)(v4 - 208), v4 - 144);
  DirectedIndexGraph.init(from:)();
}

void sub_24B2F98A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  __swift_destroy_boxed_opaque_existential_1(v0);
  JUMPOUT(0x24B2F9828);
}

void sub_24B2F98C0()
{
  type metadata accessor for DirectedWeightedGraph.CodingKeys();
}

void sub_24B2F9930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x24BD1D214](&unk_24B30EEF0, a1);
  v5 = sub_24B30BE00();
  *(_QWORD *)(v4 - 200) = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v6 = v3[3];
  *(_QWORD *)(v4 - 264) = v3;
  __swift_project_boxed_opaque_existential_1(v3, v6);
  sub_24B30BEC0();
  swift_beginAccess();
  *(_QWORD *)(v4 - 72) = *(_QWORD *)(v2 + 40);
  v7 = *(_QWORD *)(v4 - 232);
  *(_QWORD *)(v4 - 168) = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 160) = v7;
  *(_QWORD *)(v4 - 152) = v1;
  *(_QWORD *)(v4 - 144) = *(_QWORD *)(v4 - 256);
  type metadata accessor for DirectedEdge();
}

uint64_t sub_24B2F9A04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x24BD1D214](&protocol conformance descriptor for DirectedEdge<A>, a1);
  v5 = sub_24B30B830();
  v6 = MEMORY[0x24BD1D214](&protocol conformance descriptor for DirectedEdge<A>, a1);
  v7 = *(_QWORD *)(v3 - 208);
  *(_QWORD *)(v3 - 184) = v6;
  *(_QWORD *)(v3 - 176) = v7;
  MEMORY[0x24BD1D214](MEMORY[0x24BEE04C0], v5, v3 - 184);
  v8 = *(_QWORD *)(v3 - 192);
  sub_24B30BDE8();
  if (!v8)
    sub_24B2F8B48();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 200) + 8))(v2, v1);
}

uint64_t sub_24B2F9ADC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 280);
  v3 = sub_24B30BA7C();
  v4 = *(_QWORD *)(v1 + 312);
  v5 = swift_bridgeObjectRetain();
  LOBYTE(v3) = MEMORY[0x24BD1C764](v5, v2, v3, v4);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    type metadata accessor for DirectedEdge();
  }
  return 0;
}

uint64_t sub_24B2F9BEC()
{
  return sub_24B2F8024();
}

uint64_t sub_24B2F9BF4()
{
  return 0;
}

void sub_24B2F9BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[24];

  v10[12] = a3;
  v4 = (_QWORD *)*v3;
  v5 = sub_24B30BBCC();
  MEMORY[0x24BDAC7A8](v5);
  v10[13] = (char *)v10 - v6;
  v7 = v4[37];
  v8 = v4[38];
  v9 = v4[39];
  v10[19] = v4[35];
  v10[20] = v7;
  v10[15] = v7;
  v10[21] = v8;
  v10[22] = v9;
  type metadata accessor for DirectedEdge();
}

uint64_t sub_24B2F9C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  _BYTE v49[96];

  *(_QWORD *)(v9 - 184) = a1;
  v10 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v9 - 192) = &v49[-v11];
  v12 = *(_QWORD *)(v8 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = &v49[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v9 - 200) = &v49[-v17];
  v18 = MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v9 - 160) = &v49[-v19];
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v9 - 144) = v4;
  *(_QWORD *)(v9 - 136) = &v49[-v20];
  if ((sub_24B2F7814() & 1) == 0 || (sub_24B2F7814() & 1) == 0)
    return 0;
  *(_QWORD *)(v9 - 232) = v15;
  *(_QWORD *)(v9 - 248) = v12;
  *(_QWORD *)(v9 - 216) = v1;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v22 = v2;
  v23 = *(_QWORD *)(v9 - 136);
  v21(v23, *(_QWORD *)(v9 - 144), v8);
  v24 = v5;
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v8;
  v25[3] = v7;
  *(_QWORD *)(v9 - 208) = v3;
  v26 = *(_QWORD *)(v9 - 152);
  v27 = *(_QWORD *)(v9 - 216);
  v28 = *(_QWORD *)(v9 - 208);
  v25[4] = v26;
  v25[5] = v28;
  v25[6] = v24;
  v29 = *(_QWORD *)(v6 + 320);
  v25[7] = v29;
  v30 = *(_QWORD *)(v6 + 328);
  v25[8] = v30;
  v21(*(_QWORD *)(v9 - 160), v27, v8);
  *(_QWORD *)(v9 - 256) = v22 + 32;
  swift_beginAccess();
  v31 = (_QWORD *)swift_allocObject();
  v32 = v7;
  v33 = v31;
  v31[2] = v8;
  v31[3] = v32;
  *(_QWORD *)(v9 - 224) = v32;
  v34 = *(_QWORD *)(v9 - 208);
  v31[4] = v26;
  v31[5] = v34;
  v31[6] = v24;
  v31[7] = v29;
  v31[8] = v30;
  v31[9] = sub_24B2FC97C;
  *(_QWORD *)(v9 - 240) = v25;
  v31[10] = v25;
  v35 = v24;
  swift_isUniquelyReferenced_nonNull_native();
  v36 = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(v9 - 128) = v36;
  *(_QWORD *)(v22 + 32) = 0x8000000000000000;
  sub_24B2FB940(v23, v8, v24);
  if (__OFADD__(*(_QWORD *)(v36 + 16), (v37 & 1) == 0))
  {
    __break(1u);
  }
  else
  {
    v38 = v37;
    *(_QWORD *)(v9 - 272) = v21;
    sub_24B30BA7C();
    sub_24B30BCBC();
    v39 = sub_24B30BC98();
    v40 = *(_QWORD *)(v9 - 128);
    v41 = *(_QWORD *)(v9 - 200);
    if ((v39 & 1) == 0 || (sub_24B2FB940(*(_QWORD *)(v9 - 136), v8, v35), (v38 & 1) == (v42 & 1)))
    {
      *(_QWORD *)(v9 - 264) = v22;
      **(_QWORD **)(v9 - 256) = v40;
      swift_bridgeObjectRelease();
      if ((v38 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v43 = *(_QWORD *)(v9 - 136);
        v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 272);
      }
      else
      {
        v45 = swift_bridgeObjectRetain();
        *(_QWORD *)(v9 - 128) = ((uint64_t (*)(uint64_t))v33[9])(v45);
        v43 = *(_QWORD *)(v9 - 136);
        v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 272);
        v44(v41, v43, v8);
        sub_24B30BCB0();
      }
      swift_bridgeObjectRelease();
      sub_24B30BA58();
      v46 = *(_QWORD *)(v9 - 248);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v43, v8);
      swift_endAccess();
      v44(v41, *(_QWORD *)(v9 - 144), v8);
      v44(*(_QWORD *)(v9 - 232), *(_QWORD *)(v9 - 216), v8);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v46 + 32))(*(_QWORD *)(v9 - 192), v41, v8);
      v47 = *(_QWORD *)(v9 - 152);
      *(_QWORD *)(v9 - 120) = v8;
      *(_QWORD *)(v9 - 112) = v47;
      *(_QWORD *)(v9 - 104) = *(_QWORD *)(v9 - 208);
      *(_QWORD *)(v9 - 96) = v35;
      type metadata accessor for DirectedEdge();
    }
  }
  result = sub_24B30BE78();
  __break(1u);
  return result;
}

void sub_24B2FA0FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)v9 - v4;
  v10 = sub_24B30BBCC();
  v9[5] = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v9 - v5;
  v6 = v1[37];
  v7 = v1[38];
  v8 = v1[39];
  v15 = v2;
  v16 = v6;
  v12 = v7;
  v13 = v6;
  v17 = v7;
  v18 = v8;
  type metadata accessor for DirectedEdge();
}

uint64_t sub_24B2FA1E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(uint64_t, unint64_t, uint64_t);
  void (*v28)(_BYTE *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[96];

  *(_QWORD *)(v6 - 240) = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v6 - 256) = &v34[-v9];
  *(_QWORD *)(v6 - 216) = v3;
  *(_QWORD *)(v6 - 264) = *(_QWORD *)(v3 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v6 - 336) = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_QWORD *)(v2 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v6 - 272) = &v34[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v6 - 280) = &v34[-v16];
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v34[-v18];
  *(_QWORD *)(v6 - 360) = v20;
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v6 - 184) = &v34[-v21];
  swift_beginAccess();
  v22 = *(_QWORD *)(v1 + 32);
  v23 = sub_24B30BA7C();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v6 - 208) = v5;
  *(_QWORD *)(v6 - 248) = v4;
  MEMORY[0x24BD1C788](v5, v22, v2, v23, v4);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v6 - 144);
  if (!v24)
    return sub_24B30BA1C();
  v25 = sub_24B30BA1C();
  *(_QWORD *)(v6 - 176) = v25;
  if (MEMORY[0x24BD1C9B0](v24, v2))
  {
    *(_QWORD *)(v6 - 288) = v1 + 40;
    *(_QWORD *)(v6 - 344) = a1;
    *(_QWORD *)(v6 - 296) = v24;
    *(_QWORD *)(v6 - 304) = v19;
    *(_QWORD *)(v6 - 352) = v12;
    v26 = sub_24B30BA34();
    sub_24B30BA04();
    if ((v26 & 1) != 0)
    {
      v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
      v27(*(_QWORD *)(v6 - 184), v24 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v2);
    }
    else
    {
      v32 = sub_24B30BC44();
      if (*(_QWORD *)(v6 - 360) != 8)
      {
        __break(1u);
        JUMPOUT(0x24B2FA6A4);
      }
      *(_QWORD *)(v6 - 144) = v32;
      v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
      v27(*(_QWORD *)(v6 - 184), v6 - 144, v2);
      swift_unknownObjectRelease();
    }
    *(_QWORD *)(v6 - 200) = 1;
    v28 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 32);
    v28(v19, *(_QWORD *)(v6 - 184), v2);
    v29 = *(_QWORD *)(v6 - 280);
    v27(v29, *(_QWORD *)(v6 - 208), v2);
    v27(*(_QWORD *)(v6 - 272), (unint64_t)v19, v2);
    v28(*(_BYTE **)(v6 - 256), v29, v2);
    v30 = *(_QWORD *)(v6 - 224);
    *(_QWORD *)(v6 - 144) = v2;
    *(_QWORD *)(v6 - 136) = v30;
    v31 = *(_QWORD *)(v6 - 248);
    *(_QWORD *)(v6 - 128) = *(_QWORD *)(v6 - 232);
    *(_QWORD *)(v6 - 120) = v31;
    type metadata accessor for DirectedEdge();
  }
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_24B2FA6F8()
{
  return swift_bridgeObjectRelease();
}

uint64_t DirectedWeightedGraph.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DirectedWeightedGraph.__deallocating_deinit()
{
  DirectedWeightedGraph.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24B2FA74C()
{
  sub_24B2FBBF8();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B2FA760(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

void DirectedGraph.__allocating_init(name:)()
{
  swift_allocObject();
  DirectedGraph.init(name:)();
}

uint64_t sub_24B2FA7DC()
{
  uint64_t v0;

  return v0;
}

void DirectedGraph.init(name:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_24B30BA1C();
  swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v0 + 48) = sub_24B30B80C();
  swift_release();
  DirectedWeightedGraph.init(name:)();
}

BOOL sub_24B2FA8C8()
{
  uint64_t v0;

  v0 = sub_24B30BD28();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t sub_24B2FA90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24BD1D214](&unk_24B30EE00, a3);
  return sub_24B30BE60();
}

uint64_t sub_24B2FA960(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EE00, a1);
  return sub_24B30B998();
}

uint64_t sub_24B2FA9AC()
{
  MEMORY[0x24BD1D214](&unk_24B30EE00);
  return sub_24B30B9B0();
}

uint64_t sub_24B2FA9FC()
{
  MEMORY[0x24BD1D214](&unk_24B30EE00);
  return sub_24B30B9A4();
}

BOOL sub_24B2FAA4C@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = sub_24B2FA8C8();
  *a1 = result;
  return result;
}

void sub_24B2FAA8C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "vertexValues");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_24B2FAAB0()
{
  return 0x6156786574726576;
}

BOOL sub_24B2FAAD0@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = sub_24B2FA8C8();
  *a1 = result;
  return result;
}

uint64_t sub_24B2FAB08@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24B2FC92C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24B2FAB40(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EEA0, a1);
  return sub_24B30BECC();
}

uint64_t sub_24B2FAB74(uint64_t a1)
{
  MEMORY[0x24BD1D214](&unk_24B30EEA0, a1);
  return sub_24B30BED8();
}

void sub_24B2FABA8()
{
  swift_allocObject();
  sub_24B2FABF4();
}

uint64_t sub_24B2FABE0()
{
  uint64_t v0;

  return v0;
}

void sub_24B2FABF4()
{
  type metadata accessor for DirectedGraph.CodingKeys();
}

void sub_24B2FAC50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v5 - 176) = MEMORY[0x24BD1D214](&unk_24B30EEA0, a1);
  v6 = sub_24B30BD94();
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 232) = v6;
  *(_QWORD *)(v5 - 224) = v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - v8;
  swift_getAssociatedTypeWitness();
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_24B30BA1C();
  *(_QWORD *)(v5 - 192) = v2;
  *(_QWORD *)(v5 - 248) = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v3 + 48) = sub_24B30B80C();
  v10 = v1[3];
  *(_QWORD *)(v5 - 184) = v1;
  __swift_project_boxed_opaque_existential_1(v1, v10);
  *(_QWORD *)(v5 - 240) = v9;
  v11 = *(_QWORD *)(v5 - 72);
  sub_24B30BEB4();
  if (v11)
  {
    swift_release();
    v12 = *(_QWORD *)(v5 - 192);
    v18 = *(_QWORD *)(v5 - 208);
    v17 = *(_QWORD *)(v5 - 200);
    v19 = *(_QWORD *)(v5 - 216);
    __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v5 - 184));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 - 128) = v4;
    *(_QWORD *)(v5 - 120) = v17;
    *(_QWORD *)(v5 - 112) = v12;
    *(_QWORD *)(v5 - 104) = v18;
    *(_QWORD *)(v5 - 96) = v19;
    type metadata accessor for DirectedGraph();
  }
  v13 = sub_24B30B830();
  v14 = *(_QWORD *)(v5 - 192);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v5 - 144) = AssociatedConformanceWitness;
  *(_QWORD *)(v5 - 136) = v16;
  MEMORY[0x24BD1D214](MEMORY[0x24BEE04E0], v13, v5 - 144);
  sub_24B30BD7C();
  v20 = *(_QWORD *)(v5 - 128);
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v20;
  swift_release();
  swift_bridgeObjectRelease();
  sub_24B2FC934(*(_QWORD *)(v5 - 184), v5 - 128);
  sub_24B2F9578();
}

void sub_24B2FAEF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 224) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0);
  JUMPOUT(0x24B2FAE78);
}

void sub_24B2FAF14()
{
  type metadata accessor for DirectedGraph.CodingKeys();
}

uint64_t sub_24B2FAF74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x24BD1D214](&unk_24B30EEA0, a1);
  v4 = sub_24B30BE00();
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - v5;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_24B30BEC0();
  swift_beginAccess();
  *(_QWORD *)(v3 - 72) = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v3 - 192);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = sub_24B30B830();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v3 - 144) = AssociatedConformanceWitness;
  *(_QWORD *)(v3 - 136) = v10;
  MEMORY[0x24BD1D214](MEMORY[0x24BEE04C0], v8, v3 - 144);
  v11 = *(_QWORD *)(v3 - 152);
  sub_24B30BDE8();
  if (!v11)
    sub_24B2F98C0();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v3 - 160) + 8))(v6, v4);
}

uint64_t sub_24B2FB130()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;

  swift_beginAccess();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = sub_24B30BA7C();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = swift_bridgeObjectRetain();
  LOBYTE(v1) = MEMORY[0x24BD1C764](v3, AssociatedTypeWitness, v1, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    swift_beginAccess();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    swift_bridgeObjectRetain();
    type metadata accessor for DirectedEdge();
  }
  return 0;
}

uint64_t sub_24B2FB2FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(*v0 + 408);
  v2 = *(_QWORD *)(*v0 + 392);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v11 - v5;
  swift_beginAccess();
  v7 = v0[4];
  sub_24B30BA7C();
  swift_getAssociatedConformanceWitness();
  v11 = v7;
  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 64);
  swift_bridgeObjectRetain();
  v8(v2, v1);
  v9 = sub_24B30B818();
  MEMORY[0x24BD1D214](MEMORY[0x24BEE0310], v9);
  LOBYTE(v7) = sub_24B30B980();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_24B2FB460(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v3 = *v1;
  v4 = *(_QWORD *)(v3 + 392);
  v5 = sub_24B30BBCC();
  MEMORY[0x24BDAC7A8](v5);
  v18 = (char *)&v17 - v6;
  v7 = *(_QWORD *)(v3 + 408);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v12(v4, v7);
  v13 = sub_24B2F7814();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  if ((v13 & 1) == 0)
  {
    v12(v4, v7);
    v19 = sub_24B30BA1C();
    swift_beginAccess();
    sub_24B30BA7C();
    swift_getAssociatedConformanceWitness();
    sub_24B30B830();
    sub_24B30B854();
    swift_endAccess();
    v12(v4, v7);
    v14 = *(_QWORD *)(v4 - 8);
    v15 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v18, a1, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v4);
    swift_beginAccess();
    sub_24B30B830();
    sub_24B30B854();
    swift_endAccess();
  }
  return (v13 & 1) == 0;
}

uint64_t sub_24B2FB69C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v11;

  v1 = *(_QWORD *)(*v0 + 408);
  v2 = *(_QWORD *)(*v0 + 392);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v11 - v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(v2, v1);
  swift_beginAccess();
  v7 = v0[4];
  v8 = sub_24B30BA7C();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x24BD1C788](&v11, v6, v7, AssociatedTypeWitness, v8, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  result = v11;
  if (!v11)
    return sub_24B30BA1C();
  return result;
}

uint64_t sub_24B2FB7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t, uint64_t);
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 392);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  v10 = *(void (**)(uint64_t, uint64_t))(v1 + 64);
  v10(v2, v1);
  v10(v2, v1);
  v11 = sub_24B2F8024();
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v7, AssociatedTypeWitness);
  v12(v9, AssociatedTypeWitness);
  return v11 & 1;
}

uint64_t sub_24B2FB8F0()
{
  return swift_bridgeObjectRelease();
}

uint64_t DirectedGraph.deinit()
{
  uint64_t v0;

  DirectedWeightedGraph.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DirectedGraph.__deallocating_deinit()
{
  DirectedWeightedGraph.deinit();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_24B2FB940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_24B30B860();
  return sub_24B2FB988(a1, v6, a2, a3);
}

unint64_t sub_24B2FB988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  _QWORD v18[2];

  v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = sub_24B30B89C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

uint64_t sub_24B2FBAA0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_24B2FBAD0()
{
  return 2;
}

uint64_t sub_24B2FBAD8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

void sub_24B2FBB08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_24B2F7710(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_24B2FBB2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_24B2F8114(a1, a2, v2[6], v2[7], v2[2]);
}

uint64_t sub_24B2FBB3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, _QWORD);
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, _QWORD))(v1 + 48);
  sub_24B30BA7C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, *(_QWORD *)(a1 + *(int *)(TupleTypeMetadata2 + 48))) & 1;
}

uint64_t sub_24B2FBBB4()
{
  return swift_deallocObject();
}

uint64_t sub_24B2FBBC4()
{
  return sub_24B30BA1C();
}

uint64_t sub_24B2FBBD0()
{
  return swift_deallocObject();
}

void type metadata accessor for DirectedIndexGraph.CodingKeys()
{
  JUMPOUT(0x24BD1D1A8);
}

void type metadata accessor for DirectedIndexGraph()
{
  JUMPOUT(0x24BD1D1A8);
}

uint64_t sub_24B2FBBF8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_24B2FBC28()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

void type metadata accessor for DirectedWeightedGraph.CodingKeys()
{
  JUMPOUT(0x24BD1D1A8);
}

uint64_t sub_24B2FBC64()
{
  return swift_deallocObject();
}

uint64_t sub_24B2FBC74()
{
  return swift_deallocObject();
}

void type metadata accessor for DirectedGraph.CodingKeys()
{
  JUMPOUT(0x24BD1D1A8);
}

void sub_24B2FBC90()
{
  JUMPOUT(0x24BD1D214);
}

uint64_t sub_24B2FBCA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_24B2FBAD8();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B2FBCCC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return sub_24B2F6FD0(v1, v2);
}

uint64_t sub_24B2FBD08()
{
  return 32;
}

__n128 sub_24B2FBD14(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_24B2FBD20@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_24B2FBAA0();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B2FBD48()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_24B2F7034(v0);
}

uint64_t sub_24B2FBD70()
{
  return 32;
}

__n128 sub_24B2FBD7C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_24B2FBD88@<X0>(_QWORD *a1@<X8>)
{
  return keypath_get_14Tm(sub_24B2FBC28, a1);
}

uint64_t sub_24B2FBD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_15Tm(a1, a2, a3, a4, sub_24B2F90F0);
}

uint64_t sub_24B2FBDA0()
{
  return 56;
}

__n128 sub_24B2FBDAC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_24B2FBDC8@<X0>(_QWORD *a1@<X8>)
{
  return keypath_get_14Tm(sub_24B2FBBF8, a1);
}

uint64_t keypath_get_14Tm@<X0>(uint64_t (*a1)(void)@<X3>, _QWORD *a2@<X8>)
{
  *a2 = a1();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B2FBDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_15Tm(a1, a2, a3, a4, sub_24B2FA760);
}

uint64_t keypath_set_15Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_bridgeObjectRetain();
  return a5(v6);
}

uint64_t sub_24B2FBE34()
{
  return 40;
}

__n128 sub_24B2FBE40(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t dispatch thunk of Edge.from.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Edge.to.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t sub_24B2FBE64()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_24B2FBE6C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24B2FBED8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t sub_24B2FBF8C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

unint64_t sub_24B2FBFF4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_24B2FC060(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_24B2FC0CC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_24B2FC138(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t sub_24B2FC1A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_24B2FC264 + 4 * byte_24B30E8B0[(v7 - 1)]))();
}

void sub_24B2FC2B4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_24B2FC474()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for DirectedIndexGraph()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DirectedIndexGraph.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DirectedIndexGraph.adjacency.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of DirectedIndexGraph.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of DirectedIndexGraph.isEmpty.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of DirectedIndexGraph.vertices.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of DirectedIndexGraph.edges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of DirectedIndexGraph.hasVertex(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of DirectedIndexGraph.addVertex(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of DirectedIndexGraph.removeVertex(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of DirectedIndexGraph.getNeighbors(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of DirectedIndexGraph.hasEdge(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of DirectedIndexGraph.addEdge(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of DirectedIndexGraph.removeEdge(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of DirectedIndexGraph.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of DirectedIndexGraph.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t sub_24B2FC598()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for DirectedWeightedGraph()
{
  JUMPOUT(0x24BD1D1A8);
}

uint64_t method lookup function for DirectedWeightedGraph()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DirectedWeightedGraph.edgeValues.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of DirectedWeightedGraph.hasEdge(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of DirectedWeightedGraph.addEdge(from:to:value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of DirectedWeightedGraph.getNeighborsAndWeights(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t sub_24B2FC624()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for DirectedGraph()
{
  JUMPOUT(0x24BD1D1A8);
}

uint64_t method lookup function for DirectedGraph()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DirectedGraph.vertexValues.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of DirectedGraph.hasVertex(vertex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of DirectedGraph.addVertex(vertex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of DirectedGraph.getNeighbors(vertex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of DirectedGraph.hasEdge(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t sub_24B2FC6C8(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_24B2FC718(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24B2FC758 + 4 * byte_24B30E8BE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24B2FC778 + 4 * byte_24B30E8C3[v4]))();
}

_BYTE *sub_24B2FC758(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24B2FC778(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24B2FC780(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24B2FC788(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24B2FC790(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24B2FC798(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_24B2FC7A4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_24B2FC7B0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B2FC7FC + 4 * byte_24B30E8CD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B2FC830 + 4 * byte_24B30E8C8[v4]))();
}

uint64_t sub_24B2FC830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2FC838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B2FC840);
  return result;
}

uint64_t sub_24B2FC84C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B2FC854);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B2FC858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B2FC860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_24B2FC86C()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC87C()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC88C()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC89C()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC8AC()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC8BC()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC8CC()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC8DC()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC8EC()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC8FC()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC90C()
{
  JUMPOUT(0x24BD1D214);
}

void sub_24B2FC91C()
{
  JUMPOUT(0x24BD1D214);
}

uint64_t sub_24B2FC92C()
{
  return 1;
}

uint64_t sub_24B2FC934(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24B2FC988(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v12 = MEMORY[0x24BEE4AF8];
    result = sub_24B2DB008(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v12;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x24BD1CB90](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      objc_msgSend(v6, sel_floatValue);
      v9 = v8;

      v11 = *(_QWORD *)(v12 + 16);
      v10 = *(_QWORD *)(v12 + 24);
      if (v11 >= v10 >> 1)
        sub_24B2DB008(v10 > 1, v11 + 1, 1);
      ++v5;
      *(_QWORD *)(v12 + 16) = v11 + 1;
      *(_DWORD *)(v12 + 4 * v11 + 32) = v9;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_24B30BCE0();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t Embedder.embeddingModel.getter()
{
  swift_getDynamicType();
  swift_getMetatypeMetadata();
  return sub_24B30B8FC();
}

id NLEmbedder.init(useRecognizer:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  id result;

  v4 = (void *)*MEMORY[0x24BDDFC08];
  v5 = (void *)objc_opt_self();
  v6 = v4;
  result = objc_msgSend(v5, sel_sentenceEmbeddingForLanguage_, v6);
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = a1;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

uint64_t NLEmbedder.embed(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v4 = *v2;
  *(_BYTE *)(v3 + 48) = *((_BYTE *)v2 + 8);
  v5 = v2[2];
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  return swift_task_switch();
}

uint64_t sub_24B2FCBD8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  float v18;
  _QWORD *v20;

  if (!sub_24B30B920())
    goto LABEL_20;
  if (*(_BYTE *)(v0 + 48) != 1)
    goto LABEL_12;
  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_24B30B8B4();
  v3 = objc_msgSend(v1, sel_dominantLanguageForString_, v2);

  if (!v3)
    return (*(uint64_t (**)(id))(v0 + 8))(v3);
  v4 = sub_24B30B8D8();
  v6 = v5;
  if (v4 == sub_24B30B8D8() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();

LABEL_12:
    v3 = *(id *)(v0 + 40);
    if (!v3)
      return (*(uint64_t (**)(id))(v0 + 8))(v3);
    goto LABEL_13;
  }
  v9 = *(_QWORD *)(v0 + 40);
  v10 = sub_24B30BE48();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = 0;
  if ((v10 & 1) == 0 || !v9)
    return (*(uint64_t (**)(id))(v0 + 8))(v3);
LABEL_13:
  v11 = sub_24B30BB84();
  if (!v11)
  {
LABEL_20:
    v3 = 0;
    return (*(uint64_t (**)(id))(v0 + 8))(v3);
  }
  v12 = v11;
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_24B2DB008(0, v13, 0);
    v14 = 0;
    v3 = v20;
    v15 = v20[2];
    do
    {
      v16 = *(double *)(v12 + 8 * v14 + 32);
      v17 = v20[3];
      if (v15 >= v17 >> 1)
        sub_24B2DB008(v17 > 1, v15 + 1, 1);
      ++v14;
      v18 = v16;
      v20[2] = v15 + 1;
      *((float *)v20 + v15++ + 8) = v18;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = (id)MEMORY[0x24BEE4AF8];
  }
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

uint64_t NLEmbedder.embed(texts:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 112) = *((_BYTE *)v1 + 8);
  *(_QWORD *)(v2 + 56) = v1[2];
  return swift_task_switch();
}

uint64_t sub_24B2FCE00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD **)(v0 + 40);
  v2 = v1[2];
  *(_QWORD *)(v0 + 64) = v2;
  if (!v2)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  v3 = *(_BYTE *)(v0 + 112);
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = v4;
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = v1[5];
  *(_QWORD *)(v0 + 88) = v7;
  v8 = v1[4];
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 16) = v6;
  *(_BYTE *)(v0 + 24) = v3;
  *(_QWORD *)(v0 + 32) = v5;
  swift_bridgeObjectRetain();
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v9;
  *(_QWORD *)v9 = v0;
  *(_QWORD *)(v9 + 8) = sub_24B2FCEF0;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  v10 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v0 + 24);
  v11 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v11;
  return swift_task_switch();
}

uint64_t sub_24B2FCEF0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24B2FCF54()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 104);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_257967450 != -1)
      swift_once();
    v8 = sub_24B30B7A0();
    __swift_project_value_buffer(v8, (uint64_t)qword_25796F248);
    v9 = sub_24B30B788();
    v10 = sub_24B30BBC0();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_24B2C5000, v9, v10, "Failed to generate embedding.", v11, 2u);
      MEMORY[0x24BD1D2BC](v11, -1, -1);
    }

    v3 = 0;
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = *(_QWORD **)(v0 + 80);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_24B2C8488(0, v3[2] + 1, 1, *(_QWORD **)(v0 + 80));
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_24B2C8488((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72) + 1;
  v3[2] = v5 + 1;
  v3[v5 + 4] = v1;
  if (v7 == v6)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
  }
  v13 = *(_QWORD *)(v0 + 72) + 1;
  *(_QWORD *)(v0 + 72) = v13;
  *(_QWORD *)(v0 + 80) = v3;
  v15 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v16 = *(_BYTE *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 40) + 16 * v13;
  v18 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v0 + 88) = v18;
  v19 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v0 + 16) = v15;
  *(_BYTE *)(v0 + 24) = v16;
  *(_QWORD *)(v0 + 32) = v14;
  swift_bridgeObjectRetain();
  v20 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v20;
  *(_QWORD *)v20 = v0;
  *(_QWORD *)(v20 + 8) = sub_24B2FCEF0;
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v18;
  v21 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v20 + 48) = *(_BYTE *)(v0 + 24);
  v22 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)(v20 + 40) = v22;
  return swift_task_switch();
}

uint64_t sub_24B2FD17C(uint64_t a1, uint64_t a2)
{
  return sub_24B2FE2D4(a1, a2, &qword_257968838);
}

uint64_t sub_24B2FD188(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = sub_24B2DF0B0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = *v2;
  *(_BYTE *)(v6 + 48) = *((_BYTE *)v2 + 8);
  v8 = v2[2];
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  return swift_task_switch();
}

uint64_t sub_24B2FD208(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_24B2DF100;
  v5 = *v1;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = v5;
  *(_BYTE *)(v4 + 112) = *((_BYTE *)v1 + 8);
  *(_QWORD *)(v4 + 56) = v1[2];
  return swift_task_switch();
}

uint64_t NLContextualEmbedder.init(useRecognizer:xpcCall:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 + 224) = a2;
  *(_QWORD *)(v2 + 160) = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968778);
  *(_QWORD *)(v2 + 168) = v3;
  *(_QWORD *)(v2 + 176) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 184) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B2FD2E4()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  _QWORD *v26;

  v1 = (void *)*MEMORY[0x24BDDFC08];
  *(_QWORD *)(v0 + 192) = *MEMORY[0x24BDDFC08];
  v2 = objc_msgSend((id)objc_opt_self(), sel_contextualEmbeddingWithLanguage_, v1);
  *(_QWORD *)(v0 + 200) = v2;
  if (!v2)
  {
    if (qword_257967450 != -1)
      swift_once();
    v7 = sub_24B30B7A0();
    __swift_project_value_buffer(v7, (uint64_t)qword_25796F248);
    v8 = sub_24B30B788();
    v9 = sub_24B30BBC0();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_24B2C5000, v8, v9, "Failed at creating NLContextualEmbedding.", v10, 2u);
      MEMORY[0x24BD1D2BC](v10, -1, -1);
    }
    goto LABEL_19;
  }
  v3 = v2;
  if ((objc_msgSend(v2, sel_hasAvailableAssets) & 1) != 0)
  {
    if (objc_msgSend(*(id *)(v0 + 200), sel_hasAvailableAssets))
    {
      v4 = *(_QWORD *)(v0 + 200);
      v5 = *(unsigned __int8 *)(v0 + 224);
      v6 = *(_QWORD **)(v0 + 160);
      *v6 = *(_QWORD *)(v0 + 192);
      v6[1] = v5;
      v6[2] = v4;
LABEL_20:
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    if (qword_257967450 != -1)
      swift_once();
    v21 = sub_24B30B7A0();
    __swift_project_value_buffer(v21, (uint64_t)qword_25796F248);
    v22 = sub_24B30B788();
    v23 = sub_24B30BBC0();
    v24 = os_log_type_enabled(v22, v23);
    v8 = *(NSObject **)(v0 + 200);
    if (v24)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_24B2C5000, v22, v23, "NLContextualEmbedding doesn't have available assets.", v25, 2u);
      MEMORY[0x24BD1D2BC](v25, -1, -1);

    }
    else
    {

      v8 = v22;
    }
LABEL_19:

    v26 = *(_QWORD **)(v0 + 160);
    *v26 = 0;
    v26[1] = 0;
    v26[2] = 0;
    goto LABEL_20;
  }
  if (qword_257967450 != -1)
    swift_once();
  v11 = sub_24B30B7A0();
  *(_QWORD *)(v0 + 208) = __swift_project_value_buffer(v11, (uint64_t)qword_25796F248);
  v12 = sub_24B30B788();
  v13 = sub_24B30BBA8();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_24B2C5000, v12, v13, "NLContextualEmbedding has no available assets. Requesting assets.", v14, 2u);
    MEMORY[0x24BD1D2BC](v14, -1, -1);
  }
  v16 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 168);

  *(_QWORD *)(v0 + 56) = v0 + 144;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_24B2FD6E0;
  swift_continuation_init();
  *(_QWORD *)(v0 + 136) = v17;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 112));
  type metadata accessor for AssetsResult(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967A40);
  sub_24B30BAAC();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(boxed_opaque_existential_0, v15, v17);
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v19 = (_QWORD *)(v0 + 80);
  v19[1] = 1107296256;
  v19[2] = sub_24B2FDA08;
  v19[3] = &block_descriptor_0;
  objc_msgSend(v3, sel_requestEmbeddingAssetsWithCompletionHandler_, v19);
  return swift_continuation_await();
}

uint64_t sub_24B2FD6E0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 216) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_24B2FD740()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  NSObject *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;

  v1 = *(void **)(v0 + 216);
  swift_willThrow();

  v2 = sub_24B30B788();
  v3 = sub_24B30BBC0();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(NSObject **)(v0 + 200);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_24B2C5000, v2, v3, "NLContextualEmbedder failed at requesting assets.", v6, 2u);
    MEMORY[0x24BD1D2BC](v6, -1, -1);
    v7 = v2;
  }
  else
  {
    v7 = *(NSObject **)(v0 + 200);
    v5 = v2;
  }

  v8 = *(_QWORD **)(v0 + 160);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2FD82C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v12;
  uint8_t *v13;
  NSObject *v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = sub_24B30B788();
  v3 = sub_24B30BBB4();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 134217984;
    *(_QWORD *)(v0 + 152) = v1;
    sub_24B30BBD8();
    _os_log_impl(&dword_24B2C5000, v2, v3, "NLContextualEmbedding.AssetsResult: %ld", v4, 0xCu);
    MEMORY[0x24BD1D2BC](v4, -1, -1);
  }

  if (objc_msgSend(*(id *)(v0 + 200), sel_hasAvailableAssets))
  {
    v5 = *(_QWORD *)(v0 + 200);
    v6 = *(unsigned __int8 *)(v0 + 224);
    v7 = *(_QWORD **)(v0 + 160);
    *v7 = *(_QWORD *)(v0 + 192);
    v7[1] = v6;
    v7[2] = v5;
  }
  else
  {
    if (qword_257967450 != -1)
      swift_once();
    v8 = sub_24B30B7A0();
    __swift_project_value_buffer(v8, (uint64_t)qword_25796F248);
    v9 = sub_24B30B788();
    v10 = sub_24B30BBC0();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(NSObject **)(v0 + 200);
    if (v11)
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_24B2C5000, v9, v10, "NLContextualEmbedding doesn't have available assets.", v13, 2u);
      MEMORY[0x24BD1D2BC](v13, -1, -1);
      v14 = v9;
    }
    else
    {
      v14 = *(NSObject **)(v0 + 200);
      v12 = v9;
    }

    v15 = *(_QWORD **)(v0 + 160);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_24B2FDA08(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  if (a3)
  {
    v4 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968778);
    sub_24B30BAB8();

  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968778);
    sub_24B30BAC4();
  }
}

uint64_t NLContextualEmbedder.embed(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968788);
  *(_QWORD *)(v3 + 176) = v4;
  *(_QWORD *)(v3 + 184) = *(_QWORD *)(v4 - 8);
  v5 = swift_task_alloc();
  v6 = *v2;
  *(_QWORD *)(v3 + 192) = v5;
  *(_QWORD *)(v3 + 200) = v6;
  *(_BYTE *)(v3 + 232) = *((_BYTE *)v2 + 8);
  *(_QWORD *)(v3 + 208) = v2[2];
  return swift_task_switch();
}

uint64_t sub_24B2FDB14()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v17;
  uint64_t v18;

  if (!sub_24B30B920())
    goto LABEL_9;
  if (*(_BYTE *)(v0 + 232) == 1)
  {
    v1 = (void *)objc_opt_self();
    v2 = (void *)sub_24B30B8B4();
    v3 = objc_msgSend(v1, sel_dominantLanguageForString_, v2);

    if (!v3)
    {
LABEL_9:
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
    }
    v4 = sub_24B30B8D8();
    v6 = v5;
    if (v4 == sub_24B30B8D8() && v6 == v7)
    {
      swift_bridgeObjectRelease_n();

    }
    else
    {
      v9 = sub_24B30BE48();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if ((v9 & 1) == 0)
        goto LABEL_9;
    }
  }
  v11 = *(void **)(v0 + 208);
  v18 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = sub_24B30B8B4();
  *(_QWORD *)(v0 + 216) = v15;
  *(_QWORD *)(v0 + 56) = v0 + 144;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_24B2FDD64;
  swift_continuation_init();
  *(_QWORD *)(v0 + 136) = v14;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 112));
  __swift_instantiateConcreteTypeFromMangledName(&qword_257968790);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967A40);
  sub_24B30BAAC();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 32))(boxed_opaque_existential_0, v13, v14);
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v17 = (_QWORD *)(v0 + 80);
  v17[1] = 1107296256;
  v17[2] = sub_24B2FDE9C;
  v17[3] = &block_descriptor_4;
  objc_msgSend(v11, sel_requestSentenceEmbeddingVectorForString_language_completionHandler_, v15, v18, v17);
  return swift_continuation_await();
}

uint64_t sub_24B2FDD64()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 224) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_24B2FDDC4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(void **)(v0 + 216);
    v2 = sub_24B2FC988(*(_QWORD *)(v0 + 144));
    swift_bridgeObjectRelease();

  }
  else
  {

    v2 = 0;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_24B2FDE48()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 216);
  v2 = *(void **)(v0 + 224);
  swift_willThrow();

  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_24B2FDE9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  if (a3)
  {
    v5 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968788);
    sub_24B30BAB8();

  }
  else
  {
    if (a2)
    {
      sub_24B2E98D0(0, &qword_257968858);
      sub_24B30B9E0();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968788);
    sub_24B30BAC4();
  }
}

uint64_t NLContextualEmbedder.embed(texts:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v3;
  *(_BYTE *)(v2 + 112) = *((_BYTE *)v1 + 8);
  *(_QWORD *)(v2 + 56) = v1[2];
  return swift_task_switch();
}

uint64_t sub_24B2FDF8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD **)(v0 + 40);
  v2 = v1[2];
  *(_QWORD *)(v0 + 64) = v2;
  if (!v2)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  v3 = *(_BYTE *)(v0 + 112);
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = v4;
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = v1[5];
  *(_QWORD *)(v0 + 88) = v7;
  v8 = v1[4];
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 16) = v6;
  *(_BYTE *)(v0 + 24) = v3;
  *(_QWORD *)(v0 + 32) = v5;
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v9;
  *v9 = v0;
  v9[1] = sub_24B2FE05C;
  return NLContextualEmbedder.embed(text:)(v8, v7);
}

uint64_t sub_24B2FE05C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24B2FE0C0()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = *(_QWORD *)(v0 + 104);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_257967450 != -1)
      swift_once();
    v8 = sub_24B30B7A0();
    __swift_project_value_buffer(v8, (uint64_t)qword_25796F248);
    v9 = sub_24B30B788();
    v10 = sub_24B30BBC0();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_24B2C5000, v9, v10, "Failed to generate embedding.", v11, 2u);
      MEMORY[0x24BD1D2BC](v11, -1, -1);
    }

    v3 = 0;
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = *(_QWORD **)(v0 + 80);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_24B2C8488(0, v3[2] + 1, 1, *(_QWORD **)(v0 + 80));
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_24B2C8488((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72) + 1;
  v3[2] = v5 + 1;
  v3[v5 + 4] = v1;
  if (v7 == v6)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
  }
  v13 = *(_QWORD *)(v0 + 72) + 1;
  *(_QWORD *)(v0 + 72) = v13;
  *(_QWORD *)(v0 + 80) = v3;
  v15 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v16 = *(_BYTE *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 40) + 16 * v13;
  v18 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v0 + 88) = v18;
  v19 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v0 + 16) = v15;
  *(_BYTE *)(v0 + 24) = v16;
  *(_QWORD *)(v0 + 32) = v14;
  swift_bridgeObjectRetain();
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v20;
  *v20 = v0;
  v20[1] = sub_24B2FE05C;
  return NLContextualEmbedder.embed(text:)(v19, v18);
}

uint64_t sub_24B2FE2C8(uint64_t a1, uint64_t a2)
{
  return sub_24B2FE2D4(a1, a2, &qword_257968830);
}

uint64_t sub_24B2FE2D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return sub_24B30B8FC();
}

uint64_t sub_24B2FE304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24B2DF100;
  return NLContextualEmbedder.embed(text:)(a1, a2);
}

uint64_t sub_24B2FE360(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_24B2DF100;
  v5 = *v1;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = v5;
  *(_BYTE *)(v4 + 112) = *((_BYTE *)v1 + 8);
  *(_QWORD *)(v4 + 56) = v1[2];
  return swift_task_switch();
}

uint64_t MADTextEmbedder.init()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_24B2FE3EC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  *v1 = objc_msgSend((id)objc_opt_self(), sel_service);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MADTextEmbedder.embed(text:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a1;
  v3[4] = a2;
  v3[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_24B2FE45C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[4];
  v2 = v0[3];
  v0[2] = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967508);
  v3 = swift_allocObject();
  v0[6] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_24B30E190;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_24B2FE50C;
  v5 = v0[2];
  v4[3] = v3;
  v4[4] = v5;
  return swift_task_switch();
}

uint64_t sub_24B2FE50C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24B2FE570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
  {
    v2 = 0;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  __break(1u);
  return result;
}

uint64_t MADTextEmbedder.embed(texts:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch();
}

uint64_t sub_24B2FE5E8()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579687B8);
  *v2 = v0;
  v2[1] = sub_24B2FE6A4;
  return sub_24B30BE24();
}

uint64_t sub_24B2FE6A4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24B2FE700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
  {
    if (qword_257967450 != -1)
      swift_once();
    v2 = sub_24B30B7A0();
    __swift_project_value_buffer(v2, (uint64_t)qword_25796F248);
    v3 = sub_24B30B788();
    v4 = sub_24B30BBC0();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_24B2C5000, v3, v4, "Failed at generating embeddings.", v5, 2u);
      MEMORY[0x24BD1D2BC](v5, -1, -1);
    }

  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

void sub_24B2FE7E8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968840);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE642C8]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257967FE0);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_24B30E1E0;
  *(_QWORD *)(v9 + 32) = v8;
  aBlock[0] = v9;
  sub_24B30B9F8();
  sub_24B2E98D0(0, &qword_257968848);
  v10 = v8;
  v11 = (void *)sub_24B30B9D4();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_24B30B9D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v13 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v15 + v13, v7, v4);
  *(_QWORD *)(v15 + v14) = v10;
  aBlock[4] = sub_24B30046C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24B2FF3F4;
  aBlock[3] = &block_descriptor_19;
  v16 = _Block_copy(aBlock);
  v17 = v10;
  swift_release();
  objc_msgSend(a2, sel_performRequests_text_identifier_completionHandler_, v11, v12, 0, v16);
  _Block_release(v16);

}

void sub_24B2FE9FC(int a1, id a2, int a3, id a4)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  if (!a2)
  {
    if (a1 == -1 || (v14 = objc_msgSend(a4, sel_embeddingResults)) == 0)
    {
      if (qword_257967450 != -1)
        swift_once();
      v26 = sub_24B30B7A0();
      __swift_project_value_buffer(v26, (uint64_t)qword_25796F248);
      v27 = sub_24B30B788();
      v28 = sub_24B30BBC0();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_24B2C5000, v27, v28, "No results returned by MAD service.", v29, 2u);
        MEMORY[0x24BD1D2BC](v29, -1, -1);
      }

      v38 = 0;
      goto LABEL_37;
    }
    v15 = v14;
    v37 = sub_24B2E98D0(0, &qword_257968850);
    v16 = sub_24B30B9E0();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = sub_24B30BCE0();
      if (v17)
        goto LABEL_10;
    }
    else
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v17)
      {
LABEL_10:
        if (v17 < 1)
        {
          __break(1u);
          return;
        }
        v18 = 0;
        v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          if ((v16 & 0xC000000000000001) != 0)
            v20 = (id)MEMORY[0x24BD1CB90](v18, v16);
          else
            v20 = *(id *)(v16 + 8 * v18 + 32);
          v21 = v20;
          v22 = sub_24B2FEF84();
          if (v22)
          {
            v23 = v22;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v19 = sub_24B2C8488(0, v19[2] + 1, 1, v19);
            v25 = v19[2];
            v24 = v19[3];
            if (v25 >= v24 >> 1)
              v19 = sub_24B2C8488((_QWORD *)(v24 > 1), v25 + 1, 1, v19);
            v19[2] = v25 + 1;
            v19[v25 + 4] = v23;
          }
          ++v18;

        }
        while (v17 != v18);
        goto LABEL_31;
      }
    }
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_31:
    swift_bridgeObjectRelease();
    if (qword_257967450 != -1)
      swift_once();
    v30 = sub_24B30B7A0();
    __swift_project_value_buffer(v30, (uint64_t)qword_25796F248);
    swift_bridgeObjectRetain();
    v31 = sub_24B30B788();
    v32 = sub_24B30BBB4();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v38 = (_QWORD *)v34;
      *(_DWORD *)v33 = 136315138;
      v35 = MEMORY[0x24BD1C92C](v16, v37);
      sub_24B2DA8C8(v35, v36, (uint64_t *)&v38);
      sub_24B30BBD8();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24B2C5000, v31, v32, "Found result: %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD1D2BC](v34, -1, -1);
      MEMORY[0x24BD1D2BC](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v38 = v19;
LABEL_37:
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968840);
    sub_24B30BAC4();
    return;
  }
  v5 = a2;
  if (qword_257967450 != -1)
    swift_once();
  v6 = sub_24B30B7A0();
  __swift_project_value_buffer(v6, (uint64_t)qword_25796F248);
  v7 = a2;
  v8 = a2;
  v9 = sub_24B30B788();
  v10 = sub_24B30BBC0();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v13 = a2;
    v38 = (_QWORD *)_swift_stdlib_bridgeErrorToNSError();
    sub_24B30BBD8();
    *v12 = v38;

    _os_log_impl(&dword_24B2C5000, v9, v10, "Failed at calling MAD service: %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C8);
    swift_arrayDestroy();
    MEMORY[0x24BD1D2BC](v12, -1, -1);
    MEMORY[0x24BD1D2BC](v11, -1, -1);
  }
  else
  {

  }
  v38 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257968840);
  sub_24B30BAC4();

}

uint64_t sub_24B2FEF84()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  int64_t *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  int32x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;

  v1 = objc_msgSend(v0, sel_embedding);
  v2 = objc_msgSend(v1, sel_data);

  v3 = sub_24B30B578();
  v5 = v4;

  v6 = objc_msgSend(v0, sel_embedding);
  v7 = (unint64_t)objc_msgSend(v6, sel_type);

  if ((v7 & 0x8000000000000000) != 0)
  {
    result = sub_24B30BCC8();
    __break(1u);
    return result;
  }
  v8 = objc_msgSend(v0, sel_embedding);
  v9 = objc_msgSend(v8, sel_count);

  if (qword_257967450 != -1)
    goto LABEL_33;
  while (1)
  {
    v10 = sub_24B30B7A0();
    __swift_project_value_buffer(v10, (uint64_t)qword_25796F248);
    v11 = sub_24B30B788();
    v12 = sub_24B30BBB4();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v13 = 134217984;
      sub_24B30BBD8();
      _os_log_impl(&dword_24B2C5000, v11, v12, "Embedding type: %lu", v13, 0xCu);
      MEMORY[0x24BD1D2BC](v13, -1, -1);
    }

    if (v7 == 2)
    {
      sub_24B2FF704(v3, v5);
      v17 = v26;
      v27 = *(_QWORD *)(v26 + 16);
      if (!v27)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v7 != 1)
      break;
    sub_24B2FF560(v3, v5);
    v7 = (unint64_t)v14;
    v15 = v14[2];
    if (v15)
    {
      v38 = MEMORY[0x24BEE4AF8];
      sub_24B2DB008(0, v15, 0);
      v16 = 0;
      v17 = v38;
      v18 = *(_QWORD *)(v38 + 16);
      do
      {
        _H8 = *(_WORD *)(v7 + 2 * v16 + 32);
        v20 = *(_QWORD *)(v38 + 24);
        if (v18 >= v20 >> 1)
          sub_24B2DB008(v20 > 1, v18 + 1, 1);
        ++v16;
        __asm { FCVT            S0, H8 }
        *(_QWORD *)(v38 + 16) = v18 + 1;
        *(_DWORD *)(v38 + 4 * v18++ + 32) = _S0;
      }
      while (v15 != v16);
      swift_bridgeObjectRelease();
      v27 = *(_QWORD *)(v38 + 16);
      if (!v27)
        goto LABEL_30;
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
      v27 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v27)
        goto LABEL_30;
    }
LABEL_21:
    if ((~*(_DWORD *)(v17 + 32) & 0x7F800000) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      v31 = sub_24B30B788();
      v32 = sub_24B30BBC0();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_24B2C5000, v31, v32, "Found embedding with nan values. Return zeros embedding.", v33, 2u);
        MEMORY[0x24BD1D2BC](v33, -1, -1);
      }

      v34.i32[0] = 0;
      v17 = sub_24B2D79D0((unint64_t)v9, v34);
LABEL_30:
      sub_24B2CCD64(v3, v5);
      return v17;
    }
    if (v27 == 1)
      goto LABEL_30;
    v35 = 9;
    while (1)
    {
      v36 = v35 - 7;
      if (__OFADD__(v35 - 8, 1))
        break;
      if ((~*(_DWORD *)(v17 + 4 * v35) & 0x7F800000) == 0)
        goto LABEL_22;
      ++v35;
      if (v36 == v27)
        goto LABEL_30;
    }
    __break(1u);
LABEL_33:
    swift_once();
  }
  v28 = sub_24B30B788();
  v29 = sub_24B30BBC0();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_24B2C5000, v28, v29, "Embedding type not supported.", v30, 2u);
    MEMORY[0x24BD1D2BC](v30, -1, -1);
  }
  sub_24B2CCD64(v3, v5);

  return 0;
}

void sub_24B2FF3F4(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_24B2FF454()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_257968828);
  return sub_24B30B8FC();
}

uint64_t sub_24B2FF488(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_24B2DF100;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = *v2;
  return swift_task_switch();
}

uint64_t sub_24B2FF4FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24B2DF100;
  v5 = *v1;
  v4[3] = a1;
  v4[4] = v5;
  return swift_task_switch();
}

void sub_24B2FF560(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24B2FF59C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v2 = (v0 >> 49) & 0x7F;
  sub_24B3004E8(v1, v0);
  if (BYTE6(v0) >= 2uLL)
  {
    v3 = sub_24B30BA28();
    *(_QWORD *)(v3 + 16) = v2;
  }
  else
  {
    v2 = 0;
    v3 = MEMORY[0x24BEE4AF8];
  }
  v5[1] = v2;
  v6 = 0;
  v5[0] = v3 + 32;
  sub_24B30052C((uint64_t)v5, (uint64_t)&v6, v1, v0);
  if (v2 < v6)
  {
    __break(1u);
    JUMPOUT(0x24B2FF68CLL);
  }
  *(_QWORD *)(v3 + 16) = v6;
  sub_24B2CCD64(v1, v0);
  return v3;
}

void sub_24B2FF704(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24B2FF740()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v2 = (v0 >> 50) & 0x3F;
  sub_24B3004E8(v1, v0);
  if (BYTE6(v0) >= 4uLL)
  {
    v3 = sub_24B30BA28();
    *(_QWORD *)(v3 + 16) = v2;
  }
  else
  {
    v2 = 0;
    v3 = MEMORY[0x24BEE4AF8];
  }
  v5[1] = v2;
  v6 = 0;
  v5[0] = v3 + 32;
  sub_24B300674((uint64_t)v5, (uint64_t)&v6, v1, v0);
  if (v2 < v6)
  {
    __break(1u);
    JUMPOUT(0x24B2FF834);
  }
  *(_QWORD *)(v3 + 16) = v6;
  sub_24B2CCD64(v1, v0);
  return v3;
}

ZeoliteFramework::EmbedderName_optional __swiftcall EmbedderName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  ZeoliteFramework::EmbedderName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_24B30BD28();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static EmbedderName.allCases.getter()
{
  return &unk_251C3A320;
}

uint64_t EmbedderName.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000014;
  if (*v0 != 1)
    v1 = 0x457478655444414DLL;
  if (*v0)
    return v1;
  else
    return 0x646465626D454C4ELL;
}

uint64_t sub_24B2FF980(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24B2E9CC8(*a1, *a2);
}

uint64_t sub_24B2FF98C()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

uint64_t sub_24B2FFA40()
{
  sub_24B30B914();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B2FFAD0()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

ZeoliteFramework::EmbedderName_optional sub_24B2FFB80(Swift::String *a1)
{
  return EmbedderName.init(rawValue:)(*a1);
}

void sub_24B2FFB8C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA00000000007265;
  v4 = 0x800000024B30EFE0;
  v5 = 0xD000000000000014;
  if (v2 != 1)
  {
    v5 = 0x457478655444414DLL;
    v4 = 0xEF7265646465626DLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x646465626D454C4ELL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_24B2FFC00(_QWORD *a1@<X8>)
{
  *a1 = &unk_251C3A348;
}

uint64_t sub_24B2FFC10()
{
  sub_24B3003B0();
  return sub_24B30B9BC();
}

uint64_t sub_24B2FFC6C()
{
  sub_24B3003B0();
  return sub_24B30B98C();
}

uint64_t createEmbedder(embedderName:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_BYTE *)(v2 + 56) = *a2;
  return swift_task_switch();
}

uint64_t sub_24B2FFCD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD *v8;

  if (*(_BYTE *)(v0 + 56))
  {
    if (*(_BYTE *)(v0 + 56) == 1)
    {
      v1 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 48) = v1;
      *v1 = v0;
      v1[1] = sub_24B2FFE04;
      return NLContextualEmbedder.init(useRecognizer:xpcCall:)(v0 + 16, 0);
    }
    v8 = *(_QWORD **)(v0 + 40);
    v8[3] = &type metadata for MADTextEmbedder;
    v8[4] = &protocol witness table for MADTextEmbedder;
    *v8 = objc_msgSend((id)objc_opt_self(), sel_service);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v3 + 24) = &type metadata for NLEmbedder;
    *(_QWORD *)(v3 + 32) = &protocol witness table for NLEmbedder;
    v4 = (void *)*MEMORY[0x24BDDFC08];
    v5 = (void *)objc_opt_self();
    v6 = v4;
    v7 = objc_msgSend(v5, sel_sentenceEmbeddingForLanguage_, v6);
    *(_QWORD *)v3 = v6;
    *(_BYTE *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24B2FFE04()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24B2FFE58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_BYTE *)(v0 + 24);
    *(_QWORD *)(v2 + 24) = &type metadata for NLContextualEmbedder;
    *(_QWORD *)(v2 + 32) = &protocol witness table for NLContextualEmbedder;
    *(_QWORD *)v2 = v1;
    *(_BYTE *)(v2 + 8) = v4 & 1;
    *(_QWORD *)(v2 + 16) = v3;
  }
  else
  {
    *(_QWORD *)(v2 + 32) = 0;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  return sub_24B2DC184(a2 + 32, a1 + 32);
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

void sub_24B2FFEC8(uint64_t a1)
{
  uint64_t v1;

  sub_24B2FE7E8(a1, *(void **)(v1 + 16));
}

unint64_t sub_24B2FFED4()
{
  unint64_t result;

  result = qword_2579687F8;
  if (!qword_2579687F8)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for EmbedderName, &type metadata for EmbedderName);
    atomic_store(result, (unint64_t *)&qword_2579687F8);
  }
  return result;
}

unint64_t sub_24B2FFF1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257968800;
  if (!qword_257968800)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257968808);
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_257968800);
  }
  return result;
}

uint64_t dispatch thunk of Embedder.embeddingModel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Embedder.embed(text:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_24B2DF100;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of Embedder.embed(texts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_24B2DF100;
  return v9(a1, a2, a3);
}

uint64_t initializeBufferWithCopyOfBuffer for NLEmbedder(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for NLEmbedder(id *a1)
{

}

uint64_t assignWithCopy for NLEmbedder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for NLEmbedder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for NLEmbedder()
{
  return &type metadata for NLEmbedder;
}

uint64_t assignWithCopy for NLContextualEmbedder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for NLContextualEmbedder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t _s16ZeoliteFramework10NLEmbedderVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24B300284(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NLContextualEmbedder()
{
  return &type metadata for NLContextualEmbedder;
}

ValueMetadata *type metadata accessor for MADTextEmbedder()
{
  return &type metadata for MADTextEmbedder;
}

uint64_t storeEnumTagSinglePayload for EmbedderName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24B300330 + 4 * byte_24B30EFE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24B300364 + 4 * byte_24B30EFE0[v4]))();
}

uint64_t sub_24B300364(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B30036C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B300374);
  return result;
}

uint64_t sub_24B300380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B300388);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24B30038C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B300394(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmbedderName()
{
  return &type metadata for EmbedderName;
}

unint64_t sub_24B3003B0()
{
  unint64_t result;

  result = qword_257968820;
  if (!qword_257968820)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for EmbedderName, &type metadata for EmbedderName);
    atomic_store(result, (unint64_t *)&qword_257968820);
  }
  return result;
}

uint64_t sub_24B3003F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968840);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_24B30046C(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_257968840) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_24B2FE9FC(a1, a2, v2 + v6, *(id *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t sub_24B3004E8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

void sub_24B30052C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X12 }
}

uint64_t sub_24B300578@<X0>(uint64_t result@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!BYTE6(a3))
    goto LABEL_13;
  if (v4)
  {
    if (v4 == 1)
      v6 = (int)a2;
    else
      v6 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v6 = 0;
  }
  if (a4 + 0x4000000000000000 < 0)
    goto LABEL_22;
  v7 = 2 * a4;
  if (BYTE6(a3) < v7)
    v7 = BYTE6(a3);
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
    goto LABEL_23;
  if (v8 < v6)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x24B300654);
  }
  if (v6 == v8)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_16;
  }
  if (!result)
  {
LABEL_26:
    __break(1u);
    JUMPOUT(0x24B300664);
  }
  result = sub_24B30B56C();
  v9 = v8 - v6;
  if (__OFSUB__(v8, v6))
  {
    __break(1u);
    goto LABEL_26;
  }
LABEL_16:
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 1;
  v11 = __OFADD__(*v5, v10 >> 1);
  v12 = *v5 + (v10 >> 1);
  if (v11)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *v5 = v12;
  return result;
}

void sub_24B300674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X12 }
}

uint64_t sub_24B3006C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!BYTE6(a3))
    goto LABEL_13;
  if (v4)
  {
    if (v4 == 1)
      v6 = (int)a2;
    else
      v6 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v6 = 0;
  }
  if ((unint64_t)(a4 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_19;
  v7 = 4 * a4;
  if (BYTE6(a3) < v7)
    v7 = BYTE6(a3);
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
    goto LABEL_20;
  if (v8 < v6)
  {
LABEL_21:
    __break(1u);
    JUMPOUT(0x24B3007A8);
  }
  if (v6 == v8)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_16;
  }
  if (!result)
  {
LABEL_23:
    __break(1u);
    JUMPOUT(0x24B3007B8);
  }
  result = sub_24B30B56C();
  v9 = v8 - v6;
  if (__OFSUB__(v8, v6))
  {
    __break(1u);
    goto LABEL_23;
  }
LABEL_16:
  if (__OFADD__(*v5, v9 / 4))
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *v5 += v9 / 4;
  return result;
}

ZeoliteFramework::MetricTreeType_optional __swiftcall MetricTreeType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  ZeoliteFramework::MetricTreeType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_24B30BD28();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static MetricTreeType.allCases.getter()
{
  return &unk_251C3A3C0;
}

uint64_t MetricTreeType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x656572547076;
  else
    return 0x656572546C6C6162;
}

uint64_t sub_24B30087C(char *a1, char *a2)
{
  return sub_24B2E9AE0(*a1, *a2);
}

unint64_t sub_24B30088C()
{
  unint64_t result;

  result = qword_257968860;
  if (!qword_257968860)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for MetricTreeType, &type metadata for MetricTreeType);
    atomic_store(result, (unint64_t *)&qword_257968860);
  }
  return result;
}

uint64_t sub_24B3008D0()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

uint64_t sub_24B30094C()
{
  sub_24B30B914();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B3009A4()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

ZeoliteFramework::MetricTreeType_optional sub_24B300A1C(Swift::String *a1)
{
  return MetricTreeType.init(rawValue:)(*a1);
}

void sub_24B300A28(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656572546C6C6162;
  if (*v1)
    v2 = 0x656572547076;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_24B300A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257968868;
  if (!qword_257968868)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257968870);
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_257968868);
  }
  return result;
}

void sub_24B300AB4(_QWORD *a1@<X8>)
{
  *a1 = &unk_251C3A3E8;
}

uint64_t sub_24B300AC4()
{
  sub_24B300C58();
  return sub_24B30B9BC();
}

uint64_t sub_24B300B20()
{
  sub_24B300C58();
  return sub_24B30B98C();
}

uint64_t storeEnumTagSinglePayload for MetricTreeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B300BB8 + 4 * byte_24B30F1C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B300BEC + 4 * byte_24B30F1C0[v4]))();
}

uint64_t sub_24B300BEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B300BF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B300BFCLL);
  return result;
}

uint64_t sub_24B300C08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B300C10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B300C14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B300C1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricTreeType()
{
  return &type metadata for MetricTreeType;
}

uint64_t dispatch thunk of MetricTree.metric.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of MetricTree.nodes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MetricTree.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of MetricTree.maxDepth()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

unint64_t sub_24B300C58()
{
  unint64_t result;

  result = qword_257968878;
  if (!qword_257968878)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for MetricTreeType, &type metadata for MetricTreeType);
    atomic_store(result, (unint64_t *)&qword_257968878);
  }
  return result;
}

uint64_t sub_24B300C9C(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  int *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_24B2DB008(0, v2, 0);
    result = v8;
    v4 = (int *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_24B2DB008(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(_DWORD *)(result + 4 * v7 + 32) = v5;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t NearestNeighborsScorer.scoreBatches<A>(_:topK:skipFirst:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a4;
  *(_BYTE *)(v8 + 272) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  v10 = sub_24B30BAD0();
  *(_QWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 96) = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v8 + 104) = AssociatedTypeWitness;
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v8 + 120) = swift_task_alloc();
  sub_24B30BBCC();
  *(_QWORD *)(v8 + 128) = swift_task_alloc();
  *(_QWORD *)(v8 + 136) = *(_QWORD *)(a5 - 8);
  *(_QWORD *)(v8 + 144) = swift_task_alloc();
  v12 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v8 + 152) = v12;
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  v13 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v8 + 176) = v13;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 192) = swift_task_alloc();
  *(_QWORD *)(v8 + 200) = swift_task_alloc();
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  *(_QWORD *)(v8 + 216) = swift_task_alloc();
  *(_QWORD *)(v8 + 224) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24B300F20()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[17] + 16))(v0[18], v0[3], v0[6]);
  sub_24B30BB18();
  v0[29] = MEMORY[0x24BEE4AF8];
  v0[30] = swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  v0[31] = v1;
  *v1 = v0;
  v1[1] = sub_24B300FFC;
  return sub_24B30BADC();
}

uint64_t sub_24B300FFC()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24B301064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v7 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 120), v1, v2);
    v8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v5 + 16) + *(_QWORD *)(v5 + 16));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v6;
    *v6 = v0;
    v6[1] = sub_24B3011D4;
    return v8(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 272), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56));
  }
}

uint64_t sub_24B3011D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24B301230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  _QWORD *isUniquelyReferenced_nonNull_native;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1 = *(_QWORD *)(v0 + 264);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 232) + 16);
    v4 = v3 + v2;
    if (__OFADD__(v3, v2))
    {
      __break(1u);
    }
    else
    {
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      v6 = *(_QWORD **)(v0 + 232);
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v4 <= v6[3] >> 1)
      {
        if (*(_QWORD *)(v1 + 16))
          goto LABEL_6;
      }
      else
      {
        if (v3 <= v4)
          v24 = v3 + v2;
        else
          v24 = v3;
        v6 = sub_24B2C8B1C(isUniquelyReferenced_nonNull_native, v24, 1, *(_QWORD **)(v0 + 232));
        if (*(_QWORD *)(v1 + 16))
        {
LABEL_6:
          v7 = v6[2];
          if ((v6[3] >> 1) - v7 >= v2)
          {
            v8 = (unint64_t)&v6[2 * v7 + 4];
            if (v1 + 32 < v8 + 16 * v2 && v8 < v1 + 32 + 16 * v2)
              return sub_24B30BD10();
            swift_arrayInitWithCopy();
            if (v2)
            {
              v10 = v6[2];
              v11 = __OFADD__(v10, v2);
              v12 = v10 + v2;
              if (v11)
              {
                __break(1u);
                return sub_24B30BD10();
              }
              v6[2] = v12;
            }
LABEL_24:
            v26 = *(_QWORD *)(v0 + 112);
            v25 = *(_QWORD *)(v0 + 120);
            v27 = *(_QWORD *)(v0 + 104);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
            *(_QWORD *)(v0 + 232) = v6;
            *(_QWORD *)(v0 + 240) = swift_getAssociatedConformanceWitness();
            v28 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 248) = v28;
            *v28 = v0;
            v28[1] = sub_24B300FFC;
            return sub_24B30BADC();
          }
          goto LABEL_27;
        }
      }
      if (!v2)
        goto LABEL_24;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  if (qword_257967450 != -1)
LABEL_28:
    swift_once();
  v13 = sub_24B30B7A0();
  __swift_project_value_buffer(v13, (uint64_t)qword_25796F248);
  v14 = sub_24B30B788();
  v15 = sub_24B30BBC0();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_24B2C5000, v14, v15, "Failed to score in batch.", v16, 2u);
    MEMORY[0x24BD1D2BC](v16, -1, -1);
  }
  v18 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_24B3015A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v42;
  os_log_type_t v43;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v5(v2, v1, v3);
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (qword_257967450 != -1)
      swift_once();
    v6 = sub_24B30B7A0();
    __swift_project_value_buffer(v6, (uint64_t)qword_25796F248);
    v7 = sub_24B30B788();
    v8 = sub_24B30BBA8();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_24B2C5000, v7, v8, "Task canceled at scoring.", v9, 2u);
      MEMORY[0x24BD1D2BC](v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 184) + 16);
    v16(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 176));
    if (qword_257967450 != -1)
      swift_once();
    v17 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 176);
    v20 = sub_24B30B7A0();
    __swift_project_value_buffer(v20, (uint64_t)qword_25796F248);
    v16(v17, v18, v19);
    v21 = sub_24B30B788();
    v22 = sub_24B30BBC0();
    if (os_log_type_enabled(v21, v22))
    {
      v43 = v22;
      v24 = *(_QWORD *)(v0 + 192);
      v23 = *(_QWORD *)(v0 + 200);
      v25 = *(_QWORD *)(v0 + 176);
      v26 = (uint8_t *)swift_slowAlloc();
      v42 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v26 = 138412290;
      v16(v24, v23, v25);
      swift_getAssociatedConformanceWitness();
      v27 = sub_24B30BE30();
      v28 = *(_QWORD *)(v0 + 192);
      if (v27)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
      }
      else
      {
        v33 = *(_QWORD *)(v0 + 176);
        swift_allocError();
        v5(v34, v28, v33);
      }
      v35 = *(_QWORD *)(v0 + 200);
      v37 = *(_QWORD *)(v0 + 176);
      v36 = *(_QWORD *)(v0 + 184);
      v38 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 16) = v38;
      sub_24B30BBD8();
      *v42 = v38;
      v32 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v32(v35, v37);
      _os_log_impl(&dword_24B2C5000, v21, v43, "Error: %@", v26, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2579675C8);
      swift_arrayDestroy();
      MEMORY[0x24BD1D2BC](v42, -1, -1);
      MEMORY[0x24BD1D2BC](v26, -1, -1);

    }
    else
    {
      v29 = *(_QWORD *)(v0 + 200);
      v30 = *(_QWORD *)(v0 + 176);
      v31 = *(_QWORD *)(v0 + 184);

      v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
      v32(v29, v30);
    }
    v39 = *(_QWORD *)(v0 + 224);
    v40 = *(_QWORD *)(v0 + 176);
    v32(*(_QWORD *)(v0 + 208), v40);
    v32(v39, v40);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

ZeoliteFramework::ScorerName_optional __swiftcall ScorerName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  ZeoliteFramework::ScorerName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_24B30BD28();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static ScorerName.allCases.getter()
{
  return &unk_251C3A460;
}

uint64_t ScorerName.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x78697274616DLL;
  else
    return 0x726F736E6574;
}

uint64_t sub_24B301A7C(char *a1, char *a2)
{
  return sub_24B2E9DF8(*a1, *a2);
}

uint64_t sub_24B301A88()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

uint64_t sub_24B301AF4()
{
  sub_24B30B914();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B301B34()
{
  sub_24B30BE90();
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

ZeoliteFramework::ScorerName_optional sub_24B301B9C(Swift::String *a1)
{
  return ScorerName.init(rawValue:)(*a1);
}

void sub_24B301BA8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x726F736E6574;
  if (*v1)
    v2 = 0x78697274616DLL;
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

void sub_24B301BD8(_QWORD *a1@<X8>)
{
  *a1 = &unk_251C3A488;
}

uint64_t sub_24B301BE8()
{
  sub_24B302624();
  return sub_24B30B9BC();
}

uint64_t sub_24B301C44()
{
  sub_24B302624();
  return sub_24B30B98C();
}

uint64_t calculatePercentilesOfMeanTopK(_:percentiles:)(uint64_t a1, void *a2)
{
  Swift::OpaquePointer v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::OpaquePointer v8;
  unint64_t v9;
  float v10;
  int v11;
  vDSP_Length v12;
  vDSP_Length v13;
  float v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void *rawValue;
  void *__C;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3._rawValue = a2;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x24BEE4AF8];
    goto LABEL_25;
  }
  v3._rawValue = (void *)sub_24B301FE4(0, 100, 10);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_24;
LABEL_3:
  rawValue = v3._rawValue;
  v31 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  sub_24B2DC14C(0, v4, 0);
  v5 = 0;
  v6 = v31;
  v7 = a1 + 32;
  do
  {
    v8._rawValue = *(void **)(v7 + 16 * v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = (unint64_t)calculatePercentiles(_:percentiles:)(v8, (Swift::OpaquePointer)&unk_251C3A030);
    v10 = 0.0;
    v11 = 0;
    if (v9)
    {
      if (!*(_QWORD *)(v9 + 16))
        __break(1u);
      v11 = *(_DWORD *)(v9 + 32);
      swift_bridgeObjectRelease();
    }
    v12 = *((_QWORD *)v8._rawValue + 2);
    if (v12)
    {
      v10 = *((float *)v8._rawValue + 8);
      v13 = v12 - 1;
      if (v12 == 1)
      {
        v14 = *((float *)v8._rawValue + 8);
      }
      else
      {
        v15 = 0;
        v14 = *((float *)v8._rawValue + 8);
        do
        {
          if (*((float *)v8._rawValue + v15 + 9) < v14)
            v14 = *((float *)v8._rawValue + v15 + 9);
          ++v15;
        }
        while (v13 != v15);
        v16 = (float *)((char *)v8._rawValue + 36);
        do
        {
          v17 = *v16++;
          v18 = v17;
          if (v10 < v17)
            v10 = v18;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      v14 = 0.0;
    }
    LODWORD(__C) = 2143289344;
    swift_bridgeObjectRetain();
    vDSP_meanv((const float *)v8._rawValue + 8, 1, (float *)&__C, v12);
    swift_bridgeObjectRelease();
    v19 = (int)__C;
    __C = v8._rawValue;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
    sub_24B2E8A60((unint64_t *)&qword_257967778, &qword_2579674D0, MEMORY[0x24BEDFD28]);
    sub_24B30B404();
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v31 = v6;
    v23 = *(_QWORD *)(v6 + 16);
    v22 = *(_QWORD *)(v6 + 24);
    if (v23 >= v22 >> 1)
    {
      sub_24B2DC14C(v22 > 1, v23 + 1, 1);
      v6 = v31;
    }
    ++v5;
    *(_QWORD *)(v6 + 16) = v23 + 1;
    v24 = v6 + 20 * v23;
    *(float *)(v24 + 32) = v14;
    *(float *)(v24 + 36) = v10;
    *(_DWORD *)(v24 + 40) = v19;
    *(_DWORD *)(v24 + 44) = v21;
    *(_DWORD *)(v24 + 48) = v11;
  }
  while (v5 != v4);
  v3._rawValue = rawValue;
LABEL_25:
  v25 = sub_24B300C9C(v6);
  swift_bridgeObjectRelease();
  v26 = (unint64_t)calculatePercentiles(_:percentiles:)((Swift::OpaquePointer)v25, v3);
  swift_bridgeObjectRelease();
  if (v26)
  {
    v27 = sub_24B302240((uint64_t)v3._rawValue, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v27;
  }
  else
  {
    result = sub_24B30BCD4();
    __break(1u);
  }
  return result;
}

uint64_t sub_24B301FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a1;
  v6 = sub_24B302668(a1, a2, a3);
  v24 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DB008(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
    goto LABEL_46;
  result = v24;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (!v6)
    goto LABEL_22;
  v11 = v5;
  while (1)
  {
    v12 = v11 <= a2;
    if (a3 > 0)
      v12 = v11 >= a2;
    if (!v12)
    {
      v10 = !__OFADD__(v11, a3);
      if (__OFADD__(v11, a3))
        v9 = 0x8000000000000000;
      else
        v9 = 0;
      if (__OFADD__(v11, a3))
        v5 = ((v11 + a3) >> 63) ^ 0x8000000000000000;
      else
        v5 = v11 + a3;
      goto LABEL_19;
    }
    if (v8 & 1 | (v11 != a2))
      break;
    if (!v10 && v9 == 0x8000000000000000)
      goto LABEL_45;
    v8 = 1;
    v5 = a2;
LABEL_19:
    v25 = result;
    v14 = *(_QWORD *)(result + 16);
    v13 = *(_QWORD *)(result + 24);
    if (v14 >= v13 >> 1)
    {
      v22 = v9;
      v20 = v8;
      sub_24B2DB008(v13 > 1, v14 + 1, 1);
      v8 = v20;
      v9 = v22;
      result = v25;
    }
    *(_QWORD *)(result + 16) = v14 + 1;
    *(float *)(result + 4 * v14 + 32) = (float)v11;
    v11 = v5;
    if (!--v6)
    {
      while (1)
      {
LABEL_22:
        v15 = v5 <= a2;
        if (a3 > 0)
          v15 = v5 >= a2;
        if (v15)
        {
          if ((v5 != a2) | v8 & 1)
            return result;
          if (v10)
          {
            v8 = 1;
            v16 = a2;
            v10 = 1;
          }
          else
          {
            if (v9 == 0x8000000000000000)
              return result;
            v10 = 0;
            v8 = 1;
            v16 = a2;
          }
        }
        else
        {
          v17 = __OFADD__(v5, a3);
          if (v17)
            v16 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
          else
            v16 = v5 + a3;
          if (v17)
            v9 = 0x8000000000000000;
          else
            v9 = 0;
          v10 = !v17;
        }
        v26 = result;
        v19 = *(_QWORD *)(result + 16);
        v18 = *(_QWORD *)(result + 24);
        if (v19 >= v18 >> 1)
        {
          v23 = v9;
          v21 = v8;
          sub_24B2DB008(v18 > 1, v19 + 1, 1);
          v8 = v21;
          v9 = v23;
          result = v26;
        }
        *(_QWORD *)(result + 16) = v19 + 1;
        *(float *)(result + 4 * v19 + 32) = (float)v5;
        v5 = v16;
      }
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_24B302240(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int *v7;
  int *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v35 = MEMORY[0x24BEE4AF8];
  sub_24B2DC130(0, v6, 0);
  v32 = v5;
  v33 = v4;
  v34 = a1;
  if (v6)
  {
    v7 = (int *)(a1 + 32);
    v8 = (int *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v35 + 16);
      v14 = *(_QWORD *)(v35 + 24);
      if (v15 >= v14 >> 1)
      {
        v30 = v11;
        result = sub_24B2DC130(v14 > 1, v15 + 1, 1);
        v11 = v30;
      }
      *(_QWORD *)(v35 + 16) = v15 + 1;
      v16 = v35 + 8 * v15;
      --v5;
      *(_DWORD *)(v16 + 32) = v12;
      *(_DWORD *)(v16 + 36) = v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v33 <= v32)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v35;
    }
    v17 = 0;
    if (v6 <= v32)
      v18 = v32;
    else
      v18 = v6;
    v19 = v18 - v6;
    v20 = v33 - v6;
    v21 = v32 - v6;
    v22 = 4 * v6 + 32;
    v23 = v34 + v22;
    v24 = v11 + v22;
    while (v20 != v17)
    {
      if (v21 == v17)
        goto LABEL_24;
      if (v19 == v17)
        goto LABEL_28;
      v25 = *(_DWORD *)(v23 + 4 * v17);
      v26 = *(_DWORD *)(v24 + 4 * v17);
      v28 = *(_QWORD *)(v35 + 16);
      v27 = *(_QWORD *)(v35 + 24);
      if (v28 >= v27 >> 1)
      {
        v31 = v11;
        result = sub_24B2DC130(v27 > 1, v28 + 1, 1);
        v11 = v31;
      }
      *(_QWORD *)(v35 + 16) = v28 + 1;
      v29 = v35 + 8 * v28;
      *(_DWORD *)(v29 + 32) = v25;
      *(_DWORD *)(v29 + 36) = v26;
      if (v20 == ++v17)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_24B302458()
{
  unint64_t result;

  result = qword_257968888;
  if (!qword_257968888)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for ScorerName, &type metadata for ScorerName);
    atomic_store(result, (unint64_t *)&qword_257968888);
  }
  return result;
}

uint64_t sub_24B30249C()
{
  return sub_24B2E8A60(&qword_257968890, &qword_257968898, MEMORY[0x24BEE12E0]);
}

uint64_t dispatch thunk of NearestNeighborsScorer.score(_:topK:skipFirst:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 16) + *(_QWORD *)(a5 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_24B2DF0B0;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t storeEnumTagSinglePayload for ScorerName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B3025A4 + 4 * byte_24B30F335[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B3025D8 + 4 * asc_24B30F330[v4]))();
}

uint64_t sub_24B3025D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B3025E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B3025E8);
  return result;
}

uint64_t sub_24B3025F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B3025FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B302600(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B302608(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScorerName()
{
  return &type metadata for ScorerName;
}

unint64_t sub_24B302624()
{
  unint64_t result;

  result = qword_2579688A8;
  if (!qword_2579688A8)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for ScorerName, &type metadata for ScorerName);
    atomic_store(result, (unint64_t *)&qword_2579688A8);
  }
  return result;
}

uint64_t sub_24B302668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v5;
  unint64_t v6;
  char v7;
  BOOL v8;
  char v9;
  BOOL v10;
  _BOOL4 v11;

  result = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v11 = a1 <= a2;
    if (a3 > 0)
      v11 = a1 >= a2;
    if (v11)
    {
      if ((a1 != a2) | v5 & 1)
        return result;
      if ((v7 & 1) != 0)
      {
        v5 = 1;
        a1 = a2;
        v7 = 1;
      }
      else
      {
        if (v6 == 0x8000000000000000)
          return result;
        v7 = 0;
        v5 = 1;
        a1 = a2;
      }
    }
    else
    {
      v8 = __OFADD__(a1, a3);
      a1 += a3;
      v9 = v8;
      v10 = (v9 & 1) == 0;
      if ((v9 & 1) != 0)
      {
        a1 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
        v6 = 0x8000000000000000;
      }
      else
      {
        v6 = 0;
      }
      v7 = v10;
    }
    v8 = __OFADD__(result++, 1);
  }
  while (!v8);
  __break(1u);
  return result;
}

uint64_t (*DistanceMetric.distanceFunction()())()
{
  char *v0;

  return off_251C3CEC0[*v0];
}

uint64_t sub_24B30272C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24B3092A4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_24B3034CC(v5);
  *a1 = v2;
  return result;
}

float static DistanceHelper.distanceL2(_:_:)(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2;
  float __C;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    __break(1u);
  __C = NAN;
  vDSP_distancesq((const float *)(a1 + 32), 1, (const float *)(a2 + 32), 1, &__C, v2);
  return sqrtf(__C);
}

uint64_t sub_24B302814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = MEMORY[0x24BEE4AF8];
  sub_24B2DC168(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v10 + 16);
    v5 = 16 * v4;
    do
    {
      v6 = *(_DWORD *)(a1 + 32 + 4 * v3);
      v7 = *(_QWORD *)(v10 + 24);
      if (v4 + v3 >= v7 >> 1)
        sub_24B2DC168(v7 > 1, v4 + v3 + 1, 1);
      *(_QWORD *)(v10 + 16) = v4 + v3 + 1;
      v8 = v10 + v5;
      *(_QWORD *)(v8 + 32) = v3;
      *(_DWORD *)(v8 + 40) = v6;
      v5 += 16;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v10;
}

float sub_24B302924(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2;
  float __C;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    __break(1u);
  __C = NAN;
  vDSP_distancesq((const float *)(a1 + 32), 1, (const float *)(a2 + 32), 1, &__C, v2);
  return __C;
}

float static DistanceHelper.distanceL2Squared(_:_:)(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2;
  float __C;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    __break(1u);
  __C = NAN;
  vDSP_distancesq((const float *)(a1 + 32), 1, (const float *)(a2 + 32), 1, &__C, v2);
  return __C;
}

ZeoliteFramework::DistanceMetric_optional __swiftcall DistanceMetric.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  ZeoliteFramework::DistanceMetric_optional result;
  char v5;

  v2 = v1;
  v3 = sub_24B30BD28();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static DistanceMetric.allCases.getter()
{
  return &unk_251C3A530;
}

uint64_t DistanceMetric.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24B302AAC + 4 * byte_24B30F4A0[*v0]))(12620, 0xE200000000000000);
}

uint64_t sub_24B302AAC()
{
  return 12876;
}

uint64_t sub_24B302AB4()
{
  return 0x657261757153324CLL;
}

uint64_t sub_24B302AD0()
{
  return 0x6944656E69736F43;
}

void sub_24B302AF4(char *a1)
{
  sub_24B2E9B80(*a1);
}

void sub_24B302B00()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_24B30BE90();
  __asm { BR              X9 }
}

uint64_t sub_24B302B40()
{
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

void sub_24B302BB0()
{
  __asm { BR              X10 }
}

uint64_t sub_24B302BE0()
{
  sub_24B30B914();
  return swift_bridgeObjectRelease();
}

void sub_24B302C3C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_24B30BE90();
  __asm { BR              X9 }
}

uint64_t sub_24B302C78()
{
  sub_24B30B914();
  swift_bridgeObjectRelease();
  return sub_24B30BEA8();
}

ZeoliteFramework::DistanceMetric_optional sub_24B302CE8(Swift::String *a1)
{
  return DistanceMetric.init(rawValue:)(*a1);
}

uint64_t sub_24B302CF4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24B302D18 + 4 * byte_24B30F4B0[*v0]))();
}

void sub_24B302D18(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 12876;
  a1[1] = v1;
}

void sub_24B302D24(_QWORD *a1@<X8>)
{
  *a1 = 0x657261757153324CLL;
  a1[1] = 0xE900000000000064;
}

void sub_24B302D44(char *a1@<X8>)
{
  strcpy(a1, "CosineDistance");
  a1[15] = -18;
}

void sub_24B302D6C(_QWORD *a1@<X8>)
{
  *a1 = &unk_251C3A558;
}

uint64_t sub_24B302D7C()
{
  sub_24B304218();
  return sub_24B30B9BC();
}

uint64_t sub_24B302DD8()
{
  sub_24B304218();
  return sub_24B30B98C();
}

void DistanceHelper.metric.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t DistanceHelper.points.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B302E38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B302E94()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DistanceHelper.__allocating_init(points:metric:)(uint64_t a1, char *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  DistanceHelper.init(points:metric:)(a1, a2);
  return v4;
}

uint64_t DistanceHelper.init(points:metric:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 48) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 56) = v5;
  *(_BYTE *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 24) = off_251C3CEC0[v4];
  *(_QWORD *)(v2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    _s16ZeoliteFramework14DistanceHelperC17buildDistancesLIL6pointsSaySaySfGGAG_tFZ_0(a1);
    v8 = v7;
    swift_beginAccess();
    *(_QWORD *)(v2 + 56) = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9.i32[0] = 2139095040;
    v10 = sub_24B2D79D0(v6, v9);
    swift_beginAccess();
    *(_QWORD *)(v2 + 48) = v10;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24B30300C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_24B302814(v0);
  swift_bridgeObjectRelease();
  v3 = v1;
  swift_bridgeObjectRetain();
  sub_24B30272C(&v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_24B30309C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = _s16ZeoliteFramework14DistanceHelperC12computeNorms6pointsSaySfGSayAFG_tFZ_0(*(_QWORD *)(v0 + 40));
  swift_beginAccess();
  *(_QWORD *)(v0 + 48) = v1;
  return swift_bridgeObjectRelease();
}

void sub_24B3030EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  float (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  float v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v20 + 16);
  if (v1 != 1)
  {
    if (v1)
    {
      v2 = v0;
      v3 = (_QWORD *)(v0 + 56);
      v4 = v20 + 32;
      v5 = 1;
      v19 = *(_QWORD *)(v20 + 16);
      while (v5 != v1)
      {
        v6 = *(_QWORD *)(v20 + 16);
        if (v5 >= v6 || v5 - 1 >= v6)
          goto LABEL_23;
        v8 = 0;
        v9 = v5 + 1;
        do
        {
          v10 = *(float (**)(uint64_t, uint64_t))(v2 + 24);
          v11 = *(_QWORD *)(v4 + 8 * v5);
          v12 = *(_QWORD *)(v4 + 8 * v8);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v13 = v10(v11, v12);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v14 = *(_QWORD **)(v2 + 56);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v2 + 56) = v14;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v14 = sub_24B2D8410(v14);
            *v3 = v14;
          }
          if (v5 >= v14[2])
          {
            __break(1u);
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
          v16 = v14 + 4;
          v17 = v14[v5 + 4];
          v18 = swift_isUniquelyReferenced_nonNull_native();
          v16[v5] = v17;
          if ((v18 & 1) == 0)
          {
            v17 = sub_24B2D83D4(v17);
            v16[v5] = v17;
          }
          if (v8 >= *(_QWORD *)(v17 + 16))
            goto LABEL_21;
          *(float *)(v17 + 4 * v8 + 32) = v13;
          swift_endAccess();
          ++v8;
        }
        while (v5 != v8);
        ++v5;
        v1 = v19;
        if (v9 == v19)
          return;
      }
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_24B3032A8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24B3032DC(int64_t a1, int64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  unint64_t v10;

  result = swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 > a1 && v7 > a2)
  {
    v9 = a1 == a2;
    if (a1 >= a2)
      goto LABEL_12;
    if (a2 < 0)
    {
      __break(1u);
    }
    else if ((a1 & 0x8000000000000000) == 0)
    {
      v6 = *(_QWORD *)(v6 + 8 * a2 + 32);
      v10 = *(_QWORD *)(v6 + 16);
      v9 = v10 == a1;
      if (v10 > a1)
        return result;
      __break(1u);
LABEL_12:
      if (v9)
        return result;
      if ((a1 & 0x8000000000000000) == 0)
      {
        if ((a2 & 0x8000000000000000) == 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v6 + 8 * a1 + 32) + 16) > (unint64_t)a2)
            return result;
LABEL_21:
          __break(1u);
          return result;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_24B3033AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = swift_beginAccess();
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16);
  if (v8 > a1 && v8 > a2)
  {
    if ((a3 & 1) != 0)
    {
      if (a1 < 0)
      {
        __break(1u);
      }
      else if ((a2 & 0x8000000000000000) == 0)
      {
        return result;
      }
      __break(1u);
      goto LABEL_16;
    }
    if (a1 < 0)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (a2 < 0)
LABEL_17:
      __break(1u);
  }
  return result;
}

uint64_t DistanceHelper.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DistanceHelper.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24B3034CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(float *)(v89 + 8);
          if (*(float *)(v89 - 8) >= v90)
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_24B2E2A04((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_24B3080B0((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968A08);
    v8 = sub_24B30BA28();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(float *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v14);
        while (v17 < v15 != *(v18 - 4) >= *v18)
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v17 < v15)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (float *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = v29[2];
          if (*(v29 - 2) >= v31)
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *(_QWORD *)v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((_QWORD *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_24B307CB4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_24B307CB4((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_24B2E2A04((char *)(v11 + 16 * *(_QWORD *)v78), (char *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

float _s16ZeoliteFramework14DistanceHelperC10distanceL1ySfSaySfG_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  vDSP_Length v5;
  uint64_t v7;
  _QWORD __C[11];

  __C[10] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  __C[0] = a1;
  v2 = *(_QWORD *)(a1 + 16);
  __C[7] = __C;
  __C[8] = &v7;
  __C[0] = sub_24B309044(v2, (uint64_t (*)(_QWORD *, uint64_t *))sub_24B30425C);
  v3 = *(_QWORD *)(__C[0] + 16);
  __C[3] = __C;
  v4 = sub_24B309044(v3, (uint64_t (*)(_QWORD *, uint64_t *))sub_24B3042A8);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  LODWORD(__C[0]) = 2143289344;
  vDSP_sve((const float *)(v4 + 32), 1, (float *)__C, v5);
  swift_bridgeObjectRelease();
  return *(float *)__C;
}

float _s16ZeoliteFramework14DistanceHelperC14distanceCosineySfSaySfG_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2;
  const float *v3;
  const float *v4;
  float v5;
  float v6;
  float __C;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    __break(1u);
  __C = NAN;
  v3 = (const float *)(a1 + 32);
  v4 = (const float *)(a2 + 32);
  vDSP_dotpr((const float *)(a1 + 32), 1, (const float *)(a2 + 32), 1, &__C, v2);
  v5 = __C;
  __C = NAN;
  vDSP_dotpr(v3, 1, v3, 1, &__C, v2);
  v6 = __C;
  __C = NAN;
  vDSP_dotpr(v4, 1, v4, 1, &__C, v2);
  return 1.0 - (float)(v5 / sqrtf(v6 * __C));
}

void _s16ZeoliteFramework14DistanceHelperC17buildDistancesLIL6pointsSaySaySfGGAG_tFZ_0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  size_t i;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
LABEL_8:
    __break(1u);
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D0);
  v2 = (_QWORD *)sub_24B30BA28();
  v3 = v2;
  v2[2] = v1;
  v2[4] = MEMORY[0x24BEE4AF8];
  v4 = v1 - 1;
  if (v1 != 1)
  {
    v5 = v2 + 5;
    memset_pattern16(v2 + 5, &unk_251C3CEB0, 8 * v1 - 8);
    v6 = 0;
    for (i = 4; ; i += 4)
    {
      v8 = v6 + 1;
      v9 = sub_24B30BA28();
      *(_QWORD *)(v9 + 16) = v6 + 1;
      memset_pattern16((void *)(v9 + 32), &unk_24B30F670, i);
      if ((unint64_t)(v6 + 1) >= v3[2])
        break;
      v5[v6] = v9;
      swift_bridgeObjectRelease();
      ++v6;
      if (v4 == v8)
        return;
    }
    __break(1u);
    goto LABEL_8;
  }
}

uint64_t _s16ZeoliteFramework14DistanceHelperC12computeNorms6pointsSaySfGSayAFG_tFZ_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  vDSP_Length v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  float __C;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v3 = sub_24B2C7F88(0, v1, 0, MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  for (i = 0; i != v1; ++i)
  {
    v5 = *(_QWORD *)(a1 + 8 * i + 32);
    v6 = *(_QWORD *)(v5 + 16);
    __C = NAN;
    swift_bridgeObjectRetain();
    vDSP_dotpr((const float *)(v5 + 32), 1, (const float *)(v5 + 32), 1, &__C, v6);
    swift_bridgeObjectRelease();
    v7 = __C;
    v9 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    if (v9 >= v8 >> 1)
      v3 = sub_24B2C7F88(v8 > 1, v9 + 1, 1, v3);
    *(_QWORD *)(v3 + 16) = v9 + 1;
    *(float *)(v3 + 4 * v9 + 32) = sqrtf(v7);
  }
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_24B303FE4()
{
  unint64_t result;

  result = qword_2579688B0;
  if (!qword_2579688B0)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for DistanceMetric, &type metadata for DistanceMetric);
    atomic_store(result, (unint64_t *)&qword_2579688B0);
  }
  return result;
}

unint64_t sub_24B30402C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2579688B8;
  if (!qword_2579688B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2579688C0);
    result = MEMORY[0x24BD1D214](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2579688B8);
  }
  return result;
}

uint64_t sub_24B304078@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for DistanceMetric(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24B304110 + 4 * byte_24B30F4B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24B304144 + 4 * byte_24B30F4B4[v4]))();
}

uint64_t sub_24B304144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B30414C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B304154);
  return result;
}

uint64_t sub_24B304160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B304168);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24B30416C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B304174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DistanceMetric()
{
  return &type metadata for DistanceMetric;
}

uint64_t type metadata accessor for DistanceHelper()
{
  return objc_opt_self();
}

uint64_t method lookup function for DistanceHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DistanceHelper.norms.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of DistanceHelper.__allocating_init(points:metric:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of DistanceHelper.sortedNorms.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of DistanceHelper.computeNorms()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of DistanceHelper.computeDistances()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of DistanceHelper.distancesListOfLists()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of DistanceHelper.distance(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of DistanceHelper.estimatedDistance(from:to:bestCase:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

unint64_t sub_24B304218()
{
  unint64_t result;

  result = qword_257968A00;
  if (!qword_257968A00)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for DistanceMetric, &type metadata for DistanceMetric);
    atomic_store(result, (unint64_t *)&qword_257968A00);
  }
  return result;
}

uint64_t sub_24B30425C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD **)(v2 + 24);
  v5 = **(_QWORD **)(v2 + 16);
  result = sub_24B3091B8(v5, *v4, a1);
  *a2 = *(_QWORD *)(v5 + 16);
  return result;
}

void sub_24B3042A8(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  sub_24B30913C(a1, a2, **(_QWORD **)(v2 + 16));
}

Swift::Bool __swiftcall pairwiseCosineSimilarity(matrix1:matrix1RowCount:matrix1ColumnCount:matrix2:matrix2RowCount:matrix2ColumnCount:resultMatrix:)(Swift::OpaquePointer matrix1, Swift::Int matrix1RowCount, Swift::Int matrix1ColumnCount, Swift::OpaquePointer matrix2, Swift::Int matrix2RowCount, Swift::Int matrix2ColumnCount, Swift::OpaquePointer *resultMatrix)
{
  int32x2_t v7;
  uint64_t v14;
  int32x2_t v15;
  uint64_t v16;
  int32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  void *rawValue;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;

  if (matrix1ColumnCount == matrix2ColumnCount)
  {
    v14 = normalizeMatrix(_:rowCount:columnCount:)((uint64_t)matrix1._rawValue, matrix1RowCount, matrix1ColumnCount, v7);
    v16 = normalizeMatrix(_:rowCount:columnCount:)((uint64_t)matrix2._rawValue, matrix2RowCount, matrix1ColumnCount, v15);
    if ((unsigned __int128)(matrix1ColumnCount * (__int128)matrix2RowCount) >> 64 == (matrix1ColumnCount
                                                                                     * matrix2RowCount) >> 63)
    {
      v17.i32[0] = 1.0;
      v18 = sub_24B2D79D0(matrix1ColumnCount * matrix2RowCount, v17);
      if (((matrix1ColumnCount | matrix2RowCount) & 0x8000000000000000) == 0)
      {
        v19 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = sub_24B2C7F88(0, *(_QWORD *)(v19 + 16), 0, v19);
        vDSP_mtrans((const float *)(v16 + 32), 1, (float *)(v19 + 32), 1, matrix1ColumnCount, matrix2RowCount);
        swift_bridgeObjectRelease();
        if (((matrix1ColumnCount | matrix1RowCount) & 0x8000000000000000) == 0)
        {
          rawValue = resultMatrix->_rawValue;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            rawValue = (void *)sub_24B2C7F88(0, *((_QWORD *)rawValue + 2), 0, rawValue);
          resultMatrix->_rawValue = rawValue;
          vDSP_mmul((const float *)(v14 + 32), 1, (const float *)(v19 + 32), 1, (float *)rawValue + 8, 1, matrix1RowCount, matrix2RowCount, matrix1ColumnCount);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return matrix1ColumnCount == matrix2ColumnCount;
        }
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (qword_257967450 != -1)
LABEL_18:
    swift_once();
  v21 = sub_24B30B7A0();
  __swift_project_value_buffer(v21, (uint64_t)qword_25796F248);
  v22 = sub_24B30B788();
  v23 = sub_24B30BBC0();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_24B2C5000, v22, v23, "Matrix 1 and Matrix 2 must have the same column count.", v24, 2u);
    MEMORY[0x24BD1D2BC](v24, -1, -1);
  }

  return matrix1ColumnCount == matrix2ColumnCount;
}

uint64_t sortWithIndices<A, B>(_:indices:sortOrder:)()
{
  return sub_24B30B3EC();
}

Swift::Void __swiftcall multiplyMatrices(matrix1:matrix1RowCount:matrix1ColumnCount:matrix2:matrix2RowCount:matrix2ColumnCount:resultMatrix:)(Swift::OpaquePointer matrix1, Swift::Int matrix1RowCount, Swift::Int matrix1ColumnCount, Swift::OpaquePointer matrix2, Swift::Int matrix2RowCount, Swift::Int matrix2ColumnCount, Swift::OpaquePointer *resultMatrix)
{
  void *rawValue;

  if ((matrix1ColumnCount | matrix1RowCount | matrix2ColumnCount) < 0)
  {
    __break(1u);
  }
  else
  {
    rawValue = resultMatrix->_rawValue;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      rawValue = (void *)sub_24B2C7F88(0, *((_QWORD *)rawValue + 2), 0, rawValue);
    resultMatrix->_rawValue = rawValue;
    vDSP_mmul((const float *)matrix1._rawValue + 8, 1, (const float *)matrix2._rawValue + 8, 1, (float *)rawValue + 8, 1, matrix1RowCount, matrix2ColumnCount, matrix1ColumnCount);
  }
}

Swift::Void __swiftcall transposeMatrix(matrix:rowCount:columnCount:transposed:)(Swift::OpaquePointer matrix, Swift::Int rowCount, Swift::Int columnCount, Swift::OpaquePointer *transposed)
{
  void *rawValue;

  if ((columnCount | rowCount) < 0)
  {
    __break(1u);
  }
  else
  {
    rawValue = transposed->_rawValue;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      rawValue = (void *)sub_24B2C7F88(0, *((_QWORD *)rawValue + 2), 0, rawValue);
    transposed->_rawValue = rawValue;
    vDSP_mtrans((const float *)matrix._rawValue + 8, 1, (float *)rawValue + 8, 1, columnCount, rowCount);
  }
}

uint64_t sub_24B304684()
{
  uint64_t result;

  result = sub_24B30B3F8();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24BDAC7A8](result);
    return sub_24B30B3E0();
  }
  return result;
}

void sub_24B304734(vDSP_Length **a1, const float *a2, uint64_t a3, vDSP_Length a4)
{
  vDSP_Length *v4;
  int v7;

  if (a2)
  {
    v4 = *a1;
    if (*a1)
    {
      v7 = sub_24B30B410();
      vDSP_vsorti(a2, v4, 0, a4, v7);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t normalizeMatrix(_:rowCount:columnCount:)(uint64_t a1, uint64_t a2, int64_t a3, int32x2_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  vDSP_Length v14;
  const float *v15;
  float v16;
  float __C;
  uint64_t v19;
  float v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = MEMORY[0x24BEE4AF8];
  a4.i32[0] = 2143289344;
  v7 = sub_24B2D79D0(a3, a4);
  if (a2 < 0)
    goto LABEL_31;
  v8 = v7;
  if (a2)
  {
    if (a3 < 0)
      goto LABEL_32;
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v12 = v9 * a3;
      if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
        break;
      if (v10 < v12)
        goto LABEL_24;
      if (v12 < 0)
        goto LABEL_25;
      if (!a3 || v10 - v12 < 0 || (v13 = v10, v10 - v12 >= a3))
      {
        v13 = v12 + a3;
        if (__OFADD__(v12, a3))
          goto LABEL_29;
      }
      if (v13 < v12)
        goto LABEL_26;
      if (v10 < v13)
        goto LABEL_27;
      v14 = v13 - v12;
      if (v13 - v12 < 0)
        goto LABEL_28;
      __C = NAN;
      v15 = (const float *)(a1 + 32 + 4 * v12);
      swift_bridgeObjectRetain();
      vDSP_svesq(v15, 1, &__C, v14);
      v16 = sqrtf(__C);
      if (v16 > 0.0)
      {
        if (v14 != *(_QWORD *)(v8 + 16))
          goto LABEL_30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_24B2D83D4(v8);
        v20 = v16;
        vDSP_vsdiv(v15, 1, &v20, (float *)(v8 + 32), 1, v14);
        v11 = swift_bridgeObjectRetain();
        sub_24B2D5D08(v11);
      }
      ++v9;
      swift_bridgeObjectRelease();
      if (a2 == v9)
      {
        swift_bridgeObjectRelease();
        return v19;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_24B3049A4()
{
  return sub_24B304684();
}

void sub_24B3049D4(vDSP_Length **a1)
{
  uint64_t v1;

  sub_24B304734(a1, *(const float **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_24B3049F0(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24B2D8424(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_24B306E1C(v5);
  *a1 = v2;
  return result;
}

uint64_t BallTree.Node.pointIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t BallTree.Node.pointIndex.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*BallTree.Node.pointIndex.modify())()
{
  return nullsub_1;
}

float BallTree.Node.threshold.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void BallTree.Node.threshold.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*BallTree.Node.threshold.modify())()
{
  return nullsub_1;
}

uint64_t BallTree.Node.left.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t BallTree.Node.left.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*BallTree.Node.left.modify())()
{
  return nullsub_1;
}

uint64_t BallTree.Node.right.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t BallTree.Node.right.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*BallTree.Node.right.modify())()
{
  return nullsub_1;
}

uint64_t BallTree.Node.storedIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BallTree.Node.storedIndices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*BallTree.Node.storedIndices.modify())()
{
  return nullsub_1;
}

uint64_t sub_24B304B34()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24B304B68 + 4 * byte_24B30F680[*v0]))(0x646E49746E696F70, 0xEA00000000007865);
}

uint64_t sub_24B304B68()
{
  return 0x6C6F687365726874;
}

uint64_t sub_24B304B84()
{
  return 1952867692;
}

uint64_t sub_24B304B94()
{
  return 0x7468676972;
}

uint64_t sub_24B304BA8()
{
  return 0x6E496465726F7473;
}

uint64_t sub_24B304BCC()
{
  sub_24B304E38();
  return sub_24B30BECC();
}

uint64_t sub_24B304BF4()
{
  sub_24B304E38();
  return sub_24B30BED8();
}

uint64_t BallTree.Node.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968A10);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 16);
  v12 = *(unsigned __int8 *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + 32);
  v10 = *(unsigned __int8 *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B304E38();
  sub_24B30BEC0();
  v19 = 0;
  sub_24B30BDDC();
  if (!v2)
  {
    v18 = 1;
    sub_24B30BDD0();
    v17 = 2;
    sub_24B30BDAC();
    v16 = 3;
    sub_24B30BDAC();
    v15 = v9;
    v14 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967758);
    sub_24B2F0E44(&qword_257967760, MEMORY[0x24BEE1770], MEMORY[0x24BEE12A0]);
    sub_24B30BDB8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24B304E38()
{
  unint64_t result;

  result = qword_257968A18;
  if (!qword_257968A18)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30FA18, &type metadata for BallTree.Node.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968A18);
  }
  return result;
}

uint64_t BallTree.Node.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968A20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B304E38();
  sub_24B30BEB4();
  if (!v2)
  {
    v27 = 0;
    v9 = sub_24B30BD70();
    v26 = 1;
    sub_24B30BD64();
    v11 = v10;
    v25 = 2;
    v12 = sub_24B30BD40();
    v21 = v13;
    v24 = 3;
    v14 = sub_24B30BD40();
    v19 = v16;
    v20 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967758);
    v22 = 4;
    sub_24B2F0E44(&qword_257967770, MEMORY[0x24BEE1798], MEMORY[0x24BEE12D0]);
    sub_24B30BD4C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = v21 & 1;
    *(_QWORD *)(a2 + 32) = v20;
    *(_BYTE *)(a2 + 40) = v19 & 1;
    *(_QWORD *)(a2 + 48) = v17;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24B3050DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BallTree.Node.init(from:)(a1, a2);
}

uint64_t sub_24B3050F0(_QWORD *a1)
{
  return BallTree.Node.encode(to:)(a1);
}

void BallTree.metric.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t BallTree.points.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t BallTree.nodes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t BallTree.maxNodePoints.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_24B3051A8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24B30BD28();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24B305204@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24B30BD28();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24B305264()
{
  sub_24B30ADBC();
  return sub_24B30BECC();
}

uint64_t sub_24B30528C()
{
  sub_24B30ADBC();
  return sub_24B30BED8();
}

uint64_t BallTree.__allocating_init(points:metric:maxNodePoints:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  BallTree.init(points:metric:maxNodePoints:)(a1, a2, a3);
  return v6;
}

uint64_t BallTree.init(points:metric:maxNodePoints:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  float (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;

  v5 = *a2;
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = 16;
  *(_BYTE *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 48) = *(&off_251C3D1C8 + v5);
  *(_QWORD *)(v3 + 56) = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    swift_beginAccess();
    *(_QWORD *)(v3 + 24) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v3 + 40) = a3;
    v8 = *(float (**)(uint64_t, uint64_t))(v3 + 48);
    v9 = *(_QWORD *)(v3 + 56);
    swift_retain();
    v10 = sub_24B30A294(a1, v8, v9, a3);
    swift_release();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = v10;
  }
  swift_bridgeObjectRelease();
  return v3;
}

BOOL BallTree.isEmpty.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16) == 0;
}

_QWORD *BallTree.search(query:k:)(uint64_t a1, int64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  float v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  _QWORD *v31;
  uint64_t v32;
  float (*v33)(uint64_t, uint64_t);
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float (*v37)(uint64_t, uint64_t);
  unint64_t v38;
  unint64_t v39;
  float *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  float (*v46)(_QWORD, _QWORD);
  unint64_t v47;
  unint64_t v48;
  float *v49;
  _QWORD *v50;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v61;
  char *v62;

  v7 = (uint64_t)v3;
  v58 = v3 + 3;
  swift_beginAccess();
  if (!*(_QWORD *)(v3[3] + 16))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v9 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  v4 = sub_24B2C89E8(0, v9 & ~((uint64_t)v9 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v2 = v3[6];
  v3 = (_QWORD *)v3[7];
  v57 = (unint64_t *)(v7 + 32);
  swift_beginAccess();
  v9 = *(_QWORD *)(v7 + 32);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v9 = *(_QWORD *)(v9 + 32);
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  if (v9 >= *(_QWORD *)(*v58 + 16))
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  v10 = *(_QWORD *)(*v58 + 8 * v9 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = ((float (*)(uint64_t, uint64_t))v2)(a1, v10);
  swift_bridgeObjectRelease();
  swift_release();
  v9 = *v57;
  if (*(_QWORD *)(*v57 + 16))
  {
    if ((float)(v6 - *(float *)(v9 + 40)) > 0.0)
      v6 = v6 - *(float *)(v9 + 40);
    else
      v6 = 0.0;
    v5 = sub_24B2C89E8(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v2 = v5[2];
    v9 = v5[3];
    v3 = (_QWORD *)(v2 + 1);
    if (v2 < v9 >> 1)
      goto LABEL_11;
    goto LABEL_110;
  }
LABEL_109:
  __break(1u);
LABEL_110:
  v5 = sub_24B2C89E8((_QWORD *)(v9 > 1), (int64_t)v3, 1, v5);
LABEL_11:
  v5[2] = v3;
  v11 = (float *)&v5[2 * v2];
  *((_QWORD *)v11 + 4) = 0;
  v11[10] = v6;
  v52 = v7;
  while (1)
  {
    v12 = (float *)&v5[2 * ((_QWORD)v3 - 1)];
    v13 = *((_QWORD *)v12 + 4);
    v14 = v12[10];
    v5[2] = (char *)v3 - 1;
    v9 = v4[2];
    if (v9 != a2)
      break;
    if (!a2)
      goto LABEL_89;
    v9 = v4[4];
    if ((v9 & 0x8000000000000000) != 0)
    {
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    if (v9 >= *(_QWORD *)(*v58 + 16))
      goto LABEL_91;
    v2 = *(_QWORD *)(v7 + 48);
    v3 = *(_QWORD **)(v7 + 56);
    v15 = *(_QWORD *)(*v58 + 8 * v9 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = ((float (*)(uint64_t, uint64_t))v2)(a1, v15);
    swift_bridgeObjectRelease();
    swift_release();
    if (v16 > v14)
      goto LABEL_21;
LABEL_13:
    v3 = (_QWORD *)v5[2];
    if (!v3)
      goto LABEL_84;
  }
  v9 = 2139095040;
  v16 = INFINITY;
  if (v14 >= INFINITY)
    goto LABEL_13;
LABEL_21:
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_92;
  v9 = *v57;
  if (v13 >= *(_QWORD *)(*v57 + 16))
    goto LABEL_93;
  v9 += 56 * v13;
  v17 = *(_QWORD *)(v9 + 32);
  if ((v17 & 0x8000000000000000) != 0)
    goto LABEL_94;
  v18 = *(_QWORD *)(v7 + 24);
  if (v17 >= *(_QWORD *)(v18 + 16))
    goto LABEL_95;
  v19 = *(float *)(v9 + 40);
  v56 = *(unsigned __int8 *)(v9 + 56);
  v53 = *(_QWORD *)(v9 + 64);
  v54 = *(_QWORD *)(v9 + 48);
  v55 = *(unsigned __int8 *)(v9 + 72);
  v2 = *(_QWORD *)(v7 + 48);
  v3 = *(_QWORD **)(v7 + 56);
  v20 = *(_QWORD *)(v18 + 8 * v17 + 32);
  v59 = *(_QWORD *)(v9 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = ((float (*)(uint64_t, uint64_t))v2)(a1, v20);
  swift_bridgeObjectRelease();
  swift_release();
  if (v6 >= v16)
    goto LABEL_36;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_24B2C89E8(0, v4[2] + 1, 1, v4);
  v2 = v4[2];
  v21 = v4[3];
  v3 = (_QWORD *)(v2 + 1);
  if (v2 >= v21 >> 1)
    v4 = sub_24B2C89E8((_QWORD *)(v21 > 1), v2 + 1, 1, v4);
  v4[2] = v3;
  v22 = (uint64_t)&v4[2 * v2 + 4];
  *(_QWORD *)v22 = v17;
  *(float *)(v22 + 8) = v6;
  v61 = v4 + 4;
  v62 = (char *)(v2 + 1);
  sub_24B306E1C((uint64_t *)&v61);
  v9 = v4[2];
  if ((uint64_t)v9 <= a2)
  {
LABEL_36:
    v23 = v59;
    if (!v59)
    {
LABEL_53:
      if (v14 > (float)(v6 - v19))
        v30 = v14;
      else
        v30 = v6 - v19;
      v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v9 = v56;
      if ((v56 & 1) == 0)
      {
        if ((v54 & 0x8000000000000000) != 0)
          goto LABEL_96;
        v9 = *v57;
        if (v54 >= *(_QWORD *)(*v57 + 16))
          goto LABEL_97;
        v9 = *(_QWORD *)(v9 + 56 * v54 + 32);
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_98;
        if (v9 >= *(_QWORD *)(*v58 + 16))
          goto LABEL_99;
        v32 = *(_QWORD *)(*v58 + 8 * v9 + 32);
        v33 = *(float (**)(uint64_t, uint64_t))(v7 + 48);
        swift_bridgeObjectRetain();
        swift_retain();
        v6 = v33(a1, v32);
        swift_bridgeObjectRelease();
        swift_release();
        v31 = sub_24B2C89E8(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v2 = v31[2];
        v34 = v31[3];
        v3 = (_QWORD *)(v2 + 1);
        if (v2 >= v34 >> 1)
          v31 = sub_24B2C89E8((_QWORD *)(v34 > 1), v2 + 1, 1, v31);
        v31[2] = v3;
        v35 = (float *)&v31[2 * v2];
        *((_QWORD *)v35 + 4) = v54;
        v35[10] = v6;
      }
      swift_bridgeObjectRelease();
      v9 = v55;
      if ((v55 & 1) == 0)
      {
        if ((v53 & 0x8000000000000000) != 0)
          goto LABEL_100;
        v9 = *v57;
        if (v53 >= *(_QWORD *)(*v57 + 16))
          goto LABEL_101;
        v9 = *(_QWORD *)(v9 + 56 * v53 + 32);
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_102;
        if (v9 >= *(_QWORD *)(*v58 + 16))
          goto LABEL_103;
        v36 = *(_QWORD *)(*v58 + 8 * v9 + 32);
        v37 = *(float (**)(uint64_t, uint64_t))(v7 + 48);
        swift_bridgeObjectRetain();
        swift_retain();
        v6 = v37(a1, v36);
        swift_bridgeObjectRelease();
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v31 = sub_24B2C89E8(0, v31[2] + 1, 1, v31);
        v2 = v31[2];
        v38 = v31[3];
        v39 = v53;
        if (v2 >= v38 >> 1)
        {
          v50 = sub_24B2C89E8((_QWORD *)(v38 > 1), v2 + 1, 1, v31);
          v39 = v53;
          v31 = v50;
        }
        v31[2] = v2 + 1;
        v40 = (float *)&v31[2 * v2];
        *((_QWORD *)v40 + 4) = v39;
        v40[10] = v6;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v31 = sub_24B2D8424(v31);
      v41 = (char *)v31[2];
      v42 = v31 + 4;
      v61 = v31 + 4;
      v62 = v41;
      sub_24B30672C((uint64_t *)&v61);
      v43 = v31[2];
      if (v43)
      {
        v44 = v5[2];
        v45 = 2 * v44;
        do
        {
          v46 = (float (*)(_QWORD, _QWORD))*v42;
          v42 += 2;
          v2 = (unint64_t)v46;
          v47 = v5[3];
          v48 = v44 + 1;
          if (v44 >= v47 >> 1)
            v5 = sub_24B2C89E8((_QWORD *)(v47 > 1), v44 + 1, 1, v5);
          v5[2] = v48;
          v49 = (float *)&v5[v45];
          *((_QWORD *)v49 + 4) = v2;
          v49[10] = v30;
          v45 += 2;
          v44 = v48;
          --v43;
        }
        while (v43);
      }
      swift_bridgeObjectRelease();
      v7 = v52;
      goto LABEL_13;
    }
LABEL_37:
    swift_bridgeObjectRetain();
    swift_retain();
    v2 = a1;
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)sub_24B309418(v23, v7, a1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v25 = v3[2];
    if (v25)
    {
      swift_bridgeObjectRetain();
      v7 = (uint64_t)(v3 + 5);
      while (1)
      {
        v2 = *(_QWORD *)(v7 - 8);
        v26 = *(_DWORD *)v7;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_24B2C89E8(0, v4[2] + 1, 1, v4);
        v28 = v4[2];
        v27 = v4[3];
        if (v28 >= v27 >> 1)
          v4 = sub_24B2C89E8((_QWORD *)(v27 > 1), v28 + 1, 1, v4);
        v4[2] = v28 + 1;
        v29 = (uint64_t)&v4[2 * v28 + 4];
        *(_QWORD *)v29 = v2;
        *(_DWORD *)(v29 + 8) = v26;
        v61 = v4 + 4;
        v62 = (char *)(v28 + 1);
        sub_24B306E1C((uint64_t *)&v61);
        v9 = v4[2];
        if ((uint64_t)v9 > a2)
        {
          if (!v9)
          {
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v9 = v4[2];
            if (!v9)
              goto LABEL_88;
          }
          else
          {
            v4 = sub_24B2D8424(v4);
            v9 = v4[2];
            if (!v9)
              goto LABEL_88;
          }
          v4[2] = v9 - 1;
        }
        v7 += 16;
        if (!--v25)
        {
          swift_bridgeObjectRelease();
          v7 = v52;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  v23 = v59;
  if (!v9)
    goto LABEL_104;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v24 = v4[2];
    if (!v24)
      goto LABEL_83;
LABEL_34:
    v4[2] = v24 - 1;
    if (!v59)
      goto LABEL_53;
    goto LABEL_37;
  }
  v4 = sub_24B2D8424(v4);
  v24 = v4[2];
  if (v24)
    goto LABEL_34;
LABEL_83:
  __break(1u);
LABEL_84:
  swift_bridgeObjectRelease();
  return v4;
}

_QWORD *BallTree.search(query:radius:sorted:)(uint64_t a1, char a2, float a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  float (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  _QWORD *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  _QWORD *v63[14];

  v4 = (uint64_t)v3;
  v63[12] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v7 = v3[3];
  v8 = *(_QWORD *)(v7 + 16);
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v8 || a3 <= 0.0)
    return v9;
  v10 = (float (*)(uint64_t, uint64_t))v3[6];
  v57 = v3 + 4;
  swift_beginAccess();
  v11 = v3[4];
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_57;
  v12 = *(_QWORD *)(v11 + 32);
  if (v12 >= v8)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
  }
  v13 = *(_QWORD *)(v7 + 8 * v12 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = v10(a1, v13);
  swift_bridgeObjectRelease();
  swift_release();
  v15 = v3 + 4;
  if (!*(_QWORD *)(*v57 + 16))
    goto LABEL_59;
  if ((float)(v14 - *(float *)(*v57 + 40)) > a3)
    return v9;
  v55 = a2;
  v63[0] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2579674D8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24B30E190;
  *(_QWORD *)(inited + 32) = 0;
  v17 = 1;
  v18 = a1;
  v56 = v3;
  do
  {
    v19 = v17 - 1;
    v20 = *(_QWORD *)(inited + 8 * (v17 - 1) + 32);
    *(_QWORD *)(inited + 16) = v19;
    if ((v20 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v20 >= *(_QWORD *)(*v15 + 16))
      goto LABEL_54;
    v21 = *v15 + 56 * v20;
    v22 = *(_QWORD *)(v21 + 32);
    if ((v22 & 0x8000000000000000) != 0)
      goto LABEL_55;
    v23 = *(_QWORD *)(v4 + 24);
    if (v22 >= *(_QWORD *)(v23 + 16))
      goto LABEL_56;
    v24 = *(float *)(v21 + 40);
    v61 = *(_BYTE *)(v21 + 56);
    v59 = *(_QWORD *)(v21 + 48);
    v60 = *(_QWORD *)(v21 + 64);
    v62 = *(_BYTE *)(v21 + 72);
    v25 = *(_QWORD *)(v21 + 80);
    v26 = *(float (**)(uint64_t, uint64_t))(v4 + 48);
    v27 = *(_QWORD *)(v23 + 8 * v22 + 32);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v28 = v26(v18, v27);
    swift_bridgeObjectRelease();
    swift_release();
    if ((float)(v28 - v24) > a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v28 <= a3)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_24B2C89E8(0, v9[2] + 1, 1, v9);
        v30 = v9[2];
        v29 = v9[3];
        if (v30 >= v29 >> 1)
          v9 = sub_24B2C89E8((_QWORD *)(v29 > 1), v30 + 1, 1, v9);
        v9[2] = v30 + 1;
        v31 = (float *)&v9[2 * v30];
        *((_QWORD *)v31 + 4) = v22;
        v31[10] = v28;
      }
      if (v25)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        v32 = sub_24B309418(v25, v4, v18);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = (_DWORD *)(v32 + 40);
          v35 = MEMORY[0x24BEE4AF8];
          do
          {
            v39 = *(float *)v34;
            if (*(float *)v34 <= a3)
            {
              v40 = *((_QWORD *)v34 - 1);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                sub_24B2DC06C(0, *(_QWORD *)(v35 + 16) + 1, 1);
              v37 = *(_QWORD *)(v35 + 16);
              v36 = *(_QWORD *)(v35 + 24);
              if (v37 >= v36 >> 1)
                sub_24B2DC06C(v36 > 1, v37 + 1, 1);
              *(_QWORD *)(v35 + 16) = v37 + 1;
              v38 = v35 + 16 * v37;
              *(_QWORD *)(v38 + 32) = v40;
              *(float *)(v38 + 40) = v39;
            }
            v34 += 4;
            --v33;
          }
          while (v33);
        }
        else
        {
          v35 = MEMORY[0x24BEE4AF8];
        }
        swift_bridgeObjectRelease();
        v41 = *(_QWORD *)(v35 + 16);
        if (v41)
        {
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = sub_24B2C89E8(0, v9[2] + 1, 1, v9);
          v42 = 0;
          v43 = v9[2];
          v44 = 2 * v43;
          do
          {
            v45 = *(_QWORD *)(v35 + v42 * 8 + 32);
            v46 = *(_DWORD *)(v35 + v42 * 8 + 40);
            v47 = v9[3];
            v48 = v43 + 1;
            if (v43 >= v47 >> 1)
              v9 = sub_24B2C89E8((_QWORD *)(v47 > 1), v43 + 1, 1, v9);
            v9[2] = v48;
            v49 = &v9[v44 + v42];
            v49[4] = v45;
            *((_DWORD *)v49 + 10) = v46;
            v42 += 2;
            v43 = v48;
            --v41;
          }
          while (v41);
          swift_release();
        }
        v18 = a1;
        swift_release();
        v4 = (uint64_t)v56;
        v15 = v57;
      }
      if ((v61 & 1) == 0)
      {
        v51 = *(_QWORD *)(inited + 16);
        v50 = *(_QWORD *)(inited + 24);
        if (v51 >= v50 >> 1)
          inited = (uint64_t)sub_24B2C813C((_QWORD *)(v50 > 1), v51 + 1, 1, (_QWORD *)inited);
        *(_QWORD *)(inited + 16) = v51 + 1;
        *(_QWORD *)(inited + 8 * v51 + 32) = v59;
      }
      swift_bridgeObjectRelease();
      if ((v62 & 1) == 0)
      {
        v53 = *(_QWORD *)(inited + 16);
        v52 = *(_QWORD *)(inited + 24);
        if (v53 >= v52 >> 1)
          inited = (uint64_t)sub_24B2C813C((_QWORD *)(v52 > 1), v53 + 1, 1, (_QWORD *)inited);
        *(_QWORD *)(inited + 16) = v53 + 1;
        *(_QWORD *)(inited + 8 * v53 + 32) = v60;
      }
    }
    v17 = *(_QWORD *)(inited + 16);
  }
  while (v17);
  v63[0] = v9;
  if ((v55 & 1) != 0)
    sub_24B3049F0(v63);
  swift_bridgeObjectRelease();
  return v63[0];
}

uint64_t BallTree.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t BallTree.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t BallTree.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968A28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24B30ADBC();
  sub_24B30BEC0();
  v12 = *(_BYTE *)(v3 + 16);
  LOBYTE(v11) = 0;
  sub_24B2ED924();
  sub_24B30BDE8();
  if (!v2)
  {
    swift_beginAccess();
    v11 = *(_QWORD *)(v3 + 32);
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968A38);
    sub_24B30AE44(&qword_257968A40, (uint64_t (*)(void))sub_24B30AE00, MEMORY[0x24BEE12A0]);
    sub_24B30BDE8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t BallTree.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  BallTree.init(from:)(a1);
  return v2;
}

uint64_t BallTree.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v3 = v1;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_257968A50);
  v5 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = v8;
  *(_QWORD *)(v3 + 40) = 16;
  *(_QWORD *)(v3 + 48) = sub_24B2F0F58;
  *(_QWORD *)(v3 + 56) = 0;
  v9 = a1[3];
  v16 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_24B30ADBC();
  sub_24B30BEB4();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v5;
    LOBYTE(v18) = 0;
    sub_24B2ED968();
    v11 = v15;
    sub_24B30BD7C();
    *(_BYTE *)(v3 + 16) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968A38);
    v17 = 1;
    sub_24B30AE44(&qword_257968A58, (uint64_t (*)(void))sub_24B30AEAC, MEMORY[0x24BEE12D0]);
    sub_24B30BD7C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v11);
    v13 = v18;
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = v13;
    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v3;
}

_QWORD *sub_24B306670(uint64_t *a1, int64_t a2)
{
  return BallTree.search(query:k:)(*a1, a2);
}

_QWORD *sub_24B306694(uint64_t *a1, char a2, float a3)
{
  return BallTree.search(query:radius:sorted:)(*a1, a2, a3);
}

uint64_t sub_24B3066B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = BallTree.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_24B30670C(_QWORD *a1)
{
  return BallTree.encode(to:)(a1);
}

uint64_t sub_24B30672C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float *__dst;

  v3 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(float *)(v89 + 8);
          if (*(float *)(v89 - 8) >= v90)
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_24B3076C4((float *)(v94 + 16 * v97), (float *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_24B3080B0((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967598);
    v8 = sub_24B30BA28();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (float *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(float *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v14);
        while (v17 < v15 != *(v18 - 4) >= *v18)
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v17 < v15)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (float *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = v29[2];
          if (*(v29 - 2) >= v31)
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *(_QWORD *)v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((_QWORD *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_24B307CB4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_24B307CB4((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_24B3076C4((float *)(v11 + 16 * *(_QWORD *)v78), (float *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B306E1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float *__dst;

  v3 = a1[1];
  result = sub_24B30BE0C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(float *)(v89 + 8);
          if (v90 >= *(float *)(v89 - 8))
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_24B30794C((float *)(v94 + 16 * v97), (float *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = sub_24B3080B0((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967598);
    v8 = sub_24B30BA28();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (float *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(float *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 4))
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (float *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = v29[2];
          if (v31 >= *(v29 - 2))
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *(_QWORD *)v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((_QWORD *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_24B307CB4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = sub_24B307CB4((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        sub_24B30794C((float *)(v11 + 16 * *(_QWORD *)v78), (float *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B30750C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  if (a3 != a2)
  {
    v7 = a3;
    v9 = *v4;
    v10 = *v4 + 16 * a3;
    v21 = result;
LABEL_4:
    v11 = v10;
    v12 = result;
    while (1)
    {
      v13 = *(_DWORD *)(v11 + 8);
      v19 = *(_QWORD *)v11;
      v20 = v13;
      v14 = *(_DWORD *)(v11 - 8);
      v17 = *(_QWORD *)(v11 - 16);
      v18 = v14;
      result = a4(&v19, &v17);
      if (v5)
        break;
      if ((result & 1) != 0)
      {
        if (!v9)
        {
          __break(1u);
          return result;
        }
        v15 = *(_QWORD *)v11;
        v16 = *(_DWORD *)(v11 + 8);
        *(_OWORD *)v11 = *(_OWORD *)(v11 - 16);
        *(_DWORD *)(v11 - 8) = v16;
        *(_QWORD *)(v11 - 16) = v15;
        v11 -= 16;
        if (v7 != ++v12)
          continue;
      }
      ++v7;
      v10 += 16;
      result = v21;
      if (v7 != a2)
        goto LABEL_4;
      return result;
    }
  }
  return result;
}

uint64_t sub_24B3075F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_24B307CB4(0, *(_QWORD *)(v1 + 16) + 1, 1, (char *)v1);
    *v0 = result;
  }
  return result;
}

char *sub_24B307644(char *result)
{
  char **v1;
  unint64_t v2;

  v2 = *((_QWORD *)*v1 + 3);
  if ((uint64_t)(result + 1) > (uint64_t)(v2 >> 1))
  {
    result = sub_24B307CB4((char *)(v2 > 1), (int64_t)(result + 1), 1, *v1);
    *v1 = result;
  }
  return result;
}

uint64_t sub_24B307684(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t sub_24B30769C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unint64_t sub_24B3076A4(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24B3076C4(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t result;
  float *v25;
  float *v26;
  float *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 4 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v25 = &v4[v19];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (float *)(a3 - 16);
        do
        {
          v22 = v21 + 4;
          if (*(v6 - 2) >= *(v20 - 2))
          {
            v25 = v20 - 4;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 4;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 4;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v27 = v6 - 4;
            if (v23 <= v7)
              break;
          }
          v21 -= 4;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      sub_24B307F64((void **)&v27, (const void **)&v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 4 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14 * 4);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (v16[2] >= v6[2])
        {
          v4 = v16 + 4;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 4;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 4;
          }
        }
        else
        {
          v17 = v6 + 4;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 4;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B30794C(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t result;
  float *v25;
  float *v26;
  float *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 4 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v25 = &v4[v19];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (float *)(a3 - 16);
        do
        {
          v22 = v21 + 4;
          if (*(v20 - 2) >= *(v6 - 2))
          {
            v25 = v20 - 4;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 4;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 4;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v27 = v6 - 4;
            if (v23 <= v7)
              break;
          }
          v21 -= 4;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      sub_24B307F64((void **)&v27, (const void **)&v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 4 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14 * 4);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (v6[2] >= v16[2])
        {
          v4 = v16 + 4;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 4;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 4;
          }
        }
        else
        {
          v17 = v6 + 4;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 4;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B307BD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_24B3080B0(v1);
    *v0 = result;
  }
  return result;
}

unint64_t sub_24B307C10(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_24B307C2C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_24B3080B0(v3);
    v3 = result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = v3 + 16 * a1;
    v8 = *(_QWORD *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
    return v8;
  }
  return result;
}

char *sub_24B307CB4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968C08);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_24B307DAC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 3;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -4)
  {
    result = (char *)sub_24B30BD10();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
      return (char *)memmove(result, v3, 4 * v7);
  }
  return result;
}

uint64_t sub_24B307E58(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for ExtractedMessage();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = sub_24B30BD10();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_24B307F64(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_24B30BD10();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_24B308008(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_24B30BD10();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_24B3080B0(uint64_t a1)
{
  return sub_24B307CB4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_24B3080C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  return sub_24B3080D8(a1, a2, a3, a4, a5);
}

_QWORD *sub_24B3080D8(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = result[1];
  v5 = result[2];
  v8 = __OFADD__(v5, v6);
  v7 = v5 + v6;
  if (!v8)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      v8 = __OFSUB__(v7, *result);
      if (v7 < *result || (v7 -= *result, !v8))
      {
LABEL_9:
        v9 = a2 + 24 * v7;
        *(_QWORD *)v9 = a3;
        *(_QWORD *)(v9 + 8) = a4;
        *(_BYTE *)(v9 + 16) = a5 & 1;
        *(_BYTE *)(v9 + 17) = HIBYTE(a5) & 1;
        v10 = result[1];
        v8 = __OFADD__(v10, 1);
        v11 = v10 + 1;
        if (!v8)
        {
          result[1] = v11;
          return (_QWORD *)swift_bridgeObjectRetain();
        }
        goto LABEL_12;
      }
      __break(1u);
    }
    if (v7 < 0)
    {
      v8 = __OFADD__(v7, *result);
      v7 += *result;
      if (v8)
        goto LABEL_13;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_24B308164(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967528);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B3082C0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968C28);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_257968C30);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B308460(char a1, int64_t a2, char a3, char *a4)
{
  return sub_24B308EF0(a1, a2, a3, a4, &qword_2579674E0);
}

uint64_t sub_24B30846C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674C0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B3085D4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_24B3085EC(a1, a2, a3, a4, &qword_257967530);
}

uint64_t sub_24B3085E0(char a1, int64_t a2, char a3, char *a4)
{
  return sub_24B3085EC(a1, a2, a3, a4, &qword_2579674D8);
}

uint64_t sub_24B3085EC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B308744(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_24B308A34(a1, a2, a3, a4, &qword_257967E70, (uint64_t (*)(_QWORD))MEMORY[0x24BE6C048]);
}

uint64_t sub_24B308758(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257967520);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B3088B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2579674F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B308A34(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B308C14(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968C18);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B308D70(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257968C20);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 20);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[20 * v8])
      memmove(v12, v13, 20 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[20 * v8] || v12 >= &v13[20 * v8])
  {
    memcpy(v12, v13, 20 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B308EE4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_24B308EF0(a1, a2, a3, a4, &qword_257968C10);
}

uint64_t sub_24B308EF0(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B309044(uint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = result;
  if (result)
  {
    v5 = sub_24B30BA28();
    *(_QWORD *)(v5 + 16) = v4;
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  v6 = v5 + 32;
  v7[1] = v4;
  v8 = 0;
  v7[0] = v5 + 32;
  result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(_QWORD *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(_QWORD *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_24B30913C(uint64_t a1, vDSP_Length *a2, uint64_t a3)
{
  sub_24B309150(a1, a2, a3);
}

void sub_24B309150(uint64_t a1, vDSP_Length *a2, uint64_t a3)
{
  vDSP_Length v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 16) == v3)
  {
    if (*(_QWORD *)a1)
    {
      vDSP_vabs((const float *)(a3 + 32), 1, *(float **)a1, 1, v3);
      *a2 = v3;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_24B3091BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vDSP_Length v3;

  v3 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a2 + 16) != v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)a3)
  {
    vDSP_vsub((const float *)(a2 + 32), 1, (const float *)(a1 + 32), 1, *(float **)a3, 1, v3);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_24B309204(uint64_t a1)
{
  return sub_24B308164(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_24B309218(uint64_t a1)
{
  return sub_24B308EF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_257967E50);
}

uint64_t sub_24B309244(_QWORD *a1)
{
  return sub_24B308A34(0, a1[2], 0, a1, &qword_257967500, (uint64_t (*)(_QWORD))type metadata accessor for ExtractedMessage);
}

uint64_t sub_24B309278(uint64_t a1)
{
  return sub_24B308EF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_2579674E0);
}

uint64_t sub_24B3092A4(uint64_t a1)
{
  return sub_24B308EF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_257968C10);
}

uint64_t sub_24B3092D0(uint64_t a1)
{
  return sub_24B3085EC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_2579674D8);
}

uint64_t sub_24B3092FC(uint64_t a1, float (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v21 = MEMORY[0x24BEE4AF8];
  result = sub_24B2DB008(0, v5, 0);
  v6 = v21;
  v11 = (unint64_t *)(a1 + 32);
  v12 = a5 + 32;
  v13 = *(_QWORD *)(a5 + 16);
  while (1)
  {
    v15 = *v11++;
    v14 = v15;
    if (v15 >= v13)
      break;
    v16 = *(_QWORD *)(v12 + 8 * v14);
    swift_bridgeObjectRetain();
    v17 = a2(a4, v16);
    result = swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v21 + 16);
    v18 = *(_QWORD *)(v21 + 24);
    if (v19 >= v18 >> 1)
      result = sub_24B2DB008(v18 > 1, v19 + 1, 1);
    *(_QWORD *)(v21 + 16) = v19 + 1;
    *(float *)(v21 + 4 * v19 + 32) = v17;
    if (!--v5)
      return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_24B309418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  unint64_t *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v19 = MEMORY[0x24BEE4AF8];
  sub_24B2DC06C(0, v3, 0);
  v4 = v19;
  v8 = (unint64_t *)(a1 + 32);
  result = swift_beginAccess();
  while (1)
  {
    v11 = *v8++;
    v10 = v11;
    if ((v11 & 0x8000000000000000) != 0)
      break;
    v12 = *(_QWORD *)(a2 + 24);
    if (v10 >= *(_QWORD *)(v12 + 16))
      goto LABEL_10;
    v13 = *(float (**)(uint64_t, uint64_t))(a2 + 48);
    v14 = *(_QWORD *)(v12 + 8 * v10 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    v15 = v13(a3, v14);
    swift_bridgeObjectRelease();
    result = swift_release();
    v17 = *(_QWORD *)(v19 + 16);
    v16 = *(_QWORD *)(v19 + 24);
    if (v17 >= v16 >> 1)
      result = sub_24B2DC06C(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v19 + 16) = v17 + 1;
    v18 = v19 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v10;
    *(float *)(v18 + 40) = v15;
    if (!--v3)
      return v4;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24B309568(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5, uint64_t a6)
{
  unint64_t *v7;
  char *v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t result;
  unint64_t *v38;
  unint64_t *v39;
  char *v40;

  v7 = (unint64_t *)__dst;
  v9 = a2;
  v10 = __src;
  v11 = a2 - __src;
  v12 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v12 = a2 - __src;
  v13 = v12 >> 3;
  v14 = a3 - (_QWORD)a2;
  v15 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v15 = a3 - (_QWORD)a2;
  v16 = v15 >> 3;
  v40 = __src;
  v39 = (unint64_t *)__dst;
  if (v13 >= v15 >> 3)
  {
    if (v14 >= -7)
    {
      if (__dst != a2 || &a2[8 * v16] <= __dst)
      {
        v26 = a5;
        memmove(__dst, a2, 8 * v16);
        a5 = v26;
      }
      v27 = &v7[v16];
      v38 = v27;
      v40 = v9;
      if (v10 < v9 && v14 >= 8)
      {
        if (a6 < 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v28 = a5 + 32;
        v29 = *(_QWORD *)(a5 + 16);
        v30 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v31 = *(v27 - 1);
          if (v31 >= v29)
            break;
          v32 = *(_QWORD *)(v28 + 8 * v31);
          if (*(_QWORD *)(v32 + 16) <= a6)
            goto LABEL_55;
          v33 = v9 - 8;
          v34 = *((_QWORD *)v9 - 1);
          if (v34 >= v29)
            goto LABEL_56;
          v35 = *(_QWORD *)(v28 + 8 * v34);
          if (*(_QWORD *)(v35 + 16) <= a6)
            goto LABEL_57;
          v36 = (char *)(v30 + 1);
          if (*(float *)(v35 + 4 * a6 + 32) >= *(float *)(v32 + 4 * a6 + 32))
          {
            v38 = v27 - 1;
            if (v36 < (char *)v27 || v30 >= v27 || v36 != (char *)v27)
              *v30 = *(v27 - 1);
            --v27;
            if (v9 <= v10)
              goto LABEL_53;
          }
          else
          {
            if (v36 != v9 || v30 >= (unint64_t *)v9)
              *v30 = v34;
            v40 = v9 - 8;
            v9 -= 8;
            if (v33 <= v10)
              goto LABEL_53;
          }
          --v30;
          if (v27 <= v7)
            goto LABEL_53;
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
LABEL_53:
      sub_24B308008((void **)&v40, (const void **)&v39, &v38);
      return 1;
    }
  }
  else if (v11 >= -7)
  {
    if (__dst != __src || &__src[8 * v13] <= __dst)
    {
      v17 = a5;
      memmove(__dst, __src, 8 * v13);
      a5 = v17;
    }
    v18 = &v7[v13];
    v38 = v18;
    if ((unint64_t)v9 < a3 && v11 >= 8)
    {
      if (a6 < 0)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      v19 = a5 + 32;
      v20 = *(_QWORD *)(a5 + 16);
      while (1)
      {
        v21 = *(_QWORD *)v9;
        if (*(_QWORD *)v9 >= v20)
          break;
        v22 = *(_QWORD *)(v19 + 8 * v21);
        if (*(_QWORD *)(v22 + 16) <= a6)
          goto LABEL_59;
        v23 = *v7;
        if (*v7 >= v20)
          goto LABEL_60;
        v24 = *(_QWORD *)(v19 + 8 * v23);
        if (*(_QWORD *)(v24 + 16) <= a6)
          goto LABEL_61;
        if (*(float *)(v24 + 4 * a6 + 32) >= *(float *)(v22 + 4 * a6 + 32))
        {
          if (v10 != (char *)v7)
            *(_QWORD *)v10 = v23;
          v39 = ++v7;
          v25 = v9;
        }
        else
        {
          v25 = v9 + 8;
          if (v10 < v9 || v10 >= v25 || v10 != v9)
            *(_QWORD *)v10 = v21;
        }
        v10 += 8;
        if (v7 < v18)
        {
          v9 = v25;
          if ((unint64_t)v25 < a3)
            continue;
        }
        v40 = v10;
        goto LABEL_53;
      }
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    goto LABEL_53;
  }
LABEL_64:
  swift_bridgeObjectRelease();
  result = sub_24B30BD10();
  __break(1u);
  return result;
}

uint64_t sub_24B3098B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (a3 != a2)
  {
    if ((a6 & 0x8000000000000000) == 0)
    {
      v6 = *a4;
      v7 = a5 + 32;
      v8 = *(_QWORD *)(a5 + 16);
      v9 = *a4 + 8 * a3 - 8;
LABEL_6:
      v10 = *(_QWORD *)(v6 + 8 * a3);
      v11 = result;
      v12 = (unint64_t *)v9;
      while (v10 < v8)
      {
        v13 = *(_QWORD *)(v7 + 8 * v10);
        if (*(_QWORD *)(v13 + 16) <= a6)
          goto LABEL_16;
        v14 = *v12;
        if (*v12 >= v8)
          goto LABEL_17;
        v15 = *(_QWORD *)(v7 + 8 * v14);
        if (*(_QWORD *)(v15 + 16) <= a6)
          goto LABEL_18;
        if (*(float *)(v15 + 4 * a6 + 32) < *(float *)(v13 + 4 * a6 + 32))
        {
          if (!v6)
            goto LABEL_20;
          *v12 = v10;
          v12[1] = v14;
          --v12;
          if (a3 != ++v11)
            continue;
        }
        ++a3;
        v9 += 8;
        if (a3 == a2)
          return result;
        goto LABEL_6;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_24B309970(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t result;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;

  v7 = a1[1];
  swift_bridgeObjectRetain_n();
  v8 = sub_24B30BE0C();
  if (v8 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      if (!v7)
        return swift_bridgeObjectRelease_n();
      swift_bridgeObjectRetain();
      sub_24B3098B0(0, v7, 1, a1, a2, a3);
      if (!v3)
        return swift_bridgeObjectRelease_n();
LABEL_126:
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_162;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_171;
  v10 = v8;
  v115 = a2;
  v114 = a3;
  v117 = v3;
  v105 = a1;
  if (v7 < 2)
  {
    v13 = (char *)MEMORY[0x24BEE4AF8];
    v113 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v106 = MEMORY[0x24BEE4AF8];
    if (v7 != 1)
    {
      v42 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_113:
      if (v42 < 2)
      {
LABEL_124:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v106 + 16) = 0;
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
      v97 = *v105;
      while (1)
      {
        v98 = v42 - 2;
        if (v42 < 2)
          break;
        if (!v97)
          goto LABEL_170;
        v99 = *(_QWORD *)&v13[16 * v98 + 32];
        v100 = *(_QWORD *)&v13[16 * v42 + 24];
        v101 = (char *)(v97 + 8 * *(_QWORD *)&v13[16 * v42 + 16]);
        swift_bridgeObjectRetain();
        sub_24B309568((char *)(v97 + 8 * v99), v101, v97 + 8 * v100, v113, v115, v114);
        if (v117)
          goto LABEL_125;
        swift_bridgeObjectRelease();
        if (v100 < v99)
          goto LABEL_151;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_24B3080B0((uint64_t)v13);
        if (v98 >= *((_QWORD *)v13 + 2))
          goto LABEL_152;
        v102 = &v13[16 * v98 + 32];
        *(_QWORD *)v102 = v99;
        *((_QWORD *)v102 + 1) = v100;
        v103 = *((_QWORD *)v13 + 2);
        if (v42 > v103)
          goto LABEL_153;
        memmove(&v13[16 * v42 + 16], &v13[16 * v42 + 32], 16 * (v103 - v42));
        *((_QWORD *)v13 + 2) = v103 - 1;
        v42 = v103 - 1;
        if (v103 <= 2)
          goto LABEL_124;
      }
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
  }
  else
  {
    v11 = v9 >> 1;
    v12 = sub_24B30BA28();
    *(_QWORD *)(v12 + 16) = v11;
    v106 = v12;
    v113 = (char *)(v12 + 32);
  }
  v14 = 0;
  v15 = *a1;
  v16 = a2 + 32;
  v104 = *a1 - 8;
  v13 = (char *)MEMORY[0x24BEE4AF8];
  v108 = v10;
  v109 = v7;
  v112 = *a1;
  v107 = a2 + 32;
  while (1)
  {
    v17 = v14 + 1;
    if (v14 + 1 >= v7)
      goto LABEL_39;
    v18 = *(_QWORD *)(v15 + 8 * v17);
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_155;
    v19 = *(_QWORD *)(a2 + 16);
    if (v18 >= v19)
      goto LABEL_156;
    if (a3 < 0)
      goto LABEL_157;
    v20 = *(_QWORD *)(v16 + 8 * v18);
    if (*(_QWORD *)(v20 + 16) <= (unint64_t)a3)
      goto LABEL_158;
    v21 = *(_QWORD *)(v15 + 8 * v14);
    if (v21 >= v19)
      goto LABEL_159;
    v22 = *(_QWORD *)(v16 + 8 * v21);
    if (*(_QWORD *)(v22 + 16) <= (unint64_t)a3)
      goto LABEL_160;
    v23 = *(float *)(v20 + 4 * a3 + 32);
    v24 = *(float *)(v22 + 4 * a3 + 32);
    v17 = v14 + 2;
    if (v14 + 2 >= v7)
      goto LABEL_29;
    do
    {
      v25 = *(_QWORD *)(v15 + 8 * v17);
      if (v25 >= v19)
        goto LABEL_135;
      v26 = *(_QWORD *)(v16 + 8 * v25);
      if (*(_QWORD *)(v26 + 16) <= a3)
      {
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      if (v18 >= v19)
        goto LABEL_137;
      v27 = *(_QWORD *)(v16 + 8 * v18);
      if (*(_QWORD *)(v27 + 16) <= a3)
        goto LABEL_138;
      if (v24 < v23 == *(float *)(v27 + 4 * a3 + 32) >= *(float *)(v26 + 4 * a3 + 32))
        goto LABEL_29;
      ++v17;
      v18 = v25;
    }
    while (v7 != v17);
    v17 = v7;
LABEL_29:
    if (v24 < v23)
      break;
LABEL_39:
    if (v17 < v7)
    {
      if (__OFSUB__(v17, v14))
        goto LABEL_161;
      if (v17 - v14 < v10)
      {
        v31 = v14 + v10;
        if (__OFADD__(v14, v10))
          goto LABEL_163;
        if (v31 >= v7)
          v31 = v7;
        if (v31 < v14)
          goto LABEL_164;
        if (v17 != v31)
        {
          if (a3 < 0)
            goto LABEL_166;
          v32 = *(_QWORD *)(a2 + 16);
          v33 = (unint64_t *)(v104 + 8 * v17);
          do
          {
            v34 = *(_QWORD *)(v15 + 8 * v17);
            v35 = v14;
            v36 = v33;
            do
            {
              if (v34 >= v32)
              {
                __break(1u);
LABEL_128:
                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
                goto LABEL_136;
              }
              v37 = *(_QWORD *)(v16 + 8 * v34);
              if (*(_QWORD *)(v37 + 16) <= a3)
                goto LABEL_128;
              v38 = *v36;
              if (*v36 >= v32)
                goto LABEL_129;
              v39 = *(_QWORD *)(v16 + 8 * v38);
              if (*(_QWORD *)(v39 + 16) <= a3)
                goto LABEL_130;
              if (*(float *)(v39 + 4 * a3 + 32) >= *(float *)(v37 + 4 * a3 + 32))
                break;
              if (!v15)
                goto LABEL_167;
              *v36 = v34;
              v36[1] = v38;
              --v36;
              ++v35;
            }
            while (v17 != v35);
            ++v17;
            ++v33;
          }
          while (v17 != v31);
          v17 = v31;
        }
      }
    }
    if (v17 < v14)
      goto LABEL_154;
    v110 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_24B307CB4(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v41 = *((_QWORD *)v13 + 2);
    v40 = *((_QWORD *)v13 + 3);
    v42 = v41 + 1;
    v15 = v112;
    if (v41 >= v40 >> 1)
    {
      v13 = sub_24B307CB4((char *)(v40 > 1), v41 + 1, 1, v13);
      v15 = v112;
    }
    *((_QWORD *)v13 + 2) = v42;
    v43 = v13 + 32;
    v44 = &v13[16 * v41 + 32];
    *(_QWORD *)v44 = v14;
    *((_QWORD *)v44 + 1) = v110;
    if (v41)
    {
      v116 = v13;
      v111 = v13 + 32;
      while (1)
      {
        v45 = v42 - 1;
        if (v42 >= 4)
        {
          v50 = &v43[16 * v42];
          v51 = *((_QWORD *)v50 - 8);
          v52 = *((_QWORD *)v50 - 7);
          v56 = __OFSUB__(v52, v51);
          v53 = v52 - v51;
          if (v56)
            goto LABEL_139;
          v55 = *((_QWORD *)v50 - 6);
          v54 = *((_QWORD *)v50 - 5);
          v56 = __OFSUB__(v54, v55);
          v48 = v54 - v55;
          v49 = v56;
          if (v56)
            goto LABEL_140;
          v57 = v42 - 2;
          v58 = &v43[16 * v42 - 32];
          v60 = *(_QWORD *)v58;
          v59 = *((_QWORD *)v58 + 1);
          v56 = __OFSUB__(v59, v60);
          v61 = v59 - v60;
          if (v56)
            goto LABEL_142;
          v56 = __OFADD__(v48, v61);
          v62 = v48 + v61;
          if (v56)
            goto LABEL_145;
          if (v62 >= v53)
          {
            v80 = &v43[16 * v45];
            v82 = *(_QWORD *)v80;
            v81 = *((_QWORD *)v80 + 1);
            v56 = __OFSUB__(v81, v82);
            v83 = v81 - v82;
            if (v56)
              goto LABEL_149;
            v73 = v48 < v83;
            goto LABEL_98;
          }
        }
        else
        {
          if (v42 != 3)
          {
            v74 = *((_QWORD *)v13 + 4);
            v75 = *((_QWORD *)v13 + 5);
            v56 = __OFSUB__(v75, v74);
            v67 = v75 - v74;
            v68 = v56;
            goto LABEL_92;
          }
          v47 = *((_QWORD *)v13 + 4);
          v46 = *((_QWORD *)v13 + 5);
          v56 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          v49 = v56;
        }
        if ((v49 & 1) != 0)
          goto LABEL_141;
        v57 = v42 - 2;
        v63 = &v43[16 * v42 - 32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v66 = __OFSUB__(v64, v65);
        v67 = v64 - v65;
        v68 = v66;
        if (v66)
          goto LABEL_144;
        v69 = &v43[16 * v45];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v56 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v56)
          goto LABEL_147;
        if (__OFADD__(v67, v72))
          goto LABEL_148;
        if (v67 + v72 >= v48)
        {
          v73 = v48 < v72;
LABEL_98:
          if (v73)
            v45 = v57;
          goto LABEL_100;
        }
LABEL_92:
        if ((v68 & 1) != 0)
          goto LABEL_143;
        v76 = &v43[16 * v45];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v56 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v56)
          goto LABEL_146;
        if (v79 < v67)
          goto LABEL_109;
LABEL_100:
        v84 = v45 - 1;
        if (v45 - 1 >= v42)
          goto LABEL_131;
        if (!v15)
          goto LABEL_168;
        v85 = &v43[16 * v84];
        v86 = v43;
        v87 = *(_QWORD *)v85;
        v88 = v45;
        v89 = &v86[16 * v45];
        v90 = *((_QWORD *)v89 + 1);
        v91 = (char *)(v15 + 8 * *(_QWORD *)v85);
        v92 = (char *)(v15 + 8 * *(_QWORD *)v89);
        v93 = v15 + 8 * v90;
        a2 = v115;
        swift_bridgeObjectRetain();
        v94 = v93;
        a3 = v114;
        sub_24B309568(v91, v92, v94, v113, v115, v114);
        if (v117)
        {
LABEL_125:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v106 + 16) = 0;
          goto LABEL_126;
        }
        swift_bridgeObjectRelease();
        if (v90 < v87)
          goto LABEL_132;
        if (v88 > *((_QWORD *)v116 + 2))
          goto LABEL_133;
        *(_QWORD *)v85 = v87;
        v43 = v111;
        *(_QWORD *)&v111[16 * v84 + 8] = v90;
        v95 = *((_QWORD *)v116 + 2);
        if (v88 >= v95)
          goto LABEL_134;
        v13 = v116;
        v117 = 0;
        v42 = v95 - 1;
        memmove(v89, v89 + 16, 16 * (v95 - 1 - v88));
        *((_QWORD *)v116 + 2) = v95 - 1;
        v15 = v112;
        if (v95 <= 2)
          goto LABEL_109;
      }
    }
    v42 = 1;
LABEL_109:
    v7 = v109;
    v14 = v110;
    v16 = v107;
    v10 = v108;
    if (v110 >= v109)
      goto LABEL_113;
  }
  if (v17 >= v14)
  {
    if (v14 < v17)
    {
      v28 = v17 - 1;
      v29 = v14;
      while (1)
      {
        if (v29 != v28)
        {
          if (!v15)
            goto LABEL_169;
          v30 = *(_QWORD *)(v15 + 8 * v29);
          *(_QWORD *)(v15 + 8 * v29) = *(_QWORD *)(v15 + 8 * v28);
          *(_QWORD *)(v15 + 8 * v28) = v30;
        }
        v73 = ++v29 < v28--;
        if (!v73)
          goto LABEL_39;
      }
    }
    goto LABEL_39;
  }
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_168:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_169:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_170:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_171:
  swift_bridgeObjectRelease_n();
  result = sub_24B30BCC8();
  __break(1u);
  return result;
}

uint64_t sub_24B30A1E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v6 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_24B3092D0(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  swift_bridgeObjectRetain();
  sub_24B309970(v9, a2, a3);
  swift_bridgeObjectRelease();
  *a1 = v6;
  return swift_bridgeObjectRelease_n();
}

_QWORD *sub_24B30A294(uint64_t a1, float (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  int64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v13;
  _QWORD *v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  vDSP_Length v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  vDSP_Length v30;
  unint64_t v31;
  uint64_t v32;
  vDSP_Length v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  vDSP_Length v40;
  uint64_t v41;
  uint64_t v42;
  vDSP_Length v43;
  vDSP_Length v44;
  vDSP_Length v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  vDSP_Length v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _BYTE *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  vDSP_Length v106;
  uint64_t __C;
  vDSP_Length __I;
  _QWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = a4 < 1;
  else
    v5 = 1;
  if (v5)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = a4;
  v104 = a1 + 32;
  v95 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v7 = *(_QWORD **)sub_24B30B770();
  v109 = v7;
  v105 = v4;
  v8 = sub_24B2DE870(0, v4);
  v9 = v7[3];
  v10 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  v11 = (uint64_t)v8;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (v7[2] < v10 || (isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_24B2CB2E0(v10);
    v7 = v109;
  }
  sub_24B3080D8(v7 + 2, (uint64_t)(v7 + 5), v11, 0, 257);
  swift_release();
  if (!v7[3])
  {
    swift_bridgeObjectRelease();
    swift_release();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v94 = v6;
  do
  {
    v14 = v109;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_24B2CACA0();
      v14 = v109;
    }
    v16 = v14[4];
    v17 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_111;
    v18 = &v14[3 * v16];
    v19 = v18[5];
    v20 = v18[6];
    v21 = *((unsigned __int8 *)v18 + 56);
    v22 = *((unsigned __int8 *)v18 + 57);
    v23 = v14[3];
    if (v17 >= v14[2])
      v17 = 0;
    v14[4] = v17;
    if (__OFSUB__(v23, 1))
      goto LABEL_112;
    v103 = v13;
    v14[3] = v23 - 1;
    v24 = *(_QWORD *)(v19 + 16);
    if (!v24)
    {
      swift_bridgeObjectRelease();
      v13 = v103;
      continue;
    }
    v106 = v19;
    v101 = v20;
    v102 = v21;
    if (v24 > v6)
    {
      v96 = v22;
      v25 = *(_QWORD *)(v95 + 16);
      v15.i32[0] = 2139095040;
      v26 = sub_24B2D79D0(v25, v15);
      v27.i32[0] = -8388608;
      v28 = sub_24B2D79D0(v25, v27);
      swift_bridgeObjectRetain();
      v29 = 0;
      while (1)
      {
        v31 = *(_QWORD *)(v19 + 8 * v29 + 32);
        if (v31 >= v105)
          break;
        v32 = *(_QWORD *)(v104 + 8 * v31);
        v33 = *(_QWORD *)(v26 + 16);
        if (v33 != *(_QWORD *)(v32 + 16))
          goto LABEL_109;
        swift_bridgeObjectRetain();
        if (v33)
        {
          v34 = sub_24B30BA28();
          *(_QWORD *)(v34 + 16) = v33;
        }
        else
        {
          v34 = MEMORY[0x24BEE4AF8];
        }
        vDSP_vmin((const float *)(v26 + 32), 1, (const float *)(v32 + 32), 1, (float *)(v34 + 32), 1, v33);
        *(_QWORD *)(v34 + 16) = v33;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v28 + 16) != v33)
          goto LABEL_110;
        if (v33)
        {
          v30 = sub_24B30BA28();
          *(_QWORD *)(v30 + 16) = v33;
        }
        else
        {
          v30 = MEMORY[0x24BEE4AF8];
        }
        ++v29;
        vDSP_vmax((const float *)(v28 + 32), 1, (const float *)(v32 + 32), 1, (float *)(v30 + 32), 1, v33);
        *(_QWORD *)(v30 + 16) = v33;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = v30;
        v26 = v34;
        v19 = v106;
        if (v24 == v29)
        {
          swift_bridgeObjectRelease();
          __C = v34;
          __I = v30;
          v39 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v30 + 16));
          v40 = sub_24B309044(v39, (uint64_t (*)(_QWORD *, uint64_t *))sub_24B30B364);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __I = v40;
          v41 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v40 + 16));
          v42 = sub_24B309044(v41, (uint64_t (*)(_QWORD *, uint64_t *))sub_24B30B3B0);
          swift_bridgeObjectRelease();
          v43 = *(_QWORD *)(v42 + 16);
          LODWORD(__C) = 2143289344;
          __I = 0;
          vDSP_maxvi((const float *)(v42 + 32), 1, (float *)&__C, &__I, v43);
          swift_bridgeObjectRelease();
          v44 = __I;
          if ((__I & 0x8000000000000000) == 0)
          {
            __I = v106;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            sub_24B30A1E4((uint64_t *)&__I, a1, v44);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v45 = __I;
            v46 = *(_QWORD *)(__I + 16);
            v47 = v46 >> 1;
            v13 = v103;
            if (v46 >> 1 < v46)
            {
              v48 = *(_QWORD *)(__I + 32 + 8 * v47);
              if (v48 < v105)
              {
                v93 = __I + 32;
                v49 = *(_QWORD *)(v104 + 8 * v48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v50 = sub_24B3092FC(v106, a2, a3, v49, a1);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __I = v50;
                swift_bridgeObjectRetain();
                sub_24B2C78D0((uint64_t *)&__I);
                swift_bridgeObjectRelease();
                v51 = *(_QWORD *)(__I + 16);
                if (v51)
                  v52 = *(_DWORD *)(__I + 4 * v51 + 28);
                else
                  v52 = 2139095040;
                swift_release();
                if (*(_QWORD *)(v45 + 16) >= v47)
                {
                  sub_24B30BE54();
                  swift_retain_n();
                  v63 = swift_dynamicCastClass();
                  if (!v63)
                  {
                    swift_release();
                    v63 = MEMORY[0x24BEE4AF8];
                  }
                  v64 = *(_QWORD *)(v63 + 16);
                  swift_release();
                  if (v64 == v47)
                  {
                    v65 = swift_dynamicCastClass();
                    if (!v65)
                    {
                      swift_release();
                      v65 = MEMORY[0x24BEE4AF8];
                    }
                  }
                  else
                  {
                    swift_release();
                    v65 = sub_24B2DE934(v45, v93, 0, v46 | 1);
                  }
                  swift_release();
                  v66 = *(_QWORD *)(v45 + 16);
                  if (v66 > v47 && v66 >= v46)
                  {
                    v97 = v65;
                    swift_unknownObjectRetain_n();
                    v67 = swift_dynamicCastClass();
                    if (!v67)
                    {
                      swift_release();
                      v67 = MEMORY[0x24BEE4AF8];
                    }
                    v68 = *(_QWORD *)(v67 + 16);
                    swift_release();
                    if (v68 == v46 - (v47 + 1))
                    {
                      v69 = swift_dynamicCastClass();
                      if (!v69)
                      {
                        swift_release();
                        v69 = MEMORY[0x24BEE4AF8];
                      }
                    }
                    else
                    {
                      swift_release();
                      v69 = sub_24B2DE934(v45, v93, v47 + 1, (2 * v46) | 1);
                    }
                    swift_release();
                    v70 = v103[2];
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v13 = sub_24B2C8C28(0, v70 + 1, 1, v103);
                    v72 = v13[2];
                    v71 = v13[3];
                    if (v72 >= v71 >> 1)
                      v13 = sub_24B2C8C28((_QWORD *)(v71 > 1), v72 + 1, 1, v13);
                    v13[2] = v72 + 1;
                    v73 = v13 + 4;
                    v74 = (uint64_t)&v13[7 * v72 + 4];
                    *(_QWORD *)v74 = v48;
                    *(_DWORD *)(v74 + 8) = v52;
                    *(_QWORD *)(v74 + 16) = 0;
                    *(_BYTE *)(v74 + 24) = 1;
                    *(_QWORD *)(v74 + 32) = 0;
                    *(_BYTE *)(v74 + 40) = 1;
                    *(_QWORD *)(v74 + 48) = 0;
                    swift_bridgeObjectRelease();
                    v6 = v94;
                    if ((v102 & 1) != 0)
                      goto LABEL_78;
                    if (v96)
                    {
                      if ((v101 & 0x8000000000000000) == 0)
                      {
                        if (v101 < v13[2])
                        {
                          v75 = &v73[7 * v101];
                          v75[2] = v70;
                          v76 = v75 + 3;
                          goto LABEL_77;
                        }
LABEL_128:
                        __break(1u);
                      }
LABEL_126:
                      __break(1u);
LABEL_127:
                      __break(1u);
                      goto LABEL_128;
                    }
                    if ((v101 & 0x8000000000000000) == 0)
                    {
                      if (v101 >= v13[2])
                        goto LABEL_127;
                      v77 = &v73[7 * v101];
                      v77[4] = v70;
                      v76 = v77 + 5;
LABEL_77:
                      *v76 = 0;
LABEL_78:
                      v78 = v109;
                      v79 = v109[3];
                      v80 = v79 + 1;
                      if (!__OFADD__(v79, 1))
                      {
                        v81 = swift_isUniquelyReferenced_nonNull_native();
                        if (v78[2] < v80 || (v81 & 1) == 0)
                        {
                          sub_24B2CB2E0(v80);
                          v78 = v109;
                        }
                        sub_24B3080D8(v78 + 2, (uint64_t)(v78 + 5), v97, v70, 256);
                        swift_release();
                        v82 = v78[3];
                        v83 = v82 + 1;
                        if (!__OFADD__(v82, 1))
                        {
                          v84 = swift_isUniquelyReferenced_nonNull_native();
                          if (v78[2] < v83 || (v84 & 1) == 0)
                            sub_24B2CB2E0(v83);
                          sub_24B3080D8(v109 + 2, (uint64_t)(v109 + 5), v69, v70, 0);
                          swift_release();
                          goto LABEL_12;
                        }
LABEL_119:
                        __break(1u);
LABEL_120:
                        __break(1u);
LABEL_121:
                        __break(1u);
LABEL_122:
                        __break(1u);
                        goto LABEL_123;
                      }
LABEL_118:
                      __break(1u);
                      goto LABEL_119;
                    }
LABEL_125:
                    __break(1u);
                    goto LABEL_126;
                  }
LABEL_117:
                  __break(1u);
                  goto LABEL_118;
                }
LABEL_116:
                __break(1u);
                goto LABEL_117;
              }
LABEL_115:
              __break(1u);
              goto LABEL_116;
            }
LABEL_114:
            __break(1u);
            goto LABEL_115;
          }
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }
      }
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    v35 = v19 + 32;
    v36 = *(_QWORD *)(v19 + 32);
    if (v24 == 1)
    {
      v37 = 0;
      v38 = 0.0;
      v13 = v103;
    }
    else
    {
      sub_24B30BE54();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v53 = swift_dynamicCastClass();
      if (!v53)
      {
        swift_bridgeObjectRelease();
        v53 = MEMORY[0x24BEE4AF8];
      }
      v54 = v6;
      v55 = *(_QWORD *)(v53 + 16);
      swift_release();
      if (v55 == v24 - 1)
      {
        v56 = v106;
        v37 = swift_dynamicCastClass();
        v13 = v103;
        if (!v37)
        {
          swift_bridgeObjectRelease();
          v37 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        v56 = v106;
        swift_bridgeObjectRelease();
        v37 = sub_24B2DE934(v106, v35, 1, (2 * v24) | 1);
        v13 = v103;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v57 = sub_24B2F459C(v56, a2, a3, a1, v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = *(_QWORD *)(v57 + 16);
      if (v58)
      {
        v38 = *(float *)(v57 + 32);
        v59 = v58 - 1;
        v6 = v54;
        if (v59)
        {
          v60 = (float *)(v57 + 36);
          do
          {
            v61 = *v60++;
            v62 = v61;
            if (v38 < v61)
              v38 = v62;
            --v59;
          }
          while (v59);
        }
      }
      else
      {
        v38 = 0.0;
        v6 = v54;
      }
      swift_bridgeObjectRelease();
    }
    v85 = v13[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_24B2C8C28(0, v85 + 1, 1, v13);
    v87 = v13[2];
    v86 = v13[3];
    if (v87 >= v86 >> 1)
      v13 = sub_24B2C8C28((_QWORD *)(v86 > 1), v87 + 1, 1, v13);
    v13[2] = v87 + 1;
    v88 = v13 + 4;
    v89 = (uint64_t)&v13[7 * v87 + 4];
    *(_QWORD *)v89 = v36;
    *(float *)(v89 + 8) = v38;
    *(_QWORD *)(v89 + 16) = 0;
    *(_BYTE *)(v89 + 24) = 1;
    *(_QWORD *)(v89 + 32) = 0;
    *(_BYTE *)(v89 + 40) = 1;
    *(_QWORD *)(v89 + 48) = v37;
    swift_bridgeObjectRelease();
    if (!v102)
    {
      if (!v22)
      {
        if ((v101 & 0x8000000000000000) != 0)
          goto LABEL_120;
        if (v101 < v13[2])
        {
          v91 = &v88[7 * v101];
          v91[4] = v85;
          *((_BYTE *)v91 + 40) = 0;
          continue;
        }
        goto LABEL_122;
      }
      if ((v101 & 0x8000000000000000) != 0)
        goto LABEL_121;
      if (v101 < v13[2])
      {
        v90 = &v88[7 * v101];
        v90[2] = v85;
        *((_BYTE *)v90 + 24) = 0;
        continue;
      }
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
LABEL_12:
    ;
  }
  while (v109[3]);
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

unint64_t sub_24B30ADBC()
{
  unint64_t result;

  result = qword_257968A30;
  if (!qword_257968A30)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30F9C8, &type metadata for BallTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968A30);
  }
  return result;
}

unint64_t sub_24B30AE00()
{
  unint64_t result;

  result = qword_257968A48;
  if (!qword_257968A48)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for BallTree.Node, &type metadata for BallTree.Node);
    atomic_store(result, (unint64_t *)&qword_257968A48);
  }
  return result;
}

uint64_t sub_24B30AE44(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257968A38);
    v8 = a2();
    result = MEMORY[0x24BD1D214](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24B30AEAC()
{
  unint64_t result;

  result = qword_257968A60;
  if (!qword_257968A60)
  {
    result = MEMORY[0x24BD1D214](&protocol conformance descriptor for BallTree.Node, &type metadata for BallTree.Node);
    atomic_store(result, (unint64_t *)&qword_257968A60);
  }
  return result;
}

_UNKNOWN **sub_24B30AEF0()
{
  return &protocol witness table for BallTree.Node;
}

uint64_t sub_24B30AEFC(uint64_t a1)
{
  uint64_t result;

  result = sub_24B30AFA4(&qword_257968A80, (uint64_t)&protocol conformance descriptor for BallTree);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for BallTree()
{
  return objc_opt_self();
}

uint64_t sub_24B30AF58(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_24B30AFA4(&qword_257968B00, (uint64_t)&protocol conformance descriptor for BallTree);
  result = sub_24B30AFA4(&qword_257968B08, (uint64_t)&protocol conformance descriptor for BallTree);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24B30AFA4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for BallTree();
    result = MEMORY[0x24BD1D214](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for BallTree()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BallTree.__allocating_init(points:metric:maxNodePoints:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of BallTree.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for BallTree.Node()
{
  return &type metadata for BallTree.Node;
}

uint64_t storeEnumTagSinglePayload for BallTree.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24B30B068 + 4 * byte_24B30F68A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24B30B09C + 4 * byte_24B30F685[v4]))();
}

uint64_t sub_24B30B09C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B30B0A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B30B0ACLL);
  return result;
}

uint64_t sub_24B30B0B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B30B0C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24B30B0C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B30B0CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BallTree.CodingKeys()
{
  return &type metadata for BallTree.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BallTree.Node.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24B30B134 + 4 * byte_24B30F694[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24B30B168 + 4 * byte_24B30F68F[v4]))();
}

uint64_t sub_24B30B168(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B30B170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24B30B178);
  return result;
}

uint64_t sub_24B30B184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24B30B18CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24B30B190(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24B30B198(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BallTree.Node.CodingKeys()
{
  return &type metadata for BallTree.Node.CodingKeys;
}

unint64_t sub_24B30B1B8()
{
  unint64_t result;

  result = qword_257968BD8;
  if (!qword_257968BD8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30F8B0, &type metadata for BallTree.Node.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968BD8);
  }
  return result;
}

unint64_t sub_24B30B200()
{
  unint64_t result;

  result = qword_257968BE0;
  if (!qword_257968BE0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30F9A0, &type metadata for BallTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968BE0);
  }
  return result;
}

unint64_t sub_24B30B248()
{
  unint64_t result;

  result = qword_257968BE8;
  if (!qword_257968BE8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30F8D8, &type metadata for BallTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968BE8);
  }
  return result;
}

unint64_t sub_24B30B290()
{
  unint64_t result;

  result = qword_257968BF0;
  if (!qword_257968BF0)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30F900, &type metadata for BallTree.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968BF0);
  }
  return result;
}

unint64_t sub_24B30B2D8()
{
  unint64_t result;

  result = qword_257968BF8;
  if (!qword_257968BF8)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30F820, &type metadata for BallTree.Node.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968BF8);
  }
  return result;
}

unint64_t sub_24B30B320()
{
  unint64_t result;

  result = qword_257968C00;
  if (!qword_257968C00)
  {
    result = MEMORY[0x24BD1D214](&unk_24B30F848, &type metadata for BallTree.Node.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257968C00);
  }
  return result;
}

void sub_24B30B364(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;

  v4 = *(uint64_t **)(v2 + 24);
  v5 = **(_QWORD **)(v2 + 16);
  sub_24B3091BC(v5, *v4, a1);
  *a2 = *(_QWORD *)(v5 + 16);
}

void sub_24B30B3B0(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  sub_24B309150(a1, a2, **(_QWORD **)(v2 + 16));
}

ValueMetadata *type metadata accessor for BallTree.BuildTask()
{
  return &type metadata for BallTree.BuildTask;
}

uint64_t sub_24B30B3E0()
{
  return MEMORY[0x24BEDF4A0]();
}

uint64_t sub_24B30B3EC()
{
  return MEMORY[0x24BEDF4B0]();
}

uint64_t sub_24B30B3F8()
{
  return MEMORY[0x24BEDF4B8]();
}

uint64_t sub_24B30B404()
{
  return MEMORY[0x24BEDFB40]();
}

uint64_t sub_24B30B410()
{
  return MEMORY[0x24BEDFB78]();
}

uint64_t sub_24B30B41C()
{
  return MEMORY[0x24BEDFB80]();
}

uint64_t sub_24B30B428()
{
  return MEMORY[0x24BDCB1C0]();
}

uint64_t sub_24B30B434()
{
  return MEMORY[0x24BDCB1E0]();
}

uint64_t sub_24B30B440()
{
  return MEMORY[0x24BDCB1E8]();
}

uint64_t sub_24B30B44C()
{
  return MEMORY[0x24BDCB1F0]();
}

uint64_t sub_24B30B458()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_24B30B464()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_24B30B470()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_24B30B47C()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_24B30B488()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_24B30B494()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_24B30B4A0()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t sub_24B30B4AC()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_24B30B4B8()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_24B30B4C4()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_24B30B4D0()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_24B30B4DC()
{
  return MEMORY[0x24BDCC650]();
}

uint64_t sub_24B30B4E8()
{
  return MEMORY[0x24BDCC658]();
}

uint64_t sub_24B30B4F4()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_24B30B500()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_24B30B50C()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_24B30B518()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_24B30B524()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t sub_24B30B530()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_24B30B53C()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_24B30B548()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_24B30B554()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_24B30B560()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_24B30B56C()
{
  return MEMORY[0x24BDCDC88]();
}

uint64_t sub_24B30B578()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_24B30B584()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_24B30B590()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t sub_24B30B59C()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_24B30B5A8()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_24B30B5B4()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_24B30B5C0()
{
  return MEMORY[0x24BDCF128]();
}

uint64_t sub_24B30B5CC()
{
  return MEMORY[0x24BDCF160]();
}

uint64_t sub_24B30B5D8()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_24B30B5E4()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_24B30B5F0()
{
  return MEMORY[0x24BE6B858]();
}

uint64_t sub_24B30B5FC()
{
  return MEMORY[0x24BE6B8D0]();
}

uint64_t sub_24B30B608()
{
  return MEMORY[0x24BE6B8E8]();
}

uint64_t sub_24B30B614()
{
  return MEMORY[0x24BE6B8F8]();
}

uint64_t sub_24B30B620()
{
  return MEMORY[0x24BE6B920]();
}

uint64_t sub_24B30B62C()
{
  return MEMORY[0x24BE6B928]();
}

uint64_t sub_24B30B638()
{
  return MEMORY[0x24BE6B988]();
}

uint64_t sub_24B30B644()
{
  return MEMORY[0x24BE6BC60]();
}

uint64_t sub_24B30B650()
{
  return MEMORY[0x24BE6BE90]();
}

uint64_t sub_24B30B65C()
{
  return MEMORY[0x24BE6BE98]();
}

uint64_t sub_24B30B668()
{
  return MEMORY[0x24BE6BEB0]();
}

uint64_t sub_24B30B674()
{
  return MEMORY[0x24BE6BEB8]();
}

uint64_t sub_24B30B680()
{
  return MEMORY[0x24BE6BF00]();
}

uint64_t sub_24B30B68C()
{
  return MEMORY[0x24BE6BF48]();
}

uint64_t sub_24B30B698()
{
  return MEMORY[0x24BE6BF70]();
}

uint64_t sub_24B30B6A4()
{
  return MEMORY[0x24BE6BF78]();
}

uint64_t sub_24B30B6B0()
{
  return MEMORY[0x24BE6BF88]();
}

uint64_t sub_24B30B6BC()
{
  return MEMORY[0x24BE6BF98]();
}

uint64_t sub_24B30B6C8()
{
  return MEMORY[0x24BE6BFA0]();
}

uint64_t sub_24B30B6D4()
{
  return MEMORY[0x24BE6BFE0]();
}

uint64_t sub_24B30B6E0()
{
  return MEMORY[0x24BE6BFE8]();
}

uint64_t sub_24B30B6EC()
{
  return MEMORY[0x24BE6BFF8]();
}

uint64_t sub_24B30B6F8()
{
  return MEMORY[0x24BE6C000]();
}

uint64_t sub_24B30B704()
{
  return MEMORY[0x24BE6C010]();
}

uint64_t sub_24B30B710()
{
  return MEMORY[0x24BE6C020]();
}

uint64_t sub_24B30B71C()
{
  return MEMORY[0x24BE6C028]();
}

uint64_t sub_24B30B728()
{
  return MEMORY[0x24BE6C030]();
}

uint64_t sub_24B30B734()
{
  return MEMORY[0x24BE6C048]();
}

uint64_t sub_24B30B740()
{
  return MEMORY[0x24BE6C068]();
}

uint64_t sub_24B30B74C()
{
  return MEMORY[0x24BE6C070]();
}

uint64_t sub_24B30B758()
{
  return MEMORY[0x24BE6C078]();
}

uint64_t sub_24B30B764()
{
  return MEMORY[0x24BEE7448]();
}

uint64_t sub_24B30B770()
{
  return MEMORY[0x24BE18CF8]();
}

uint64_t sub_24B30B77C()
{
  return MEMORY[0x24BE18D28]();
}

uint64_t sub_24B30B788()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_24B30B794()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_24B30B7A0()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_24B30B7AC()
{
  return MEMORY[0x24BE72DF0]();
}

uint64_t sub_24B30B7B8()
{
  return MEMORY[0x24BE72DF8]();
}

uint64_t sub_24B30B7C4()
{
  return MEMORY[0x24BE72E00]();
}

uint64_t sub_24B30B7D0()
{
  return MEMORY[0x24BE72E08]();
}

uint64_t sub_24B30B7DC()
{
  return MEMORY[0x24BE72E10]();
}

uint64_t sub_24B30B7E8()
{
  return MEMORY[0x24BE72E18]();
}

uint64_t sub_24B30B7F4()
{
  return MEMORY[0x24BE72E58]();
}

uint64_t sub_24B30B800()
{
  return MEMORY[0x24BEE0278]();
}

uint64_t sub_24B30B80C()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_24B30B818()
{
  return MEMORY[0x24BEE0300]();
}

uint64_t sub_24B30B824()
{
  return MEMORY[0x24BEE03E8]();
}

uint64_t sub_24B30B830()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_24B30B83C()
{
  return MEMORY[0x24BEE04A0]();
}

uint64_t sub_24B30B848()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_24B30B854()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_24B30B860()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_24B30B86C()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_24B30B878()
{
  return MEMORY[0x24BEE7600]();
}

uint64_t sub_24B30B884()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_24B30B890()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_24B30B89C()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_24B30B8A8()
{
  return MEMORY[0x24BDCF870]();
}

uint64_t sub_24B30B8B4()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_24B30B8C0()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_24B30B8CC()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_24B30B8D8()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_24B30B8E4()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_24B30B8F0()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_24B30B8FC()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_24B30B908()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_24B30B914()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_24B30B920()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_24B30B92C()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_24B30B938()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_24B30B944()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_24B30B950()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_24B30B95C()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_24B30B968()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_24B30B974()
{
  return MEMORY[0x24BEE0EE8]();
}

uint64_t sub_24B30B980()
{
  return MEMORY[0x24BEE0F30]();
}

uint64_t sub_24B30B98C()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_24B30B998()
{
  return MEMORY[0x24BEE1068]();
}

uint64_t sub_24B30B9A4()
{
  return MEMORY[0x24BEE1070]();
}

uint64_t sub_24B30B9B0()
{
  return MEMORY[0x24BEE1078]();
}

uint64_t sub_24B30B9BC()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_24B30B9C8()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_24B30B9D4()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_24B30B9E0()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_24B30B9EC()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_24B30B9F8()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_24B30BA04()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t sub_24B30BA10()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_24B30BA1C()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_24B30BA28()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_24B30BA34()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t sub_24B30BA40()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_24B30BA4C()
{
  return MEMORY[0x24BEE11F0]();
}

uint64_t sub_24B30BA58()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_24B30BA64()
{
  return MEMORY[0x24BEE1208]();
}

uint64_t sub_24B30BA70()
{
  return MEMORY[0x24BEE1220]();
}

uint64_t sub_24B30BA7C()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_24B30BA88()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_24B30BA94()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_24B30BAA0()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_24B30BAAC()
{
  return MEMORY[0x24BEE6818]();
}

uint64_t sub_24B30BAB8()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_24B30BAC4()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_24B30BAD0()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t sub_24B30BADC()
{
  return MEMORY[0x24BEE68D8]();
}

uint64_t sub_24B30BAE8()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t sub_24B30BAF4()
{
  return MEMORY[0x24BEE6B10]();
}

uint64_t sub_24B30BB00()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t sub_24B30BB0C()
{
  return MEMORY[0x24BDCFC30]();
}

uint64_t sub_24B30BB18()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t sub_24B30BB24()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_24B30BB30()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_24B30BB3C()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_24B30BB48()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t sub_24B30BB54()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_24B30BB60()
{
  return MEMORY[0x24BEE1A00]();
}

uint64_t sub_24B30BB6C()
{
  return MEMORY[0x24BEE1A20]();
}

uint64_t sub_24B30BB78()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_24B30BB84()
{
  return MEMORY[0x24BEE5B10]();
}

uint64_t sub_24B30BB90()
{
  return MEMORY[0x24BDCFE38]();
}

uint64_t sub_24B30BB9C()
{
  return MEMORY[0x24BDCFE58]();
}

uint64_t sub_24B30BBA8()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_24B30BBB4()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_24B30BBC0()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_24B30BBCC()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_24B30BBD8()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_24B30BBE4()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_24B30BBF0()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_24B30BBFC()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_24B30BC08()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_24B30BC14()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_24B30BC20()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_24B30BC2C()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_24B30BC38()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_24B30BC44()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t sub_24B30BC50()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_24B30BC5C()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_24B30BC68()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_24B30BC74()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_24B30BC80()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_24B30BC8C()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_24B30BC98()
{
  return MEMORY[0x24BEE2E58]();
}

uint64_t sub_24B30BCA4()
{
  return MEMORY[0x24BEE2E60]();
}

uint64_t sub_24B30BCB0()
{
  return MEMORY[0x24BEE2E78]();
}

uint64_t sub_24B30BCBC()
{
  return MEMORY[0x24BEE2E90]();
}

uint64_t sub_24B30BCC8()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_24B30BCD4()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_24B30BCE0()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_24B30BCEC()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_24B30BCF8()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_24B30BD04()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_24B30BD10()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_24B30BD1C()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_24B30BD28()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_24B30BD34()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_24B30BD40()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_24B30BD4C()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_24B30BD58()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_24B30BD64()
{
  return MEMORY[0x24BEE3368]();
}

uint64_t sub_24B30BD70()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_24B30BD7C()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_24B30BD88()
{
  return MEMORY[0x24BEE33A0]();
}

uint64_t sub_24B30BD94()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_24B30BDA0()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_24B30BDAC()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_24B30BDB8()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_24B30BDC4()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_24B30BDD0()
{
  return MEMORY[0x24BEE34B8]();
}

uint64_t sub_24B30BDDC()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_24B30BDE8()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_24B30BDF4()
{
  return MEMORY[0x24BEE34F0]();
}

uint64_t sub_24B30BE00()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_24B30BE0C()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_24B30BE18()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_24B30BE24()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t sub_24B30BE30()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t sub_24B30BE3C()
{
  return MEMORY[0x24BEE3930]();
}

uint64_t sub_24B30BE48()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_24B30BE54()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_24B30BE60()
{
  return MEMORY[0x24BEE3BB8]();
}

uint64_t sub_24B30BE6C()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_24B30BE78()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_24B30BE84()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_24B30BE90()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_24B30BE9C()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_24B30BEA8()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_24B30BEB4()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_24B30BEC0()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_24B30BECC()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_24B30BED8()
{
  return MEMORY[0x24BEE4A10]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x24BEE4E88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31C8](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
  MEMORY[0x24BDB3230](__A, __IA, __C, __I, __N);
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3248](__A, __IA, __C, __N);
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3288](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_mtrans(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
  MEMORY[0x24BDB3298](__A, __IA, __C, __IC, __M, __N);
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32D0](__A, __I, __C, __N);
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32F0](__A, __IA, __C, __N);
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB32F8](__A, __IA, __C, __IC, __N);
}

void vDSP_vmax(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3410](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vmin(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3418](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34C0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsort(float *__C, vDSP_Length __N, int __Order)
{
  MEMORY[0x24BDB3500](__C, __N, *(_QWORD *)&__Order);
}

void vDSP_vsorti(const float *__C, vDSP_Length *__I, vDSP_Length *__Temporary, vDSP_Length __N, int __Order)
{
  MEMORY[0x24BDB3510](__C, __I, __Temporary, __N, *(_QWORD *)&__Order);
}

