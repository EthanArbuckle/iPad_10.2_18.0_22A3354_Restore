@implementation _UIKeyboardStateManager

- (void)hostApplicationDidEnterBackground
{
  void *v3;
  id v4;

  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeTextCompletionPrompt");

  -[_UIKeyboardStateManager backendController](self, "backendController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "applicationDidEnterBackground");

}

- (void)hostApplicationWillEnterForeground
{
  id v2;

  -[_UIKeyboardStateManager backendController](self, "backendController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "applicationWillEnterForeground");

}

- (void)setCapsLockIfNeeded
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "setCapsLockIfNeeded");

}

- (BOOL)initializationDone
{
  id WeakRetained;
  int v3;

  if (self->m_initializationDone)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v3 = objc_msgSend(WeakRetained, "isInitializing") ^ 1;

  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

- (_UIKeyboardStateManager)initWithPresentationDelegateView:(id)a3 forCustomInputView:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  _UIKeyboardStateManager *v7;
  _UIKeyboardStateManager *v8;
  uint64_t v9;
  UIKeyboardTaskQueue *v10;
  UIKeyboardTaskQueue *taskQueue;
  _UIKeyboardImplProxy *v12;
  _UIKeyboardImplProxy *m_implProxy;
  TIKeyboardState *v14;
  TIKeyboardState *m_keyboardState;
  void *v16;
  UIKeyboardAutocorrectionController *v17;
  UIKeyboardAutocorrectionController *m_autocorrectionController;
  UIInlineTextCompletionController *v19;
  UIInlineTextCompletionController *m_inlineTextCompletionController;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  TUISmartReplyGenerator_Staging *smartReplyGenerator;
  TISmartPunctuationController *v26;
  TISmartPunctuationController *m_smartPunctuationController;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  _BOOL4 m_hardwareKeyboardAttached;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id WeakRetained;
  UIKBAutofillController *v43;
  UIKBAutofillController *m_autofillController;
  uint64_t v45;
  NSMutableDictionary *m_hardwareKeyDownCodeToEventMap;
  UIKeyboardInputModeIndicatorController *v47;
  UIKeyboardInputModeIndicatorController *inputModeIndicatorController;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  UIKBInputDelegateManager *v53;
  void *v54;
  double v55;
  _UISmartReplyFeedbackManager *v56;
  _UIKeyboardStateManager *v57;
  NSObject *v59;
  const char *v60;
  int64_t id;
  objc_super v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE buf[24];
  void *v68;
  uint64_t *v69;
  uint64_t v70;

  v4 = a4;
  v70 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v62.receiver = self;
  v62.super_class = (Class)_UIKeyboardStateManager;
  v7 = -[_UIKeyboardStateManager init](&v62, sel_init);
  v8 = v7;
  if (v7)
  {
    v9 = qword_1ECD7D230++;
    v7->_id = v9;
    if (os_variant_has_internal_diagnostics())
    {
      _UIKeyboardExtendedLog();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        v60 = "No";
        id = v8->_id;
        if (v4)
          v60 = "Yes";
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v60;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = id;
        _os_log_impl(&dword_185066000, v59, OS_LOG_TYPE_DEFAULT, "Impl init forCustomInputView:%s (id=%ld)", buf, 0x16u);
      }

    }
    objc_storeWeak((id *)&v8->_presentationDelegate, v6);
    v8->_forCustomInputView = v4;
    _UIKBRT_ResetSystemUptimeOnResume();
    v10 = objc_alloc_init(UIKeyboardTaskQueue);
    taskQueue = v8->_taskQueue;
    v8->_taskQueue = v10;

    v12 = objc_alloc_init(_UIKeyboardImplProxy);
    m_implProxy = v8->m_implProxy;
    v8->m_implProxy = v12;

    v14 = (TIKeyboardState *)objc_alloc_init(MEMORY[0x1E0DBDC70]);
    m_keyboardState = v8->m_keyboardState;
    v8->m_keyboardState = v14;

    _UIMainBundleIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState setClientIdentifier:](v8->m_keyboardState, "setClientIdentifier:", v16);

    v17 = objc_alloc_init(UIKeyboardAutocorrectionController);
    m_autocorrectionController = v8->m_autocorrectionController;
    v8->m_autocorrectionController = v17;

    -[UIKeyboardAutocorrectionController setDelegate:](v8->m_autocorrectionController, "setDelegate:", v8);
    if (+[UIKeyboard isInlineTextCompletionUIEnabled](UIKeyboard, "isInlineTextCompletionUIEnabled")
      && !+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
    {
      v19 = objc_alloc_init(UIInlineTextCompletionController);
      m_inlineTextCompletionController = v8->m_inlineTextCompletionController;
      v8->m_inlineTextCompletionController = v19;

      -[UIInlineTextCompletionController setDelegate:](v8->m_inlineTextCompletionController, "setDelegate:", v8);
      +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIInlineTextCompletionController setAnalyticsDispatcher:](v8->m_inlineTextCompletionController, "setAnalyticsDispatcher:", v21);

    }
    v63 = 0;
    v64 = &v63;
    v65 = 0x2050000000;
    v22 = (void *)qword_1ECD7D238;
    v66 = qword_1ECD7D238;
    if (!qword_1ECD7D238)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __getTUISmartReplyGeneratorClass_block_invoke;
      v68 = &unk_1E16B14C0;
      v69 = &v63;
      __getTUISmartReplyGeneratorClass_block_invoke((uint64_t)buf);
      v22 = (void *)v64[3];
    }
    v23 = objc_retainAutorelease(v22);
    _Block_object_dispose(&v63, 8);
    objc_msgSend(v23, "sharedInstance");
    v24 = objc_claimAutoreleasedReturnValue();
    smartReplyGenerator = v8->_smartReplyGenerator;
    v8->_smartReplyGenerator = (TUISmartReplyGenerator_Staging *)v24;

    v26 = (TISmartPunctuationController *)objc_alloc_init(MEMORY[0x1E0DBDCD0]);
    m_smartPunctuationController = v8->m_smartPunctuationController;
    v8->m_smartPunctuationController = v26;

    +[_UIKeyboardTextSelectionGestureController sharedInstance](_UIKeyboardTextSelectionGestureController, "sharedInstance");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setDelegate:", v8);

    +[_UIKeyboardBasedTextSelectionGestureController sharedInstance](_UIKeyboardBasedTextSelectionGestureController, "sharedInstance");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setDelegate:", v8);

    v8->m_currentDirection = 0;
    v8->m_textInputSource = 1;
    v8->m_correctionLearningAllowed = 1;
    -[_UIKeyboardStateManager takeTextInputTraitsFromDelegate](v8, "takeTextInputTraitsFromDelegate");
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "_isHardwareKeyboardAvailable");

    if (v31)
      -[_UIKeyboardStateManager updateHardwareKeyboardExclusivityIdentifier](v8, "updateHardwareKeyboardExclusivityIdentifier");
    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setHardwareKeyboardAttached:](v8, "setHardwareKeyboardAttached:", objc_msgSend(v32, "_isHardwareKeyboardAvailable"));

    m_hardwareKeyboardAttached = v8->m_hardwareKeyboardAttached;
    if (v8->m_hardwareKeyboardAttached)
      v8->m_textInputSource = 4;
    -[TIKeyboardState setHardwareKeyboardMode:](v8->m_keyboardState, "setHardwareKeyboardMode:", m_hardwareKeyboardAttached);
    ++v8->m_updatingPreferences;
    v8->m_shiftLockedEnabled = -[_UIKeyboardStateManager shiftLockPreference](v8, "shiftLockPreference");
    v8->m_doubleSpacePeriodPreference = -[_UIKeyboardStateManager doubleSpacePeriodPreference](v8, "doubleSpacePeriodPreference");
    UIKeyboardAutocorrectSpellingFlag = 0;
    -[_UIKeyboardStateManager inputModePreference](v8, "inputModePreference");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardSetActiveInputModes(v34);

    -[_UIKeyboardStateManager UILanguagePreference](v8, "UILanguagePreference");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(v35, "copy");
    v37 = (void *)UIKeyboardCurrentUILanguage;
    UIKeyboardCurrentUILanguage = v36;

    if (!-[_UIKeyboardStateManager forCustomInputView](v8, "forCustomInputView"))
      -[_UIKeyboardStateManager setInputModeFromPreferences](v8, "setInputModeFromPreferences");
    --v8->m_updatingPreferences;
    if (m_hardwareKeyboardAttached)
    {
      v38 = (void *)UIApp;
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "hardwareInputMode");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "automaticHardwareLayout");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "setHardwareKeyboardLayoutName:", v41);

      -[_UIKeyboardStateManager setCapsLockIfNeeded](v8, "setCapsLockIfNeeded");
    }
    -[_UIKeyboardStateManager setServiceRole:](v8, "setServiceRole:", +[UIKeyboard serviceRole](UIKeyboard, "serviceRole"));
    WeakRetained = objc_loadWeakRetained((id *)&v8->_presentationDelegate);
    objc_msgSend(WeakRetained, "updateLayout");

    v43 = objc_alloc_init(UIKBAutofillController);
    m_autofillController = v8->m_autofillController;
    v8->m_autofillController = v43;

    v8->m_pendingAutofillIndex = -1;
    v45 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 5);
    m_hardwareKeyDownCodeToEventMap = v8->m_hardwareKeyDownCodeToEventMap;
    v8->m_hardwareKeyDownCodeToEventMap = (NSMutableDictionary *)v45;

    v47 = objc_alloc_init(UIKeyboardInputModeIndicatorController);
    inputModeIndicatorController = v8->_inputModeIndicatorController;
    v8->_inputModeIndicatorController = v47;

    -[UIKeyboardInputModeIndicatorController setDelegate:](v8->_inputModeIndicatorController, "setDelegate:", v8);
    +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "preferencesActions");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "valueForPreferenceKey:", CFSTR("kbUserDidPath"));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v8->m_numCPwords = objc_msgSend(v51, "integerValue");

    v8->m_lastChooseSupplementalItemToInsertCallbackIdentifier = 0;
    v8->m_initializationDone = 1;
    v52 = objc_loadWeakRetained((id *)&v8->_presentationDelegate);
    objc_msgSend(v52, "_setSafeAreaInsetsFrozen:", 1);

    v53 = objc_alloc_init(UIKBInputDelegateManager);
    -[_UIKeyboardStateManager setInputDelegateManager:](v8, "setInputDelegateManager:", v53);

    -[_UIKeyboardStateManager inputDelegateManager](v8, "inputDelegateManager");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "setKeyboardStateDelegate:", v8);

    v55 = -*MEMORY[0x1E0C9ADE8];
    -[_UIKeyboardStateManager setDeleteWordLastDelete:](v8, "setDeleteWordLastDelete:", v55);
    v8->m_autoDeleteLastDelete = v55;
    v56 = -[_UISmartReplyFeedbackManager initWithKeyboardStateManagerDelegate:]([_UISmartReplyFeedbackManager alloc], "initWithKeyboardStateManagerDelegate:", v8);
    -[_UIKeyboardStateManager setSmartReplyFeedbackManager:](v8, "setSmartReplyFeedbackManager:", v56);

    v8->m_userInteraction = 9;
    v57 = v8;
  }

  return v8;
}

- (void)presentationDelegateWillDetach
{
  -[_UIKeyboardStateManager detach](self, "detach");
  objc_storeWeak((id *)&self->_presentationDelegate, 0);
}

- (void)detach
{
  void *v3;
  _UIKeyboardStateManager *v4;
  void *v5;
  NSObject *v6;
  int64_t id;
  int v8;
  int64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (os_variant_has_internal_diagnostics())
  {
    _UIKeyboardExtendedLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id = self->_id;
      v8 = 134217984;
      v9 = id;
      _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_DEFAULT, "KeyboardStateManager detach (id=%ld)", (uint8_t *)&v8, 0xCu);
    }

  }
  sharedInputManagerMux();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "responseDelegate");
  v4 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

  if (v4 == self)
    objc_msgSend(v3, "setResponseDelegate:", 0);
  objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cancelPerformSelectorsWithTarget:", self);

  -[_UIKeyboardStateManager clearTimers](self, "clearTimers");
  -[_UIKeyboardStateManager clearRemoteTextInputPartner](self, "clearRemoteTextInputPartner");

}

- (void)dealloc
{
  void *v3;
  _UIKeyboardStateManager *v4;
  void *v5;
  void *v6;
  void *v7;
  _UIKeyboardStateManager *v8;
  void *v9;
  void *v10;
  void *v11;
  _UIKeyboardStateManager *v12;
  void *v13;
  NSString *m_previousInputString;
  UIPhysicalKeyboardEvent *m_previousGlobeKeyEvent;
  void *v16;
  _UIKeyboardStateManager *v17;
  void *v18;
  void *v19;
  _UIKeyboardStateManager *v20;
  void *v21;
  NSArray *characterRectsForCharacterRange;
  id deferredUpdateTask;
  id WeakRetained;
  NSObject *v25;
  int64_t id;
  objc_super v27;
  uint8_t buf[4];
  int64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (os_variant_has_internal_diagnostics())
  {
    _UIKeyboardExtendedLog();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id = self->_id;
      *(_DWORD *)buf = 134217984;
      v29 = id;
      _os_log_impl(&dword_185066000, v25, OS_LOG_TYPE_DEFAULT, "KeyboardStateManager dealloc (id=%ld)", buf, 0xCu);
    }

  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "inputDelegate");
  v4 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

  if (v4 == self)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setInputDelegate:", 0);

  }
  -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "asyncSystemInputDelegate");
    v8 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

    if (v8 == self)
    {
      -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setAsyncSystemInputDelegate:", 0);

    }
  }
  -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "asyncInputDelegate");
    v12 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

    if (v12 == self)
    {
      -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setAsyncInputDelegate:", 0);

    }
  }
  self->m_inDealloc = 1;
  -[_UIKeyboardStateManager detach](self, "detach");
  m_previousInputString = self->m_previousInputString;
  self->m_previousInputString = 0;

  m_previousGlobeKeyEvent = self->m_previousGlobeKeyEvent;
  self->m_previousGlobeKeyEvent = 0;

  -[_UIKeyboardStateManager setChangedDelegate:](self, "setChangedDelegate:", 0);
  -[_UIKeyboardStateManager removeAutocorrectPromptAndCandidateList](self, "removeAutocorrectPromptAndCandidateList");
  -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
  -[_UIKeyboardStateManager removeTextChoiceUnderlines](self, "removeTextChoiceUnderlines");
  -[_UIActionWhenIdle invalidate](self->m_deferredDidSetDelegateAction, "invalidate");
  -[_UIActionWhenIdle invalidate](self->m_delayedCandidateRequest, "invalidate");
  +[_UIKeyboardTextSelectionGestureController sharedInstance](_UIKeyboardTextSelectionGestureController, "sharedInstance");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "delegate");
  v17 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

  if (v17 == self)
  {
    +[_UIKeyboardTextSelectionGestureController sharedInstance](_UIKeyboardTextSelectionGestureController, "sharedInstance");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setDelegate:", 0);

  }
  +[_UIKeyboardBasedTextSelectionGestureController sharedInstance](_UIKeyboardBasedTextSelectionGestureController, "sharedInstance");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "delegate");
  v20 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

  if (v20 == self)
  {
    +[_UIKeyboardBasedTextSelectionGestureController sharedInstance](_UIKeyboardBasedTextSelectionGestureController, "sharedInstance");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setDelegate:", 0);

  }
  -[_UIKeyboardImplProxy setDelegate:](self->m_implProxy, "setDelegate:", 0);
  characterRectsForCharacterRange = self->_characterRectsForCharacterRange;
  self->_characterRectsForCharacterRange = 0;

  deferredUpdateTask = self->_deferredUpdateTask;
  self->_deferredUpdateTask = 0;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "resetIsPhysicallyAttachedHardwareKeyboard");

  v27.receiver = self;
  v27.super_class = (Class)_UIKeyboardStateManager;
  -[_UIKeyboardStateManager dealloc](&v27, sel_dealloc);
}

- (id)layoutState
{
  id WeakRetained;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layoutState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (unint64_t)maxNumberOfProactiveCells
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  id WeakRetained;

  +[UIPeripheralHost activeInstance](UIPeripheralHost, "activeInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "loadAwareInputViews");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "keyboard");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "interfaceOrientation");

  v7 = 2;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1 && (unint64_t)(v6 - 3) <= 1)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    if (objc_msgSend((id)objc_opt_class(), "isSplit"))
      v7 = 2;
    else
      v7 = 3;

  }
  return v7;
}

- (id)updateSecureCandidateRenderTraits
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  void *WeakRetained;
  id v5;
  int64_t v6;
  id v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  unint64_t v27;
  double v28;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
LABEL_18:

    return v5;
  }
  v6 = -[UITextInputTraits keyboardAppearance](self->m_traits, "keyboardAppearance");

  if (v6 != 127)
  {
    v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v7, "layout");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "candidateList");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_opt_respondsToSelector();

    if ((v10 & 1) != 0)
    {
      v11 = objc_loadWeakRetained((id *)p_presentationDelegate);
      objc_msgSend(v11, "layout");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "candidateList");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "secureCandidateRenderTraits");
      v5 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_9;
    }
    if (self->m_usesCandidateSelection)
    {
      v14 = objc_loadWeakRetained((id *)p_presentationDelegate);
      objc_msgSend(v14, "candidateController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v11, "secureCandidateRenderTraits");
        v5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_9:

        if (v5)
          return v5;
        goto LABEL_12;
      }

    }
LABEL_12:
    objc_msgSend(off_1E167A828, "systemFontOfSize:", 14.0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "fontName");
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();

    v5 = objc_alloc_init(MEMORY[0x1E0DBDC58]);
    v16 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v16, "_inheritedRenderConfig");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v17, "lightKeyboard") & 1) != 0)
      objc_msgSend(MEMORY[0x1E0DBDC50], "blackColor");
    else
      objc_msgSend(MEMORY[0x1E0DBDC50], "whiteColor");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DBDC60]), "initWithFontName:maxFontSize:minFontSize:textColor:", WeakRetained, v18, 14.0, 11.0);
    objc_msgSend(v5, "setHeaderTextTraits:", v19);

    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DBDC60]), "initWithFontName:maxFontSize:minFontSize:textColor:", WeakRetained, v18, 17.0, 11.0);
    objc_msgSend(v5, "setInputTextTraits:", v20);

    objc_msgSend(v5, "setResultCountToSingleCellWidth:", MEMORY[0x1E0C9AA60]);
    +[UIKeyboardPredictionCellMetrics secureCandidateEstimatedMetricsDictionary](UIKeyboardPredictionCellMetrics, "secureCandidateEstimatedMetricsDictionary");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCellWidthOptions:", v21);

    objc_msgSend(v5, "setMaxCellCount:", -[_UIKeyboardStateManager maxNumberOfProactiveCells](self, "maxNumberOfProactiveCells"));
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "scale");
    objc_msgSend(v5, "setScreenScale:");

    objc_msgSend(v5, "setIsCandidateUI:", 0);
    v23 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v23, "traitCollection");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[UISystemInputAssistantViewController _defaultPreferredHeightForTraitCollection:](UISystemInputAssistantViewController, "_defaultPreferredHeightForTraitCollection:", v24);
    v26 = ceil(v25);
    v27 = UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL;
    v28 = 6.0;
    if (v27 == 1)
      v28 = 0.0;
    objc_msgSend(v5, "setSingleCellHeight:", v26 - v28);

    objc_msgSend(v5, "setSingleCellVerticalPadding:", 0.0);
    goto LABEL_18;
  }
  v5 = 0;
  return v5;
}

- (BOOL)shouldSwitchFromInputManagerMode:(id)a3 toInputMode:(id)a4
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  char HasWordNgramModelForInputMode;
  BOOL v10;

  v5 = a3;
  v6 = a4;
  v7 = v6;
  if (!v5)
    goto LABEL_6;
  objc_msgSend(v6, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v8, "hasPrefix:", CFSTR("emoji")))
  {

    goto LABEL_6;
  }
  HasWordNgramModelForInputMode = UIKeyboardHasWordNgramModelForInputMode();

  if ((HasWordNgramModelForInputMode & 1) == 0)
  {
LABEL_6:
    v10 = 1;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:

  return v10;
}

- (void)updateInputManagerMode
{
  void *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentSystemInputMode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[TIKeyboardState inputMode](self->m_keyboardState, "inputMode");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[_UIKeyboardStateManager shouldSwitchFromInputManagerMode:toInputMode:](self, "shouldSwitchFromInputManagerMode:toInputMode:", v5, v4);

  if (v6)
  {
    objc_msgSend(v4, "identifierWithLayouts");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState setInputMode:](self->m_keyboardState, "setInputMode:", v7);

    objc_msgSend(v4, "identifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("intl_HWR"));

    if (v9)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController", 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "suggestedInputModesForPreferredLanguages");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v19;
        do
        {
          v16 = 0;
          do
          {
            if (*(_QWORD *)v19 != v15)
              objc_enumerationMutation(v12);
            objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v16), "identifier");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "addObject:", v17);

            ++v16;
          }
          while (v14 != v16);
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v14);
      }

    }
    else
    {
      v10 = 0;
    }
    -[TIKeyboardState setAuxiliaryInputModeLanguages:](self->m_keyboardState, "setAuxiliaryInputModeLanguages:", v10);

  }
}

- (void)refreshKeyboardState
{
  -[_UIKeyboardStateManager refreshKeyboardStateUpdatingSecureCandidateRenderTraits:](self, "refreshKeyboardStateUpdatingSecureCandidateRenderTraits:", 1);
}

- (void)refreshKeyboardStateUpdatingSecureCandidateRenderTraits:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id WeakRetained;
  id v10;
  void *v11;
  int v12;
  TIKeyboardState *m_keyboardState;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  v3 = a3;
  -[_UIKeyboardStateManager updateInputManagerMode](self, "updateInputManagerMode");
  -[_UIKeyboardStateManager layoutState](self, "layoutState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setLayoutState:](self->m_keyboardState, "setLayoutState:", v5);

  -[UIKeyboardCandidateList currentCandidate](self->m_candidateList, "currentCandidate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setCurrentCandidate:](self->m_keyboardState, "setCurrentCandidate:", v6);

  -[TIKeyboardState setNeedsCandidateMetadata:](self->m_keyboardState, "setNeedsCandidateMetadata:", 1);
  -[TIKeyboardState setShortcutConversionEnabled:](self->m_keyboardState, "setShortcutConversionEnabled:", -[UITextInputTraits shortcutConversionType](self->m_traits, "shortcutConversionType") != 1);
  -[TIKeyboardState setCandidateSelectionPredictionEnabled:](self->m_keyboardState, "setCandidateSelectionPredictionEnabled:", -[_UIKeyboardStateManager candidateSelectionPredictionForTraits](self, "candidateSelectionPredictionForTraits"));
  objc_msgSend(MEMORY[0x1E0DBDD20], "traitsForUITextInputTraits:", self->m_traits);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setTextInputTraits:](self->m_keyboardState, "setTextInputTraits:", v7);

  if (-[_UIKeyboardStateManager isPredictionViewControllerVisible](self, "isPredictionViewControllerVisible")
    || -[_UIKeyboardStateManager prewarmsPredictiveCandidates](self, "prewarmsPredictiveCandidates"))
  {
    -[TIKeyboardState setAutocorrectionListUIDisplayed:](self->m_keyboardState, "setAutocorrectionListUIDisplayed:", 1);
  }
  else
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState setAutocorrectionListUIDisplayed:](self->m_keyboardState, "setAutocorrectionListUIDisplayed:", objc_msgSend(v8, "hasActiveObservers"));

  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setFloatingKeyboardMode:](self->m_keyboardState, "setFloatingKeyboardMode:", objc_msgSend((id)objc_opt_class(), "isFloating"));

  v10 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setLandscapeOrientation:](self->m_keyboardState, "setLandscapeOrientation:", (unint64_t)(objc_msgSend(v10, "_keyboardOrientation") - 3) < 2);

  -[TIKeyboardState setOmitEmojiCandidates:](self->m_keyboardState, "setOmitEmojiCandidates:", -[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch"));
  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "acceptsPayloads");

    m_keyboardState = self->m_keyboardState;
    if (v12)
    {
      +[UITextInputPayloadController sharedInstance](UITextInputPayloadController, "sharedInstance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "supportedPayloadIds");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardState setSupportedPayloadIds:](m_keyboardState, "setSupportedPayloadIds:", v15);

    }
    else
    {
      -[TIKeyboardState setSupportedPayloadIds:](self->m_keyboardState, "setSupportedPayloadIds:", 0);
    }
  }
  -[_UIKeyboardStateManager responderForSendCurrentLocation](self, "responderForSendCurrentLocation");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setCanSendCurrentLocation:](self->m_keyboardState, "setCanSendCurrentLocation:", v16 != 0);

  v17 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setLongPredictionListEnabled:](self->m_keyboardState, "setLongPredictionListEnabled:", objc_msgSend(v17, "accessibilityUsesExtendedKeyboardPredictionsEnabled"));

  -[TIKeyboardState setNeedAutofill:](self->m_keyboardState, "setNeedAutofill:", -[_UIKeyboardStateManager needAutofillLogin](self, "needAutofillLogin"));
  -[TIKeyboardState setNeedOneTimeCodeAutofill:](self->m_keyboardState, "setNeedOneTimeCodeAutofill:", -[_UIKeyboardStateManager needOneTimeCodeAutofill](self, "needOneTimeCodeAutofill"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    -[TIKeyboardState setNeedCellularAutofill:](self->m_keyboardState, "setNeedCellularAutofill:", -[_UIKeyboardStateManager needCellularAutofill](self, "needCellularAutofill"));
  -[TIKeyboardState setAutofillMode:](self->m_keyboardState, "setAutofillMode:", -[_UIKeyboardStateManager needAutofill](self, "needAutofill"));
  -[TIKeyboardState setAutofillSubMode:](self->m_keyboardState, "setAutofillSubMode:", -[_UIKeyboardStateManager autofillSubMode](self, "autofillSubMode"));
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
    -[TIKeyboardState setInlineCompletionEnabled:](self->m_keyboardState, "setInlineCompletionEnabled:", -[_UIKeyboardStateManager isInlineCompletionEnabled](self, "isInlineCompletionEnabled"));
  if (v3)
  {
    -[_UIKeyboardStateManager updateSecureCandidateRenderTraits](self, "updateSecureCandidateRenderTraits");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState setSecureCandidateRenderTraits:](self->m_keyboardState, "setSecureCandidateRenderTraits:", v19);

  }
  if (self->m_keyboardDelegateStateNeedsRefresh)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState setIsScreenLocked:](self->m_keyboardState, "setIsScreenLocked:", objc_msgSend(v20, "deviceStateIsLocked"));

    self->m_keyboardDelegateStateNeedsRefresh = 0;
  }
  v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[TIKeyboardState setEmojiPopoverMode:](self->m_keyboardState, "setEmojiPopoverMode:", objc_msgSend(v21, "isEmojiPopoverPresented"));

  -[TIKeyboardState setEmojiSearchMode:](self->m_keyboardState, "setEmojiSearchMode:", -[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch"));
  -[_UIKeyboardStateManager _updateCanSuggestSupplementalItemsForCurrentSelection](self, "_updateCanSuggestSupplementalItemsForCurrentSelection");
  -[TIKeyboardState setImageSuggestionEnabled:](self->m_keyboardState, "setImageSuggestionEnabled:", -[_UIKeyboardStateManager imageSuggestionEnabled](self, "imageSuggestionEnabled"));
}

- (BOOL)isInlineCompletionEnabled
{
  void *v2;
  BOOL v3;

  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "currentInlineTextCompletionMode") == 1;

  return v3;
}

- (id)textContentTypeForCurrentInputDelegate
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;

  -[UITextInputTraits textContentType](self->m_traits, "textContentType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "textContentTypeForInputDelegate:", v7);
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

- (BOOL)textInputTraitsNeedAutofillExcludeOneTimeCodeAndContact
{
  _BOOL4 v3;

  v3 = -[_UIKeyboardStateManager textInputTraitsNeedAutofill](self, "textInputTraitsNeedAutofill");
  if (v3)
  {
    if (-[_UIKeyboardStateManager textInputTraitsNeedOneTimeCode](self, "textInputTraitsNeedOneTimeCode"))
      LOBYTE(v3) = 0;
    else
      LOBYTE(v3) = !-[_UIKeyboardStateManager textInputTraitsNeedContactAutoFill](self, "textInputTraitsNeedContactAutoFill");
  }
  return v3;
}

- (BOOL)textInputTraitsNeedAutofill
{
  void *v2;
  BOOL v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "delegateNeedsAutofillMode") != 0;

  return v3;
}

- (BOOL)needAutofillLogin
{
  void *v2;
  BOOL v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "delegateNeedsAutofillMode") == 1;

  return v3;
}

- (BOOL)textInputTraitsNeedSignup
{
  void *v2;
  BOOL v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "delegateNeedsAutofillMode") == 2;

  return v3;
}

- (BOOL)textInputTraitsNeedOneTimeCode
{
  void *v2;
  BOOL v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "delegateNeedsAutofillMode") == 8;

  return v3;
}

- (BOOL)textInputTraitsNeedContactAutoFill
{
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "delegateNeedsAutofillMode") == 5)
  {
    v4 = 1;
  }
  else
  {
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "delegateNeedsAutofillMode") == 6)
    {
      v4 = 1;
    }
    else
    {
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v6, "delegateNeedsAutofillMode") == 7;

    }
  }

  return v4;
}

- (BOOL)needOneTimeCodeAutofill
{
  void *v3;
  BOOL v4;
  void *v5;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "hasText") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "delegateNeedsAutofillMode") == 8;

  }
  return v4;
}

- (BOOL)needCellularAutofill
{
  void *v3;
  BOOL v4;
  void *v5;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "hasText") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "delegateNeedsAutofillMode") == 10;

  }
  return v4;
}

- (int64_t)needAutofill
{
  uint64_t v3;
  void *v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v3 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v3, "documentTraits");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    LOBYTE(v3) = objc_msgSend(v4, "shouldLoadAutofillSignUp");
    if ((v3 & 1) != 0)
      return 2;
  }
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "delegateNeedsAutofillMode");

  if (v7 == 8)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "hasText"))
      v5 = 0;
    else
      v5 = 8;
  }
  else
  {
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v8, "delegateNeedsAutofillMode");
  }

  return v5;
}

- (int64_t)autofillSubMode
{
  int64_t result;
  void *v4;
  void *v5;
  int64_t v6;

  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    return self->m_autofillSubMode;
  result = -[_UIKeyboardStateManager needAutofill](self, "needAutofill");
  if (result)
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "documentTraits");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = objc_msgSend(v5, "autofillSubMode");
    return v6;
  }
  return result;
}

- (id)_contentsOfUsernameField
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "autofillGroup");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("username"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "conformsToProtocol:", &unk_1EDE22B80))
  {
    v5 = v4;
    objc_msgSend(v5, "beginningOfDocument");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "endOfDocument");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "textRangeFromPosition:toPosition:", v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "textInRange:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)generateAutofillCandidate
{
  -[_UIKeyboardStateManager generateAutofillCandidateByAddingTask:](self, "generateAutofillCandidateByAddingTask:", 0);
}

- (void)generateAutofillCandidateByAddingTask:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  BOOL v6;
  id WeakRetained;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD aBlock[5];

  v3 = a3;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[_UIKeyboardStateManager suppressOptOutASPCandidateUpdateForDelegate:](self, "suppressOptOutASPCandidateUpdateForDelegate:", v5);

  if (!v6)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v8 = objc_msgSend(WeakRetained, "keyboardLayoutIsInAnotherProcess");

    if ((v8 & 1) == 0)
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __65___UIKeyboardStateManager_generateAutofillCandidateByAddingTask___block_invoke;
      aBlock[3] = &unk_1E16BAF98;
      aBlock[4] = self;
      v9 = _Block_copy(aBlock);
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v3)
        objc_msgSend(v10, "addTask:", v9);
      else
        objc_msgSend(v10, "performTask:", v9);

    }
  }
}

- (void)refreshAutofillModeIfNecessary
{
  _BOOL8 v3;
  int64_t v4;
  int v5;

  v3 = -[_UIKeyboardStateManager needAutofillLogin](self, "needAutofillLogin");
  v4 = -[_UIKeyboardStateManager needAutofill](self, "needAutofill");
  if (v3 != -[TIKeyboardState needAutofill](self->m_keyboardState, "needAutofill"))
    -[TIKeyboardState setNeedAutofill:](self->m_keyboardState, "setNeedAutofill:", v3);
  if (-[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode") != v4)
    -[TIKeyboardState setAutofillMode:](self->m_keyboardState, "setAutofillMode:", v4);
  if (v4)
    v5 = 1;
  else
    v5 = v3;
  if (v5 == 1)
  {
    self->m_keyboardDelegateStateNeedsRefresh = 1;
    -[_UIKeyboardStateManager generateAutofillCandidate](self, "generateAutofillCandidate");
  }
}

- (void)refreshSecureCandidatesIfNecessary
{
  self->m_keyboardDelegateStateNeedsRefresh = 1;
  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
  {
    if (-[TIKeyboardCandidateResultSet slottedCandidatesCount](self->m_candidateResultSet, "slottedCandidatesCount"))
      -[_UIKeyboardStateManager setCandidates:](self, "setCandidates:", 0);
  }
}

- (void)setPendingAutofillIndex:(int64_t)a3
{
  if ((a3 & 0x8000000000000000) == 0 && self->m_cachedAutofillMode == 1)
  {
    self->m_pendingAutofillIndex = a3;
    -[_UIKeyboardStateManager generateAutofillCandidate](self, "generateAutofillCandidate");
  }
}

- (BOOL)preferFallbackAutofillGroup
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "preferFallbackAutofillGroup");

  return v3;
}

- (int64_t)needAutofillCandidate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t m_cachedAutofillMode;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  BOOL v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  v4 = a3;
  if (v4)
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "documentTraits");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      m_cachedAutofillMode = objc_msgSend(v7, "autofillMode");

      if (m_cachedAutofillMode != 1)
      {
LABEL_17:

        goto LABEL_18;
      }
      objc_msgSend(v6, "documentTraits");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "textInputTraits");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "secureTextEntry"))
      {
        v11 = -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry");

        if (v11)
        {
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "autofillGroup");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "setObject:forKey:", v4, CFSTR("password"));

          goto LABEL_15;
        }
      }
      else
      {

      }
      objc_msgSend(v6, "documentTraits");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "textInputTraits");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "textContentType");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "isEqual:", CFSTR("username"));

      if (!v19)
      {
LABEL_16:
        m_cachedAutofillMode = 1;
        goto LABEL_17;
      }
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "autofillGroup");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKey:", v4, CFSTR("username"));

LABEL_15:
      goto LABEL_16;
    }
    if (self->m_isAutofilling
      || -[_UIKeyboardStateManager delegateAlreadyInAutofillGroup](self, "delegateAlreadyInAutofillGroup"))
    {
      m_cachedAutofillMode = self->m_cachedAutofillMode;
      if ((m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        self->m_autofillSubMode = objc_msgSend(v14, "needAutofillCandidate:delegateAsResponder:keyboardState:", v4, v15, self->m_keyboardState);

        m_cachedAutofillMode = self->m_cachedAutofillMode;
      }
      goto LABEL_17;
    }
    if ((self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) != 2)
    {
LABEL_33:
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      m_cachedAutofillMode = objc_msgSend(v40, "needAutofillCandidate:delegateAsResponder:keyboardState:", v4, v41, self->m_keyboardState);

      self->m_autofillSubMode = m_cachedAutofillMode;
      if (m_cachedAutofillMode == 8)
      {
        if (-[_UIKeyboardStateManager dontPushOneTimeCode](self, "dontPushOneTimeCode"))
          m_cachedAutofillMode = 0;
        else
          m_cachedAutofillMode = 8;
      }
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "autofillGroup");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "objectForKey:", CFSTR("password"));

      goto LABEL_17;
    }
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "autofillGroup");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "objectForKey:", CFSTR("new-password"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v24)
    {
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "autofillGroup");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "objectForKey:", CFSTR("username"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v4, "superview");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "superview");
        v28 = objc_claimAutoreleasedReturnValue();
        if (v27 == (void *)v28)
        {

        }
        else
        {
          v29 = (void *)v28;
          v30 = -[_UIKeyboardStateManager isMemberOfPossibleAutofillGroup:](self, "isMemberOfPossibleAutofillGroup:", v4);

          if (!v30)
            goto LABEL_32;
        }
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "autofillGroup");
        v32 = objc_claimAutoreleasedReturnValue();
        if (!v32)
          goto LABEL_31;
        v33 = (void *)v32;
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "autofillGroup");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = objc_msgSend(v34, "containsUsernamePasswordPairsInAutofillGroup:", v36);

        if (v37)
        {
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "autofillGroup");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "setFallbackAutofillGroup:", v38);

LABEL_31:
        }
      }
    }
LABEL_32:

    goto LABEL_33;
  }
  m_cachedAutofillMode = 0;
LABEL_18:

  return m_cachedAutofillMode;
}

- (BOOL)delegateAlreadyInAutofillGroup
{
  void *v3;
  uint64_t v4;
  void *v5;
  BOOL v6;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "__isKindOfUIResponder") & 1) == 0)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v4 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v4;
  }
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateAutofillContextForInputDelegate:", v3);

  v6 = -[_UIKeyboardStateManager isMemberOfAutofillGroup:](self, "isMemberOfAutofillGroup:", v3);
  return v6;
}

- (BOOL)isMemberOfAutofillGroup:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  BOOL v12;

  if (!a3)
    return 0;
  v4 = a3;
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "autofillGroup");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "objectForKey:", CFSTR("username"));
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", CFSTR("password"));
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", CFSTR("new-password"));
  v9 = (id)objc_claimAutoreleasedReturnValue();

  v12 = v7 == v4 || v8 == v4 || v9 == v4;
  return v12;
}

- (BOOL)isMemberOfPossibleAutofillGroup:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[_UIKeyboardStateManager isMemberOfAutofillGroup:](self, "isMemberOfAutofillGroup:", v4))
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "autofillGroup");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKey:", CFSTR("UIAutofillPossibleRespondersKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8
      || !objc_msgSend(v8, "count")
      || -[_UIKeyboardStateManager preferFallbackAutofillGroup](self, "preferFallbackAutofillGroup"))
    {
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "fallbackAutofillGroup");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "fallbackAutofillGroup");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "objectForKey:", CFSTR("UIAutofillPossibleRespondersKey"));
        v13 = objc_claimAutoreleasedReturnValue();

        v8 = (void *)v13;
      }
    }
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v14 = v8;
    v5 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v5)
    {
      v15 = *(_QWORD *)v19;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v19 != v15)
            objc_enumerationMutation(v14);
          if (*(id *)(*((_QWORD *)&v18 + 1) + 8 * i) == v4)
          {
            LOBYTE(v5) = 1;
            goto LABEL_18;
          }
        }
        v5 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_18:

  }
  return v5;
}

- (int64_t)cachedAutofillMode
{
  return self->m_cachedAutofillMode;
}

- (void)clearAutofillGroup
{
  void *v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clearAutofillGroup");

  self->m_cachedAutofillMode = 0;
}

- (void)removeASPVisualEffectsIfNecessary:(id)a3
{
  id v4;
  char v5;
  void *v6;
  id v7;

  v4 = a3;
  if (self->m_cachedAutofillMode)
  {
    v7 = v4;
    v5 = dyld_program_sdk_at_least();
    v4 = v7;
    if ((v5 & 1) == 0)
    {
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "clearASPVisualEffectsInTextField:", v7);

      v4 = v7;
    }
  }

}

- (void)handleAutofillCredentialSaveIfNeeded:(id)a3
{
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = a3;
  if (self->m_cachedAutofillMode
    || (-[_UIKeyboardStateManager autofillController](self, "autofillController"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v4, "fallbackAutofillGroup"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v5,
        v4,
        v5))
  {
    v6 = -[_UIKeyboardStateManager preferFallbackAutofillGroup](self, "preferFallbackAutofillGroup");
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v6)
      objc_msgSend(v7, "fallbackAutofillGroup");
    else
      objc_msgSend(v7, "autofillGroup");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "objectForKey:", CFSTR("UIAutofillASPOptInKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "BOOLValue");

    v12 = (self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) == 2 || v6;
    v13 = v12 & v11;
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleAutofillCredentialSaveIfNeeded:fromASP:", v15, v13);

  }
  else
  {
    -[_UIKeyboardStateManager clearAutofillGroup](self, "clearAutofillGroup");
  }

}

- (BOOL)suppressOptOutASPCandidateUpdateForDelegate:(id)a3
{
  unint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;

  v4 = self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL;
  v5 = a3;
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "autofillGroup");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("password"));
  v8 = (id)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "autofillGroup");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKey:", CFSTR("UIAutofillASPOptInKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "BOOLValue");

  if (v4 == 2 && v8 == v5)
    return v12 ^ 1;
  else
    return 0;
}

- (TIKeyboardLayout)layoutForKeyHitTest
{
  return (TIKeyboardLayout *)-[TIKeyboardState keyLayout](self->m_keyboardState, "keyLayout");
}

- (void)setLayoutForKeyHitTest:(id)a3
{
  -[TIKeyboardState setKeyLayout:](self->m_keyboardState, "setKeyLayout:", a3);
}

- (void)deactivateLayout
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  id v5;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "clearLanguageIndicator");

  v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v5, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deactivateActiveKeys");

}

- (void)textWillScroll
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "textWillScroll");

}

- (void)textDidScroll
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "textDidScroll");

}

- (BOOL)selectionScrolling
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "selectionScrolling");

  return v3;
}

- (BOOL)updatingPreferences
{
  return self->m_updatingPreferences > 0;
}

- (void)updatePreferencesWithBlock:(id)a3
{
  void (**v4)(_QWORD);
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(_QWORD))a3;
  if (pthread_main_np() != 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        v8 = 136315138;
        v9 = "-[_UIKeyboardStateManager updatePreferencesWithBlock:]";
        _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "Unsupported use of %s off the main thread", (uint8_t *)&v8, 0xCu);
      }

    }
    else
    {
      v5 = updatePreferencesWithBlock____s_category;
      if (!updatePreferencesWithBlock____s_category)
      {
        v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&updatePreferencesWithBlock____s_category);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v8 = 136315138;
        v9 = "-[_UIKeyboardStateManager updatePreferencesWithBlock:]";
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Unsupported use of %s off the main thread", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  if (v4)
  {
    ++self->m_updatingPreferences;
    v4[2](v4);
    --self->m_updatingPreferences;
  }

}

- (void)updateDefaultsWithResults:(id)a3
{
  id v4;
  id WeakRetained;
  id v6;
  char v7;
  BOOL v8;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD block[5];
  id v14;
  BOOL v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (pthread_main_np() != 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v17 = "-[_UIKeyboardStateManager updateDefaultsWithResults:]";
        _os_log_fault_impl(&dword_185066000, v12, OS_LOG_TYPE_FAULT, "Unsupported use %s off the main thread", buf, 0xCu);
      }

    }
    else
    {
      v10 = updateDefaultsWithResults____s_category;
      if (!updateDefaultsWithResults____s_category)
      {
        v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v10, (unint64_t *)&updateDefaultsWithResults____s_category);
      }
      v11 = *(NSObject **)(v10 + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v17 = "-[_UIKeyboardStateManager updateDefaultsWithResults:]";
        _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Unsupported use %s off the main thread", buf, 0xCu);
      }
    }
  }
  if (!-[_UIKeyboardStateManager updatingPreferences](self, "updatingPreferences"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    if (objc_msgSend(WeakRetained, "isUsingDictationLayout"))
    {

    }
    else
    {
      v6 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v7 = objc_msgSend(v6, "isDictationPopoverPresented");

      if ((v7 & 1) == 0)
      {
        ++self->m_updatingPreferences;
        v8 = -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode");
        dispatch_get_global_queue(0, 0);
        v9 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __53___UIKeyboardStateManager_updateDefaultsWithResults___block_invoke;
        block[3] = &unk_1E16BAFE8;
        v15 = v8;
        block[4] = self;
        v14 = v4;
        dispatch_async(v9, block);

      }
    }
  }

}

- (BOOL)autocorrectionPreference
{
  _BOOL4 v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  char v7;

  v2 = -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode");
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferencesActions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  v6 = (_QWORD *)MEMORY[0x1E0DBDF70];
  if (!v2)
    v6 = (_QWORD *)MEMORY[0x1E0DBE1D8];
  v7 = objc_msgSend(v4, "BOOLForPreferenceKey:", *v6);

  return v7;
}

- (BOOL)keyboardIsKeyPad
{
  unsigned int v2;

  v2 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType");
  return v2 <= 0xB && ((1 << v2) & 0x930) != 0 || v2 == 127;
}

- (BOOL)keyboardIsInPencilTextInputMode
{
  void *v3;
  BOOL v4;

  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "_suppressSoftwareKeyboard"))
    v4 = -[_UIKeyboardStateManager _textInputSourceForDelegate:](self, "_textInputSourceForDelegate:", v3) == 3;
  else
    v4 = 0;

  return v4;
}

- (int64_t)_textInputSourceForDelegate:(id)a3
{
  id v3;
  int64_t v4;

  v3 = a3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = objc_msgSend(v3, "_textInputSource");
  else
    v4 = 0;

  return v4;
}

- (void)performReturn
{
  void *v3;
  id v4;
  id v5;

  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_responderForEditing");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(v5, "returnKeyGoesToNextResponder"))
  {
    objc_msgSend(v5, "_nextKeyResponder");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "_suppressSoftwareKeyboard"))
      objc_msgSend(v4, "_setSuppressSoftwareKeyboard:", 1);
    if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v4, "set_textInputSource:", objc_msgSend(v5, "_textInputSource"));
    objc_msgSend(v4, "becomeFirstResponder");
  }
  else
  {
    v4 = objc_alloc_init(MEMORY[0x1E0DBDC40]);
    objc_msgSend(v4, "insertText:", CFSTR("\n"));
    -[_UIKeyboardStateManager performKeyboardOutputAsInputViewControllerOutput:textInputSource:](self, "performKeyboardOutputAsInputViewControllerOutput:textInputSource:", v4, 3);
  }

}

- (void)performDelete
{
  id v3;

  v3 = objc_alloc_init(MEMORY[0x1E0DBDC40]);
  objc_msgSend(v3, "deleteBackward");
  -[_UIKeyboardStateManager performKeyboardOutputAsInputViewControllerOutput:textInputSource:](self, "performKeyboardOutputAsInputViewControllerOutput:textInputSource:", v3, 3);

}

- (void)performOperations:(id)a3 withTextInputSource:(int64_t)a4
{
  int64_t m_textInputSource;

  m_textInputSource = self->m_textInputSource;
  self->m_textInputSource = a4;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  self->m_textInputSource = m_textInputSource;
}

- (void)updateTextInputKeyboardSource
{
  int64_t m_textInputSource;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  m_textInputSource = self->m_textInputSource;
  if (m_textInputSource)
  {
    +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "lastEventSource");

    if ((unint64_t)(m_textInputSource - 4) < 5 || m_textInputSource == 1)
    {
      if (v5 == 3)
        v7 = 15;
      else
        v7 = 5;
    }
    else if (m_textInputSource == 3 && (unint64_t)(v5 - 1) < 8)
    {
      v7 = qword_186679D08[v5 - 1];
    }
    else
    {
      v7 = 5;
    }
    v11[0] = CFSTR("inputSource");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", m_textInputSource);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[1] = CFSTR("options");
    v12[0] = v8;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12[1] = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager updateTextInputKeyboardSource:](self, "updateTextInputKeyboardSource:", v10);

  }
}

- (void)updateTextInputKeyboardSource:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v4;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "updateTextInputKeyboardSource:", v4);

}

- (unint64_t)autocorrectionPreferenceForTraits
{
  _BOOL8 v3;

  v3 = -[_UIKeyboardStateManager autocorrectionPreference](self, "autocorrectionPreference");
  self->m_autocorrectionPreference = v3;
  return -[_UIKeyboardStateManager _updateAutocorrectionPreferenceForTraitsWithCurrentPreference:](self, "_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:", v3);
}

- (BOOL)inlineTextCompletionAllowedForAutocorrectionType
{
  return -[_UIKeyboardStateManager _updateAutocorrectionPreferenceForTraitsWithCurrentPreference:](self, "_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:", 1) == 1;
}

- (unint64_t)_updateAutocorrectionPreferenceForTraitsWithCurrentPreference:(BOOL)a3
{
  void *v4;
  int v5;
  unint64_t result;
  int64_t v7;
  void *v8;
  char v9;

  if (!a3)
  {
    UIKeyboardGetCurrentInputMode();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = UIKeyboardAutocorrectionRequiredForInputMode(v4);

    if (!v5)
      return 0;
  }
  if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
    || -[_UIKeyboardStateManager keyboardIsKeyPad](self, "keyboardIsKeyPad"))
  {
    return 0;
  }
  if (-[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch"))
    return 1;
  v7 = -[UITextInputTraits autocorrectionType](self->m_traits, "autocorrectionType");
  result = 1;
  if (v7 && v7 != 2)
  {
    if (v7 != 1)
      return 0;
    UIKeyboardGetCurrentInputMode();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = UIKeyboardAutocorrectionRequiredForInputMode(v8);

    if ((v9 & 1) == 0)
    {
      if (_os_feature_enabled_impl()
        && -[UITextInputTraits allowsSuggestionsOnlyMode](self->m_traits, "allowsSuggestionsOnlyMode")
        && !+[UIKeyboard isSpotlight](UIKeyboard, "isSpotlight"))
      {
        return 2;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

- (BOOL)_shouldLoadPredictionsBasedOnCurrentTraits
{
  _BOOL4 v3;

  v3 = -[_UIKeyboardStateManager predictionFromPreference](self, "predictionFromPreference");
  if (v3)
  {
    if (!-[_UIKeyboardStateManager prewarmsPredictiveCandidates](self, "prewarmsPredictiveCandidates")
      && (-[UITextInputTraits disablePrediction](self->m_traits, "disablePrediction")
       || -[UITextInputTraits hidePrediction](self->m_traits, "hidePrediction"))
      || -[UITextInputTraits autocorrectionType](self->m_traits, "autocorrectionType") == 1)
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      LOBYTE(v3) = !-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry");
    }
  }
  return v3;
}

- (BOOL)canShowPredictionBar
{
  return (UIKeyboardPredictionEnabledForCurrentInputMode() & 1) != 0
      || (UIKeyboardShowsTransliterationCandidatesForCurrentInputMode() & 1) != 0
      || -[_UIKeyboardStateManager isAutofillPrediction](self, "isAutofillPrediction");
}

- (BOOL)isPredictionViewControllerVisible
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "isPredictionViewControllerVisible");

  return v3;
}

- (BOOL)disableInputBars
{
  _BOOL4 v3;

  v3 = -[UITextInputTraits disableInputBars](self->m_traits, "disableInputBars");
  if (v3)
    LOBYTE(v3) = -[UITextInputTraits isDevicePasscodeEntry](self->m_traits, "isDevicePasscodeEntry")
              || -[_UIKeyboardStateManager isMinimized](self, "isMinimized");
  return v3;
}

- (BOOL)candidateSelectionPredictionForTraits
{
  if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
    || -[UITextInputTraits disablePrediction](self->m_traits, "disablePrediction")
    || -[UITextInputTraits autocorrectionType](self->m_traits, "autocorrectionType") == 1)
  {
    return 0;
  }
  else
  {
    return !-[_UIKeyboardStateManager keyboardIsKeyPad](self, "keyboardIsKeyPad");
  }
}

- (BOOL)autocapitalizationPreference
{
  _BOOL4 v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  char v7;

  v2 = -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode");
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferencesActions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  v6 = (_QWORD *)MEMORY[0x1E0DBDF68];
  if (!v2)
    v6 = (_QWORD *)MEMORY[0x1E0DBE1D0];
  v7 = objc_msgSend(v4, "BOOLForPreferenceKey:", *v6);

  return v7;
}

- (BOOL)smartInsertDeleteIsEnabled
{
  char v3;
  void *v5;
  void *v6;

  if (-[UITextInputTraits smartInsertDeleteType](self->m_traits, "smartInsertDeleteType") == 1
    || -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
    || -[_UIKeyboardStateManager disableSmartInsertDelete](self, "disableSmartInsertDelete"))
  {
    return 0;
  }
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "preferencesActions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v6, "BOOLForPreferenceKey:", *MEMORY[0x1E0DBE4F8]);

  return v3;
}

- (BOOL)liveConversionEnabled
{
  return -[TIKeyboardInputManagerState usesLiveConversion](self->m_inputManagerState, "usesLiveConversion");
}

- (BOOL)delayedCandidateList
{
  return -[TIKeyboardInputManagerState delayedCandidateList](self->m_inputManagerState, "delayedCandidateList");
}

- (BOOL)checkSpellingPreference
{
  void *v2;
  void *v3;
  char v4;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferencesActions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLForPreferenceKey:", *MEMORY[0x1E0DBE250]);

  return v4;
}

- (BOOL)checkSpellingPreferenceForTraits
{
  _BOOL4 v3;
  int64_t v4;

  v3 = -[_UIKeyboardStateManager checkSpellingPreference](self, "checkSpellingPreference");
  if (v3)
  {
    v4 = -[UITextInputTraits spellCheckingType](self->m_traits, "spellCheckingType");
    if (v4 == 2)
    {
      LOBYTE(v3) = 1;
    }
    else if (v4)
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      LOBYTE(v3) = -[UITextInputTraits autocorrectionType](self->m_traits, "autocorrectionType") != 1;
    }
  }
  return v3;
}

- (TISmartPunctuationController)smartPunctuationController
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[TISmartPunctuationController smartPunctuationOptions](self->m_smartPunctuationController, "smartPunctuationOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "currentInputMode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "primaryLanguage");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager updateSmartPunctuationOptionsForLocaleIdentifier:](self, "updateSmartPunctuationOptionsForLocaleIdentifier:", v6);

  }
  return self->m_smartPunctuationController;
}

- (BOOL)doubleSpacePeriodPreference
{
  _BOOL4 v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  char v7;

  v2 = -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode");
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferencesActions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  v6 = (_QWORD *)MEMORY[0x1E0DBDF90];
  if (!v2)
    v6 = (_QWORD *)MEMORY[0x1E0DBE378];
  v7 = objc_msgSend(v4, "BOOLForPreferenceKey:", *v6);

  return v7;
}

- (id)UILanguagePreference
{
  void *v2;
  __CFString *v3;

  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(v2, "objectAtIndex:", 0);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = CFSTR("intl");
  }

  return v3;
}

- (BOOL)keyboardsExpandedPreference
{
  void *v2;
  void *v3;
  char v4;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferencesActions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLForPreferenceKey:", *MEMORY[0x1E0DBDDE8]);

  return v4;
}

- (BOOL)automaticMinimizationEnabled
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "automaticMinimizationEnabled");

  return v3;
}

- (void)setAutomaticMinimizationEnabled:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "setAutomaticMinimizationEnabled:", v3);

}

- (id)inputModePreference
{
  void *v2;
  void *v3;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activeInputModeIdentifiers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)updateInputModeLastChosenPreference
{
  if (!self->m_updatingPreferences)
  {
    self->m_updatingPreferences = 1;
    -[_UIKeyboardStateManager autocapitalizationPreference](self, "autocapitalizationPreference");
    -[_UIKeyboardStateManager doubleSpacePeriodPreference](self, "doubleSpacePeriodPreference");
    -[_UIKeyboardStateManager shiftLockPreference](self, "shiftLockPreference");
    self->m_updatingPreferences = 0;
  }
}

- (void)setShouldUpdateCacheOnInputModesChange:(BOOL)a3
{
  self->m_shouldUpdateCacheOnInputModesChange = a3;
}

- (id)hardwareKeyboardsSeenPreference
{
  void *v2;
  void *v3;
  void *v4;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferencesActions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForPreferenceKey:", *MEMORY[0x1E0DBE2B0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)setHardwareKeyboardsSeenPreference:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  self->m_updatingPreferences = 1;
  v4 = a3;
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "preferencesActions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setValue:forPreferenceKey:", v4, *MEMORY[0x1E0DBE2B0]);

  self->m_updatingPreferences = 0;
}

- (BOOL)shiftLockPreference
{
  void *v2;
  void *v3;
  char v4;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferencesActions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLForPreferenceKey:", *MEMORY[0x1E0DBE248]);

  return v4;
}

- (void)setInputMode:(id)a3
{
  -[_UIKeyboardStateManager setInputMode:userInitiated:](self, "setInputMode:userInitiated:", a3, 0);
}

- (void)setInputMode:(id)a3 userInitiated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void *v24;
  _UIKeyboardStateManager *v25;
  id v26;
  BOOL v27;
  _QWORD v28[2];
  _QWORD v29[3];

  v4 = a4;
  v29[2] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (!+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
    goto LABEL_15;
  +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "handlingRemoteEvent");

  if ((v8 & 1) == 0)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = CFSTR("inputMode");
    v28[1] = CFSTR("isUserInitiated");
    v29[0] = v6;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v29[1] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "forwardKeyboardInputMode:", v11);

  }
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "currentInputMode");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "identifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("autofillsignup"));

  if (v15)
  {
LABEL_15:
    if (-[_UIKeyboardStateManager floatingForced](self, "floatingForced")
      && objc_msgSend(v6, "hasPrefix:", CFSTR("emoji")))
    {
      -[_UIKeyboardStateManager updateAssistantView](self, "updateAssistantView");
    }
    v21 = MEMORY[0x1E0C809B0];
    v22 = 3221225472;
    v23 = __54___UIKeyboardStateManager_setInputMode_userInitiated___block_invoke;
    v24 = &unk_1E16BB010;
    v25 = self;
    v26 = v6;
    v27 = v4;
    v16 = _Block_copy(&v21);
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager", v21, v22, v23, v24, v25);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "insideKeyInputDelegateCall");

    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v18)
      objc_msgSend(v19, "addTask:", v16);
    else
      objc_msgSend(v19, "performSingleTask:", v16);

  }
}

- (void)setInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 executionContext:(id)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  id v10;
  id v11;

  v6 = a5;
  v7 = a4;
  v10 = a6;
  +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", a3);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  self->m_didAutomaticallyInsertSpaceBeforeChangingInputMode = self->m_didAutomaticallyInsertSpace;
  -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:updateIndicator:executionContext:](self, "setKeyboardInputMode:userInitiated:updateIndicator:executionContext:", v11, v7, v6, v10);

}

- (void)_setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 force:(BOOL)a5
{
  id v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  BOOL v13;
  BOOL v14;

  v8 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __69___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_force___block_invoke;
  v11[3] = &unk_1E16BB038;
  v11[4] = self;
  v12 = v8;
  v13 = a4;
  v14 = a5;
  v10 = v8;
  objc_msgSend(v9, "performSingleTask:", v11);

}

- (void)setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4
{
  -[_UIKeyboardStateManager _setKeyboardInputMode:userInitiated:force:](self, "_setKeyboardInputMode:userInitiated:force:", a3, a4, 0);
}

- (void)postInputViewControllerShouldUpdateNotification:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v4;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "postInputViewControllerShouldUpdateNotification:", v4);

}

- (void)reloadCurrentInputMode
{
  void *v3;
  id v4;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "currentInputMode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _setKeyboardInputMode:userInitiated:force:](self, "_setKeyboardInputMode:userInitiated:force:", v3, 0, 1);

}

- (void)setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 executionContext:(id)a6
{
  _BOOL8 v7;
  _BOOL8 v8;
  id v10;
  id v11;
  void *v12;
  id WeakRetained;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  _UIKeyboardStateManager *v21;
  id v22;
  BOOL v23;
  BOOL v24;

  v7 = a5;
  v8 = a4;
  v10 = a3;
  v11 = a6;
  objc_msgSend(v10, "normalizedIdentifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v12, "isEqualToString:", CFSTR("emoji")) || !self->m_delegateSupportsImagePaste)
    goto LABEL_5;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if (objc_msgSend((id)objc_opt_class(), "isSplit"))
  {

LABEL_5:
    goto LABEL_6;
  }
  +[UIKeyboardMediaController sharedKeyboardMediaController](UIKeyboardMediaController, "sharedKeyboardMediaController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "shouldPrefetchRemoteView");

  if (v15)
  {
    objc_msgSend(v11, "returnExecutionToParent");
    UIKeyboardGetCurrentInputMode();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIKeyboardMediaController sharedKeyboardMediaController](UIKeyboardMediaController, "sharedKeyboardMediaController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __95___UIKeyboardStateManager_setKeyboardInputMode_userInitiated_updateIndicator_executionContext___block_invoke;
    v19[3] = &unk_1E16B2950;
    v20 = v16;
    v21 = self;
    v22 = v10;
    v23 = v8;
    v24 = v7;
    v18 = v16;
    objc_msgSend(v17, "prefetchRecentsViewControllerWithCompletion:", v19);

    goto LABEL_7;
  }
LABEL_6:
  -[_UIKeyboardStateManager _setKeyboardInputMode:userInitiated:updateIndicator:force:executionContext:](self, "_setKeyboardInputMode:userInitiated:updateIndicator:force:executionContext:", v10, v8, v7, 0, v11);
LABEL_7:

}

- (void)_setKeyboardInputMode:(id)a3 userInitiated:(BOOL)a4 updateIndicator:(BOOL)a5 force:(BOOL)a6 executionContext:(id)a7
{
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  _UNKNOWN **v16;
  void *v17;
  void *v18;
  _BOOL4 v19;
  id WeakRetained;
  void *v21;
  int v22;
  id v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  int v39;
  id v40;
  char v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  unsigned int v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  int64_t m_currentDirection;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  id v87;
  id v88;
  _BOOL4 v89;
  BOOL v90;
  _BOOL4 v91;
  _QWORD v92[5];
  id v93;
  id v94;
  BOOL v95;
  _QWORD v96[5];
  id v97;
  id v98;
  BOOL v99;
  BOOL v100;
  _QWORD block[5];
  _QWORD v102[6];

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v12 = a3;
  v13 = a7;
  objc_msgSend(v12, "identifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "length");

  if (!v15)
    goto LABEL_68;
  v16 = &off_1E167A000;
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "currentInputMode");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = v9;
  if (objc_msgSend(v18, "isEqual:", v12) && objc_msgSend(v12, "isDisplayed"))
  {
    v19 = v10;
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      v22 = !v8;
    }
    else
    {
      v87 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v22 = ((objc_msgSend(v87, "keyboardLayoutIsInAnotherProcess") & 1) != 0
          || objc_msgSend(v12, "isExtensionInputMode"))
         && !v8;

    }
    v10 = v19;
    v16 = &off_1E167A000;
    if (v22)
      goto LABEL_68;
  }
  else
  {

  }
  self->_isSettingExtensionInputMode = objc_msgSend(v12, "isExtensionInputMode");
  self->_needsUpdateAssistantView = 0;
  -[_UIKeyboardStateManager cleanUpBeforeInputModeSwitch](self, "cleanUpBeforeInputModeSwitch");
  self->_isSettingExtensionInputMode = 0;
  +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
  v23 = (id)objc_claimAutoreleasedReturnValue();
  if (v23 != v12)
  {

    goto LABEL_10;
  }
  +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "isCurrentDictationLanguageOnDevice");

  if (v25)
  {
LABEL_68:
    objc_msgSend(v13, "returnExecutionToParent");
    goto LABEL_69;
  }
LABEL_10:
  if (+[UIDictationController isRunning](UIDictationController, "isRunning"))
  {
    -[_UIKeyboardStateManager activeDictationLanguage](self, "activeDictationLanguage");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26)
    {
      objc_msgSend(v12, "dictationLanguage");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v26, "isEqual:", v27);

      if ((v28 & 1) == 0)
      {
        -[_UIKeyboardStateManager setSyncingDictationLanguageForInputModeSwitch:](self, "setSyncingDictationLanguageForInputModeSwitch:", 1);
        +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setReasonType:", 16);

        +[UIDictationController activeInstance](UIDictationController, "activeInstance");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "cancelDictation");

        -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v102[0] = MEMORY[0x1E0C809B0];
        v102[1] = 3221225472;
        v102[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke;
        v102[3] = &unk_1E16BAF98;
        v102[4] = self;
        v32 = (id)objc_msgSend(v31, "scheduleTask:timeInterval:repeats:", v102, 0, 0.5);

      }
    }

  }
  v33 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v34 = objc_msgSend(v33, "_showsScribbleIconsInAssistantView");

  if (v34)
  {
    objc_msgSend(v12, "languageWithRegion");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIAssistantBarButtonItemProvider setScribbleLanguageIdentifier:](UIAssistantBarButtonItemProvider, "setScribbleLanguageIdentifier:", v35);

  }
  objc_msgSend(v16[476], "sharedInputModeController");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "setLastInputModeSwitchTriggeredByASCIIToggle:", 0);

  self->m_predictionType = 0;
  objc_msgSend(v12, "primaryLanguage");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v37, "isEqualToString:", CFSTR("emoji")) & 1) != 0)
  {
    v38 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v39 = objc_msgSend(v38, "canPresentEmojiPopover");

    if (v39)
    {
      v40 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v41 = objc_msgSend(v40, "isEmojiPopoverPresented");

      if ((v41 & 1) == 0)
      {
        if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke_2;
          block[3] = &unk_1E16B1B28;
          block[4] = self;
          dispatch_async(MEMORY[0x1E0C80D38], block);
        }
        else
        {
          v88 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          objc_msgSend(v88, "presentEmojiPopoverViaTrigger:completion:", CFSTR("other"), 0);

        }
      }
      goto LABEL_68;
    }
  }
  else
  {

  }
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "postNotificationName:object:", CFSTR("UITextInputCurrentInputModeWillChangeNotification"), 0);

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "forwardingInputDelegate");
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v44)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "postNotificationName:object:", CFSTR("UITextInputWillPersistFindUINotification"), 0);

  }
  objc_msgSend(v16[476], "sharedInputModeController");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "currentInputMode");
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "identifier");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardSetCurrentInputMode(v48);

  if (self->_needsUpdateAssistantView)
    -[_UIKeyboardStateManager updateAssistantView](self, "updateAssistantView");
  v89 = v10;
  if (objc_msgSend(v12, "isExtensionInputMode"))
  {
    objc_msgSend(v12, "primaryLanguage");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "lowercaseString");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend(v50, "hasPrefix:", CFSTR("und"));

    if (v51)
    {
      v52 = objc_msgSend(v12, "isDefaultRightToLeft");
      -[_UIKeyboardStateManager updateSmartPunctuationOptionsForLocaleIdentifier:](self, "updateSmartPunctuationOptionsForLocaleIdentifier:", CFSTR("en"));
    }
    else
    {
      v53 = (void *)MEMORY[0x1E0C99DC8];
      objc_msgSend(v12, "primaryLanguage");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = objc_msgSend(v53, "characterDirectionForLanguage:", v54) == 2;

      objc_msgSend(v12, "primaryLanguage");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager updateSmartPunctuationOptionsForLocaleIdentifier:](self, "updateSmartPunctuationOptionsForLocaleIdentifier:", v55);

    }
    -[_UIKeyboardStateManager setInputManagerFromCurrentInputMode](self, "setInputManagerFromCurrentInputMode");
    if (v10)
    {
      +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "setDocumentInputMode:", v47);

    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v52 = objc_msgSend(v47, "isDefaultRightToLeft");
    }
    else
    {
      v52 = objc_msgSend(v12, "isDefaultRightToLeft");
      objc_msgSend(v12, "primaryLanguage");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager updateSmartPunctuationOptionsForLocaleIdentifier:](self, "updateSmartPunctuationOptionsForLocaleIdentifier:", v57);

      +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "setTriggeringTouch:", 0);

      -[_UIKeyboardStateManager setInputManagerFromCurrentInputMode](self, "setInputManagerFromCurrentInputMode");
    }
  }
  v59 = v52;
  m_currentDirection = self->m_currentDirection;
  v90 = m_currentDirection != v52;
  if (m_currentDirection != v52)
    self->m_currentDirection = v52;
  if ((objc_msgSend(v12, "isExtensionInputMode") & 1) == 0)
  {
    v67 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v67, "setAnimateUpdateBars:", 0);

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "keyInputDelegate");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if (v69)
    {

    }
    else
    {
      v70 = objc_msgSend((id)UIApp, "isFrontBoard");

      if ((v70 & 1) != 0)
      {
LABEL_44:
        self->m_usesAutoShiftFor3PK = 1;
        goto LABEL_45;
      }
    }
    -[_UIKeyboardStateManager reinitializeAfterInputModeSwitch:](self, "reinitializeAfterInputModeSwitch:", v91);
    goto LABEL_44;
  }
  objc_msgSend(v16[476], "sharedInputModeController");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "currentSystemInputMode");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "identifier");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardGetKBStarKeyboard(v63, -[UITextInputTraits keyboardType](self->m_traits, "keyboardType"));
  v64 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v64, "subtrees");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "firstObject");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  self->m_usesAutoShiftFor3PK = objc_msgSend(v66, "BOOLForProperty:", CFSTR("autoshift"));

  -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
  -[_UIKeyboardStateManager setShouldSkipCandidateSelection:](self, "setShouldSkipCandidateSelection:", 0);

LABEL_45:
  self->m_keyboardDelegateStateNeedsRefresh = 1;
  -[_UIKeyboardStateManager postInputViewControllerShouldUpdateNotification:](self, "postInputViewControllerShouldUpdateNotification:", v12);
  if (v12)
  {
    if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      objc_msgSend(v12, "identifier");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      v72 = objc_msgSend(v71, "isEqualToString:", CFSTR("autofillsignup"));

      if ((v72 & 1) == 0)
      {
        -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = v73;
        if (v73)
        {
          objc_msgSend(v73, "textOperations");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "setCustomInfoType:", 0x1E17503A0);
          objc_msgSend(v12, "identifier");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "setCustomInfo:", v76);

          -[_UIKeyboardStateManager buildInputSourceState](self, "buildInputSourceState");
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "setInputSourceState:", v77);

          objc_msgSend(v12, "identifier");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "inputSourceState");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v79, "setInputMode:", v78);

          objc_msgSend(v74, "flushOperations");
        }

      }
    }
  }
  if (!self->m_updatingPreferences)
  {
    if (v89)
    {
      self->m_updatingPreferences = 1;
      +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "preferencesActions");
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "identifier");
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v83, "setLanguageAwareInputModeLastUsed:", v84);

      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "_inputModeChangedWhileContextTracked");

      self->m_updatingPreferences = 0;
    }
    -[_UIKeyboardStateManager setSuppressUpdateAssistantView:](self, "setSuppressUpdateAssistantView:", 1);
    -[_UIKeyboardStateManager setIsCallingTextChangedDuringInputModeSwitch:](self, "setIsCallingTextChangedDuringInputModeSwitch:", 1);
    v96[0] = MEMORY[0x1E0C809B0];
    v96[1] = 3221225472;
    v96[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke_3;
    v96[3] = &unk_1E16BB060;
    v96[4] = self;
    v97 = v12;
    v98 = v47;
    v99 = v90;
    v100 = v89;
    objc_msgSend(v13, "childWithContinuation:", v96);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager textChanged:executionContext:](self, "textChanged:executionContext:", self, v86);

    -[_UIKeyboardStateManager setSuppressUpdateAssistantView:](self, "setSuppressUpdateAssistantView:", 0);
    -[_UIKeyboardStateManager setIsCallingTextChangedDuringInputModeSwitch:](self, "setIsCallingTextChangedDuringInputModeSwitch:", 0);

    v81 = v97;
    goto LABEL_59;
  }
  if (!self->m_inputManagerState && (UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    v92[0] = MEMORY[0x1E0C809B0];
    v92[1] = 3221225472;
    v92[2] = __102___UIKeyboardStateManager__setKeyboardInputMode_userInitiated_updateIndicator_force_executionContext___block_invoke_4;
    v92[3] = &unk_1E16BB088;
    v92[4] = self;
    v93 = v12;
    v94 = v47;
    v95 = v90;
    objc_msgSend(v13, "childWithContinuation:", v92);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager syncInputManagerToKeyboardStateWithExecutionContext:](self, "syncInputManagerToKeyboardStateWithExecutionContext:", v80);

    v81 = v93;
LABEL_59:

    goto LABEL_60;
  }
  -[_UIKeyboardStateManager finishSetKeyboardInputMode:previousInputMode:didChangeDirection:](self, "finishSetKeyboardInputMode:previousInputMode:didChangeDirection:", v12, v47, m_currentDirection != v59);
  objc_msgSend(v13, "returnExecutionToParent");
LABEL_60:

LABEL_69:
}

- (void)cleanUpBeforeInputModeSwitch
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  self->_receivedCandidatesInCurrentInputMode = 0;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "keyInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")
      || (-[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController"),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v5, "autocorrection"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v6,
          v5,
          v6))
    {
      -[_UIKeyboardStateManager setSuppressUpdateAssistantView:](self, "setSuppressUpdateAssistantView:", 1);
      -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](self, "acceptAutocorrectionWithCompletionHandler:", 0);
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "unmarkText");

      -[_UIKeyboardStateManager setSuppressUpdateAssistantView:](self, "setSuppressUpdateAssistantView:", 0);
    }
    self->m_shiftLocked = 0;
    -[_UIKeyboardStateManager _forwardNeededShiftStatesToDestination](self, "_forwardNeededShiftStatesToDestination");
  }
  -[_UIKeyboardStateManager clearInput](self, "clearInput");
  -[_UIKeyboardStateManager removeAutocorrectPromptAndCandidateList](self, "removeAutocorrectPromptAndCandidateList");
  self->m_acceptingCandidate = 0;
}

- (void)updateSmartPunctuationOptionsForLocaleIdentifier:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  _BOOL8 v11;
  id v12;

  v4 = (void *)MEMORY[0x1E0DBDCD8];
  objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "smartPunctuationOptionsForLocale:", v5);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  -[TISmartPunctuationController setSmartPunctuationOptions:](self->m_smartPunctuationController, "setSmartPunctuationOptions:", v12);
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "preferencesActions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "BOOLForPreferenceKey:", *MEMORY[0x1E0DBE4F8]);

  v9 = -[TISmartPunctuationController autoQuoteType](self->m_smartPunctuationController, "autoQuoteType");
  v10 = ((v8 & 1) != 0 || v9 == 1) && -[UITextInputTraits smartQuotesType](self->m_traits, "smartQuotesType") != 1;
  -[TISmartPunctuationController setSmartQuotesEnabled:](self->m_smartPunctuationController, "setSmartQuotesEnabled:", v10);
  if (v8)
    v11 = -[UITextInputTraits smartDashesType](self->m_traits, "smartDashesType") != 1;
  else
    v11 = 0;
  -[TISmartPunctuationController setSmartDashesEnabled:](self->m_smartPunctuationController, "setSmartDashesEnabled:", v11);

}

- (void)reinitializeAfterInputModeSwitch:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "reinitializeAfterInputModeSwitch:", v3);

}

- (BOOL)canPresentPressAndHoldPopover:(id)a3
{
  id v3;
  void *v4;
  BOOL v5;

  v3 = a3;
  objc_msgSend(v3, "_modifiedInput");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (objc_msgSend(v4, "_isDelete") & 1) == 0
    && +[UIPressAndHoldPopoverController canPresentPressAndHoldPopoverForEvent:](UIPressAndHoldPopoverController, "canPresentPressAndHoldPopoverForEvent:", v3);

  return v5;
}

- (void)handleAutoFillContactPopoverCommand
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "handleAutoFillContactPopoverCommand");

}

- (void)handleAutoFillCreditCardPopoverCommand
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "handleAutoFillCreditCardPopoverCommand");

}

- (void)handleAutoFillPasswordPopoverCommand
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "handleAutoFillPasswordPopoverCommand");

}

- (void)handleAutoFillContactDetected
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "handleAutoFillContactDetected");

}

- (void)handleAutoFillCreditCardDetected
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "handleAutoFillCreditCardDetected");

}

- (void)handleAutoFillPasswordDetected
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "handleAutoFillPasswordDetected");

}

- (void)_performTextOperationsForAutoFill:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v4 = a3;
  if (+[UIKeyboard inputUIOOP](UIKeyboard, "inputUIOOP"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "inputSystemSourceSession");
    v15 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v15, "textOperations");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "textToAssert");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setTextToAssert:", v7);

    objc_msgSend(v4, "keyboardOutput");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "insertionText");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "keyboardOutput");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setInsertionText:", v9);

    objc_msgSend(v4, "keyboardOutput");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "customInfo");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "keyboardOutput");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setCustomInfo:", v12);

    objc_msgSend(v15, "flushOperations");
  }
  else
  {
    objc_msgSend(v4, "textToAssert");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager assertTextForRemoteDocument:withSelectionDelta:updatingSelection:](self, "assertTextForRemoteDocument:withSelectionDelta:updatingSelection:", v14, 0, 0, 0);

    objc_msgSend(v4, "keyboardOutput");
    v15 = (id)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager performKeyboardOutput:checkingDelegate:](self, "performKeyboardOutput:checkingDelegate:", v15, 1);
  }

}

- (void)displayAutoFillPopoverIfAutoFillModeDetected
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "displayAutoFillPopoverIfAutoFillModeDetected");

}

- (BOOL)keyboardInputModeIndicatorControllerShouldPresentIndicator:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;

  v4 = a3;
  if (!qword_1ECD7D1E8 && qword_1ECD7D1F0 != -1)
    dispatch_once(&qword_1ECD7D1F0, &__block_literal_global_105);
  if (-[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "textInputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6 && UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes())
    {
      v7 = (void *)qword_1ECD7D1E8;
      UIKeyboardGetCurrentInputMode();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v7, "containsObject:", v8) ^ 1;

    }
    else
    {
      LOBYTE(v9) = 0;
    }

  }
  else
  {
    LOBYTE(v9) = 0;
  }

  return v9;
}

- (void)keyboardInputModeIndicatorControllerPresentIndicator:(id)a3 reason:(id)a4
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v5;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v5 = a4;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "setInputModeAssertionWithReason:", v5);

}

- (void)keyboardInputModeIndicatorControllerDismissIndicator:(id)a3
{
  id WeakRetained;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "clearInputModeAssertion");

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "selectionDisplayInteraction");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "clearInputModeCursorAssertion");

}

- (void)finishSetKeyboardInputMode:(id)a3 previousInputMode:(id)a4 didChangeDirection:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  id WeakRetained;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  id v28;

  v5 = a5;
  v28 = a3;
  v8 = a4;
  if (objc_msgSend(v28, "isExtensionInputMode"))
    -[_UIKeyboardStateManager finishSetExtensionInputMode:didChangeDirection:](self, "finishSetExtensionInputMode:didChangeDirection:", v28, v5);
  else
    -[_UIKeyboardStateManager finishSetInputMode:didChangeDirection:](self, "finishSetInputMode:didChangeDirection:", v28, v5);
  if (objc_msgSend(v28, "isDisplayed"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {

LABEL_8:
      +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "inputWindowRootViewController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "placement");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_msgSend(v14, "showsKeyboard") & 1) != 0 || (objc_msgSend(v14, "isUndocked") & 1) != 0)
      {
        v15 = 0;
      }
      else
      {
        if (objc_msgSend(v28, "showSWLayoutWithHWKeyboard"))
        {
          v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          objc_msgSend(v16, "showKeyboard");
          goto LABEL_18;
        }
        v15 = 1;
      }
      if (!self->m_hardwareKeyboardAttached
        || ((v15 | !-[_UIKeyboardStateManager automaticMinimizationEnabled](self, "automaticMinimizationEnabled")) & 1) != 0
        || -[_UIKeyboardStateManager floatingForced](self, "floatingForced")
        || -[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch"))
      {
        goto LABEL_19;
      }
      v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v16, "hideKeyboard");
LABEL_18:

LABEL_19:
      goto LABEL_20;
    }
    v11 = objc_msgSend(v28, "isExtensionInputMode");

    if (v11)
      goto LABEL_8;
  }
LABEL_20:
  if (-[_UIKeyboardStateManager textInputTraitsNeedAutofill](self, "textInputTraitsNeedAutofill")
    && (UIKeyboardPredictionEnabledForCurrentInputMode() & 1) == 0
    && !-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
  {
    -[_UIKeyboardStateManager generateAutofillCandidate](self, "generateAutofillCandidate");
  }
  self->m_didAutomaticallyInsertSpace = self->m_didAutomaticallyInsertSpaceBeforeChangingInputMode;
  if (self->m_hardwareKeyboardAttached)
  {
    v17 = (void *)UIApp;
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "hardwareInputMode");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "automaticHardwareLayout");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setHardwareKeyboardLayoutName:", v20);

  }
  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "inputViews");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "inputView");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "_rootInputWindowController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "updateKeyboardDockViewVisibility");

  -[_UIKeyboardStateManager touchUpdateLastUsedInputModeAction](self, "touchUpdateLastUsedInputModeAction");
  if (!-[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "keyInputDelegate");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26)
    {

LABEL_30:
      -[_UIKeyboardStateManager updateInputAssistantButtonItems](self, "updateInputAssistantButtonItems");
      goto LABEL_31;
    }
    v27 = objc_msgSend((id)UIApp, "isFrontBoard");

    if ((v27 & 1) == 0)
      goto LABEL_30;
  }
LABEL_31:
  +[_UIKeyboardUsageTracking keyboardSetToInputMode:fromPrevious:](_UIKeyboardUsageTracking, "keyboardSetToInputMode:fromPrevious:", v28, v8);

}

- (void)finishSetExtensionInputMode:(id)a3 didChangeDirection:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a4;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "inputViews");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "refreshPresentation");

  }
  if (self->m_shouldUpdateCacheOnInputModesChange)
  {
    +[UIKeyboardCache sharedInstance](UIKeyboardCache, "sharedInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id)UIKeyboardActiveInputModes;
    objc_msgSend(v8, "updateCacheForInputModes:", v9);

  }
  if (v4)
    -[_UIKeyboardStateManager setInitialDirection](self, "setInitialDirection");
}

- (void)finishSetInputMode:(id)a3 didChangeDirection:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL8 m_correctionLearningAllowed;
  void *v15;
  id v16;

  v4 = a4;
  v6 = a3;
  -[_UIKeyboardStateManager updateTextCandidateView](self, "updateTextCandidateView");
  self->m_keyboardDelegateStateNeedsRefresh = 1;
  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "inputViews");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "refreshPresentation");

  }
  v9 = -[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits") != 0;
  -[TIKeyboardState setAutocorrectionEnabled:](self->m_keyboardState, "setAutocorrectionEnabled:", v9);
  -[_UIKeyboardStateManager setAutocorrectSpellingEnabled:](self, "setAutocorrectSpellingEnabled:", v9);
  objc_msgSend(v6, "identifierWithLayouts");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  TIStatisticGetKeyForInputMode();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  TIStatisticScalarSetBoolean();

  objc_msgSend(v6, "identifierWithLayouts");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  TIStatisticGetKeyForInputMode();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager predictionFromPreference](self, "predictionFromPreference");
  TIStatisticScalarSetBoolean();

  if (-[UITextInputTraits learnsCorrections](self->m_traits, "learnsCorrections"))
    m_correctionLearningAllowed = self->m_correctionLearningAllowed;
  else
    m_correctionLearningAllowed = 0;
  -[TIKeyboardState setWordLearningEnabled:](self->m_keyboardState, "setWordLearningEnabled:", m_correctionLearningAllowed);
  -[TIKeyboardState setInlineCompletionEnabled:](self->m_keyboardState, "setInlineCompletionEnabled:", -[_UIKeyboardStateManager isInlineCompletionEnabled](self, "isInlineCompletionEnabled"));
  if (self->m_shouldUpdateCacheOnInputModesChange)
  {
    +[UIKeyboardCache sharedInstance](UIKeyboardCache, "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (id)UIKeyboardActiveInputModes;
    objc_msgSend(v15, "updateCacheForInputModes:", v16);

  }
  if (v4)
    -[_UIKeyboardStateManager setInitialDirection](self, "setInitialDirection");
}

- (void)setInputModeFromPreferences
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "currentInputModeInPreference");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && (objc_msgSend(v3, "isAllowedForTraits:", self->m_traits) & 1) == 0)
  {
    objc_msgSend(v10, "activeInputModes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "nextInputModeFromList:withFilter:withTraits:", v5, 1, self->m_traits);
    v6 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v6;
  }
  objc_msgSend(v10, "activeInputModes");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if ((objc_msgSend(v7, "containsObject:", v4) & 1) == 0)
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __54___UIKeyboardStateManager_setInputModeFromPreferences__block_invoke;
      v11[3] = &unk_1E16BB0B0;
      v12 = v4;
      v9 = objc_msgSend(v8, "indexOfObjectPassingTest:", v11);
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v4 = 0;
      }
      else
      {
        objc_msgSend(v8, "objectAtIndex:", v9);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        if (v4)
          objc_msgSend(v10, "setCurrentInputModeInPreference:", v4);
      }

    }
    if (-[_UIKeyboardStateManager initializationDone](self, "initializationDone"))
      goto LABEL_14;
    if (v4)
    {
LABEL_17:
      -[_UIKeyboardStateManager prepareKeyboardInputModeFromPreferences:](self, "prepareKeyboardInputModeFromPreferences:", v4);
      goto LABEL_18;
    }
LABEL_16:
    +[UIKeyboardInputMode intlInputMode](UIKeyboardInputMode, "intlInputMode");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  if (!-[_UIKeyboardStateManager initializationDone](self, "initializationDone"))
    goto LABEL_16;
  v4 = 0;
LABEL_14:
  -[_UIKeyboardStateManager setKeyboardInputModeFromPreferences:](self, "setKeyboardInputModeFromPreferences:", v4);
LABEL_18:

  objc_msgSend(v10, "updateCurrentAndNextInputModes");
}

- (void)prepareKeyboardInputModeFromPreferences:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int64_t v9;
  void *v10;
  id v11;
  id v12;

  v4 = a3;
  if (!v4)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "activeInputModes");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "firstObject");
    v11 = (id)objc_claimAutoreleasedReturnValue();

    v4 = v11;
  }
  v7 = (void *)MEMORY[0x1E0C99DC8];
  v12 = v4;
  objc_msgSend(v4, "primaryLanguage");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "characterDirectionForLanguage:", v8) == 2;

  self->m_currentDirection = v9;
  objc_msgSend(v12, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardSetCurrentInputMode(v10);

  -[_UIKeyboardStateManager setInputManagerFromCurrentInputMode](self, "setInputManagerFromCurrentInputMode");
}

- (void)setKeyboardInputModeFromPreferences:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  if (a3)
  {
    -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", a3, 0);
  }
  else
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "activeInputModes");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", v5, 1);

  }
}

- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a3 preserveIfPossible:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  id WeakRetained;

  v4 = a4;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateInputModeIndicatorOnSingleKeyOnly:preserveIfPossible:", v5, v4);

}

- (void)updateInputModeIndicatorOnSingleKeyOnly:(BOOL)a3
{
  -[_UIKeyboardStateManager updateInputModeIndicatorOnSingleKeyOnly:preserveIfPossible:](self, "updateInputModeIndicatorOnSingleKeyOnly:preserveIfPossible:", a3, 0);
}

- (void)setInputModeToNextInPreferredListWithExecutionContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void *v21;
  _UIKeyboardStateManager *v22;
  id v23;

  v4 = a3;
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentInputMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (os_variant_has_internal_diagnostics()
    && (+[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode"),
        v15 = (void *)objc_claimAutoreleasedReturnValue(),
        v16 = objc_msgSend(v15, "isEqual:", v6),
        v15,
        v16))
  {
    +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "currentInputModeForDictation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  if ((unint64_t)objc_msgSend((id)UIKeyboardActiveUserSelectableInputModes, "count") <= 1
    && -[UITextInputTraits keyboardType](self->m_traits, "keyboardType") == 122)
  {
    +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", CFSTR("emoji@sw=Emoji"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "keyplaneContainsEmojiKey");

    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "nextInputModeInPreferenceListForTraits:updatePreference:skipEmoji:", self->m_traits, 1, v11);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = v12;
  }

  v18 = MEMORY[0x1E0C809B0];
  v19 = 3221225472;
  v20 = __81___UIKeyboardStateManager_setInputModeToNextInPreferredListWithExecutionContext___block_invoke;
  v21 = &unk_1E16BB0D8;
  v22 = self;
  v23 = v6;
  v13 = v6;
  objc_msgSend(v4, "childWithContinuation:", &v18);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:updateIndicator:executionContext:](self, "setKeyboardInputMode:userInitiated:updateIndicator:executionContext:", v8, 1, 1, v14, v18, v19, v20, v21, v22);
}

- (void)finishSetInputModeToNextInPreferredListWithExecutionContext:(id)a3 withPreviousInputMode:(id)a4
{
  id v6;
  id WeakRetained;
  id v8;

  v6 = a4;
  v8 = a3;
  -[_UIKeyboardStateManager updateInputModeLastChosenPreference](self, "updateInputModeLastChosenPreference");
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "showInternationalKeyIntroductionIfNeededWithPreviousInputMode:", v6);

  objc_msgSend(v8, "returnExecutionToParent");
}

- (void)setInputModeToNextASCIICapableInPreferredList
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "currentInputMode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "defaultLayoutIsASCIICapable") & 1) == 0)
  {
    objc_msgSend(v6, "activeInputModes");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "nextInputModeFromList:withFilter:withTraits:", v4, 4, 0);
    v5 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v5;
  }
  if (!v3)
  {
    +[UIKeyboardInputMode intlInputMode](UIKeyboardInputMode, "intlInputMode");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", v3, 0);

}

- (BOOL)isRotating
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "isRotating");

  return v3;
}

- (void)setCorrectionLearningAllowed:(BOOL)a3
{
  _BOOL4 v3;
  _BOOL4 m_correctionLearningAllowed;
  UITextInputTraits *m_traits;
  UITextInputTraits *v7;
  UITextInputTraits *v8;
  id v9;

  v3 = a3;
  m_correctionLearningAllowed = self->m_correctionLearningAllowed;
  self->m_correctionLearningAllowed = a3;
  if (!-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry"))
  {
    m_traits = self->m_traits;
    if (v3)
    {
      v7 = (UITextInputTraits *)-[UITextInputTraits copy](m_traits, "copy");
      -[_UIKeyboardStateManager takeTextInputTraitsFromDelegate](self, "takeTextInputTraitsFromDelegate");
      -[UITextInputTraits setLearnsCorrections:](v7, "setLearnsCorrections:", -[UITextInputTraits learnsCorrections](self->m_traits, "learnsCorrections"));
      v8 = self->m_traits;
      self->m_traits = v7;

    }
    else
    {
      -[UITextInputTraits setLearnsCorrections:](m_traits, "setLearnsCorrections:", 0);
    }
    -[TIKeyboardState setWordLearningEnabled:](self->m_keyboardState, "setWordLearningEnabled:", -[UITextInputTraits learnsCorrections](self->m_traits, "learnsCorrections"));
  }
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    if (self->m_correctionLearningAllowed != m_correctionLearningAllowed)
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "documentTraitsChanged");

    }
  }
}

- (void)_updateCanSuggestSupplementalItemsForCurrentSelection
{
  void *v3;
  void *v4;

  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    self->m_textInputChangesIgnored = 1;
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setCanSuggestSupplementalItemsForCurrentSelection:](self, "setCanSuggestSupplementalItemsForCurrentSelection:", objc_msgSend(v4, "_canSuggestSupplementalItemsForCurrentSelection"));

    }
    else
    {
      -[_UIKeyboardStateManager setCanSuggestSupplementalItemsForCurrentSelection:](self, "setCanSuggestSupplementalItemsForCurrentSelection:", 1);
    }

    self->m_textInputChangesIgnored = 0;
    if (!-[_UIKeyboardStateManager canSuggestSupplementalItemsForCurrentSelection](self, "canSuggestSupplementalItemsForCurrentSelection"))-[_UIKeyboardStateManager _insertionPointExitedRangeWithSupplementalCandidate](self, "_insertionPointExitedRangeWithSupplementalCandidate");
  }
}

- (BOOL)canSuggestSupplementalItemsForCurrentSelection
{
  return -[TIKeyboardState canSuggestSupplementalItemsForCurrentSelection](self->m_keyboardState, "canSuggestSupplementalItemsForCurrentSelection");
}

- (void)setCanSuggestSupplementalItemsForCurrentSelection:(BOOL)a3
{
  -[TIKeyboardState setCanSuggestSupplementalItemsForCurrentSelection:](self->m_keyboardState, "setCanSuggestSupplementalItemsForCurrentSelection:", a3);
}

- (void)takeTextInputTraitsFromDelegate
{
  void *v3;
  UITextInputTraits *v4;
  void *v5;
  _BOOL4 v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  BOOL v12;
  BOOL v13;
  UITextInputTraits *v14;
  UITextInputTraits *m_traits;
  void *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  id v25;
  char v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char v42;
  void *v43;
  id *v44;
  void *v45;
  void *v46;
  int v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "textInputTraits");
  v4 = (UITextInputTraits *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v4 = self->m_defaultTraits;
    if (!v4)
      v4 = objc_alloc_init(UITextInputTraits);
  }
  if (self->m_overrideTraits)
  {
    -[UITextInputTraits overrideWithTraits:](v4, "overrideWithTraits:");
  }
  else if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[UITextInputTraits overrideWithPrivateTraits:](v4, "overrideWithPrivateTraits:", self->m_traits);
  }
  +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isAutomatic") & 1) != 0)
  {
    v6 = -[UITextInputTraits isSecureTextEntry](v4, "isSecureTextEntry");
    if (v6 != -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry"))
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "_rootInputWindowController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setDisableUpdateMaskForSecureTextEntry:", -[UITextInputTraits isSecureTextEntry](v4, "isSecureTextEntry"));

    }
  }
  else
  {
    +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "preferencesActions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "BOOLForPreferenceKey:", CFSTR("ShowPasswordKeyboardInVideo"));

    if ((v11 & 1) == 0)
      objc_msgSend(v5, "_setDisableUpdateMaskForSecureTextEntry:", -[UITextInputTraits isSecureTextEntry](v4, "isSecureTextEntry"));
  }
  v12 = -[UITextInputTraits keyboardType](v4, "keyboardType") != 122;
  v13 = -[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch");
  v14 = (UITextInputTraits *)-[UITextInputTraits copy](v4, "copy");
  m_traits = self->m_traits;
  self->m_traits = v14;

  if (!self->m_correctionLearningAllowed)
    -[UITextInputTraits setLearnsCorrections:](self->m_traits, "setLearnsCorrections:", 0);
  if (-[_UIKeyboardStateManager shouldUseCarPlayModes](self, "shouldUseCarPlayModes"))
    -[UITextInputTraits setIsCarPlayIdiom:](self->m_traits, "setIsCarPlayIdiom:", 1);
  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
    && !-[UITextInputTraits inlinePredictionType](self->m_traits, "inlinePredictionType"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "keyInputDelegate");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "hasAsyncCapableInputDelegate");

    if ((isKindOfClass & 1) == 0 && (v20 & 1) == 0)
      -[UITextInputTraits setInlinePredictionType:](self->m_traits, "setInlinePredictionType:", 1);
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "keyInputDelegate");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    v23 = -[_UIKeyboardStateManager floatingForced](self, "floatingForced");
    v24 = -[UITextInputTraits forceFloatingKeyboard](self->m_traits, "forceFloatingKeyboard");
    -[_UIKeyboardStateManager setFloatingForced:](self, "setFloatingForced:", -[UITextInputTraits forceFloatingKeyboard](self->m_traits, "forceFloatingKeyboard"));
    if (v23 != v24)
    {
      if (+[UIKeyboard isMajelEnabled](UIKeyboard, "isMajelEnabled"))
      {
        v25 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        v26 = objc_msgSend(v25, "isUsingDictationLayout");

        if ((v26 & 1) == 0)
          -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:](self, "recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:", -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry") ^ 1, 1);
      }
    }
  }
  v27 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v27, "refreshRivenPreferences");

  -[_UIKeyboardStateManager updateInputManagerAutocapitalizationType](self, "updateInputManagerAutocapitalizationType");
  -[TIKeyboardState setWordLearningEnabled:](self->m_keyboardState, "setWordLearningEnabled:", -[UITextInputTraits learnsCorrections](self->m_traits, "learnsCorrections"));
  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "autocorrectionContext");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setRecipientIdentifier:](self->m_keyboardState, "setRecipientIdentifier:", v29);

  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "responseContext");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setResponseContext:](self->m_keyboardState, "setResponseContext:", v31);

  -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "inputContextHistory");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "tiInputContextHistory");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setInputContextHistory:](self->m_keyboardState, "setInputContextHistory:", v35);

  -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  if (v32 != v36)
  {
    _UIKeyboardSmartReplyLog();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "debugDescription");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = 138477827;
      v48 = v39;
      _os_log_impl(&dword_185066000, v37, OS_LOG_TYPE_DEFAULT, "Setting state to found ICH: %{private}@", (uint8_t *)&v47, 0xCu);

    }
  }
  -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40)
  {
    -[_UIKeyboardStateManager smartReplyGenerator](self, "smartReplyGenerator");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "syncToKeyboardState:", self->m_keyboardState);

  }
  v42 = v12 ^ v13;
  if (!+[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
  {
    -[UITextInputTraits supplementalLexicon](self->m_traits, "supplementalLexicon");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (v43)
    {
      -[UITextInputTraits supplementalLexicon](self->m_traits, "supplementalLexicon");
      v44 = (id *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardState setSupplementalLexiconIdentifier:](self->m_keyboardState, "setSupplementalLexiconIdentifier:", objc_msgSend(v44[1], "identifier"));

    }
    else
    {
      -[TIKeyboardState setSupplementalLexiconIdentifier:](self->m_keyboardState, "setSupplementalLexiconIdentifier:", 0);
    }

  }
  if ((v42 & 1) == 0)
    -[_UIKeyboardStateManager notifyInputSourceStateChangeIfNeeded](self, "notifyInputSourceStateChangeIfNeeded");
  if (self->_remoteTextInputTraits)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "forwardingInputDelegate");
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v46)
      -[_UIKeyboardStateManager updateInputDelegateForRemoteTraitChange:forceSync:](self, "updateInputDelegateForRemoteTraitChange:forceSync:", self->_remoteTextInputTraits, 0);
  }

}

- (void)setLayoutRenderConfig:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[_UIKeyboardStateManager activeLayout](self, "activeLayout");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setRenderConfig:", v4);

}

- (void)addSupplementalLexicon:(id)a3
{
  void *v4;
  void *v5;
  int v6;
  void *v7;
  id v8;

  v8 = a3;
  if (!+[UIKeyboard inputUIOOP](UIKeyboard, "inputUIOOP")
    || +[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
  {
    -[_UIKeyboardStateManager backendController](self, "backendController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addUISupplementalLexicon:", v8);

  }
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "inputSystemClientEnabled");

    if (v6)
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "didAddSupplementalLexicon:", v8);

    }
  }

}

- (void)removeSupplementalLexicon:(id)a3
{
  void *v4;
  void *v5;
  int v6;
  void *v7;
  id v8;

  v8 = a3;
  if (!+[UIKeyboard inputUIOOP](UIKeyboard, "inputUIOOP")
    || +[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
  {
    -[_UIKeyboardStateManager backendController](self, "backendController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeUISupplementalLexicon:", v8);

  }
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "inputSystemClientEnabled");

    if (v6)
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "didRemoveSupplementalLexicon:", v8);

    }
  }

}

- (_UIKeyboardTextSelectionController)textSelectionController
{
  void *v3;
  void *v4;
  _UIKeyboardTextSelectionController *v5;
  _UIKeyboardTextSelectionController *customInputDelegateSelectionController;
  void *v7;
  void *v8;
  int v9;
  __objc2_class *v10;
  _UIKeyboardTextSelectionController *v11;
  _UIKeyboardTextSelectionController *v12;
  _UIKeyboardTextSelectionController *v13;

  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    customInputDelegateSelectionController = self->_customInputDelegateSelectionController;
    if (customInputDelegateSelectionController)
    {
      -[_UIKeyboardTextSelectionController inputDelegate](customInputDelegateSelectionController, "inputDelegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v7 == v4)
        goto LABEL_12;
    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "hasAsyncCapableInputDelegate");

    if (v9)
    {
      v10 = _UIKeyboardAsyncTextSelectionController;
    }
    else
    {
      if (!v4)
      {
        v11 = 0;
        goto LABEL_11;
      }
      v10 = _UIKeyboardTextSelectionController;
    }
    v11 = (_UIKeyboardTextSelectionController *)objc_msgSend([v10 alloc], "initWithInputDelegate:", v4);
LABEL_11:
    v12 = self->_customInputDelegateSelectionController;
    self->_customInputDelegateSelectionController = v11;

LABEL_12:
    v5 = self->_customInputDelegateSelectionController;
    goto LABEL_13;
  }
  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeSelectionController");
  v5 = (_UIKeyboardTextSelectionController *)objc_claimAutoreleasedReturnValue();
LABEL_13:
  v13 = v5;

  return v13;
}

- (BOOL)_delegateRequiresKeyEvents
{
  void *v2;
  int v3;

  if (self->m_delegateRequiresKeyEvents)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "shouldRespectForwardingInputDelegate") ^ 1;

  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

- (id)_sessionIdentifier
{
  return (id)-[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
}

- (id)documentIdentifierForInputDelegate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, _BYTE *);
  void *v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;

  v4 = a3;
  v5 = v4;
  if ((objc_msgSend(v4, "__isKindOfUIResponder") & 1) == 0)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "autofillGroup");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = MEMORY[0x1E0C809B0];
  v21 = 3221225472;
  v22 = __62___UIKeyboardStateManager_documentIdentifierForInputDelegate___block_invoke;
  v23 = &unk_1E16BB100;
  v8 = v5;
  v24 = v8;
  v25 = &v26;
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", &v20);

  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(v4, "_rtiSourceSession", v20, v21, v22, v23),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v9, "uuid"),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        v9,
        !v10))
  {
    if (!*((_BYTE *)v27 + 24))
      goto LABEL_20;
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "autofillGroup");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKey:", CFSTR("UIAutofillUUIDKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
LABEL_20:
      if (!+[UIKeyboard usingEndInputSessionCompletion](UIKeyboard, "usingEndInputSessionCompletion", v20, v21, v22, v23)|| (-[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID"), (v13 = (void *)objc_claimAutoreleasedReturnValue()) == 0)|| (v14 = -[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession"), v13, v14 != v4)|| (-[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID"), (v10 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
      {
        v15 = v4;
        if ((objc_msgSend(v15, "__isKindOfUIResponder") & 1) == 0)
        {

LABEL_14:
          objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_15;
        }
        objc_msgSend(v15, "textInputView");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "keyboardSceneDelegate");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "localAuthenticationObserver");
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v18, "sessionIDForInputDelegate:", v15);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v10)
          goto LABEL_14;
      }
    }
  }
LABEL_15:

  _Block_object_dispose(&v26, 8);
  return v10;
}

- (void)_postInputResponderChangedNotification
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "keyInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v9 = CFSTR("UITextInputResponderCapabilitiesChangedInputResponderKey");
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "keyInputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "postNotificationName:object:userInfo:", CFSTR("UITextInputResponderDidChangeNotification"), 0, v7);

}

- (void)_postInputResponderCapabilitiesChangedNotificationWithOutput:(id)a3 selectionChanged:(BOOL)a4
{
  _BOOL8 v4;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v6;
  id WeakRetained;

  v4 = a4;
  p_presentationDelegate = &self->_presentationDelegate;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "_postInputResponderCapabilitiesChangedNotificationWithOutput:selectionChanged:", v6, v4);

}

- (void)postInputResponderCapabilitiesChangedNotification
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "postInputResponderCapabilitiesChangedNotification");

}

- (id)delegateAsResponder
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateAsResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)inputDelegate
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "textInputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (UIKeyInput)delegate
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "keyInputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (UIKeyInput *)v3;
}

- (id)asyncInputDelegate
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "asyncInputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)webInputDelegate
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "webInputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)asyncCapableInputDelegate
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "asyncCapableInputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (BOOL)hasAdvancedInputDelegate
{
  void *v3;
  BOOL v4;
  void *v5;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 1;
  }
  else
  {
    -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v5 != 0;

  }
  return v4;
}

- (BOOL)hasAsyncCapableInputDelegate
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasAsyncCapableInputDelegate");

  return v3;
}

- (void)_updateDelegateRequiresKeyEventsFromRemoteTextInput
{
  void *v3;
  id v4;

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "documentTraits");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    self->m_delegateRequiresKeyEvents = ((unsigned __int16)objc_msgSend(v3, "delegateConformanceType") >> 8) & 1;

  }
}

- (void)setDelegate:(id)a3
{
  id v4;

  v4 = a3;
  if (-[_UIKeyboardStateManager initializationDone](self, "initializationDone"))
    -[_UIKeyboardStateManager setDelegate:force:](self, "setDelegate:force:", v4, 0);

}

- (void)setDelegate:(id)a3 force:(BOOL)a4
{
  -[_UIKeyboardStateManager setDelegate:force:delayEndInputSession:](self, "setDelegate:force:delayEndInputSession:", a3, a4, 0);
}

- (void)setDidTeardownExistingDelegate:(id)a3
{
  void *v5;
  void *v6;
  id didTeardownExistingDelegate;
  void *v8;
  id aBlock;

  aBlock = a3;
  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("_UIKeyboardStateManager.m"), 3053, CFSTR("didTeardownExistingDelegate callback cannot be set in a non-keyboard process"));

  }
  v5 = aBlock;
  if (self->_didTeardownExistingDelegate != aBlock)
  {
    v6 = _Block_copy(aBlock);
    didTeardownExistingDelegate = self->_didTeardownExistingDelegate;
    self->_didTeardownExistingDelegate = v6;

    v5 = aBlock;
  }

}

- (void)setWillSetupNewDelegate:(id)a3
{
  void *v5;
  void *v6;
  id willSetupNewDelegate;
  void *v8;
  id aBlock;

  aBlock = a3;
  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("_UIKeyboardStateManager.m"), 3061, CFSTR("willSetupNewDelegate callback cannot be set in a non-keyboard process"));

  }
  v5 = aBlock;
  if (self->_willSetupNewDelegate != aBlock)
  {
    v6 = _Block_copy(aBlock);
    willSetupNewDelegate = self->_willSetupNewDelegate;
    self->_willSetupNewDelegate = v6;

    v5 = aBlock;
  }

}

- (void)_notifyDidTeardownExistingDelegate:(id)a3 newDelegate:(id)a4
{
  id v6;
  id v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v6 = a3;
  v7 = a4;
  if (+[UIKeyboard usingEndInputSessionCompletion](UIKeyboard, "usingEndInputSessionCompletion"))
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __74___UIKeyboardStateManager__notifyDidTeardownExistingDelegate_newDelegate___block_invoke;
    v9[3] = &unk_1E16BB128;
    v9[4] = self;
    v10 = v7;
    v11 = v6;
    objc_msgSend(v8, "performSingleTask:", v9);

  }
}

- (void)_notifyWillSetupNewDelegate:(id)a3 existingDelegate:(id)a4
{
  id v6;
  id v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v6 = a3;
  v7 = a4;
  if (+[UIKeyboard usingEndInputSessionCompletion](UIKeyboard, "usingEndInputSessionCompletion"))
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __72___UIKeyboardStateManager__notifyWillSetupNewDelegate_existingDelegate___block_invoke;
    v9[3] = &unk_1E16BB128;
    v9[4] = self;
    v10 = v6;
    v11 = v7;
    objc_msgSend(v8, "performSingleTask:", v9);

  }
}

- (void)setDelegate:(id)a3 force:(BOOL)a4 delayEndInputSession:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  id v8;
  void *v9;
  id v10;
  int m_hardwareKeyboardAttached;
  id WeakRetained;
  int v13;
  id v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  _BYTE v28[24];
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v5 = a5;
  v6 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "delegateRespectingForwardingDelegate:", 0);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  self->_isSettingDelegate = 1;
  self->m_keyboardDelegateStateNeedsRefresh = 1;
  self->m_disableSyncTextChanged = 1;
  self->m_disableAutocapitalization = 0;
  self->m_shouldSuppressSelectionCommands = 0;
  -[_UIKeyboardStateManager updateHardwareKeyboardExclusivityIdentifier](self, "updateHardwareKeyboardExclusivityIdentifier");
  m_hardwareKeyboardAttached = self->m_hardwareKeyboardAttached;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  -[_UIKeyboardStateManager setHardwareKeyboardAttached:](self, "setHardwareKeyboardAttached:", objc_msgSend(WeakRetained, "isHardwareKeyboardAttachedNow"));

  v13 = self->m_hardwareKeyboardAttached;
  -[_UIKeyboardStateManager setInHardwareKeyboardMode:shouldMoveKeyboard:](self, "setInHardwareKeyboardMode:shouldMoveKeyboard:", self->m_hardwareKeyboardAttached, v8 != 0);
  v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v14, "resetIsPhysicallyAttachedHardwareKeyboard");

  if (v10 == v8
    && !v6
    && (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
     || v13 == m_hardwareKeyboardAttached))
  {
    -[_UIKeyboardStateManager _reloadInputViewsForSameDelegate:existingDelegate:force:delayEndInputSession:](self, "_reloadInputViewsForSameDelegate:existingDelegate:force:delayEndInputSession:", v8, v10, 0, v5);
    goto LABEL_26;
  }
  if (os_variant_has_internal_diagnostics())
  {
    _UIKeyboardInputSessionChangeLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      _delegateShortDescr(v8);
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = (void *)v17;
      v19 = "NO";
      if (v6)
        v20 = "YES";
      else
        v20 = "NO";
      *(_DWORD *)v28 = 138413058;
      *(_QWORD *)&v28[4] = v17;
      if (v5)
        v21 = "YES";
      else
        v21 = "NO";
      *(_QWORD *)&v28[14] = v20;
      *(_WORD *)&v28[12] = 2080;
      *(_WORD *)&v28[22] = 2080;
      if (v10 == v8)
        v19 = "YES";
      v29 = v21;
      v30 = 2080;
      v31 = v19;
      _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_DEFAULT, "-setDelegate=%@ force:%s delayEndInputSession:%s (delegateSame=%s)", v28, 0x2Au);

    }
    if (v10)
      goto LABEL_7;
LABEL_20:
    v15 = 0;
    goto LABEL_21;
  }
  if (!v10)
    goto LABEL_20;
LABEL_7:
  -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier", *(_OWORD *)v28, *(_QWORD *)&v28[16]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_21:
  -[_UIKeyboardStateManager _teardownExistingDelegate:forSetDelegate:force:delayEndInputSession:](self, "_teardownExistingDelegate:forSetDelegate:force:delayEndInputSession:", v10, v8, v6, v5);
  -[_UIKeyboardStateManager _notifyDidTeardownExistingDelegate:newDelegate:](self, "_notifyDidTeardownExistingDelegate:newDelegate:", v10, v8);
  -[_UIKeyboardStateManager _setDelegate:existingDelegate:force:delayEndInputSession:](self, "_setDelegate:existingDelegate:force:delayEndInputSession:", v8, v10, v6, v5);
  -[_UIKeyboardStateManager _notifyWillSetupNewDelegate:existingDelegate:](self, "_notifyWillSetupNewDelegate:existingDelegate:", v8, v10);
  -[_UIKeyboardStateManager _setupDelegate:delegateSame:hardwareKeyboardStateChanged:endingInputSessionIdentifier:force:delayEndInputSession:](self, "_setupDelegate:delegateSame:hardwareKeyboardStateChanged:endingInputSessionIdentifier:force:delayEndInputSession:", v8, v10 == v8, v13 != m_hardwareKeyboardAttached, v15, v6, v5);
  -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "threadIdentifier");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    -[_UIKeyboardStateManager smartReplyFeedbackManager](self, "smartReplyFeedbackManager");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "threadIdentifier");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "composeFieldInFocusWithMailOrMsgThreadId:", v26);

  }
  _UIKeyboardInputSessionChangeLog();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v28 = 0;
    _os_log_debug_impl(&dword_185066000, v27, OS_LOG_TYPE_DEBUG, "done with -setDelegate:force:delayEndInputSession:", v28, 2u);
  }

LABEL_26:
}

- (void)_reloadInputViewsForSameDelegate:(id)a3 existingDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6
{
  id v8;
  id v9;
  void *v10;
  char v11;
  int64_t v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  UITextInputTraits *m_defaultTraits;
  void *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  BOOL v22;
  id WeakRetained;
  void *v24;
  BOOL v25;
  id v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  char v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _BOOL8 v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  int v48;
  void *v49;
  void *v50;
  _UNKNOWN **v51;
  void *v52;
  BOOL v53;
  void *v54;
  _BOOL8 v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  _BOOL4 v67;
  TIKeyboardState *m_keyboardState;
  void *v69;
  id v70;
  void *v71;
  void *v72;
  char v73;
  id v74;
  void *v75;
  uint8_t buf[4];
  TIKeyboardState *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  if (!+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    || (+[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient"), v10 = (void *)objc_claimAutoreleasedReturnValue(), v11 = objc_msgSend(v10, "handlingRemoteEvent"), v10, (v11 & 1) == 0))
  {
    -[_UIKeyboardStateManager clearForwardingInputDelegateAndResign:](self, "clearForwardingInputDelegateAndResign:", 1);
  }
  v12 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType");
  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager takeTextInputTraitsFromDelegate](self, "takeTextInputTraitsFromDelegate");
  +[UIKeyboard keyboardBundleIdentifier](UIKeyboard, "keyboardBundleIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isEqual:", CFSTR("com.apple.freeform"));

  if (v15)
    -[_UIKeyboardStateManager updateDelegatePasteSupport](self, "updateDelegatePasteSupport");
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    -[UITextInputTraits setUseAutomaticEndpointing:](self->m_traits, "setUseAutomaticEndpointing:", objc_msgSend(v13, "useAutomaticEndpointing"));
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "delegateRespectingForwardingDelegate:", 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {

  }
  else
  {
    m_defaultTraits = self->m_defaultTraits;

    if (m_defaultTraits)
      goto LABEL_12;
    -[UITextInputTraits setKeyboardType:](self->m_traits, "setKeyboardType:", v12);
    v32 = objc_msgSend(MEMORY[0x1E0DBDD20], "translateToTextInputKeyboardType:", v12);
    -[TIKeyboardState textInputTraits](self->m_keyboardState, "textInputTraits");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setKeyboardType:", v32);
  }

LABEL_12:
  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "updateResultComparedToTraits:", v13);

  v21 = &off_1E167A000;
  if (v9 && !-[_UIKeyboardStateManager forCustomInputView](self, "forCustomInputView"))
  {
    v22 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
    if (v22)
    {
      if (self->m_needsToRecomputeDesirableModes || v20 == 2)
        goto LABEL_38;
    }
    else
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "window");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v24 || self->m_needsToRecomputeDesirableModes || v20 == 2)
      {

        goto LABEL_38;
      }
      v71 = v24;
      v72 = WeakRetained;
    }
    v25 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
    if (!v25)
    {
      v26 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v26, "layout");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "frame");
      v29 = v28;
      v74 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v74, "frame");
      if (v29 != v30)
      {
        v31 = 1;
        goto LABEL_32;
      }
      v69 = v27;
      v70 = v26;
    }
    -[_UIKeyboardStateManager _autofillContext](self, "_autofillContext");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "objectForKey:", CFSTR("_automaticPasswordKeyboard"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v34, "BOOLValue");

    if (v25)
      goto LABEL_33;
    v27 = v69;
    v26 = v70;
LABEL_32:

LABEL_33:
    v21 = &off_1E167A000;
    if (!v22)
    {

    }
    if ((v31 & 1) == 0)
    {
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "textInputMode");
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v36)
        goto LABEL_14;
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "textInputMode");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "primaryLanguage");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "currentPublicInputMode");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "primaryLanguage");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = objc_msgSend(v39, "isEqualToString:", v41);

      v21 = &off_1E167A000;
      if ((v73 & 1) != 0)
        goto LABEL_14;
    }
LABEL_38:
    v42 = -[_UIKeyboardStateManager suppressUpdateLayout](self, "suppressUpdateLayout");
    -[_UIKeyboardStateManager setSuppressUpdateLayout:](self, "setSuppressUpdateLayout:", 1);
    -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:](self, "recomputeActiveInputModesWithExtensions:", 1);
    -[_UIKeyboardStateManager setSuppressUpdateLayout:](self, "setSuppressUpdateLayout:", v42);
    if (self->m_shift)
    {
      v43 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v43, "layout");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v44
        || self->m_shiftLocked
        || -[_UIKeyboardStateManager callLayoutIsShiftKeyBeingHeld](self, "callLayoutIsShiftKeyBeingHeld"))
      {

      }
      else
      {
        v67 = -[_UIKeyboardStateManager callLayoutIsShiftKeyPlaneChooser](self, "callLayoutIsShiftKeyPlaneChooser");

        if (v67)
          -[_UIKeyboardStateManager clearShiftState](self, "clearShiftState");
      }
    }
    v45 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v45, "updateLayout");

    v46 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    LODWORD(v45) = objc_msgSend(v46, "showInputModeIndicator");

    if ((_DWORD)v45)
      -[_UIKeyboardStateManager updateInputModeIndicatorOnSingleKeyOnly:](self, "updateInputModeIndicatorOnSingleKeyOnly:", 0);
    -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend(v47, "isSecureTextEntry");
    if (v48 == objc_msgSend(v13, "isSecureTextEntry"))
    {
      -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "recentInputIdentifier");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "recentInputIdentifier");
      v51 = v21;
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      v53 = v50 == v52;
      v21 = v51;
      if (v53)
        goto LABEL_49;
    }
    else
    {

    }
    -[_UIKeyboardStateManager documentIdentifierForInputDelegate:](self, "documentIdentifierForInputDelegate:", v9);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState setDocumentIdentifier:](self->m_keyboardState, "setDocumentIdentifier:", v54);

    goto LABEL_49;
  }
LABEL_14:
  if (v20 == 1)
    -[_UIKeyboardStateManager updateReturnKey:](self, "updateReturnKey:", 1);
LABEL_49:
  v55 = -[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits") != 0;
  -[TIKeyboardState setAutocorrectionEnabled:](self->m_keyboardState, "setAutocorrectionEnabled:", v55);
  -[_UIKeyboardStateManager setAutocorrectSpellingEnabled:](self, "setAutocorrectSpellingEnabled:", v55);
  objc_msgSend(v21[476], "sharedInputModeController");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "currentInputMode");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "primaryLanguage");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager updateSmartPunctuationOptionsForLocaleIdentifier:](self, "updateSmartPunctuationOptionsForLocaleIdentifier:", v58);

  -[TISmartPunctuationController reset](self->m_smartPunctuationController, "reset");
  -[TIKeyboardState setInlineCompletionEnabled:](self->m_keyboardState, "setInlineCompletionEnabled:", -[_UIKeyboardStateManager isInlineCompletionEnabled](self, "isInlineCompletionEnabled"));
  self->m_disableSyncTextChanged = 0;
  -[_UIKeyboardStateManager setInputManagerFromCurrentInputMode](self, "setInputManagerFromCurrentInputMode");
  if (self->_remoteTextInputPartner && v20)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "documentTraitsChanged");

  }
  if (v8)
  {
    -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
    v60 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v60)
    {
      -[_UIKeyboardStateManager documentIdentifierForInputDelegate:](self, "documentIdentifierForInputDelegate:", v8);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardState setDocumentIdentifier:](self->m_keyboardState, "setDocumentIdentifier:", v61);

    }
    -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
    v62 = (void *)objc_claimAutoreleasedReturnValue();

    if (v62)
    {
      -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "_textInputSessionAnalytics");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "setSessionIdentifier:", v63);

    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      m_keyboardState = self->m_keyboardState;
      *(_DWORD *)buf = 138412290;
      v77 = m_keyboardState;
      _os_log_fault_impl(&dword_185066000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "m_keyboardState {%@} documentIdentifier creation failed", buf, 0xCu);
    }
    if (-[_UIKeyboardStateManager needAutofillLogin](self, "needAutofillLogin") && !self->m_isAutofilling)
      -[_UIKeyboardStateManager generateAutofillCandidateByAddingTask:](self, "generateAutofillCandidateByAddingTask:", 1);
    self->_isSettingDelegate = 0;
    -[_UIKeyboardStateManager _updateDelegateRequiresKeyEventsFromRemoteTextInput](self, "_updateDelegateRequiresKeyEventsFromRemoteTextInput");
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "postNotificationName:object:userInfo:", CFSTR("UITextInputResponderIsReloadedNotification"), 0, 0);

  }
  else
  {
    -[_UIKeyboardStateManager needAutofillLogin](self, "needAutofillLogin");
    self->_isSettingDelegate = 0;
    -[_UIKeyboardStateManager _updateDelegateRequiresKeyEventsFromRemoteTextInput](self, "_updateDelegateRequiresKeyEventsFromRemoteTextInput");
  }

}

- (void)setCurrentCandidateRequest:(id)a3
{
  TICandidateRequestToken *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  TICandidateRequestToken *currentCandidateRequest;

  v4 = (TICandidateRequestToken *)a3;
  if (v4 && self->m_cachedAutofillMode)
  {
    -[_UIKeyboardStateManager delegateForCandidateRequest](self, "delegateForCandidateRequest");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setDelegateForCandidateRequest:](self, "setDelegateForCandidateRequest:", v6);

    }
    v7 = (void *)MEMORY[0x1E0CB3B18];
    -[_UIKeyboardStateManager delegate](self, "delegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "valueWithPointer:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager delegateForCandidateRequest](self, "delegateForCandidateRequest");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, v4);

  }
  currentCandidateRequest = self->_currentCandidateRequest;
  self->_currentCandidateRequest = v4;

}

- (void)_teardownExistingDelegate:(id)a3 forSetDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL4 v7;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  _BOOL8 v18;
  void *v19;
  id WeakRetained;
  void *v21;
  char v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  char v53;
  char v54;
  void (**v55)(id, void *, BOOL);
  int v56;
  void *v57;
  void *v58;
  _BOOL8 v59;
  uint64_t v60;
  void *v61;
  dispatch_time_t v62;
  NSObject *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  void *v71;
  void *v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  char v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  _UIKeyboardStateManager *v83;
  void *v84;
  void *v85;
  void *v86;
  _UIKeyboardStateManager *v87;
  void *v88;
  void *v89;
  void *v90;
  _UIKeyboardStateManager *v91;
  void *v92;
  void *v93;
  void *v94;
  _BOOL4 v95;
  _QWORD aBlock[5];
  _QWORD block[5];
  void (**v98)(id, void *, BOOL);
  _QWORD v99[5];
  uint8_t buf[4];
  void *v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  const char *v105;
  __int16 v106;
  const char *v107;
  uint64_t v108;

  v6 = a6;
  v7 = a5;
  v108 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  _UIKeyboardInputSessionChangeLog();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    _delegateShortDescr(v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    _delegateShortDescr(v11);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)v14;
    v16 = "NO";
    v102 = 2112;
    *(_DWORD *)buf = 138413058;
    if (v7)
      v17 = "YES";
    else
      v17 = "NO";
    v101 = v13;
    v103 = v14;
    if (v6)
      v16 = "YES";
    v104 = 2080;
    v105 = v17;
    v106 = 2080;
    v107 = v16;
    _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_DEFAULT, "-_teardownExistingDelegate:%@ forSetDelegate:%@ force:%s delayEndInputSession:%s", buf, 0x2Au);

  }
  if (!-[_UIKeyboardStateManager forCustomInputView](self, "forCustomInputView")
    && !-[_UIKeyboardStateManager suppressUpdateLayout](self, "suppressUpdateLayout"))
  {
    if (v10)
      v18 = v6;
    else
      v18 = 0;
    +[UIDictationController keyboardWillChangeFromDelegate:toDelegate:shouldPause:](UIDictationController, "keyboardWillChangeFromDelegate:toDelegate:shouldPause:", v10, v11, v18);
  }
  v95 = v6;
  +[UIDictationController activeInstance](UIDictationController, "activeInstance");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setResigningFirstResponder:", 0);

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_opt_respondsToSelector();

  if ((v22 & 1) != 0)
  {
    v23 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v23, "layout");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "dismissGestureKeyboardIntroduction");

  }
  if (!v11)
  {
    v25 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v25, "dismissContinuousPathIntroductionView");

    -[_UIKeyboardStateManager dismissAutoFillMenu](self, "dismissAutoFillMenu");
    -[_UIKeyboardStateManager delegateForCandidateRequest](self, "delegateForCandidateRequest");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "removeAllObjects");

    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "preservingInputViews");

    if ((v28 & 1) == 0)
      self->m_everPresentedPasswordAutofillPanel = 0;
  }
  +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "inputViews");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "inputViewController");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v31, "_compatibilityController");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "keyboardWillChangeFromDelegate:toDelegate:", v10, v11);
  if (v10)
  {
    -[_UIKeyboardStateManager clearForwardingInputDelegateAndResign:](self, "clearForwardingInputDelegateAndResign:", 1);
    if (v11 != v10)
    {
      -[_UIKeyboardStateManager _insertionPointExitedRangeWithSupplementalCandidate](self, "_insertionPointExitedRangeWithSupplementalCandidate");
      v33 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v33, "setCaretBlinks:", 0);

      v34 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v34, "setCaretVisible:", 0);

      v35 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v35, "clearCursorAccessory");

      v36 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v36, "dismissEmojiPopoverIfNecessaryWithCompletion:", 0);

      v37 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v37, "dismissPressAndHoldPopover");

      v38 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v38, "dismissInputModeIndicator");

      v39 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v39, "dismissDictationMenu");

      v40 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v40, "dismissDictationTip");

      v41 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v41, "dismissAutoFillPopover");

      v42 = v10;
      if (objc_msgSend(v42, "__isKindOfUIResponder"))
      {
        objc_msgSend(v42, "textInputView");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "keyboardSceneDelegate");
        v44 = v32;
        v45 = v31;
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "localAuthenticationObserver");
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        v31 = v45;
        v32 = v44;

        -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "inputDelegateWillTeardown:sessionUUID:", v42, v48);

      }
      +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "dictationTipController");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "resetShowModelessTipSignal");

      v51 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v51, "unsetEmojiPopoverToRestoreAfterRotation");

    }
  }
  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = objc_msgSend(v52, "_keepInputSession");

  if (!+[UIKeyboard usingEndInputSessionCompletion](UIKeyboard, "usingEndInputSessionCompletion"))
  {
    v54 = self->_remoteTextInputPartner ? v53 : 1;
    if ((v54 & 1) == 0)
    {
      v60 = MEMORY[0x1E0C809B0];
      v99[0] = MEMORY[0x1E0C809B0];
      v99[1] = 3221225472;
      v99[2] = __95___UIKeyboardStateManager__teardownExistingDelegate_forSetDelegate_force_delayEndInputSession___block_invoke;
      v99[3] = &unk_1E16BB150;
      v99[4] = self;
      v55 = (void (**)(id, void *, BOOL))_Block_copy(v99);
      if (v10)
      {
        if (v11 || !v95)
        {
          -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v55[2](v55, v67, v11 == 0);

        }
        else
        {
          -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager setResigningRTISessionIdentifier:](self, "setResigningRTISessionIdentifier:", v61);

          v62 = dispatch_time(0, 35000000);
          block[0] = v60;
          block[1] = 3221225472;
          block[2] = __95___UIKeyboardStateManager__teardownExistingDelegate_forSetDelegate_force_delayEndInputSession___block_invoke_2;
          block[3] = &unk_1E16B1D18;
          block[4] = self;
          v55 = v55;
          v98 = v55;
          dispatch_after(v62, MEMORY[0x1E0C80D38], block);

        }
      }
      else
      {
        -[_UIKeyboardStateManager resigningRTISessionIdentifier](self, "resigningRTISessionIdentifier");
        v65 = (void *)objc_claimAutoreleasedReturnValue();

        if (v65)
        {
          -[_UIKeyboardStateManager resigningRTISessionIdentifier](self, "resigningRTISessionIdentifier");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v55[2](v55, v66, v11 == 0);

          -[_UIKeyboardStateManager setResigningRTISessionIdentifier:](self, "setResigningRTISessionIdentifier:", 0);
        }
      }
      goto LABEL_52;
    }
  }
  if (+[UIKeyboard usingEndInputSessionCompletion](UIKeyboard, "usingEndInputSessionCompletion")
    && self->m_wasDelegateSetupWithRTIClient)
  {
    v93 = v31;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __95___UIKeyboardStateManager__teardownExistingDelegate_forSetDelegate_force_delayEndInputSession___block_invoke_3;
    aBlock[3] = &unk_1E16BB150;
    aBlock[4] = self;
    v55 = (void (**)(id, void *, BOOL))_Block_copy(aBlock);
    v56 = 0;
    if (v10 && !v11)
    {
      +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = objc_msgSend(v57, "_keepInputSession");

    }
    -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier", v93);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10 || (v56 & 1) != 0)
    {
      if (v56)
      {
        _UIKeyboardInputSessionChangeLog();
        v63 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          _delegateShortDescr(v10);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v101 = v64;
          v102 = 2112;
          v103 = (uint64_t)v58;
          _os_log_impl(&dword_185066000, v63, OS_LOG_TYPE_DEFAULT, "Skipping end input session for existingDelegate: %@ (sessionID=%@)", buf, 0x16u);

        }
        -[_UIKeyboardStateManager setSkippedEndInputSession:](self, "setSkippedEndInputSession:", v10);
        -[_UIKeyboardStateManager setSkippedEndInputSessionID:](self, "setSkippedEndInputSessionID:", v58);
      }
    }
    else
    {
      if (v11)
        v59 = 0;
      else
        v59 = !v95;
      v55[2](v55, v58, v59);
    }

    v31 = v94;
LABEL_52:

  }
  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v68 = (void *)objc_claimAutoreleasedReturnValue();

  if (v68)
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "setSessionDelegate:", 0);

  }
  if (v11 != v10)
  {
    if (v11)
    {
      -[_UIKeyboardStateManager documentIdentifierForInputDelegate:](self, "documentIdentifierForInputDelegate:", v11);
      v70 = (id)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardState setDocumentIdentifier:](self->m_keyboardState, "setDocumentIdentifier:", v70);
    }
    else
    {
      -[TIKeyboardState setDocumentIdentifier:](self->m_keyboardState, "setDocumentIdentifier:", 0);
      if (!-[UITextInputTraits isDevicePasscodeEntry](self->m_traits, "isDevicePasscodeEntry"))
      {
LABEL_61:
        -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "clearSecureCandidateHashes");

        goto LABEL_62;
      }
      v70 = objc_alloc_init(MEMORY[0x1E0DBDB78]);
      -[TIKeyboardState setDocumentState:](self->m_keyboardState, "setDocumentState:", v70);
    }

    goto LABEL_61;
  }
LABEL_62:
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = objc_msgSend(v72, "isMainThreadExecutingTask");
  if (v10 && !v73)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "asyncCapableInputDelegate");
    v75 = (void *)objc_claimAutoreleasedReturnValue();

    if (v75)
      goto LABEL_67;
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "waitUntilAllTasksAreFinished");
  }

LABEL_67:
  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = objc_msgSend(v76, "_hasPostPinningReloadState");

  if ((v77 & 1) == 0)
  {
    v78 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v78, "layout");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "acceptRecentInputIfNecessary");

    if (-[_UIKeyboardStateManager changeCount](self, "changeCount"))
    {
      -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](self, "acceptAutocorrectionWithCompletionHandler:", 0);
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "unmarkText");

      self->m_textInputChangesIgnored = 0;
    }
    if (v11 != v10)
    {
      -[_UIKeyboardStateManager setCurrentCandidateRequest:](self, "setCurrentCandidateRequest:", 0);
      -[_UIKeyboardStateManager _cancelPendingSupplementalCandidateInsertion](self, "_cancelPendingSupplementalCandidateInsertion");
      if (self->m_shouldClearTextSuggestions)
        -[_UIKeyboardStateManager setSuggestions:](self, "setSuggestions:", 0);
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "setAutocorrectionList:", 0);

      -[_UIKeyboardStateManager clearChangeTimeAndCount](self, "clearChangeTimeAndCount");
      -[_UIKeyboardStateManager removeAutocorrectPromptAndCandidateList](self, "removeAutocorrectPromptAndCandidateList");
    }
  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v82, "inputDelegate");
  v83 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

  if (v83 == self)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "setInputDelegate:", 0);

  }
  -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
  v85 = (void *)objc_claimAutoreleasedReturnValue();

  if (v85)
  {
    -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v86, "asyncSystemInputDelegate");
    v87 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

    if (v87 == self)
    {
      -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "setAsyncSystemInputDelegate:", 0);

    }
  }
  -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
  v89 = (void *)objc_claimAutoreleasedReturnValue();

  if (v89)
  {
    -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "asyncInputDelegate");
    v91 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

    if (v91 == self)
    {
      -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v92, "setAsyncInputDelegate:", 0);

    }
  }

}

- (void)_setDelegate:(id)a3 existingDelegate:(id)a4 force:(BOOL)a5 delayEndInputSession:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL4 v7;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  id WeakRetained;
  void *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v6 = a6;
  v7 = a5;
  v28 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  _UIKeyboardInputSessionChangeLog();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    _delegateShortDescr(v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    _delegateShortDescr(v11);
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)v16;
    v18 = "NO";
    v22 = 2112;
    v20 = 138413058;
    if (v7)
      v19 = "YES";
    else
      v19 = "NO";
    v21 = v15;
    v23 = v16;
    v24 = 2080;
    if (v6)
      v18 = "YES";
    v25 = v19;
    v26 = 2080;
    v27 = v18;
    _os_log_debug_impl(&dword_185066000, v12, OS_LOG_TYPE_DEBUG, "-_setDelegate:%@ existingDelegate:%@ force:%s delayEndInputSession:%s", (uint8_t *)&v20, 0x2Au);

  }
  self->m_editingTraitsMarkedDirty = 1;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setDelegate:", v10);

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateDictationButtonForDelegate:", v10);

  if (!-[_UIKeyboardStateManager forCustomInputView](self, "forCustomInputView"))
    -[_UIKeyboardStateManager _postInputResponderChangedNotification](self, "_postInputResponderChangedNotification");

}

- (void)_setupDelegate:(id)a3 delegateSame:(BOOL)a4 hardwareKeyboardStateChanged:(BOOL)a5 endingInputSessionIdentifier:(id)a6 force:(BOOL)a7 delayEndInputSession:(BOOL)a8
{
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id WeakRetained;
  void *v29;
  void *v30;
  int64_t v31;
  UITextInputTraits *remoteTextInputTraits;
  _BOOL4 v33;
  int v34;
  void *v35;
  void *v36;
  _BOOL4 v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  BOOL v42;
  _BOOL8 v43;
  void *v44;
  void *v45;
  UITextInputTraits *m_defaultTraits;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  char v51;
  void *v52;
  int64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  BOOL v61;
  void *v62;
  int v63;
  void *v64;
  void *v65;
  _BOOL8 v66;
  int HasMultipleActiveLinguisticNonExtensionInputModes;
  void *v68;
  void *v69;
  void *v70;
  _BOOL4 restoresToEmojiInputMode;
  void *v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  char v79;
  id v80;
  int v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  char v86;
  _BOOL4 v87;
  void *v88;
  _UNKNOWN **v89;
  id v90;
  void *v91;
  uint64_t v92;
  void *v93;
  id v94;
  void *v95;
  void *v96;
  void *v97;
  int v98;
  id v99;
  const char *v100;
  const char *v101;
  const char *v102;
  const char *v103;
  void *v104;
  void *v105;
  void *v106;
  id v107;
  int v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  int v113;
  void *v114;
  char v115;
  void *v116;
  void *v117;
  void *v118;
  char v119;
  void *v120;
  int v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *m_keyboardWindowSnapshot;
  void *v139;
  id v140;
  id v141;
  NSObject *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  NSObject *p_super;
  BOOL v152;
  id v153;
  void *v154;
  char v155;
  NSObject *v156;
  void *v157;
  void *v158;
  NSObject *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  id v164;
  void *v165;
  int v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  id v174;
  void *v175;
  void *v176;
  int v177;
  void *v178;
  char *v179;
  NSObject *v180;
  _BOOL4 v181;
  id v182;
  void *v183;
  _QWORD v184[5];
  _QWORD v185[5];
  id v186;
  uint8_t buf[4];
  id v188;
  __int16 v189;
  const char *v190;
  __int16 v191;
  const char *v192;
  __int16 v193;
  id v194;
  __int16 v195;
  const char *v196;
  __int16 v197;
  const char *v198;
  uint64_t v199;

  v8 = a8;
  v181 = a7;
  v10 = a5;
  v11 = a4;
  v199 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a6;
  _UIKeyboardInputSessionChangeLog();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    _delegateShortDescr(v13);
    v99 = (id)objc_claimAutoreleasedReturnValue();
    v100 = "NO";
    *(_DWORD *)buf = 138413570;
    v188 = v99;
    if (v11)
      v101 = "YES";
    else
      v101 = "NO";
    v189 = 2080;
    v190 = v101;
    if (v10)
      v102 = "YES";
    else
      v102 = "NO";
    v191 = 2080;
    if (v181)
      v103 = "YES";
    else
      v103 = "NO";
    v192 = v102;
    v193 = 2112;
    if (v8)
      v100 = "YES";
    v194 = v14;
    v195 = 2080;
    v196 = v103;
    v197 = 2080;
    v198 = v100;
    _os_log_debug_impl(&dword_185066000, v15, OS_LOG_TYPE_DEBUG, "-_setupDelegate:%@ delegateSame:%s hardwareKeyboardStateChanged:%s endingInputSessionIdentifier:%@ force:%s delayEndInputSession:%s", buf, 0x3Eu);

  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "inputDelegate");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v18)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setInputDelegate:", self);

    }
  }
  -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "asyncSystemInputDelegate");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v22)
    {
      -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setAsyncSystemInputDelegate:", self);

    }
  }
  -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "asyncInputDelegate");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v26)
    {
      -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setAsyncInputDelegate:", self);

    }
  }
  self->m_textInputChangingCount = 0;
  self->m_textInputChangingDirection = 0;
  *(_WORD *)&self->m_textInputChangesIgnored = 0;
  self->m_wasDelegateSetupWithRTIClient = -[_UIKeyboardStateManager isRTIClient](self, "isRTIClient");
  -[_UIKeyboardStateManager deactivateLayout](self, "deactivateLayout");
  -[_UIKeyboardStateManager stopAutoDelete](self, "stopAutoDelete");
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
    -[_UIKeyboardStateManager clearShiftState](self, "clearShiftState");
  -[_UIKeyboardStateManager changedDelegate](self, "changedDelegate");
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
    -[_UIKeyboardStateManager callChangedDelegate](self, "callChangedDelegate");
  -[_UIKeyboardStateManager setChangedDelegate:](self, "setChangedDelegate:", 0);
  -[_UIKeyboardStateManager clearTransientState](self, "clearTransientState");
  *(_WORD *)&self->m_needsPasteSupportUpdate = 1;
  -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", 0);
  v31 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType");
  remoteTextInputTraits = self->_remoteTextInputTraits;
  self->_remoteTextInputTraits = 0;

  v33 = -[_UIKeyboardStateManager floatingForced](self, "floatingForced");
  -[_UIKeyboardStateManager takeTextInputTraitsFromDelegate](self, "takeTextInputTraitsFromDelegate");
  v182 = v14;
  if (v33)
    v34 = !-[_UIKeyboardStateManager floatingForced](self, "floatingForced");
  else
    v34 = 0;
  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = -[_UIKeyboardStateManager floatingForced](self, "floatingForced");
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "setSessionDelegate:", v36);
    objc_msgSend(v36, "applyRemoteDocumentTraitsIfNecessary:force:", v38, 0);
    objc_msgSend(v36, "applyRemoteDocumentStateIfNecessary:force:", v38, 0);
    v34 = 0;
    if (v37)
      v34 = !-[_UIKeyboardStateManager floatingForced](self, "floatingForced");

  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "delegateRespectingForwardingDelegate:", 0);
  v40 = objc_claimAutoreleasedReturnValue();
  if (v40)
  {
    v41 = (void *)v40;
    v42 = -[_UIKeyboardStateManager forCustomInputView](self, "forCustomInputView");

    if (!v42)
      -[_UIKeyboardStateManager setReturnKeyEnabled:](self, "setReturnKeyEnabled:", 1);
  }
  else
  {

  }
  self->m_autocapitalizationPreference = -[_UIKeyboardStateManager autocapitalizationPreference](self, "autocapitalizationPreference");
  -[_UIKeyboardStateManager updateInputManagerAutocapitalizationType](self, "updateInputManagerAutocapitalizationType");
  v43 = -[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits") != 0;
  -[TIKeyboardState setAutocorrectionEnabled:](self->m_keyboardState, "setAutocorrectionEnabled:", v43);
  -[_UIKeyboardStateManager setAutocorrectSpellingEnabled:](self, "setAutocorrectSpellingEnabled:", v43);
  -[TIKeyboardState setInlineCompletionEnabled:](self->m_keyboardState, "setInlineCompletionEnabled:", -[_UIKeyboardStateManager isInlineCompletionEnabled](self, "isInlineCompletionEnabled"));
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "delegateRespectingForwardingDelegate:", 0);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (v45)
  {

LABEL_28:
    goto LABEL_30;
  }
  m_defaultTraits = self->m_defaultTraits;

  if (!m_defaultTraits)
  {
    -[UITextInputTraits setKeyboardType:](self->m_traits, "setKeyboardType:", v31);
    v73 = objc_msgSend(MEMORY[0x1E0DBDD20], "translateToTextInputKeyboardType:", v31);
    -[TIKeyboardState textInputTraits](self->m_keyboardState, "textInputTraits");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "setKeyboardType:", v73);
    goto LABEL_28;
  }
LABEL_30:
  if (!v11)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "currentInputMode");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "primaryLanguage");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager updateSmartPunctuationOptionsForLocaleIdentifier:](self, "updateSmartPunctuationOptionsForLocaleIdentifier:", v49);

    -[TISmartPunctuationController reset](self->m_smartPunctuationController, "reset");
  }
  if (v13)
  {
    if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      +[_UIRemoteKeyboards sharedRemoteKeyboards](_UIRemoteKeyboards, "sharedRemoteKeyboards");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_msgSend(v50, "snapshotting");

      if ((v51 & 1) == 0)
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = -[_UIKeyboardStateManager needAutofillCandidate:](self, "needAutofillCandidate:", v52);
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "setDelegateNeedsAutofillMode:", v53);

        -[TIKeyboardState setAutofillMode:](self->m_keyboardState, "setAutofillMode:", -[_UIKeyboardStateManager needAutofill](self, "needAutofill"));
        self->m_cachedAutofillMode = -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode");
        -[_UIKeyboardStateManager displayAutoFillPopoverIfAutoFillModeDetected](self, "displayAutoFillPopoverIfAutoFillModeDetected");
      }
    }
  }
  v55 = -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry") ^ 1;
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v183 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "keyInputDelegate");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v57 || -[_UIKeyboardStateManager forCustomInputView](self, "forCustomInputView"))
  {

    goto LABEL_39;
  }
  objc_msgSend(v183, "inputModeContextIdentifier");
  v68 = (void *)objc_claimAutoreleasedReturnValue();

  if (v68)
  {
    -[_UIKeyboardStateManager desirableInputModesWithExtensions:](self, "desirableInputModesWithExtensions:", v55);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v183, "currentInputMode");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v69, "containsObject:", v70))
    {
      restoresToEmojiInputMode = self->_restoresToEmojiInputMode;

      if (!restoresToEmojiInputMode)
      {
        objc_msgSend(v183, "identifiersFromInputModes:", v69);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        UIKeyboardSetActiveInputModes(v72);

LABEL_57:
        goto LABEL_62;
      }
    }
    else
    {

    }
    -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:](self, "recomputeActiveInputModesWithExtensions:", -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry") ^ 1);
    goto LABEL_57;
  }
LABEL_39:
  if (!v11)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "delegateRespectingForwardingDelegate:", 0);
    v59 = objc_claimAutoreleasedReturnValue();
    if (v59)
    {
      v60 = (void *)v59;
      v61 = -[_UIKeyboardStateManager forCustomInputView](self, "forCustomInputView");

      if (!v61)
      {
        objc_msgSend(v183, "currentInputMode");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v63 = objc_msgSend(v62, "isEmojiInputMode");

        if (v63 && !-[UITextInputTraits acceptsInitialEmojiKeyboard](self->m_traits, "acceptsInitialEmojiKeyboard"))
        {
          objc_msgSend(v183, "currentInputModeInPreference");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager desirableInputModesWithExtensions:](self, "desirableInputModesWithExtensions:", v55);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v65, "containsObject:", v64))
            -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", v64, 0);

        }
        v66 = -[_UIKeyboardStateManager suppressUpdateLayout](self, "suppressUpdateLayout");
        if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
          HasMultipleActiveLinguisticNonExtensionInputModes = UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes();
        else
          HasMultipleActiveLinguisticNonExtensionInputModes = 0;
        -[_UIKeyboardStateManager setSuppressUpdateLayout:](self, "setSuppressUpdateLayout:", 1);
        -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:](self, "recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:", -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry") ^ 1, -[UITextInputTraits acceptsInitialEmojiKeyboard](self->m_traits, "acceptsInitialEmojiKeyboard"));
        -[_UIKeyboardStateManager setSuppressUpdateLayout:](self, "setSuppressUpdateLayout:", v66);
        if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1
          && HasMultipleActiveLinguisticNonExtensionInputModes != UIKeyboardHasMultipleActiveLinguisticNonExtensionInputModes())
        {
          -[_UIKeyboardStateManager updateInputAssistantButtonItems](self, "updateInputAssistantButtonItems");
        }
      }
    }
    else
    {

    }
  }
LABEL_62:
  v74 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v74, "layout");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "setIgnoringKeyplaneChange:", 1);

  -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
  v76 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v76, "layout");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v77, "setIgnoringKeyplaneChange:", 0);

  self->m_predictionType = 0;
  if (v34)
  {
    v78 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v79 = objc_msgSend((id)objc_opt_class(), "isFloating");

    if ((v79 & 1) == 0)
    {
      +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "reloadPlacement");
      goto LABEL_72;
    }
  }
  if (-[_UIKeyboardStateManager isMinimized](self, "isMinimized"))
  {
    v80 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v81 = objc_msgSend(v80, "_shouldSuppressSoftwareKeyboard");

    if (v81)
    {
      v82 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v82, "setUpdateLayoutOnShowKeyboard:", 1);
LABEL_72:
      v87 = 0;
      v88 = v182;
LABEL_73:

      goto LABEL_74;
    }
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v82, "delegateRespectingForwardingDelegate:", 0);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v83 && !v181)
    goto LABEL_72;
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "currentInputMode");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = objc_msgSend(v85, "isExtensionInputMode");

  if ((v86 & 1) != 0)
  {
    v87 = 0;
    v88 = v182;
LABEL_74:
    v89 = &off_1E167A000;
    goto LABEL_75;
  }
  v87 = 1;
  v88 = v182;
  v89 = &off_1E167A000;
  if (self->m_traitsForPreviousDelegate && !v181)
  {
    -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = objc_msgSend(v82, "updateResultComparedToTraits:", self->m_traitsForPreviousDelegate) == 2;
    goto LABEL_73;
  }
LABEL_75:
  if (-[_UIKeyboardStateManager forCustomInputView](self, "forCustomInputView") || !v87 || v10)
  {
    -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
  }
  else
  {
    v90 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v90, "updateLayout");

    if (self->m_hardwareKeyboardAttached)
      -[_UIKeyboardStateManager callLayoutUpdateAllLocalizedKeys](self, "callLayoutUpdateAllLocalizedKeys");
    else
      -[_UIKeyboardStateManager callLayoutUpdateLocalizedKeys](self, "callLayoutUpdateLocalizedKeys");
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v91, "delegateRespectingForwardingDelegate:", 0);
  v92 = objc_claimAutoreleasedReturnValue();
  if (v92)
  {
    v93 = (void *)v92;
LABEL_88:

    goto LABEL_89;
  }
  if (!-[TIKeyboardState hardwareKeyboardMode](self->m_keyboardState, "hardwareKeyboardMode")
    || !-[_UIKeyboardStateManager automaticMinimizationEnabled](self, "automaticMinimizationEnabled")
    || -[_UIKeyboardStateManager isMinimized](self, "isMinimized"))
  {
    v93 = 0;
    goto LABEL_88;
  }
  UIKeyboardGetCurrentInputMode();
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  TIInputModeGetNormalizedIdentifier();
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  v177 = objc_msgSend(CFSTR("emoji"), "isEqualToString:", v176);

  if (v177)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "nextInputModeInPreferenceListForTraits:", self->m_traits);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", v93, 0);
    goto LABEL_88;
  }
LABEL_89:
  self->m_delegateRequiresKeyEvents = ((unsigned __int16)-[_UIKeyboardStateManager delegateConformanceType](self, "delegateConformanceType") >> 8) & 1;
  -[_UIKeyboardStateManager _updateDelegateRequiresKeyEventsFromRemoteTextInput](self, "_updateDelegateRequiresKeyEventsFromRemoteTextInput");
  v94 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v94, "_updateExternalDeviceInputSetting");

  if (!v11)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "delegateRespectingForwardingDelegate:", 0);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = v96;
    if (v96 && self->m_hardwareKeyboardAttached)
    {
      v98 = -[TIKeyboardState hardwareKeyboardMode](self->m_keyboardState, "hardwareKeyboardMode");

      if (v98)
      {
        if (-[_UIKeyboardStateManager isCapsLockASCIIToggle](self, "isCapsLockASCIIToggle"))
          -[_UIKeyboardStateManager removeCapsLockDelayOverride](self, "removeCapsLockDelayOverride");
        else
          -[_UIKeyboardStateManager adjustCapsLockDelayOverride](self, "adjustCapsLockDelayOverride");
        -[_UIKeyboardStateManager setCapsLockIfNeeded](self, "setCapsLockIfNeeded");
      }
    }
    else
    {

    }
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "delegateRespectingForwardingDelegate:", 0);
  v105 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v105)
  {
    UIKeyboardGetCurrentInputMode();
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v108 = objc_msgSend((id)objc_opt_class(), "isSplit");

    if (v108)
    {
      TIStatisticGetKeyForInputMode();
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      TIStatisticScalarSetBoolean();

      TIStatisticGetKeyForInputMode();
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      v111 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend((id)objc_opt_class(), "persistentOffset");
      TIStatisticDistributionPushValue();

    }
    else
    {
      +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      v113 = objc_msgSend(v112, "isUndocked");

      if (!v113)
      {
LABEL_119:

        goto LABEL_120;
      }
      TIStatisticGetKeyForInputMode();
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      TIStatisticScalarSetBoolean();
    }

    goto LABEL_119;
  }
LABEL_120:
  -[_UIKeyboardStateManager deferredDidSetDelegateAction](self, "deferredDidSetDelegateAction");
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  v115 = objc_msgSend(v114, "isValid");

  if ((v115 & 1) == 0)
  {
    +[_UIActionWhenIdle actionWhenIdleWithTarget:selector:object:](_UIActionWhenIdle, "actionWhenIdleWithTarget:selector:object:", self, sel_didSetDelegate, 0);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setDeferredDidSetDelegateAction:](self, "setDeferredDidSetDelegateAction:", v116);

  }
  self->m_disableSyncTextChanged = 0;
  self->m_ignoreSelectionChange = 0;
  sharedInputManagerMux();
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v117, "systemInputManager");
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  v119 = objc_msgSend(v118, "isMemberOfClass:", objc_opt_class());

  if (v13 || (v119 & 1) == 0)
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    v121 = objc_msgSend(v120, "isMainThreadExecutingTask");

    if (v121)
    {
      -[_UIKeyboardStateManager setInputManagerFromCurrentInputMode](self, "setInputManagerFromCurrentInputMode");
      -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");
      if (!v13)
        goto LABEL_131;
    }
    else
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      v185[0] = MEMORY[0x1E0C809B0];
      v185[1] = 3221225472;
      v185[2] = __140___UIKeyboardStateManager__setupDelegate_delegateSame_hardwareKeyboardStateChanged_endingInputSessionIdentifier_force_delayEndInputSession___block_invoke;
      v185[3] = &unk_1E16BB0D8;
      v185[4] = self;
      v186 = v13;
      objc_msgSend(v122, "addTask:", v185);

      if (!v13)
        goto LABEL_131;
    }
    -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
    v123 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v123)
    {
      -[_UIKeyboardStateManager documentIdentifierForInputDelegate:](self, "documentIdentifierForInputDelegate:", v13);
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardState setDocumentIdentifier:](self->m_keyboardState, "setDocumentIdentifier:", v124);

    }
    -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v126, "_textInputSessionAnalytics");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v127, "setSessionIdentifier:", v125);

  }
LABEL_131:
  if (-[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
  {
    if (objc_msgSend(v89[429], "usesInputSystemUIForAutoFillOnly"))
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v128 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v128, "rtiDocumentTraits");
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      v130 = objc_msgSend(v129, "autofillMode");

      if (v130)
      {
        +[_UIRemoteKeyboards sharedRemoteKeyboards](_UIRemoteKeyboards, "sharedRemoteKeyboards");
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v131, "assertNeedsAutofillUI");

      }
    }
  }
  if ((objc_msgSend(v89[429], "usingEndInputSessionCompletion") & 1) == 0)
  {
    if (-[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v132, "delegateRespectingForwardingDelegate:", 0);
      v133 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        if (v133)
        {
          if (-[_UIKeyboardStateManager isOutOfProcess](self, "isOutOfProcess"))
          {
            -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
            v134 = (void *)objc_claimAutoreleasedReturnValue();
            -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
            v135 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v134, "beginAllowingRemoteTextInput:", v135);

          }
          -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v136, "beginInputSessionWithIdentifier:", v137);

          m_keyboardWindowSnapshot = self->m_keyboardWindowSnapshot;
          self->m_keyboardWindowSnapshot = 0;
LABEL_175:

          goto LABEL_176;
        }
      }
    }
  }
  if (objc_msgSend(v89[429], "usingEndInputSessionCompletion")
    && -[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
  {
    v139 = -[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession");
    v140 = -[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession");
    v141 = v140;
    if (v13 && v139 && v140 != v13)
    {
      _UIKeyboardInputSessionChangeLog();
      v142 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v142, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v142, OS_LOG_TYPE_FAULT, "New delegate does not match the delegate for the skipped end input session.", buf, 2u);
      }

      if (os_variant_has_internal_diagnostics())
      {
        _UIKeyboardExtendedLog();
        v180 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_185066000, v180, OS_LOG_TYPE_DEFAULT, "End the session unceremoniously, detected skippedEndInputSession", buf, 2u);
        }

      }
      -[_UIKeyboardStateManager remoteTextInputPartnerPrivate](self, "remoteTextInputPartnerPrivate");
      v143 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID");
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v143, "endInputSessionWithIdentifier:shouldResign:waitForReply:", v144, 1, 0);

      -[_UIKeyboardStateManager remoteTextInputPartnerPrivate](self, "remoteTextInputPartnerPrivate");
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID");
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v145, "endAllowingRemoteTextInput:", v146);

      -[_UIKeyboardStateManager setSkippedEndInputSession:](self, "setSkippedEndInputSession:", 0);
      -[_UIKeyboardStateManager setSkippedEndInputSessionID:](self, "setSkippedEndInputSessionID:", 0);
      v89 = &off_1E167A000;
    }
    if (!((v13 == 0) | (objc_msgSend(v89[429], "usesInputSystemUI") ^ 1) & 1) && v139)
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v147, "forwardApplicationOperation:object:", sel_verifyPlacement, MEMORY[0x1E0C9AA70]);

      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v148, "documentStateChanged");

    }
    -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
    m_keyboardWindowSnapshot = (void *)objc_claimAutoreleasedReturnValue();
    if (!v13 || v141 == v13)
    {
      v152 = v141 != v13 || v13 == 0;
      v88 = v182;
      if (v152)
        goto LABEL_164;
      _UIKeyboardInputSessionChangeLog();
      p_super = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEFAULT))
      {
        _delegateShortDescr(v13);
        v153 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v188 = v153;
        _os_log_impl(&dword_185066000, p_super, OS_LOG_TYPE_DEFAULT, "Skipping begin session because end session was previously skipped for: %@", buf, 0xCu);

      }
    }
    else
    {
      -[_UIKeyboardStateManager updateDelegatePasteSupport](self, "updateDelegatePasteSupport");
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v149 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v149, "beginAllowingRemoteTextInput:", m_keyboardWindowSnapshot);

      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v150, "beginInputSessionWithIdentifier:", m_keyboardWindowSnapshot);

      p_super = &self->m_keyboardWindowSnapshot->super.super;
      self->m_keyboardWindowSnapshot = 0;
      v88 = v182;
    }

LABEL_164:
    if (v88)
    {
      -[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID");
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      v155 = objc_msgSend(v154, "isEqual:", v88);

      if ((v155 & 1) == 0)
      {
        _UIKeyboardInputSessionChangeLog();
        v156 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v188 = v88;
          _os_log_debug_impl(&dword_185066000, v156, OS_LOG_TYPE_DEBUG, "Stop allowing RTI for ending input session with ID: %@", buf, 0xCu);
        }

        -[_UIKeyboardStateManager remoteTextInputPartnerPrivate](self, "remoteTextInputPartnerPrivate");
        v157 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v157, "endAllowingRemoteTextInput:", v88);

      }
    }
    if (v13)
    {
      if (-[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession")
        || (-[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID"),
            v158 = (void *)objc_claimAutoreleasedReturnValue(),
            v158,
            v158))
      {
        _UIKeyboardInputSessionChangeLog();
        v159 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
        {
          v178 = -[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession");
          -[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID");
          v179 = (char *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218242;
          v188 = v178;
          v189 = 2112;
          v190 = v179;
          _os_log_debug_impl(&dword_185066000, v159, OS_LOG_TYPE_DEBUG, "nilling skippedEndInputSession properties (was %p, sessionID=%@)", buf, 0x16u);

        }
        -[_UIKeyboardStateManager setSkippedEndInputSession:](self, "setSkippedEndInputSession:", 0);
        -[_UIKeyboardStateManager setSkippedEndInputSessionID:](self, "setSkippedEndInputSessionID:", 0);
      }
    }
    goto LABEL_175;
  }
LABEL_176:
  if (v13 && self->m_cachedAutofillMode)
  {
    if (!self->m_isAutofilling)
    {
      +[_UIKeyboardUsageTracking appAutofillDetectedIncrement](_UIKeyboardUsageTracking, "appAutofillDetectedIncrement");
      -[_UIKeyboardStateManager generateAutofillCandidateByAddingTask:](self, "generateAutofillCandidateByAddingTask:", 1);
    }
  }
  else if (!self->m_isAutofilling)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v160, "delegateRespectingForwardingDelegate:", 0);
    v161 = (void *)objc_claimAutoreleasedReturnValue();

    if (v161)
    {
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v162 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v163 = v162;
      else
        v163 = 0;
      v164 = v163;
      objc_msgSend(v164, "_scroller");
      v165 = (void *)objc_claimAutoreleasedReturnValue();
      v166 = objc_msgSend(v165, "_isAncestorOfFirstResponder");

      if (v166)
      {
        -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
        v167 = (void *)objc_claimAutoreleasedReturnValue();
        v184[0] = MEMORY[0x1E0C809B0];
        v184[1] = 3221225472;
        v184[2] = __140___UIKeyboardStateManager__setupDelegate_delegateSame_hardwareKeyboardStateChanged_endingInputSessionIdentifier_force_delayEndInputSession___block_invoke_461;
        v184[3] = &unk_1E16BAF98;
        v184[4] = self;
        objc_msgSend(v167, "addTask:", v184);

      }
    }
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v168, "delegateRespectingForwardingDelegate:", 0);
  v169 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v169)
  {
    +[UIInputSwitcher activeInstance](UIInputSwitcher, "activeInstance");
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v170, "hideSwitcherIfNeeded");
    +[UIKeyboardMediaController sharedKeyboardMediaController](UIKeyboardMediaController, "sharedKeyboardMediaController");
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v171, "releaseRecentlyUsedMediaViewIfNeeded");

    +[UIKeyboardMediaController sharedKeyboardMediaController](UIKeyboardMediaController, "sharedKeyboardMediaController");
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v172, "dismissCardIfNeeded");

  }
  +[_UIKeyboardUsageTracking showLowercaseKeyplanePreference:](_UIKeyboardUsageTracking, "showLowercaseKeyplanePreference:", +[UIKeyboardLayout _showSmallDisplayKeyplane](UIKeyboardLayout, "_showSmallDisplayKeyplane"));
  if (v13)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v173 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v173, "postNotificationName:object:userInfo:", CFSTR("UITextInputResponderIsReloadedNotification"), 0, 0);

  }
  self->_isSettingDelegate = 0;
  v174 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v174, "unsetPolicyDelegateResult");

}

- (void)didSetDelegate
{
  void *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD v18[5];

  -[_UIKeyboardStateManager deferredDidSetDelegateAction](self, "deferredDidSetDelegateAction");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "invalidate");

  -[_UIKeyboardStateManager setDeferredDidSetDelegateAction:](self, "setDeferredDidSetDelegateAction:", 0);
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "_updateSoundPreheating");

  -[_UIKeyboardStateManager releaseInputManagerIfInactive](self, "releaseInputManagerIfInactive");
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "textInputView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (_UIViewIsAnimating(v6))
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __41___UIKeyboardStateManager_didSetDelegate__block_invoke;
    v18[3] = &unk_1E16B1B28;
    v18[4] = self;
    -[_UIKeyboardStateManager queueDelayedTask:](self, "queueDelayedTask:", v18);
  }
  else
  {
    -[_UIKeyboardStateManager updateDelegatePasteSupport](self, "updateDelegatePasteSupport");
  }
  if (didSetDelegate_onceToken != -1)
    dispatch_once(&didSetDelegate_onceToken, &__block_literal_global_464);
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "keyInputDelegate");
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)v8;
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "currentInputMode");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isExtensionInputMode");

    if (!v12)
      goto LABEL_10;
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "keyboardWindow");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "rootViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updateKeyboardDockViewVisibility");

  }
LABEL_10:
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v17 = v16;
  if (v15)
    objc_msgSend(v16, "prewarmEmojiKeyboardIfNeeded");
  else
    objc_msgSend(v16, "releaseEmojiKeyboardPrewarmingAssertion");

}

- (void)keyboardSceneDelegate:(id)a3 startedPinningInputViewsOnBehalfOfResponder:(id)a4
{
  id v4;
  NSObject *v5;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a4;
  _UIKeyboardInputSessionChangeLog();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = 134217984;
    v7 = v4;
    _os_log_debug_impl(&dword_185066000, v5, OS_LOG_TYPE_DEBUG, "Started pinning input views on behalf of responder: %p", (uint8_t *)&v6, 0xCu);
  }

}

- (void)keyboardSceneDelegate:(id)a3 stoppedPinningInputViewsOnBehalfOfResponder:(id)a4
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  void *v11;
  char v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  _UIKeyboardInputSessionChangeLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v18 = 134217984;
    v19 = v5;
    _os_log_debug_impl(&dword_185066000, v6, OS_LOG_TYPE_DEBUG, "Stopped pinning input views on behalf of responder: %p", (uint8_t *)&v18, 0xCu);
  }

  if (+[UIKeyboard usingEndInputSessionCompletion](UIKeyboard, "usingEndInputSessionCompletion")
    && -[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "keyInputDelegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (-[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession"))
    {
      v9 = -[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession") != v5;
      if (v8)
      {
LABEL_7:
        v10 = -[_UIKeyboardStateManager skippedEndInputSession](self, "skippedEndInputSession") == v8;
        goto LABEL_10;
      }
    }
    else
    {
      v9 = 1;
      if (v8)
        goto LABEL_7;
    }
    v10 = 0;
LABEL_10:
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "_keepInputSession");

    if (!v9 && !v10 && (v12 & 1) == 0)
    {
      _UIKeyboardInputSessionChangeLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v18) = 0;
        _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_DEFAULT, "Stopped pinning input views on behalf of responder: ending session for skippedEndInputSessionID now.", (uint8_t *)&v18, 2u);
      }

      -[_UIKeyboardStateManager remoteTextInputPartnerPrivate](self, "remoteTextInputPartnerPrivate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "endInputSessionWithIdentifier:shouldResign:waitForReply:", v15, 1, 0);

      -[_UIKeyboardStateManager remoteTextInputPartnerPrivate](self, "remoteTextInputPartnerPrivate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager skippedEndInputSessionID](self, "skippedEndInputSessionID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "endAllowingRemoteTextInput:", v17);

      -[_UIKeyboardStateManager setSkippedEndInputSession:](self, "setSkippedEndInputSession:", 0);
      -[_UIKeyboardStateManager setSkippedEndInputSessionID:](self, "setSkippedEndInputSessionID:", 0);
    }

  }
}

- (void)updateDelegatePasteSupport
{
  char v3;
  void *v4;
  void *v5;
  int v6;
  _BOOL4 v7;
  void *v8;
  id WeakRetained;
  char v10;
  id v11;

  +[UIKeyboard keyboardBundleIdentifier](UIKeyboard, "keyboardBundleIdentifier");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v11, "isEqualToString:", CFSTR("com.apple.springboard")) & 1) != 0)
    v3 = 1;
  else
    v3 = objc_msgSend(v11, "isEqualToString:", CFSTR("com.apple.Spotlight"));
  if (qword_1ECD7D1F8 != -1)
    dispatch_once(&qword_1ECD7D1F8, &__block_literal_global_471);
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "normalizedEnabledInputModeIdentifiers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "containsObject:", CFSTR("emoji"));

  if ((v3 & 1) != 0
    || (_MergedGlobals_987 & 1) != 0
    || -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
    || v6 != 1)
  {
    *(_WORD *)&self->m_needsPasteSupportUpdate = 0;
  }
  else
  {
    v7 = -[_UIKeyboardStateManager uncachedDelegateSupportsImagePaste](self, "uncachedDelegateSupportsImagePaste");
    self->m_delegateSupportsImagePaste = v7;
    self->m_needsPasteSupportUpdate = 0;
    if ((v7 & v6) == 1)
    {
      +[UIKeyboardMediaController sharedKeyboardMediaController](UIKeyboardMediaController, "sharedKeyboardMediaController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "recentsViewWillBeVisible") & 1) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        v10 = objc_msgSend((id)objc_opt_class(), "isSplit");

        if ((v10 & 1) == 0)
          +[_UIKeyboardMediaServiceWarmUpConnection warmUp](_UIKeyboardMediaServiceWarmUpConnection, "warmUp");
      }
      else
      {

      }
    }
  }

}

- (BOOL)delegateSupportsImagePaste
{
  return self->m_delegateSupportsImagePaste;
}

- (void)setRemoteDelegateSupportsImagePaste:(BOOL)a3
{
  if (self->m_remoteDelegateSupportsImagePaste != a3)
  {
    self->m_remoteDelegateSupportsImagePaste = a3;
    -[_UIKeyboardStateManager updateDelegatePasteSupport](self, "updateDelegatePasteSupport");
  }
}

- (BOOL)uncachedDelegateSupportsImagePaste
{
  char v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (+[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
    return self->m_remoteDelegateSupportsImagePaste;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "__isKindOfUIResponder") & 1) == 0)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  objc_msgSend(v4, "_responderForEditing");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (_IsKindOfUIView((uint64_t)v6))
  {
    v7 = v6;
    v6 = v7;
    if ((objc_msgSend(v7, "_isInAWindow") & 1) == 0)
    {

      v6 = 0;
    }

  }
  if (v6)
    v3 = objc_msgSend(v6, "_supportsImagePaste");
  else
    v3 = 0;

  return v3;
}

- (BOOL)imageSuggestionEnabled
{
  id WeakRetained;
  void *v4;
  char v5;

  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
    && (WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate),
        objc_msgSend(WeakRetained, "candidateController"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "activeCandidateViewType"),
        v4,
        WeakRetained,
        (v5 & 4) != 0))
  {
    return 0;
  }
  else
  {
    return -[_UIKeyboardStateManager delegateSupportsImagePaste](self, "delegateSupportsImagePaste");
  }
}

- (void)queueDelayedTask:(id)a3
{
  id v4;
  id deferredUpdateTask;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v4 = a3;
  deferredUpdateTask = self->_deferredUpdateTask;
  if (deferredUpdateTask)
  {
    v6 = _Block_copy(deferredUpdateTask);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __44___UIKeyboardStateManager_queueDelayedTask___block_invoke;
    v12[3] = &unk_1E16B6740;
    v13 = v6;
    v14 = v4;
    v7 = v6;
    v8 = (void *)objc_msgSend(v12, "copy");
    v9 = self->_deferredUpdateTask;
    self->_deferredUpdateTask = v8;

  }
  else
  {
    v10 = (void *)objc_msgSend(v4, "copy");
    v11 = self->_deferredUpdateTask;
    self->_deferredUpdateTask = v10;

  }
}

- (void)flushDelayedTasks
{
  void (**deferredUpdateTask)(id, SEL);
  id v4;

  deferredUpdateTask = (void (**)(id, SEL))self->_deferredUpdateTask;
  if (deferredUpdateTask)
  {
    deferredUpdateTask[2](deferredUpdateTask, a2);
    v4 = self->_deferredUpdateTask;
    self->_deferredUpdateTask = 0;

  }
}

- (BOOL)delegateSupportsCorrectionUI
{
  void *v2;
  void *v3;
  BOOL v4;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "textInputView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

- (void)setAutocorrectSpellingEnabled:(BOOL)a3
{
  _BOOL4 v5;
  void *v6;
  uint64_t v7;
  id v8;

  v5 = -[_UIKeyboardStateManager checkSpellingPreferenceForTraits](self, "checkSpellingPreferenceForTraits");
  UIKeyboardAutocorrectSpellingFlag = v5 || a3;
  if (v5)
  {
    UIKeyboardGetCurrentInputMode();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = UIKeyboardCheckSpellingForInputMode(v6);

  }
  else
  {
    v7 = 0;
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setContinuousSpellCheckingEnabled:", v7);

}

- (BOOL)autocorrectSpellingEnabled
{
  return UIKeyboardAutocorrectSpellingFlag;
}

- (BOOL)hasDelegate
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  BOOL v10;

  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "responder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4
    && objc_msgSend((id)UIApp, "isSuspended")
    && (+[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v5, "containerWindow"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "_isHostedInAnotherProcess"),
        v6,
        v5,
        (v7 & 1) == 0))
  {
    if (!objc_msgSend(v4, "_requiresKeyboardWhenFirstResponder"))
    {
      v10 = 0;
      goto LABEL_6;
    }
    objc_msgSend(v4, "_keyboardResponder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "keyInputDelegate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v10 = v9 != 0;

LABEL_6:
  return v10;
}

- (void)textWillChange:(id)a3
{
  if (!self->m_textInputChangesIgnored)
    self->m_textInputChangingText = 1;
  -[_UIKeyboardStateManager selectionWillChange:](self, "selectionWillChange:", a3);
}

- (void)invalidateTextEntryContextForTextInput:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v5 = v8;
  if (v4 == v8)
  {
    UIKeyboardGetCurrentInputMode();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    TIInputModeGetVariant();
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v8, "hasMarkedText")
      && ((objc_msgSend(v7, "isEqualToString:", CFSTR("Cangjie")) & 1) != 0
       || objc_msgSend(v7, "isEqualToString:", CFSTR("Sucheng"))))
    {
      -[_UIKeyboardStateManager layoutHasChanged](self, "layoutHasChanged");
    }
    else
    {
      -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");
    }

    v5 = v8;
  }

}

- (void)textChanged:(id)a3
{
  id v5;
  void *v6;
  _QWORD v7[5];
  id v8;

  v5 = a3;
  if (pthread_main_np())
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __39___UIKeyboardStateManager_textChanged___block_invoke;
    v7[3] = &unk_1E16BB0D8;
    v7[4] = self;
    v8 = v5;
    objc_msgSend(v6, "performSingleTask:", v7);

  }
  else
  {
    -[_UIKeyboardStateManager performSelectorOnMainThread:withObject:waitUntilDone:](self, "performSelectorOnMainThread:withObject:waitUntilDone:", a2, v5, 0);
  }

}

- (void)textChanged:(id)a3 executionContext:(id)a4
{
  _UIKeyboardStateManager *v6;
  id v7;
  id WeakRetained;
  id v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _UIKeyboardStateManager *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t m_cachedAutofillMode;
  void *v26;
  _QWORD v27[5];

  v6 = (_UIKeyboardStateManager *)a3;
  v7 = a4;
  if (!-[_UIKeyboardStateManager initializationDone](self, "initializationDone") || self->m_disableSyncTextChanged)
    goto LABEL_3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if ((objc_msgSend(WeakRetained, "rivenPreference") & 1) == 0)
  {

LABEL_9:
    -[_UIKeyboardStateManager clearChangeTimeAndCount](self, "clearChangeTimeAndCount");
    -[_UIKeyboardStateManager clearInput](self, "clearInput");
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "keyInputDelegate");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v6 && v13)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "keyInputDelegate");
      v16 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

      if (v6 == self || v16 == v6)
      {
LABEL_15:
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "keyInputDelegate");
        v22 = objc_claimAutoreleasedReturnValue();
        if (v22)
        {
          v23 = (void *)v22;
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v24, "delegateNeedsAutofillMode"))
          {
            m_cachedAutofillMode = self->m_cachedAutofillMode;

            if (!m_cachedAutofillMode)
              self->m_cachedAutofillMode = -[_UIKeyboardStateManager needAutofill](self, "needAutofill");
            goto LABEL_21;
          }

        }
LABEL_21:
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = __56___UIKeyboardStateManager_textChanged_executionContext___block_invoke;
        v27[3] = &unk_1E16BAF98;
        v27[4] = self;
        objc_msgSend(v7, "childWithContinuation:", v27);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager updateForChangedSelectionWithExecutionContext:](self, "updateForChangedSelectionWithExecutionContext:", v26);

        goto LABEL_4;
      }
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "keyInputDelegate");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager documentIdentifierForInputDelegate:](self, "documentIdentifierForInputDelegate:", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardState setDocumentIdentifier:](self->m_keyboardState, "setDocumentIdentifier:", v19);

      -[TIKeyboardState documentIdentifier](self->m_keyboardState, "documentIdentifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "_textInputSessionAnalytics");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setSessionIdentifier:", v12);

    }
    goto LABEL_15;
  }
  v9 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v9, "_rootInputWindowController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isSplitting");

  if (!v11)
    goto LABEL_9;
LABEL_3:
  objc_msgSend(v7, "returnExecutionToParent");
LABEL_4:

}

- (void)finishTextChanged
{
  id v3;

  -[_UIKeyboardStateManager updateReturnKey:](self, "updateReturnKey:", 1);
  -[_UIKeyboardStateManager updateNoContentViews](self, "updateNoContentViews");
  -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");
  -[_UIKeyboardStateManager setShiftOffIfNeeded](self, "setShiftOffIfNeeded");
  -[_UIKeyboardStateManager textSelectionController](self, "textSelectionController");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "textDidChange");

}

- (void)textSuggestionDidChange:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __51___UIKeyboardStateManager_textSuggestionDidChange___block_invoke;
  v7[3] = &unk_1E16BB0D8;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "addTask:", v7);

}

- (void)textDidChange:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  v7 = v4;
  if (!self->m_textInputChangesIgnored)
  {
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_textInputSessionAnalytics");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "didOther");

    v4 = v7;
  }
  -[_UIKeyboardStateManager selectionDidChange:](self, "selectionDidChange:", v4);

}

- (void)setDefaultTextInputTraits:(id)a3
{
  UITextInputTraits *v4;
  UITextInputTraits *m_defaultTraits;
  BOOL v6;
  UITextInputTraits *v7;
  UITextInputTraits *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  UITextInputTraits *v13;

  v4 = (UITextInputTraits *)a3;
  m_defaultTraits = self->m_defaultTraits;
  if (m_defaultTraits != v4)
  {
    v13 = v4;
    v6 = -[UITextInputTraits isEqual:](m_defaultTraits, "isEqual:", v4);
    v4 = v13;
    if (!v6)
    {
      v7 = (UITextInputTraits *)-[UITextInputTraits copy](v13, "copy");
      v8 = self->m_defaultTraits;
      self->m_defaultTraits = v7;

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "delegateRespectingForwardingDelegate:", 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setDelegate:force:](self, "setDelegate:force:", v10, 1);

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "delegateRespectingForwardingDelegate:", 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v4 = v13;
      if (v13)
      {
        if (!v12)
        {
          -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:](self, "recomputeActiveInputModesWithExtensions:", 1);
          v4 = v13;
        }
      }
    }
  }

}

- (void)setOverrideTextInputTraits:(id)a3
{
  UITextInputTraits *v4;
  UITextInputTraits *m_overrideTraits;
  BOOL v6;
  UITextInputTraits *v7;
  UITextInputTraits *v8;
  void *v9;
  void *v10;
  UITextInputTraits *v11;

  v4 = (UITextInputTraits *)a3;
  m_overrideTraits = self->m_overrideTraits;
  if (m_overrideTraits != v4)
  {
    v11 = v4;
    v6 = -[UITextInputTraits isEqual:](m_overrideTraits, "isEqual:", v4);
    v4 = v11;
    if (!v6)
    {
      if (!v11)
      {
        -[_UIKeyboardStateManager clearForwardingInputDelegateAndResign:](self, "clearForwardingInputDelegateAndResign:", 1);
        v4 = 0;
      }
      v7 = (UITextInputTraits *)-[UITextInputTraits copy](v4, "copy");
      v8 = self->m_overrideTraits;
      self->m_overrideTraits = v7;

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "delegateRespectingForwardingDelegate:", 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setDelegate:force:](self, "setDelegate:force:", v10, 1);

      v4 = v11;
    }
  }

}

- (UITextInputTraits)textInputTraits
{
  return self->m_traits;
}

- (BOOL)isDefaultPrediction
{
  return self->m_predictionType == 0;
}

- (BOOL)isAutofillPrediction
{
  return (self->m_predictionType - 3) < 2;
}

- (BOOL)predictionFromPreference
{
  void *v3;
  void *v4;
  char v5;

  if (-[_UIKeyboardStateManager disableInputBars](self, "disableInputBars"))
    return 0;
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferencesActions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "predictionEnabled");

  return v5;
}

- (id)textSuggestions
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "textSuggestionList");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3
    && (objc_msgSend(v3, "predictions"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "count"),
        v4,
        v5))
  {
    v6 = (void *)MEMORY[0x1E0C99DE8];
    objc_msgSend(v3, "predictions");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "arrayWithCapacity:", objc_msgSend(v7, "count"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v3, "predictions", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v18;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v18 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v13);
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            objc_msgSend(v14, "textSuggestion");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "addObject:", v15);

          }
          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v11);
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (void)textInput:(id)a3 setCandidateSuggestions:(id)a4
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  v5 = a4;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v27, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v19;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v10);
        v23 = 0;
        v24 = &v23;
        v25 = 0x2050000000;
        v12 = (void *)qword_1ECD7D240;
        v26 = qword_1ECD7D240;
        if (!qword_1ECD7D240)
        {
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 3221225472;
          v22[2] = __getBEAutoFillTextSuggestionClass_block_invoke;
          v22[3] = &unk_1E16B14C0;
          v22[4] = &v23;
          __getBEAutoFillTextSuggestionClass_block_invoke((uint64_t)v22);
          v12 = (void *)v24[3];
        }
        v13 = objc_retainAutorelease(v12);
        _Block_object_dispose(&v23, 8);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v11, "contents");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          +[UIAutoFillTextSuggestion autoFillSuggestionWithContents:](UIAutoFillTextSuggestion, "autoFillSuggestionWithContents:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          objc_msgSend(v11, "_uikitTextSuggestion", v16);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(v6, "addObject:", v15, v16);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v27, 16);
    }
    while (v8);
  }

  -[_UIKeyboardStateManager provideCandidateUISuggestions:](self, "provideCandidateUISuggestions:", v6);
}

- (void)setSuggestions:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  _QWORD v10[5];
  id v11;

  v4 = a3;
  v5 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (v4 || !v5)
    goto LABEL_6;
  -[_UIKeyboardStateManager textSuggestions](self, "textSuggestions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {

LABEL_6:
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __42___UIKeyboardStateManager_setSuggestions___block_invoke;
    v10[3] = &unk_1E16BB0D8;
    v10[4] = self;
    v11 = v4;
    objc_msgSend(v9, "addTask:", v10);

    goto LABEL_7;
  }
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hasAutofillCandidates");

  if ((v8 & 1) == 0)
    goto LABEL_6;
LABEL_7:

}

- (void)_setSuggestions:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _BOOL4 v26;
  void *v27;
  void *v28;
  id v29;
  id *p_isa;
  _BOOL4 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  void *v40;
  void *v41;
  _UIKeyboardStateManager *v42;
  BOOL v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  _BOOL4 v50;
  id v51;
  id v52;
  void *v53;
  _BOOL4 v54;
  void *v55;
  void *v56;
  id v57;
  _UIKeyboardStateManager *v58;
  id v59;
  _QWORD v60[5];
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[4];
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t *v72;
  BOOL v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[128];
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v57 = a3;
  v58 = self;
  if (-[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "textSuggestionsChanged:", v57);

    -[_UIKeyboardStateManager remoteTextInputPartner](v58, "remoteTextInputPartner");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "remoteTextInputClientHasActiveSession");

    self = v58;
    if (v57)
    {
      if ((v6 & 1) == 0)
      {
        -[_UIKeyboardStateManager remoteTextInputPartner](v58, "remoteTextInputPartner");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addTextSuggestions:", v57);

        self = v58;
      }
    }
  }
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "textSuggestionList");
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  if (v57 && objc_msgSend(v57, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v57, "count"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v10 = v57;
    v11 = 0;
    v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v79;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v79 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * i);
          objc_msgSend(v15, "_keyboardCandidate");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "addObject:", v16);

          if (!v11)
          {
            if (objc_msgSend(v15, "canDisplayInline"))
              v11 = v15;
            else
              v11 = 0;
          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
      }
      while (v12);
    }

    objc_msgSend(v9, "firstObject");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[_UIKeyboardStateManager usesCandidateSelection](v58, "usesCandidateSelection"))
      v17 = 2;
    else
      v17 = 4;
    v58->m_predictionType = v17;
    objc_msgSend(MEMORY[0x1E0DBDB48], "listWithCorrections:predictions:", 0, v9);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager autocorrectionController](v58, "autocorrectionController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setTextSuggestionList:", v55);

    if (v11)
    {
      -[_UIKeyboardStateManager inlineTextCompletionController](v58, "inlineTextCompletionController");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "updateTextCompletionWithExternalSuggestion:", v11);

    }
    if (-[_UIKeyboardStateManager usesCandidateSelection](v58, "usesCandidateSelection"))
    {
      -[TIKeyboardState textInputTraits](v58->m_keyboardState, "textInputTraits");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "mathExpressionCompletionType") != 1;

      v54 = -[_UIKeyboardStateManager _hasMarkedText](v58, "_hasMarkedText");
      if (v21
        && v54
        && !-[TIKeyboardCandidateResultSet hasCandidates](v58->m_candidateResultSet, "hasCandidates"))
      {

        goto LABEL_61;
      }
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v10, "count") + 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardState searchStringForMarkedText](v58->m_keyboardState, "searchStringForMarkedText");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardCandidateResultSet firstCandidate](v58->m_candidateResultSet, "firstCandidate");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (v25)
        v26 = v54;
      else
        v26 = 0;
      if (v26)
      {
        objc_msgSend(v22, "addObject:", v25);
        objc_msgSend(v25, "candidate");
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        if (v27)
        {
          objc_msgSend(v25, "candidate");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "addObject:", v28);

        }
      }
      v74 = 0;
      v75 = &v74;
      v76 = 0x2020000000;
      v77 = 0;
      v66[0] = MEMORY[0x1E0C809B0];
      v66[1] = 3221225472;
      v66[2] = __43___UIKeyboardStateManager__setSuggestions___block_invoke;
      v66[3] = &unk_1E16BB198;
      v51 = v24;
      v67 = v51;
      v73 = !v54;
      v52 = v25;
      v68 = v52;
      v59 = v22;
      v69 = v59;
      v70 = v9;
      v29 = v23;
      v71 = v29;
      v72 = &v74;
      objc_msgSend(v10, "enumerateObjectsUsingBlock:", v66);
      p_isa = (id *)&v58->super.isa;
      if (*((_BYTE *)v75 + 24))
      {
        v31 = v54;
        if ((-[TIKeyboardCandidateResultSet hasCandidates](v58->m_candidateResultSet, "hasCandidates") & v54) == 1)
        {
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          -[TIKeyboardCandidateResultSet candidates](v58->m_candidateResultSet, "candidates");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v62, v82, 16);
          if (v33)
          {
            v34 = *(_QWORD *)v63;
            do
            {
              for (j = 0; j != v33; ++j)
              {
                if (*(_QWORD *)v63 != v34)
                  objc_enumerationMutation(v32);
                v36 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * j);
                objc_msgSend(v36, "candidate");
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                v38 = objc_msgSend(v29, "containsObject:", v37);

                if ((v38 & 1) == 0)
                  objc_msgSend(v59, "addObject:", v36);
              }
              v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v62, v82, 16);
            }
            while (v33);
          }

          p_isa = (id *)&v58->super.isa;
          v31 = v54;
        }
        if ((objc_msgSend(p_isa[4], "hasCandidates") & v31) == 1)
        {
          v39 = (void *)objc_msgSend(p_isa[4], "copy");
          objc_msgSend(v39, "setCandidates:", v59);
          objc_msgSend(v39, "setBatchCandidateLocation:", 0);
        }
        else
        {
          if (!v31)
            objc_msgSend(p_isa, "setCurrentCandidateRequest:", 0);
          objc_msgSend(MEMORY[0x1E0DBDBE0], "setWithCandidates:", v59);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(p_isa, "taskQueue");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 3221225472;
        v60[2] = __43___UIKeyboardStateManager__setSuggestions___block_invoke_2;
        v60[3] = &unk_1E16BB0D8;
        v60[4] = p_isa;
        v47 = v39;
        v61 = v47;
        objc_msgSend(v46, "addDeferredTask:", v60);

      }
      _Block_object_dispose(&v74, 8);

    }
    goto LABEL_58;
  }
  -[_UIKeyboardStateManager autocorrectionController](v58, "autocorrectionController");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "textSuggestionList");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41)
  {

    v42 = v58;
  }
  else
  {
    v42 = v58;
    v43 = -[_UIKeyboardStateManager isAutofillPrediction](v58, "isAutofillPrediction");

    if (!v43)
      goto LABEL_59;
  }
  -[_UIKeyboardStateManager isAutofillPrediction](v42, "isAutofillPrediction");
  v42->m_predictionType = 0;
  -[_UIKeyboardStateManager autocorrectionController](v42, "autocorrectionController");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "setTextSuggestionList:", 0);

  v42 = v58;
  -[_UIKeyboardStateManager removeInlineTextCompletionPrompt](v58, "removeInlineTextCompletionPrompt");
  if (!-[_UIKeyboardStateManager usesCandidateSelection](v58, "usesCandidateSelection"))
  {
    -[_UIKeyboardStateManager autocorrectionController](v58, "autocorrectionController");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "setNeedsAutocorrection");

LABEL_58:
    v42 = v58;
  }
LABEL_59:
  -[_UIKeyboardStateManager autocorrectionController](v42, "autocorrectionController");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "textSuggestionList");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = v49 != 0;

  if ((v56 == 0) == v50)
    -[_UIKeyboardStateManager updateAssistantView](v58, "updateAssistantView");
LABEL_61:

}

- (void)insertCustomTextSuggestion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _UIKeyboardStateManager *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v28 = self;
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "textSuggestionList");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = v6;
  objc_msgSend(v6, "predictions");
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (!v8)
    goto LABEL_22;
  v9 = v8;
  v10 = *(_QWORD *)v31;
  while (2)
  {
    for (i = 0; i != v9; ++i)
    {
      if (*(_QWORD *)v31 != v10)
        objc_enumerationMutation(v7);
      v12 = *(id *)(*((_QWORD *)&v30 + 1) + 8 * i);
      objc_msgSend(v12, "textSuggestion");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v14, "isEqual:", v15);

      if (v16)
      {
        -[_UIKeyboardStateManager inputDelegateManager](v28, "inputDelegateManager");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "insertTextSuggestion:", v13);

        if ((v18 & 1) != 0
          || ((objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
           || -[_UIKeyboardStateManager insertAutoFillTextSuggestion:](v28, "insertAutoFillTextSuggestion:", v13))
          && -[_UIKeyboardStateManager acceptWord:firstDelete:](v28, "acceptWord:firstDelete:", v12, objc_msgSend(v12, "deleteCount")))
        {
          if (!+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled"))
          {
LABEL_21:

            goto LABEL_22;
          }
          -[_UIKeyboardStateManager inputDelegateManager](v28, "inputDelegateManager");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "selectedTextRange");
          v20 = objc_claimAutoreleasedReturnValue();
          if (v20)
          {
            v21 = (void *)v20;
            objc_msgSend(v4, "inputText");
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v22 && +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
            {
              -[_UIKeyboardStateManager _textChoicesAssistant](v28, "_textChoicesAssistant");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              -[_UIKeyboardStateManager inputDelegateManager](v28, "inputDelegateManager");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "selectedTextRange");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "clearUnderlinesInRange:animated:", v25, 0);

              -[_UIKeyboardStateManager dismissTextChoicePrompt](v28, "dismissTextChoicePrompt");
            }
            goto LABEL_21;
          }
        }
        else
        {
          -[_UIKeyboardStateManager inputDelegateManager](v28, "inputDelegateManager");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "textInputDelegate");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "inputText");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](v28, "replaceAllTextInResponder:withText:", v26, v27);

        }
        goto LABEL_21;
      }

    }
    v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v9)
      continue;
    break;
  }
LABEL_22:

}

- (void)insertSticker:(id)a3
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  id WeakRetained;
  void *v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  v24 = a3;
  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
    || (-[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession"),
        (v4 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    +[UITextInputPayloadController sharedInstance](UITextInputPayloadController, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "supportedPayloadIds");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "containsObject:", CFSTR("com.apple.messages.stageSticker"));

    if (v11)
    {
      _UIStickerCreateTextInputPayloadFromSticker(v24);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v12)
      {
LABEL_14:

        -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", 0);
        goto LABEL_15;
      }
      +[UITextInputPayloadController sharedInstance](UITextInputPayloadController, "sharedInstance");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "payloadDelegate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "handlePayload:withPayloadId:", v12, CFSTR("com.apple.messages.stageSticker"));
    }
    else
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend((id)objc_opt_class(), "keyboardWindow");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "screen");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(v12, "scale");
        v18 = v17;
      }
      else
      {
        v18 = 1.0;
      }
      objc_msgSend(v24, "externalURI");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "representations");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "bakedInRep");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "metadata");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      _UIStickerItemProviderWithMetadata(v19, v20, v21, 1, v22, v18);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "delegateRespectingForwardingDelegate:", 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v14, "_insertItemFromProvider:completionHandler:", v13, 0);
    }

    goto LABEL_14;
  }
  v5 = (void *)v4;
  _UIStickerCreateTextInputPayloadFromSticker(v24);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(v5, "textOperations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setCustomInfo:", v6);

    objc_msgSend(v5, "textOperations");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setCustomInfoType:", 0x1E1750340);

    objc_msgSend(v5, "flushOperations");
  }

LABEL_15:
}

- (void)handleWebViewCredentialsSaveForWebsiteURL:(id)a3 user:(id)a4 password:(id)a5 passwordIsAutoGenerated:(BOOL)a6
{
  _BOOL8 v6;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;

  v6 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "handleWebviewCredentialsSaveForResponder:WebsiteURL:user:password:passwordIsAutoGenerated:", v13, v12, v11, v10, v6);

}

- (BOOL)isTrackpadMode
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "isTrackpadMode");

  return v3;
}

- (void)updateAssistantView
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateAssistantView");

}

- (CGRect)subtractKeyboardFrameFromRect:(CGRect)a3 inView:(id)a4
{
  double height;
  double width;
  double y;
  double x;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v9;
  id WeakRetained;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  p_presentationDelegate = &self->_presentationDelegate;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "subtractKeyboardFrameFromRect:inView:", v9, x, y, width, height);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  v19 = v12;
  v20 = v14;
  v21 = v16;
  v22 = v18;
  result.size.height = v22;
  result.size.width = v21;
  result.origin.y = v20;
  result.origin.x = v19;
  return result;
}

- (void)adjustCapsLockDelayOverride
{
  double v2;
  void *v3;
  void *v4;
  float v5;

  v2 = -1.0;
  if (os_variant_has_internal_diagnostics())
  {
    if (TIGetCapsLockDelayOverrideInSecondsValue_onceToken[0] != -1)
      dispatch_once(TIGetCapsLockDelayOverrideInSecondsValue_onceToken, &__block_literal_global_3012);
    objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "valueForPreferenceKey:", CFSTR("CapsLockDelayOverrideInSeconds"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "floatValue");
    v2 = v5;

  }
  objc_msgSend((id)UIApp, "setCapsLockDelayOverride:", v2);
}

- (void)removeCapsLockDelayOverride
{
  objc_msgSend((id)UIApp, "setCapsLockDelayOverride:", 0.0);
}

- (void)clearCapsLockDelayOverrideTimer
{
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager updateCapsLockDelayOverrideForNonTyping](self, "updateCapsLockDelayOverrideForNonTyping");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager updateCapsLockDelayOverrideForNonTyping](self, "updateCapsLockDelayOverrideForNonTyping");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "cancel");

    -[_UIKeyboardStateManager setUpdateCapsLockDelayOverrideForNonTyping:](self, "setUpdateCapsLockDelayOverrideForNonTyping:", 0);
  }
}

- (void)showCursorAccessory
{
  _UIInvalidatable *m_hideCursorAccessoriesAssertion;
  UIDelayedAction *m_showCursorAccessory;

  -[_UIInvalidatable _invalidate](self->m_hideCursorAccessoriesAssertion, "_invalidate");
  m_hideCursorAccessoriesAssertion = self->m_hideCursorAccessoriesAssertion;
  self->m_hideCursorAccessoriesAssertion = 0;

  m_showCursorAccessory = self->m_showCursorAccessory;
  self->m_showCursorAccessory = 0;

}

- (void)performKeyboardOutputAsInputViewControllerOutput:(id)a3
{
  -[_UIKeyboardStateManager performKeyboardOutputAsInputViewControllerOutput:textInputSource:](self, "performKeyboardOutputAsInputViewControllerOutput:textInputSource:", a3, 0);
}

- (void)performKeyboardOutputAsInputViewControllerOutput:(id)a3 textInputSource:(int64_t)a4
{
  id v6;
  _UIInputViewControllerOutput *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = objc_alloc_init(_UIInputViewControllerOutput);
  -[_UIInputViewControllerOutput setSource:](v7, "setSource:", a4);
  +[_UIInputViewKeyboardOutput outputWithKeyboardOutput:](_UIInputViewKeyboardOutput, "outputWithKeyboardOutput:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIInputViewControllerOutput setKeyboardOutputs:](v7, "setKeyboardOutputs:", v9);

  -[_UIKeyboardStateManager _performInputViewControllerOutput:](self, "_performInputViewControllerOutput:", v7);
}

- (BOOL)_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:(id)a3
{
  id v4;
  void *v5;
  __CFString *v6;
  BOOL v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  BOOL v12;

  v4 = a3;
  if (objc_msgSend(v4, "deletionCount"))
  {
    objc_msgSend(v4, "insertionText");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(v4, "insertionText");
      v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = &stru_1E16EDF20;
    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "callShouldReplaceExtendedRange:withText:includeMarkedText:", objc_msgSend(v4, "deletionCount"), v6, 0);

    if ((v9 & 1) != 0)
    {

      v7 = 0;
      if (v5)
        goto LABEL_16;
    }
    else
    {
      objc_msgSend(v4, "setDeletionCount:", 0);
      if (v5)
      {
        objc_msgSend(v4, "setInsertionText:", 0);

LABEL_15:
        v7 = 1;
        goto LABEL_16;
      }

      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v4, "insertionText");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v4, "insertionText");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v11);

    if (!v12)
    {
      objc_msgSend(v4, "setInsertionText:", 0);
      goto LABEL_15;
    }
  }
LABEL_16:

  return v7;
}

- (void)_updateInputViewControllerOutput:(id)a3 forKeyboardOutput:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;

  v21 = a3;
  v6 = a4;
  if (v21 && v6 && (objc_msgSend(v6, "didBeginOutput") & 1) == 0)
  {
    objc_msgSend(v6, "insertionText");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v6, "insertionText");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v8, "rangeOfCharacterFromSet:", v9);

      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(v21, "setShouldPostReturnKeyNotification:", 1);
        -[_UIKeyboardStateManager cancelDictationOnSendReturnKeyPressed](self, "cancelDictationOnSendReturnKeyPressed");
      }
    }
    if (-[_UIKeyboardStateManager _shouldRequestInputManagerSyncForKeyboardOutputCallbacks:](self, "_shouldRequestInputManagerSyncForKeyboardOutputCallbacks:", v6))
    {
      v11 = 1;
      v12 = v21;
    }
    else
    {
      v13 = objc_msgSend(v21, "requiresInputManagerSync");
      v12 = v21;
      v11 = v13;
    }
    objc_msgSend(v12, "setRequiresInputManagerSync:", v11);
    if (objc_msgSend(v6, "positionOffset"))
    {
      objc_msgSend(v21, "setRequiresInputManagerSync:", 1);
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "collapseSelectionAndAdjustByOffset:", objc_msgSend(v6, "positionOffset"));

      if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
        objc_msgSend(v21, "setRequiresInputManagerSync:", 0);
      else
        objc_msgSend(v6, "setPositionOffset:", 0);
    }
    objc_msgSend(v6, "insertionText");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend(v6, "insertionText");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v16, "rangeOfCharacterFromSet:", v17);

      if (v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (-[UITextInputTraits returnKeyGoesToNextResponder](self->m_traits, "returnKeyGoesToNextResponder"))
        {
          objc_msgSend(v21, "setShouldAdvanceResponder:", 1);
          objc_msgSend(v21, "setShouldPostReturnKeyNotification:", 0);
          if (v18)
          {
            objc_msgSend(v6, "insertionText");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "substringToIndex:", v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "setInsertionText:", v20);

          }
          else
          {
            objc_msgSend(v6, "setInsertionText:", 0);
          }
        }
      }
    }
    objc_msgSend(v6, "setDidBeginOutput:", 1);
  }

}

- (void)_processInputViewControllerKeyboardOutput:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  BOOL v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _UIKeyboardStateManager *v13;
  id v14;
  BOOL v15;

  v6 = a3;
  v7 = a4;
  v8 = -[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents");
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __86___UIKeyboardStateManager__processInputViewControllerKeyboardOutput_executionContext___block_invoke;
  v11[3] = &unk_1E16B4030;
  v12 = v6;
  v13 = self;
  v15 = v8;
  v14 = v7;
  v9 = v7;
  v10 = v6;
  -[_UIKeyboardStateManager _performKeyboardOutput:respectingForwardingDelegate:](self, "_performKeyboardOutput:respectingForwardingDelegate:", v11, 0);

}

- (void)_completePerformInputViewControllerOutput:(id)a3 executionContext:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int64_t v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  int v31;
  int v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  int v51;
  double v52;
  void *v53;
  void *v54;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v57;
  char isKindOfClass;
  id v59;
  void *v60;
  unint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;

  v74 = a3;
  v6 = a4;
  if ((objc_msgSend(v74, "requiresInputManagerSync") & 1) == 0 && self->m_didSyncDocumentStateToInputDelegate)
    objc_msgSend(v74, "setRequiresInputManagerSync:", 1);
  if (objc_msgSend(v74, "shouldAdvanceResponder"))
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_nextKeyResponder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "becomeFirstResponder");

  }
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "currentInputMode");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v10, "isExtensionInputMode"))
  {
    objc_msgSend(v74, "primaryLanguage");
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = (void *)v11;
      objc_msgSend(v74, "primaryLanguage");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "lowercaseString");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "hasPrefix:", CFSTR("und"));

      if ((v15 & 1) == 0)
      {
        objc_msgSend(v10, "primaryLanguage");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "primaryLanguage");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v16, "isEqualToString:", v17);

        if ((v18 & 1) == 0)
        {
          objc_msgSend(v74, "primaryLanguage");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "setPrimaryLanguage:", v19);

          +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "_inputModeChangedWhileContextTracked");

          +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "preferencesActions");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "identifier");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "setLanguageAwareInputModeLastUsed:", v23);

          if (self->m_hardwareKeyboardAttached)
            -[_UIKeyboardStateManager updateHardwareKeyboardLayout](self, "updateHardwareKeyboardLayout");
        }
        v24 = (void *)MEMORY[0x1E0C99DC8];
        objc_msgSend(v74, "primaryLanguage");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v24, "characterDirectionForLanguage:", v25) == 2;

        if (self->m_currentDirection != v26)
        {
          self->m_currentDirection = v26;
          -[_UIKeyboardStateManager setInitialDirection](self, "setInitialDirection");
        }
        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "postNotificationName:object:", CFSTR("UITextInputCurrentInputModeDidChangeNotification"), 0);

        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "postNotificationName:object:", CFSTR("UITextInputDidPersistFindUINotification"), 0);

        +[_UIKeyboardUsageTracking keyboardExtensionPrimaryLanguageChanged](_UIKeyboardUsageTracking, "keyboardExtensionPrimaryLanguageChanged");
      }
    }
  }
  v29 = objc_msgSend(v10, "isExtensionInputMode");
  v30 = v74;
  if (v29)
  {
    v31 = objc_msgSend(v74, "hasDictation");
    v32 = objc_msgSend(v10, "extensionInputModeHasDictation");
    v30 = v74;
    if (v31 != v32)
    {
      objc_msgSend(v10, "setExtensionInputModeHasDictation:", objc_msgSend(v74, "hasDictation"));
      +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "inputViews");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "inputView");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "_rootInputWindowController");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "updateKeyboardDockViewVisibility");

      v30 = v74;
    }
  }
  if (objc_msgSend(v30, "shouldPostReturnKeyNotification"))
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "postNotificationName:object:", CFSTR("UIKeyboardReturnKeyPressed"), 0);

  }
  +[UIInputSwitcherView sharedInstance](UIInputSwitcherView, "sharedInstance");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v74, "shouldAdvanceInputMode"))
  {
    objc_msgSend(v10, "identifier");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend(v39, "isEqualToString:", CFSTR("autofillsignup"));

    if (v40)
    {
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "didOptOutOfAutofillSignup");

      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "optOutASPInTextField");

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "inputSystemSourceSession");
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      if (v44)
      {
        objc_msgSend(v44, "textOperations");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "setEditingActionSelector:", sel_optOutASPInTextField);
        objc_msgSend(v44, "flushOperations");

      }
      self->m_usesSystemKeyboardForASP = 1;
      if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
      {
        +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "remoteInputViewHost");
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v47, "inputViewSet");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "hostedCustomInputView");
        v49 = objc_claimAutoreleasedReturnValue();
        if (v49)
        {
          v50 = (void *)v49;
          v51 = objc_msgSend(v47, "shouldShowDockView");

          if (v51)
          {
            objc_msgSend(v47, "setInputViewSet:", 0);
            objc_msgSend(v47, "updateInputViewsIfNecessary");
          }
        }
        else
        {

        }
      }
      -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:](self, "recomputeActiveInputModesWithExtensions:", 0);
LABEL_49:
      objc_msgSend(v6, "returnExecutionToParent");

      goto LABEL_58;
    }
    -[_UIKeyboardStateManager setInputModeToNextInPreferredListWithExecutionContext:](self, "setInputModeToNextInPreferredListWithExecutionContext:", v6);
  }
  else
  {
    objc_msgSend(v74, "inputModeListTouchBegan");
    if (v52 != 0.0)
    {
      +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "inputViews");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "inputView");
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      p_presentationDelegate = &self->_presentationDelegate;
      WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
      objc_msgSend(WeakRetained, "layout");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
      {
        v59 = objc_loadWeakRetained((id *)p_presentationDelegate);
        objc_msgSend(v59, "layout");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "setLayout:", v60);

      }
      v61 = objc_msgSend(v74, "inputModeListTouchPhase");
      if (v61 < 2)
      {
        if ((objc_msgSend(v38, "isVisible") & 1) == 0)
        {
          objc_msgSend(v74, "inputModeListFromLocation");
          objc_msgSend(v44, "convertPoint:toView:", 0);
          v63 = v62;
          v65 = v64;
          objc_msgSend(v74, "inputModeListTouchBegan");
          objc_msgSend(v38, "showAsHUDFromLocation:withInputView:touchBegan:", v44, v63, v65, v66);
        }
        if (objc_msgSend(v38, "isVisible"))
        {
          objc_msgSend(v74, "inputModeListUpdatePoint");
          objc_msgSend(v44, "convertPoint:toView:", v38);
          objc_msgSend(v38, "updateSelectionWithPoint:");
        }
      }
      else if (v61 == 3)
      {
        if (objc_msgSend(v38, "isVisible"))
        {
          objc_msgSend(v74, "inputModeListUpdatePoint");
          objc_msgSend(v44, "convertPoint:toView:", v38);
          objc_msgSend(v38, "selectItemAtPoint:");
        }
      }
      else if (v61 == 4)
      {
        objc_msgSend(v38, "hide");
      }
      goto LABEL_49;
    }
    if (objc_msgSend(v74, "shouldDismiss"))
    {
      -[_UIKeyboardStateManager dismissKeyboard](self, "dismissKeyboard");
    }
    else if (objc_msgSend(v74, "proceedShouldReturn"))
    {
      -[_UIKeyboardStateManager proceedShouldReturnIfNeededForASP](self, "proceedShouldReturnIfNeededForASP");
    }
    else if ((objc_msgSend(v74, "setMarkedText") & 1) != 0 || objc_msgSend(v74, "unmarkText"))
    {
      self->m_textInputChangesIgnored = 1;
      if (objc_msgSend(v74, "setMarkedText"))
      {
        objc_msgSend(v74, "markedText");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = objc_msgSend(v74, "selectedRange");
        v70 = v69;
        objc_msgSend(v74, "markedText");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "markedText");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:](self, "setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:", v67, v68, v70, v71, 0, v72, 0x7FFFFFFFFFFFFFFFLL, 0, 0x7FFFFFFFFFFFFFFFLL);

      }
      if (objc_msgSend(v74, "unmarkText"))
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v73, "unmarkText");

      }
      self->m_textInputChangesIgnored = 0;
    }
    else if (objc_msgSend(v74, "requiresInputManagerSync"))
    {
      -[_UIKeyboardStateManager syncInputManagerToKeyboardState](self, "syncInputManagerToKeyboardState");
    }
    objc_msgSend(v6, "returnExecutionToParent");
  }
LABEL_58:

}

- (id)physicalKeyboardEventWithInput:(id)a3 inputFlags:(int)a4
{
  void *v5;

  +[UIPhysicalKeyboardEvent _eventWithInput:inputFlags:](UIPhysicalKeyboardEvent, "_eventWithInput:inputFlags:", a3, *(_QWORD *)&a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setSource:", self->m_textInputSource);
  return v5;
}

- (void)optOutASPInTextField
{
  void *v3;
  id v4;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "didOptOutOfAutofillSignup");

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "optOutASPInTextField");

}

- (void)performTextOperationActionSelector:(SEL)a3
{
  void *v5;
  const __CFString *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *WeakRetained;
  void *v13;
  BOOL v14;
  _UIKeyboardStateManager *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  _BOOL4 v46;
  uint64_t v47;
  void *v48;
  _BOOL4 v49;
  uint64_t v50;
  void *v51;
  _BOOL4 v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  int v64;
  void *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager arrowKeyHistory](self, "arrowKeyHistory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", 0);
  if (sel_insertNewline_ == a3 || sel_insertNewlineIgnoringFieldEditor_ == a3)
  {
    v7 = CFSTR("\n");
    goto LABEL_79;
  }
  if (sel_insertLineBreak_ == a3)
  {
    v7 = CFSTR("\u2028");
    goto LABEL_79;
  }
  if (sel_performSendAction_ == a3)
  {
    -[_UIKeyboardStateManager performSendAction](self, "performSendAction");
    goto LABEL_80;
  }
  if (sel_performKeyboardActionButtonAction_ == a3)
  {
    -[_UIKeyboardStateManager performKeyboardActionButtonAction](self, "performKeyboardActionButtonAction");
    goto LABEL_80;
  }
  if (sel_deleteBackward_ == a3)
  {
    if (-[_UIKeyboardStateManager callShouldDeleteWithWordCountForRapidDelete:characterCountForRapidDelete:](self, "callShouldDeleteWithWordCountForRapidDelete:characterCountForRapidDelete:", 2, 3))
    {
      -[_UIKeyboardStateManager deleteBackwardAndNotify:](self, "deleteBackwardAndNotify:", 1);
    }
  }
  else
  {
    if (sel_deleteForward_ != a3)
    {
      if (sel_deleteToBeginningOfLine_ == a3)
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "_deleteToStartOfLine");
        goto LABEL_91;
      }
      if (sel_deleteToEndOfParagraph_ == a3)
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "_deleteToEndOfParagraph");
        goto LABEL_91;
      }
      if (sel_insertTab_ == a3 || sel_insertTabIgnoringFieldEditor_ == a3)
      {
        -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v13, "isSingleLineDocument"))
        {
          v14 = -[_UIKeyboardStateManager handleTabWithShift:beforePublicKeyCommands:](self, "handleTabWithShift:beforePublicKeyCommands:", 0, 0);

          if (v14)
            goto LABEL_80;
        }
        else
        {

        }
        v7 = CFSTR("\t");
      }
      else
      {
        if (sel_insertBacktab_ == a3)
          goto LABEL_97;
        if (sel_insertSingleQuoteIgnoringSubstitution_ == a3)
        {
          v7 = CFSTR("'");
        }
        else
        {
          if (sel_insertDoubleQuoteIgnoringSubstitution_ != a3)
          {
            if (sel_transpose_ == a3)
            {
              -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
              WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(WeakRetained, "_transpose");
              goto LABEL_91;
            }
            if (sel_selectNextKeyView_ == a3)
            {
              v15 = self;
              v16 = 0;
              goto LABEL_98;
            }
            if (sel_selectPreviousKeyView_ != a3)
            {
              if (sel_deleteWordBackward_ != a3)
              {
                if (sel_moveWordLeft_ == a3)
                  goto LABEL_104;
                if (sel_moveWordRight_ == a3)
                  goto LABEL_106;
                if (sel_moveBackward_ == a3 || sel_moveLeft_ == a3)
                {
                  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  WeakRetained = v22;
                  v23 = 0;
                }
                else
                {
                  if (sel_moveBackwardAndModifySelection_ != a3 && sel_moveLeftAndModifySelection_ != a3)
                  {
                    if (sel_moveForward_ == a3 || sel_moveRight_ == a3)
                    {
                      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      WeakRetained = v25;
                      v26 = 0;
                    }
                    else
                    {
                      if (sel_moveForwardAndModifySelection_ != a3 && sel_moveRightAndModifySelection_ != a3)
                      {
                        if (sel_moveWordLeftAndModifySelection_ == a3)
                        {
LABEL_116:
                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                          v17 = (void *)objc_claimAutoreleasedReturnValue();
                          WeakRetained = v17;
                          v18 = 1;
                          goto LABEL_105;
                        }
                        if (sel_moveWordRightAndModifySelection_ == a3)
                        {
LABEL_117:
                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                          v20 = (void *)objc_claimAutoreleasedReturnValue();
                          WeakRetained = v20;
                          v21 = 1;
                          goto LABEL_107;
                        }
                        if (sel_moveDown_ == a3)
                        {
                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                          v27 = (void *)objc_claimAutoreleasedReturnValue();
                          WeakRetained = v27;
                          v28 = 0;
                        }
                        else
                        {
                          if (sel_moveDownAndModifySelection_ != a3)
                          {
                            if (sel_moveUp_ == a3)
                            {
                              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                              v29 = (void *)objc_claimAutoreleasedReturnValue();
                              WeakRetained = v29;
                              v30 = 0;
                            }
                            else
                            {
                              if (sel_moveUpAndModifySelection_ != a3)
                              {
                                if (sel_moveWordBackward_ != a3)
                                {
                                  if (sel_moveWordBackwardAndModifySelection_ != a3)
                                  {
                                    if (sel_moveWordForward_ != a3)
                                    {
                                      if (sel_moveWordForwardAndModifySelection_ != a3)
                                      {
                                        if (sel_moveToLeftEndOfLine_ == a3)
                                        {
                                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                          v31 = (void *)objc_claimAutoreleasedReturnValue();
                                          WeakRetained = v31;
                                          v32 = 0;
                                        }
                                        else
                                        {
                                          if (sel_moveToLeftEndOfLineAndModifySelection_ != a3)
                                          {
                                            if (sel_moveToRightEndOfLine_ == a3)
                                            {
                                              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                              v33 = (void *)objc_claimAutoreleasedReturnValue();
                                              WeakRetained = v33;
                                              v34 = 0;
                                            }
                                            else
                                            {
                                              if (sel_moveToRightEndOfLineAndModifySelection_ != a3)
                                              {
                                                if (sel_moveToBeginningOfParagraph_ == a3)
                                                {
                                                  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                                                  WeakRetained = v35;
                                                  v36 = 0;
                                                }
                                                else
                                                {
                                                  if (sel_moveToBeginningOfParagraphAndModifySelection_ != a3)
                                                  {
                                                    if (sel_moveToEndOfParagraph_ == a3)
                                                    {
                                                      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                      v37 = (void *)objc_claimAutoreleasedReturnValue();
                                                      WeakRetained = v37;
                                                      v38 = 0;
                                                    }
                                                    else
                                                    {
                                                      if (sel_moveToEndOfParagraphAndModifySelection_ != a3)
                                                      {
                                                        if (sel_moveToBeginningOfDocument_ == a3)
                                                        {
                                                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                          v39 = (void *)objc_claimAutoreleasedReturnValue();
                                                          WeakRetained = v39;
                                                          v40 = 0;
                                                        }
                                                        else
                                                        {
                                                          if (sel_moveToBeginningOfDocumentAndModifySelection_ != a3)
                                                          {
                                                            if (sel_moveToEndOfDocument_ == a3)
                                                            {
                                                              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                              v41 = (void *)objc_claimAutoreleasedReturnValue();
                                                              WeakRetained = v41;
                                                              v42 = 0;
                                                            }
                                                            else
                                                            {
                                                              if (sel_moveToEndOfDocumentAndModifySelection_ != a3)
                                                              {
                                                                if (sel_cancelOperation_ == a3)
                                                                {
                                                                  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                  WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                  objc_msgSend(WeakRetained, "targetForAction:withSender:", sel__cancelOperation_, 0);
                                                                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                                                                  v24 = v43;
                                                                  if (v43)
                                                                    objc_msgSend(v43, "_cancelOperation:", 0);
                                                                  else
                                                                    objc_msgSend(WeakRetained, "_nonDestructivelyResignFirstResponder");
                                                                }
                                                                else
                                                                {
                                                                  if (sel_nonDestructivelyDismissKeyboard_ == a3)
                                                                  {
                                                                    -[_UIKeyboardStateManager nonDestructivelyDismissKeyboard](self, "nonDestructivelyDismissKeyboard");
                                                                    goto LABEL_80;
                                                                  }
                                                                  if (sel_toggleBoldface_ == a3)
                                                                  {
                                                                    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                    v44 = objc_claimAutoreleasedReturnValue();
                                                                    if (!v44)
                                                                      goto LABEL_80;
                                                                    v45 = (void *)v44;
                                                                    v46 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", a3);

                                                                    if (!v46)
                                                                      goto LABEL_80;
                                                                    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                    objc_msgSend(WeakRetained, "_responderForEditing");
                                                                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                                                                    objc_msgSend(v24, "toggleBoldface:", 0);
                                                                  }
                                                                  else if (sel_toggleItalics_ == a3)
                                                                  {
                                                                    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                    v47 = objc_claimAutoreleasedReturnValue();
                                                                    if (!v47)
                                                                      goto LABEL_80;
                                                                    v48 = (void *)v47;
                                                                    v49 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", a3);

                                                                    if (!v49)
                                                                      goto LABEL_80;
                                                                    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                    objc_msgSend(WeakRetained, "_responderForEditing");
                                                                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                                                                    objc_msgSend(v24, "toggleItalics:", 0);
                                                                  }
                                                                  else if (sel_toggleUnderline_ == a3)
                                                                  {
                                                                    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                    v50 = objc_claimAutoreleasedReturnValue();
                                                                    if (!v50)
                                                                      goto LABEL_80;
                                                                    v51 = (void *)v50;
                                                                    v52 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", a3);

                                                                    if (!v52)
                                                                      goto LABEL_80;
                                                                    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                    objc_msgSend(WeakRetained, "_responderForEditing");
                                                                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                                                                    objc_msgSend(v24, "toggleUnderline:", 0);
                                                                  }
                                                                  else
                                                                  {
                                                                    if (sel_performUndo == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                      v53 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v53, "_responderForEditing");
                                                                      v54 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v54, "undoManager");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();

                                                                      if (WeakRetained
                                                                        && objc_msgSend(WeakRetained, "canUndo"))
                                                                      {
                                                                        objc_msgSend(WeakRetained, "undo");
                                                                      }
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_performRedo == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                      v55 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v55, "_responderForEditing");
                                                                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v56, "undoManager");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();

                                                                      if (WeakRetained
                                                                        && objc_msgSend(WeakRetained, "canRedo"))
                                                                      {
                                                                        objc_msgSend(WeakRetained, "redo");
                                                                      }
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_beginUndoGrouping == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v57, "_responderForEditing");
                                                                      v58 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v58, "undoManager");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();

                                                                      if (WeakRetained)
                                                                        objc_msgSend(WeakRetained, "beginUndoGrouping");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_endUndoGrouping == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                                                                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v59, "_responderForEditing");
                                                                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(v60, "undoManager");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();

                                                                      if (WeakRetained)
                                                                        objc_msgSend(WeakRetained, "endUndoGrouping");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_removeSelectedText == a3)
                                                                    {
                                                                      +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(WeakRetained, "removeSelectedText");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_handleRemoteKeyboardCameraEvent_selfDestruct == a3)
                                                                    {
                                                                      +[UIKeyboardCameraSession activeSession](UIKeyboardCameraSession, "activeSession");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(WeakRetained, "endActiveSession");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_handleStickerEvent_presentCard == a3)
                                                                    {
                                                                      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
                                                                      objc_msgSend(WeakRetained, "handleStickerEvent_presentCard");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_lookUpResponderChainForCustomInputView == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager lookUpResponderChainForCustomInputView](self, "lookUpResponderChainForCustomInputView");
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_setupForAsyncDelegate == a3)
                                                                    {
                                                                      +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(WeakRetained, "setupForAsyncDelegate");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel__presentDictationMenuIfAllowed == a3)
                                                                    {
                                                                      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
                                                                      objc_msgSend(WeakRetained, "_presentDictationMenuIfAllowed");
                                                                      goto LABEL_91;
                                                                    }
                                                                    if (sel_enableTransientSelectionMode == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager enableTransientSelectionMode](self, "enableTransientSelectionMode");
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_disableTransientSelectionMode == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager disableTransientSelectionMode](self, "disableTransientSelectionMode");
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_optOutASPInTextField == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager optOutASPInTextField](self, "optOutASPInTextField");
                                                                      goto LABEL_80;
                                                                    }
                                                                    if (sel_setCursorGlowViewMode == a3)
                                                                    {
                                                                      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(WeakRetained, "selectionDisplayInteraction");
                                                                      v61 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      v24 = v61;
                                                                      v62 = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                      if (sel_setTrailingGlowViewMode != a3)
                                                                      {
                                                                        _UIKeyboardImplLog();
                                                                        v8 = objc_claimAutoreleasedReturnValue();
                                                                        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
                                                                        {
                                                                          NSStringFromSelector(a3);
                                                                          v63 = (void *)objc_claimAutoreleasedReturnValue();
                                                                          v64 = 138412290;
                                                                          v65 = v63;
                                                                          _os_log_error_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unsupported action selector %@", (uint8_t *)&v64, 0xCu);

                                                                        }
                                                                        goto LABEL_80;
                                                                      }
                                                                      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                                      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
                                                                      objc_msgSend(WeakRetained, "selectionDisplayInteraction");
                                                                      v61 = (void *)objc_claimAutoreleasedReturnValue();
                                                                      v24 = v61;
                                                                      v62 = 2;
                                                                    }
                                                                    objc_msgSend(v61, "_setGlowViewMode:", v62);
                                                                  }
                                                                }
                                                                goto LABEL_112;
                                                              }
                                                              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                              v41 = (void *)objc_claimAutoreleasedReturnValue();
                                                              WeakRetained = v41;
                                                              v42 = 1;
                                                            }
                                                            objc_msgSend(v41, "_moveToEndOfDocument:withHistory:", v42, v5);
                                                            v19 = objc_claimAutoreleasedReturnValue();
LABEL_111:
                                                            v24 = (void *)v19;
                                                            -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", v19);
LABEL_112:

                                                            goto LABEL_91;
                                                          }
                                                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                          v39 = (void *)objc_claimAutoreleasedReturnValue();
                                                          WeakRetained = v39;
                                                          v40 = 1;
                                                        }
                                                        objc_msgSend(v39, "_moveToStartOfDocument:withHistory:", v40, v5);
                                                        v19 = objc_claimAutoreleasedReturnValue();
                                                        goto LABEL_111;
                                                      }
                                                      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                      v37 = (void *)objc_claimAutoreleasedReturnValue();
                                                      WeakRetained = v37;
                                                      v38 = 1;
                                                    }
                                                    objc_msgSend(v37, "_moveToEndOfParagraph:withHistory:", v38, v5);
                                                    v19 = objc_claimAutoreleasedReturnValue();
                                                    goto LABEL_111;
                                                  }
                                                  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                                                  WeakRetained = v35;
                                                  v36 = 1;
                                                }
                                                objc_msgSend(v35, "_moveToStartOfParagraph:withHistory:", v36, v5);
                                                v19 = objc_claimAutoreleasedReturnValue();
                                                goto LABEL_111;
                                              }
                                              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                              v33 = (void *)objc_claimAutoreleasedReturnValue();
                                              WeakRetained = v33;
                                              v34 = 1;
                                            }
                                            objc_msgSend(v33, "_moveToEndOfLine:withHistory:", v34, v5);
                                            v19 = objc_claimAutoreleasedReturnValue();
                                            goto LABEL_111;
                                          }
                                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                          v31 = (void *)objc_claimAutoreleasedReturnValue();
                                          WeakRetained = v31;
                                          v32 = 1;
                                        }
                                        objc_msgSend(v31, "_moveToStartOfLine:withHistory:", v32, v5);
                                        v19 = objc_claimAutoreleasedReturnValue();
                                        goto LABEL_111;
                                      }
                                      goto LABEL_117;
                                    }
LABEL_106:
                                    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                    v20 = (void *)objc_claimAutoreleasedReturnValue();
                                    WeakRetained = v20;
                                    v21 = 0;
LABEL_107:
                                    objc_msgSend(v20, "_moveToEndOfWord:withHistory:", v21, v5);
                                    v19 = objc_claimAutoreleasedReturnValue();
                                    goto LABEL_111;
                                  }
                                  goto LABEL_116;
                                }
LABEL_104:
                                -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                                v17 = (void *)objc_claimAutoreleasedReturnValue();
                                WeakRetained = v17;
                                v18 = 0;
LABEL_105:
                                objc_msgSend(v17, "_moveToStartOfWord:withHistory:", v18, v5);
                                v19 = objc_claimAutoreleasedReturnValue();
                                goto LABEL_111;
                              }
                              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                              v29 = (void *)objc_claimAutoreleasedReturnValue();
                              WeakRetained = v29;
                              v30 = 1;
                            }
                            objc_msgSend(v29, "_moveUp:withHistory:", v30, v5);
                            v19 = objc_claimAutoreleasedReturnValue();
                            goto LABEL_111;
                          }
                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                          v27 = (void *)objc_claimAutoreleasedReturnValue();
                          WeakRetained = v27;
                          v28 = 1;
                        }
                        objc_msgSend(v27, "_moveDown:withHistory:", v28, v5);
                        v19 = objc_claimAutoreleasedReturnValue();
                        goto LABEL_111;
                      }
                      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      WeakRetained = v25;
                      v26 = 1;
                    }
                    objc_msgSend(v25, "_moveRight:withHistory:", v26, v5);
                    v19 = objc_claimAutoreleasedReturnValue();
                    goto LABEL_111;
                  }
                  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  WeakRetained = v22;
                  v23 = 1;
                }
                objc_msgSend(v22, "_moveLeft:withHistory:", v23, v5);
                v19 = objc_claimAutoreleasedReturnValue();
                goto LABEL_111;
              }
              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
              WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(WeakRetained, "_deleteByWord");
LABEL_91:

              goto LABEL_80;
            }
LABEL_97:
            v15 = self;
            v16 = 1;
LABEL_98:
            -[_UIKeyboardStateManager handleTabWithShift:beforePublicKeyCommands:](v15, "handleTabWithShift:beforePublicKeyCommands:", v16, 0);
            goto LABEL_80;
          }
          v7 = CFSTR("\");
        }
      }
LABEL_79:
      -[_UIKeyboardStateManager insertTextIfShould:](self, "insertTextIfShould:", v7);
      goto LABEL_80;
    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "shouldDeleteForward");

    if (v11)
      -[_UIKeyboardStateManager deleteForwardAndNotify:](self, "deleteForwardAndNotify:", 1);
  }
LABEL_80:
  -[_UIKeyboardStateManager arrowKeyHistory](self, "arrowKeyHistory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
    -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");

}

- (TIDocumentState)documentState
{
  void *v2;
  void *v3;
  id v4;
  void *v5;

  -[TIKeyboardState documentState](self->m_keyboardState, "documentState");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = v2;
  else
    v4 = objc_alloc_init(MEMORY[0x1E0DBDB78]);
  v5 = v4;

  return (TIDocumentState *)v5;
}

- (void)setDocumentState:(id)a3
{
  id v4;
  void *v5;
  char v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!v4)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (qword_1ECD7D200 != -1)
        dispatch_once(&qword_1ECD7D200, &__block_literal_global_649);
      objc_msgSend((id)qword_1ECD7D208, "dateByAddingTimeInterval:", 14400.0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "now");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "earlierDate:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10 == v8)
      {
        v11 = qword_1ECD7D210;
        if (!qword_1ECD7D210)
        {
          v11 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v11, (unint64_t *)&qword_1ECD7D210);
        }
        v12 = *(NSObject **)(v11 + 8);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v14 = 134218242;
          v15 = 1801640960;
          v16 = 2114;
          v17 = CFSTR("Nil document state as argument to -[UIKeyboardInput setDocumentState:]");
          _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "Exception Code %llx - %{public}@", (uint8_t *)&v14, 0x16u);
        }
        v13 = getpid();
        __UISimulateCrash(v13);
      }

    }
    v4 = objc_alloc_init(MEMORY[0x1E0DBDB78]);
  }
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isEqual:", v5);

  -[TIKeyboardState setDocumentState:](self->m_keyboardState, "setDocumentState:", v4);
  if ((v6 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "documentStateDidChange");

  }
  os_variant_has_internal_diagnostics();

}

- (id)_rtiDocumentStateForAutoFillPopover
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  void *v46;
  void *v47;

  if (+[UIKeyboard inputUIOOP](UIKeyboard, "inputUIOOP"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "documentState");
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = objc_alloc_init(MEMORY[0x1E0D87178]);
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "textInputView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "window");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bounds");
    objc_msgSend(v3, "convertRect:toView:", v6);
    objc_msgSend(v4, "setClientFrameInWindow:");
    objc_msgSend(v4, "clientFrameInWindow");
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    objc_msgSend(v6, "screen");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "coordinateSpace");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "convertRect:toCoordinateSpace:", v16, v8, v10, v12, v14);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v24 = v23;

    if (objc_msgSend(v6, "_isHostedInAnotherProcess"))
    {
      objc_msgSend(v6, "windowScene");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[UITextEffectsWindow activeTextEffectsWindowForWindowScene:](UITextEffectsWindow, "activeTextEffectsWindowForWindowScene:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "hostedViewReference");
      v28 = v27;
      v30 = v29;

      v18 = v18 + v28;
      v20 = v20 + v30;
    }
    objc_msgSend(v4, "setClientFrameInEntitySpace:", v18, v20, v22, v24);
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "selectedTextRange");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "start");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v33;
    if (v33)
    {
      v35 = v33;
    }
    else
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "beginningOfDocument");
      v35 = (id)objc_claimAutoreleasedReturnValue();

    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "caretRectForPosition:", v35);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v45 = v44;

    objc_msgSend(v3, "window");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "convertRect:toView:", v46, v39, v41, v43, v45);
    objc_msgSend(v4, "setCaretRectInWindow:");

    -[_UIKeyboardStateManager documentState](self, "documentState");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setDocumentState:", v47);

  }
  return v4;
}

- (void)didClearText
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "forwardingInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v7 = v5;
      objc_msgSend(v5, "textOperations");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setTextToAssert:", &stru_1E16EDF20);

      objc_msgSend(v7, "flushOperations");
      v5 = v7;
    }

  }
}

- (BOOL)callShouldInsertText:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  void *v9;
  BOOL v10;

  v4 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "keyInputDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = -[_UIKeyboardStateManager callShouldInsertText:onDelegate:](self, "callShouldInsertText:onDelegate:", v4, v6);
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "keyInputDelegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = v6 == v9 && v7;
  return v10;
}

- (BOOL)insertTextIfShould:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;

  v4 = a3;
  v5 = -[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v4);
  if (v5)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "insertText:", v4);

  }
  return v5;
}

- (void)performSendAction
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "performSendAction");

}

- (void)performKeyboardActionButtonAction
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "performKeyboardActionButtonAction");

}

- (BOOL)usesAutoDeleteWord
{
  void *v4;
  char v5;

  if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry"))
    return 0;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "usesAutoDeleteWord");

  return v5;
}

- (BOOL)shouldRapidDelete
{
  void *v3;
  void *v4;
  BOOL v5;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "legacyInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (objc_opt_respondsToSelector() & 1) != 0
    && -[_UIKeyboardStateManager shouldRapidDeleteWithDelegate](self, "shouldRapidDeleteWithDelegate");

  return v5;
}

- (BOOL)shouldRapidDeleteWithDelegate
{
  return self->m_autoDeleteOK && self->m_autoDeleteCount > 0x13;
}

- (BOOL)callShouldDeleteWithWordCountForRapidDelete:(int)a3 characterCountForRapidDelete:(int)a4
{
  uint64_t v5;
  void *v7;
  void *v8;
  char v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v5 = *(_QWORD *)&a3;
  self->m_textInputChangesIgnored = 1;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "legacyInputDelegate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_opt_respondsToSelector();

  if ((v9 & 1) == 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_opt_respondsToSelector();

    if ((v14 & 1) == 0)
    {
      v31 = 1;
      goto LABEL_20;
    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "selectedTextRange");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v16, "isEmpty"))
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "start");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "beginningOfDocument");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v17, "comparePosition:toPosition:", v18, v20);

      if (v21)
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "start");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "positionFromPosition:offset:", v23, -1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        if (v24)
        {
          -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "end");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "textRangeFromPosition:toPosition:", v24, v26);
          v27 = objc_claimAutoreleasedReturnValue();

          v16 = v25;
        }
        else
        {
          v27 = 0;
        }

        v16 = (void *)v27;
      }
    }
    if (!v16)
    {
      v31 = 1;
      goto LABEL_19;
    }
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v28, "shouldChangeTextInRange:replacementText:", v16, &stru_1E16EDF20);
LABEL_18:

LABEL_19:
    goto LABEL_20;
  }
  if (!-[_UIKeyboardStateManager shouldRapidDeleteWithDelegate](self, "shouldRapidDeleteWithDelegate"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "legacyInputDelegate");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "legacyInputDelegate");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v28, "keyboardInputShouldDelete:", v30);

    goto LABEL_18;
  }
  v10 = -[_UIKeyboardStateManager usesAutoDeleteWord](self, "usesAutoDeleteWord");
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v10)
    objc_msgSend(v11, "_expandSelectionToStartOfWordsBeforeCaretSelection:", v5);
  else
    objc_msgSend(v11, "_extendCurrentSelection:", -a4);

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "legacyInputDelegate");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "legacyInputDelegate");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v33, "keyboardInputShouldDelete:", v35);

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "_setCaretSelectionAtEndOfSelection");

  -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
LABEL_20:
  self->m_textInputChangesIgnored = 0;
  return v31;
}

- (void)callChangedDelegate
{
  void *v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;

  -[_UIKeyboardStateManager changedDelegate](self, "changedDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[_UIKeyboardStateManager changedDelegate](self, "changedDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "legacyInputDelegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "keyboardInputChanged:", v7);

  }
  -[_UIKeyboardStateManager setChangedDelegate:](self, "setChangedDelegate:", 0);
}

- (void)setChangedDelegate
{
  void *v3;
  void *v4;
  void *v5;
  id WeakRetained;
  id v7;

  -[_UIKeyboardStateManager changedDelegate](self, "changedDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "keyInputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setChangedDelegate:](self, "setChangedDelegate:", v5);

  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateObserverState");

  -[_UIKeyboardStateManager textSelectionController](self, "textSelectionController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "textDidChange");

}

- (BOOL)shouldAllowRepeatEvent:(id)a3
{
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "_modifiedInput");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_isDelete");

  if ((v6 & 1) != 0
    || -[_UIKeyboardStateManager canPresentPressAndHoldPopover:](self, "canPresentPressAndHoldPopover:", v4))
  {
    goto LABEL_7;
  }
  if (!objc_msgSend(v4, "_hidEvent"))
  {
    LOBYTE(v7) = 0;
    goto LABEL_8;
  }
  if (qword_1ECD7D220 != -1)
    dispatch_once(&qword_1ECD7D220, &__block_literal_global_660);
  if ((unint64_t)(objc_msgSend(v4, "_keyCode") - 79) < 4)
  {
LABEL_7:
    LOBYTE(v7) = 1;
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v9 = (id)qword_1ECD7D218;
    v7 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v7)
    {
      v10 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v9);
          v12 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
          objc_msgSend(v4, "_modifiedInput", (_QWORD)v15);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "rangeOfCharacterFromSet:", v12);

          if (v14 != 0x7FFFFFFFFFFFFFFFLL)
          {
            LOBYTE(v7) = 1;
            goto LABEL_20;
          }
        }
        v7 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_20:

  }
LABEL_8:

  return v7;
}

- (id)_targetForResponderCommand:(SEL)a3
{
  void *v4;
  void *v5;
  void *v6;

  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_responderForEditing");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _UIResponderTargetForAction(v5, a3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (BOOL)_canHandleResponderCommand:(SEL)a3
{
  void *v4;

  -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a3) = objc_msgSend(v4, "canPerformAction:withSender:", a3, 0);

  return (char)a3;
}

- (BOOL)_canHandleResponderCommandConservatively:(SEL)a3
{
  _BOOL4 v5;
  void *v6;
  void *v7;
  char v8;
  char v9;

  v5 = -[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents");
  -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5)
    v8 = objc_msgSend(v6, "canPerformAction:withSender:", a3, 0);
  else
    v8 = objc_opt_respondsToSelector();
  v9 = v8;

  return v9 & 1;
}

- (BOOL)_cancelOperation:(BOOL)a3 testOnly:(BOOL)a4
{
  uint64_t v4;
  _BOOL8 v5;
  id WeakRetained;

  v4 = a4;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  LOBYTE(v4) = objc_msgSend(WeakRetained, "_cancelOperation:testOnly:", v5, v4);

  return v4;
}

- (BOOL)isCurrentEditResponderWebKit
{
  void *v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  BOOL v7;

  if (WebKitFramework)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

  }
  else
  {
    isKindOfClass = 0;
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "asyncCapableInputDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6 != 0;

  return (isKindOfClass | v7) & 1;
}

- (BOOL)isCurrentEditResponderInEditingMode
{
  void *v3;
  char isKindOfClass;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;

  if (WebKitFramework)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

  }
  else
  {
    isKindOfClass = 0;
  }
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_responderForEditing");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if ((isKindOfClass & 1) != 0 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_opt_respondsToSelector();

    if ((v9 & 1) != 0)
    {
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v10, "isEditable"))
      {
        v7 = 0;
LABEL_19:

        goto LABEL_20;
      }
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v11, "isFirstResponder");
    }
    else
    {
      -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_opt_respondsToSelector();

      if ((v13 & 1) == 0)
        goto LABEL_15;
      -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "viewCouldBecomeEditable:", v11))
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v14, "isFirstResponder");

      }
      else
      {
        v7 = 0;
      }
    }

    goto LABEL_19;
  }
  if (!objc_msgSend(v6, "isEditing"))
  {
LABEL_15:
    v7 = 0;
    goto LABEL_20;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = objc_msgSend(v6, "isEditable");
  else
    v7 = 1;
LABEL_20:

  return v7;
}

- (BOOL)handleKeyCommand:(id)a3 repeatOkay:(BOOL *)a4 beforePublicKeyCommands:(BOOL)a5
{
  id v8;
  id v9;
  _QWORD v11[5];
  id v12;
  uint64_t *v13;
  BOOL *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v8 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __79___UIKeyboardStateManager_handleKeyCommand_repeatOkay_beforePublicKeyCommands___block_invoke;
  v11[3] = &unk_1E16BB1E8;
  v15 = a5;
  v13 = &v16;
  v11[4] = self;
  v9 = v8;
  v12 = v9;
  v14 = a4;
  -[_UIKeyboardStateManager performOperations:withTextInputSource:](self, "performOperations:withTextInputSource:", v11, 0);
  LOBYTE(a4) = *((_BYTE *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return (char)a4;
}

- (BOOL)shouldShowKeyboardMenu
{
  void *v3;
  void *v4;
  void *v5;
  int v6;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "keyInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "_disableAutomaticKeyboardUI") ^ 1;

  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)inputModeSwitcherVisible
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "inputModeSwitcherVisible");

  return v3;
}

- (void)setInputModeSwitcherVisibleInRemote:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "setInputModeSwitcherVisibleInRemote:", v3);

}

- (unint64_t)handleKeyCommand:(id)a3 repeatOkay:(BOOL *)a4 options:(unint64_t)a5
{
  id v6;
  _BOOL4 v7;
  _BOOL4 v8;
  id v9;
  void *v10;
  unsigned __int16 v11;
  int v12;
  BOOL v13;
  BOOL v14;
  _BOOL4 v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  id v21;
  int v22;
  _BOOL4 v23;
  void *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  int v30;
  BOOL v31;
  void *v32;
  int v33;
  int v34;
  void *v35;
  uint64_t v36;
  id WeakRetained;
  void *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  int v57;
  char v58;
  id v59;
  void *v60;
  char v61;
  int v62;
  void *v63;
  void *v64;
  char v65;
  int v66;
  id v67;
  int v68;
  int v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  int v82;
  void *v83;
  char v84;
  int v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  id v90;
  int v91;
  id v92;
  int v93;
  id v94;
  void *v95;
  char v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  char v103;
  void *v104;
  char v105;
  id v106;
  int v107;
  id v108;
  void *v109;
  char v110;
  int v111;
  id v112;
  char v113;
  id v114;
  void *v115;
  char v116;
  char v117;
  _BOOL4 v118;
  void *v119;
  void *v120;
  id v121;
  void *v122;
  id v123;
  void *v124;
  unsigned int v125;
  int v126;
  uint64_t *v127;
  unsigned __int16 v128;
  unsigned __int16 v129;
  int v130;
  void *v131;
  char v132;
  void *v133;
  BOOL v134;
  void *v135;
  char v136;
  void *v137;
  BOOL v138;
  unsigned __int16 v139;
  unsigned __int16 v140;
  int v141;
  void *v142;
  char v143;
  void *v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  char v149;
  char v150;
  int v151;
  void *v152;
  char v153;
  int v154;
  void *v155;
  void *v156;
  char v157;
  void *v158;
  char v159;
  void *v160;
  void *v161;
  int v162;
  __CFString **v163;
  void *v164;
  char v165;
  char v166;
  void *v167;
  BOOL v168;
  int v169;
  void *v170;
  char v171;
  void *v172;
  BOOL v173;
  void *v174;
  char v175;
  void *v176;
  BOOL v177;
  int v178;
  void *v179;
  char v180;
  char v181;
  void *v182;
  BOOL v183;
  void *v184;
  char v185;
  void *v186;
  BOOL v187;
  BOOL v188;
  void *v189;
  char v190;
  int v191;
  void *v192;
  char v193;
  void *v194;
  char v195;
  void *v196;
  char v197;
  int v198;
  void *v199;
  char v200;
  void *v201;
  char v202;
  void *v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  id v207;
  void *v208;
  uint64_t v209;
  id v210;
  void *v211;
  uint64_t v212;
  int v213;
  unsigned __int16 v214;
  unsigned __int16 v215;
  int v216;
  void *v217;
  char v218;
  void *v219;
  BOOL v220;
  void *v221;
  char v222;
  void *v223;
  BOOL v224;
  unsigned __int16 v225;
  unsigned __int16 v226;
  int v227;
  void *v228;
  char v229;
  void *v230;
  BOOL v231;
  void *v232;
  char v233;
  void *v234;
  BOOL v235;
  char v236;
  void *v237;
  void *v238;
  void *v239;
  BOOL v240;
  int v241;
  void *v242;
  void *v243;
  int v244;
  BOOL v245;
  BOOL v246;
  char v247;
  BOOL v248;
  void *v249;
  uint64_t v251;
  unsigned int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  char v259;
  uint64_t (**v260)(void *, char *);
  char v261;
  uint64_t (**v262)(void);
  void *v263;
  void *v264;
  int v265;
  int v267;
  void *v268;
  int v269;
  _QWORD v270[5];
  _QWORD v271[5];
  _QWORD v272[5];
  _QWORD v273[5];
  _QWORD v274[4];
  id v275;
  _QWORD v276[5];
  id v277;
  BOOL v278;
  _QWORD v279[5];
  id v280;
  BOOL v281;
  _QWORD v282[5];
  id v283;
  BOOL v284;
  _QWORD v285[5];
  id v286;
  BOOL v287;
  _QWORD v288[5];
  id v289;
  id v290;
  uint64_t *v291;
  char v292;
  char v293;
  BOOL v294;
  _QWORD v295[5];
  id v296;
  id v297;
  uint64_t *v298;
  char v299;
  char v300;
  BOOL v301;
  _QWORD v302[5];
  _QWORD v303[5];
  _QWORD aBlock[5];
  _QWORD v305[4];
  id v306;
  BOOL v307;
  BOOL v308;
  BOOL v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  char v314;

  v269 = a5;
  v6 = a3;
  v311 = 0;
  v312 = &v311;
  v313 = 0x2020000000;
  v314 = 1;
  v310 = 1;
  v309 = 0;
  v7 = -[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents");
  v8 = -[_UIKeyboardStateManager liveConversionEnabled](self, "liveConversionEnabled");
  v9 = v6;
  v10 = (void *)objc_msgSend(v9, "_cloneEvent");

  objc_msgSend(v10, "_privatize");
  v268 = v9;
  v11 = objc_msgSend(v10, "_keyCode");
  v12 = objc_msgSend(v10, "_gsModifierFlags");
  v265 = v12 & 0x220000;
  v13 = (v12 & 0x220000) != 0;
  v267 = v12;
  v258 = v12 & 0x1010000;
  v14 = (v12 & 0x1010000) != 0;
  if (objc_msgSend(v10, "_isGlobeKey"))
  {
    if (objc_msgSend(v10, "_isKeyDown"))
    {
      -[_UIKeyboardStateManager setPreviousGlobeKeyEvent:](self, "setPreviousGlobeKeyEvent:", v10);
      v15 = 1;
    }
    else
    {
      if (self->m_previousGlobeKeyEvent)
      {
        objc_msgSend(v10, "_hidEvent");
        BKSHIDEventGetBaseAttributes();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (objc_msgSend(v16, "options") & 0x80) == 0;

      }
      else
      {
        v15 = 1;
      }
      objc_msgSend(v10, "timestamp");
      v18 = v17;
      -[UIEvent timestamp](self->m_previousGlobeKeyEvent, "timestamp");
      if (v18 - v19 > 0.9)
        v15 = 1;
      -[_UIKeyboardStateManager setPreviousGlobeKeyEvent:](self, "setPreviousGlobeKeyEvent:", 0);
    }
  }
  else
  {
    if ((v267 & 0x4000000) != 0)
      -[_UIKeyboardStateManager setPreviousGlobeKeyEvent:](self, "setPreviousGlobeKeyEvent:", 0);
    v15 = 0;
  }
  objc_msgSend(MEMORY[0x1E0DAFEC0], "sharedInstance");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v305[0] = MEMORY[0x1E0C809B0];
  v305[1] = 3221225472;
  v305[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke;
  v305[3] = &unk_1E16BB210;
  v307 = v13;
  v308 = v14;
  v21 = v10;
  v306 = v21;
  objc_msgSend(v20, "logBlock:domain:", v305, CFSTR("com.apple.keyboard.UIKit"));

  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1
    || objc_msgSend((id)UIApp, "_areKeyboardHUDsEnabled"))
  {
    v22 = objc_msgSend(v21, "_isGlobeKey");
    if ((v269 & 1) != 0 || ((v22 ^ 1) & 1) != 0)
      v23 = ((v15 | !-[_UIKeyboardStateManager shouldShowKeyboardMenu](self, "shouldShowKeyboardMenu")) & 1) == 0
         && (objc_msgSend(v21, "keyEventForwardedFromInputUIHost") & 1) == 0
         && -[_UIKeyboardStateManager handleInputSwitcherForKeyEvent:](self, "handleInputSwitcherForKeyEvent:", v268);
    else
      v23 = 1;
    if (-[_UIKeyboardStateManager inputModeSwitcherVisible](self, "inputModeSwitcherVisible")
      && objc_msgSend(v21, "_isGlobeKey")
      && objc_msgSend(v21, "_isKeyDown"))
    {
      +[UIKeyShortcutHUDService sharedHUDService](UIKeyShortcutHUDService, "sharedHUDService");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "preventUnintendedSystemHUDPresentationIfNeeded");

    }
    if (v23)
    {
      if (a4)
        *a4 = 0;
      v25 = 1;
LABEL_30:
      v26 = v21;
      goto LABEL_619;
    }
  }
  if ((v269 & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "keyInputDelegate");
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v28)
    {
      v25 = 0;
      if (a4)
        *a4 = 0;
      goto LABEL_30;
    }
    v264 = 0;
    v29 = 1;
    v30 = v267;
  }
  else
  {
    v30 = v267;
    if ((v269 & 3) != 0)
    {
      v264 = 0;
      v29 = 1;
    }
    else
    {
      -[_UIKeyboardStateManager arrowKeyHistory](self, "arrowKeyHistory");
      v264 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", 0);
      v29 = 0;
    }
  }
  -[_UIKeyboardStateManager setHandlingKeyCommandFromHardwareKeyboard:](self, "setHandlingKeyCommandFromHardwareKeyboard:", 1);
  v31 = -[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText");
  if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v253 = objc_msgSend(v32, "supportsSetPhraseBoundary") ^ 1;

  }
  else
  {
    LOBYTE(v253) = 0;
  }
  v259 = v29;
  if (!self->m_candidateList
    || -[_UIKeyboardStateManager isPredictionViewControllerVisible](self, "isPredictionViewControllerVisible"))
  {
    v257 = 0;
    v33 = 0;
    v252 = 0;
    v34 = 0;
    goto LABEL_54;
  }
  if (-[UIKeyboardCandidateList hasCandidates](self->m_candidateList, "hasCandidates")
    && -[TIKeyboardCandidateResultSet hasCandidates](self->m_candidateResultSet, "hasCandidates"))
  {
    -[TIKeyboardState inputForMarkedText](self->m_keyboardState, "inputForMarkedText");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v35, "length"))
    {

LABEL_52:
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "candidateController");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v257 = objc_msgSend(v38, "inlineRectIsVertical");

      v34 = -[UIKeyboardCandidateList isExtendedList](self->m_candidateList, "isExtendedList");
      v33 = 1;
      goto LABEL_53;
    }
    v36 = -[UIKeyboardCandidateList currentIndex](self->m_candidateList, "currentIndex");

    if (v36 != 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_52;
  }
  v257 = 0;
  v33 = 0;
  v34 = 0;
LABEL_53:
  v252 = 1;
LABEL_54:
  v254 = v30 & 0x5D90000;
  v39 = v30 & 0x5D90000 | v11;
  v255 = v33;
  if (v8)
    v40 = v31;
  else
    v40 = v33;
  v261 = v40;
  v41 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_2;
  aBlock[3] = &unk_1E16BB238;
  aBlock[4] = self;
  v260 = (uint64_t (**)(void *, char *))_Block_copy(aBlock);
  v303[0] = v41;
  v303[1] = 3221225472;
  v303[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_3;
  v303[3] = &unk_1E16BB238;
  v303[4] = self;
  v263 = _Block_copy(v303);
  v302[0] = v41;
  v302[1] = 3221225472;
  v302[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_4;
  v302[3] = &unk_1E16B2268;
  v302[4] = self;
  v262 = (uint64_t (**)(void))_Block_copy(v302);
  v26 = v21;
  objc_msgSend(v21, "setKeyCommandCode:", v39);
  objc_msgSend(v21, "setKeyCommandHandlingBeforePublic:", v269 & 1);
  v42 = v269 & 2;
  v256 = v269 & v7;
  if ((int)v39 > 524363)
  {
    if ((int)v39 > 8388681)
    {
      switch((int)v39)
      {
        case 8388682:
          goto LABEL_79;
        case 8388683:
        case 8388684:
        case 8388686:
          goto LABEL_211;
        case 8388685:
          goto LABEL_94;
        case 8388687:
          goto LABEL_95;
        case 8388688:
          goto LABEL_97;
        case 8388689:
          goto LABEL_99;
        case 8388690:
          goto LABEL_102;
        default:
          switch((int)v39)
          {
            case 16777290:
              goto LABEL_79;
            case 16777291:
            case 16777292:
            case 16777294:
              goto LABEL_211;
            case 16777293:
              goto LABEL_94;
            case 16777295:
              goto LABEL_95;
            case 16777296:
              goto LABEL_97;
            case 16777297:
              goto LABEL_99;
            case 16777298:
              goto LABEL_102;
            default:
              if ((_DWORD)v39 == 16777258)
                goto LABEL_152;
              goto LABEL_211;
          }
      }
    }
    if ((int)v39 <= 4194345)
    {
      switch((int)v39)
      {
        case 1048650:
          goto LABEL_79;
        case 1048651:
        case 1048652:
        case 1048654:
          goto LABEL_211;
        case 1048653:
          goto LABEL_94;
        case 1048655:
          goto LABEL_95;
        case 1048656:
          goto LABEL_97;
        case 1048657:
          goto LABEL_99;
        case 1048658:
          goto LABEL_102;
        default:
          switch((int)v39)
          {
            case 524364:
              goto LABEL_81;
            case 524367:
              goto LABEL_111;
            case 524368:
              goto LABEL_115;
            case 524369:
              goto LABEL_119;
            case 524370:
              goto LABEL_122;
            default:
              goto LABEL_211;
          }
      }
    }
    switch((int)v39)
    {
      case 4194380:
LABEL_81:
        v309 = 1;
        if ((v261 & 1) != 0)
          goto LABEL_199;
        v43 = v261 ^ 1;
        if ((v269 & 1) != 0)
          goto LABEL_212;
        if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = objc_msgSend(v48, "shouldRespectForwardingInputDelegate");

          if ((v49 & 1) == 0)
          {
            if ((v269 & 2) != 0)
              goto LABEL_253;
            goto LABEL_252;
          }
        }
        if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
          && !-[UITextInputTraits displaySecureTextUsingPlainText](self->m_traits, "displaySecureTextUsingPlainText"))
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          v103 = objc_msgSend(v102, "canHandleInputDelegateCommandAction:", 5);
          *((_BYTE *)v312 + 24) = v103;

          LOBYTE(v44) = 0;
          if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
          {
            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "_deleteToEndOfLine");
            goto LABEL_226;
          }
        }
        else
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v51 = objc_msgSend(v50, "canHandleInputDelegateCommandAction:", 3);
          *((_BYTE *)v312 + 24) = v51;

          LOBYTE(v44) = 0;
          if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
          {
            -[_UIKeyboardStateManager setDisableSmartInsertDelete:](self, "setDisableSmartInsertDelete:", 1);
            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "_deleteForwardByWord");
            goto LABEL_170;
          }
        }
        goto LABEL_257;
      case 4194381:
      case 4194382:
        goto LABEL_211;
      case 4194383:
LABEL_111:
        v43 = v261 ^ 1;
        v309 = 1;
        v44 = v262[2]();
        if (v31)
        {
          if (!v257)
            goto LABEL_208;
          v56 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          v44 = objc_msgSend(v56, "isPressAndHoldPopoverPresented");

          if (!v44)
            goto LABEL_257;
          goto LABEL_203;
        }
        if ((v269 & 1) != 0)
          goto LABEL_212;
        if ((v253 & 1) != 0)
          goto LABEL_227;
        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
              v86 = (void *)objc_claimAutoreleasedReturnValue(),
              v87 = objc_msgSend(v86, "shouldRespectForwardingInputDelegate"),
              v86,
              (v87 & 1) != 0))
        {
          v295[0] = MEMORY[0x1E0C809B0];
          v295[1] = 3221225472;
          v295[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_5;
          v295[3] = &unk_1E16BB260;
          v299 = v44;
          v298 = &v311;
          v300 = (v269 & 2) >> 1;
          v297 = v263;
          v295[4] = self;
          v301 = v13;
          v296 = v264;
          -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v295);

          v63 = v297;
          goto LABEL_197;
        }
        if ((v269 & 2) == 0)
          goto LABEL_252;
        goto LABEL_253;
      case 4194384:
LABEL_115:
        v43 = v261 ^ 1;
        v309 = 1;
        v57 = v262[2]();
        v58 = v57;
        if (v31)
        {
          if ((v257 & 1) == 0)
          {
            v44 = v57 ^ 1;
            goto LABEL_208;
          }
          v59 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          v44 = objc_msgSend(v59, "isPressAndHoldPopoverPresented");

          if (!v44)
            goto LABEL_257;
          goto LABEL_203;
        }
        if ((v269 & 1) != 0)
          goto LABEL_212;
        if ((v253 & 1) != 0)
          goto LABEL_227;
        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
              v88 = (void *)objc_claimAutoreleasedReturnValue(),
              v89 = objc_msgSend(v88, "shouldRespectForwardingInputDelegate"),
              v88,
              (v89 & 1) != 0))
        {
          v288[0] = MEMORY[0x1E0C809B0];
          v288[1] = 3221225472;
          v288[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_6;
          v288[3] = &unk_1E16BB260;
          v292 = v58;
          v291 = &v311;
          v293 = (v269 & 2) >> 1;
          v290 = v263;
          v288[4] = self;
          v294 = v13;
          v289 = v264;
          -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v288);

          v63 = v290;
          goto LABEL_197;
        }
        if ((v269 & 2) == 0)
          goto LABEL_252;
        goto LABEL_253;
      case 4194385:
LABEL_119:
        v309 = 1;
        if (v31)
        {
          v43 = v261 ^ 1;
          v44 = 0;
          if ((v257 & 1) != 0)
            goto LABEL_208;
          goto LABEL_257;
        }
        if ((v269 & 1) != 0)
          goto LABEL_211;
        v43 = v261 ^ 1;
        if ((v253 & 1) != 0)
          goto LABEL_227;
        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
              v80 = (void *)objc_claimAutoreleasedReturnValue(),
              v81 = objc_msgSend(v80, "shouldRespectForwardingInputDelegate"),
              v80,
              (v81 & 1) != 0))
        {
          v82 = (*((uint64_t (**)(void *, char *))v263 + 2))(v263, sel__moveToEndOfParagraph_withHistory_);
          LOBYTE(v44) = 0;
          *((_BYTE *)v312 + 24) = v82;
          if ((v269 & 2) == 0 && ((v82 ^ 1) & 1) == 0)
          {
            v285[0] = MEMORY[0x1E0C809B0];
            v285[1] = 3221225472;
            v285[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_7;
            v285[3] = &unk_1E16B4008;
            v285[4] = self;
            v287 = v13;
            v286 = v264;
            -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v285);
            v63 = v286;
            goto LABEL_197;
          }
          goto LABEL_257;
        }
        if ((v269 & 2) != 0)
          goto LABEL_253;
        goto LABEL_252;
      case 4194386:
LABEL_122:
        v309 = 1;
        if (v31)
        {
          v43 = v261 ^ 1;
          if ((v257 & 1) == 0)
            goto LABEL_227;
          v44 = 1;
LABEL_208:
          v55 = 1;
          goto LABEL_209;
        }
        if ((v269 & 1) != 0)
          goto LABEL_211;
        v43 = v261 ^ 1;
        if ((v253 & 1) != 0)
          goto LABEL_227;
        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
              v83 = (void *)objc_claimAutoreleasedReturnValue(),
              v84 = objc_msgSend(v83, "shouldRespectForwardingInputDelegate"),
              v83,
              (v84 & 1) != 0))
        {
          v85 = (*((uint64_t (**)(void *, char *))v263 + 2))(v263, sel__moveToStartOfParagraph_withHistory_);
          LOBYTE(v44) = 0;
          *((_BYTE *)v312 + 24) = v85;
          if ((v269 & 2) == 0 && ((v85 ^ 1) & 1) == 0)
          {
            v279[0] = MEMORY[0x1E0C809B0];
            v279[1] = 3221225472;
            v279[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_9;
            v279[3] = &unk_1E16B4008;
            v279[4] = self;
            v281 = v13;
            v280 = v264;
            -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v279);
            v63 = v280;
            goto LABEL_197;
          }
          goto LABEL_257;
        }
        if ((v269 & 2) != 0)
          goto LABEL_253;
        break;
      default:
        v69 = 4194346;
        goto LABEL_160;
    }
    goto LABEL_252;
  }
  if ((int)v39 > 143)
  {
    if ((int)v39 > 65577)
    {
      switch((int)v39)
      {
        case 65610:
LABEL_79:
          v43 = v261 ^ 1;
          v309 = 1;
          v47 = -[_UIKeyboardStateManager handleMoveCursorToStartOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:](self, "handleMoveCursorToStartOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:", v265 != 0, v269 & 1, v42 != 0, v264, 1, v263, v26);
          goto LABEL_256;
        case 65611:
        case 65612:
        case 65614:
          break;
        case 65613:
LABEL_94:
          v43 = v261 ^ 1;
          v309 = 1;
          v47 = -[_UIKeyboardStateManager handleMoveCursorToEndOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:](self, "handleMoveCursorToEndOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:", v265 != 0, v269 & 1, v42 != 0, v264, 1, v263, v26);
          goto LABEL_256;
        case 65615:
LABEL_95:
          v43 = v261 ^ 1;
          v309 = 1;
          v53 = v262[2]();
          v54 = v257 ^ 1;
          if (v53)
            v47 = -[_UIKeyboardStateManager handleMoveCursorToStartOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:](self, "handleMoveCursorToStartOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:", v265 != 0, v269 & 1, v42 != 0, v264, v54, v263, v26);
          else
            v47 = -[_UIKeyboardStateManager handleMoveCursorToEndOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:](self, "handleMoveCursorToEndOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:", v265 != 0, v269 & 1, v42 != 0, v264, v54, v263, v26);
          goto LABEL_256;
        case 65616:
LABEL_97:
          v43 = v261 ^ 1;
          v309 = 1;
          if (v262[2]())
          {
            v47 = -[_UIKeyboardStateManager handleMoveCursorToEndOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:](self, "handleMoveCursorToEndOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:", v265 != 0, v269 & 1, v42 != 0, v264, v257 ^ 1, v263, v26);
            goto LABEL_256;
          }
          v67 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          v68 = objc_msgSend(v67, "isPressAndHoldPopoverPresented");

          if (v68)
          {
LABEL_203:
            v94 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
            objc_msgSend(v94, "pressAndHoldPopoverController");
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            v96 = objc_msgSend(v95, "handleHardwareKeyboardEvent:", v26);
            *((_BYTE *)v312 + 24) = v96;

            LOBYTE(v44) = 1;
            goto LABEL_257;
          }
          v47 = -[_UIKeyboardStateManager handleMoveCursorToStartOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:](self, "handleMoveCursorToStartOfLine:beforePublicKeyCommands:testOnly:savedHistory:force:canHandleSelectableInputDelegateCommand:keyEvent:", v265 != 0, v269 & 1, v42 != 0, v264, v257 ^ 1, v263, v26);
          goto LABEL_256;
        case 65617:
LABEL_99:
          v309 = 1;
          if (v31)
          {
            v43 = v261 ^ 1;
            v44 = 0;
            if ((v257 & 1) != 0)
              goto LABEL_105;
            goto LABEL_257;
          }
          if ((v269 & 1) != 0)
            break;
          v43 = v261 ^ 1;
          if ((v253 & 1) != 0)
            goto LABEL_227;
          if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
            || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                v60 = (void *)objc_claimAutoreleasedReturnValue(),
                v61 = objc_msgSend(v60, "shouldRespectForwardingInputDelegate"),
                v60,
                (v61 & 1) != 0))
          {
            v62 = (*((uint64_t (**)(void *, char *))v263 + 2))(v263, sel__moveToEndOfDocument_withHistory_);
            LOBYTE(v44) = 0;
            *((_BYTE *)v312 + 24) = v62;
            if ((v269 & 2) == 0 && ((v62 ^ 1) & 1) == 0)
            {
              v282[0] = MEMORY[0x1E0C809B0];
              v282[1] = 3221225472;
              v282[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_8;
              v282[3] = &unk_1E16B4008;
              v282[4] = self;
              v284 = v13;
              v283 = v264;
              -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v282);
              v63 = v283;
              goto LABEL_197;
            }
            goto LABEL_257;
          }
          if ((v269 & 2) != 0)
            goto LABEL_253;
          goto LABEL_252;
        case 65618:
LABEL_102:
          v309 = 1;
          if (v31)
          {
            v43 = v261 ^ 1;
            if (v257)
            {
              v44 = 1;
LABEL_105:
              v55 = 4;
LABEL_209:
              -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](self, "movePhraseBoundaryToDirection:granularity:", v44, v55);
            }
            goto LABEL_227;
          }
          if ((v269 & 1) != 0)
            break;
          v43 = v261 ^ 1;
          if ((v253 & 1) != 0)
            goto LABEL_227;
          if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
          {
            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            v65 = objc_msgSend(v64, "shouldRespectForwardingInputDelegate");

            if ((v65 & 1) == 0)
            {
              if ((v269 & 2) != 0)
                goto LABEL_253;
              goto LABEL_252;
            }
          }
          v66 = (*((uint64_t (**)(void *, char *))v263 + 2))(v263, sel__moveToStartOfDocument_withHistory_);
          LOBYTE(v44) = 0;
          *((_BYTE *)v312 + 24) = v66;
          if ((v269 & 2) != 0 || ((v66 ^ 1) & 1) != 0)
            goto LABEL_257;
          v276[0] = MEMORY[0x1E0C809B0];
          v276[1] = 3221225472;
          v276[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_10;
          v276[3] = &unk_1E16B4008;
          v276[4] = self;
          v278 = v13;
          v277 = v264;
          -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v276);
          v63 = v277;
LABEL_197:

          goto LABEL_227;
        default:
          if ((_DWORD)v39 == 65578)
          {
LABEL_152:
            v309 = 1;
            if ((v261 & 1) == 0)
            {
              v43 = v261 ^ 1;
              if ((v269 & 1) != 0)
                goto LABEL_212;
              if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                    v72 = (void *)objc_claimAutoreleasedReturnValue(),
                    v73 = objc_msgSend(v72, "shouldRespectForwardingInputDelegate"),
                    v72,
                    (v73 & 1) != 0))
              {
                -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                v74 = (void *)objc_claimAutoreleasedReturnValue();
                v75 = objc_msgSend(v74, "canHandleInputDelegateCommandAction:", 4);
                *((_BYTE *)v312 + 24) = v75;

                LOBYTE(v44) = 0;
                if ((v269 & 2) != 0 || !*((_BYTE *)v312 + 24))
                  goto LABEL_257;
                goto LABEL_158;
              }
              if ((v269 & 2) == 0)
LABEL_252:
                -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v26);
LABEL_253:
              LOBYTE(v44) = 0;
              *((_BYTE *)v312 + 24) = 1;
              goto LABEL_257;
            }
LABEL_199:
            v43 = v261 ^ 1;
            goto LABEL_227;
          }
          v69 = 524330;
LABEL_160:
          if ((_DWORD)v39 == v69)
          {
            v309 = 1;
            if ((v261 & 1) == 0)
            {
              v43 = v261 ^ 1;
              if ((v269 & 1) == 0)
              {
                if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                  || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                      v76 = (void *)objc_claimAutoreleasedReturnValue(),
                      v77 = objc_msgSend(v76, "shouldRespectForwardingInputDelegate"),
                      v76,
                      (v77 & 1) != 0))
                {
                  if (!-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
                    || -[UITextInputTraits displaySecureTextUsingPlainText](self->m_traits, "displaySecureTextUsingPlainText"))
                  {
                    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                    v78 = (void *)objc_claimAutoreleasedReturnValue();
                    v79 = objc_msgSend(v78, "canHandleInputDelegateCommandAction:", 2);
                    *((_BYTE *)v312 + 24) = v79;

                    LOBYTE(v44) = 0;
                    if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                    {
                      -[_UIKeyboardStateManager setDisableSmartInsertDelete:](self, "setDisableSmartInsertDelete:", 1);
                      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                      v52 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v52, "_deleteByWord");
LABEL_170:

                      -[_UIKeyboardStateManager setDisableSmartInsertDelete:](self, "setDisableSmartInsertDelete:", 0);
                      LOBYTE(v44) = 0;
                    }
                    goto LABEL_257;
                  }
                  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                  v104 = (void *)objc_claimAutoreleasedReturnValue();
                  v105 = objc_msgSend(v104, "canHandleInputDelegateCommandAction:", 4);
                  *((_BYTE *)v312 + 24) = v105;

                  LOBYTE(v44) = 0;
                  if ((v269 & 2) != 0 || !*((_BYTE *)v312 + 24))
                    goto LABEL_257;
LABEL_158:
                  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                  v70 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v70, "_deleteToStartOfLine");
                  goto LABEL_226;
                }
                if ((v269 & 2) == 0)
                  goto LABEL_252;
                goto LABEL_253;
              }
LABEL_212:
              LOBYTE(v44) = 0;
              *((_BYTE *)v312 + 24) = 0;
              goto LABEL_257;
            }
            goto LABEL_199;
          }
          break;
      }
LABEL_211:
      v43 = v261 ^ 1;
      goto LABEL_212;
    }
    switch((_DWORD)v39)
    {
      case 0x90:
        v43 = v261 ^ 1;
        if (!-[_UIKeyboardStateManager shouldShowKeyboardMenu](self, "shouldShowKeyboardMenu")
          || -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry"))
        {
          goto LABEL_227;
        }
        if (-[_UIKeyboardStateManager shouldApplyKeyboardInputToUIHost](self, "shouldApplyKeyboardInputToUIHost"))
        {
LABEL_150:
          -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = objc_msgSend(v70, "synchronousForwardKeyCommandsBeforePublicToUIHost:", v26);
          *((_BYTE *)v312 + 24) = v71;
LABEL_226:

          goto LABEL_227;
        }
        +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v99, "inputModeLastUsedForLanguage:", CFSTR("ja_JP"));
        v70 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v70, "identifier");
        v100 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v100)
          goto LABEL_226;
        break;
      case 0x91:
        v43 = v261 ^ 1;
        if (!-[_UIKeyboardStateManager shouldShowKeyboardMenu](self, "shouldShowKeyboardMenu"))
          goto LABEL_227;
        if (-[_UIKeyboardStateManager shouldApplyKeyboardInputToUIHost](self, "shouldApplyKeyboardInputToUIHost"))
          goto LABEL_150;
        +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v97, "inputModeLastUsedForLanguage:", CFSTR("ASCIICapable"));
        v70 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v70, "identifier");
        v98 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v98)
          goto LABEL_226;
        break;
      case 0x9C:
        v43 = v261 ^ 1;
        *((_BYTE *)v312 + 24) = 1;
        -[_UIKeyboardStateManager handleClear](self, "handleClear");
LABEL_227:
        LOBYTE(v44) = 0;
        goto LABEL_257;
      default:
        goto LABEL_211;
    }
    objc_msgSend(v70, "identifier");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager switchMode:withHUD:withDelay:fromCapsLock:](self, "switchMode:withHUD:withDelay:fromCapsLock:", v101, 0, 0, 0);

    goto LABEL_226;
  }
  switch((int)v39)
  {
    case 'J':
    case 'K':
    case 'M':
    case 'N':
      v43 = v261 ^ 1;
      LOBYTE(v44) = 0;
      v45 = !-[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents");
      if ((v269 & 2) != 0)
        LOBYTE(v45) = 0;
      *((_BYTE *)v312 + 24) = v45;
      goto LABEL_257;
    case 'L':
      v309 = 1;
      if ((v255 & 1) != 0)
        goto LABEL_199;
      if (v256)
        goto LABEL_211;
      v43 = v261 ^ 1;
      if ((v269 & 2) != 0)
        v47 = -[_UIKeyboardStateManager _canDeleteForward](self, "_canDeleteForward");
      else
        v47 = -[_UIKeyboardStateManager deleteForwardAndNotify:producedByDeleteInput:](self, "deleteForwardAndNotify:producedByDeleteInput:", 1, 1);
      break;
    case 'O':
      v43 = v261 ^ 1;
      v309 = 1;
      v90 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v91 = objc_msgSend(v90, "isPressAndHoldPopoverPresented");

      if (v91)
        goto LABEL_203;
      if (((v34 | v255 ^ 1) & 1) == 0)
        LOBYTE(v34) = -[_UIKeyboardStateManager cursorIsAtEndOfMarkedText](self, "cursorIsAtEndOfMarkedText");
      LOBYTE(v251) = v34;
      v47 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 1, v265 != 0, v269 & 1, v42 != 0, v257, v251, v260, v264, &v310, v26);
      break;
    case 'P':
      v43 = v261 ^ 1;
      v309 = 1;
      v92 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v93 = objc_msgSend(v92, "isPressAndHoldPopoverPresented");

      if (v93)
        goto LABEL_203;
      if (((v34 | v255 ^ 1) & 1) == 0)
        LOBYTE(v34) = -[_UIKeyboardStateManager cursorIsAtEndOfMarkedText](self, "cursorIsAtEndOfMarkedText")
                   && -[UIKeyboardCandidateList currentIndex](self->m_candidateList, "currentIndex") != 0x7FFFFFFFFFFFFFFFLL
                   && -[UIKeyboardCandidateList currentIndex](self->m_candidateList, "currentIndex") != 0;
      LOBYTE(v251) = v34;
      v47 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 0, v265 != 0, v269 & 1, v42 != 0, v257, v251, v260, v264, &v310, v26);
      break;
    case 'Q':
      v309 = 1;
      v43 = v261 ^ 1;
      LOBYTE(v251) = v261 ^ 1;
      v47 = -[_UIKeyboardStateManager handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 1, v265 != 0, v269 & 1, v42 != 0, v257, v252, v251, v260, v264, &v310, v26);
      break;
    case 'R':
      v309 = 1;
      v43 = v261 ^ 1;
      LOBYTE(v251) = v261 ^ 1;
      v47 = -[_UIKeyboardStateManager handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 0, v265 != 0, v269 & 1, v42 != 0, v257, v252, v251, v260, v264, &v310, v26);
      break;
    default:
      switch((int)v39)
      {
        case ')':
          v43 = v261 ^ 1;
          v47 = -[_UIKeyboardStateManager _cancelOperation:testOnly:](self, "_cancelOperation:testOnly:", v269 & 1, v42 != 0);
          goto LABEL_256;
        case '+':
          v43 = v261 ^ 1;
          v309 = 1;
          v47 = -[_UIKeyboardStateManager handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:](self, "handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:", v265 != 0, v269 & 1, 0, v42 != 0);
          goto LABEL_256;
        case '-':
        case '/':
          v43 = v261 ^ 1;
          v309 = 1;
          if (!v255)
            goto LABEL_212;
          if (!-[_UIKeyboardStateManager shouldUsePinyinStyleRowNavigation](self, "shouldUsePinyinStyleRowNavigation"))
            goto LABEL_212;
          v310 = 2;
          if (v11 == 45
            && ((-[UIKeyboardCandidateList isExtendedList](self->m_candidateList, "isExtendedList") | v257) & 1) == 0)
          {
            goto LABEL_212;
          }
          v46 = v257;
          if ((v269 & 2) != 0)
            goto LABEL_227;
          goto LABEL_110;
        case '.':
        case '0':
          v43 = v261 ^ 1;
          v309 = 1;
          if (!v255
            || !-[_UIKeyboardStateManager shouldUsePinyinStyleRowNavigation](self, "shouldUsePinyinStyleRowNavigation"))
          {
            goto LABEL_212;
          }
          v310 = 2;
          if ((v269 & 2) != 0)
            goto LABEL_227;
          v46 = v257 ^ 1;
LABEL_110:
          -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](self->m_candidateList, "showCandidateInForwardDirection:granularity:", v46, 1);
          break;
        default:
          goto LABEL_211;
      }
      goto LABEL_227;
  }
LABEL_256:
  LOBYTE(v44) = 0;
  *((_BYTE *)v312 + 24) = v47;
LABEL_257:
  if (!*((_BYTE *)v312 + 24))
  {
    v106 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v107 = objc_msgSend(v106, "isPressAndHoldPopoverPresented");

    if (v107)
    {
      v108 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v108, "pressAndHoldPopoverController");
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      v110 = objc_msgSend(v109, "handleHardwareKeyboardEvent:", v26);
      *((_BYTE *)v312 + 24) = v110;

      LOBYTE(v44) = 1;
    }
  }
  if (*((_BYTE *)v312 + 24))
  {
LABEL_261:
    v111 = 1;
    goto LABEL_266;
  }
  v112 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v113 = objc_msgSend(v112, "isEmojiPopoverPresented");

  if ((v113 & 1) != 0)
  {
    v114 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v114, "emojiPopoverController");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    v116 = objc_msgSend(v115, "handleHardwareKeyboardEvent:", v26);
    *((_BYTE *)v312 + 24) = v116;

    if (!*((_BYTE *)v312 + 24))
      goto LABEL_271;
    v310 = 3;
    goto LABEL_261;
  }
  v111 = *((unsigned __int8 *)v312 + 24);
LABEL_266:
  v117 = v44 ^ 1;
  if (!v111)
    v117 = 1;
  if ((v117 & 1) != 0)
  {
    if (v111)
    {
LABEL_610:
      if (v310 != 2)
        goto LABEL_613;
      goto LABEL_611;
    }
LABEL_271:
    v118 = -[_UIKeyboardStateManager handleInputManagerBasedKeybind:testOnly:](self, "handleInputManagerBasedKeybind:testOnly:", v26, v42 != 0);
    *((_BYTE *)v312 + 24) = v118;
    if (v118)
    {
      v310 = 2;
LABEL_611:
      if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
        goto LABEL_613;
LABEL_612:
      v310 = 0;
      goto LABEL_613;
    }
    objc_msgSend(v26, "_commandModifiedInput");
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    v120 = v119;
    if (v119)
    {
      v121 = v119;
    }
    else
    {
      objc_msgSend(v26, "_modifiedInput");
      v121 = (id)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(MEMORY[0x1E0DAFEC0], "sharedInstance");
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v274[0] = MEMORY[0x1E0C809B0];
    v274[1] = 3221225472;
    v274[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_11;
    v274[3] = &unk_1E16B4878;
    v123 = v121;
    v275 = v123;
    objc_msgSend(v122, "logBlock:domain:", v274, CFSTR("com.apple.keyboard.UIKit"));

    v124 = v123;
    if (objc_msgSend(v123, "length"))
      v125 = objc_msgSend(v123, "characterAtIndex:", 0);
    else
      v125 = 0;
    v126 = v267 & 0x5FB0000 | v125;
    v127 = v312;
    *((_BYTE *)v312 + 24) = 1;
    if (v126 <= 16777280)
    {
      if (v126 > 65632)
      {
        if (v126 <= 65653)
        {
          if (v126 != 65633)
          {
            v128 = 99;
            goto LABEL_291;
          }
          goto LABEL_302;
        }
        if (v126 != 65654)
        {
          v139 = 120;
          goto LABEL_314;
        }
      }
      else
      {
        if (v126 <= 65621)
        {
          if (v126 != 65601)
          {
            v128 = 67;
LABEL_291:
            v130 = v128 | 0x10000;
LABEL_296:
            if (v126 == v130 && !v256)
            {
              if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                    v131 = (void *)objc_claimAutoreleasedReturnValue(),
                    v132 = objc_msgSend(v131, "shouldRespectForwardingInputDelegate"),
                    v131,
                    (v132 & 1) != 0))
              {
                -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                v133 = (void *)objc_claimAutoreleasedReturnValue();
                if (v133)
                  v134 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_copy_);
                else
                  v134 = 0;
                *((_BYTE *)v312 + 24) = v134;

                if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                {
                  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                  v203 = (void *)objc_claimAutoreleasedReturnValue();
                  v204 = objc_msgSend(v203, "_dataOwnerForCopy");
                  v273[0] = MEMORY[0x1E0C809B0];
                  v273[1] = 3221225472;
                  v273[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_12;
                  v273[3] = &unk_1E16B1B28;
                  v273[4] = self;
                  +[UIPasteboard _performAsDataOwner:block:](UIPasteboard, "_performAsDataOwner:block:", v204, v273);

                  +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:trigger:](UIKBAnalyticsDispatcher, "analyticsDispatchEventTextEditingOperation:trigger:", CFSTR("Copy"), CFSTR("HWKeyboard"));
                }
                goto LABEL_326;
              }
              if ((v269 & 2) == 0)
                goto LABEL_467;
LABEL_468:
              *((_BYTE *)v312 + 24) = 1;
              goto LABEL_326;
            }
LABEL_325:
            *((_BYTE *)v127 + 24) = 0;
            goto LABEL_326;
          }
          goto LABEL_302;
        }
        if (v126 != 65622)
        {
          v139 = 88;
LABEL_314:
          v141 = v139 | 0x10000;
          goto LABEL_318;
        }
      }
LABEL_324:
      v309 = 1;
      if (v256)
        goto LABEL_325;
      if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
        || ((-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
             v164 = (void *)objc_claimAutoreleasedReturnValue(),
             v165 = objc_msgSend(v164, "shouldRespectForwardingInputDelegate"),
             (v269 & 2) != 0)
          ? (v166 = 1)
          : (v166 = v165),
            v164,
            (v166 & 1) != 0))
      {
        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
        v167 = (void *)objc_claimAutoreleasedReturnValue();
        if (v167)
          v168 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_paste_);
        else
          v168 = 0;
        *((_BYTE *)v312 + 24) = v168;

        if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
        {
          v207 = -[_UIKeyboardStateManager acceptCurrentCandidate](self, "acceptCurrentCandidate");
          -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
          v208 = (void *)objc_claimAutoreleasedReturnValue();
          v209 = objc_msgSend(v208, "_dataOwnerForPaste");
          v272[0] = MEMORY[0x1E0C809B0];
          v272[1] = 3221225472;
          v272[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_13;
          v272[3] = &unk_1E16B1B28;
          v272[4] = self;
          +[UIPasteboard _performAsDataOwner:block:](UIPasteboard, "_performAsDataOwner:block:", v209, v272);

          +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:trigger:](UIKBAnalyticsDispatcher, "analyticsDispatchEventTextEditingOperation:trigger:", CFSTR("Paste"), CFSTR("HWKeyboard"));
        }
        goto LABEL_326;
      }
LABEL_467:
      -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v26);
      goto LABEL_468;
    }
    if (v126 > 16777312)
    {
      if (v126 <= 16777333)
      {
        if (v126 != 16777313)
        {
          v129 = 99;
          goto LABEL_295;
        }
LABEL_302:
        if ((v255 & 1) != 0)
          goto LABEL_326;
        if (v256)
          goto LABEL_325;
        if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          v136 = objc_msgSend(v135, "shouldRespectForwardingInputDelegate");

          if ((v136 & 1) == 0)
          {
            if ((v269 & 2) != 0)
              goto LABEL_468;
            goto LABEL_467;
          }
        }
        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        if (v137)
          v138 = -[_UIKeyboardStateManager _canHandleResponderCommandConservatively:](self, "_canHandleResponderCommandConservatively:", sel_selectAll_);
        else
          v138 = 0;
        *((_BYTE *)v312 + 24) = v138;

        if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
        {
          -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_selectAll_);
          v237 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v237, "selectAll:", 0);

        }
LABEL_326:
        v146 = v269 & 2;
        v147 = v254 | v125;
        if (*((_BYTE *)v312 + 24))
          goto LABEL_327;
        if ((int)v147 > 17301589)
        {
          if ((int)v147 > 20971605)
          {
            if ((_DWORD)v147 == 20971638)
              goto LABEL_392;
            v151 = 20971606;
          }
          else
          {
            if ((_DWORD)v147 == 17301590)
              goto LABEL_392;
            v151 = 17301622;
          }
        }
        else if ((int)v147 > 4259925)
        {
          if ((_DWORD)v147 == 4259926)
            goto LABEL_392;
          v151 = 4259958;
        }
        else
        {
          if ((_DWORD)v147 == 589910)
            goto LABEL_392;
          v151 = 589942;
        }
        if ((_DWORD)v147 != v151)
        {
          v178 = 0;
          *((_BYTE *)v312 + 24) = 0;
          goto LABEL_473;
        }
LABEL_392:
        v178 = v265;
        if (v265)
        {
          v309 = 1;
          if (v256)
          {
            *((_BYTE *)v312 + 24) = 0;
            goto LABEL_327;
          }
          if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
          {
            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
            v179 = (void *)objc_claimAutoreleasedReturnValue();
            v180 = objc_msgSend(v179, "shouldRespectForwardingInputDelegate");
            v181 = (v269 & 2) != 0 ? 1 : v180;

            if ((v181 & 1) == 0)
            {
              -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v26);
              goto LABEL_563;
            }
          }
          -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
          v182 = (void *)objc_claimAutoreleasedReturnValue();
          if (v182)
            v183 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_pasteAndMatchStyle_);
          else
            v183 = 0;
          *((_BYTE *)v312 + 24) = v183;

          v178 = *((unsigned __int8 *)v312 + 24);
          if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
          {
            v210 = -[_UIKeyboardStateManager acceptCurrentCandidate](self, "acceptCurrentCandidate");
            -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
            v211 = (void *)objc_claimAutoreleasedReturnValue();
            v212 = objc_msgSend(v211, "_dataOwnerForPaste");
            v270[0] = MEMORY[0x1E0C809B0];
            v270[1] = 3221225472;
            v270[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_15;
            v270[3] = &unk_1E16B1B28;
            v270[4] = self;
            +[UIPasteboard _performAsDataOwner:block:](UIPasteboard, "_performAsDataOwner:block:", v212, v270);

            +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:trigger:](UIKBAnalyticsDispatcher, "analyticsDispatchEventTextEditingOperation:trigger:", CFSTR("Paste"), CFSTR("HWKeyboard"));
            v178 = *((unsigned __int8 *)v312 + 24);
          }
        }
LABEL_473:
        if (v269 & 1 | (v178 != 0))
          v213 = 0;
        else
          v213 = v267 & 0x5FB0000 | v125;
        if (v213 <= 16777281)
        {
          if (v213 > 65633)
          {
            if (v213 <= 65640)
            {
              if (v213 != 65634)
              {
                v214 = 101;
                goto LABEL_488;
              }
LABEL_498:
              if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                    v221 = (void *)objc_claimAutoreleasedReturnValue(),
                    v222 = objc_msgSend(v221, "shouldRespectForwardingInputDelegate"),
                    v221,
                    (v222 & 1) != 0))
              {
                -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                v223 = (void *)objc_claimAutoreleasedReturnValue();
                if (v223)
                  v224 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_toggleBoldface_);
                else
                  v224 = 0;
                *((_BYTE *)v312 + 24) = v224;

                if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                {
                  -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_toggleBoldface_);
                  v238 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v238, "toggleBoldface:", 0);
                  goto LABEL_556;
                }
                goto LABEL_327;
              }
              -[_UIKeyboardStateManager performOnInputSourceSessionActionSelector:](self, "performOnInputSourceSessionActionSelector:", sel_toggleBoldface_);
              goto LABEL_563;
            }
            if (v213 != 65641)
            {
              v225 = 117;
              goto LABEL_508;
            }
          }
          else
          {
            if (v213 <= 65608)
            {
              if (v213 != 65602)
              {
                v214 = 69;
LABEL_488:
                v216 = v214 | 0x10000;
LABEL_493:
                if (v213 != v216)
                  goto LABEL_327;
                if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                  || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                      v217 = (void *)objc_claimAutoreleasedReturnValue(),
                      v218 = objc_msgSend(v217, "shouldRespectForwardingInputDelegate"),
                      v217,
                      (v218 & 1) != 0))
                {
                  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                  v219 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v219)
                    v220 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_useSelectionForFind_);
                  else
                    v220 = 0;
                  *((_BYTE *)v312 + 24) = v220;

                  if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                  {
                    -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_useSelectionForFind_);
                    v238 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v238, "useSelectionForFind:", 0);
LABEL_556:

                    goto LABEL_327;
                  }
                  goto LABEL_327;
                }
                -[_UIKeyboardStateManager performOnInputSourceSessionActionSelector:](self, "performOnInputSourceSessionActionSelector:", sel_useSelectionForFind_);
                goto LABEL_563;
              }
              goto LABEL_498;
            }
            if (v213 != 65609)
            {
              v225 = 85;
LABEL_508:
              v227 = v225 | 0x10000;
LABEL_512:
              if (v213 != v227)
                goto LABEL_327;
              if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                    v228 = (void *)objc_claimAutoreleasedReturnValue(),
                    v229 = objc_msgSend(v228, "shouldRespectForwardingInputDelegate"),
                    v228,
                    (v229 & 1) != 0))
              {
                -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                v230 = (void *)objc_claimAutoreleasedReturnValue();
                if (v230)
                  v231 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_toggleUnderline_);
                else
                  v231 = 0;
                *((_BYTE *)v312 + 24) = v231;

                if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                {
                  -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_toggleUnderline_);
                  v238 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v238, "toggleUnderline:", 0);
                  goto LABEL_556;
                }
LABEL_327:
                v148 = v312;
                v149 = *((_BYTE *)v312 + 24);
                *((_BYTE *)v312 + 24) = 1;
                if ((int)v147 > 0x800000)
                {
                  if ((int)v147 <= 16777285)
                  {
                    switch((int)v147)
                    {
                      case 8388609:
LABEL_343:
                        v309 = 1;
                        if ((v261 & 1) != 0)
                          goto LABEL_598;
                        if ((v269 & 1) != 0)
                          goto LABEL_535;
                        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                              v152 = (void *)objc_claimAutoreleasedReturnValue(),
                              v153 = objc_msgSend(v152, "shouldRespectForwardingInputDelegate"),
                              v152,
                              (v153 & 1) != 0))
                        {
                          v154 = v260[2](v260, sel__moveToStartOfLine_withHistory_);
                          *((_BYTE *)v312 + 24) = v154;
                          if ((v269 & 2) == 0 && ((v154 ^ 1) & 1) == 0)
                          {
                            self->m_textInputChangesIgnored = 1;
                            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                            v155 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v155, "_moveToStartOfLine:withHistory:", v265 != 0, v264);
                            v156 = (void *)objc_claimAutoreleasedReturnValue();
                            -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", v156);
                            goto LABEL_442;
                          }
                          goto LABEL_598;
                        }
                        if ((v269 & 2) != 0)
                          goto LABEL_573;
                        goto LABEL_572;
                      case 8388610:
LABEL_415:
                        v309 = 1;
                        LOBYTE(v251) = v255;
                        v188 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", v257, v265 != 0, v269 & 1, v146 != 0, v257, v251, v260, v264, &v310, v26);
                        goto LABEL_576;
                      case 8388611:
                      case 8388615:
                      case 8388616:
                      case 8388617:
                      case 8388618:
                      case 8388620:
                      case 8388621:
                      case 8388625:
                      case 8388626:
                      case 8388627:
                        goto LABEL_574;
                      case 8388612:
LABEL_416:
                        v309 = 1;
                        if ((v255 & 1) != 0)
                          goto LABEL_598;
                        if ((v269 & 1) != 0)
                        {
                          v188 = 0;
                        }
                        else
                        {
                          v188 = -[_UIKeyboardStateManager deleteForwardAndNotify:](self, "deleteForwardAndNotify:", 1);
LABEL_576:
                          v148 = v312;
                        }
                        *((_BYTE *)v148 + 24) = v188;
                        goto LABEL_598;
                      case 8388613:
LABEL_419:
                        v309 = 1;
                        if ((v261 & 1) != 0)
                          goto LABEL_598;
                        if ((v269 & 1) != 0)
                          goto LABEL_535;
                        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                              v189 = (void *)objc_claimAutoreleasedReturnValue(),
                              v190 = objc_msgSend(v189, "shouldRespectForwardingInputDelegate"),
                              v189,
                              (v190 & 1) != 0))
                        {
                          v191 = v260[2](v260, sel__moveToEndOfLine_withHistory_);
                          *((_BYTE *)v312 + 24) = v191;
                          if ((v269 & 2) == 0 && ((v191 ^ 1) & 1) == 0)
                          {
                            self->m_textInputChangesIgnored = 1;
                            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                            v155 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v155, "_moveToEndOfLine:withHistory:", v265 != 0, v264);
                            v156 = (void *)objc_claimAutoreleasedReturnValue();
                            -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", v156);
                            goto LABEL_442;
                          }
                          goto LABEL_598;
                        }
                        if ((v269 & 2) != 0)
                          goto LABEL_573;
                        goto LABEL_572;
                      case 8388614:
LABEL_426:
                        v309 = 1;
                        LOBYTE(v251) = v255;
                        v188 = -[_UIKeyboardStateManager handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleHorizontalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:shouldNavigateCandidateList:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", v257 ^ 1, v265 != 0, v269 & 1, v146 != 0, v251, v260, v264, &v310, v26);
                        goto LABEL_576;
                      case 8388619:
LABEL_427:
                        v309 = 1;
                        if ((v261 & 1) != 0)
                          goto LABEL_598;
                        if ((v269 & 1) != 0)
                          goto LABEL_535;
                        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                              v192 = (void *)objc_claimAutoreleasedReturnValue(),
                              v193 = objc_msgSend(v192, "shouldRespectForwardingInputDelegate"),
                              v192,
                              (v193 & 1) != 0))
                        {
                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                          v194 = (void *)objc_claimAutoreleasedReturnValue();
                          v195 = objc_msgSend(v194, "canHandleInputDelegateCommandAction:", 6);
                          *((_BYTE *)v312 + 24) = v195;

                          if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                          {
                            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                            v161 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v161, "_deleteToEndOfParagraph");
                            goto LABEL_597;
                          }
                          goto LABEL_598;
                        }
                        if ((v269 & 2) != 0)
                          goto LABEL_573;
                        goto LABEL_572;
                      case 8388622:
LABEL_434:
                        v309 = 1;
                        LOBYTE(v251) = v43;
                        v188 = -[_UIKeyboardStateManager handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 1, 0, v269 & 1, v146 != 0, v257, v252, v251, v260, v264, &v310, v26);
                        goto LABEL_576;
                      case 8388623:
LABEL_435:
                        v309 = 1;
                        if ((v261 & 1) != 0)
                          goto LABEL_598;
                        if ((v269 & 1) != 0)
                          goto LABEL_535;
                        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                              v196 = (void *)objc_claimAutoreleasedReturnValue(),
                              v197 = objc_msgSend(v196, "shouldRespectForwardingInputDelegate"),
                              v196,
                              (v197 & 1) != 0))
                        {
                          v198 = v260[2](v260, sel__moveLeft_withHistory_);
                          *((_BYTE *)v312 + 24) = v198;
                          if ((v269 & 2) == 0 && ((v198 ^ 1) & 1) == 0)
                          {
                            -[_UIKeyboardStateManager insertTextIfShould:](self, "insertTextIfShould:", CFSTR("\n"));
                            self->m_textInputChangesIgnored = 1;
                            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                            v155 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v155, "_moveLeft:withHistory:", 0, v264);
                            v156 = (void *)objc_claimAutoreleasedReturnValue();
                            -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", v156);
LABEL_442:

                            self->m_textInputChangesIgnored = 0;
                          }
                          goto LABEL_598;
                        }
                        if ((v269 & 2) != 0)
                          goto LABEL_573;
                        goto LABEL_572;
                      case 8388624:
LABEL_443:
                        v309 = 1;
                        LOBYTE(v251) = v43;
                        v188 = -[_UIKeyboardStateManager handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:](self, "handleVerticalArrow:shiftDown:beforePublicKeyCommands:testOnly:isVerticalCandidate:hasCandidatesForTypedInput:inputDelegateCommandEnabled:canHandleInputDelegateCommand:savedHistory:keyCommandTypeHandled:keyEvent:", 0, 0, v269 & 1, v146 != 0, v257, v252, v251, v260, v264, &v310, v26);
                        goto LABEL_576;
                      case 8388628:
LABEL_444:
                        v309 = 1;
                        if ((v261 & 1) != 0)
                          goto LABEL_598;
                        if ((v269 & 1) != 0)
                          goto LABEL_535;
                        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                              v199 = (void *)objc_claimAutoreleasedReturnValue(),
                              v200 = objc_msgSend(v199, "shouldRespectForwardingInputDelegate"),
                              v199,
                              (v200 & 1) != 0))
                        {
                          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                          v201 = (void *)objc_claimAutoreleasedReturnValue();
                          v202 = objc_msgSend(v201, "canHandleInputDelegateCommandAction:", 0);
                          *((_BYTE *)v312 + 24) = v202;

                          if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                          {
                            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                            v161 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v161, "transposeCharacters");
                            goto LABEL_597;
                          }
                          goto LABEL_598;
                        }
                        if ((v269 & 2) != 0)
                          goto LABEL_573;
                        break;
                      default:
                        if ((_DWORD)v147 == 8388640)
                          goto LABEL_529;
                        goto LABEL_574;
                    }
                    goto LABEL_572;
                  }
                  if ((int)v147 > 17301573)
                  {
                    if ((int)v147 > 20971589)
                    {
                      if ((_DWORD)v147 == 20971622)
                        goto LABEL_410;
                      v169 = 20971590;
                    }
                    else
                    {
                      if ((_DWORD)v147 == 17301574)
                        goto LABEL_410;
                      v169 = 17301606;
                    }
                    goto LABEL_409;
                  }
                  v150 = (v254 | v125) - 70;
                  if ((v147 - 16777286) > 0x34)
                    goto LABEL_574;
                  if (((1 << v150) & 0x100000001) == 0)
                  {
                    if (((1 << v150) & 0x200000002) == 0)
                    {
                      if (((1 << v150) & 0x10000000100000) == 0)
                        goto LABEL_574;
LABEL_354:
                      if (v256)
                        goto LABEL_535;
                      if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                        || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                            v158 = (void *)objc_claimAutoreleasedReturnValue(),
                            v159 = objc_msgSend(v158, "shouldRespectForwardingInputDelegate"),
                            v158,
                            (v159 & 1) != 0))
                      {
                        -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_undoManager);
                        v160 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v160, "undoManager");
                        v161 = (void *)objc_claimAutoreleasedReturnValue();

                        if (!v161)
                        {
                          *((_BYTE *)v312 + 24) = 0;
                          goto LABEL_597;
                        }
                        if (v265)
                        {
                          v162 = objc_msgSend(v161, "canRedo");
                          if ((v269 & 2) != 0 || ((v162 ^ 1) & 1) != 0)
                            goto LABEL_586;
                          objc_msgSend(v161, "redo");
                          v163 = UIKBAnalyticsTextEditingOperationRedo;
                        }
                        else
                        {
                          v241 = objc_msgSend(v161, "canUndo");
                          if ((v269 & 2) != 0 || ((v241 ^ 1) & 1) != 0)
                            goto LABEL_586;
                          objc_msgSend(v161, "undo");
                          v163 = UIKBAnalyticsTextEditingOperationUndo;
                        }
                        +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:trigger:](UIKBAnalyticsDispatcher, "analyticsDispatchEventTextEditingOperation:trigger:", *v163, CFSTR("HWKeyboard"));
LABEL_586:
                        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                        v242 = (void *)objc_claimAutoreleasedReturnValue();
                        *((_BYTE *)v312 + 24) = v242 != 0;

                        goto LABEL_597;
                      }
                      if ((v269 & 2) == 0)
LABEL_572:
                        -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v26);
LABEL_573:
                      v148 = v312;
                      v149 = 1;
                      goto LABEL_574;
                    }
                    goto LABEL_381;
                  }
                }
                else
                {
                  if ((int)v147 > 0x100000)
                  {
                    if ((int)v147 <= 1048607)
                    {
                      switch((int)v147)
                      {
                        case 1048577:
                          goto LABEL_343;
                        case 1048578:
                          goto LABEL_415;
                        case 1048580:
                          goto LABEL_416;
                        case 1048581:
                          goto LABEL_419;
                        case 1048582:
                          goto LABEL_426;
                        case 1048587:
                          goto LABEL_427;
                        case 1048590:
                          goto LABEL_434;
                        case 1048591:
                          goto LABEL_435;
                        case 1048592:
                          goto LABEL_443;
                        case 1048596:
                          goto LABEL_444;
                        default:
                          goto LABEL_574;
                      }
                    }
                    if ((_DWORD)v147 != 1048608)
                    {
                      if ((_DWORD)v147 == 4259910)
                        goto LABEL_410;
                      v169 = 4259942;
                      goto LABEL_409;
                    }
LABEL_529:
                    if (-[_UIKeyboardStateManager shouldShowKeyboardMenu](self, "shouldShowKeyboardMenu")
                      && ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1
                       || objc_msgSend((id)UIApp, "_areKeyboardHUDsEnabled")))
                    {
                      objc_msgSend(v26, "setKeyCommandCode:", v147);
                      if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
                      {
                        -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
                        v161 = (void *)objc_claimAutoreleasedReturnValue();
                        v236 = objc_msgSend(v161, "synchronousForwardKeyCommandsBeforePublicToUIHost:", v26);
                      }
                      else
                      {
                        +[UIInputSwitcher sharedInstance](UIInputSwitcher, "sharedInstance");
                        v161 = (void *)objc_claimAutoreleasedReturnValue();
                        v236 = objc_msgSend(v161, "handleSwitchCommand:withHUD:withDelay:", v265 != 0, 1, 1);
                      }
                      *((_BYTE *)v312 + 24) = v236;
                      goto LABEL_597;
                    }
LABEL_534:
                    v148 = v312;
                    goto LABEL_535;
                  }
                  v157 = (v254 | v125) - 70;
                  if ((v147 - 65606) > 0x34)
                  {
LABEL_407:
                    if ((_DWORD)v147 == 589894)
                      goto LABEL_410;
                    v169 = 589926;
LABEL_409:
                    if ((_DWORD)v147 == v169)
                    {
LABEL_410:
                      if (!v256)
                      {
                        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                          || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                              v184 = (void *)objc_claimAutoreleasedReturnValue(),
                              v185 = objc_msgSend(v184, "shouldRespectForwardingInputDelegate"),
                              v184,
                              (v185 & 1) != 0))
                        {
                          -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                          v186 = (void *)objc_claimAutoreleasedReturnValue();
                          if (v186)
                            v187 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_findAndReplace_);
                          else
                            v187 = 0;
                          *((_BYTE *)v312 + 24) = v187;

                          if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                          {
                            -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_findAndReplace_);
                            v161 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v161, "findAndReplace:", 0);
LABEL_597:

                          }
LABEL_598:
                          if (!*((_BYTE *)v312 + 24))
                          {
                            _UIKeyCommandGetLocalizedSymbol(CFSTR("."));
                            v243 = (void *)objc_claimAutoreleasedReturnValue();
                            v244 = objc_msgSend(v243, "characterAtIndex:", 0);
                            if ((_DWORD)v147 == (v244 | 0x1000000) || (_DWORD)v147 == (v244 | 0x10000))
                            {
                              v245 = -[_UIKeyboardStateManager _cancelOperation:testOnly:](self, "_cancelOperation:testOnly:", v269 & 1, v146 != 0);
                              *((_BYTE *)v312 + 24) = v245;
                            }

                            if (!*((_BYTE *)v312 + 24))
                            {
                              v246 = -[_UIKeyboardStateManager handleCandidateListNavigation:hasCandidatesForTypedInput:shiftDown:keyCommandTypeHandled:allowRepeat:beforePublic:keyEvent:](self, "handleCandidateListNavigation:hasCandidatesForTypedInput:shiftDown:keyCommandTypeHandled:allowRepeat:beforePublic:keyEvent:", v147, v255, v265 != 0, &v310, &v309, v269 & 1, v26);
                              *((_BYTE *)v312 + 24) = v246;
                              v247 = (v269 & 5) != 0 || v246;
                              if ((v247 & 1) == 0 && v258)
                              {
                                v248 = -[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents");
                                *((_BYTE *)v312 + 24) = !v248;
                              }
                            }
                          }

                          if (!*((_BYTE *)v312 + 24))
                            goto LABEL_612;
                          goto LABEL_610;
                        }
                        if ((v269 & 2) != 0)
                          goto LABEL_573;
                        goto LABEL_572;
                      }
LABEL_535:
                      *((_BYTE *)v148 + 24) = 0;
                      goto LABEL_598;
                    }
LABEL_574:
                    *((_BYTE *)v148 + 24) = v149;
                    goto LABEL_598;
                  }
                  if (((1 << v157) & 0x100000001) == 0)
                  {
                    if (((1 << v157) & 0x200000002) == 0)
                    {
                      if (((1 << v157) & 0x10000000100000) != 0)
                        goto LABEL_354;
                      goto LABEL_407;
                    }
LABEL_381:
                    if (v256)
                      goto LABEL_535;
                    if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                      || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                          v174 = (void *)objc_claimAutoreleasedReturnValue(),
                          v175 = objc_msgSend(v174, "shouldRespectForwardingInputDelegate"),
                          v174,
                          (v175 & 1) != 0))
                    {
                      if (v265)
                      {
                        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                        v176 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v176)
                          v177 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_findPrevious_);
                        else
                          v177 = 0;
                        *((_BYTE *)v312 + 24) = v177;

                        if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                        {
                          -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_findPrevious_);
                          v161 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v161, "findPrevious:", 0);
                          goto LABEL_597;
                        }
                      }
                      else
                      {
                        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                        v239 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v239)
                          v240 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_findNext_);
                        else
                          v240 = 0;
                        *((_BYTE *)v312 + 24) = v240;

                        if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                        {
                          -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_findNext_);
                          v161 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v161, "findNext:", 0);
                          goto LABEL_597;
                        }
                      }
                      goto LABEL_598;
                    }
                    if ((v269 & 2) != 0)
                      goto LABEL_573;
                    goto LABEL_572;
                  }
                }
                if (v256)
                  goto LABEL_535;
                if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
                  || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                      v170 = (void *)objc_claimAutoreleasedReturnValue(),
                      v171 = objc_msgSend(v170, "shouldRespectForwardingInputDelegate"),
                      v170,
                      (v171 & 1) != 0))
                {
                  if (!v265)
                  {
                    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
                    v172 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v172)
                      v173 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_find_);
                    else
                      v173 = 0;
                    *((_BYTE *)v312 + 24) = v173;

                    if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
                    {
                      -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_find_);
                      v161 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v161, "find:", 0);
                      goto LABEL_597;
                    }
                    goto LABEL_598;
                  }
                  goto LABEL_534;
                }
                if ((v269 & 2) == 0)
                  goto LABEL_572;
                goto LABEL_573;
              }
              -[_UIKeyboardStateManager performOnInputSourceSessionActionSelector:](self, "performOnInputSourceSessionActionSelector:", sel_toggleUnderline_);
LABEL_563:
              *((_BYTE *)v312 + 24) = 1;
              goto LABEL_327;
            }
          }
LABEL_517:
          if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
            || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
                v232 = (void *)objc_claimAutoreleasedReturnValue(),
                v233 = objc_msgSend(v232, "shouldRespectForwardingInputDelegate"),
                v232,
                (v233 & 1) != 0))
          {
            -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
            v234 = (void *)objc_claimAutoreleasedReturnValue();
            if (v234)
              v235 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_toggleItalics_);
            else
              v235 = 0;
            *((_BYTE *)v312 + 24) = v235;

            if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
            {
              -[_UIKeyboardStateManager _targetForResponderCommand:](self, "_targetForResponderCommand:", sel_toggleItalics_);
              v238 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v238, "toggleItalics:", 0);
              goto LABEL_556;
            }
            goto LABEL_327;
          }
          -[_UIKeyboardStateManager performOnInputSourceSessionActionSelector:](self, "performOnInputSourceSessionActionSelector:", sel_toggleItalics_);
          goto LABEL_563;
        }
        if (v213 > 16777313)
        {
          if (v213 <= 16777320)
          {
            if (v213 == 16777314)
              goto LABEL_498;
            v215 = 101;
LABEL_492:
            v216 = v215 | 0x1000000;
            goto LABEL_493;
          }
          if (v213 == 16777321)
            goto LABEL_517;
          v226 = 117;
        }
        else
        {
          if (v213 <= 16777288)
          {
            if (v213 == 16777282)
              goto LABEL_498;
            v215 = 69;
            goto LABEL_492;
          }
          if (v213 == 16777289)
            goto LABEL_517;
          v226 = 85;
        }
        v227 = v226 | 0x1000000;
        goto LABEL_512;
      }
      if (v126 == 16777334)
        goto LABEL_324;
      v140 = 120;
    }
    else
    {
      if (v126 <= 16777301)
      {
        if (v126 != 16777281)
        {
          v129 = 67;
LABEL_295:
          v130 = v129 | 0x1000000;
          goto LABEL_296;
        }
        goto LABEL_302;
      }
      if (v126 == 16777302)
        goto LABEL_324;
      v140 = 88;
    }
    v141 = v140 | 0x1000000;
LABEL_318:
    if (v126 != v141 || v256)
      goto LABEL_325;
    if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
      || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
          v142 = (void *)objc_claimAutoreleasedReturnValue(),
          v143 = objc_msgSend(v142, "shouldRespectForwardingInputDelegate"),
          v142,
          (v143 & 1) != 0))
    {
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      if (v144)
        v145 = -[_UIKeyboardStateManager _canHandleResponderCommand:](self, "_canHandleResponderCommand:", sel_cut_);
      else
        v145 = 0;
      *((_BYTE *)v312 + 24) = v145;

      if ((v269 & 2) == 0 && *((_BYTE *)v312 + 24))
      {
        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
        v205 = (void *)objc_claimAutoreleasedReturnValue();
        v206 = objc_msgSend(v205, "_dataOwnerForCopy");
        v271[0] = MEMORY[0x1E0C809B0];
        v271[1] = 3221225472;
        v271[2] = __63___UIKeyboardStateManager_handleKeyCommand_repeatOkay_options___block_invoke_14;
        v271[3] = &unk_1E16B1B28;
        v271[4] = self;
        +[UIPasteboard _performAsDataOwner:block:](UIPasteboard, "_performAsDataOwner:block:", v206, v271);

        +[UIKBAnalyticsDispatcher analyticsDispatchEventTextEditingOperation:trigger:](UIKBAnalyticsDispatcher, "analyticsDispatchEventTextEditingOperation:trigger:", CFSTR("Cut"), CFSTR("HWKeyboard"));
      }
      goto LABEL_326;
    }
    if ((v269 & 2) != 0)
      goto LABEL_468;
    goto LABEL_467;
  }
  v310 = 4;
LABEL_613:
  if (a4)
    *a4 = v309;
  -[_UIKeyboardStateManager setHandlingKeyCommandFromHardwareKeyboard:](self, "setHandlingKeyCommandFromHardwareKeyboard:", 0);
  if ((v259 & 1) == 0)
  {
    -[_UIKeyboardStateManager arrowKeyHistory](self, "arrowKeyHistory");
    v249 = (void *)objc_claimAutoreleasedReturnValue();

    if (v249)
    {
      +[UIKBAnalyticsDispatcher incrementAllowCursorMovementCount](UIKBAnalyticsDispatcher, "incrementAllowCursorMovementCount");
      -[_UIKeyboardStateManager changingContextWithTrigger:](self, "changingContextWithTrigger:", CFSTR("arrowKey"));
      -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");
      +[UIKBAnalyticsDispatcher decrementAllowCursorMovementCount](UIKBAnalyticsDispatcher, "decrementAllowCursorMovementCount");
    }
  }
  v25 = v310;

LABEL_619:
  _Block_object_dispose(&v311, 8);

  return v25;
}

- (BOOL)handleInputManagerBasedKeybind:(id)a3 testOnly:(BOOL)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  _QWORD v15[5];
  id v16;

  v6 = a3;
  if (-[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode"))
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "keyEventMap");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_modifiedInput");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_unmodifiedInput");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "inputEventForInputString:stringWithoutModifiers:modifierFlags:keyboardState:", v9, v10, objc_msgSend(v6, "_gsModifierFlags"), self->m_keyboardState);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = v11 != 0;
    if (v11 && !a4)
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __67___UIKeyboardStateManager_handleInputManagerBasedKeybind_testOnly___block_invoke;
      v15[3] = &unk_1E16BB0D8;
      v15[4] = self;
      v16 = v11;
      objc_msgSend(v13, "performSingleTask:", v15);

    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (BOOL)handleCandidateListNavigation:(unsigned int)a3 hasCandidatesForTypedInput:(BOOL)a4 shiftDown:(BOOL)a5 keyCommandTypeHandled:(unint64_t *)a6 allowRepeat:(BOOL *)a7 beforePublic:(BOOL)a8 keyEvent:(id)a9
{
  _BOOL8 v11;
  _BOOL4 v12;
  uint64_t v13;
  id v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v11 = a5;
  v12 = a4;
  v13 = *(_QWORD *)&a3;
  v15 = a9;
  if (!-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
  {
    if (v12)
    {
      if (a6)
        *a6 = 2;
      -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "keyEventMap");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
        v18 = objc_msgSend(v20, "candidateNumberKey:", v13);
      else
        v18 = u_charDigitValue(v13);
      if (v18 != -1 && v18 <= 9)
      {
        if (-[_UIKeyboardStateManager supportsNumberKeySelection](self, "supportsNumberKeySelection")
          && (objc_opt_respondsToSelector() & 1) != 0)
        {
          LOBYTE(v18) = -[UIKeyboardCandidateList handleNumberKey:](self->m_candidateList, "handleNumberKey:", v18);
        }
        else
        {
          LOBYTE(v18) = 0;
        }
        goto LABEL_39;
      }
      v22 = 0;
      LOBYTE(v18) = 0;
      if ((int)v13 <= 31)
      {
        if ((_DWORD)v13 != 10 && (_DWORD)v13 != 13)
          goto LABEL_38;
      }
      else if ((_DWORD)v13 != 8388618 && (_DWORD)v13 != 1048586)
      {
        if ((_DWORD)v13 == 32)
        {
          -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
          v18 = objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v18, "keyboardBehaviors");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager _keyboardBehaviorState](self, "_keyboardBehaviorState");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "keyBehaviorsForState:", v24);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          LOBYTE(v18) = 1;
          switch(objc_msgSend(v22, "spaceKeyBehavior"))
          {
            case 2:
              -[_UIKeyboardStateManager performKeyBehaviorConfirm](self, "performKeyBehaviorConfirm");
              break;
            case 3:
            case 4:
              if (a7)
                *a7 = 1;
              -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](self->m_candidateList, "showCandidateInForwardDirection:granularity:", v11 ^ 1, 0);
              break;
            case 5:
              -[_UIKeyboardStateManager performKeyBehaviorConfirmFirstCandidate](self, "performKeyBehaviorConfirmFirstCandidate");
              break;
            case 7:
              -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](self, "acceptAutocorrectionWithCompletionHandler:", 0);
              goto LABEL_55;
            case 8:
              goto LABEL_38;
            default:
LABEL_55:
              LOBYTE(v18) = 0;
              break;
          }
        }
        goto LABEL_38;
      }
      LOBYTE(v18) = -[_UIKeyboardStateManager handleReturnKey:](self, "handleReturnKey:", v11);
      v22 = 0;
LABEL_38:

LABEL_39:
      goto LABEL_46;
    }
    if (!-[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText"))
      goto LABEL_19;
    LOBYTE(v18) = 0;
    v21 = 0;
    if ((int)v13 <= 31)
    {
      if ((_DWORD)v13 != 10 && (_DWORD)v13 != 13)
        goto LABEL_45;
    }
    else
    {
      if ((_DWORD)v13 == 32)
      {
        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "keyboardBehaviors");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager _keyboardBehaviorState](self, "_keyboardBehaviorState");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "keyBehaviorsForState:", v28);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        v29 = objc_msgSend(v21, "spaceKeyBehavior");
        if ((unint64_t)(v29 - 2) < 4 || v29 == 8)
        {
          -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
          LODWORD(v18) = 1;
          if (a6)
          {
LABEL_43:
            if ((_DWORD)v18)
            {
              *a6 = 2;
              LOBYTE(v18) = 1;
            }
          }
        }
        else
        {
          LOBYTE(v18) = 0;
        }
LABEL_45:

        goto LABEL_46;
      }
      if ((_DWORD)v13 != 8388618 && (_DWORD)v13 != 1048586)
        goto LABEL_45;
    }
    LODWORD(v18) = -[_UIKeyboardStateManager handleReturnKey:](self, "handleReturnKey:", v11);
    v21 = 0;
    if (a6)
      goto LABEL_43;
    goto LABEL_45;
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "synchronousForwardKeyCommandsBeforePublicToUIHost:", v15);

  if (!v17)
  {
LABEL_19:
    LOBYTE(v18) = 0;
    goto LABEL_46;
  }
  if (a6)
    *a6 = 2;
  LOBYTE(v18) = 1;
  if ((_DWORD)v13 == 32 && a7)
    *a7 = 1;
LABEL_46:

  return v18;
}

- (BOOL)handleReturnKey:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  id WeakRetained;
  void *v11;

  v3 = a3;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "keyboardBehaviors");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _keyboardBehaviorState](self, "_keyboardBehaviorState");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "keyBehaviorsForState:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = 0;
  switch(objc_msgSend(v8, "returnKeyBehavior"))
  {
    case 2:
      -[_UIKeyboardStateManager performKeyBehaviorConfirm](self, "performKeyBehaviorConfirm");
      goto LABEL_7;
    case 3:
    case 4:
      -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](self->m_candidateList, "showCandidateInForwardDirection:granularity:", !v3, 0);
      goto LABEL_7;
    case 5:
      -[_UIKeyboardStateManager performKeyBehaviorConfirmFirstCandidate](self, "performKeyBehaviorConfirmFirstCandidate");
      goto LABEL_7;
    case 9:
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "layout");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v11, "performReturnAction");

      break;
    case 10:
      -[_UIKeyboardStateManager performKeyBehaviorCommitInline](self, "performKeyBehaviorCommitInline");
LABEL_7:
      v9 = 1;
      break;
    default:
      break;
  }

  return v9;
}

- (void)handleEmojiPopoverKeyCommand
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  BOOL v4;
  id v5;
  int v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  id WeakRetained;

  if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    WeakRetained = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "forwardInputDestinationEventToUIHost:", sel_handleEmojiPopoverKeyCommand);
LABEL_10:

    return;
  }
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if (!objc_msgSend(WeakRetained, "canPresentOrDismissEmojiPopover"))
    goto LABEL_10;
  v4 = -[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText");

  if (!v4)
  {
    v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
    v6 = objc_msgSend(v5, "isEmojiPopoverPresented");

    v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
    v8 = v7;
    if (v6)
    {
      WeakRetained = v7;
      objc_msgSend(WeakRetained, "emojiPopoverController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "dismissKeyboardPopover:beforeCleanup:completion:", v9, 0, 0);

      goto LABEL_10;
    }
    v10 = objc_msgSend(v7, "isEmojiPopoverVisibleOrDismissing");

    if ((v10 & 1) == 0)
    {
      WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
      objc_msgSend(WeakRetained, "presentEmojiPopoverViaTrigger:completion:", CFSTR("keyboardShortcut"), 0);
      goto LABEL_10;
    }
  }
}

- (BOOL)currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:(BOOL)a3
{
  int m_predictionType;
  BOOL v6;
  BOOL result;

  if (-[_UIKeyboardStateManager keyboardIsKeyPad](self, "keyboardIsKeyPad"))
  {
    if (!-[_UIKeyboardStateManager canUseCandidateBarAsSupplementToInlineView](self, "canUseCandidateBarAsSupplementToInlineView")&& !-[TIKeyboardCandidateResultSet hasOnlySlottedCandidates](self->m_candidateResultSet, "hasOnlySlottedCandidates"))
    {
      m_predictionType = self->m_predictionType;
      if (m_predictionType != 4 && m_predictionType != 2)
        return 0;
    }
  }
  v6 = -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry");
  result = !v6;
  if (!v6 && !a3)
    return !-[UITextInputTraits hidePrediction](self->m_traits, "hidePrediction");
  return result;
}

- (BOOL)shouldShowLongPredictionList
{
  int v3;

  v3 = -[TIKeyboardState longPredictionListEnabled](self->m_keyboardState, "longPredictionListEnabled");
  if (v3)
    LOBYTE(v3) = !-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry");
  return v3;
}

- (BOOL)shouldShowCandidateBar
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "shouldShowCandidateBar");

  return v3;
}

+ (Class)layoutClassForInputMode:(id)a3 keyboardType:(int64_t)a4 screenTraits:(id)a5
{
  unsigned int v6;
  id v7;
  id v8;
  void *v9;

  v6 = a4;
  v7 = a3;
  v8 = a5;
  if ((objc_msgSend(v7, "isEqualToString:", CFSTR("intl_HWR")) & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    if (UIKeyboardInputModeWithTypeUsesKBStar(v7, v6))
      objc_msgSend((id)objc_opt_class(), "_subclassForScreenTraits:", v8);
    else
      UIKeyboardLayoutClassForInputMode(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return (Class)v9;
}

- (double)timestampOfLastTouchesEnded
{
  id WeakRetained;
  void *v3;
  double v4;
  double v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "timestampOfLastTouchesEnded");
  v5 = v4;

  return v5;
}

- (BOOL)shouldAllowSelectionGestures:(BOOL)a3 atPoint:(CGPoint)a4 toBegin:(BOOL)a5
{
  uint64_t v5;
  void *v6;
  _BOOL8 v7;
  double y;
  double x;
  _BOOL8 v10;
  id *p_isa;
  void *v12;
  int v13;
  void *WeakRetained;
  char v16;
  void *v17;
  id v18;
  char v19;
  id *v20;
  char v21;
  uint64_t v22;
  id v23;
  void *v24;

  v7 = a5;
  y = a4.y;
  x = a4.x;
  v10 = a3;
  p_isa = (id *)&self->super.isa;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 && (objc_msgSend(p_isa, "isRotating") & 1) == 0)
  {
    objc_msgSend(p_isa, "textInputTraits");
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(WeakRetained, "isSecureTextEntry");

    if ((v16 & 1) != 0)
      goto LABEL_7;
    if (objc_msgSend(p_isa, "usesCandidateSelection"))
    {
      if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1)
      {
        WeakRetained = objc_loadWeakRetained(p_isa + 97);
        objc_msgSend(WeakRetained, "candidateController");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v17, "activeCandidateViewType");

        if ((v5 & 2) != 0)
        {
          v18 = objc_loadWeakRetained(p_isa + 97);
          objc_msgSend(v18, "candidateController");
          WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend(WeakRetained, "barIsExtended");

          if ((v19 & 1) != 0)
          {
LABEL_7:
            LOBYTE(v13) = 0;
            return v13;
          }
        }
      }
    }
    v20 = p_isa + 97;
    v12 = objc_loadWeakRetained(p_isa + 97);
    v21 = objc_msgSend(v12, "keyboardLayoutIsInAnotherProcess");
    if ((v21 & 1) != 0)
      goto LABEL_15;
    p_isa = (id *)objc_loadWeakRetained(p_isa + 97);
    objc_msgSend(p_isa, "layout");
    v22 = objc_claimAutoreleasedReturnValue();
    if (!v22)
    {
      LOBYTE(v13) = 0;
LABEL_20:

      goto LABEL_4;
    }
    WeakRetained = (void *)v22;
    v5 = (uint64_t)objc_loadWeakRetained(v20);
    objc_msgSend((id)v5, "layout");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "shouldAllowSelectionGestures:atPoint:toBegin:", v10, v7, x, y))
    {
LABEL_15:
      v23 = objc_loadWeakRetained(v20);
      objc_msgSend(v23, "_rootInputWindowController");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v24, "isTransitioningBetweenFloatingStates") ^ 1;

      if ((v21 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      LOBYTE(v13) = 0;
    }

    goto LABEL_20;
  }
  LOBYTE(v13) = 0;
LABEL_4:

  return v13;
}

- (void)setTwoFingerTapTimestamp:(double)a3
{
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTwoFingerTapTimestamp:", a3);

}

- (void)updateInputAssistantButtonItems
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateInputAssistantButtonItems");

}

- (unsigned)setMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 lastInputString:(id)a6 searchString:(id)a7 candidateOffset:(int64_t)a8 liveConversionSegments:(id)a9 highlighSegmentIndex:(unint64_t)a10
{
  NSUInteger length;
  NSUInteger location;
  id v16;
  id v17;
  void *v18;
  id WeakRetained;
  int v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  id v29;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  length = a4.length;
  location = a4.location;
  v16 = a3;
  v34 = a5;
  v33 = a6;
  v17 = a7;
  v35 = a9;
  -[_UIKeyboardStateManager setCandidateViewOffset:](self, "setCandidateViewOffset:", a8);
  if (-[_UIKeyboardStateManager liveConversionEnabled](self, "liveConversionEnabled")
    || -[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
  {
    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v16);
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v20 = objc_msgSend(WeakRetained, "caretVisible");

    if (a10 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if ((v20 & 1) == 0)
      {
        v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        v22 = v21;
        v23 = 1;
LABEL_8:
        objc_msgSend(v21, "setCaretVisible:", v23);

      }
    }
    else if (v20)
    {
      v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v22 = v21;
      v23 = 0;
      goto LABEL_8;
    }
    v40 = 0;
    v41 = &v40;
    v42 = 0x3010000000;
    v44 = 0;
    v45 = 0;
    v43 = &unk_18685B0AF;
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __156___UIKeyboardStateManager_setMarkedText_selectedRange_inputString_lastInputString_searchString_candidateOffset_liveConversionSegments_highlighSegmentIndex___block_invoke;
    v36[3] = &unk_1E16BB288;
    v24 = v18;
    v38 = &v40;
    v39 = a10;
    v37 = v24;
    objc_msgSend(v35, "enumerateObjectsUsingBlock:", v36);
    -[_UIKeyboardStateManager _configureMarkedTextAttributesForConversion:selectedRange:highlightRange:](self, "_configureMarkedTextAttributesForConversion:selectedRange:highlightRange:", v24, location, length, v41[4], v41[5]);
    v26 = v33;
    v25 = v34;
    v27 = (void *)objc_msgSend(v24, "copy");
    LOBYTE(v32) = 1;
    v28 = -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v27, location, length, v34, v33, v17, v32);

    _Block_object_dispose(&v40, 8);
    goto LABEL_10;
  }
  if (v16)
  {
    v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v16);
    -[_UIKeyboardStateManager _configureMarkedTextAttributesForConversion:selectedRange:highlightRange:](self, "_configureMarkedTextAttributesForConversion:selectedRange:highlightRange:", v31, location, length, 0, 0);
    LOBYTE(v32) = 0;
    v26 = v33;
    v25 = v34;
    v28 = -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v31, location, length, v34, v33, v17, v32);

  }
  else
  {
    v28 = 0;
    v26 = v33;
    v25 = v34;
  }
LABEL_10:
  -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
  v29 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v29, "updateHostedInlineCandidateView");

  return v28;
}

- (void)_configureMarkedTextAttributesForConversion:(id)a3 selectedRange:(_NSRange)a4 highlightRange:(_NSRange)a5
{
  NSUInteger length;
  NSUInteger location;
  NSUInteger v7;
  NSUInteger v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  length = a5.length;
  location = a5.location;
  v7 = a4.length;
  v8 = a4.location;
  v20 = a3;
  v10 = objc_msgSend(v20, "length");
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (+[UIKeyboard isRedesignedTextCursorEnabled](UIKeyboard, "isRedesignedTextCursorEnabled"))
  {
    objc_msgSend(v20, "beginEditing");
    v12 = *(_QWORD *)off_1E1679240;
    objc_msgSend(v20, "addAttribute:value:range:", *(_QWORD *)off_1E1679240, &unk_1E1A972C0, 0, v10);
    if (length)
      objc_msgSend(v20, "addAttribute:value:range:", v12, &unk_1E1A972D8, location, length);
    objc_msgSend(v11, "addObject:", v12);
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "tintColor");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      v15 = *(_QWORD *)off_1E1679238;
      objc_msgSend(v20, "addAttribute:value:range:", *(_QWORD *)off_1E1679238, v14, 0, v10);
      objc_msgSend(v11, "addObject:", v15);
    }
    v16 = v20;
    if (v7)
    {
      v17 = objc_msgSend(v20, "length");
      v16 = v20;
      if (v8 + v7 <= v17)
      {
        objc_msgSend(v20, "addAttribute:value:range:", CFSTR("NSMarkedTextSelectionAttributeName"), MEMORY[0x1E0C9AAB0], v8, v7);
        objc_msgSend(v11, "addObject:", CFSTR("NSMarkedTextSelectionAttributeName"));
        v16 = v20;
      }
    }
    objc_msgSend(v16, "endEditing");

  }
  else
  {
    v18 = *(_QWORD *)off_1E1678C50;
    +[UIColor _markedTextBackgroundColor](UIColor, "_markedTextBackgroundColor");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "addAttribute:value:range:", v18, v19, 0, v10);

    objc_msgSend(v11, "addObject:", v18);
  }
  objc_msgSend(v20, "addAttribute:value:range:", 0x1E177AF00, v11, 0, v10);

}

- (void)setAttributedMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 searchString:(id)a6
{
  uint64_t v6;

  LOBYTE(v6) = 1;
  -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", a3, a4.location, a4.length, a5, 0, a6, v6);
}

- (void)setInlineCompletionAsMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 searchString:(id)a6
{
  NSUInteger length;
  NSUInteger location;
  id v11;
  id v12;
  uint64_t v13;
  id v14;

  length = a4.length;
  location = a4.location;
  v11 = a6;
  v12 = a5;
  v14 = a3;
  -[_UIKeyboardStateManager _noteInlineCompletionAsMarkedText:](self, "_noteInlineCompletionAsMarkedText:", v14);
  LOBYTE(v13) = 1;
  -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v14, location, length, v12, 0, v11, v13);

}

- (unsigned)_setAttributedMarkedText:(id)a3 selectedRange:(_NSRange)a4 inputString:(id)a5 lastInputString:(id)a6 searchString:(id)a7 compareAttributes:(BOOL)a8
{
  NSUInteger location;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  void *v23;
  __CFString *v24;
  __CFString *v25;
  void *v26;
  void *v27;
  char v28;
  uint64_t v29;
  void *v30;
  __CFString *v31;
  __CFString *v32;
  int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  void *v39;
  void *v40;
  _BOOL4 v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  int64_t v52;
  UIWKDocumentRequest *v53;
  void *v54;
  void *v55;
  char v56;
  void *v57;
  UIKeyboardCandidateList *m_candidateList;
  void *v59;
  NSUInteger length;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  _QWORD v66[5];
  _QWORD v67[5];

  length = a4.length;
  location = a4.location;
  v13 = a3;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "presentingTextCompletionAsMarkedText");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v63 = v18;
  v64 = v16;
  if (objc_msgSend(v18, "length"))
  {
    objc_msgSend(v13, "string");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v18, "isEqualToString:", v19);

    if (!-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection") && v20)
    {
      v21 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection");
  }
  -[TIKeyboardState setInputForMarkedText:](self->m_keyboardState, "setInputForMarkedText:", v14, length);
  -[TIKeyboardState setSearchStringForMarkedText:](self->m_keyboardState, "setSearchStringForMarkedText:", v16);
  v21 = 1;
LABEL_7:
  v65 = v14;
  objc_msgSend(v13, "string", length);
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = (void *)v22;
  if (v22)
    v24 = (__CFString *)v22;
  else
    v24 = &stru_1E16EDF20;
  v25 = v24;

  if (a8)
  {
    if (!v13)
      goto LABEL_22;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "attributedMarkedText");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "isEqualToAttributedString:", v13);

    if ((v28 & 1) == 0)
      goto LABEL_22;
  }
  else
  {
    -[_UIKeyboardStateManager _markedText](self, "_markedText");
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = (void *)v29;
    if (v29)
      v31 = (__CFString *)v29;
    else
      v31 = &stru_1E16EDF20;
    v32 = v31;

    v33 = -[__CFString isEqualToString:](v32, "isEqualToString:", v25);
    if (!v33)
      goto LABEL_22;
  }
  if (!-[__CFString length](v25, "length")
    || (-[_UIKeyboardStateManager documentState](self, "documentState"),
        v34 = (void *)objc_claimAutoreleasedReturnValue(),
        v35 = objc_msgSend(v34, "selectedRangeInMarkedText"),
        v37 = v36,
        v34,
        location == v35)
    && v62 == v37)
  {
    v38 = 0;
    v39 = v65;
    v40 = v15;
LABEL_46:
    v49 = v63;
    v48 = v64;
    goto LABEL_47;
  }
LABEL_22:
  v41 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  v40 = v15;
  if (v15)
  {
    if (v41)
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v15, "rangeOfCharacterFromSet:", v42);

      if (v43 == 0x7FFFFFFFFFFFFFFFLL
        && !-[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v15))
      {
        v38 = 2;
        v39 = v65;
        goto LABEL_46;
      }
    }
  }
  if (v21)
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "documentStateAfterSettingMarkedText:selectedRange:", v25, location, v62);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v45);

  }
  self->m_textInputChangesIgnored = 1;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setAttributedMarkedText:selectedRange:", v13, location, v62);

  self->m_textInputChangesIgnored = 0;
  -[_UIKeyboardStateManager inputForMarkedText](self, "inputForMarkedText");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v47, "length") && !-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend(v55, "suppressPlaceholderCandidate");

    v49 = v63;
    v48 = v64;
    if ((v56 & 1) == 0)
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v67[0] = MEMORY[0x1E0C809B0];
      v67[1] = 3221225472;
      v67[2] = __125___UIKeyboardStateManager__setAttributedMarkedText_selectedRange_inputString_lastInputString_searchString_compareAttributes___block_invoke;
      v67[3] = &unk_1E16BAF98;
      v67[4] = self;
      objc_msgSend(v57, "addTask:", v67);

    }
  }
  else
  {

    v49 = v63;
    v48 = v64;
  }
  -[_UIKeyboardStateManager asyncCapableInputDelegate](self, "asyncCapableInputDelegate");
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v50 || !-[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode"))
    goto LABEL_39;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v51, "delegateRespondsToSelector:", sel_requestDocumentContext_completionHandler_) & 1) == 0)
  {

    goto LABEL_39;
  }
  v52 = -[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset");

  if (v52 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_39:
    -[_UIKeyboardStateManager setCharacterRectsForCharacterRange:](self, "setCharacterRectsForCharacterRange:", 0);
    goto LABEL_40;
  }
  v53 = objc_alloc_init(UIWKDocumentRequest);
  -[UIWKDocumentRequest setFlags:](v53, "setFlags:", 33);
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 3221225472;
  v66[2] = __125___UIKeyboardStateManager__setAttributedMarkedText_selectedRange_inputString_lastInputString_searchString_compareAttributes___block_invoke_2;
  v66[3] = &unk_1E16BB2B0;
  v66[4] = self;
  objc_msgSend(v54, "requestDocumentContext:completionHandler:", v53, v66);

LABEL_40:
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    m_candidateList = self->m_candidateList;
    -[_UIKeyboardStateManager inputStringFromPhraseBoundary](self, "inputStringFromPhraseBoundary");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIKeyboardCandidateList setInlineText:](m_candidateList, "setInlineText:", v59);

  }
  v39 = v65;
  if (-[UIKeyboardCandidateList isExtendedList](self->m_candidateList, "isExtendedList"))
    self->m_hasEditedMarkedTextInExtendedView = 1;
  -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");
  v38 = 1;
LABEL_47:

  return v38;
}

- (void)clearInputForMarkedText
{
  -[TIKeyboardState setInputForMarkedText:](self->m_keyboardState, "setInputForMarkedText:", 0);
  -[TIKeyboardState setSearchStringForMarkedText:](self->m_keyboardState, "setSearchStringForMarkedText:", 0);
  self->m_hasEditedMarkedTextInExtendedView = 0;
}

- (BOOL)supportsSetPhraseBoundary
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "rtiInputSourceState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "rtiInputSourceState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "supportsSetPhraseBoundary");

  }
  else
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v5, "supportsSetPhraseBoundary");
  }

  return v7;
}

- (BOOL)hasEditableMarkedText
{
  _BOOL4 v3;

  v3 = -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText");
  if (v3)
    LOBYTE(v3) = -[_UIKeyboardStateManager supportsSetPhraseBoundary](self, "supportsSetPhraseBoundary");
  return v3;
}

- (BOOL)hasInlineCompletionAsMarkedText
{
  void *v2;
  BOOL v3;

  -[_UIKeyboardStateManager inlineCompletionAsMarkedText](self, "inlineCompletionAsMarkedText");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (id)inputForMarkedText
{
  return (id)-[TIKeyboardState inputForMarkedText](self->m_keyboardState, "inputForMarkedText");
}

- (void)smartSelectionForTextInDocument:(id)a3 inRange:(_NSRange)a4 options:(unint64_t)a5 completion:(id)a6
{
  NSUInteger length;
  NSUInteger location;
  __CFString *v11;
  id v12;
  void *v13;
  CFIndex v14;
  const __CFAllocator *v15;
  const __CFLocale *v16;
  CFStringTokenizerRef v17;
  __CFStringTokenizer *v18;
  CFRange CurrentTokenRange;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  id v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  CFRange v39;

  length = a4.length;
  location = a4.location;
  v11 = (__CFString *)a3;
  v12 = a6;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[__CFString length](v11, "length");
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v16 = (const __CFLocale *)objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v39.location = 0;
  v39.length = v14;
  v17 = CFStringTokenizerCreate(v15, v11, v39, 0, v16);
  if (v17)
  {
    v18 = v17;
    while (CFStringTokenizerAdvanceToNextToken(v18))
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v18);
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", CurrentTokenRange.location, CurrentTokenRange.length);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addObject:", v20);

    }
    CFRelease(v18);
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "currentInputMode");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "normalizedIdentifier");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = 0;
    v25 = 0;
    do
      v25 |= TISmartSelectionOptionFromUISmartSelectionOption((1 << v24++) & a5);
    while (v24 != 64);
    v26 = objc_alloc_init(MEMORY[0x1E0CB3530]);
    objc_msgSend(v26, "lock");
    v35 = 0;
    v36 = &v35;
    v37 = 0x2020000000;
    v38 = 0;
    objc_msgSend(v26, "unlock");
    -[_UIKeyboardStateManager inputManager](self, "inputManager");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = __86___UIKeyboardStateManager_smartSelectionForTextInDocument_inRange_options_completion___block_invoke;
    v31[3] = &unk_1E16BB2D8;
    v28 = v26;
    v32 = v28;
    v34 = &v35;
    v29 = v12;
    v33 = v29;
    objc_msgSend(v27, "smartSelectionForTextInDocument:inRange:language:tokenizedRanges:options:completion:", v11, location, length, v23, v13, v25, v31);

    objc_msgSend(v28, "lock");
    if (!*((_BYTE *)v36 + 24))
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", 1.0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "waitUntilDate:", v30);

      if (!*((_BYTE *)v36 + 24))
      {
        (*((void (**)(id, NSUInteger, NSUInteger))v29 + 2))(v29, location, length);
        *((_BYTE *)v36 + 24) = 1;
      }
    }
    objc_msgSend(v28, "unlock");

    _Block_object_dispose(&v35, 8);
  }
  else
  {
    (*((void (**)(id, NSUInteger, NSUInteger))v12 + 2))(v12, location, length);
  }

}

- (id)searchStringForMarkedText
{
  void *v3;
  void *v4;
  __CFString *v5;
  uint64_t v6;
  void *v7;
  __CFString *v8;

  -[TIKeyboardState searchStringForMarkedText](self->m_keyboardState, "searchStringForMarkedText");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    -[_UIKeyboardStateManager _markedText](self, "_markedText");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    v8 = &stru_1E16EDF20;
    if (v6)
      v8 = (__CFString *)v6;
    v5 = v8;

  }
  return v5;
}

- (id)inputStringFromPhraseBoundary
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;

  -[_UIKeyboardStateManager documentState](self, "documentState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "markedText");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  if (-[_UIKeyboardStateManager supportsSetPhraseBoundary](self, "supportsSetPhraseBoundary"))
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "selectedRangeInMarkedText");

    if (v7)
    {
      if (v7 < objc_msgSend(v5, "length"))
      {
        objc_msgSend(v5, "substringToIndex:", v7);
        v8 = objc_claimAutoreleasedReturnValue();

        v5 = (void *)v8;
      }
    }
  }
  return v5;
}

- (BOOL)cursorIsAtEndOfMarkedText
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if (!-[_UIKeyboardStateManager supportsSetPhraseBoundary](self, "supportsSetPhraseBoundary"))
    return 0;
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "selectedRangeInMarkedText");

  -[_UIKeyboardStateManager documentState](self, "documentState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "markedText");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "length");

  return v4 == v7;
}

- (BOOL)cursorIsAtStartOfInlineCompletionMarkedText
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;

  -[_UIKeyboardStateManager inlineCompletionAsMarkedText](self, "inlineCompletionAsMarkedText");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "selectedTextRange");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "markedTextRange");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v5, "isEmpty") & 1) != 0)
    {
      objc_msgSend(v5, "end");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "start");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v8, "isEqual:", v9);

      if ((v10 & 1) != 0)
        return 1;
    }
    else
    {

    }
  }
  return 0;
}

- (void)syncDocumentStateToInputDelegate
{
  void *v3;
  _QWORD v4[5];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __59___UIKeyboardStateManager_syncDocumentStateToInputDelegate__block_invoke;
  v4[3] = &unk_1E16BAF98;
  v4[4] = self;
  objc_msgSend(v3, "performSingleTask:", v4);

}

- (void)documentStateFromInputDelegate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  char isKindOfClass;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD v47[4];
  id v48;
  _QWORD v49[4];
  id v50;

  v4 = a3;
  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    if (!self->m_textInputChangingText && !self->m_textInputUpdatingSelection)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "forwardingInputDelegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        objc_msgSend(v5, "documentState");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "documentState");
        v16 = objc_claimAutoreleasedReturnValue();
        goto LABEL_16;
      }
    }
  }
  -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
      goto LABEL_8;
    -[_UIKeyboardStateManager asyncWebKitInteractionDelegate](self, "asyncWebKitInteractionDelegate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      -[_UIKeyboardStateManager asyncWebKitInteractionDelegate](self, "asyncWebKitInteractionDelegate");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 3221225472;
      v47[2] = __58___UIKeyboardStateManager_documentStateFromInputDelegate___block_invoke_2;
      v47[3] = &unk_1E16BB328;
      v48 = v4;
      objc_msgSend(v13, "requestAutocorrectionContextWithCompletionHandler:", v47);

      v11 = v48;
      goto LABEL_9;
    }
    if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry"))
    {
      v14 = (void *)MEMORY[0x1E0DBDB78];
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "documentStateOfSecureTextDocument:", v15);
      v16 = objc_claimAutoreleasedReturnValue();
LABEL_16:
      v17 = (void *)v16;
      (*((void (**)(id, uint64_t))v4 + 2))(v4, v16);

      goto LABEL_10;
    }
    if (v5
      || (-[TIKeyboardState textInputTraits](self->m_keyboardState, "textInputTraits"),
          v18 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v18, "recentInputIdentifier"),
          v19 = (void *)objc_claimAutoreleasedReturnValue(),
          v19,
          v18,
          v19))
    {
      v20 = (void *)MEMORY[0x1E0DBDB78];
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "documentStateOfDocumentWithRecentInputIdentifier:", v21);
      v22 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v43 = (void *)MEMORY[0x1E0DBDB78];
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "documentStateOfDocument:", v21);
      v22 = objc_claimAutoreleasedReturnValue();
    }
    v23 = (void *)v22;

    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "currentInputMode");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "isExtensionInputMode");

    if (!v26)
    {
LABEL_31:
      (*((void (**)(id, void *))v4 + 2))(v4, v23);

      goto LABEL_10;
    }
    if (WebKitFramework)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
      {
        objc_msgSend(v23, "contextBeforeInput");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "length");

        if (!v30)
        {
          objc_msgSend(v23, "documentStateAfterInsertingText:", CFSTR("\n"));
          v31 = objc_claimAutoreleasedReturnValue();

          v23 = (void *)v31;
        }
      }
    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "selectedTextRange");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "beginningOfDocument");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "start");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v34, "comparePosition:toPosition:", v36, v37) == 1)
      {

      }
      else
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v45 = v35;
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "end");
        v46 = v34;
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "endOfDocument");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend(v38, "comparePosition:toPosition:", v39, v41);

        if (v44 != 1)
        {
LABEL_30:

          goto LABEL_31;
        }
      }
    }
    v42 = objc_msgSend(objc_alloc(MEMORY[0x1E0DBDB78]), "initWithContextBefore:markedText:selectedText:contextAfter:selectedRangeInMarkedText:", 0, 0, 0, 0, 0x7FFFFFFFFFFFFFFFLL, 0);

    v23 = (void *)v42;
    goto LABEL_30;
  }

LABEL_8:
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = __58___UIKeyboardStateManager_documentStateFromInputDelegate___block_invoke;
  v49[3] = &unk_1E16BB300;
  v50 = v4;
  objc_msgSend(v10, "requestTextContextForAutocorrectionWithCompletionHandler:", v49);

  v11 = v50;
LABEL_9:

LABEL_10:
}

- (void)syncDocumentStateToInputDelegateWithExecutionContext:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _UIKeyboardStateManager *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a3;
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_selectedTextRange");
  v8 = v7;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __80___UIKeyboardStateManager_syncDocumentStateToInputDelegateWithExecutionContext___block_invoke;
  v10[3] = &unk_1E16BB378;
  v11 = v4;
  v12 = self;
  v13 = v6;
  v14 = v8;
  v9 = v4;
  -[_UIKeyboardStateManager documentStateFromInputDelegate:](self, "documentStateFromInputDelegate:", v10);

}

- (void)prepareForSelectionChange
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  _UIKeyboardStateManager *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  UITextRange *v25;
  UITextRange *pendingAutocorrectRange;
  _QWORD v27[5];

  if (!self->m_selecting && !self->m_textInputChangesIgnored)
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v3, "isMainThreadExecutingTask") & 1) == 0)
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "requestedAutocorrection");

      if ((v5 & 1) != 0)
        goto LABEL_7;
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "waitUntilAllTasksAreFinished");
    }

LABEL_7:
    if (self->m_textInputChangingText)
    {
LABEL_11:
      -[_UIKeyboardStateManager dismissTextChoicePrompt](self, "dismissTextChoicePrompt");
      self->m_selecting = 1;
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "assertCursorForForSelectionChange");

      -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "activeSelection");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "selectedRange");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      self->m_selectionIsEmpty = objc_msgSend(v10, "isEmpty");

      return;
    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "insideKeyInputDelegateCall") & 1) != 0
      || -[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText"))
    {
LABEL_10:

      goto LABEL_11;
    }
    +[UIDictationController activeInstance](UIDictationController, "activeInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "dictationIsModifyingText");

    if ((v12 & 1) != 0)
      goto LABEL_11;
    if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
      && (-[_UIKeyboardStateManager inlineCompletionAsMarkedText](self, "inlineCompletionAsMarkedText"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          v13,
          !v13))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "selectedTextRange");
      v25 = (UITextRange *)objc_claimAutoreleasedReturnValue();
      pendingAutocorrectRange = self->_pendingAutocorrectRange;
      self->_pendingAutocorrectRange = v25;

      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = __52___UIKeyboardStateManager_prepareForSelectionChange__block_invoke;
      v27[3] = &unk_1E16B3FD8;
      v27[4] = self;
      v15 = v27;
      v14 = self;
    }
    else
    {
      if (!-[_UIKeyboardStateManager _shouldAcceptAutocorrectionOnSelectionChange](self, "_shouldAcceptAutocorrectionOnSelectionChange"))
      {
        if (self->m_userChangedSelection)
          goto LABEL_11;
        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v16)
          goto LABEL_11;
        v17 = (void *)MEMORY[0x1E0DBDBE8];
        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "inputString");
        v19 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "candidateWithUnchangedInput:", v19);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v19) = objc_opt_respondsToSelector();

        if ((v19 & 1) != 0)
        {
          v21 = v6;
          -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "valueForKey:", CFSTR("learningFlagsForLastAcceptedCandidate"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "performSelector:withObject:", sel_setLearningFlags_, v23);

        }
        -[_UIKeyboardStateManager textAccepted:](self, "textAccepted:", v6);
        goto LABEL_10;
      }
      v14 = self;
      v15 = 0;
    }
    -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](v14, "acceptAutocorrectionWithCompletionHandler:", v15);
    goto LABEL_11;
  }
}

- (void)selectionWillChange:(id)a3
{
  id v4;
  unint64_t m_textInputChangingCount;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  id v16;

  v4 = a3;
  m_textInputChangingCount = self->m_textInputChangingCount;
  self->m_textInputChangingCount = m_textInputChangingCount + 1;
  if (!m_textInputChangingCount && !self->m_textInputChangesIgnored)
  {
    v16 = v4;
    -[_UIKeyboardStateManager prepareForSelectionChange](self, "prepareForSelectionChange");
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "forwardingInputDelegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isEditing"))
    {
      v8 = objc_opt_respondsToSelector();

      if ((v8 & 1) != 0)
      {
        objc_msgSend(v16, "interactionAssistant");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "view");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "forwardingInputDelegate");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v10 == v12)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
    else
    {

    }
    if (!+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
      goto LABEL_11;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "shouldRespectForwardingInputDelegate");

    if (!v14)
      goto LABEL_11;
LABEL_10:
    -[_UIKeyboardStateManager clearForwardingInputDelegateAndResign:](self, "clearForwardingInputDelegateAndResign:", 1);
LABEL_11:
    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "selectionWillChange");

    v4 = v16;
  }

}

- (void)setSelectionWithPoint:(CGPoint)a3
{
  double y;
  double x;
  void *v5;
  id v6;

  y = a3.y;
  x = a3.x;
  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "activeSelection");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "setSelectionWithPoint:", x, y);
  objc_msgSend(v6, "commit");

}

- (void)updateForChangedSelection
{
  void *v3;
  _QWORD v4[5];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __52___UIKeyboardStateManager_updateForChangedSelection__block_invoke;
  v4[3] = &unk_1E16BAF98;
  v4[4] = self;
  objc_msgSend(v3, "performSingleTask:", v4);

}

- (void)updateForChangedSelectionWithExecutionContext:(id)a3
{
  id v4;
  id WeakRetained;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v4 = a3;
  if (!-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")
    || !-[_UIKeyboardStateManager supportsSetPhraseBoundary](self, "supportsSetPhraseBoundary"))
  {
    -[_UIKeyboardStateManager setCurrentCandidateRequest:](self, "setCurrentCandidateRequest:", 0);
  }
  if (-[_UIKeyboardStateManager hasAdvancedInputDelegate](self, "hasAdvancedInputDelegate"))
  {
    -[_UIKeyboardStateManager clearTransientState](self, "clearTransientState");
    if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "clearCursorAssertion");

      -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
      v6 = &__block_literal_global_752;
    }
    else
    {
      -[_UIKeyboardStateManager clearInput](self, "clearInput");
      -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", 0);
      self->m_userChangedSelection = 1;
      v9 = MEMORY[0x1E0C809B0];
      self->m_suggestionsShownForCurrentDeletion = 0;
      v10[0] = v9;
      v10[1] = 3221225472;
      v10[2] = __73___UIKeyboardStateManager_updateForChangedSelectionWithExecutionContext___block_invoke_3;
      v10[3] = &unk_1E16BAF98;
      v10[4] = self;
      v6 = v10;
    }
    objc_msgSend(v4, "childWithContinuation:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager syncDocumentStateToInputDelegateWithExecutionContext:](self, "syncDocumentStateToInputDelegateWithExecutionContext:", v8);
  }
  else
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DBDB78]), "initWithContextBefore:markedText:selectedText:contextAfter:selectedRangeInMarkedText:", 0, 0, 0, 0, 0x7FFFFFFFFFFFFFFFLL, 0);
    -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v7);

    objc_msgSend(v4, "childWithContinuation:", &__block_literal_global_751);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager syncInputManagerToKeyboardStateWithExecutionContext:](self, "syncInputManagerToKeyboardStateWithExecutionContext:", v8);
  }

}

- (BOOL)shouldGenerateCandidatesAfterSelectionChange
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;

  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
    return 1;
  if (!-[_UIKeyboardStateManager _shouldLoadPredictionsBasedOnCurrentTraits](self, "_shouldLoadPredictionsBasedOnCurrentTraits"))
  {
    if (objc_msgSend((id)UIApp, "_isSpringBoard"))
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "hasAutocorrection");

      if (v4)
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "autocorrectionList");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
        {

        }
        else
        {
          -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "textSuggestionList");
          v8 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v8)
            return 0;
        }
      }
    }
  }
  if (-[UITextInputTraits contentsIsSingleValue](self->m_traits, "contentsIsSingleValue"))
    return 1;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "shouldExtendPriorWord");

  if ((v10 & 1) != 0)
    return 1;
  return -[_UIKeyboardStateManager _shouldLoadPredictionsBasedOnCurrentTraits](self, "_shouldLoadPredictionsBasedOnCurrentTraits");
}

- (void)completeUpdateForChangedSelection:(BOOL)a3
{
  _BOOL4 v3;
  id WeakRetained;
  int v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int m_selectionIsEmpty;
  void *v14;
  void *v15;
  void *v16;
  int v17;

  v3 = a3;
  -[_UIKeyboardStateManager setShiftOffIfNeeded](self, "setShiftOffIfNeeded");
  if (v3)
  {
    -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
    -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v6 = objc_msgSend(WeakRetained, "hasCursorAssertion");

  if (v6)
  {
    v7 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v7, "clearCursorAssertion");
  }
  else
  {
    -[_UIKeyboardStateManager _activeAssertionController](self, "_activeAssertionController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_updateSubjectWithAssertionState");
  }

  if (-[_UIKeyboardStateManager noContent](self, "noContent"))
    -[_UIKeyboardStateManager setInitialDirection](self, "setInitialDirection");
  self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
  self->m_suggestionsShownForCurrentDeletion = 0;
  v8 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v8, "updateStylingTraitsIfNeeded");

  self->m_didAutomaticallyInsertSpace = 0;
  if (!self->m_textInputChangingText)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "changedSelection");

  }
  -[_UIKeyboardStateManager textSelectionController](self, "textSelectionController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "selectionDidChange");

  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "selectionDidChange");

  -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "selectionDidChange");

  m_selectionIsEmpty = self->m_selectionIsEmpty;
  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "activeSelection");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "selectedRange");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isEmpty");

  if (m_selectionIsEmpty != v17)
    self->m_editingTraitsMarkedDirty = 1;
}

- (void)selectionDidChange:(id)a3
{
  id v4;
  unint64_t m_textInputChangingCount;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  char v20;
  BOOL v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[5];
  _QWORD v34[5];
  _QWORD v35[5];

  v4 = a3;
  m_textInputChangingCount = self->m_textInputChangingCount;
  if (m_textInputChangingCount == 1)
  {
    if (!self->m_ignoreSelectionChange || !self->m_textInputChangesIgnored || self->m_textInputChangingText)
    {
      self->m_textInputChangingCount = 0;
      goto LABEL_9;
    }
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __46___UIKeyboardStateManager_selectionDidChange___block_invoke;
    v35[3] = &unk_1E16BAF98;
    v35[4] = self;
    objc_msgSend(v6, "addTask:", v35);

    m_textInputChangingCount = self->m_textInputChangingCount;
  }
  if (!m_textInputChangingCount)
    goto LABEL_30;
  v7 = m_textInputChangingCount - 1;
  self->m_textInputChangingCount = v7;
  if (v7)
    goto LABEL_30;
LABEL_9:
  if (self->m_textInputChangesIgnored)
    goto LABEL_30;
  self->m_textInputUpdatingSelection = 1;
  if (self->m_textInputChangingText)
  {
    -[_UIKeyboardStateManager textChanged:](self, "textChanged:", v4);
  }
  else if (-[_UIKeyboardStateManager noContent](self, "noContent"))
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = __46___UIKeyboardStateManager_selectionDidChange___block_invoke_2;
    v34[3] = &unk_1E16BAF98;
    v34[4] = self;
    objc_msgSend(v8, "addTask:", v34);

  }
  else
  {
    -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");
  }
  self->m_textInputChangingText = 0;
  self->m_textInputUpdatingSelection = 0;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "_textSelectingContainer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "interactionAssistant");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    if (-[_UIKeyboardStateManager supportsSetPhraseBoundary](self, "supportsSetPhraseBoundary"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "markedTextRange");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "_setGestureRecognizers");

      }
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v15, "inputSystemClientEnabled") & 1) == 0)
    goto LABEL_22;
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isNotifyingDelegateOfRemoteOutputOperation");

  if ((v17 & 1) == 0)
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __46___UIKeyboardStateManager_selectionDidChange___block_invoke_3;
    v33[3] = &unk_1E16BAF98;
    v33[4] = self;
    objc_msgSend(v15, "addTask:", v33);
LABEL_22:

  }
  if (!self->_remoteTextInputPartner)
    goto LABEL_30;
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v18, "isNotifyingDelegateOfRemoteOutputOperation") & 1) != 0)
    goto LABEL_25;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_opt_respondsToSelector();

  if ((v20 & 1) != 0)
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v21 = +[UIKeyboard isMajelSupported](UIKeyboard, "isMajelSupported")
         && +[UIDictationController isRunning](UIDictationController, "isRunning");
      +[UIKeyboardCameraSession activeSession](UIKeyboardCameraSession, "activeSession");
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      if (!self->m_suppressingDocumentAssertions && !v21 && !v22)
      {
        -[_UIKeyboardStateManager documentState](self, "documentState");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "contextBeforeInput");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "length");
        objc_msgSend(v23, "selectedText");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "length");

        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
        {
          objc_msgSend(v23, "fullString");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "textOperations");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "setTextToAssert:", v28);

        }
        objc_msgSend(v18, "textOperations");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "setSelectionRangeToAssert:", v25, v27);

        -[_UIKeyboardStateManager buildInputSourceState](self, "buildInputSourceState");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "textOperations");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "setInputSourceState:", v31);

        objc_msgSend(v18, "flushOperations");
      }
    }
LABEL_25:

  }
LABEL_30:
  -[_UIKeyboardStateManager setArrowKeyHistory:](self, "setArrowKeyHistory:", 0);
  if (!self->m_textInputChangesIgnored)
    -[_UIKeyboardStateManager postInputResponderCapabilitiesChangedNotification](self, "postInputResponderCapabilitiesChangedNotification");

}

- (void)updateTextChoicePromptSelection:(id)a3 toRange:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a3;
  v6 = a4;
  objc_msgSend(v13, "selectedTextRange");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
    goto LABEL_5;
  objc_msgSend(v6, "start");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "start");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "comparePosition:toPosition:", v8, v9))
  {

LABEL_5:
    -[_UIKeyboardStateManager selectionWillChange:](self, "selectionWillChange:", v13);
    objc_msgSend(v13, "setSelectedTextRange:", v6);
    -[_UIKeyboardStateManager selectionDidChange:](self, "selectionDidChange:", v13);
    goto LABEL_6;
  }
  objc_msgSend(v6, "end");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "end");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v13, "comparePosition:toPosition:", v10, v11);

  if (v12)
    goto LABEL_5;
LABEL_6:

}

- (void)deleteHandwritingStrokesAtIndexes:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v6;
  char isKindOfClass;
  id v8;
  void *v9;
  id v10;

  v10 = a3;
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v8 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v8, "layout");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "deleteHandwritingStrokesAtIndexes:", v10);

  }
}

- (void)showSelectionCommands
{
  id v2;

  -[_UIKeyboardStateManager _editMenuAssistant](self, "_editMenuAssistant");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "showSelectionCommands");

}

- (void)acceptingCandidateWithTrigger:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    v5 = objc_alloc_init(NSClassFromString(CFSTR("RTIInputOperation")));
    objc_msgSend(v5, "setActionSelector:", sel_acceptingCandidateWithTrigger_);
    v9 = CFSTR("candidateAcceptedTrigger");
    v10[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "setCustomInfo:", v6);
    objc_msgSend(v5, "setCustomInfoType:", 0x1E1750460);
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "performInputOperation:", v5);

  }
  else
  {
    -[_UIKeyboardStateManager inputManager](self, "inputManager");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "acceptingCandidateWithTrigger:", v4);

  }
}

- (void)changingContextWithTrigger:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    v5 = objc_alloc_init(NSClassFromString(CFSTR("RTIInputOperation")));
    objc_msgSend(v5, "setActionSelector:", sel_changingContextWithTrigger_);
    v9 = CFSTR("contextChangeTrigger");
    v10[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "setCustomInfo:", v6);
    objc_msgSend(v5, "setCustomInfoType:", 0x1E1750460);
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "performInputOperation:", v5);

  }
  else
  {
    -[_UIKeyboardStateManager inputManager](self, "inputManager");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "changingContextWithTrigger:", v4);

  }
}

- (void)syncInputManagerToKeyboardState
{
  void *v3;
  _QWORD v4[5];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __58___UIKeyboardStateManager_syncInputManagerToKeyboardState__block_invoke;
  v4[3] = &unk_1E16BAF98;
  v4[4] = self;
  objc_msgSend(v3, "performSingleTask:", v4);

}

- (void)syncInputManagerToKeyboardStateWithExecutionContext:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  _UIKeyboardStateManager *v23;

  v4 = a3;
  -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
  -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
  v5 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v5, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v5, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  v18 = MEMORY[0x1E0C809B0];
  v19 = 3221225472;
  v20 = __79___UIKeyboardStateManager_syncInputManagerToKeyboardStateWithExecutionContext___block_invoke;
  v21 = &unk_1E16BB3E0;
  v6 = v4;
  v22 = v6;
  v23 = self;
  v7 = (void *)objc_msgSend(&v18, "copy");
  +[_UIRemoteKeyboards sharedRemoteKeyboards](_UIRemoteKeyboards, "sharedRemoteKeyboards", v18, v19, v20, v21);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "oldPathForSnapshot")
    && !+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "visualModeManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v14, "useVisualModeWindowed") & 1) != 0)
    {
      v15 = -[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService");

      if (v15)
        goto LABEL_4;
    }
    else
    {

    }
  }
  else
  {
    v9 = -[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService");

    if (v9)
    {
LABEL_4:
      objc_msgSend(MEMORY[0x1E0DBDCE0], "sharedInstance");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "flush");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setStatisticChanges:", v11);

      -[_UIKeyboardStateManager backendController](self, "backendController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "syncToKeyboardState:completionHandler:", v5, v7);

      goto LABEL_10;
    }
  }
  objc_msgSend(v6, "returnExecutionToParent");
LABEL_10:
  objc_msgSend(v5, "inputContextHistory");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(v5, "inputContextHistory");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "assertCheckpointForCoding");

  }
}

- (void)syncKeyboardToConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  uint64_t i;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  char isKindOfClass;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  _UIKeyboardStateManager *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setInputManagerState:](self, "setInputManagerState:", v5);

  objc_msgSend(v4, "intermediateText");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "intermediateText");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager assertIntermediateText:](self, "assertIntermediateText:", v7);

  }
  if (objc_msgSend(v4, "assertDefaultKeyPlane")
    && -[_UIKeyboardStateManager isShifted](self, "isShifted")
    && !-[_UIKeyboardStateManager isShiftLocked](self, "isShiftLocked"))
  {
    -[_UIKeyboardStateManager setShift:](self, "setShift:", 0);
  }
  objc_msgSend(v4, "layoutTag");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "layoutTag");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setLayoutTag:", v11);

  }
  objc_msgSend(v4, "accentKeyString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v4, "accentKeyString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setLabel:forKey:", v14, CFSTR("_keyid_accent_"));

  }
  v45 = self;
  objc_msgSend(v4, "contextualDisplayKeys", v4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v47 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
    if (v47)
    {
      v46 = *(_QWORD *)v53;
      p_presentationDelegate = &self->_presentationDelegate;
      do
      {
        for (i = 0; i != v47; ++i)
        {
          if (*(_QWORD *)v53 != v46)
            objc_enumerationMutation(v16);
          v19 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * i);
          v20 = v16;
          objc_msgSend(v16, "objectForKey:", v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_loadWeakRetained((id *)p_presentationDelegate);
          objc_msgSend(v22, "activeLayout");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "currentKeyplane");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "keysWithRepresentedString:", v19);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v26 = v25;
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
          if (v27)
          {
            v28 = v27;
            v29 = *(_QWORD *)v49;
            do
            {
              for (j = 0; j != v28; ++j)
              {
                if (*(_QWORD *)v49 != v29)
                  objc_enumerationMutation(v26);
                v31 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * j);
                v32 = objc_loadWeakRetained((id *)p_presentationDelegate);
                objc_msgSend(v31, "name");
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v32, "setLabel:forKey:", v21, v33);

              }
              v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
            }
            while (v28);
          }

          v16 = v20;
        }
        v47 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v57, 16);
      }
      while (v47);
    }
  }
  else if (!v12)
  {
    goto LABEL_30;
  }
  v34 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
  objc_msgSend(v34, "layout");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v37 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
    objc_msgSend(v37, "layout");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "updateKeyCentroids");

  }
LABEL_30:
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "currentInputMode");
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v44, "multilingualLanguages");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "setMultilingualLanguages:", v41);

  if (+[UIKBMultilingualKeyboardIntroductionView shouldShowIntroductionForInputMode:](UIKBMultilingualKeyboardIntroductionView, "shouldShowIntroductionForInputMode:", v40))
  {
    v42 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
    objc_msgSend(v42, "presentMultilingualKeyboardTip:", v40);
LABEL_34:

    goto LABEL_35;
  }
  if (+[UIKBMultilingualSettingIntroductionView shouldShowIntroductionForInputMode:](UIKBMultilingualSettingIntroductionView, "shouldShowIntroductionForInputMode:", v40))
  {
    v42 = objc_loadWeakRetained((id *)&v45->_presentationDelegate);
    objc_msgSend(v42, "presentMultilingualSettingTip:", v40);
    goto LABEL_34;
  }
LABEL_35:
  objc_msgSend(v44, "trialParameters");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKBAnalyticsDispatcher setKeyboardTrialParameters:](UIKBAnalyticsDispatcher, "setKeyboardTrialParameters:", v43);

}

- (void)handleKeyboardInput:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  os_signpost_id_t v9;
  os_signpost_id_t v10;
  id WeakRetained;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  BOOL v19;
  void *v20;
  void *v21;
  int v22;
  int v23;
  _BOOL4 v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD aBlock[4];
  id v36;
  id from;
  _QWORD v38[4];
  id v39;
  _UIKeyboardStateManager *v40;
  id v41;
  uint8_t *v42;
  id v43[2];
  BOOL v44;
  BOOL v45;
  uint8_t buf[8];
  uint8_t *v47;
  uint64_t v48;
  int64_t m_textInputSource;
  id location;

  v6 = a3;
  v7 = a4;
  kdebug_trace();
  kac_get_log();
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v9 = os_signpost_id_make_with_pointer(v8, v6);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v9;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v10, "appInput", " enableTelemetry=YES ", buf, 2u);
    }
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend((id)objc_opt_class(), "sendPerformanceNotification:", CFSTR("UIKeyboardPerformanceHandleInputStartNotification"));

  -[_UIKeyboardStateManager cancelCandidateRequests](self, "cancelCandidateRequests");
  -[_UIKeyboardStateManager refreshKeyboardStateUpdatingSecureCandidateRenderTraits:](self, "refreshKeyboardStateUpdatingSecureCandidateRenderTraits:", 0);
  -[_UIKeyboardStateManager touchEventWaitingForKeyInputEvent](self, "touchEventWaitingForKeyInputEvent");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setTouchEvent:", v12);

  -[_UIKeyboardStateManager setTouchEventWaitingForKeyInputEvent:](self, "setTouchEventWaitingForKeyInputEvent:", 0);
  objc_msgSend(v6, "touchEvent");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "timestamp");
  v15 = v14;

  v16 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v16, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v16, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  objc_msgSend(v6, "acceptedCandidate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "slotID");
  v19 = v18 != 0;

  objc_msgSend(v6, "acceptedCandidate");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v6, "acceptedCandidate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isHideMyEmailType");

    v23 = v22 ^ 1;
  }
  else
  {
    v23 = 1;
  }

  if (v18 && self->m_cachedAutofillMode == 1)
    v24 = 1;
  else
    v24 = ((!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess") | v23) & 1) == 0
       && self->m_cachedAutofillMode == 3;
  if (objc_msgSend(v6, "isBackspace"))
    -[_UIKeyboardStateManager removeTextChoicePromptWithUnderline](self, "removeTextChoicePromptWithUnderline");
  else
    -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
  location = 0;
  objc_msgSend(v6, "acceptedCandidate");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "customInfoType");

  if (v26)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "autofillPayloadDelegate");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&location, v28);

  }
  *(_QWORD *)buf = 0;
  v47 = buf;
  v48 = 0x2020000000;
  m_textInputSource = self->m_textInputSource;
  v29 = MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __64___UIKeyboardStateManager_handleKeyboardInput_executionContext___block_invoke;
  v38[3] = &unk_1E16BB480;
  v30 = v6;
  v43[1] = v15;
  v39 = v30;
  v40 = self;
  v44 = v19;
  objc_copyWeak(v43, &location);
  v42 = buf;
  v45 = v24;
  v31 = v7;
  v41 = v31;
  v32 = (void *)objc_msgSend(v38, "copy");
  if (v24)
  {
    objc_initWeak(&from, v31);
    aBlock[0] = v29;
    aBlock[1] = 3221225472;
    aBlock[2] = __64___UIKeyboardStateManager_handleKeyboardInput_executionContext___block_invoke_5;
    aBlock[3] = &unk_1E16B3F40;
    objc_copyWeak(&v36, &from);
    v33 = _Block_copy(aBlock);
    objc_msgSend(v31, "setPendingCompletionBlock:", v33);

    objc_destroyWeak(&v36);
    objc_destroyWeak(&from);
  }
  if (-[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService"))
  {
    -[_UIKeyboardStateManager backendController](self, "backendController");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "handleKeyboardInput:keyboardState:completionHandler:", v30, v16, v32);

  }
  else
  {
    objc_msgSend(v31, "returnExecutionToParent");
  }

  objc_destroyWeak(v43);
  _Block_object_dispose(buf, 8);
  objc_destroyWeak(&location);

}

- (void)updateKeyboardOutput:(id)a3 withInputForSmartPunctuation:(id)a4 keyboardConfiguration:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  TISmartPunctuationController *m_smartPunctuationController;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;

  v21 = a3;
  v8 = a4;
  v9 = a5;
  if ((objc_msgSend(v8, "isPopupVariant") & 1) != 0)
    v10 = 1;
  else
    v10 = objc_msgSend(v8, "isFlick");
  m_smartPunctuationController = self->m_smartPunctuationController;
  objc_msgSend(v21, "insertionText");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[TISmartPunctuationController smartPunctuationOutputForInput:isLockedInput:documentState:](m_smartPunctuationController, "smartPunctuationOutputForInput:isLockedInput:documentState:", v12, v10, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v14, "deletionCount"))
  {
    objc_msgSend(v9, "intermediateText");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "displayString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "length");

    if (!v17)
      objc_msgSend(v21, "setDeletionCount:", objc_msgSend(v14, "deletionCount"));
  }
  objc_msgSend(v14, "insertionText");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v18, "length"))
    goto LABEL_10;
  objc_msgSend(v21, "insertionText");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "length");

  if (v20)
  {
    objc_msgSend(v14, "insertionText");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setInsertionText:", v18);
LABEL_10:

  }
}

- (void)replaceAllTextInResponder:(id)a3 withText:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[5];

  v6 = a3;
  v7 = a4;
  if (!+[UIKeyboard isModelessActive](UIKeyboard, "isModelessActive"))
  {
    +[UIDictationController activeInstance](UIDictationController, "activeInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "cancelDictation");

  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9 == v6)
  {
    if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v6, "setText:", &stru_1E16EDF20);
    }
    -[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v7);
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "hasAsyncCapableInputDelegate");

    if (v11)
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __62___UIKeyboardStateManager_replaceAllTextInResponder_withText___block_invoke;
      v20[3] = &unk_1E16BAF98;
      v20[4] = self;
      objc_msgSend(v12, "addTask:", v20);

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "textInputDelegate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v14)
      {
LABEL_16:
        +[_UIRemoteKeyboards sharedRemoteKeyboards](_UIRemoteKeyboards, "sharedRemoteKeyboards");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "restoreKeyboardIfNeeded");

        goto LABEL_17;
      }
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "textInputDelegate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "selectAll:", 0);

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "textInputDelegate");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "insertText:", v7);

    }
    else
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "_replaceDocumentWithText:", v7);
    }

    goto LABEL_16;
  }
  if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EDE22B80))
  {
    -[_UIKeyboardStateManager callShouldInsertText:onDelegate:](self, "callShouldInsertText:onDelegate:", v7, v6);
    objc_msgSend(v6, "_replaceDocumentWithText:", v7);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v6, "setText:", v7);
  }
LABEL_17:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v6, "isSecureTextEntry"))
    objc_msgSend(v6, "_forceObscureAllText");

}

- (BOOL)dontPushOneTimeCode
{
  void *v3;
  int v4;
  void *v5;
  char v6;

  +[UIKeyboard keyboardBundleIdentifier](UIKeyboard, "keyboardBundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "hasPrefix:", CFSTR("com.apple")))
    v4 = objc_msgSend(v3, "hasPrefix:", CFSTR("com.apple.social")) ^ 1;
  else
    LOBYTE(v4) = 0;
  -[UITextInputTraits textContentType](self->m_traits, "textContentType");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v4 & ~objc_msgSend(v5, "isEqualToString:", CFSTR("one-time-code"));

  return v6;
}

- (BOOL)insertAutoFillTextSuggestion:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v5 = objc_claimAutoreleasedReturnValue();
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)v5;
    objc_msgSend(v6, "_beginPinningInputViewsOnBehalfOfResponder:", v5);

    v23 = v4;
    objc_msgSend(v4, "contents");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    +[UIKBAutofillController preferredInsertionOrder](UIKBAutofillController, "preferredInsertionOrder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v9)
    {
      v10 = v9;
      v11 = 0;
      v12 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v25 != v12)
            objc_enumerationMutation(v8);
          v14 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i);
          objc_msgSend(v7, "objectForKey:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (v15)
          {
            -[_UIKeyboardStateManager autofillController](self, "autofillController");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "autofillGroup");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "objectForKey:", v14);
            v18 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v18, "becomeFirstResponder");
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement](_UIKeyboardUsageTracking, "appAutofillDetectedDecrement");
            objc_msgSend(v7, "objectForKey:", v14);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v18, v19);

            v11 = 1;
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v10);
    }
    else
    {
      v11 = 0;
    }

    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "_stopPinningInputViewsOnBehalfOfResponder:", v22);

    v4 = v23;
  }
  else
  {
    v11 = 0;
  }

  return v11 & 1;
}

- (void)performKeyboardOutputInfo:(id)a3
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  id *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  BOOL v32;
  void *v33;
  void *v34;
  _BOOL4 v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  char v51;
  char v52;
  void *v53;
  BOOL v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  char isKindOfClass;
  int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  int64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  BOOL v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  char v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t i;
  uint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[128];
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = *MEMORY[0x1E0DBE310];
    objc_msgSend(v5, "objectForKey:", *MEMORY[0x1E0DBE310]);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    if (v146
      && (-[_UIKeyboardStateManager textInputTraits](self, "textInputTraits"),
          v8 = (void *)objc_claimAutoreleasedReturnValue(),
          v9 = objc_msgSend(v8, "acceptsPayloads"),
          v8,
          v9))
    {
      +[UITextInputPayloadController sharedInstance](UITextInputPayloadController, "sharedInstance");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "payloadDelegate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        v12 = (void *)objc_msgSend(v6, "mutableCopy");
        objc_msgSend(v12, "removeObjectForKey:", v7);
        objc_msgSend(v11, "handlePayload:withPayloadId:", v12, v146);

      }
    }
    else
    {
      objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0DBE358]);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "BOOLValue");

      if (v14)
        -[_UIKeyboardStateManager performSendCurrentLocation](self, "performSendCurrentLocation");
    }
    if (-[_UIKeyboardStateManager dontPushOneTimeCode](self, "dontPushOneTimeCode")
      || (objc_msgSend(v6, "objectForKey:", CFSTR("AutofillOneTimeCodeAvailable")),
          v15 = (void *)objc_claimAutoreleasedReturnValue(),
          (v144 = v15) == 0))
    {
      v144 = 0;
    }
    else if (objc_msgSend(v15, "BOOLValue"))
    {
      -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
      -[_UIKeyboardStateManager generateAutofillCandidate](self, "generateAutofillCandidate");
    }
    objc_msgSend(v6, "objectForKey:", CFSTR("ExternalCredentialData"));
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v145;
    if (v145)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        UIKeyboardSafariPresentExternalCredentialViewControllerForCredentialData(v145);
LABEL_112:

        goto LABEL_113;
      }
    }
    self->m_isAutofilling = 1;
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "autofillGroup");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectForKey:", CFSTR("UIAutofillContextKey"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v19)
    {
      if (!qword_1ECD7D260)
      {
        v152 = xmmword_1E16BC1A8;
        v153 = 0;
        qword_1ECD7D260 = _sl_dlopen();
      }
      if (qword_1ECD7D260
        && (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
            v20 = (void *)objc_claimAutoreleasedReturnValue(),
            v21 = objc_msgSend(v20, "hasAsyncCapableInputDelegate"),
            v20,
            v21))
      {
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "autofillGroup");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v152 = 0;
        *((_QWORD *)&v152 + 1) = &v152;
        v153 = 0x2020000000;
        v24 = (id *)qword_1ECD7D268;
        v154 = qword_1ECD7D268;
        if (!qword_1ECD7D268)
        {
          v25 = AutoFillUILibrary();
          v24 = (id *)dlsym(v25, "AFUIAutoFillContextKey");
          *(_QWORD *)(*((_QWORD *)&v152 + 1) + 24) = v24;
          qword_1ECD7D268 = (uint64_t)v24;
        }
        _Block_object_dispose(&v152, 8);
        if (!v24)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAFUIAutoFillContextKey(void)");
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v135, "handleFailureInFunction:file:lineNumber:description:", v136, CFSTR("_UIKeyboardStateManager.m"), 289, CFSTR("%s"), dlerror());

          goto LABEL_118;
        }
        v26 = *v24;
        objc_msgSend(v23, "objectForKey:", v26);
        v27 = objc_claimAutoreleasedReturnValue();

        v19 = (void *)v27;
      }
      else
      {
        v19 = 0;
      }
    }
    v141 = v19;
    v28 = objc_msgSend(v19, "count");
    v29 = *MEMORY[0x1E0DBE370];
    if (!v28)
      goto LABEL_56;
    objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0DBE370]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    if (v30)
    {

    }
    else
    {
      objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0DBE350]);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = v31 == 0;

      if (v32)
        goto LABEL_56;
    }
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "objectForKey:", CFSTR("_WebViewURL"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
      goto LABEL_51;
    v35 = v34 != 0;
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v36)
      v35 = 0;

    if (v35)
    {
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if (v33)
        goto LABEL_50;
    }
    else
    {
      v33 = 0;
    }
    if (!v34)
      goto LABEL_50;
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "autofillGroup");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "objectForKey:", CFSTR("UIAutofillPossibleRespondersKey"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (!qword_1ECD7D260)
    {
      v152 = xmmword_1E16BC1A8;
      v153 = 0;
      qword_1ECD7D260 = _sl_dlopen();
    }
    if (!qword_1ECD7D260 || v39)
    {
LABEL_47:
      objc_msgSend(v39, "firstObject");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v33, "becomeFirstResponder");

LABEL_50:
      if (!v33)
      {
        objc_storeStrong((id *)&self->m_autofillCustomInfo, a3);
        goto LABEL_56;
      }
LABEL_51:
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "autofillContextForInputDelegate:", v33);
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v46, "count") && (objc_msgSend(v141, "isEqualToDictionary:", v46) & 1) != 0)
      {
        objc_msgSend(v6, "objectForKey:", v29);
        v47 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0DBE350]);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        +[UITextAutofillSuggestion autofillSuggestionWithUsername:password:](UITextAutofillSuggestion, "autofillSuggestionWithUsername:password:", v47, v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v47) = objc_msgSend(v50, "insertTextSuggestion:", v49);

        if ((v47 & 1) != 0)
        {
          v51 = 0;
          v52 = 1;
          goto LABEL_59;
        }
      }
      else
      {

      }
LABEL_56:
      objc_msgSend(v6, "objectForKey:", v29);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = v53 == 0;

      if (v54)
      {
        v52 = 0;
        v51 = 0;
      }
      else
      {
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "autofillGroup");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "objectForKey:", CFSTR("username"));
        v57 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v57, "becomeFirstResponder");
        +[_UIKeyboardUsageTracking appAutofillDetectedDecrement](_UIKeyboardUsageTracking, "appAutofillDetectedDecrement");
        objc_msgSend(v6, "objectForKey:", v29);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v57, v58);

        v52 = 0;
        v51 = 1;
      }
LABEL_59:
      v59 = *MEMORY[0x1E0DBE368];
      objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0DBE368]);
      v60 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v60)
        goto LABEL_69;
      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v61, "autofillGroup");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "objectForKey:", CFSTR("username"));
      v63 = (void *)objc_claimAutoreleasedReturnValue();

      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "autofillGroup");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v66 = v65;
      if (v63)
      {
        objc_msgSend(v65, "objectForKey:", CFSTR("username"));
        v67 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(v65, "objectForKey:", CFSTR("email"));
        v68 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v68)
        {
          v69 = 0;
LABEL_65:
          objc_msgSend(v69, "becomeFirstResponder");
          objc_msgSend(v6, "objectForKey:", v59);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v69, v70);

          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "autofillGroup");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v72, "objectForKey:", CFSTR("password"));
          v73 = (void *)objc_claimAutoreleasedReturnValue();

          if (v73)
            goto LABEL_67;
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v74, "autofillGroup");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "objectForKey:", CFSTR("new-password"));
          v73 = (void *)objc_claimAutoreleasedReturnValue();

          if (v73)
          {
LABEL_67:
            objc_msgSend(v69, "resignFirstResponder");
            objc_msgSend(v73, "becomeFirstResponder");

          }
LABEL_69:
          v76 = *MEMORY[0x1E0DBE340];
          objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0DBE340]);
          v77 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v77)
            goto LABEL_86;
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "autofillGroup");
          v79 = objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v79, "objectForKey:", CFSTR("one-time-code"));
          v80 = (void *)objc_claimAutoreleasedReturnValue();

          -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v79) = objc_msgSend(v81, "isFirstResponder");

          if ((v79 & 1) == 0)
          {
            -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v82, "becomeFirstResponder");

          }
          objc_msgSend(v6, "objectForKey:", v76);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          if (v80 == v84)
          {
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();

            if ((isKindOfClass & 1) != 0)
            {
              -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v80, &stru_1E16EDF20);
              v86 = objc_msgSend(v83, "length");
              if (v86 >= 1)
              {
                v87 = 0;
                v88 = v86;
                do
                {
                  objc_msgSend(v83, "substringWithRange:", v87, 1);
                  v89 = (void *)objc_claimAutoreleasedReturnValue();
                  if (-[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v89))
                  {
                    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
                    v90 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v90, "insertText:", v89);

                  }
                  ++v87;
                }
                while (v88 != v87);
              }
              goto LABEL_85;
            }
          }
          else
          {

          }
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            objc_msgSend(v80, "setText:", v83);
          }
          else if (objc_msgSend(v80, "conformsToProtocol:", &unk_1EDE22370))
          {
            objc_msgSend(v80, "insertText:", v83);
          }
LABEL_85:
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v91, "moveSelectionToEndOfWord");

          -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          v93 = -[_UIKeyboardStateManager needAutofillCandidate:](self, "needAutofillCandidate:", v92);
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v94, "setDelegateNeedsAutofillMode:", v93);

LABEL_86:
          if ((v52 & 1) == 0)
          {
            v95 = *MEMORY[0x1E0DBE350];
            objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0DBE350]);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v97 = v96 == 0;

            if (!v97)
            {
              -[_UIKeyboardStateManager autofillController](self, "autofillController");
              v98 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v98, "autofillGroup");
              v99 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v99, "objectForKey:", CFSTR("password"));
              v100 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v100, "becomeFirstResponder");
              +[_UIKeyboardUsageTracking appAutofillDetectedDecrement](_UIKeyboardUsageTracking, "appAutofillDetectedDecrement");
              objc_msgSend(v6, "objectForKey:", v95);
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v100, v101);

              v51 = 1;
            }
          }
          objc_msgSend(v6, "objectForKey:", CFSTR("NewPassword"));
          v102 = (void *)objc_claimAutoreleasedReturnValue();

          if (v102)
          {
            -[_UIKeyboardStateManager autofillController](self, "autofillController");
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v103, "autofillGroup");
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v104, "objectForKey:", CFSTR("new-password"));
            v105 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v105, "becomeFirstResponder");
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement](_UIKeyboardUsageTracking, "appAutofillDetectedDecrement");
            objc_msgSend(v6, "objectForKey:", CFSTR("NewPassword"));
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v105, v106);

            v51 = 1;
          }
          objc_msgSend(v6, "objectForKey:", CFSTR("AutofillCellularEID"));
          v107 = (void *)objc_claimAutoreleasedReturnValue();

          if (v107)
          {
            -[_UIKeyboardStateManager autofillController](self, "autofillController");
            v108 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v108, "autofillGroup");
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v109, "objectForKey:", CFSTR("esim-eid"));
            v110 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v110, "becomeFirstResponder");
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement](_UIKeyboardUsageTracking, "appAutofillDetectedDecrement");
            objc_msgSend(v6, "objectForKey:", CFSTR("AutofillCellularEID"));
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v110, v111);

            v51 = 1;
          }
          objc_msgSend(v6, "objectForKey:", CFSTR("AutofillCellularIMEI"));
          v112 = (void *)objc_claimAutoreleasedReturnValue();

          if (v112)
          {
            -[_UIKeyboardStateManager autofillController](self, "autofillController");
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v113, "autofillGroup");
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v114, "objectForKey:", CFSTR("esim-imei"));
            v115 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v115, "becomeFirstResponder");
            +[_UIKeyboardUsageTracking appAutofillDetectedDecrement](_UIKeyboardUsageTracking, "appAutofillDetectedDecrement");
            objc_msgSend(v6, "objectForKey:", CFSTR("AutofillCellularIMEI"));
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v115, v116);

            v51 = 1;
          }
          -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager autofillController](self, "autofillController");
          v117 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v117, "textContentTypeForInputDelegate:", v143);
          v142 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v6, "objectForKey:", v142);
          v118 = (void *)objc_claimAutoreleasedReturnValue();

          if (v118)
          {
            +[UIAutoFillTextSuggestion autoFillSuggestionWithContents:](UIAutoFillTextSuggestion, "autoFillSuggestionWithContents:", v6);
            v140 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
            v119 = (void *)objc_claimAutoreleasedReturnValue();
            v120 = objc_msgSend(v119, "insertTextSuggestion:", v140);

            if ((v120 & 1) == 0)
            {
              -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v121, "_beginPinningInputViewsOnBehalfOfResponder:", v139);

              v149 = 0u;
              v150 = 0u;
              v147 = 0u;
              v148 = 0u;
              +[UIKBAutofillController preferredInsertionOrder](UIKBAutofillController, "preferredInsertionOrder");
              v122 = (void *)objc_claimAutoreleasedReturnValue();
              v123 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v147, v151, 16);
              if (v123)
              {
                v124 = *(_QWORD *)v148;
                do
                {
                  for (i = 0; i != v123; ++i)
                  {
                    if (*(_QWORD *)v148 != v124)
                      objc_enumerationMutation(v122);
                    v126 = *(_QWORD *)(*((_QWORD *)&v147 + 1) + 8 * i);
                    objc_msgSend(v6, "objectForKey:", v126);
                    v127 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v127)
                    {
                      -[_UIKeyboardStateManager autofillController](self, "autofillController");
                      v128 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v128, "autofillGroup");
                      v129 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v129, "objectForKey:", v126);
                      v130 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v130, "becomeFirstResponder");
                      +[_UIKeyboardUsageTracking appAutofillDetectedDecrement](_UIKeyboardUsageTracking, "appAutofillDetectedDecrement");
                      objc_msgSend(v6, "objectForKey:", v126);
                      v131 = (void *)objc_claimAutoreleasedReturnValue();
                      -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v130, v131);

                      v51 = 1;
                    }
                  }
                  v123 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v147, v151, 16);
                }
                while (v123);
              }

              +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v132, "_stopPinningInputViewsOnBehalfOfResponder:", v139);

              if ((v51 & 1) == 0)
              {
                objc_msgSend(v6, "objectForKey:", &stru_1E16EDF20);
                v133 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
                  v134 = (void *)objc_claimAutoreleasedReturnValue();
                  -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v134, v133);

                }
              }
            }

          }
          +[_UIKeyboardUsageTracking appAutofillFilled](_UIKeyboardUsageTracking, "appAutofillFilled");
          self->m_isAutofilling = 0;

          v16 = v145;
          goto LABEL_112;
        }
        -[_UIKeyboardStateManager autofillController](self, "autofillController");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "autofillGroup");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "objectForKey:", CFSTR("email"));
        v67 = objc_claimAutoreleasedReturnValue();
      }
      v69 = (void *)v67;

      goto LABEL_65;
    }
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "autofillGroup");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v152 = 0;
    *((_QWORD *)&v152 + 1) = &v152;
    v153 = 0x2020000000;
    v42 = (id *)qword_1ECD7D270;
    v154 = qword_1ECD7D270;
    if (!qword_1ECD7D270)
    {
      v43 = AutoFillUILibrary();
      v42 = (id *)dlsym(v43, "AFUIAutoFillPossibleRespondersKey");
      *(_QWORD *)(*((_QWORD *)&v152 + 1) + 24) = v42;
      qword_1ECD7D270 = (uint64_t)v42;
    }
    _Block_object_dispose(&v152, 8);
    if (v42)
    {
      v44 = *v42;
      objc_msgSend(v41, "objectForKey:", v44);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_47;
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAFUIAutoFillPossibleRespondersKey(void)");
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v137, "handleFailureInFunction:file:lineNumber:description:", v138, CFSTR("_UIKeyboardStateManager.m"), 288, CFSTR("%s"), dlerror());

LABEL_118:
    __break(1u);
  }
LABEL_113:

}

- (void)_cancelPendingSupplementalCandidateInsertion
{
  uint64_t v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;

  -[_UIKeyboardStateManager pendingSupplementalCandidateToInsert](self, "pendingSupplementalCandidateToInsert");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)v3;
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_respondsToSelector();

    if ((v6 & 1) != 0)
    {
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "_cancelChooseSupplementalItemToInsert");

      self->m_textInputChangesIgnored = 0;
    }
  }
  -[_UIKeyboardStateManager setPendingSupplementalCandidateToInsert:](self, "setPendingSupplementalCandidateToInsert:", 0);
}

- (void)insertDictationResult:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "insertDictationResult:", v4);

}

- (void)handleRemoteIndirectGestureWithState:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  _UIKeyboardTextSelectionInteraction *v7;
  _UIKeyboardTextSelectionInteraction *customInputDelegateSelectionInteraction;
  void *v9;
  _UIKeyboardTextSelectionInteraction *v10;
  _UIKeyboardTextSelectionInteraction *v11;
  id v12;

  v12 = a3;
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_responderForEditing");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "__textInteractionFromAssistant");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "interactionWithGestureForName:", 0x1E1753780);
  v7 = (_UIKeyboardTextSelectionInteraction *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(v6, "interactionWithGestureForName:", 0x1E17537A0);
    v7 = (_UIKeyboardTextSelectionInteraction *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      customInputDelegateSelectionInteraction = self->_customInputDelegateSelectionInteraction;
      if (!customInputDelegateSelectionInteraction)
      {
        +[_UIKeyboardTextSelectionGestureController sharedInstance](_UIKeyboardTextSelectionGestureController, "sharedInstance");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "textSelectionInteractionForRTIForwarding");
        v10 = (_UIKeyboardTextSelectionInteraction *)objc_claimAutoreleasedReturnValue();
        v11 = self->_customInputDelegateSelectionInteraction;
        self->_customInputDelegateSelectionInteraction = v10;

        customInputDelegateSelectionInteraction = self->_customInputDelegateSelectionInteraction;
      }
      v7 = customInputDelegateSelectionInteraction;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[_UIKeyboardTextSelectionInteraction handleRemoteIndirectGestureWithState:](v7, "handleRemoteIndirectGestureWithState:", v12);

}

- (void)performKeyboardOutput:(id)a3
{
  void *v4;
  void *v5;
  _BOOL8 v6;
  id v7;

  v7 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "forwardingInputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5 == 0;

  -[_UIKeyboardStateManager performKeyboardOutput:forwardToRemoteInputSource:](self, "performKeyboardOutput:forwardToRemoteInputSource:", v7, v6);
}

- (void)performKeyboardOutput:(id)a3 forwardToRemoteInputSource:(BOOL)a4
{
  void *v5;

  -[_UIKeyboardStateManager performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:](self, "performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:", a3, 0, a4);
  -[_UIKeyboardStateManager _cancelPendingSupplementalCandidateInsertion](self, "_cancelPendingSupplementalCandidateInsertion");
  -[_UIKeyboardStateManager lastMatchedSupplementalCandidate](self, "lastMatchedSupplementalCandidate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    -[_UIKeyboardStateManager generateCandidates](self, "generateCandidates");
}

- (BOOL)performKeyboardEvent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  _QWORD v10[5];
  id v11;
  _QWORD v12[5];
  id v13;

  v4 = a3;
  if (objc_msgSend(v4, "keyEventForwardedFromInputUIHost"))
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __48___UIKeyboardStateManager_performKeyboardEvent___block_invoke;
    v12[3] = &unk_1E16BB0D8;
    v12[4] = self;
    v13 = v4;
    objc_msgSend(v5, "addTask:", v12);

    v6 = v13;
LABEL_6:

    v7 = 1;
    goto LABEL_7;
  }
  if (!objc_msgSend(v4, "keyCommandHandlingBeforePublic"))
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __48___UIKeyboardStateManager_performKeyboardEvent___block_invoke_2;
    v10[3] = &unk_1E16BB0D8;
    v10[4] = self;
    v11 = v4;
    objc_msgSend(v8, "addTask:", v10);

    v6 = v11;
    goto LABEL_6;
  }
  v7 = -[_UIKeyboardStateManager handleKeyCommandsBeforePublicAsInputUIHost:](self, "handleKeyCommandsBeforePublicAsInputUIHost:", v4);
LABEL_7:

  return v7;
}

- (void)performKeyboardOutputAsRTIClient:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __60___UIKeyboardStateManager_performKeyboardOutputAsRTIClient___block_invoke;
  v7[3] = &unk_1E16BB0D8;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "addTask:", v7);

}

- (void)performKeyboardOutput:(id)a3 checkingDelegate:(BOOL)a4
{
  -[_UIKeyboardStateManager performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:](self, "performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:", a3, a4, 1);
}

- (BOOL)performKeyboardOutput:(id)a3 checkingDelegate:(BOOL)a4 forwardToRemoteInputSource:(BOOL)a5
{
  void *v5;
  void *v6;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  BOOL v17;
  void *v18;
  int v19;
  void *v20;
  BOOL v21;
  void *v22;
  int v23;
  void *v24;
  BOOL v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t i;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  _BOOL8 v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  int v48;
  unsigned int j;
  void *v50;
  int v51;
  int v52;
  void *v53;
  void *v54;
  void *v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  _BOOL4 v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  _BOOL4 v76;
  void *v77;
  void *v78;
  void *v79;
  int v80;
  void *v81;
  void *v82;
  char v83;
  void *v84;
  void *v85;
  BOOL v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  char v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  BOOL v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  _BOOL4 v104;
  void *v105;
  void *v106;
  BOOL v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  BOOL v119;
  void *v120;
  uint64_t v121;
  void *v123;
  _BOOL4 v124;
  int v125;
  const char *v126;
  const char *v127;
  void *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  _BOOL4 v137;
  uint64_t v138;
  _BOOL4 v139;
  _BOOL4 v140;
  _QWORD v141[4];
  id v142;
  _QWORD v143[5];
  id v144;
  char v145;
  _QWORD v146[4];
  NSObject *v147;
  _UIKeyboardStateManager *v148;
  _BYTE *v149;
  _QWORD v150[7];
  _BYTE buf[24];
  const char *v152;
  uint64_t v153;

  v139 = a4;
  v140 = a5;
  v153 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  _UIKeyboardLog();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v126 = "NO";
    *(_QWORD *)&buf[4] = "-[_UIKeyboardStateManager performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:]";
    if (v139)
      v127 = "YES";
    else
      v127 = "NO";
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[14] = v127;
    *(_WORD *)&buf[12] = 2080;
    if (v140)
      v126 = "YES";
    *(_WORD *)&buf[22] = 2080;
    v152 = v126;
    _os_log_debug_impl(&dword_185066000, v9, OS_LOG_TYPE_DEBUG, "%s shouldCheckDelegate=%s, forwardToRemote=%s", buf, 0x20u);
  }

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v152) = 0;
  if (+[UIDictationController isRunning](UIDictationController, "isRunning")
    && (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
     || !+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")))
  {
    -[_UIKeyboardStateManager updateIdleDetection:](self, "updateIdleDetection:", 2);
  }
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "willPerformKeyboardOutput:", v8);

  if (!v140)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v9 = objc_claimAutoreleasedReturnValue();
    -[NSObject inputSystemSourceSession](v9, "inputSystemSourceSession");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "forwardingInputDelegate");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v12)
        goto LABEL_7;

    }
LABEL_18:

    goto LABEL_19;
  }
LABEL_7:
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v140)
  {
    if (!v11)
      goto LABEL_19;
    goto LABEL_14;
  }

  if (v11)
  {
LABEL_14:
    if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "delegateAdoptsWebTextInputPrivate");

      if (v14)
        -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
    }
    v146[0] = MEMORY[0x1E0C809B0];
    v146[1] = 3221225472;
    v146[2] = __93___UIKeyboardStateManager_performKeyboardOutput_checkingDelegate_forwardToRemoteInputSource___block_invoke;
    v146[3] = &unk_1E16BB4A8;
    v147 = v8;
    v148 = self;
    v149 = buf;
    -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:shouldFlush:](self, "performKeyboardOutputOnInputSourceSession:shouldFlush:", v146, 0);
    v9 = v147;
    goto LABEL_18;
  }
LABEL_19:
  self->m_didSyncDocumentStateToInputDelegate = 0;
  objc_msgSend(v8, "acceptedCandidate");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(v8, "acceptedCandidate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[_UIKeyboardStateManager acceptAutofillExtraCandidateIfNeeded:](self, "acceptAutofillExtraCandidateIfNeeded:", v16);

    if (!v17)
    {
      if (!+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
        goto LABEL_24;
      objc_msgSend(v8, "acceptedCandidate");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "isSupplementalItemCandidate");

      if (!v19
        || (objc_msgSend(v8, "acceptedCandidate"),
            v20 = (void *)objc_claimAutoreleasedReturnValue(),
            v21 = -[_UIKeyboardStateManager _insertSupplementalCandidate:overridingCandidateText:](self, "_insertSupplementalCandidate:overridingCandidateText:", v20, 0), v20, !v21))
      {
LABEL_24:
        objc_msgSend(v8, "acceptedCandidate");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager acceptCandidate:](self, "acceptCandidate:", v22);

      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    -[_UIKeyboardStateManager flushKeyboardOutputOnInputSourceSession](self, "flushKeyboardOutputOnInputSourceSession");
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    && objc_msgSend(v8, "positionOffset"))
  {
    v23 = objc_msgSend(v8, "positionOffset");
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "collapseSelectionAndAdjustByOffset:", v23);

    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  objc_msgSend(v8, "textToCommit");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v8, "deletionCount");
    objc_msgSend(v8, "textToCommit");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v28) = objc_msgSend(v27, "callShouldReplaceExtendedRange:withText:includeMarkedText:", v28, v29, 1);

    if ((_DWORD)v28)
    {
      objc_msgSend(v8, "textToCommit");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager unmarkText:](self, "unmarkText:", v30);

    }
    else
    {
      -[_UIKeyboardStateManager unmarkText:](self, "unmarkText:", &stru_1E16EDF20);
      v25 = 0;
    }
  }
  if (objc_msgSend(v8, "unmarkIfNecessary")
    && -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    self->m_textInputChangesIgnored = 1;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "unmarkText");

    self->m_textInputChangesIgnored = 0;
  }
  if (objc_msgSend(v8, "forwardDeletionCount"))
  {
    for (i = 0; i < objc_msgSend(v8, "forwardDeletionCount"); ++i)
      -[_UIKeyboardStateManager deleteForwardAndNotify:producedByDeleteInput:](self, "deleteForwardAndNotify:producedByDeleteInput:", 0, objc_msgSend(v8, "producedByDeleteInput"));
  }
  objc_msgSend(v8, "insertionTextAfterSelection");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (v33)
  {
    self->m_suppressingDocumentAssertions = 1;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "insertionTextAfterSelection");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "insertTextAfterSelection:", v35);

    self->m_suppressingDocumentAssertions = 0;
  }
  v138 = objc_msgSend(v8, "performSelector:", sel_producedByDeleteInput);
  if (objc_msgSend(v8, "deletionCount"))
  {
    if (v139
      && v138
      && (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
          v36 = (void *)objc_claimAutoreleasedReturnValue(),
          v37 = objc_msgSend(v36, "callShouldDeleteBackwardWithCount:", objc_msgSend(v8, "deletionCount")),
          v36,
          !v37))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D87188]);
      v44 = objc_alloc_init(MEMORY[0x1E0DBDBF8]);
      objc_msgSend(v43, "setKeyboardInput:", v44);

      v45 = objc_alloc_init(MEMORY[0x1E0DBDC40]);
      objc_msgSend(v43, "keyboardInput");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "setOutput:", v45);

      objc_msgSend(v45, "setDeletionCount:", 0);
      objc_msgSend(v8, "insertionText");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend(v47, "length");

      for (j = v48 - 1; (j & 0x80000000) == 0; j -= v52)
      {
        objc_msgSend(v45, "setDeletionCount:", objc_msgSend(v45, "deletionCount") + 1);
        objc_msgSend(v8, "insertionText");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "_rangeOfBackwardDeletionClusterAtIndex:", j);
        v52 = v51;

      }
      objc_msgSend(MEMORY[0x1E0CB37A0], "string");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager documentState](self, "documentState");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "contextBeforeInput");
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      LODWORD(v54) = objc_msgSend(v55, "length");
      v56 = objc_msgSend(v8, "deletionCount");
      v57 = (_DWORD)v54 - 1;
      if ((int)v54 - 1 >= 0)
      {
        v58 = v56;
        if (v56 >= 1)
        {
          do
          {
            v59 = objc_msgSend(v55, "_rangeOfBackwardDeletionClusterAtIndex:", v57);
            v61 = v60;
            objc_msgSend(v55, "substringWithRange:", v59, v60);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "insertString:atIndex:", v62, 0);

            v57 -= v61;
            if ((v57 & 0x80000000) != 0)
              break;
          }
          while (v58-- > 1);
        }
      }
      objc_msgSend(v45, "setInsertionText:", v53);
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "performInputOperation:", v43);

      objc_msgSend(v8, "setInsertionText:", 0);
      v25 = 0;
    }
    else
    {
      objc_msgSend(v8, "insertionText");
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      if (v38)
      {
        -[_UIKeyboardStateManager asyncCapableInputDelegate](self, "asyncCapableInputDelegate");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v39 == 0;

      }
      else
      {
        v40 = 0;
      }
      -[_UIKeyboardStateManager deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:](self, "deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:", v38 == 0, objc_msgSend(v8, "deletionCount"), v40);
    }
    +[UIDictationController activeInstance](UIDictationController, "activeInstance");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "markKeyboardDeleteMetricEvent");
  }
  else
  {
    +[UIDictationController activeInstance](UIDictationController, "activeInstance");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "markKeyboardInputMetricEvent");

    +[UIDictationController activeInstance](UIDictationController, "activeInstance");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "markDictationTipInputEvent");
  }

  if (_os_feature_enabled_impl())
  {
    objc_msgSend(v8, "acceptedCandidate");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "stickerIdentifier");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    if (v66)
    {
      objc_msgSend(v8, "acceptedCandidate");
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = objc_msgSend(v67, "customInfoType") == 4096;

      if (v68)
      {
        objc_msgSend(v8, "acceptedCandidate");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "stickerIdentifier");
        v70 = (void *)objc_claimAutoreleasedReturnValue();

        v150[0] = CFSTR("com.apple.stickers.role.still");
        v150[1] = CFSTR("com.apple.stickers.role.animated");
        v150[2] = CFSTR("com.apple.stickers.role.stillVariant_40");
        v150[3] = CFSTR("com.apple.stickers.role.stillVariant_64");
        v150[4] = CFSTR("com.apple.stickers.role.stillVariant_96");
        v150[5] = CFSTR("com.apple.stickers.role.stillVariant_160");
        v150[6] = CFSTR("com.apple.stickers.role.stillVariant_320");
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v150, 7);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager backendController](self, "backendController");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v72, "stickerWithIdentifier:stickerRoles:completionHandler:", v70, v71, &__block_literal_global_849);

        goto LABEL_72;
      }
    }
    else
    {

    }
  }
  objc_msgSend(v8, "insertionText");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v73, "length"))
  {

    goto LABEL_72;
  }
  objc_msgSend(v8, "customInfo");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "objectForKey:", CFSTR("AutofillOneTimeCode"));
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = v75 == 0;

  if (v76)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "currentInputMode");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "identifier");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = objc_msgSend(v79, "isEqualToString:", CFSTR("autofillsignup"));

    if (v80)
    {
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "currentLinguisticInputMode");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      v83 = objc_msgSend(v82, "isDefaultRightToLeft");

      -[_UIKeyboardStateManager autofillController](self, "autofillController");
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      v143[0] = MEMORY[0x1E0C809B0];
      v143[1] = 3221225472;
      v143[2] = __93___UIKeyboardStateManager_performKeyboardOutput_checkingDelegate_forwardToRemoteInputSource___block_invoke_4;
      v143[3] = &unk_1E16BB510;
      v143[4] = self;
      v144 = v8;
      v145 = v83;
      objc_msgSend(v84, "enumeratePasswordFieldsUsingBlock:", v143);

      goto LABEL_72;
    }
    if (v139)
    {
      objc_msgSend(v8, "insertionText");
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      v124 = -[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v123);

      if (!v124)
      {
        v25 = 0;
        goto LABEL_72;
      }
    }
    if (_UIIsPrivateMainBundle() && !dyld_program_sdk_at_least())
    {
      v125 = 0;
    }
    else
    {
      v125 = 1;
      self->m_textInputChangesIgnored = 1;
    }
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v128, "_selectedTextRange");
    if (v129)
    {
      -[_UIKeyboardStateManager documentState](self, "documentState");
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v130, "contextBeforeInput");
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v131)
      {
        -[_UIKeyboardStateManager documentState](self, "documentState");
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "contextAfterInput");
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        v137 = v136 == 0;

        if (v137)
          -[_UIKeyboardStateManager setInitialDirectionIgnoreRangeCheck:](self, "setInitialDirectionIgnoreRangeCheck:", 1);
        goto LABEL_129;
      }

    }
LABEL_129:
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "insertionText");
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v132, "insertText:", v133);

    if (v138)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v134, "callShouldDeleteBackwardWithCount:", 1);

    }
    if (v125)
      self->m_textInputChangesIgnored = 0;
  }
LABEL_72:
  objc_msgSend(v8, "shortcutConversion");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  if (v85)
  {
    v86 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");

    if (!v86)
    {
      objc_msgSend(v8, "shortcutConversion");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager documentState](self, "documentState");
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "contextBeforeInput");
      v89 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v8, "deletionCount"))
      {
        if (v89)
        {
          objc_msgSend(v87, "input");
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = objc_msgSend(v89, "hasSuffix:", v90);

          if ((v91 & 1) == 0)
          {
            objc_msgSend(v8, "insertionText");
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "candidate");
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "candidateByReplacingWithCandidate:input:", v93, v92);
            v94 = objc_claimAutoreleasedReturnValue();

            v87 = (void *)v94;
          }
        }
      }
      -[_UIKeyboardStateManager setAutocorrection:](self, "setAutocorrection:", v87);
      if (-[_UIKeyboardStateManager hasAutocorrectPrompt](self, "hasAutocorrectPrompt"))
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v95, "asyncCapableInputDelegate");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        v97 = v96 == 0;

        if (!v97)
          -[_UIKeyboardStateManager removeAutocorrectPrompt](self, "removeAutocorrectPrompt");
        objc_msgSend(v8, "shortcutConversion");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager updateAutocorrectPrompt:](self, "updateAutocorrectPrompt:", v98);

      }
      else
      {
        -[_UIKeyboardStateManager touchAutocorrectPromptTimer](self, "touchAutocorrectPromptTimer");
      }

    }
  }
  objc_msgSend(v8, "handwritingStrokesToDelete");
  v99 = (void *)objc_claimAutoreleasedReturnValue();

  if (v99)
  {
    objc_msgSend(v8, "handwritingStrokesToDelete");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager deleteHandwritingStrokesAtIndexes:](self, "deleteHandwritingStrokesAtIndexes:", v100);

  }
  objc_msgSend(v8, "customInfo");
  v101 = (void *)objc_claimAutoreleasedReturnValue();

  if (v101)
  {
    objc_msgSend(v8, "customInfo");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager performKeyboardOutputInfo:](self, "performKeyboardOutputInfo:", v102);

    if (v140)
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      if (v103)
      {
        v104 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) == 0;

        if (v104)
        {
          v141[0] = MEMORY[0x1E0C809B0];
          v141[1] = 3221225472;
          v141[2] = __93___UIKeyboardStateManager_performKeyboardOutput_checkingDelegate_forwardToRemoteInputSource___block_invoke_5;
          v141[3] = &unk_1E16BB538;
          v142 = v8;
          -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v141);

        }
      }
    }
  }
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v105, "didPerformKeyboardOutput:", v8);

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[UITextInputTraits textSuggestionDelegate](self->m_traits, "textSuggestionDelegate");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = v106 == 0;

    if (!v107)
      -[_UIKeyboardStateManager delegateSuggestionsForCurrentInput](self, "delegateSuggestionsForCurrentInput");
  }
  -[_UIKeyboardStateManager _postInputResponderCapabilitiesChangedNotificationWithOutput:selectionChanged:](self, "_postInputResponderCapabilitiesChangedNotificationWithOutput:selectionChanged:", v8, 0);
  -[_UIKeyboardStateManager _acquireWaitingOnPerformAutocorrect](self, "_acquireWaitingOnPerformAutocorrect");
  v108 = objc_claimAutoreleasedReturnValue();
  v109 = (void *)v108;
  if (v108)
    (*(void (**)(uint64_t, uint64_t))(v108 + 16))(v108, 1);
  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled"))
  {
    if (objc_msgSend(v8, "deletionCount"))
    {
      -[_UIKeyboardStateManager removeTextChoicePromptWithUnderline](self, "removeTextChoicePromptWithUnderline");
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v110 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v110, "selectedTextRange");
      v111 = (void *)objc_claimAutoreleasedReturnValue();

      if (v111)
      {
        -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "selectedTextRange");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "start");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "updateUnderlinesIfNeededAfterPosition:", v115);
LABEL_102:

      }
    }
    else
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v116, "selectedTextRange");
      v117 = (void *)objc_claimAutoreleasedReturnValue();

      if (v117)
      {
        -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "selectedTextRange");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "start");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v112, "clearUnderlinesIfNeededBeforePosition:", v115);
        goto LABEL_102;
      }
    }
  }
  objc_msgSend(v8, "insertionText");
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v118, "length") && !objc_msgSend(v8, "deletionCount"))
  {
LABEL_110:

    goto LABEL_111;
  }
  v119 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");

  if (!v119)
  {
    +[UIEventSessionActionAnalytics sharedInstance](UIEventSessionActionAnalytics, "sharedInstance");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    v118 = v120;
    if (self->m_textInputSource == 4)
      v121 = 6;
    else
      v121 = 5;
    objc_msgSend(v120, "didTypingWithSource:", v121);
    goto LABEL_110;
  }
LABEL_111:

  _Block_object_dispose(buf, 8);
  return v25;
}

- (void)generateCandidatesAsynchronously
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  id v6;

  v3 = -[TIKeyboardCandidateResultSet generatedCandidateCount](self->m_candidateResultSet, "generatedCandidateCount");
  -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (v3 > v5)
  {
    -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", objc_msgSend(v6, "count"), 0x7FFFFFFFLL, 0);

  }
}

- (void)generateCandidatesAsynchronouslyWithRange:(_NSRange)a3 selectedCandidate:(id)a4
{
  NSUInteger length;
  NSUInteger location;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSUInteger v13;
  void *v14;
  void *v15;
  void *v16;
  const void *v17;
  NSObject *v18;
  os_signpost_id_t v19;
  os_signpost_id_t v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  NSUInteger v25;
  _QWORD v26[5];
  id v27;
  id v28;
  const void *v29;
  uint8_t buf[16];
  _QWORD v31[4];
  _QWORD v32[6];

  length = a3.length;
  location = a3.location;
  v32[4] = *MEMORY[0x1E0C80C00];
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend((id)objc_opt_class(), "sendPerformanceNotification:", CFSTR("UIKeyboardPerformanceSearchCandidatesStartNotification"));

  -[_UIKeyboardStateManager cancelCandidateRequests](self, "cancelCandidateRequests");
  if (self->m_shiftNeedsUpdate)
  {
    self->m_shiftNeedsUpdate = 0;
    -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
  }
  -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
  v9 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v9, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v9, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  objc_msgSend(MEMORY[0x1E0DBDB58], "tokenForKeyboardState:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setCurrentCandidateRequest:](self, "setCurrentCandidateRequest:", v10);
  v31[0] = CFSTR("keyboardState");
  v11 = v9;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v32[0] = v11;
  v31[1] = CFSTR("index");
  v25 = location;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", location);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v32[1] = v12;
  v31[2] = CFSTR("candidateCount");
  v13 = length;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", length);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v32[2] = v14;
  v31[3] = CFSTR("selectedCandidate");
  v15 = v7;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v32[3] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setCurrentCandidateRequestInfo:](self, "setCurrentCandidateRequestInfo:", v16);

  if (!v7)
  if (!v9)

  v17 = (const void *)arc4random();
  kdebug_trace();
  kac_get_log();
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v19 = os_signpost_id_make_with_pointer(v18, v17);
  if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v20 = v19;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v20, "appCandidates", " enableTelemetry=YES ", buf, 2u);
    }
  }

  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __87___UIKeyboardStateManager_generateCandidatesAsynchronouslyWithRange_selectedCandidate___block_invoke;
  v26[3] = &unk_1E16BB588;
  v26[4] = self;
  v27 = v10;
  v28 = v9;
  v29 = v17;
  v21 = v9;
  v22 = v10;
  v23 = (void *)objc_msgSend(v26, "copy");
  -[_UIKeyboardStateManager inputManager](self, "inputManager");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "generateCandidatesWithKeyboardState:candidateRange:requestToken:completionHandler:", v21, v25, v13, v22, v23);

}

- (void)cancelCandidateRequests
{
  void *v3;

  -[_UIKeyboardStateManager setCurrentCandidateRequest:](self, "setCurrentCandidateRequest:", 0);
  -[_UIKeyboardStateManager setCurrentCandidateRequestInfo:](self, "setCurrentCandidateRequestInfo:", 0);
  -[_UIKeyboardStateManager delayedCandidateRequest](self, "delayedCandidateRequest");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "invalidate");

  -[_UIKeyboardStateManager setDelayedCandidateRequest:](self, "setDelayedCandidateRequest:", 0);
}

- (BOOL)shouldPrioritizeTextSuggestionsOverCandidateResultSet:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  int v7;

  v4 = a3;
  objc_msgSend(v4, "candidates");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");
  if (!v6)
  {
    objc_msgSend(v4, "committedText");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v3, "length"))
    {
      LOBYTE(v7) = 1;
LABEL_9:

      goto LABEL_10;
    }
  }
  LOBYTE(v7) = objc_msgSend(v4, "isDummySet");
  if ((v7 & 1) == 0 && objc_msgSend(v4, "hasOnlyCompletionCandidates"))
    v7 = objc_msgSend(v4, "hasAutofillCandidates") ^ 1;
  if (!v6)
    goto LABEL_9;
LABEL_10:

  return v7;
}

- (int64_t)preferredCandidateViewTypeForCandidateResultSet:(id)a3
{
  id v4;
  void *v5;
  int v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  int64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a3;
  -[TIKeyboardState inputForMarkedText](self->m_keyboardState, "inputForMarkedText");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "length")
    || (objc_msgSend(v4, "hasOnlyCompletionCandidates") & 1) != 0
    || (objc_msgSend(v4, "hasOnlySlottedCandidates") & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v6 = objc_msgSend(v4, "hasOnlyProactiveCandidates");
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "candidateController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "activeCandidateViewType");

  if (v9 == 4 && (v6 & 1) != 0)
  {
    v10 = 0;
  }
  else if (-[_UIKeyboardStateManager canUseCandidateBarAsSupplementToInlineView](self, "canUseCandidateBarAsSupplementToInlineView"))
  {
    v11 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v11, "candidateController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "activeCandidateViewType");

    v14 = 4;
    if (v6)
      v14 = 2;
    if (v13 == 6)
      v10 = v14;
    else
      v10 = -1;
  }
  else
  {
    v10 = -1;
  }

  return v10;
}

- (id)_rangeForSupplementalItemText:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;

  v4 = a3;
  self->m_textInputChangesIgnored = 1;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "selectedTextRange");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  self->m_textInputChangesIgnored = 0;
  if (v6)
  {
    if (objc_msgSend(v4, "length"))
    {
      self->m_textInputChangesIgnored = 1;
      v7 = objc_msgSend(v4, "length");
      objc_msgSend(v6, "end");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (v8 && v7)
      {
        v10 = 1;
        while (1)
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "_rangeOfText:endingAtPosition:", v4, v9);
          v12 = (id)objc_claimAutoreleasedReturnValue();

          if (v12)
            break;
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "positionFromPosition:offset:", v9, 1);
          v14 = objc_claimAutoreleasedReturnValue();

          if (v14)
          {
            v9 = (void *)v14;
            if (v10++ < v7)
              continue;
          }
          goto LABEL_14;
        }
        self->m_textInputChangesIgnored = 0;
      }
      else
      {
        v14 = v8;
LABEL_14:
        self->m_textInputChangesIgnored = 0;
        v12 = v6;
        v9 = (void *)v14;
      }

    }
    else
    {
      v12 = v6;
    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (void)_dispatchInsertionPointEnteredText:(id)a3 range:(id)a4 withSupplementalCandidate:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v23 = a3;
  v8 = a4;
  v9 = a5;
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "textOperation_insertionPointEnteredText:withSupplementalCandidate:", v23, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v11 && v12)
    {
      objc_msgSend(v11, "customInfoType");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "textOperations");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setCustomInfoType:", v14);

      objc_msgSend(v11, "customInfo");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "textOperations");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setCustomInfo:", v16);

      objc_msgSend(v13, "flushOperations");
    }

  }
  else if ((objc_msgSend(v8, "isEmpty") & 1) == 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_opt_respondsToSelector();

    if ((v19 & 1) != 0)
    {
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "input");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "ui_supplementalItems");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "_insertionPointEnteredRange:string:supplementalItems:", v8, v21, v22);

      self->m_textInputChangesIgnored = 0;
    }
  }

}

- (void)_inputManagerDidGenerateSupplementalCandidates:(id)a3
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _UIStringAndPositionPair *v8;
  void *v9;
  void *v10;
  id *v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a3;
  if (!self->m_selecting
    && !self->m_autoDeleteOK
    && !-[_UIKeyboardStateManager continuousPathUnderway](self, "continuousPathUnderway")
    && objc_msgSend(v21, "count")
    && (!self->m_autoDeleteUseForce || -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")))
  {
    v4 = objc_msgSend(v21, "indexOfObjectPassingTest:", &__block_literal_global_868);
    if (v4 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v21, "objectAtIndexedSubscript:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "input");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = [_UIStringAndPositionPair alloc];
      objc_msgSend(v5, "input");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "start");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[_UIStringAndPositionPair initWithString:position:]((id *)&v8->super.isa, v9, v10);

      -[_UIKeyboardStateManager lastMatchedSupplementalCandidate](self, "lastMatchedSupplementalCandidate");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {

      }
      else
      {
        objc_msgSend(v5, "inputWithoutSupplementalItemPrefix");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "length");

        if (v19)
        {
          if ((objc_msgSend(v7, "isEmpty") & 1) != 0)
            goto LABEL_19;
          goto LABEL_18;
        }
      }
      -[_UIKeyboardStateManager lastMatchedSupplementalCandidate](self, "lastMatchedSupplementalCandidate");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = -[_UIStringAndPositionPair isEqualToPair:inputDelegate:]((uint64_t)v13, v11, v14);

      if (v15)
      {
LABEL_20:

        goto LABEL_9;
      }
      -[_UIKeyboardStateManager _insertionPointExitedRangeWithSupplementalCandidate](self, "_insertionPointExitedRangeWithSupplementalCandidate");
      if ((objc_msgSend(v7, "isEmpty") & 1) != 0
        || (objc_msgSend(v5, "inputWithoutSupplementalItemPrefix"),
            v16 = (void *)objc_claimAutoreleasedReturnValue(),
            v17 = objc_msgSend(v16, "length"),
            v16,
            !v17))
      {
LABEL_19:
        -[_UIKeyboardStateManager setLastMatchedSupplementalCandidate:](self, "setLastMatchedSupplementalCandidate:", v11);
        goto LABEL_20;
      }
LABEL_18:
      objc_msgSend(v5, "input");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager _dispatchInsertionPointEnteredText:range:withSupplementalCandidate:](self, "_dispatchInsertionPointEnteredText:range:withSupplementalCandidate:", v20, v7, v5);

      goto LABEL_19;
    }
  }
  -[_UIKeyboardStateManager _insertionPointExitedRangeWithSupplementalCandidate](self, "_insertionPointExitedRangeWithSupplementalCandidate");
LABEL_9:

}

- (void)inputManagerDidGenerateCandidateResultSet:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    objc_msgSend(v4, "ui_uniqueSupplementalCandidates");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager _inputManagerDidGenerateSupplementalCandidates:](self, "_inputManagerDidGenerateSupplementalCandidates:", v5);

  }
  objc_msgSend(v4, "acceptedCandidate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "acceptedCandidate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager acceptCandidate:](self, "acceptCandidate:", v7);

    -[_UIKeyboardStateManager flushKeyboardOutputOnInputSourceSession](self, "flushKeyboardOutputOnInputSourceSession");
  }
  if (v4)
  {
    if (-[_UIKeyboardStateManager shouldPrioritizeTextSuggestionsOverCandidateResultSet:](self, "shouldPrioritizeTextSuggestionsOverCandidateResultSet:", v4))
    {
      if (-[TIKeyboardCandidateResultSet hasOnlySlottedCandidates](self->m_candidateResultSet, "hasOnlySlottedCandidates"))
      {
        goto LABEL_24;
      }
      -[UIKeyboardAutocorrectionController textSuggestionList](self->m_autocorrectionController, "textSuggestionList");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "predictions");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "count");

      if (v10)
      {
        v24 = v4;
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        -[UIKeyboardAutocorrectionController textSuggestionList](self->m_autocorrectionController, "textSuggestionList");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "predictions");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v26;
          do
          {
            for (i = 0; i != v15; ++i)
            {
              if (*(_QWORD *)v26 != v16)
                objc_enumerationMutation(v13);
              v18 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
              if (objc_msgSend(v18, "customInfoType") == 32)
              {
                -[UIKeyboardAutocorrectionController textSuggestionList](self->m_autocorrectionController, "textSuggestionList");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "predictions");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                v21 = objc_msgSend(v20, "count");

                if (v21 > 1)
                  continue;
              }
              objc_msgSend(v11, "addObject:", v18);
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
          }
          while (v15);
        }

        objc_msgSend(MEMORY[0x1E0DBDBE0], "setWithCandidates:", v11);
        v4 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    -[_UIKeyboardStateManager updateCandidateDisplayAsyncWithCandidateSet:](self, "updateCandidateDisplayAsyncWithCandidateSet:", v4);
  }
  -[_UIKeyboardStateManager currentCandidateRequestInfo](self, "currentCandidateRequestInfo");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "objectForKey:", CFSTR("selectedCandidate"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[UIKeyboardCandidateList showCandidate:](self->m_candidateList, "showCandidate:", v23);

LABEL_24:
}

- (void)generateAutocorrectionWithExecutionContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _BOOL4 v7;
  _QWORD v8[4];
  id v9;
  _UIKeyboardStateManager *v10;

  v4 = a3;
  sharedInputManagerMux();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "hasSystemInputManager")
    || !+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess") && self->m_disableSyncTextChanged
    || +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    || (-[_UIKeyboardStateManager inputDelegate](self, "inputDelegate"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = -[_UIKeyboardStateManager suppressOptOutASPCandidateUpdateForDelegate:](self, "suppressOptOutASPCandidateUpdateForDelegate:", v6), v6, v7))
  {
    objc_msgSend(v4, "returnExecutionToParent");
  }
  else
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __70___UIKeyboardStateManager_generateAutocorrectionWithExecutionContext___block_invoke;
    v8[3] = &unk_1E16BB5F0;
    v9 = v4;
    v10 = self;
    -[_UIKeyboardStateManager generateAutocorrectionsWithCompletionHandler:](self, "generateAutocorrectionsWithCompletionHandler:", v8);

  }
}

- (void)generateAutocorrectionsWithCompletionHandler:(id)a3
{
  void (**v4)(id, _QWORD);
  BOOL v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v4 = (void (**)(id, _QWORD))a3;
  v5 = -[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService");
  if (v4 && !v5)
    v4[2](v4, 0);
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend((id)objc_opt_class(), "sendPerformanceNotification:", CFSTR("UIKeyboardPerformanceSearchCandidatesStartNotification"));

  -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
  v7 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v7, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v7, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  v11 = (id)objc_msgSend(v4, "copy");

  objc_msgSend(MEMORY[0x1E0DBDB58], "tokenForKeyboardState:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setCurrentCandidateRequest:](self, "setCurrentCandidateRequest:", v8);
  -[_UIKeyboardStateManager backendController](self, "backendController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "generateAutocorrectionsWithKeyboardState:candidateRange:requestToken:completionHandler:", v7, 0, objc_msgSend(v10, "maximumNumberOfCandidates"), v8, v11);

}

- (BOOL)shouldAcceptContinuousPathConversion:(id)a3
{
  id v3;
  char v4;

  v3 = a3;
  if (objc_msgSend(v3, "isContinuousPathConversion"))
    v4 = objc_msgSend(v3, "shouldAccept");
  else
    v4 = 0;

  return v4;
}

- (void)_insertionPointExitedRangeWithSupplementalCandidate
{
  void *v3;

  -[_UIKeyboardStateManager lastMatchedSupplementalCandidate](self, "lastMatchedSupplementalCandidate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager _dispatchInsertionPointExitedRangeWithSupplementalCandidate](self, "_dispatchInsertionPointExitedRangeWithSupplementalCandidate");
    -[_UIKeyboardStateManager setLastMatchedSupplementalCandidate:](self, "setLastMatchedSupplementalCandidate:", 0);
  }
}

- (void)_dispatchInsertionPointExitedRangeWithSupplementalCandidate
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  id v12;

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "textOperation_insertionPointExitedTextWithSupplementalItems");
    v12 = (id)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      if (v4)
      {
        objc_msgSend(v12, "customInfoType");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "textOperations");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setCustomInfoType:", v5);

        objc_msgSend(v12, "customInfo");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "textOperations");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setCustomInfo:", v7);

        objc_msgSend(v4, "flushOperations");
      }
    }

  }
  else
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_opt_respondsToSelector();

    if ((v10 & 1) != 0)
    {
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "_insertionPointExitedRangeWithSupplementalItems");

      self->m_textInputChangesIgnored = 0;
    }
  }
}

- (void)inputManagerDidGenerateAutocorrections:(id)a3 executionContext:(id)a4
{
  -[_UIKeyboardStateManager inputManagerDidGenerateAutocorrections:forPredictiveInput:executionContext:](self, "inputManagerDidGenerateAutocorrections:forPredictiveInput:executionContext:", a3, 0, a4);
}

- (void)inputManagerDidGenerateAutocorrections:(id)a3 forPredictiveInput:(id)a4 executionContext:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char isKindOfClass;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  char v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _BOOL4 v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  _UIKeyboardStateManager *v37;
  id v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  char v48;
  void *v49;
  int v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  id WeakRetained;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  unint64_t v79;
  NSObject *v80;
  NSObject *v81;
  id v82;
  _QWORD v83[5];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[4];
  id v89;
  _QWORD v90[4];
  id v91;
  _UIKeyboardStateManager *v92;
  _QWORD v93[5];
  id v94;
  _QWORD v95[4];
  id v96;
  _UIKeyboardStateManager *v97;
  uint8_t buf[16];
  const __CFString *v99;
  void *v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v82 = a4;
  v9 = a5;
  objc_msgSend(v8, "ui_allSupplementalCandidates");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _inputManagerDidGenerateSupplementalCandidates:](self, "_inputManagerDidGenerateSupplementalCandidates:", v10);

  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    objc_msgSend(v8, "candidates");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "firstObject");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(v8, "candidates");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "firstObject");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        if ((objc_msgSend(v15, "candidateProperty") & 0x20) != 0)
        {
          if (os_variant_has_internal_diagnostics())
          {
            __UIFaultDebugAssertLog();
            v81 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_185066000, v81, OS_LOG_TYPE_FAULT, "The enum for the LongFormReply candidateProperty has changed. Please update to latest TextInputUI and TextInput", buf, 2u);
            }

          }
          else
          {
            v79 = inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext____s_category;
            if (!inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext____s_category)
            {
              v79 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v79, (unint64_t *)&inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext____s_category);
            }
            v80 = *(NSObject **)(v79 + 8);
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_185066000, v80, OS_LOG_TYPE_ERROR, "The enum for the LongFormReply candidateProperty has changed. Please update to latest TextInputUI and TextInput", buf, 2u);
            }
          }
        }
        if ((objc_msgSend(v15, "candidateProperty", v82) & 0x40) != 0)
        {
          _UIKeyboardSmartReplyLog();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_185066000, v55, OS_LOG_TYPE_DEFAULT, "Received long form reply, accepting immediately", buf, 2u);
          }

          v95[0] = MEMORY[0x1E0C809B0];
          v95[1] = 3221225472;
          v95[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke;
          v95[3] = &unk_1E16BB0D8;
          v96 = v15;
          v97 = self;
          v56 = v15;
          objc_msgSend(v9, "childWithContinuation:", v95);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager acceptPredictiveInput:appendSeparator:executionContext:](self, "acceptPredictiveInput:appendSeparator:executionContext:", v56, 0, v57);

LABEL_72:
          goto LABEL_73;
        }
      }

    }
  }
  objc_msgSend(v8, "emojiList", v82);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {

  }
  else
  {
    objc_msgSend(v8, "predictions");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      v20 = 0;
      v21 = 0;
      goto LABEL_14;
    }
  }
  objc_msgSend(v8, "corrections");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "autocorrection");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19 || (objc_msgSend(v8, "containsAutofillCandidates") & 1) != 0)
    v20 = 0;
  else
    v20 = objc_msgSend(v8, "containsProactiveTriggers") ^ 1;

  v21 = 1;
LABEL_14:
  objc_msgSend(v8, "updateLabelsWithSmartPunctuation:", self->m_smartPunctuationController);
  objc_msgSend(v8, "corrections");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "autocorrection");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v23, "isContinuousPathConversion") & 1) == 0)
  {

LABEL_18:
    -[_UIKeyboardStateManager setAutocorrectionToAcceptBeforeProgressiveCandidates:](self, "setAutocorrectionToAcceptBeforeProgressiveCandidates:", 0);
    objc_msgSend(v8, "corrections");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "autocorrection");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[_UIKeyboardStateManager shouldAcceptContinuousPathConversion:](self, "shouldAcceptContinuousPathConversion:", v31);

    if (v32)
    {
      objc_msgSend(v8, "corrections");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "autocorrection");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v90[0] = MEMORY[0x1E0C809B0];
      v90[1] = 3221225472;
      v90[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_4;
      v90[3] = &unk_1E16BB0D8;
      v91 = v8;
      v92 = self;
      objc_msgSend(v9, "childWithContinuation:", v90);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager acceptPredictiveInput:executionContext:](self, "acceptPredictiveInput:executionContext:", v34, v35);

      v29 = v91;
      goto LABEL_20;
    }
    v36 = objc_msgSend(v8, "proactiveSuggestionsEmpty");
    if (v20
      && (objc_msgSend(v82, "isContinuousPathConversion") & 1) == 0
      && !-[_UIKeyboardStateManager _shouldLoadPredictionsBasedOnCurrentTraits](self, "_shouldLoadPredictionsBasedOnCurrentTraits")&& -[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits") == 2)
    {
      v37 = self;
      v38 = 0;
LABEL_36:
      -[_UIKeyboardStateManager setAutocorrectionList:](v37, "setAutocorrectionList:", v38);
LABEL_54:
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      objc_msgSend(v8, "candidates");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v84, v101, 16);
      if (v63)
      {
        v64 = *(_QWORD *)v85;
        while (2)
        {
          for (i = 0; i != v63; ++i)
          {
            if (*(_QWORD *)v85 != v64)
              objc_enumerationMutation(v62);
            if (objc_msgSend(*(id *)(*((_QWORD *)&v84 + 1) + 8 * i), "slotID"))
            {
              v63 = 1;
              goto LABEL_64;
            }
          }
          v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v84, v101, 16);
          if (v63)
            continue;
          break;
        }
      }
LABEL_64:

      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v67 = (void *)objc_opt_class();
      v99 = CFSTR("UIKeyboardPerformanceSearchFoundProactiveResults");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v63);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v100 = v68;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v100, &v99, 1);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v67, "sendPerformanceNotification:userInfo:", CFSTR("UIKeyboardPerformanceSearchCandidatesEndNotification"), v69);

      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v70, "hasAutocorrection"))
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "autocorrection");
        v56 = (id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v56 = 0;
      }

      if (-[_UIKeyboardStateManager hasAutocorrectPrompt](self, "hasAutocorrectPrompt"))
      {
        v83[0] = MEMORY[0x1E0C809B0];
        v83[1] = 3221225472;
        v83[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_6;
        v83[3] = &unk_1E16BAF98;
        v83[4] = self;
        objc_msgSend(v9, "childWithContinuation:", v83);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager updateAutocorrectPrompt:executionContext:](self, "updateAutocorrectPrompt:executionContext:", v56, v72);

      }
      else
      {
        -[_UIKeyboardStateManager touchAutocorrectPromptTimer](self, "touchAutocorrectPromptTimer");
        objc_msgSend(v8, "candidates");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager _conditionallyNotifyPredictionsAreAvailableForCandidates:containingProactiveTriggers:](self, "_conditionallyNotifyPredictionsAreAvailableForCandidates:containingProactiveTriggers:", v73, objc_msgSend(v8, "containsProactiveTriggers"));

        -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
        v74 = (void *)objc_claimAutoreleasedReturnValue();

        if (v74)
        {
          -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "updateTextCompletionPromptExecutionContext:", v9);

        }
        else
        {
          objc_msgSend(v9, "returnExecutionToParent");
        }
      }
      goto LABEL_72;
    }
    if ((v21 & 1) != 0
      || (objc_msgSend(v8, "corrections"),
          v39 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v39, "autocorrection"),
          v40 = (void *)objc_claimAutoreleasedReturnValue(),
          v41 = objc_msgSend(v40, "isContinuousPathConversion"),
          v40,
          v39,
          v41))
    {
      if (!objc_msgSend(v8, "containsProactiveTriggers"))
      {
        v37 = self;
        v38 = v8;
        goto LABEL_36;
      }
      +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setAutocorrectionList:](self, "setAutocorrectionList:", v8);
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "setAutocorrectionList:", v8);

      objc_msgSend(v42, "systemInputAssistantViewController");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v44, "isInputAssistantItemEmpty") & 1) != 0)
      {
        objc_msgSend(v42, "systemInputAssistantViewController");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "view");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "window");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v47, "_isRemoteKeyboardWindow");

        if ((v48 & 1) == 0)
        {
          objc_msgSend(v42, "containerRootController");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = objc_msgSend(v49, "isTransitioning");

          if (v50)
          {
            objc_msgSend(v42, "containerRootController");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v88[0] = MEMORY[0x1E0C809B0];
            v88[1] = 3221225472;
            v88[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_5;
            v88[3] = &unk_1E16B1B28;
            v89 = v42;
            objc_msgSend(v51, "addPendingActivity:", v88);

          }
          else
          {
            objc_msgSend(v42, "forceReloadInputViews");
          }
          goto LABEL_53;
        }
      }
      else
      {

      }
      -[_UIKeyboardStateManager updateAssistantView](self, "updateAssistantView");
LABEL_53:

      goto LABEL_54;
    }
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = v52;
    if (!v36)
    {
      objc_msgSend(v52, "setAutocorrectionList:", v8);
      goto LABEL_53;
    }
    if ((objc_msgSend(v52, "hasAutocorrection") & 1) != 0)
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "autocorrection");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      if (v54)
      {

LABEL_52:
        goto LABEL_53;
      }
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "autocorrectionList");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "emojiList");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      if (v61)
      {

        goto LABEL_52;
      }
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "autocorrectionList");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v77, "predictions");
      v78 = (void *)objc_claimAutoreleasedReturnValue();

      if (v78)
        goto LABEL_54;
    }
    else
    {

    }
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "clearAutocorrectionAndNotifyObservers:", 1);

    -[_UIKeyboardStateManager updateAssistantView](self, "updateAssistantView");
    goto LABEL_54;
  }
  -[_UIKeyboardStateManager autocorrectionToAcceptBeforeProgressiveCandidates](self, "autocorrectionToAcceptBeforeProgressiveCandidates");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "input");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "length");

  if (!v26)
    goto LABEL_18;
  -[_UIKeyboardStateManager acceptingCandidateWithTrigger:](self, "acceptingCandidateWithTrigger:", *MEMORY[0x1E0DBDE40]);
  -[_UIKeyboardStateManager autocorrectionToAcceptBeforeProgressiveCandidates](self, "autocorrectionToAcceptBeforeProgressiveCandidates");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v93[0] = MEMORY[0x1E0C809B0];
  v93[1] = 3221225472;
  v93[2] = __102___UIKeyboardStateManager_inputManagerDidGenerateAutocorrections_forPredictiveInput_executionContext___block_invoke_3;
  v93[3] = &unk_1E16BB0D8;
  v93[4] = self;
  v94 = v8;
  objc_msgSend(v9, "childWithContinuation:", v93);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager acceptPredictiveInput:executionContext:](self, "acceptPredictiveInput:executionContext:", v27, v28);

  v29 = v94;
LABEL_20:

LABEL_73:
}

- (BOOL)_insertSupplementalCandidate:(id)a3 overridingCandidateText:(id)a4
{
  id v6;
  id v7;
  uint64_t (**v8)(void *, void *, id, void *);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  BOOL v13;
  _QWORD aBlock[5];

  v6 = a3;
  v7 = a4;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __80___UIKeyboardStateManager__insertSupplementalCandidate_overridingCandidateText___block_invoke;
  aBlock[3] = &unk_1E16BB618;
  aBlock[4] = self;
  v8 = (uint64_t (**)(void *, void *, id, void *))_Block_copy(aBlock);
  objc_msgSend(v6, "ui_supplementalItems");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v6, "input");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v13 = (objc_msgSend(v11, "isEmpty") & 1) == 0 && (v8[2](v8, v10, v6, v11) & 1) != 0;

  return v13;
}

- (void)_willReplaceText:(id)a3 withSupplementalCandidate:(id)a4
{
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v12 = a3;
  v5 = -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText");
  v6 = v12;
  if (!v5)
  {
    -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "end");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_setSelectionToPosition:", v9);

      -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");
      objc_msgSend(v12, "rangeOfComposedCharacterSequencesForRange:", 0, objc_msgSend(v12, "length"));
      if (v10)
      {
        v11 = v10;
        do
        {
          --v11;
          -[_UIKeyboardStateManager deleteBackwardAndNotify:](self, "deleteBackwardAndNotify:", 0);
        }
        while (v11);
      }
      self->m_textInputChangesIgnored = 0;
    }

    v6 = v12;
  }

}

- (void)_didReplaceText:(id)a3 withSupplementalCandidate:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  int v9;
  BOOL v10;
  void *v11;
  id v12;

  v12 = a3;
  v6 = a4;
  objc_msgSend(v6, "input");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "length"))
  {
    objc_msgSend(v6, "input");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "characterAtIndex:", 0);
    v10 = v9 == objc_msgSend(v6, "supplementalItemPrefix");

  }
  else
  {
    v10 = 0;
  }

  if (objc_msgSend(v6, "supplementalItemPrefix") && !v10)
  {
    -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
      self->m_textInputChangesIgnored = 0;

  }
}

- (void)_acceptAutofillCandidateRequiringAuthentication:(id)a3 payloadDelegate:(id)a4 executionContext:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *, void *);
  void *v17;
  _UIKeyboardStateManager *v18;
  id v19;
  id buf[2];

  v8 = a3;
  v9 = a4;
  v10 = a5;
  _UIKeyboardImplLog();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_DEFAULT, "Accepting autofill candidate requiring authentication", (uint8_t *)buf, 2u);
  }

  v12 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v12, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v12, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  objc_initWeak(buf, v9);
  -[_UIKeyboardStateManager inputManager](self, "inputManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = MEMORY[0x1E0C809B0];
  v15 = 3221225472;
  v16 = __108___UIKeyboardStateManager__acceptAutofillCandidateRequiringAuthentication_payloadDelegate_executionContext___block_invoke;
  v17 = &unk_1E16BB668;
  v18 = self;
  objc_copyWeak(&v19, buf);
  objc_msgSend(v13, "handleAcceptedCandidate:keyboardState:completionHandler:", v8, v12, &v14);

  objc_msgSend(v10, "returnExecutionToParent", v14, v15, v16, v17, v18);
  objc_destroyWeak(&v19);
  objc_destroyWeak(buf);

}

- (void)handleAcceptedCandidate:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  _UIKeyboardStateManager *v18;

  v6 = a3;
  v7 = a4;
  -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
    && (v8 = objc_msgSend(v6, "slotID"), v9 = objc_msgSend(v6, "customInfoType"), v8)
    && self->m_cachedAutofillMode == 1
    && v9
    && (-[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner"),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v10, "autofillPayloadDelegate"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        v10,
        v11))
  {
    -[_UIKeyboardStateManager _acceptAutofillCandidateRequiringAuthentication:payloadDelegate:executionContext:](self, "_acceptAutofillCandidateRequiringAuthentication:payloadDelegate:executionContext:", v6, v11, v7);
  }
  else
  {
    v11 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
    objc_msgSend(v11, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
    objc_msgSend(v11, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __68___UIKeyboardStateManager_handleAcceptedCandidate_executionContext___block_invoke;
    v15[3] = &unk_1E16BB690;
    v16 = v7;
    v12 = v6;
    v17 = v12;
    v18 = self;
    v13 = (void *)objc_msgSend(v15, "copy");
    -[_UIKeyboardStateManager inputManager](self, "inputManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleAcceptedCandidate:keyboardState:completionHandler:", v12, v11, v13);

  }
}

- (void)generateReplacementsForString:(id)a3 candidatesHandler:(id)a4 executionContext:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  id v21;

  v8 = a4;
  v9 = a5;
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __92___UIKeyboardStateManager_generateReplacementsForString_candidatesHandler_executionContext___block_invoke;
  v19 = &unk_1E16BB6E0;
  v20 = v9;
  v21 = v8;
  v10 = v8;
  v11 = v9;
  v12 = a3;
  v13 = (void *)objc_msgSend(&v16, "copy");
  -[_UIKeyboardStateManager inputManager](self, "inputManager", v16, v17, v18, v19);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState keyLayout](self->m_keyboardState, "keyLayout");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "generateReplacementsForString:keyLayout:continuation:", v12, v15, v13);

}

- (void)skipHitTestForTouchEvent:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = a3;
    v4 = (void *)MEMORY[0x1E0C99D20];
    v5 = a3;
    objc_msgSend(v4, "arrayWithObjects:count:", &v7, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager skipHitTestForTouchEvents:](self, "skipHitTestForTouchEvents:", v6, v7, v8);
  }
}

- (void)skipHitTestForTouchEvents:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (objc_msgSend(v6, "count"))
  {
    if (objc_msgSend(v6, "indexOfObjectPassingTest:", &__block_literal_global_891) != 0x7FFFFFFFFFFFFFFFLL)
      -[_UIKeyboardStateManager refreshKeyboardStateUpdatingSecureCandidateRenderTraits:](self, "refreshKeyboardStateUpdatingSecureCandidateRenderTraits:", 0);
    v4 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
    objc_msgSend(v4, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
    objc_msgSend(v4, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
    -[_UIKeyboardStateManager inputManager](self, "inputManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "skipHitTestForTouchEvents:keyboardState:", v6, v4);

  }
}

- (void)skipHitTestForTouchEvent:(id)a3 delayed:(BOOL)a4
{
  if (a4)
    -[_UIKeyboardStateManager setTouchEventWaitingForKeyInputEvent:](self, "setTouchEventWaitingForKeyInputEvent:", a3);
  else
    -[_UIKeyboardStateManager skipHitTestForTouchEvent:](self, "skipHitTestForTouchEvent:", a3);
}

- (void)performHitTestForTouchEvent:(id)a3 executionContextPassingNSNumber:(id)a4
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v6 = (void *)MEMORY[0x1E0C99D20];
  v7 = a4;
  v8 = a3;
  objc_msgSend(v6, "arrayWithObjects:count:", &v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager performHitTestForTouchEvents:executionContextPassingNSNumber:](self, "performHitTestForTouchEvents:executionContextPassingNSNumber:", v9, v7, v10, v11);
}

- (void)performHitTestForTouchEvents:(id)a3 executionContextPassingNSNumber:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;

  v6 = a4;
  v7 = a3;
  if (!-[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService"))
    objc_msgSend(v6, "returnExecutionToParent");
  -[_UIKeyboardStateManager refreshKeyboardStateUpdatingSecureCandidateRenderTraits:](self, "refreshKeyboardStateUpdatingSecureCandidateRenderTraits:", 0);
  v8 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v8, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v8, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __88___UIKeyboardStateManager_performHitTestForTouchEvents_executionContextPassingNSNumber___block_invoke;
  v12[3] = &unk_1E16B42D0;
  v13 = v6;
  v9 = v6;
  v10 = (void *)objc_msgSend(v12, "copy");
  -[_UIKeyboardStateManager backendController](self, "backendController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "performHitTestForTouchEvents:keyboardState:completionHandler:", v7, v8, v10);

}

- (void)adjustPhraseBoundaryInForwardDirection:(BOOL)a3 granularity:(int)a4 executionContext:(id)a5
{
  uint64_t v5;
  _BOOL8 v6;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  id v17;
  _UIKeyboardStateManager *v18;

  v5 = *(_QWORD *)&a4;
  v6 = a3;
  v8 = a5;
  -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
  v9 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v9, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v9, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = __95___UIKeyboardStateManager_adjustPhraseBoundaryInForwardDirection_granularity_executionContext___block_invoke;
  v16 = &unk_1E16BB3E0;
  v17 = v8;
  v18 = self;
  v10 = v8;
  v11 = (void *)objc_msgSend(&v13, "copy");
  -[_UIKeyboardStateManager inputManager](self, "inputManager", v13, v14, v15, v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "adjustPhraseBoundaryInForwardDirection:granularity:keyboardState:completionHandler:", v6, v5, v9, v11);

}

- (void)removeAllDynamicDictionaries
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD aBlock[4];
  id v8;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.TextInput.rdt"), 4096);
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE0CDF18);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setRemoteObjectInterface:", v3);

  objc_msgSend(v2, "resume");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __55___UIKeyboardStateManager_removeAllDynamicDictionaries__block_invoke;
  aBlock[3] = &unk_1E16BB768;
  v8 = v2;
  v4 = v2;
  v5 = _Block_copy(aBlock);
  objc_msgSend(v4, "remoteObjectProxyWithErrorHandler:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeAllDynamicDictionariesWithCompletionHandler:", v5);

}

- (TIKeyboardInputManagerStub)inputManager
{
  void *v3;

  sharedInputManagerMux();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "hasSystemInputManager") & 1) == 0)
    -[_UIKeyboardStateManager setInputManagerFromCurrentInputMode](self, "setInputManagerFromCurrentInputMode");
  return (TIKeyboardInputManagerStub *)v3;
}

- (BOOL)shouldAccessInputManagerService
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if (WeakRetained)
    v3 = objc_msgSend((id)objc_opt_class(), "shouldAccessInputManagerService");
  else
    v3 = 1;

  return v3;
}

- (TUIKeyboardBackendController)backendController
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (-[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService"))
  {
    sharedInputManagerMux();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v3, "hasSystemInputManager") & 1) == 0)
      -[_UIKeyboardStateManager setInputManagerFromCurrentInputMode](self, "setInputManagerFromCurrentInputMode");
    v9 = 0;
    v10 = &v9;
    v11 = 0x2050000000;
    v4 = (void *)getTUIKeyboardBackendControllerClass_softClass;
    v12 = getTUIKeyboardBackendControllerClass_softClass;
    if (!getTUIKeyboardBackendControllerClass_softClass)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __getTUIKeyboardBackendControllerClass_block_invoke;
      v8[3] = &unk_1E16B14C0;
      v8[4] = &v9;
      __getTUIKeyboardBackendControllerClass_block_invoke((uint64_t)v8);
      v4 = (void *)v10[3];
    }
    v5 = objc_retainAutorelease(v4);
    _Block_object_dispose(&v9, 8);
    objc_msgSend(v5, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v6, "setCandidateReceiver:", self);

  }
  else
  {
    v6 = 0;
  }
  return (TUIKeyboardBackendController *)v6;
}

- (void)setInputManagerFromCurrentInputMode
{
  void *v3;
  unint64_t v4;
  id v5;

  -[_UIKeyboardStateManager updateInputManagerMode](self, "updateInputManagerMode");
  -[_UIKeyboardImplProxy setDelegate:](self->m_implProxy, "setDelegate:", self);
  sharedInputManagerMux();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if ((_UIApplicationIsKeyboardExtension() & 1) == 0)
    objc_msgSend(v5, "setResponseDelegate:", self);
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", objc_msgSend(v3, "delegateNeedsAutofillMode"));

  objc_msgSend(v5, "setSystemInputManagerFromTextInputTraits:autofillMode:implProxy:", self->m_traits, v4, self->m_implProxy);
}

- (void)releaseInputManager
{
  TIKeyboardInputManagerState *m_inputManagerState;
  id v4;

  m_inputManagerState = self->m_inputManagerState;
  self->m_inputManagerState = 0;

  -[_UIKeyboardImplProxy setDelegate:](self->m_implProxy, "setDelegate:", 0);
  sharedInputManagerMux();
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "releaseConnectedClients");
  -[_UISmartReplyFeedbackManager resetWithDebug:](self->_smartReplyFeedbackManager, "resetWithDebug:", CFSTR("releaseInputManager"));

}

- (void)releaseInputManagerIfInactive
{
  void *v3;

  -[_UIKeyboardStateManager delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    -[_UIKeyboardStateManager releaseInputManager](self, "releaseInputManager");
}

- (BOOL)shouldUseCarPlayModes
{
  BOOL v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;

  if ((objc_msgSend((id)UIApp, "_isSpringBoard") & 1) != 0)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend((id)objc_opt_class(), "keyboardWindow");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "screen");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = objc_msgSend(v7, "idiom") == 3;
  return v3;
}

- (BOOL)switchMode:(id)a3 withHUD:(BOOL)a4 withDelay:(BOOL)a5 fromCapsLock:(BOOL)a6
{
  uint64_t v6;
  _BOOL8 v7;
  id v9;
  void *v10;

  v6 = a6;
  v7 = a4;
  v9 = a3;
  -[_UIKeyboardStateManager showCursorAccessory](self, "showCursorAccessory");
  +[UIInputSwitcher sharedInstance](UIInputSwitcher, "sharedInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v6) = objc_msgSend(v10, "switchMode:withHUD:withDelay:fromCapsLock:", v9, v7, v7, v6);

  return v6;
}

- (BOOL)shouldSwitchInputMode:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  int64_t v7;
  BOOL v8;
  void *v9;
  BOOL v10;
  char v11;
  unsigned int v12;

  v4 = a3;
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "delegateNeedsAutofillMode");

  v7 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType");
  v8 = v7 == 1;
  +[UIKeyboard keyboardBundleIdentifier](UIKeyboard, "keyboardBundleIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.purplebuddy")))
  {
    v10 = +[UITextInputTraits keyboardTypeRequiresASCIICapable:](UITextInputTraits, "keyboardTypeRequiresASCIICapable:", -[UITextInputTraits keyboardType](self->m_traits, "keyboardType"));
    v8 = v7 == 1 || v10;
  }
  v11 = objc_msgSend(v4, "isDesiredForTraits:withExtended:", self->m_traits, 0);
  LOBYTE(v12) = v11 ^ 1;
  if ((v11 & 1) == 0 && !v8)
    v12 = (v6 < 5) & (0x16u >> v6) | -[UITextInputTraits isCarPlayIdiom](self->m_traits, "isCarPlayIdiom");

  return v12;
}

- (id)desirableInputModesWithExtensions:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  unsigned int v35;
  id WeakRetained;
  id v38;
  int v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[5];
  id v50;
  id v51;
  id v52;
  char v53;
  _BYTE v54[128];
  _BYTE v55[128];
  _QWORD v56[3];

  v3 = a3;
  v56[1] = *MEMORY[0x1E0C80C00];
  if (-[UITextInputTraits keyboardType](self->m_traits, "keyboardType") == 124)
  {
    +[UIKeyboardInputMode keyboardInputModeWithIdentifier:](UIKeyboardInputMode, "keyboardInputModeWithIdentifier:", CFSTR("emoji@sw=Emoji"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v56[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v56, 1);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
      || -[UITextInputTraits keyboardType](self->m_traits, "keyboardType") == 7
      || -[UITextInputTraits keyboardType](self->m_traits, "keyboardType") == 3)
    {
      v8 = (void *)-[UITextInputTraits copy](self->m_traits, "copy");
      objc_msgSend(v8, "setKeyboardType:", 1);
    }
    else
    {
      v8 = 0;
    }
    if (-[UITextInputTraits loadKeyboardsForSiriLanguage](self->m_traits, "loadKeyboardsForSiriLanguage"))
      objc_msgSend(v7, "loadSuggestedInputModesForSiriLanguage");
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    self->m_needsToRecomputeDesirableModes = 0;
    if (v3)
    {
      -[UITextInputTraits textContentType](self->m_traits, "textContentType");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("cc-number"));

    }
    else
    {
      v12 = 1;
    }
    v40 = v7;
    objc_msgSend(v7, "activeInputModes");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = __61___UIKeyboardStateManager_desirableInputModesWithExtensions___block_invoke;
    v49[3] = &unk_1E16BB790;
    v53 = v12;
    v49[4] = self;
    v14 = v8;
    v50 = v14;
    v15 = v9;
    v51 = v15;
    v16 = v10;
    v52 = v16;
    objc_msgSend(v13, "enumerateObjectsUsingBlock:", v49);

    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v17 = v15;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    if (v18)
    {
      v19 = v18;
      v38 = v16;
      v20 = *(_QWORD *)v46;
      while (2)
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v46 != v20)
            objc_enumerationMutation(v17);
          v22 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
          objc_msgSend(v22, "identifier");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "hasPrefix:", CFSTR("emoji"));

          if ((v24 & 1) == 0 && (objc_msgSend(v22, "isDesiredForTraits:", self->m_traits) & 1) != 0)
          {
            v39 = 1;
            goto LABEL_23;
          }
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
        if (v19)
          continue;
        break;
      }
      v39 = 0;
LABEL_23:
      v16 = v38;
    }
    else
    {
      v39 = 0;
    }

    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v25 = v16;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
    if (v26)
    {
      v27 = v26;
      v28 = 0;
      v29 = *(_QWORD *)v42;
      do
      {
        for (j = 0; j != v27; ++j)
        {
          if (*(_QWORD *)v42 != v29)
            objc_enumerationMutation(v25);
          v31 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * j);
          v32 = objc_msgSend(v31, "isDesiredForTraits:", v14);
          if ((objc_msgSend(v17, "containsObject:", v31) & 1) == 0)
            objc_msgSend(v17, "addObject:", v31);
          v28 |= v32;
        }
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
      }
      while (v27);
    }
    else
    {
      v28 = 0;
    }

    if ((v39 & ((v14 == 0) | v28) & 1) == 0)
    {
      +[UIKeyboardInputMode intlInputMode](UIKeyboardInputMode, "intlInputMode");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "addObject:", v33);

    }
    v5 = v40;
    if (-[_UIKeyboardStateManager shouldLoadAutofillSignUpInputViewController](self, "shouldLoadAutofillSignUpInputViewController"))
    {
      +[UIKeyboardInputMode autofillSignupInputMode](UIKeyboardInputMode, "autofillSignupInputMode");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "addObject:", v34);

    }
    v35 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType");
    if (v35 <= 0xB && ((1 << v35) & 0x930) != 0 || v35 == 127)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend((id)objc_opt_class(), "uniqueNumberPadInputModesFromInputModes:forKeyboardType:", v17, -[UITextInputTraits keyboardType](self->m_traits, "keyboardType"));
      v6 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v6 = v17;
    }

  }
  return v6;
}

- (void)recomputeActiveInputModesWithExtensions:(BOOL)a3
{
  -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:](self, "recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:", a3, -[UITextInputTraits acceptsInitialEmojiKeyboard](self->m_traits, "acceptsInitialEmojiKeyboard"));
}

- (void)recomputeActiveInputModesWithExtensions:(BOOL)a3 allowNonLinguisticInputModes:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL8 v5;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  char v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  char IsNonLinguistic;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  void *v62;
  _BOOL4 v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t i;
  void *v75;
  id v76;
  id WeakRetained;
  id v78;
  id v79;
  void *v80;
  void *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[128];
  _QWORD v95[2];
  _QWORD v96[2];
  _BYTE v97[128];
  _BYTE v98[128];
  uint64_t v99;

  v4 = a4;
  v5 = a3;
  v99 = *MEMORY[0x1E0C80C00];
  if (!-[_UIKeyboardStateManager skipRecomputeInputMode](self, "skipRecomputeInputMode"))
  {
    +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "handlingRemoteEvent");

    if ((v8 & 1) == 0)
    {
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_additionalTextInputLocales");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setAdditionalTextInputLocales:", v11);

      -[_UIKeyboardStateManager desirableInputModesWithExtensions:](self, "desirableInputModesWithExtensions:", v5);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifiersFromInputModes:");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (id)UIKeyboardActiveInputModes;
      v14 = objc_msgSend(v13, "isEqualToArray:", v12);

      UIKeyboardSetActiveInputModes(v12);
      if ((v14 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "postNotificationName:object:userInfo:", CFSTR("UIKeyboardActiveInputModesDidChange"), 0, 0);

      }
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "lastInputModeSwitchTriggeredByASCIIToggle");

      if (v17)
        objc_msgSend(v9, "currentInputModeInPreference");
      else
        objc_msgSend(v9, "currentInputMode");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v18, "isEqual:", v19);

      if (v20)
      {
        +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "currentInputModeForDictation");
        v22 = objc_claimAutoreleasedReturnValue();

        v18 = (void *)v22;
      }
      v23 = v18;
      objc_msgSend(v9, "inputModeContextIdentifier");
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      v25 = v23;
      if (!v24)
      {
        if (self->_suppressUpdateInputMode || !v4)
        {
          v25 = v23;
          if (self->_suppressUpdateInputMode)
            goto LABEL_11;
        }
        else
        {
          objc_msgSend(v23, "normalizedIdentifier");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          IsNonLinguistic = UIKeyboardInputModeIsNonLinguistic(v40);

          v25 = v23;
          if ((IsNonLinguistic & 1) != 0)
            goto LABEL_11;
        }
        v25 = v23;
        if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
        {
          -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "textInputModeForResponder:", v49);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "lastUsedInputModeForTextInputMode:", v50);
          v25 = (id)objc_claimAutoreleasedReturnValue();

        }
        if (!v25)
        {
          objc_msgSend(v9, "currentInputModeInPreference");
          v25 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
LABEL_11:
      if (-[_UIKeyboardStateManager shouldLoadAutofillSignUpInputViewController](self, "shouldLoadAutofillSignUpInputViewController"))
      {
        +[UIKeyboardInputMode autofillSignupInputMode](UIKeyboardInputMode, "autofillSignupInputMode");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", v26, 0);

        +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = (id)objc_msgSend(v27, "remoteHostInputViewSet:", 0);

        v29 = v81;
LABEL_74:

        return;
      }
      v80 = v12;
      if ((unint64_t)(self->m_cachedAutofillMode - 1) > 2)
      {
        if (!self->_restoresToEmojiInputMode)
        {
          v29 = v81;
LABEL_51:
          if ((objc_msgSend(v25, "isEqual:", v23) & 1) != 0
            || objc_msgSend(v29, "indexOfObject:", v25) == 0x7FFFFFFFFFFFFFFFLL)
          {
            if ((objc_msgSend(v23, "isDisplayed") & 1) == 0)
              -[_UIKeyboardStateManager postInputViewControllerShouldUpdateNotification:](self, "postInputViewControllerShouldUpdateNotification:", v23);
          }
          else
          {
            if (!+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
              goto LABEL_57;
            -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            v95[0] = CFSTR("inputMode");
            v95[1] = CFSTR("isUserInitiated");
            v96[0] = v25;
            v96[1] = MEMORY[0x1E0C9AAA0];
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v96, v95, 2);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v56, "forwardInputDestinationEventToUIHost:params:", sel_setKeyboardInputMode_userInitiated_, v57);

            objc_msgSend(v9, "currentInputMode");
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v58, "identifier");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v57) = objc_msgSend(v59, "isEqualToString:", CFSTR("autofillsignup"));

            if ((_DWORD)v57)
LABEL_57:
              -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", v25, 0);
            v60 = v25;

            v23 = v60;
          }
          v61 = objc_msgSend(v29, "indexOfObject:", v23);
          if (v61 == 0x7FFFFFFFFFFFFFFFLL
            || (objc_msgSend(v29, "objectAtIndex:", v61),
                v62 = (void *)objc_claimAutoreleasedReturnValue(),
                v63 = -[_UIKeyboardStateManager shouldSwitchInputMode:](self, "shouldSwitchInputMode:", v62),
                v62,
                v63))
          {
            v79 = v23;
            +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "currentInputMode");
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v64, "fallbackCurrentInputModeForFilteredInputMode:fromInputModes:", v65, v29);
            v66 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            v68 = v67;
            if (v66)
              objc_msgSend(v67, "addObject:", v66);
            v69 = v29;
            objc_msgSend(v68, "addObjectsFromArray:", v29);
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v70 = v68;
            v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v82, v94, 16);
            if (v71)
            {
              v72 = v71;
              v73 = *(_QWORD *)v83;
              while (2)
              {
                for (i = 0; i != v72; ++i)
                {
                  if (*(_QWORD *)v83 != v73)
                    objc_enumerationMutation(v70);
                  v75 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * i);
                  if (objc_msgSend(v75, "isDesiredForTraits:withExtended:", self->m_traits, 0))
                  {
                    v76 = (id)objc_msgSend(v9, "currentInputMode");
                    -[_UIKeyboardStateManager setKeyboardInputMode:userInitiated:](self, "setKeyboardInputMode:userInitiated:", v75, 0);
                    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
                    objc_msgSend(WeakRetained, "setShowInputModeIndicator:", 1);

                    goto LABEL_73;
                  }
                }
                v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v82, v94, 16);
                if (v72)
                  continue;
                break;
              }
            }
LABEL_73:

            v23 = v79;
            v12 = v80;
            v29 = v69;
          }
          goto LABEL_74;
        }
        v42 = v12;
        self->_restoresToEmojiInputMode = 0;
        v86 = 0u;
        v87 = 0u;
        v88 = 0u;
        v89 = 0u;
        v43 = v81;
        v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v86, v97, 16);
        if (v44)
        {
          v45 = v44;
          v46 = *(_QWORD *)v87;
          while (2)
          {
            for (j = 0; j != v45; ++j)
            {
              if (*(_QWORD *)v87 != v46)
                objc_enumerationMutation(v43);
              v48 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * j);
              if (objc_msgSend(v48, "isEmojiInputMode"))
              {
                v51 = v48;

                v25 = v51;
                goto LABEL_44;
              }
            }
            v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v86, v97, 16);
            if (v45)
              continue;
            break;
          }
        }
LABEL_44:
        v12 = v42;
        v29 = v43;
      }
      else
      {
        objc_msgSend(v25, "identifier");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "hasPrefix:", CFSTR("emoji"));

        if (v31)
        {
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v32 = v81;
          v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v90, v98, 16);
          if (v33)
          {
            v34 = v33;
            v35 = *(_QWORD *)v91;
            v78 = v23;
            while (2)
            {
              v36 = 0;
              v37 = v25;
              do
              {
                if (*(_QWORD *)v91 != v35)
                  objc_enumerationMutation(v32);
                v25 = *(id *)(*((_QWORD *)&v90 + 1) + 8 * v36);

                objc_msgSend(v25, "identifier");
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                v39 = objc_msgSend(v38, "hasPrefix:", CFSTR("emoji"));

                if (!v39)
                {
                  v23 = v78;
                  goto LABEL_47;
                }
                ++v36;
                v37 = v25;
              }
              while (v34 != v36);
              v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v90, v98, 16);
              v23 = v78;
              if (v34)
                continue;
              break;
            }
          }

          v25 = 0;
LABEL_47:

          v12 = v80;
        }
        v29 = v81;
        objc_msgSend(v25, "identifier");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = objc_msgSend(v52, "hasPrefix:", CFSTR("emoji"));

        if (!v53)
          goto LABEL_51;
        +[UIKeyboardInputMode intlInputMode](UIKeyboardInputMode, "intlInputMode");
        v54 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v81, "arrayByAddingObject:", v54);
        v55 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "identifiersFromInputModes:", v55);
        v43 = (id)objc_claimAutoreleasedReturnValue();
        UIKeyboardSetActiveInputModes(v43);
        v25 = (id)v54;
        v29 = (void *)v55;
      }

      goto LABEL_51;
    }
  }
}

- (void)setRestoresToEmojiInputMode
{
  self->_restoresToEmojiInputMode = 1;
}

- (void)updateInputManagerAutocapitalizationType
{
  id v3;

  -[TIKeyboardState setAutocapitalizationEnabled:](self->m_keyboardState, "setAutocapitalizationEnabled:", self->m_autocapitalizationPreference);
  objc_msgSend(MEMORY[0x1E0DBDD20], "traitsForUITextInputTraits:", self->m_traits);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[TIKeyboardState setTextInputTraits:](self->m_keyboardState, "setTextInputTraits:", v3);

}

- (void)notifyShiftState
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  int v5;
  int v6;
  id v7;
  _BOOL4 v8;
  id v9;
  uint64_t v10;
  void *v11;
  _BOOL4 v12;
  TIKeyboardState *m_keyboardState;
  uint64_t v14;
  int v15;
  id v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  char v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD v30[4];
  id v31;
  int v32;
  int v33;
  id location;

  -[_UIKeyboardStateManager callLayoutSetShift:](self, "callLayoutSetShift:", self->m_shift);
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v5 = objc_msgSend(WeakRetained, "hasLanguageIndicator");

  if (v5)
    -[_UIKeyboardStateManager updateInputModeIndicatorOnSingleKeyOnly:preserveIfPossible:](self, "updateInputModeIndicatorOnSingleKeyOnly:preserveIfPossible:", 0, 1);
  -[_UIKeyboardStateManager callLayoutSetAutoshift:](self, "callLayoutSetAutoshift:", self->m_autoshift);
  -[_UIKeyboardStateManager callLayoutUpdateLocalizedKeys](self, "callLayoutUpdateLocalizedKeys");
  v6 = -[TIKeyboardState shiftState](self->m_keyboardState, "shiftState");
  if (self->m_shiftLocked && !-[_UIKeyboardStateManager isMinimized](self, "isMinimized"))
  {
LABEL_7:
    v9 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v9, "layout");
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = (void *)v10;
      v12 = -[_UIKeyboardStateManager callLayoutIsShiftKeyBeingHeld](self, "callLayoutIsShiftKeyBeingHeld");

      if (v12)
      {
        m_keyboardState = self->m_keyboardState;
LABEL_14:
        v14 = 1;
        goto LABEL_17;
      }
    }
    else
    {

    }
    m_keyboardState = self->m_keyboardState;
    v14 = 3;
    goto LABEL_17;
  }
  v7 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  if ((objc_msgSend(v7, "isCapsLockSignOn") & 1) != 0)
  {
    v8 = -[_UIKeyboardStateManager isMinimized](self, "isMinimized");

    if (v8)
      goto LABEL_7;
  }
  else
  {

  }
  if (!self->m_autoshift)
  {
    m_keyboardState = self->m_keyboardState;
    if (!self->m_shift)
    {
      v14 = 0;
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  m_keyboardState = self->m_keyboardState;
  v14 = 2;
LABEL_17:
  -[TIKeyboardState setShiftState:](m_keyboardState, "setShiftState:", v14);
  -[_UIKeyboardStateManager updateKeyboardConfigurations](self, "updateKeyboardConfigurations");
  v15 = -[TIKeyboardState shiftState](self->m_keyboardState, "shiftState");
  v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v16, "layout");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isAlphabeticPlane");

  if (v15 != v6 && v18)
  {
    if (-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists"))
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "updateAfterShiftStateChange");

    }
    if (-[TIKeyboardState longPredictionListEnabled](self->m_keyboardState, "longPredictionListEnabled"))
    {
      if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
      {
        if (!-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists")
          || (-[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController"),
              v20 = (void *)objc_claimAutoreleasedReturnValue(),
              v21 = objc_msgSend(v20, "hasAutocorrection"),
              v20,
              (v21 & 1) == 0))
        {
          -[_UIKeyboardStateManager generateCandidates](self, "generateCandidates");
        }
      }
    }
  }
  if (v15 != v6)
  {
    v22 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v22, "layout");
    v23 = objc_claimAutoreleasedReturnValue();
    if (v23)
    {
      v24 = (void *)v23;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "hasAsyncCapableInputDelegate");

      if (v26)
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_initWeak(&location, v27);

        LODWORD(v27) = -[TIKeyboardState shiftState](self->m_keyboardState, "shiftState");
        -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 3221225472;
        v30[2] = __43___UIKeyboardStateManager_notifyShiftState__block_invoke;
        v30[3] = &unk_1E16BB7B8;
        objc_copyWeak(&v31, &location);
        v32 = v6;
        v33 = (int)v27;
        objc_msgSend(v28, "addTask:", v30);

        objc_destroyWeak(&v31);
        objc_destroyWeak(&location);
      }
    }
    else
    {

    }
  }
  v29 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v29, "setCapsLockSign");

}

- (void)updateShiftState
{
  uint64_t v3;
  void *v4;
  BOOL v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  _BOOL4 v13;
  id v14;
  uint64_t v15;
  void *v16;
  _BOOL4 v17;
  BOOL m_disableAutocapitalization;
  void *v19;
  void *v20;
  void *v21;
  int64_t v22;
  void *v23;
  unsigned int v24;
  id v25;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v25 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "keyInputDelegate");
  v3 = objc_claimAutoreleasedReturnValue();
  if (!v3)
  {

    return;
  }
  v4 = (void *)v3;
  v5 = -[_UIKeyboardStateManager suppressUpdateShiftState](self, "suppressUpdateShiftState");

  if (v5)
    return;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    if (-[_UIKeyboardStateManager noContent](self, "noContent"))
    {
      -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "documentState");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "documentState");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v9)
        return;
    }
  }
  v10 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v10, "layout");
  v11 = objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = -[_UIKeyboardStateManager callLayoutIsShiftKeyPlaneChooser](self, "callLayoutIsShiftKeyPlaneChooser");

    if (v13)
      goto LABEL_35;
  }
  else
  {

  }
  v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v14, "layout");
  v15 = objc_claimAutoreleasedReturnValue();
  if (!v15)
  {

    goto LABEL_18;
  }
  v16 = (void *)v15;
  v17 = -[_UIKeyboardStateManager callLayoutIsShiftKeyBeingHeld](self, "callLayoutIsShiftKeyBeingHeld");

  if (!v17)
  {
LABEL_18:
    self->m_shiftHeldDownNeedsUpdated = 0;
    if (-[_UIKeyboardStateManager keyboardIsKeyPad](self, "keyboardIsKeyPad"))
    {
      m_disableAutocapitalization = 1;
    }
    else if (-[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents"))
    {
      m_disableAutocapitalization = self->m_disableAutocapitalization;
    }
    else
    {
      m_disableAutocapitalization = 0;
    }
    if (!self->m_autocapitalizationPreference || self->m_shiftPreventAutoshift)
      goto LABEL_35;
    if (self->m_shiftLocked)
      m_disableAutocapitalization = 1;
    if (m_disableAutocapitalization
      || -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry")
      && !-[UITextInputTraits displaySecureTextUsingPlainText](self->m_traits, "displaySecureTextUsingPlainText"))
    {
      goto LABEL_35;
    }
    if (!-[_UIKeyboardStateManager callLayoutUsesAutoShift](self, "callLayoutUsesAutoShift")
      || -[UITextInputTraits autocapitalizationType](self->m_traits, "autocapitalizationType") == 1
      && (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
          v19 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v19, "markedTextRange"),
          v20 = (void *)objc_claimAutoreleasedReturnValue(),
          v20,
          v19,
          v20))
    {
      *(_WORD *)&self->m_autoshift = 0;
    }
    else
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        self->m_autoshift = 0;
        v22 = -[UITextInputTraits autocapitalizationType](self->m_traits, "autocapitalizationType");
        if (v22 == 1)
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "_characterBeforeCaretSelection");

          if ((v24 > 0x20 || ((1 << v24) & 0x100000401) == 0) && v24 != 160)
            goto LABEL_34;
        }
        else if (v22 != 3
               && (v22 != 2
                || !-[_UIKeyboardStateManager isSelectionAtSentenceAutoshiftBoundary:](self, "isSelectionAtSentenceAutoshiftBoundary:", 1)))
        {
          goto LABEL_34;
        }
        *(_WORD *)&self->m_autoshift = 257;
      }
    }
LABEL_34:
    -[_UIKeyboardStateManager notifyShiftState](self, "notifyShiftState");
    -[_UIKeyboardStateManager _forwardNeededShiftStatesToDestination](self, "_forwardNeededShiftStatesToDestination");
    return;
  }
  if (self->m_shift && !self->m_shiftHeldDownNeedsUpdated)
  {
    self->m_shiftHeldDownNeedsUpdated = 1;
LABEL_35:
    -[_UIKeyboardStateManager notifyShiftState](self, "notifyShiftState");
  }
}

- (void)_forwardNeededShiftStatesToDestination
{
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    WeakRetained = objc_loadWeakRetained((id *)algn_1ECD7D228);
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "keyInputDelegate");
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (self->m_shift != byte_1ECD7D1E1
      || self->m_autoshift != byte_1ECD7D1E2
      || WeakRetained != v5
      || self->m_shiftLocked != byte_1ECD7D1E3)
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = CFSTR("shift");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->m_shift);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = v7;
      v13[1] = CFSTR("autoShift");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->m_autoshift);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v14[1] = v8;
      v13[2] = CFSTR("shiftLocked");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->m_shiftLocked);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14[2] = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "forwardKeyboardOperation:object:", sel_setShiftStatesNeededInDestination_autoShifted_shiftLocked_, v10);

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "keyInputDelegate");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_storeWeak((id *)algn_1ECD7D228, v12);

      byte_1ECD7D1E1 = self->m_shift;
      byte_1ECD7D1E2 = self->m_autoshift;
      byte_1ECD7D1E3 = self->m_shiftLocked;
    }
  }
}

- (BOOL)canPasteImage
{
  BOOL result;

  if (!self->m_needsPasteSupportUpdate)
    return self->m_delegateSupportsImagePaste;
  result = -[_UIKeyboardStateManager uncachedDelegateSupportsImagePaste](self, "uncachedDelegateSupportsImagePaste");
  self->m_delegateSupportsImagePaste = result;
  self->m_needsPasteSupportUpdate = 0;
  return result;
}

- (BOOL)canInsertAdaptiveImageGlyph
{
  void *v2;
  void *v3;
  char v4;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateRespectingForwardingDelegate:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 0;
  if (+[UIKeyboard isRemoteEmojiCollectionViewEnabled](UIKeyboard, "isRemoteEmojiCollectionViewEnabled"))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v4 = objc_msgSend(v3, "supportsAdaptiveImageGlyph");
    else
      v4 = 0;
  }

  return v4;
}

- (BOOL)canInsertEmojiImageTextAttachment
{
  void *v2;
  void *v3;
  char v4;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "delegateRespectingForwardingDelegate:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 0;
  if (+[UIKeyboard isRemoteEmojiCollectionViewEnabled](UIKeyboard, "isRemoteEmojiCollectionViewEnabled"))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v4 = objc_msgSend(v3, "supportsEmojiImageTextAttachments");
    else
      v4 = 0;
  }

  return v4;
}

- (BOOL)isSelectionAtSentenceAutoshiftBoundary:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;

  v3 = a3;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5 && v3)
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "nextInputWouldStartSentence");

  }
  else
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "_characterInRelationToRangedSelection:", 0xFFFFFFFFLL);

    v7 = (v9 & 0xFFFFFF7F) == 32;
    if ((v9 & 0xFFFFFF7F) != 0x20)
      goto LABEL_22;
    v10 = 4294967294;
    v11 = -1;
    do
    {
      ++v11;
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v12, "_characterInRelationToRangedSelection:", v10);

      v10 = (v10 - 1);
    }
    while ((v9 & 0xFFFFFF7F) == 0x20 && v11 < 2);
    if (v11 > 1)
    {
      return 1;
    }
    else
    {
LABEL_22:
      if (v9 > 0x3F)
        return v9 == 161 || v9 == 191;
      if (((1 << v9) & 0x8000400200000000) == 0)
      {
        v7 = 1;
        if (((1 << v9) & 0x401) == 0)
          return v9 == 161 || v9 == 191;
      }
    }
  }
  return v7;
}

- (BOOL)nextInputWouldStartSentence
{
  void *v3;
  void *v4;
  char v5;

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    return 0;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "nextInputWouldStartSentence");

  return v5;
}

- (void)setShiftOffIfNeeded
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  id v10;
  uint64_t v11;
  void *v12;
  BOOL v13;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5 && !self->m_shiftLocked)
  {
    v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v6, "layout");
    v7 = objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = (void *)v7;
      v9 = -[_UIKeyboardStateManager callLayoutIsShiftKeyBeingHeld](self, "callLayoutIsShiftKeyBeingHeld");

      if (v9)
        return;
    }
    else
    {

    }
    v10 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v10, "layout");
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = (void *)v11;
      v13 = -[_UIKeyboardStateManager callLayoutIsShiftKeyPlaneChooser](self, "callLayoutIsShiftKeyPlaneChooser");

      if (v13)
        return;
    }
    else
    {

    }
    -[_UIKeyboardStateManager setShift:](self, "setShift:", 0);
    -[_UIKeyboardStateManager setShiftPreventAutoshift:](self, "setShiftPreventAutoshift:", 0);
  }
}

- (void)toggleShift
{
  -[_UIKeyboardStateManager setShift:autoshift:](self, "setShift:autoshift:", !self->m_shift, 0);
}

- (void)setShift:(BOOL)a3
{
  -[_UIKeyboardStateManager setShift:autoshift:](self, "setShift:autoshift:", a3, 0);
}

- (void)setShift:(BOOL)a3 autoshift:(BOOL)a4
{
  if ((!a4 || -[_UIKeyboardStateManager callLayoutUsesAutoShift](self, "callLayoutUsesAutoShift"))
    && !self->m_settingShift)
  {
    self->m_settingShift = 1;
    self->m_shift = a3;
    self->m_autoshift = a4;
    if (!a3)
      self->m_shiftLocked = 0;
    -[_UIKeyboardStateManager setShiftNeedsUpdate](self, "setShiftNeedsUpdate");
    self->m_settingShift = 0;
    -[_UIKeyboardStateManager _forwardNeededShiftStatesToDestination](self, "_forwardNeededShiftStatesToDestination");
  }
}

- (void)setShiftPreventAutoshift:(BOOL)a3
{
  self->m_shiftPreventAutoshift = a3;
  -[_UIKeyboardStateManager setShiftNeedsUpdate](self, "setShiftNeedsUpdate");
}

- (void)setShiftNeedsUpdate
{
  id WeakRetained;

  self->m_shiftNeedsUpdate = 1;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateObserverState");

}

- (void)_setShiftNeedsUpdate:(BOOL)a3
{
  self->m_shiftNeedsUpdate = a3;
}

- (void)setShiftLocked:(BOOL)a3
{
  if (self->m_shiftLockedEnabled)
  {
    self->m_shiftLocked = a3;
    if (a3)
      -[_UIKeyboardStateManager setShift:autoshift:](self, "setShift:autoshift:", 1, 0);
    else
      -[_UIKeyboardStateManager _forwardNeededShiftStatesToDestination](self, "_forwardNeededShiftStatesToDestination");
  }
}

- (void)setShiftLockedForced:(BOOL)a3
{
  self->m_shiftLocked = a3;
  if (a3)
    -[_UIKeyboardStateManager setShift:autoshift:](self, "setShift:autoshift:", 1, 0);
}

- (BOOL)isShifted
{
  return self->m_shift;
}

- (BOOL)isAutoShifted
{
  return self->m_autoshift;
}

- (BOOL)isShiftLocked
{
  return self->m_shiftLocked;
}

- (void)setShiftStatesNeededInDestination:(BOOL)a3 autoShifted:(BOOL)a4 shiftLocked:(BOOL)a5
{
  id WeakRetained;
  int v10;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v10 = objc_msgSend(WeakRetained, "keyboardLayoutIsInAnotherProcess");

  if (v10)
  {
    self->m_shift = a3;
    self->m_autoshift = a4;
    self->m_shiftLocked = a5;
  }
}

- (void)updateShiftStateAfterAsyncSelectionChange
{
  if (-[UITextInputTraits autocapitalizationType](self->m_traits, "autocapitalizationType") == 1
    && !-[_UIKeyboardStateManager isShiftLocked](self, "isShiftLocked"))
  {
    -[_UIKeyboardStateManager clearShiftState](self, "clearShiftState");
  }
}

- (BOOL)shiftLockedEnabled
{
  return self->m_shiftLockedEnabled;
}

- (BOOL)isCapsLockASCIIToggle
{
  void *v3;
  void *v4;
  BOOL v5;

  if (!-[_UIKeyboardStateManager isCapsLockSwitchEnabled](self, "isCapsLockSwitchEnabled"))
    return 0;
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "inputModeForASCIIToggleWithTraits:", self->m_traits);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 != 0;

  return v5;
}

- (void)unsetDidUpdateCapsLockLanguageSwitchSetting
{
  self->m_didUpdateCapsLockLanguageSwitchSetting = 0;
}

- (BOOL)isCapsLockSwitchEnabled
{
  void *v3;
  void *v4;
  void *v5;
  char m_shouldEnableCapsLockLanguageSwitchByDefault;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char HasLanguageSwitchLabel;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferencesActions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "valueForPreferenceKey:", *MEMORY[0x1E0DBDF78]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    if (self->m_didUpdateCapsLockLanguageSwitchSetting)
    {
LABEL_10:
      m_shouldEnableCapsLockLanguageSwitchByDefault = self->m_shouldEnableCapsLockLanguageSwitchByDefault;
      goto LABEL_11;
    }
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", &unk_1E1A92C30);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x1E0C99DC8];
    objc_msgSend(MEMORY[0x1E0C99DC8], "_deviceLanguage");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localeWithLocaleIdentifier:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "languageCode");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v7, "containsObject:", v11) & 1) != 0)
    {
      HasLanguageSwitchLabel = 1;
    }
    else
    {
      if (self->m_shouldEnableCapsLockLanguageSwitchByDefault)
      {
LABEL_9:
        self->m_didUpdateCapsLockLanguageSwitchSetting = 1;

        goto LABEL_10;
      }
      HasLanguageSwitchLabel = BKSHIDServicesCapsLockKeyHasLanguageSwitchLabel();
    }
    self->m_shouldEnableCapsLockLanguageSwitchByDefault = HasLanguageSwitchLabel;
    goto LABEL_9;
  }
  m_shouldEnableCapsLockLanguageSwitchByDefault = objc_msgSend(v5, "BOOLValue");
LABEL_11:

  return m_shouldEnableCapsLockLanguageSwitchByDefault;
}

- (void)clearShiftState
{
  id WeakRetained;
  int v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v4 = objc_msgSend(WeakRetained, "keyboardLayoutIsInAnotherProcess");

  if (v4)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "forwardInputDestinationEventToUIHost:", sel_clearShiftState);

  }
  else
  {
    -[_UIKeyboardStateManager setShift:](self, "setShift:", 0);
    -[_UIKeyboardStateManager setShiftPreventAutoshift:](self, "setShiftPreventAutoshift:", 0);
  }
}

- (void)forceShiftUpdate
{
  -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
  self->m_shiftNeedsUpdate = 0;
}

- (void)forceShiftUpdateIfKeyboardStateChanged
{
  void *v3;

  -[_UIKeyboardStateManager changedDelegate](self, "changedDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
    self->m_shiftNeedsUpdate = 0;
  }
}

- (BOOL)shouldSkipCandidateSelection
{
  return -[TIKeyboardState shouldSkipCandidateSelection](self->m_keyboardState, "shouldSkipCandidateSelection");
}

- (void)setShouldSkipCandidateSelection:(BOOL)a3
{
  -[_UIKeyboardStateManager setShouldSkipCandidateSelection:userInitiated:](self, "setShouldSkipCandidateSelection:userInitiated:", a3, 1);
}

- (void)setShouldSkipCandidateSelection:(BOOL)a3 userInitiated:(BOOL)a4
{
  _BOOL4 v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v4 = a4;
  v6 = -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry") | a3;
  if (v4
    && (_DWORD)v6
    && (-[TIKeyboardState shouldSkipCandidateSelection](self->m_keyboardState, "shouldSkipCandidateSelection") & 1) == 0
    && -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
  {
    -[_UIKeyboardStateManager updatedKeyBehaviors](self, "updatedKeyBehaviors");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "returnKeyBehavior");

    if (v8 == 10)
      v9 = -[_UIKeyboardStateManager acceptInlineCandidate](self, "acceptInlineCandidate");
    else
      -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](self, "acceptAutocorrectionWithCompletionHandler:", 0);
  }
  -[TIKeyboardState setShouldSkipCandidateSelection:](self->m_keyboardState, "setShouldSkipCandidateSelection:", v6);
}

- (UIKeyboardAutocorrectionController)autocorrectionController
{
  return self->m_autocorrectionController;
}

- (void)setInputManagerState:(id)a3
{
  TIKeyboardInputManagerState *v5;
  TIKeyboardInputManagerState *m_inputManagerState;
  id *p_m_inputManagerState;
  char v8;
  int v9;
  int v10;
  int m_usesCandidateSelection;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  id WeakRetained;
  TIKeyboardInputManagerState *v17;

  v5 = (TIKeyboardInputManagerState *)a3;
  m_inputManagerState = self->m_inputManagerState;
  if (m_inputManagerState == v5)
    goto LABEL_14;
  p_m_inputManagerState = (id *)&self->m_inputManagerState;
  v17 = v5;
  v8 = -[TIKeyboardInputManagerState usesContinuousPath](m_inputManagerState, "usesContinuousPath");
  v9 = -[TIKeyboardInputManagerState supportsSetPhraseBoundary](self->m_inputManagerState, "supportsSetPhraseBoundary");
  v10 = -[TIKeyboardInputManagerState supportsSetPhraseBoundary](v17, "supportsSetPhraseBoundary");
  objc_storeStrong((id *)&self->m_inputManagerState, a3);
  if (-[TIKeyboardState longPredictionListEnabled](self->m_keyboardState, "longPredictionListEnabled"))
  {
    if (self->m_usesCandidateSelection)
      goto LABEL_9;
    self->m_usesCandidateSelection = 1;
  }
  else
  {
    if (!*p_m_inputManagerState)
      goto LABEL_9;
    m_usesCandidateSelection = self->m_usesCandidateSelection;
    if (m_usesCandidateSelection == objc_msgSend(*p_m_inputManagerState, "usesCandidateSelection"))
      goto LABEL_9;
    self->m_usesCandidateSelection = -[TIKeyboardInputManagerState usesCandidateSelection](self->m_inputManagerState, "usesCandidateSelection");
  }
  -[_UIKeyboardStateManager updateShowCandidateBar](self, "updateShowCandidateBar");
LABEL_9:
  v12 = v9 ^ v10;
  -[TISmartPunctuationController setAutoQuoteType:](self->m_smartPunctuationController, "setAutoQuoteType:", -[TIKeyboardInputManagerState autoquoteType](self->m_inputManagerState, "autoquoteType"));
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "currentInputMode");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "primaryLanguage");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager updateSmartPunctuationOptionsForLocaleIdentifier:](self, "updateSmartPunctuationOptionsForLocaleIdentifier:", v15);

  if ((v8 & 1) == 0 && objc_msgSend(*p_m_inputManagerState, "usesContinuousPath"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "presentContinuousPathIntroductionView");

  }
  v5 = v17;
  if (v12)
  {
    -[_UIKeyboardStateManager notifyInputSourceStateChangeIfNeeded](self, "notifyInputSourceStateChangeIfNeeded");
    v5 = v17;
  }
LABEL_14:

}

- (void)updateShowCandidateBar
{
  -[_UIKeyboardStateManager setShowsCandidateBar:](self, "setShowsCandidateBar:", -[_UIKeyboardStateManager shouldShowCandidateBar](self, "shouldShowCandidateBar"));
}

- (BOOL)usesCandidateSelection
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "rtiInputSourceState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "rtiInputSourceState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "usesCandidateSelection");

    return v7;
  }
  if (self->m_usesCandidateSelection)
  {
    if ((UIKeyboardNeverShowCandidateBarForCurrentInputMode() & 1) != 0)
      return 0;
  }
  else if ((UIKeyboardAlwaysShowCandidateBarForCurrentInputMode() & 1) == 0)
  {
    return 0;
  }
  return -[TIKeyboardState suppressingCandidateSelection](self->m_keyboardState, "suppressingCandidateSelection") ^ 1;
}

- (void)setUsesCandidateSelection:(BOOL)a3
{
  _BOOL4 v3;
  _BOOL4 v5;
  _BOOL8 v6;
  void *v7;
  int v8;

  v3 = a3;
  v5 = -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection");
  v6 = !v3;
  -[TIKeyboardState setSuppressingCandidateSelection:](self->m_keyboardState, "setSuppressingCandidateSelection:", v6);
  if (!v6)
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "usesCandidateSelection");

    if (((v5 | v8 ^ 1) & 1) == 0)
      -[_UIKeyboardStateManager clearInput](self, "clearInput");
  }
}

- (BOOL)usesContinuousPath
{
  return -[TIKeyboardInputManagerState usesContinuousPath](self->m_inputManagerState, "usesContinuousPath");
}

- (BOOL)usesContinuousPathProgressiveCandidates
{
  return -[TIKeyboardInputManagerState usesContinuousPathProgressiveCandidates](self->m_inputManagerState, "usesContinuousPathProgressiveCandidates");
}

- (void)setLayoutAllowsContinuousPath:(BOOL)a3
{
  self->m_layoutAllowsCP = a3;
}

- (BOOL)continuousPathUnderway
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "continuousPathUnderway");

  return v3;
}

- (BOOL)suppliesCompletions
{
  UIKeyboardCandidateList *m_candidateList;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  BOOL v8;
  BOOL v9;

  m_candidateList = self->m_candidateList;
  if (m_candidateList
    && -[UIKeyboardCandidateList isFloatingList](m_candidateList, "isFloatingList")
    && !-[_UIKeyboardStateManager canUseCandidateBarAsSupplementToInlineView](self, "canUseCandidateBarAsSupplementToInlineView"))
  {
    return 0;
  }
  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isSingleLineDocument");

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5)
  {
    if (objc_msgSend(v6, "suppressCompletionsForFieldEditor"))
    {
      v8 = -[TIKeyboardCandidateResultSet hasOnlySlottedCandidates](self->m_candidateResultSet, "hasOnlySlottedCandidates");
LABEL_10:
      v9 = v8;
      goto LABEL_11;
    }
  }
  else if ((objc_msgSend(v6, "suppliesCompletions") & 1) == 0)
  {
    v8 = -[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList");
    goto LABEL_10;
  }
  v9 = 1;
LABEL_11:

  return v9;
}

- (BOOL)supportsNumberKeySelection
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsNumberKeySelection");

  return v3;
}

- (BOOL)shouldUsePinyinStyleRowNavigation
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "usesPunctuationKeysForRowNavigation");

  return v3;
}

- (void)handleDeleteAsRepeat:(BOOL)a3 executionContext:(id)a4
{
  _BOOL8 v4;
  uint64_t v6;
  void *v7;
  id v8;

  v4 = a3;
  v8 = a4;
  if (!-[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents")
    || +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
    && -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    if (v4 && self->m_repeatDeleteWord)
    {
      v6 = 512;
    }
    else if (-[_UIKeyboardStateManager shouldUseAdaptiveDelete](self, "shouldUseAdaptiveDelete"))
    {
      v6 = 512;
    }
    else
    {
      v6 = 0;
    }
    -[_UIKeyboardStateManager deleteFromInputWithFlags:executionContext:](self, "deleteFromInputWithFlags:executionContext:", v6, v8);
  }
  else
  {
    -[_UIKeyboardStateManager physicalKeyboardEventWithInput:inputFlags:](self, "physicalKeyboardEventWithInput:inputFlags:", CFSTR("\x7F"), v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager _handleKeyEvent:executionContext:](self, "_handleKeyEvent:executionContext:", v7, v8);

  }
}

- (void)startDelayDeleteTimer
{
  -[_UIKeyboardStateManager touchDelayDeleteTimerWithThreshold:](self, "touchDelayDeleteTimerWithThreshold:", 0.1);
}

- (void)handleDeleteWithExecutionContext:(id)a3
{
  void *v4;
  int v5;
  id WeakRetained;
  void *v7;
  void *v8;
  double Current;
  double v10;
  id v11;
  id v12;

  v12 = a3;
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "canUndoAcceptedTextCompletion");

  if (v5)
  {
    -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
    -[_UIKeyboardStateManager setDeleteWordLastDelete:](self, "setDeleteWordLastDelete:", -*MEMORY[0x1E0C9ADE8]);
    -[_UIKeyboardStateManager setDeletedString:](self, "setDeletedString:", 0);
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "playDeleteKeyFeedbackIfNecessaryRepeat:rapid:", 0, 0);

    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "childWithContinuation:", &__block_literal_global_940);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "undoAcceptedTextCompletionExecutionContext:", v8);

  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
    -[_UIKeyboardStateManager deleteWordLastDelete](self, "deleteWordLastDelete");
    if (Current - v10 <= 1.0)
    {
      -[_UIKeyboardStateManager startDelayDeleteTimer](self, "startDelayDeleteTimer");
      -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
      objc_msgSend(v12, "returnExecutionToParent");
    }
    else
    {
      -[_UIKeyboardStateManager setDeleteWordLastDelete:](self, "setDeleteWordLastDelete:", -*MEMORY[0x1E0C9ADE8]);
      -[_UIKeyboardStateManager setDeletedString:](self, "setDeletedString:", 0);
      v11 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v11, "playDeleteKeyFeedbackIfNecessaryRepeat:rapid:", 0, 0);

      -[_UIKeyboardStateManager handleDeleteAsRepeat:executionContext:](self, "handleDeleteAsRepeat:executionContext:", 0, v12);
    }
  }

}

- (void)completeDelete
{
  -[_UIKeyboardStateManager generateCandidates](self, "generateCandidates");
  -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
  -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
  -[_UIKeyboardStateManager updateNoContentViews](self, "updateNoContentViews");
}

- (BOOL)shouldUseAdaptiveDelete
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  int v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "documentState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "documentState");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v5, "contextBeforeInput");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_lastGrapheme");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "containsString:", CFSTR("\n"));

  if ((v8 & 1) != 0)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v10, "languageSupportsAdaptiveDelete");

    if (v9)
    {
      +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "startRangeOfCurrentHypothesis");
      objc_msgSend(v5, "contextBeforeInput");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "stringByTrimmingCharactersInSet:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "length");

      if (v12 >= v16)
      {
        +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setStartRangeOfCurrentHypothesis:", 0x7FFFFFFFFFFFFFFFLL, 0);
        LOBYTE(v9) = 0;
      }
      else
      {
        +[UIDictationUtilities trackingPunctuations](UIDictationUtilities, "trackingPunctuations");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "contextBeforeInput");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "stringByTrimmingCharactersInSet:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "_lastGrapheme");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v17, "containsObject:", v21);

        +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v23, "shouldDeleteWordOnBackspaceTap") & (v22 ^ 1);
      }

    }
  }

  return v9;
}

- (void)handleDeleteWordWithExecutionContext:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id WeakRetained;
  id v8;

  v8 = a3;
  -[_UIKeyboardStateManager clearDelayDeleteTimer](self, "clearDelayDeleteTimer");
  -[_UIKeyboardStateManager deletedString](self, "deletedString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager deletedString](self, "deletedString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "insertText:", v6);

    -[_UIKeyboardStateManager setDeletedString:](self, "setDeletedString:", 0);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "playDeleteKeyFeedbackRepeat:rapid:", 0, 0);

  }
  -[_UIKeyboardStateManager deleteFromInputWithFlags:executionContext:](self, "deleteFromInputWithFlags:executionContext:", 512, v8);

}

- (void)handleDelete
{
  void *v4;
  int v5;
  void *v6;
  void *v7;
  _QWORD v8[5];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isMainThreadExecutingTask");

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("_UIKeyboardStateManager.m"), 10916, CFSTR("Received %s while performing another keyboard action."), "-[_UIKeyboardStateManager handleDelete]");

  }
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __39___UIKeyboardStateManager_handleDelete__block_invoke;
  v8[3] = &unk_1E16BAF98;
  v8[4] = self;
  objc_msgSend(v6, "addTask:", v8);

}

- (BOOL)canHandleDelete
{
  return !-[_UIKeyboardStateManager noContent](self, "noContent");
}

- (void)handleClearWithInsertBeforeAdvance:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "replaceRange:oldText:withText:forReplaceAction:", 0, 0, v4, 2);

}

- (void)handleClear
{
  void *v3;
  char v4;
  void *v5;
  void *v6;
  _QWORD v7[5];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isMainThreadExecutingTask");

  if ((v4 & 1) == 0)
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "waitUntilAllTasksAreFinished");

  }
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __38___UIKeyboardStateManager_handleClear__block_invoke;
  v7[3] = &unk_1E16BAF98;
  v7[4] = self;
  objc_msgSend(v6, "addTask:", v7);

}

- (void)handleClearWithExecutionContext:(id)a3
{
  void *v4;
  char isKindOfClass;
  void *v6;
  id v7;

  v7 = a3;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_clearButtonClicked:", 0);
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "replaceRange:oldText:withText:forReplaceAction:", 0, 0, &stru_1E16EDF20, 2);
  }

  objc_msgSend(v7, "returnExecutionToParent");
}

- (BOOL)handleMoveCursorToStartOfLine:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 testOnly:(BOOL)a5 savedHistory:(id)a6 force:(BOOL)a7 canHandleSelectableInputDelegateCommand:(id)a8 keyEvent:(id)a9
{
  _BOOL4 v10;
  _BOOL4 v12;
  id v15;
  uint64_t (**v16)(id, char *);
  id v17;
  BOOL v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t (**v21)(id, char *);
  id v22;
  id v23;
  BOOL v24;
  BOOL v25;
  void *v26;
  int v27;
  int v28;
  void *v29;
  char v30;
  _UIKeyboardStateManager *v32;
  _QWORD v33[5];
  id v34;
  BOOL v35;

  v10 = a7;
  v12 = a4;
  v15 = a6;
  v16 = (uint64_t (**)(id, char *))a8;
  v17 = a9;
  v18 = -[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText");
  if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v32 = self;
    v19 = v12;
    v20 = v10;
    v21 = v16;
    v22 = v17;
    v23 = v15;
    v24 = a5;
    v25 = a3;
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "supportsSetPhraseBoundary") ^ 1;

    a3 = v25;
    a5 = v24;
    v15 = v23;
    v17 = v22;
    v16 = v21;
    v10 = v20;
    v12 = v19;
    self = v32;
    if (!v18)
      goto LABEL_3;
LABEL_6:
    if (v10)
    {
      LOBYTE(v28) = 1;
      -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](self, "movePhraseBoundaryToDirection:granularity:", 1, 4);
      goto LABEL_16;
    }
LABEL_15:
    LOBYTE(v28) = 1;
    goto LABEL_16;
  }
  v27 = 0;
  if (v18)
    goto LABEL_6;
LABEL_3:
  if (((v12 | v27) & 1) != 0)
  {
    LOBYTE(v28) = !v12;
    goto LABEL_16;
  }
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "shouldRespectForwardingInputDelegate");

    if ((v30 & 1) == 0)
    {
      if (!a5)
        -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v17);
      goto LABEL_15;
    }
  }
  v28 = v16[2](v16, sel__moveToStartOfLine_withHistory_);
  if (v28 && !a5)
  {
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __158___UIKeyboardStateManager_handleMoveCursorToStartOfLine_beforePublicKeyCommands_testOnly_savedHistory_force_canHandleSelectableInputDelegateCommand_keyEvent___block_invoke;
    v33[3] = &unk_1E16B4008;
    v33[4] = self;
    v35 = a3;
    v34 = v15;
    -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v33);

  }
LABEL_16:

  return v28;
}

- (BOOL)handleMoveCursorToEndOfLine:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 testOnly:(BOOL)a5 savedHistory:(id)a6 force:(BOOL)a7 canHandleSelectableInputDelegateCommand:(id)a8 keyEvent:(id)a9
{
  _BOOL4 v10;
  _BOOL4 v12;
  id v15;
  uint64_t (**v16)(id, char *);
  id v17;
  BOOL v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t (**v21)(id, char *);
  id v22;
  id v23;
  BOOL v24;
  BOOL v25;
  void *v26;
  int v27;
  int v28;
  void *v30;
  char v31;
  _UIKeyboardStateManager *v32;
  _QWORD v33[5];
  id v34;
  BOOL v35;

  v10 = a7;
  v12 = a4;
  v15 = a6;
  v16 = (uint64_t (**)(id, char *))a8;
  v17 = a9;
  v18 = -[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText");
  if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v32 = self;
    v19 = v12;
    v20 = v10;
    v21 = v16;
    v22 = v17;
    v23 = v15;
    v24 = a5;
    v25 = a3;
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "supportsSetPhraseBoundary") ^ 1;

    a3 = v25;
    a5 = v24;
    v15 = v23;
    v17 = v22;
    v16 = v21;
    v10 = v20;
    v12 = v19;
    self = v32;
    if (!v18)
      goto LABEL_3;
LABEL_6:
    if (v10)
      -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](self, "movePhraseBoundaryToDirection:granularity:", 0, 4);
    goto LABEL_8;
  }
  v27 = 0;
  if (v18)
    goto LABEL_6;
LABEL_3:
  if (((v12 | v27) & 1) != 0)
  {
    LOBYTE(v28) = !v12;
    goto LABEL_9;
  }
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "shouldRespectForwardingInputDelegate");

    if ((v31 & 1) == 0)
    {
      if (!a5)
        -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v17);
LABEL_8:
      LOBYTE(v28) = 1;
      goto LABEL_9;
    }
  }
  v28 = v16[2](v16, sel__moveToEndOfLine_withHistory_);
  if (v28 && !a5)
  {
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __156___UIKeyboardStateManager_handleMoveCursorToEndOfLine_beforePublicKeyCommands_testOnly_savedHistory_force_canHandleSelectableInputDelegateCommand_keyEvent___block_invoke;
    v33[3] = &unk_1E16B4008;
    v33[4] = self;
    v35 = a3;
    v34 = v15;
    -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v33);

  }
LABEL_9:

  return v28;
}

- (void)forwardKeyboardEventBackToDestination:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "textOperations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setKeyEventForwardedFromInputUIHost:", 1);
  objc_msgSend(v5, "setCustomInfoType:", 0x1E17502E0);
  objc_msgSend(v5, "setCustomInfo:", v4);

  -[_UIKeyboardStateManager buildInputSourceState](self, "buildInputSourceState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setInputSourceState:", v6);

  objc_msgSend(v7, "flushOperations");
}

- (BOOL)handleHorizontalArrow:(BOOL)a3 shiftDown:(BOOL)a4 beforePublicKeyCommands:(BOOL)a5 testOnly:(BOOL)a6 isVerticalCandidate:(BOOL)a7 hasCandidatesForTypedInput:(BOOL)a8 shouldNavigateCandidateList:(BOOL)a9 canHandleInputDelegateCommand:(id)a10 savedHistory:(id)a11 keyCommandTypeHandled:(unint64_t *)a12 keyEvent:(id)a13
{
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v16;
  int v17;
  uint64_t (**v19)(id, char *);
  id v20;
  _BOOL4 v21;
  void *v22;
  int v23;
  UIKeyboardCandidateList *m_candidateList;
  uint64_t (**v25)(id, char *);
  uint64_t v26;
  _BOOL8 v27;
  _UIKeyboardStateManager *v28;
  void *v29;
  UIKeyboardCandidateList *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  void *v42;
  int IsDefaultRightToLeft;
  void *v44;
  uint64_t (*v45)(id, char *);
  void *v46;
  void *v47;
  _BOOL4 v49;
  id v50;
  _QWORD v51[5];
  id v52;
  BOOL v53;
  _QWORD v54[5];
  id v55;
  BOOL v56;

  v13 = a8;
  v14 = a7;
  v16 = a5;
  v49 = a4;
  v17 = a3;
  v19 = (uint64_t (**)(id, char *))a10;
  v50 = a11;
  v20 = a13;
  v21 = -[_UIKeyboardStateManager liveConversionEnabled](self, "liveConversionEnabled");
  if (v16)
  {
    if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
    {
      objc_msgSend(v20, "setKeyCommandHandlingBeforePublic:", 1);
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v23) = objc_msgSend(v22, "synchronousForwardKeyCommandsBeforePublicToUIHost:", v20);

LABEL_52:
      v25 = v19;
      goto LABEL_53;
    }
    if (!-[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText"))
    {
      LOBYTE(v23) = 0;
      goto LABEL_52;
    }
    goto LABEL_12;
  }
  if (!-[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText"))
  {
    if (v13)
    {
      if (a12)
        *a12 = 2;
      if (a6)
        goto LABEL_51;
      m_candidateList = self->m_candidateList;
      if (v14)
      {
        -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](m_candidateList, "showCandidateInForwardDirection:granularity:", v17 ^ 1u, 0);
LABEL_51:
        LOBYTE(v23) = 1;
        goto LABEL_52;
      }
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "currentInputMode");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "normalizedIdentifier");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](m_candidateList, "showCandidateInForwardDirection:granularity:", UIKeyboardInputModeIsDefaultRightToLeft(v36) ^ v17, 0);

    }
    else
    {
      if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
      {
        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v29, "supportsSetPhraseBoundary"))
        {

        }
        else
        {
          -[_UIKeyboardStateManager inlineCompletionAsMarkedText](self, "inlineCompletionAsMarkedText");
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v37)
            goto LABEL_51;
        }
      }
      if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = objc_msgSend(v38, "shouldRespectForwardingInputDelegate");

        if ((v39 & 1) == 0)
        {
          if (!a6)
            -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v20);
          goto LABEL_51;
        }
      }
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "currentInputMode");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "normalizedIdentifier");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      IsDefaultRightToLeft = UIKeyboardInputModeIsDefaultRightToLeft(v42);

      if (IsDefaultRightToLeft == v17
        || !-[_UIKeyboardStateManager cursorIsAtStartOfInlineCompletionMarkedText](self, "cursorIsAtStartOfInlineCompletionMarkedText"))
      {
        -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "removeTextCompletionPrompt");

        v25 = v19;
        v45 = v19[2];
        if (v17)
        {
          v23 = v45(v19, sel__moveRight_withHistory_);
          if (!v23 || a6)
            goto LABEL_53;
          v54[0] = MEMORY[0x1E0C809B0];
          v54[1] = 3221225472;
          v54[2] = __241___UIKeyboardStateManager_handleHorizontalArrow_shiftDown_beforePublicKeyCommands_testOnly_isVerticalCandidate_hasCandidatesForTypedInput_shouldNavigateCandidateList_canHandleInputDelegateCommand_savedHistory_keyCommandTypeHandled_keyEvent___block_invoke;
          v54[3] = &unk_1E16B4008;
          v54[4] = self;
          v56 = v49;
          v46 = v50;
          v55 = v50;
          -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v54);
          v47 = v55;
        }
        else
        {
          v23 = v45(v19, sel__moveLeft_withHistory_);
          if (!v23 || a6)
            goto LABEL_53;
          v51[0] = MEMORY[0x1E0C809B0];
          v51[1] = 3221225472;
          v51[2] = __241___UIKeyboardStateManager_handleHorizontalArrow_shiftDown_beforePublicKeyCommands_testOnly_isVerticalCandidate_hasCandidatesForTypedInput_shouldNavigateCandidateList_canHandleInputDelegateCommand_savedHistory_keyCommandTypeHandled_keyEvent___block_invoke_2;
          v51[3] = &unk_1E16B4008;
          v51[4] = self;
          v53 = v49;
          v46 = v50;
          v52 = v50;
          -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v51);
          v47 = v52;
        }

        goto LABEL_54;
      }
      -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "acceptTextCompletionWithInteraction:wordTerminator:", 4, 0);
    }

    goto LABEL_51;
  }
LABEL_12:
  if (v14)
  {
    if (a12)
      *a12 = 2;
    v25 = v19;
    if (!a6)
      -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](self->m_candidateList, "showCandidateInForwardDirection:granularity:", v17 ^ 1u, 0);
    goto LABEL_29;
  }
  v25 = v19;
  if (v21)
  {
    if (a12)
      *a12 = 2;
    if (a6)
      goto LABEL_29;
    v26 = v17 ^ 1u;
    v27 = v49;
    v28 = self;
    goto LABEL_28;
  }
  if (v49)
  {
    v26 = v17 ^ 1u;
    v28 = self;
    v27 = 0;
LABEL_28:
    -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](v28, "movePhraseBoundaryToDirection:granularity:", v26, v27);
LABEL_29:
    LOBYTE(v23) = 1;
LABEL_53:
    v46 = v50;
    goto LABEL_54;
  }
  if (a9)
  {
    if (!a6)
    {
      v30 = self->m_candidateList;
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "currentInputMode");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "normalizedIdentifier");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](v30, "showCandidateInForwardDirection:granularity:", UIKeyboardInputModeIsDefaultRightToLeft(v33) ^ v17, 0);

    }
    goto LABEL_29;
  }
  v46 = v50;
  if (v17)
  {
    -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](self, "movePhraseBoundaryToDirection:granularity:", 0, 0);
    LOBYTE(v23) = 1;
  }
  else
  {
    LOBYTE(v23) = 1;
    -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](self, "movePhraseBoundaryToDirection:granularity:", 1, 1);
  }
LABEL_54:

  return v23;
}

- (BOOL)handleKeyCommandsBeforePublicAsInputUIHost:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id WeakRetained;
  void *v8;
  BOOL v9;
  char v11;

  v4 = a3;
  objc_msgSend(v4, "_gsModifierFlags");
  -[_UIKeyboardStateManager liveConversionEnabled](self, "liveConversionEnabled");
  if (!self->m_candidateList
    || -[_UIKeyboardStateManager isPredictionViewControllerVisible](self, "isPredictionViewControllerVisible")
    || !-[UIKeyboardCandidateList hasCandidates](self->m_candidateList, "hasCandidates")
    || !-[TIKeyboardCandidateResultSet hasCandidates](self->m_candidateResultSet, "hasCandidates"))
  {
    goto LABEL_9;
  }
  -[TIKeyboardState inputForMarkedText](self->m_keyboardState, "inputForMarkedText");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "length"))
  {

  }
  else
  {
    v6 = -[UIKeyboardCandidateList currentIndex](self->m_candidateList, "currentIndex");

    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_9;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "candidateController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "inlineRectIsVertical");

LABEL_9:
  -[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText");
  if (-[_UIKeyboardStateManager handleInputSwitcherForKeyEvent:](self, "handleInputSwitcherForKeyEvent:", v4))
  {
    v9 = 1;
  }
  else
  {
    v11 = 0;
    v9 = -[_UIKeyboardStateManager handleKeyCommand:repeatOkay:options:](self, "handleKeyCommand:repeatOkay:options:", v4, &v11, 1) != 0;
  }

  return v9;
}

- (BOOL)handleInputSwitcherForKeyEvent:(id)a3
{
  id v4;
  void *v5;
  char v6;
  int v7;
  void *v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  int v15;

  v4 = a3;
  if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "synchronousForwardKeyCommandsBeforePublicToUIHost:", v4);

    goto LABEL_17;
  }
  v7 = objc_msgSend(v4, "_gsModifierFlags");
  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    goto LABEL_14;
  if (!objc_msgSend(v4, "_isGlobeKey"))
  {
    if ((v7 & 0x4000000) != 0)
      -[_UIKeyboardStateManager setPreviousGlobeKeyEvent:](self, "setPreviousGlobeKeyEvent:", 0);
    goto LABEL_14;
  }
  if (objc_msgSend(v4, "_isKeyDown"))
  {
    -[_UIKeyboardStateManager setPreviousGlobeKeyEvent:](self, "setPreviousGlobeKeyEvent:", v4);
    goto LABEL_16;
  }
  if (self->m_previousGlobeKeyEvent)
  {
    objc_msgSend(v4, "_hidEvent");
    BKSHIDEventGetBaseAttributes();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (objc_msgSend(v8, "options") & 0x80) == 0;

  }
  else
  {
    v9 = 1;
  }
  objc_msgSend(v4, "timestamp");
  v11 = v10;
  -[UIEvent timestamp](self->m_previousGlobeKeyEvent, "timestamp");
  v13 = v12;
  -[_UIKeyboardStateManager setPreviousGlobeKeyEvent:](self, "setPreviousGlobeKeyEvent:", 0);
  v6 = 0;
  if (!v9 && v11 - v13 <= 0.9)
  {
LABEL_14:
    -[_UIKeyboardStateManager showCursorAccessory](self, "showCursorAccessory");
    +[UIInputSwitcher sharedInstance](UIInputSwitcher, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "handleSwitchingKeyEvent:", v4);

    if (v15)
    {
      -[_UIKeyboardStateManager setCapsLockIfNeeded](self, "setCapsLockIfNeeded");
      v6 = 1;
      goto LABEL_17;
    }
LABEL_16:
    v6 = 0;
  }
LABEL_17:

  return v6;
}

- (BOOL)handleVerticalArrow:(BOOL)a3 shiftDown:(BOOL)a4 beforePublicKeyCommands:(BOOL)a5 testOnly:(BOOL)a6 isVerticalCandidate:(BOOL)a7 hasCandidatesForTypedInput:(BOOL)a8 inputDelegateCommandEnabled:(BOOL)a9 canHandleInputDelegateCommand:(id)a10 savedHistory:(id)a11 keyCommandTypeHandled:(unint64_t *)a12 keyEvent:(id)a13
{
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v17;
  uint64_t (**v19)(id, char *);
  id v20;
  id v21;
  _BOOL4 v22;
  void *v23;
  int v24;
  void *v25;
  char v26;
  void *v27;
  int v28;
  uint64_t v29;
  _BOOL8 v30;
  _UIKeyboardStateManager *v31;
  void *v32;
  int v33;
  _BOOL4 v35;
  _QWORD v36[5];
  id v37;
  BOOL v38;
  BOOL v39;

  v13 = a8;
  v14 = a7;
  v17 = a4;
  v35 = a3;
  v19 = (uint64_t (**)(id, char *))a10;
  v20 = a11;
  v21 = a13;
  v22 = -[_UIKeyboardStateManager liveConversionEnabled](self, "liveConversionEnabled");
  if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    if (!a6
      && -[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v24) = objc_msgSend(v23, "synchronousForwardKeyCommandsBeforePublicToUIHost:", v21);

      goto LABEL_32;
    }
    if (v14)
    {
      -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v27, "supportsSetPhraseBoundary");

      if (v28)
      {
        if (a6)
        {
LABEL_31:
          LOBYTE(v24) = 1;
          goto LABEL_32;
        }
        v29 = v22 & v17;
        v30 = !v35;
        v31 = self;
LABEL_28:
        -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](v31, "movePhraseBoundaryToDirection:granularity:", v30, v29);
        goto LABEL_31;
      }
    }
    if (!v13)
    {
      if (!v22)
        goto LABEL_31;
      -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "supportsSetPhraseBoundary");

      if (!v33)
        goto LABEL_31;
      if (a12)
        *a12 = 2;
      if (a6)
        goto LABEL_31;
      v30 = !v35;
      v31 = self;
      v29 = 4;
      goto LABEL_28;
    }
    if (a12)
      *a12 = 2;
    LOBYTE(v24) = 1;
    if (-[UIKeyboardCandidateList hasCandidates](self->m_candidateList, "hasCandidates") && !a6)
      -[UIKeyboardCandidateList showCandidateInForwardDirection:granularity:](self->m_candidateList, "showCandidateInForwardDirection:granularity:", v35, !v22);
  }
  else
  {
    LOBYTE(v24) = !a9;
    if (a9 && !a5)
    {
      if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "shouldRespectForwardingInputDelegate");

        if ((v26 & 1) == 0)
        {
          if (!a6)
            -[_UIKeyboardStateManager forwardKeyboardEventBackToDestination:](self, "forwardKeyboardEventBackToDestination:", v21);
          goto LABEL_31;
        }
      }
      v24 = v19[2](v19, sel__moveDown_withHistory_);
      if (v24 && !a6)
      {
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 3221225472;
        v36[2] = __239___UIKeyboardStateManager_handleVerticalArrow_shiftDown_beforePublicKeyCommands_testOnly_isVerticalCandidate_hasCandidatesForTypedInput_inputDelegateCommandEnabled_canHandleInputDelegateCommand_savedHistory_keyCommandTypeHandled_keyEvent___block_invoke;
        v36[3] = &unk_1E16B4E20;
        v38 = v35;
        v36[4] = self;
        v39 = v17;
        v37 = v20;
        -[_UIKeyboardStateManager performBlockWithTextInputChangesIgnoredForNonMacOS:](self, "performBlockWithTextInputChangesIgnoredForNonMacOS:", v36);

      }
    }
  }
LABEL_32:

  return v24;
}

- (BOOL)handleTabWithShift:(BOOL)a3
{
  return -[_UIKeyboardStateManager handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:](self, "handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:", a3, 0, 0, 0);
}

- (BOOL)handleMoveResponderWithShift:(BOOL)a3
{
  return -[_UIKeyboardStateManager handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:](self, "handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:", a3, 0, 1, 0);
}

- (BOOL)handleTabWithShift:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4
{
  return -[_UIKeyboardStateManager handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:](self, "handleTabWithShift:beforePublicKeyCommands:isMoveAction:testOnly:", a3, a4, 0, 0);
}

- (BOOL)inputUIHandleTabWithShift:(BOOL)a3 testOnly:(BOOL)a4
{
  _BOOL8 v5;
  void *v7;
  void *v8;
  char v9;
  BOOL v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;

  v5 = a3;
  -[_UIKeyboardStateManager candidateList](self, "candidateList");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[_UIKeyboardStateManager candidateList](self, "candidateList");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "handleTabKeyWithShift:", v5);

    if ((v9 & 1) != 0)
    {
      v10 = 1;
      goto LABEL_15;
    }
  }
  else
  {

  }
  if (-[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText"))
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "keyboardBehaviors");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager _keyboardBehaviorState](self, "_keyboardBehaviorState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "keyBehaviorsForState:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_msgSend(v14, "tabKeyBehavior") - 5;
    v10 = v15 > 0xFFFFFFFFFFFFFFFDLL;
    if (v15 >= 0xFFFFFFFFFFFFFFFELL && !a4)
    {
      -[_UIKeyboardStateManager candidateList](self, "candidateList");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        -[_UIKeyboardStateManager candidateList](self, "candidateList");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "showCandidateInForwardDirection:granularity:", v5 ^ 1, 0);

      }
      else if (-[_UIKeyboardStateManager liveConversionEnabled](self, "liveConversionEnabled"))
      {
        -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](self, "movePhraseBoundaryToDirection:granularity:", v5, 4);
      }
      v10 = 1;
    }

  }
  else
  {
    v10 = 0;
  }
LABEL_15:
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "hasPrompt");

  if (v19)
  {
    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 1;
    objc_msgSend(v20, "acceptTextCompletionWithInteraction:wordTerminator:", 1, 0);

  }
  return v10;
}

- (void)becomeFirstResponderAndMakeVisible:(BOOL)a3
{
  void *v5;
  void *v6;
  void *v7;
  UITextInputTraits *v8;
  UITextInputTraits *m_traitsForPreviousDelegate;
  UITextInputTraits *v10;
  id v11;

  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v5;
  if (a3)
    objc_msgSend(v5, "_previousKeyResponder");
  else
    objc_msgSend(v5, "_nextKeyResponder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    -[_UIKeyboardStateManager delegate](self, "delegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6 != v7)
    {
      -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
      v8 = (UITextInputTraits *)objc_claimAutoreleasedReturnValue();
      m_traitsForPreviousDelegate = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = v8;

      objc_msgSend(v6, "_becomeFirstResponderAndMakeVisible");
      v10 = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = 0;

    }
  }

}

- (BOOL)handleTabWithShift:(BOOL)a3 beforePublicKeyCommands:(BOOL)a4 isMoveAction:(BOOL)a5 testOnly:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL4 v8;
  _BOOL8 v9;
  UIPhysicalKeyboardEvent *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  _BOOL4 v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  UITextInputTraits *v28;
  UITextInputTraits *m_traitsForPreviousDelegate;

  v6 = a6;
  v8 = a4;
  v9 = a3;
  if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost") && v8)
  {
    v11 = objc_alloc_init(UIPhysicalKeyboardEvent);
    -[UIPhysicalKeyboardEvent setKeyCommandCode:](v11, "setKeyCommandCode:", 43);
    -[UIPhysicalKeyboardEvent setShiftDown:](v11, "setShiftDown:", v9);
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "synchronousForwardKeyCommandsBeforePublicToUIHost:", v11);

  }
  else
  {
    v13 = -[_UIKeyboardStateManager inputUIHandleTabWithShift:testOnly:](self, "inputUIHandleTabWithShift:testOnly:", v9, v6);
  }
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v14)
  {
    if ((objc_msgSend((id)UIApp, "_isSpringBoard") & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      +[UIWindow _applicationKeyWindow](UIWindow, "_applicationKeyWindow");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  objc_msgSend(v14, "_responderWindow");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  if (dyld_program_sdk_at_least() && v15)
  {
    +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "focusSystem");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v18 != 0;

  }
  if (((v13 | v16) & 1) != 0 || v8)
    goto LABEL_35;
  if (!+[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
  {
    if (v9)
    {
      objc_msgSend(v14, "_previousKeyResponder");
      v20 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!a5)
      {
        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
        v23 = objc_claimAutoreleasedReturnValue();
        if (v23)
        {
          v24 = (void *)v23;
          -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v25, "isSingleLineDocument");

          if (!v26)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
      }
      objc_msgSend(v14, "_nextKeyResponder");
      v20 = objc_claimAutoreleasedReturnValue();
    }
    v21 = (void *)v20;
    if (v20)
    {
      -[_UIKeyboardStateManager delegate](self, "delegate");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      LOBYTE(v13) = v21 != v27;
      if (v21 == v27 || v6)
        goto LABEL_34;
      -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
      v28 = (UITextInputTraits *)objc_claimAutoreleasedReturnValue();
      m_traitsForPreviousDelegate = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = v28;

      objc_msgSend(v21, "_becomeFirstResponderAndMakeVisible");
      v22 = self->m_traitsForPreviousDelegate;
      self->m_traitsForPreviousDelegate = 0;
      LOBYTE(v13) = 1;
      goto LABEL_31;
    }
LABEL_33:
    LOBYTE(v13) = 0;
    goto LABEL_34;
  }
  if (v9)
    v19 = -[_UIKeyboardStateManager hasPreviousKeyResponder](self, "hasPreviousKeyResponder");
  else
    v19 = -[_UIKeyboardStateManager hasNextKeyResponder](self, "hasNextKeyResponder");
  LOBYTE(v13) = v19;
  if (v19 && !v6)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "forwardKeyboardOperation:object:", sel_becomeFirstResponderAndMakeVisible_, v22);
LABEL_31:

LABEL_34:
  }
LABEL_35:

  return v13;
}

- (void)handleStringInput:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 executionContext:(id)a6
{
  id v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  uint64_t v15;
  id v16;

  v16 = a3;
  v10 = a5;
  v11 = a6;
  if (objc_msgSend(v16, "length"))
  {
    if (objc_msgSend(v16, "characterAtIndex:", 0) == 46
      && (unint64_t)objc_msgSend(v16, "length") >= 2)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "_characterBeforeCaretSelection");

      v14 = v16;
      if (v13 == 46)
      {
        objc_msgSend(v16, "substringFromIndex:", 1);
        v15 = objc_claimAutoreleasedReturnValue();

        v14 = (id)v15;
      }
    }
    else
    {
      v14 = v16;
    }
    v16 = v14;
    -[_UIKeyboardStateManager addInputString:withFlags:withInputManagerHint:executionContext:](self, "addInputString:withFlags:withInputManagerHint:executionContext:", v14, a4, v10, v11);
  }
  else
  {
    objc_msgSend(v11, "returnExecutionToParent");
  }

}

- (BOOL)acceptInputString:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;

  v4 = a3;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "acceptInputString:", v4);

  }
  else
  {
    v7 = 1;
  }

  return v7;
}

- (void)setPreviousInputString:(id)a3
{
  NSString *v4;
  NSString *m_previousInputString;

  v4 = (NSString *)objc_msgSend(a3, "copy");
  m_previousInputString = self->m_previousInputString;
  self->m_previousInputString = v4;

}

- (void)setPreviousGlobeKeyEvent:(id)a3
{
  UIPhysicalKeyboardEvent *v4;
  UIPhysicalKeyboardEvent *m_previousGlobeKeyEvent;

  v4 = (UIPhysicalKeyboardEvent *)objc_msgSend(a3, "_cloneEvent");
  m_previousGlobeKeyEvent = self->m_previousGlobeKeyEvent;
  self->m_previousGlobeKeyEvent = v4;

}

- (void)updateKeyboardStateForReplacingText:(id)a3 withText:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;

  v6 = a4;
  v7 = a3;
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "documentStateAfterReplacingText:withText:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v8);
}

- (void)updateKeyboardStateForInsertion:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (!-[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch")
    || (objc_msgSend(v6, "_containsEmojiOnly") & 1) == 0)
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "documentStateAfterInsertingText:", v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v5);

  }
  -[_UIKeyboardStateManager clearInputForMarkedText](self, "clearInputForMarkedText");

}

- (void)moveCursorByAmount:(int64_t)a3
{
  id v4;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_moveCurrentSelection:", a3);

}

- (void)deleteBackwardAndNotify:(BOOL)a3
{
  -[_UIKeyboardStateManager deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:](self, "deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:", a3, 1, 0);
}

- (void)deleteBackwardAndNotifyAtEnd:(BOOL)a3 deletionCount:(unint64_t)a4 reinsertTextInLoop:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v7;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v5 = a5;
  v7 = a3;
  +[UIDictationLandingView activeInstance](UIDictationLandingView, "activeInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "hasActivePlaceholder");

  if (v10)
  {
    +[UIDictationLandingView activeInstance](UIDictationLandingView, "activeInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stopLanding");

    +[UIDictationController activeInstance](UIDictationController, "activeInstance");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "cancelDictation");
  }
  else
  {
    if (+[UIDictationController isRunning](UIDictationController, "isRunning")
      && !+[UIDictationController isRunningInTypeAndTalkMode](UIDictationController, "isRunningInTypeAndTalkMode"))
    {
      +[UIDictationController activeInstance](UIDictationController, "activeInstance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "cancelDictation");

    }
    -[_UIKeyboardStateManager removeTextChoicePromptWithUnderline](self, "removeTextChoicePromptWithUnderline");
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (a4 < 2)
      objc_msgSend(v13, "_deleteBackwardAndNotify:reinsertText:", v7, v5);
    else
      objc_msgSend(v13, "_deleteBackwardWhileOverridingContextAndNotifyAtEnd:deletionCount:reinsertTextInLoop:", v7, a4, v5);
  }

}

- (unint64_t)textLengthToDeleteBeforeSelectedRangeForSmartDelete
{
  void *v2;
  unint64_t v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_textLengthToDeleteBeforeSelectedRangeForSmartDelete");

  return v3;
}

- (void)updateKeyboardStateForDeletion
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v3;
  if (v3)
  {
    objc_msgSend(v3, "documentState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "documentState");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contextBeforeInput");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "contextBeforeInput");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if (objc_msgSend(v6, "length") && !objc_msgSend(v6, "_isNewlineOrReturn"))
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "documentStateAfterDeletingBackward");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v8);

  }
  else
  {
    -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
    -[_UIKeyboardStateManager _requestInputManagerSync](self, "_requestInputManagerSync");
  }
  -[_UIKeyboardStateManager clearInputForMarkedText](self, "clearInputForMarkedText");

}

- (BOOL)_canDeleteForward
{
  void *v3;
  void *v4;
  char v5;
  void *v6;

  if (!-[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents"))
    return 1;
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_responderForEditing");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "canPerformAction:withSender:", sel__deleteForwardAndNotify_, 0) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "canHandleInputDelegateCommandAction:", 1);

  }
  return v5;
}

- (BOOL)deleteForwardAndNotify:(BOOL)a3
{
  return -[_UIKeyboardStateManager deleteForwardAndNotify:producedByDeleteInput:](self, "deleteForwardAndNotify:producedByDeleteInput:", a3, 0);
}

- (BOOL)deleteForwardAndNotify:(BOOL)a3 producedByDeleteInput:(BOOL)a4
{
  _BOOL8 v5;
  _BOOL4 v7;
  void *v8;
  int v9;
  void *v10;
  char v11;
  _QWORD v13[4];
  BOOL v14;

  v5 = a3;
  v7 = -[_UIKeyboardStateManager _canDeleteForward](self, "_canDeleteForward");
  if (v7)
  {
    if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      self->m_suppressingDocumentAssertions = 1;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "_deleteForwardAndNotify:", v5);

      LOBYTE(v7) = 0;
      self->m_suppressingDocumentAssertions = 0;
      if (v9)
      {
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 3221225472;
        v13[2] = __72___UIKeyboardStateManager_deleteForwardAndNotify_producedByDeleteInput___block_invoke;
        v13[3] = &__block_descriptor_33_e26_v16__0__TIKeyboardOutput_8l;
        v14 = a4;
        -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v13);
        LOBYTE(v7) = 1;
      }
    }
    else
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "_deleteForwardAndNotify:", v5);

      LOBYTE(v7) = v11;
    }
  }
  return v7;
}

- (void)deleteBackward
{
  -[_UIKeyboardStateManager deleteBackwardAndNotify:](self, "deleteBackwardAndNotify:", 1);
}

- (BOOL)isCallingInputDelegate
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "insideKeyInputDelegateCall");

  return v3;
}

- (BOOL)_handleKeyInputMethodCommandForEvent:(id)a3 canHandleAppKeyCommand:(BOOL)a4
{
  id v6;
  unint64_t v7;
  BOOL v8;
  void *v9;
  BOOL v10;
  void *v12;
  _QWORD v13[5];
  id v14;
  id v15;

  v6 = a3;
  v7 = -[_UIKeyboardStateManager _handleKeyCommandCommon:options:](self, "_handleKeyCommandCommon:options:", v6, 2);
  if (v7 == 2)
  {
    -[_UIKeyboardStateManager _handleKeyCommandCommon:options:](self, "_handleKeyCommandCommon:options:", v6, 0);
    v8 = 1;
    self->m_webEventWasHandledByInputManager = 1;
    goto LABEL_21;
  }
  if (v7 != 1 && (v7 || !a4))
  {
    objc_msgSend(v6, "_modifiedInput");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[_UIKeyboardStateManager _shouldEmitString:forKeyEvent:](self, "_shouldEmitString:forKeyEvent:", v9, v6)
      && -[_UIKeyboardStateManager _isValidKeyInput:](self, "_isValidKeyInput:", v9)
      && (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")
       || (objc_msgSend(v9, "_isNewlineOrReturn") & 1) == 0
       && (objc_msgSend(v9, "_isDelete") & 1) == 0
       && (objc_msgSend(v9, "isEqualToString:", CFSTR("\t")) & 1) == 0))
    {
      v10 = -[_UIKeyboardStateManager shouldAllowRepeatEvent:](self, "shouldAllowRepeatEvent:", v6);
      if (objc_msgSend(v6, "_isARepeat") && !v10)
      {
        v8 = 1;
        self->m_webEventWasHandledByInputManager = 1;
LABEL_20:

        goto LABEL_21;
      }
      if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
        && (-[TIKeyboardState longPredictionListEnabled](self->m_keyboardState, "longPredictionListEnabled") & 1) == 0)
      {
        -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 3221225472;
        v13[2] = __87___UIKeyboardStateManager__handleKeyInputMethodCommandForEvent_canHandleAppKeyCommand___block_invoke;
        v13[3] = &unk_1E16BB128;
        v13[4] = self;
        v14 = v9;
        v15 = v6;
        objc_msgSend(v12, "addTask:", v13);

        v8 = 1;
        self->m_webEventWasHandledByInputManager = 1;

        goto LABEL_20;
      }
    }
    v8 = 0;
    goto LABEL_20;
  }
  v8 = 0;
LABEL_21:

  return v8;
}

- (BOOL)handleKeyInputMethodCommandForCurrentEvent
{
  void *v3;
  uint64_t v4;
  void *v5;
  BOOL m_webEventWasHandledByInputManager;

  if (!self->m_webEventIsKeyDown)
    return 0;
  -[_UIKeyboardStateManager eventForCurrentWebEvent](self, "eventForCurrentWebEvent");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = objc_msgSend((id)UIApp, "_hasKeyCommandForKeyboardEvent:", v3);
    if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      self->m_webEventWasHandledAsKeyCommand = objc_msgSend(v5, "synchronousForwardKeyInputMethodCommandEventToUIHost:canHandleAppKeyCommand:", v3, v4);

      m_webEventWasHandledByInputManager = self->m_webEventWasHandledByInputManager;
    }
    else
    {
      m_webEventWasHandledByInputManager = -[_UIKeyboardStateManager _handleKeyInputMethodCommandForEvent:canHandleAppKeyCommand:](self, "_handleKeyInputMethodCommandForEvent:canHandleAppKeyCommand:", v3, v4);
      self->m_webEventWasHandledByInputManager = m_webEventWasHandledByInputManager;
    }
  }
  else
  {
    m_webEventWasHandledByInputManager = 0;
  }

  return m_webEventWasHandledByInputManager;
}

- (BOOL)handleKeyTextCommandForCurrentEvent
{
  BOOL m_webEventWasHandledAsKeyCommand;
  void *v5;
  void *v6;
  void *v7;

  if (self->m_webEventWasHandledAsKeyCommand || self->m_webEventWasHandledByInputManager)
    return 0;
  -[_UIKeyboardStateManager eventForCurrentWebEvent](self, "eventForCurrentWebEvent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "_isKeyDown"))
  {
    objc_msgSend((id)UIApp, "_keyCommandForKeyboardEvent:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "wantsPriorityOverSystemBehavior") & 1) != 0)
    {
      m_webEventWasHandledAsKeyCommand = 0;
    }
    else
    {
      self->m_inHandleKeyTextCommandForCurrentEvent = 1;
      if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
      {
        -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        self->m_webEventWasHandledAsKeyCommand = objc_msgSend(v7, "synchronousForwardKeyCommandsToUIHost:", v5);

        m_webEventWasHandledAsKeyCommand = self->m_webEventWasHandledAsKeyCommand;
      }
      else
      {
        m_webEventWasHandledAsKeyCommand = -[_UIKeyboardStateManager _handleKeyCommand:](self, "_handleKeyCommand:", v5);
        self->m_webEventWasHandledAsKeyCommand = m_webEventWasHandledAsKeyCommand;
      }
      self->m_inHandleKeyTextCommandForCurrentEvent = 0;
    }

  }
  else
  {
    m_webEventWasHandledAsKeyCommand = 0;
  }

  return m_webEventWasHandledAsKeyCommand;
}

- (BOOL)handleKeyAppCommandForCurrentEvent
{
  char v3;
  void *v5;
  void *v6;
  void *v7;

  if (self->m_webEventWasHandledAsKeyCommand || self->m_webEventWasHandledByInputManager)
    return 0;
  -[_UIKeyboardStateManager eventForCurrentWebEvent](self, "eventForCurrentWebEvent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "_isKeyDown"))
  {
    if (self->m_inHandleKeyAppCommandForCurrentEvent || self->m_inHandleKeyTextCommandForCurrentEvent)
    {
      v3 = 1;
    }
    else
    {
      objc_msgSend((id)UIApp, "_keyCommandForKeyboardEvent:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v6;
      if (v6
        && (objc_msgSend(v6, "wantsPriorityOverSystemBehavior") & 1) == 0
        && (objc_msgSend(v7, "_isLikelyToConflictWithTextInputForResponder:", 0) & 1) != 0)
      {
        v3 = 0;
      }
      else
      {
        self->m_inHandleKeyAppCommandForCurrentEvent = 1;
        v3 = objc_msgSend((id)UIApp, "_handleKeyCommandForKeyboardEvent:allowsRepeat:", v5, 0);
        self->m_webEventWasHandledAsKeyCommand = v3;
        self->m_inHandleKeyAppCommandForCurrentEvent = 0;
      }

    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

- (void)addInputString:(id)a3
{
  -[_UIKeyboardStateManager addInputString:withFlags:](self, "addInputString:withFlags:", a3, 0);
}

- (void)addInputString:(id)a3 fromVariantKey:(BOOL)a4
{
  uint64_t v4;

  if (a4)
    v4 = 2;
  else
    v4 = 0;
  -[_UIKeyboardStateManager addInputString:withFlags:](self, "addInputString:withFlags:", a3, v4);
}

- (id)inputEventForInputString:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BOOL8 v14;
  _BOOL8 m_autoshift;

  v4 = a3;
  v5 = objc_alloc_init(MEMORY[0x1E0DBDBF8]);
  if (-[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode"))
  {
    if (self->m_autoshift)
    {
      objc_msgSend(v5, "setAutoshifted:", 1);
      v6 = (void *)MEMORY[0x1E0C99DC8];
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "currentInputMode");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "languageWithRegion");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "localeWithLocaleIdentifier:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uppercaseStringWithLocale:", v10);
      v11 = objc_claimAutoreleasedReturnValue();

      v4 = (id)v11;
    }
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "uppercaseLetterCharacterSet");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v4, "rangeOfCharacterFromSet:", v12);

      v14 = v13 == 0;
    }
    else
    {
      v14 = 0;
    }
    objc_msgSend(v5, "setUppercase:", v14);
    if (objc_msgSend(v5, "isAutoshifted") && (objc_msgSend(v5, "isUppercase") & 1) == 0)
    {
      m_autoshift = 0;
      goto LABEL_12;
    }
  }
  else if (!-[_UIKeyboardStateManager callLayoutIgnoresShiftState](self, "callLayoutIgnoresShiftState"))
  {
    objc_msgSend(v5, "setUppercase:", self->m_shift);
    m_autoshift = self->m_autoshift;
LABEL_12:
    objc_msgSend(v5, "setAutoshifted:", m_autoshift);
  }
  objc_msgSend(v5, "setString:", v4);

  return v5;
}

- (void)updateDoubleSpacePeriodStateForCharacter:(unsigned int)a3
{
  if (self->m_doubleSpacePeriodWasAppliedInCurrentContext)
  {
    if (TICharEstablishesContextForDoubleSpacePeriod())
      self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
  }
}

- (void)updateDoubleSpacePeriodStateForString:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;

  v4 = a3;
  v5 = v4;
  if (self->m_doubleSpacePeriodWasAppliedInCurrentContext)
  {
    v9 = v4;
    v6 = objc_msgSend(v4, "length");
    v5 = v9;
    if (v6)
    {
      v7 = objc_msgSend(v9, "characterAtIndex:", 0);
      if (objc_msgSend(v9, "length") == 2 && (v7 & 0xFC00) == 0xD800)
      {
        v8 = objc_msgSend(v9, "characterAtIndex:", 1);
        if ((v8 & 0xFC00) == 0xDC00)
          v7 = (v8 + ((_DWORD)v7 << 10) - 56613888);
        else
          v7 = v7;
      }
      -[_UIKeyboardStateManager updateDoubleSpacePeriodStateForCharacter:](self, "updateDoubleSpacePeriodStateForCharacter:", v7);
      v5 = v9;
    }
  }

}

- (BOOL)willDoubleSpacePeriodForInputString:(id)a3 afterSpace:(BOOL)a4 elapsedTime:(double)a5
{
  _BOOL4 v6;
  id v8;
  BOOL v9;
  void *v10;
  char v11;
  void *v12;

  v6 = a4;
  v8 = a3;
  if (!self->m_doubleSpacePeriodPreference)
    goto LABEL_10;
  v9 = 0;
  if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry") || !v6)
    goto LABEL_11;
  if (!objc_msgSend(v8, "_isPlainSpace"))
    goto LABEL_10;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "nextInputWouldStartSentence");

  if ((v11 & 1) != 0
    || (-[_UIKeyboardStateManager inputDelegate](self, "inputDelegate"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v12, "_characterInRelationToCaretSelection:", 4294967294),
        v12,
        !TICharEstablishesContextForDoubleSpacePeriod()))
  {
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  v9 = 0;
  if (a5 <= 1.2 && !self->m_doubleSpacePeriodWasAppliedInCurrentContext)
  {
    v9 = 1;
    self->m_doubleSpacePeriodWasAppliedInCurrentContext = 1;
  }
LABEL_11:

  return v9;
}

- (BOOL)shouldDeleteAutospaceBeforeTerminator:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  BOOL v9;

  v4 = a3;
  if ((objc_msgSend(v4, "isEqualToString:", CFSTR(" ")) & 1) != 0)
    goto LABEL_5;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "shouldDeleteAutospaceBeforeTerminator:", v4);

  if ((v6 & 1) != 0)
    goto LABEL_5;
  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "keyboardType") != 7)
  {

    goto LABEL_8;
  }
  v8 = objc_msgSend(v4, "isEqualToString:", CFSTR("@"));

  if ((v8 & 1) == 0)
  {
LABEL_8:
    v9 = 0;
    goto LABEL_6;
  }
LABEL_5:
  v9 = 1;
LABEL_6:

  return v9;
}

- (id)handleDeleteAutospaceForInputString:(id)a3 afterSpace:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  id v7;

  v4 = a4;
  v6 = a3;
  if (-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists"))
  {
    if (!v4)
    {
LABEL_9:
      v7 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v7 = 0;
    if (!-[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList") || !v4)
      goto LABEL_10;
  }
  if (!self->m_didAutomaticallyInsertSpace
    || !-[_UIKeyboardStateManager shouldDeleteAutospaceBeforeTerminator:](self, "shouldDeleteAutospaceBeforeTerminator:", v6))
  {
    goto LABEL_9;
  }
  self->m_didAutomaticallyInsertSpace = 0;
  v7 = v6;
LABEL_10:

  return v7;
}

- (id)handleReplacement:(id)a3 forSpaceAndInput:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;

  v6 = a4;
  v7 = a3;
  v8 = objc_msgSend(v7, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v7, "length") - 1);
  objc_msgSend(v7, "substringWithRange:", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setString:", v10);

  objc_msgSend(v7, "substringToIndex:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v11, "isEqualToString:", CFSTR(" ")) & 1) == 0)
  {
    objc_msgSend(v6, "acceptedCandidate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v12)
    {
      objc_msgSend(MEMORY[0x1E0DBDBE8], "candidateWithCandidate:forInput:", v11, CFSTR(" "));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setAcceptedCandidate:", v13);

      if (objc_msgSend(v11, "length"))
      {
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __62___UIKeyboardStateManager_handleReplacement_forSpaceAndInput___block_invoke_2;
        v17[3] = &unk_1E16BB538;
        v14 = v6;
        v18 = v14;
        -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v17);
        objc_msgSend(v14, "acceptedCandidate");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager applyAutocorrection:](self, "applyAutocorrection:", v15);

      }
      else
      {
        -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", &__block_literal_global_959);
        -[_UIKeyboardStateManager deleteBackwardAndNotify:](self, "deleteBackwardAndNotify:", 0);
      }
    }
  }

  return v6;
}

- (BOOL)shouldAcceptCandidate:(id)a3 beforeInputString:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;

  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "candidate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "length") || objc_msgSend(v6, "slotID"))
  {

  }
  else
  {
    v20 = objc_msgSend(v6, "customInfoType");

    if (!v20)
      goto LABEL_5;
  }
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "shouldSuppressAutocorrectionWithTerminator:", v7);

  if ((v10 & 1) != 0)
  {
LABEL_5:
    v11 = 0;
    goto LABEL_12;
  }
  if ((objc_msgSend(v6, "isForShortcutConversion") & 1) == 0
    && objc_msgSend(v7, "length")
    && (objc_msgSend(v6, "input"), (v12 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v13 = (void *)v12;
    objc_msgSend(v6, "candidate");
    v14 = objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      v15 = (void *)v14;
      objc_msgSend(v6, "input");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "stringByAppendingString:", v7);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "candidate");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v18, "rangeOfString:options:", v17, 9) == 0x7FFFFFFFFFFFFFFFLL;

    }
    else
    {
      v11 = 1;
    }

  }
  else
  {
    v11 = 1;
  }
LABEL_12:

  return v11;
}

- (void)removeSpaceAfterEmojiForInputString:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v4 = a3;
  v5 = v4;
  if (self->m_didAutomaticallyInsertSpace)
  {
    v13 = v4;
    v6 = objc_msgSend(v4, "_containsEmoji");
    v5 = v13;
    if (v6)
    {
      -[_UIKeyboardStateManager documentState](self, "documentState");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "contextBeforeInput");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if ((unint64_t)objc_msgSend(v8, "length") >= 2)
      {
        objc_msgSend(v8, "substringFromIndex:", objc_msgSend(v8, "length") - 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v9, "_isPlainSpace"))
        {
          v10 = objc_msgSend(v8, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v8, "length") - 2);
          objc_msgSend(v8, "substringWithRange:", v10, v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v12, "_containsEmoji"))
            -[_UIKeyboardStateManager deleteBackwardAndNotify:](self, "deleteBackwardAndNotify:", 0);
        }
        else
        {
          v12 = v9;
        }

      }
      v5 = v13;
    }
  }

}

- (void)_scheduleInputAdditionOrDeletion:(id)a3
{
  void *v4;
  BOOL v5;
  void *v6;
  id v7;

  v7 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isMainThreadExecutingTask") & 1) != 0)
  {

  }
  else
  {
    v5 = -[_UIKeyboardStateManager delegateRequiresKeyEvents](self, "delegateRequiresKeyEvents");

    if (!v5)
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addTask:", v7);

      goto LABEL_6;
    }
  }
  -[_UIKeyboardStateManager setExternalTask:](self, "setExternalTask:", v7);
LABEL_6:

}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4
{
  id v6;
  id v7;
  _QWORD v8[5];
  id v9;
  unint64_t v10;

  v6 = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __52___UIKeyboardStateManager_addInputString_withFlags___block_invoke;
  v8[3] = &unk_1E16BB820;
  v8[4] = self;
  v9 = v6;
  v10 = a4;
  v7 = v6;
  -[_UIKeyboardStateManager _scheduleInputAdditionOrDeletion:](self, "_scheduleInputAdditionOrDeletion:", v8);

}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;
  unint64_t v15;

  v8 = a3;
  v9 = a5;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __73___UIKeyboardStateManager_addInputString_withFlags_withInputManagerHint___block_invoke;
  v12[3] = &unk_1E16BB848;
  v12[4] = self;
  v13 = v8;
  v14 = v9;
  v15 = a4;
  v10 = v9;
  v11 = v8;
  -[_UIKeyboardStateManager _scheduleInputAdditionOrDeletion:](self, "_scheduleInputAdditionOrDeletion:", v12);

}

- (void)_addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 withInputSource:(int64_t)a6
{
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  unint64_t v18;
  int64_t v19;

  v10 = a3;
  v11 = a5;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __90___UIKeyboardStateManager__addInputString_withFlags_withInputManagerHint_withInputSource___block_invoke;
  v15[3] = &unk_1E16BB870;
  v15[4] = self;
  v16 = v10;
  v17 = v11;
  v18 = a4;
  v19 = a6;
  v13 = v11;
  v14 = v10;
  objc_msgSend(v12, "addTask:", v15);

}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 executionContext:(id)a5
{
  -[_UIKeyboardStateManager addInputString:withFlags:withInputManagerHint:executionContext:](self, "addInputString:withFlags:withInputManagerHint:executionContext:", a3, a4, 0, a5);
}

+ (BOOL)_isInputEligibleForSpaceAutodelete:(id)a3
{
  id v3;
  __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  __CFString *v15;
  __CFString *v16;
  unint64_t v17;
  BOOL v18;

  v3 = a3;
  objc_msgSend(v3, "string");
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!-[__CFString isEqualToString:](v4, "isEqualToString:", CFSTR(" ")))
  {
    v18 = 0;
LABEL_16:

    goto LABEL_17;
  }
  objc_msgSend(v3, "acceptedCandidate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v3, "acceptedCandidate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "input");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lowercaseString");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v8)
      v10 = (__CFString *)v8;
    else
      v10 = &stru_1E16EDF20;
    v4 = v10;

    objc_msgSend(v3, "acceptedCandidate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "candidate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "lowercaseString");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v13)
      v15 = (__CFString *)v13;
    else
      v15 = &stru_1E16EDF20;
    v16 = v15;

    if (-[__CFString length](v4, "length") && !-[__CFString hasPrefix:](v16, "hasPrefix:", v4))
    {
      v18 = 0;
    }
    else
    {
      v17 = -[__CFString length](v4, "length");
      v18 = v17 < -[__CFString length](v16, "length");
    }

    goto LABEL_16;
  }
  v18 = 0;
LABEL_17:

  return v18;
}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 executionContext:(id)a6
{
  -[_UIKeyboardStateManager addInputString:withFlags:withInputManagerHint:withInputSource:executionContext:](self, "addInputString:withFlags:withInputManagerHint:withInputSource:executionContext:", a3, a4, a5, 0, a6);
}

- (void)addInputString:(id)a3 withFlags:(unint64_t)a4 withInputManagerHint:(id)a5 withInputSource:(int64_t)a6 executionContext:(id)a7
{
  id v12;
  __CFString *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  char v33;
  int64_t m_cachedAutofillMode;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  void *v38;
  _UIKeyboardStateManager *v39;
  id v40;
  id v41;
  id v42;

  v12 = a3;
  v13 = (__CFString *)a5;
  v14 = a7;
  if (-[_UIKeyboardStateManager isCurrentEditResponderWebKit](self, "isCurrentEditResponderWebKit")
    && -[_UIKeyboardStateManager shouldApplyKeyboardInputToUIHost](self, "shouldApplyKeyboardInputToUIHost"))
  {
    -[_UIKeyboardStateManager eventForCurrentWebEvent](self, "eventForCurrentWebEvent");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_alloc_init(NSClassFromString(CFSTR("RTIInputOperation")));
    v17 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v17, "setObject:forKey:", v12, CFSTR("string"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setObject:forKey:", v18, CFSTR("flags"));

    if (v13)
      v19 = v13;
    else
      v19 = &stru_1E16EDF20;
    objc_msgSend(v17, "setObject:forKey:", v19, CFSTR("inputManagerHint"));
    objc_msgSend(v17, "setObject:forKey:", CFSTR("_addInputString:withFlags:withInputManagerHint:withInputSource:"), CFSTR("selector"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v15, "source"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setObject:forKey:", v20, CFSTR("source"));

    v21 = (void *)objc_msgSend(v17, "copy");
    objc_msgSend(v16, "setCustomInfo:", v21);

    objc_msgSend(v16, "setCustomInfoType:", 0x1E1750380);
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "performInputOperation:", v16);

    objc_msgSend(v14, "returnExecutionToParent");
    goto LABEL_15;
  }
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "currentInputMode");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "updateLastUsedInputMode:", v25);

  -[_UIKeyboardStateManager setDeleteWordLastDelete:](self, "setDeleteWordLastDelete:", -*MEMORY[0x1E0C9ADE8]);
  if (!-[_UIKeyboardStateManager _isValidKeyInput:](self, "_isValidKeyInput:", v12))
    goto LABEL_14;
  -[_UIKeyboardStateManager removeSpaceAfterEmojiForInputString:](self, "removeSpaceAfterEmojiForInputString:", v12);
  if ((a4 & 0x80) != 0)
  {
    if (-[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v12))
    {
      v31 = objc_alloc_init(MEMORY[0x1E0DBDC40]);
      objc_msgSend(v31, "setInsertionText:", v12);
      -[_UIKeyboardStateManager performKeyboardOutput:](self, "performKeyboardOutput:", v31);
      -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
      -[_UIKeyboardStateManager updateNoContentViews](self, "updateNoContentViews");

    }
    goto LABEL_14;
  }
  if (!-[_UIKeyboardStateManager acceptInputString:](self, "acceptInputString:", v12))
  {
LABEL_14:
    objc_msgSend(v14, "returnExecutionToParent");
    goto LABEL_15;
  }
  -[_UIKeyboardStateManager inputEventForInputString:](self, "inputEventForInputString:", v12);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setPopupVariant:", (a4 >> 1) & 1);
  objc_msgSend(v26, "setMultitap:", (a4 >> 2) & 1);
  objc_msgSend(v26, "setFlick:", (a4 >> 6) & 1);
  objc_msgSend(v26, "setGesture:", (a4 >> 8) & 1);
  objc_msgSend(v26, "setInputManagerHint:", v13);
  +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setNextCandidateReplacementSource:", 1);

  v35 = MEMORY[0x1E0C809B0];
  v36 = 3221225472;
  v37 = __106___UIKeyboardStateManager_addInputString_withFlags_withInputManagerHint_withInputSource_executionContext___block_invoke;
  v38 = &unk_1E16B51E8;
  v39 = self;
  v40 = v12;
  v41 = v14;
  v28 = v26;
  v42 = v28;
  v29 = _Block_copy(&v35);
  v30 = v29;
  if (a6)
    -[_UIKeyboardStateManager performOperations:withTextInputSource:](self, "performOperations:withTextInputSource:", v29, a6, v35, v36, v37, v38, v39, v40, v41);
  else
    (*((void (**)(void *))v29 + 2))(v29);
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager", v35, v36, v37, v38, v39);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "hasText");

  if ((v33 & 1) == 0)
  {
    m_cachedAutofillMode = self->m_cachedAutofillMode;
    if (m_cachedAutofillMode == 2)
    {
      +[_UIKeyboardUsageTracking signupPasswordFromKeyboardIncrement](_UIKeyboardUsageTracking, "signupPasswordFromKeyboardIncrement");
    }
    else if (m_cachedAutofillMode == 1)
    {
      +[_UIKeyboardUsageTracking loginPasswordFromKeyboardIncrement](_UIKeyboardUsageTracking, "loginPasswordFromKeyboardIncrement");
    }
  }

LABEL_15:
}

- (void)addInputEvent:(id)a3 executionContext:(id)a4
{
  id v7;
  id v8;
  void *v9;
  double m_changeTime;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  _UIKeyboardStateManager *v41;
  id v42;
  _QWORD v43[5];
  id v44;
  id v45;
  SEL v46;
  double v47;
  char v48;

  v7 = a3;
  v8 = a4;
  objc_msgSend(v7, "string");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  m_changeTime = self->m_changeTime;
  -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "stringEndsWord:", v9);

  if (objc_msgSend(v9, "isEqualToString:", CFSTR("'")))
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "hasAutocorrection"))
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "autocorrection");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "isForShortcutConversion");

    }
    else
    {
      v16 = 0;
    }

  }
  else
  {
    v16 = 0;
  }
  v17 = v16 | v12;
  if (objc_msgSend(v7, "isSynthesizedByAcceptingCandidate"))
  {
    objc_msgSend(v7, "string");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "length");

    if (!v19)
      v17 = 1;
  }
  v20 = -[NSString _isPlainSpace](self->m_previousInputString, "_isPlainSpace");
  -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", v9);
  self->m_acceptingCandidate = 0;
  -[_UIKeyboardStateManager clearTransientState](self, "clearTransientState");
  if (!v17
    || -[UITextInputTraits contentsIsSingleValue](self->m_traits, "contentsIsSingleValue")
    || !-[_UIKeyboardStateManager hasAdvancedInputDelegate](self, "hasAdvancedInputDelegate"))
  {
    if (!-[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v9))
    {
      -[_UIKeyboardStateManager setShiftOffIfNeeded](self, "setShiftOffIfNeeded");
      -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
      -[_UIKeyboardStateManager updateNoContentViews](self, "updateNoContentViews");
      -[_UIKeyboardStateManager clearInputForMarkedText](self, "clearInputForMarkedText");
      objc_msgSend(v8, "returnExecutionToParent");
      goto LABEL_25;
    }
    if (-[TIKeyboardInputManagerState shouldExtendPriorWord](self->m_inputManagerState, "shouldExtendPriorWord"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "selectedTextRange");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v27, "_isRanged");

      if (v28)
        -[_UIKeyboardStateManager willReplaceTextInRangedSelectionWithKeyboardInput](self, "willReplaceTextInRangedSelectionWithKeyboardInput");
    }
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "clearAutocorrection");

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "keyInputDelegate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager updateTextInputKeyboardSource](self, "updateTextInputKeyboardSource");
    -[_UIKeyboardStateManager handleDeleteAutospaceForInputString:afterSpace:](self, "handleDeleteAutospaceForInputString:afterSpace:", v9, v20);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v32, "length"))
    {
      -[_UIKeyboardStateManager handleReplacement:forSpaceAndInput:](self, "handleReplacement:forSpaceAndInput:", v32, v7);
      v33 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v33;
    }
    v37 = MEMORY[0x1E0C809B0];
    v38 = 3221225472;
    v39 = __58___UIKeyboardStateManager_addInputEvent_executionContext___block_invoke_2;
    v40 = &unk_1E16BB0D8;
    v41 = self;
    v42 = v9;
    objc_msgSend(v8, "childWithContinuation:", &v37);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager handleKeyboardInput:executionContext:](self, "handleKeyboardInput:executionContext:", v7, v34, v37, v38, v39, v40, v41);

    goto LABEL_23;
  }
  v21 = self->m_changeTime - m_changeTime;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "inputString");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITextChecker setString:isExemptFromChecker:](UITextChecker, "setString:isExemptFromChecker:", v23, objc_msgSend(v24, "inputStringIsExemptFromChecker"));

  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
    && !-[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList"))
  {
    if (self->m_candidateList
      && (-[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates"),
          v35 = (void *)objc_claimAutoreleasedReturnValue(),
          v36 = objc_msgSend(v35, "count"),
          v35,
          v36))
    {
      -[_UIKeyboardStateManager acceptCurrentCandidateForInput:](self, "acceptCurrentCandidateForInput:", v7);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", v9);
    }
    else
    {
      v31 = 0;
    }
    -[_UIKeyboardStateManager addWordTerminator:afterSpace:afterAcceptingCandidate:elapsedTime:executionContext:](self, "addWordTerminator:afterSpace:afterAcceptingCandidate:elapsedTime:executionContext:", v7, v20, v31, v8, v21);
LABEL_23:

    goto LABEL_25;
  }
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = __58___UIKeyboardStateManager_addInputEvent_executionContext___block_invoke;
  v43[3] = &unk_1E16BB8B8;
  v46 = a2;
  v43[4] = self;
  v44 = v9;
  v7 = v7;
  v45 = v7;
  v48 = v20;
  v47 = v21;
  objc_msgSend(v8, "childWithContinuation:", v43);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager acceptAutocorrectionForWordTerminator:executionContextPassingTIKeyboardCandidate:](self, "acceptAutocorrectionForWordTerminator:executionContextPassingTIKeyboardCandidate:", v7, v25);

LABEL_25:
}

- (id)acceptAutocorrectionForWordTerminator:(id)a3
{
  id v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v9[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__37;
  v16 = __Block_byref_object_dispose__37;
  v17 = 0;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __65___UIKeyboardStateManager_acceptAutocorrectionForWordTerminator___block_invoke;
  v9[3] = &unk_1E16BB908;
  v9[4] = self;
  v6 = v4;
  v10 = v6;
  v11 = &v12;
  objc_msgSend(v5, "performSingleTask:", v9);

  v7 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v7;
}

- (void)acceptAutocorrectionForWordTerminator:(id)a3 executionContextPassingTIKeyboardCandidate:(id)a4
{
  id v7;
  id v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  _UIKeyboardStateManager *v25;
  id v26;
  id v27;
  SEL v28;

  v7 = a3;
  v8 = a4;
  if (!+[UIKeyboard doesSpacebarAcceptInlineTextCompletion](UIKeyboard, "doesSpacebarAcceptInlineTextCompletion"))goto LABEL_17;
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "currentlyAcceptingInlineCompletionByDirectTap");

  v11 = v10 ? 2 : 0;
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "string");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "acceptTextCompletionWithInteraction:wordTerminator:outputHandledByCaller:", v11, v13, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
  {
LABEL_17:
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "autocorrection");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "removeTextCompletionPrompt");

    }
  }
  objc_msgSend(v7, "string");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[_UIKeyboardStateManager shouldAcceptCandidate:beforeInputString:](self, "shouldAcceptCandidate:beforeInputString:", v14, v17);

  if (v18
    && (-[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits") != 2
     || (objc_msgSend(v7, "isSynthesizedByAcceptingCandidate") & 1) != 0
     || objc_msgSend(v14, "isForShortcutConversion")))
  {
    v21 = MEMORY[0x1E0C809B0];
    v22 = 3221225472;
    v23 = __108___UIKeyboardStateManager_acceptAutocorrectionForWordTerminator_executionContextPassingTIKeyboardCandidate___block_invoke;
    v24 = &unk_1E16BB848;
    v28 = a2;
    v25 = self;
    v19 = v14;
    v26 = v19;
    v27 = v7;
    objc_msgSend(v8, "childWithContinuation:", &v21);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager acceptAutocorrection:executionContextPassingTIKeyboardCandidate:](self, "acceptAutocorrection:executionContextPassingTIKeyboardCandidate:", v19, v20, v21, v22, v23, v24, v25);

  }
  else
  {
    -[_UIKeyboardStateManager didAcceptAutocorrection:inputCandidate:wordTerminator:](self, "didAcceptAutocorrection:inputCandidate:wordTerminator:", 0, v14, v7);
    -[_UIKeyboardStateManager setAutocorrection:](self, "setAutocorrection:", 0);
    objc_msgSend(v8, "returnExecutionToParent");
  }

}

- (id)inputWordForTerminatorAtSelection
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[5];

  -[_UIKeyboardStateManager documentState](self, "documentState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "selectedText");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      -[_UIKeyboardStateManager documentState](self, "documentState");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __60___UIKeyboardStateManager_inputWordForTerminatorAtSelection__block_invoke;
      v7[3] = &unk_1E16BB930;
      v7[4] = self;
      objc_msgSend(v5, "inputStemWithTerminatorPredicate:", v7);
      v3 = (void *)objc_claimAutoreleasedReturnValue();

      if (!objc_msgSend(v3, "length"))
      {

        v3 = 0;
      }
    }
  }
  return v3;
}

- (void)didAcceptAutocorrection:(id)a3 inputCandidate:(id)a4 wordTerminator:(id)a5
{
  -[_UIKeyboardStateManager didAcceptAutocorrection:inputCandidate:wordTerminator:learningFlagsMask:](self, "didAcceptAutocorrection:inputCandidate:wordTerminator:learningFlagsMask:", a3, a4, a5, 0);
}

- (void)didAcceptAutocorrection:(id)a3 inputCandidate:(id)a4 wordTerminator:(id)a5 learningFlagsMask:(unint64_t)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  _UIKeyboardStateManager *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  _QWORD v44[5];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  -[_UIKeyboardStateManager inputWordForTerminatorAtSelection](self, "inputWordForTerminatorAtSelection");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    UIKeyboardGetCurrentInputMode();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    TIStatisticGetKeyForInputMode();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    TIStatisticScalarIncrement();

    if (objc_msgSend(v10, "isContinuousPathConversion"))
      ++self->m_numCPwords;
    if (-[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits") == 1)
    {
      TIStatisticGetKeyForInputMode();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      TIStatisticScalarIncrement();

    }
    if (-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists"))
    {
      TIStatisticGetKeyForInputMode();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      TIStatisticScalarIncrement();

    }
    if (self->m_layoutAllowsCP
      && (unint64_t)objc_msgSend(v13, "length") >= 2
      && self->m_numCPwords
      && (objc_msgSend(v10, "isContinuousPathConversion") & 1) == 0
      && (objc_msgSend(v10, "isEmojiCandidate") & 1) == 0
      && (objc_msgSend(v10, "isPunctuationKeyCandidate") & 1) == 0
      && (objc_msgSend(v10, "isCompletionCandidate") & 1) == 0)
    {
      TIStatisticGetKeyForInputMode();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      TIStatisticScalarIncrement();

    }
  }
  if (-[UITextInputTraits isSingleLineDocument](self->m_traits, "isSingleLineDocument"))
  {
    objc_msgSend(v12, "string");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "isEqualToString:", CFSTR("\n"));

  }
  else
  {
    v21 = 0;
  }
  if (v12)
    v22 = v21;
  else
    v22 = 1;
  if (v10)
  {
    if (v22 && -[_UIKeyboardStateManager nextCharacterIsWordCharacter](self, "nextCharacterIsWordCharacter"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[TIKeyboardInputManagerState wordSeparator](self->m_inputManagerState, "wordSeparator");
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = (void *)v24;
      if (v24)
        v26 = (const __CFString *)v24;
      else
        v26 = CFSTR(" ");
      objc_msgSend(v23, "insertText:updateInputSource:", v26, 0);

    }
    v27 = self;
    v28 = v10;
LABEL_31:
    -[_UIKeyboardStateManager syncInputManagerToAcceptedAutocorrection:forInput:](v27, "syncInputManagerToAcceptedAutocorrection:forInput:", v28, v12);
    goto LABEL_32;
  }
  if (v22 && -[_UIKeyboardStateManager nextCharacterIsWordCharacter](self, "nextCharacterIsWordCharacter"))
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "_wordContainingCaretSelection");
    v30 = objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "moveSelectionToEndOfWord");

    }
    v13 = (void *)v30;
  }
  if (objc_msgSend(v13, "length"))
  {
    objc_msgSend(v12, "acceptedCandidate");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "slotID");

    if (!v33)
    {
      if (v11)
      {
        v45 = 0;
        v46 = &v45;
        v47 = 0x2050000000;
        v34 = (void *)getTUITypedStringCandidateClass_softClass;
        v48 = getTUITypedStringCandidateClass_softClass;
        if (!getTUITypedStringCandidateClass_softClass)
        {
          v44[0] = MEMORY[0x1E0C809B0];
          v44[1] = 3221225472;
          v44[2] = __getTUITypedStringCandidateClass_block_invoke;
          v44[3] = &unk_1E16B14C0;
          v44[4] = &v45;
          __getTUITypedStringCandidateClass_block_invoke((uint64_t)v44);
          v34 = (void *)v46[3];
        }
        v35 = objc_retainAutorelease(v34);
        _Block_object_dispose(&v45, 8);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v36 = objc_alloc(MEMORY[0x1E0DBDBE8]);
          objc_msgSend(v11, "candidate");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "input");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "rawInput");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = objc_msgSend(v36, "initWithCandidate:forInput:rawInput:", v37, v38, v39);

          v11 = (id)v40;
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0DBDBE8], "candidateWithUnchangedInput:", v13);
        v11 = (id)objc_claimAutoreleasedReturnValue();
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v41 = (void *)MEMORY[0x1E0CB37E8];
        v42 = v11;
        objc_msgSend(v41, "numberWithUnsignedInt:", a6);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "performSelector:withObject:", sel_setLearningFlags_, v43);

      }
      v27 = self;
      v28 = v11;
      goto LABEL_31;
    }
  }
LABEL_32:

}

- (void)syncInputManagerToAcceptedAutocorrection:(id)a3 forInput:(id)a4
{
  id v6;
  id v7;

  v7 = a3;
  v6 = a4;
  if (!-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry"))
  {
    if (v6)
    {
      objc_msgSend(v6, "setAcceptedCandidate:", v7);
    }
    else
    {
      -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
      -[_UIKeyboardStateManager textAccepted:](self, "textAccepted:", v7);
    }
  }

}

- (void)setDocumentStateForAutocorrection:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id WeakRetained;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v23 = a3;
  objc_msgSend(v23, "candidate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "input");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "length");

  if (v7)
  {
    objc_msgSend(v23, "input");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "documentStateAfterReplacingText:withText:", v8, v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
      v10 = objc_alloc(MEMORY[0x1E0DBDB78]);
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v5, "contextBeforeInput");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "_normalizedStringForRangeComparison:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "markedText");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "selectedText");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "contextAfterInput");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v5, "selectedRangeInMarkedText");
      v19 = (void *)objc_msgSend(v10, "initWithContextBefore:markedText:selectedText:contextAfter:selectedRangeInMarkedText:", v13, v14, v15, v16, v17, v18);

      objc_msgSend(v23, "input");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "documentStateAfterReplacingText:withText:", v20, v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v9)
        goto LABEL_4;
    }
LABEL_6:
    -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v9);
    goto LABEL_7;
  }
  objc_msgSend(v5, "documentStateAfterInsertingText:", v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    goto LABEL_6;
LABEL_4:
  v21 = (void *)MEMORY[0x1E0DBDB78];
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "documentStateOfDocument:", v9);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v22);

LABEL_7:
}

- (void)insertedEmojiFromPopover:(id)a3 selectionMethod:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v6 = a3;
  +[UIKBAnalyticsDispatcher emojiInsertedByMethod:inputType:](UIKBAnalyticsDispatcher, "emojiInsertedByMethod:inputType:", a4, CFSTR("Popover"));
  objc_msgSend(v6, "emojiString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager inputEventForInputString:](self, "inputEventForInputString:", v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "setPopupVariant:", 1);
  -[_UIKeyboardStateManager handleEmojiInput:keyboardState:](self, "handleEmojiInput:keyboardState:", v8, self->m_keyboardState);

}

- (void)insertedAccentVariantFromPopover:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _UIKeyboardStateManager *v11;
  _QWORD v12[5];

  v4 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __60___UIKeyboardStateManager_insertedAccentVariantFromPopover___block_invoke;
  v12[3] = &unk_1E16BAF98;
  v12[4] = self;
  objc_msgSend(v5, "performSingleTask:", v12);

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v6;
  v9[1] = 3221225472;
  v9[2] = __60___UIKeyboardStateManager_insertedAccentVariantFromPopover___block_invoke_2;
  v9[3] = &unk_1E16BB0D8;
  v10 = v4;
  v11 = self;
  v8 = v4;
  objc_msgSend(v7, "performSingleTask:", v9);

}

- (BOOL)showingEmojiSearch
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "rtiInputSourceState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    return -[UITextInputTraits keyboardType](self->m_traits, "keyboardType") == 122;
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "rtiInputSourceState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "showingEmojiSearch");

  return v7;
}

- (void)emojiSearchWillInsertEmoji:(id)a3 forSearchQuery:(id)a4
{
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  id v12;

  v12 = a3;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateIdleDetection:", 0);

  if (+[UIDictationController isRunning](UIDictationController, "isRunning"))
  {
    +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dictationTipController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "signalDictationInsertionTip:", v12);

  }
  v10 = CFSTR("Search");
  if (!v6 || !objc_msgSend(v6, "length"))
  {
    v11 = CFSTR("SearchFavorites");

    v10 = v11;
  }
  -[_UIKeyboardStateManager emojiSearchWillInsertEmoji:forSearchQuery:selectionMethod:inputType:](self, "emojiSearchWillInsertEmoji:forSearchQuery:selectionMethod:inputType:", v12, v6, CFSTR("Touch"), v10);

}

- (void)emojiSearchWillInsertEmoji:(id)a3 forSearchQuery:(id)a4 selectionMethod:(id)a5 inputType:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
  v19 = (id)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v19, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v19, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "delegateRespectingForwardingDelegate:", 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v15, "conformsToProtocol:", &unk_1EDE22B80))
  {
    objc_msgSend(MEMORY[0x1E0DBDB78], "documentStateOfDocument:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setDocumentState:", v16);

  }
  -[_UIKeyboardStateManager inputEventForInputString:](self, "inputEventForInputString:", v13);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DBDBE8], "candidateWithCandidate:forInput:", v13, v12);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "setAcceptedCandidate:", v18);
  objc_msgSend(v17, "setSynthesizedByAcceptingCandidate:", 1);
  -[_UIKeyboardStateManager acceptingCandidateWithTrigger:](self, "acceptingCandidateWithTrigger:", *MEMORY[0x1E0DBDE48]);
  -[_UIKeyboardStateManager handleEmojiInput:keyboardState:](self, "handleEmojiInput:keyboardState:", v17, v19);
  +[UIKBAnalyticsDispatcher emojiInsertedByMethod:inputType:](UIKBAnalyticsDispatcher, "emojiInsertedByMethod:inputType:", v11, v10);

}

- (void)handleEmojiInput:(id)a3 keyboardState:(id)a4
{
  id v6;
  id v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v6 = a3;
  v7 = a4;
  if (-[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService"))
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __58___UIKeyboardStateManager_handleEmojiInput_keyboardState___block_invoke;
    v9[3] = &unk_1E16BB128;
    v9[4] = self;
    v10 = v6;
    v11 = v7;
    objc_msgSend(v8, "addTask:", v9);

  }
}

- (void)acceptAutocorrection:(id)a3 executionContextPassingTIKeyboardCandidate:(id)a4
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  TISmartPunctuationController *m_smartPunctuationController;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  __objc2_class **v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  char v55;
  double v56;
  double v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  _BOOL8 v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id *v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  _QWORD v81[4];
  id v82;
  _QWORD v83[4];
  id v84;
  _QWORD v85[4];
  id v86;
  _QWORD aBlock[5];
  id v88;
  id v89;
  double v90;
  double v91;
  double v92;
  double v93;
  _QWORD v94[5];
  id v95;
  id v96;
  double v97;
  double v98;
  double v99;
  double v100;
  _QWORD v101[4];
  id v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[128];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
    || !objc_msgSend(v6, "isSupplementalItemCandidate")
    || !-[_UIKeyboardStateManager _insertSupplementalCandidate:overridingCandidateText:](self, "_insertSupplementalCandidate:overridingCandidateText:", v6, 0))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "autocorrectPrompt");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v9, "frame");
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v17 = v16;
    }
    else
    {
      v11 = *MEMORY[0x1E0C9D628];
      v13 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v15 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v17 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    }
    v18 = v6;
    m_smartPunctuationController = self->m_smartPunctuationController;
    objc_msgSend(v18, "candidate");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[TISmartPunctuationController smartPunctuationResultsForString:](m_smartPunctuationController, "smartPunctuationResultsForString:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = v18;
    if (objc_msgSend(v21, "count"))
    {
      v75 = v6;
      v76 = v9;
      v74 = v7;
      objc_msgSend(v18, "candidate");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = (void *)objc_msgSend(v23, "mutableCopy");

      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v78 = v21;
      v25 = v21;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v103, v107, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v104;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v104 != v28)
              objc_enumerationMutation(v25);
            v30 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * i);
            v31 = objc_msgSend(v30, "range");
            v33 = v32;
            objc_msgSend(v30, "replacementString");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "replaceCharactersInRange:withString:", v31, v33, v34);

          }
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v103, v107, 16);
        }
        while (v27);
      }

      objc_msgSend(v18, "candidateByReplacingWithCandidate:", v24);
      v22 = (id)objc_claimAutoreleasedReturnValue();

      v7 = v74;
      v6 = v75;
      v9 = v76;
      v21 = v78;
    }
    if (-[_UIKeyboardStateManager shouldApplyAcceptedAutocorrection:](self, "shouldApplyAcceptedAutocorrection:", v18))
    {
      v35 = off_1E167B000;
      if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled")&& -[_UIKeyboardStateManager shouldUnderlineCandidate:](self, "shouldUnderlineCandidate:", v22))
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "storedListForCandidate:", v22);
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "addList:forCandidate:", v37, v22);

        objc_msgSend(v22, "candidate");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        +[UITextChecker setString:isExemptFromChecker:](UITextChecker, "setString:isExemptFromChecker:", v39, 1);

        v35 = off_1E167B000;
      }
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "forwardingInputDelegate");
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v41)
      {
        v101[0] = MEMORY[0x1E0C809B0];
        v101[1] = 3221225472;
        v101[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke;
        v101[3] = &unk_1E16BB538;
        v102 = v22;
        -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v101);

      }
      if (-[_UIKeyboardStateManager hasAsyncCapableInputDelegate](self, "hasAsyncCapableInputDelegate"))
      {
        self->m_textInputChangesIgnored = 1;
        if (objc_msgSend(v18, "isContinuousPathConversion"))
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "selectedTextRange");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = objc_msgSend(v43, "isEmpty");

          if ((v44 & 1) == 0)
          {
            v77 = v9;
            v79 = v21;
            v45 = v7;
            objc_msgSend(v18, "input");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "candidate");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v49, "selectedTextRange");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "textInRange:", v50);
            v51 = (void *)objc_claimAutoreleasedReturnValue();

            if ((objc_msgSend(v51, "hasPrefix:", CFSTR(" ")) & 1) != 0
              || !objc_msgSend(v47, "hasPrefix:", CFSTR(" ")))
            {
              v7 = v45;
              v9 = v77;
            }
            else
            {
              v7 = v45;
              v9 = v77;
              if ((unint64_t)objc_msgSend(v47, "length") >= 2)
              {
                objc_msgSend(v47, "substringFromIndex:", 1);
                v52 = objc_claimAutoreleasedReturnValue();

                v47 = (void *)v52;
              }
            }
            v21 = v79;
            objc_msgSend(v22, "candidateByReplacingWithCandidate:input:", v47, v51);
            v60 = objc_claimAutoreleasedReturnValue();

            v22 = (id)v60;
          }
          v35 = off_1E167B000;
        }
        if (-[__objc2_class isTextAccelerationUIEnabled](v35[306], "isTextAccelerationUIEnabled"))
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "candidate");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "input");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = -[_UIKeyboardStateManager shouldUnderlineCandidate:](self, "shouldUnderlineCandidate:", v22);
          v94[0] = MEMORY[0x1E0C809B0];
          v94[1] = 3221225472;
          v94[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_2;
          v94[3] = &unk_1E16BB9C8;
          v94[4] = self;
          v22 = v22;
          v95 = v22;
          v96 = v7;
          v97 = v11;
          v98 = v13;
          v99 = v15;
          v100 = v17;
          objc_msgSend(v61, "applyAutocorrection:toString:shouldUnderline:withCompletionHandler:", v62, v63, v64, v94);

        }
        else
        {
          v80 = v21;
          v65 = MEMORY[0x1E0C809B0];
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_4;
          aBlock[3] = &unk_1E16BB9C8;
          aBlock[4] = self;
          v22 = v22;
          v88 = v22;
          v89 = v7;
          v90 = v11;
          v91 = v13;
          v92 = v15;
          v93 = v17;
          v66 = _Block_copy(aBlock);
          -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
          v67 = (void *)objc_claimAutoreleasedReturnValue();

          v68 = v9;
          if (v67)
          {
            -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "input");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "candidate");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            v85[0] = v65;
            v85[1] = 3221225472;
            v85[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_6;
            v85[3] = &unk_1E16BB9F0;
            v72 = &v86;
            v86 = v66;
            objc_msgSend(v69, "replaceText:withText:options:completionHandler:", v70, v71, 0, v85);
          }
          else
          {
            -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
            v73 = (void *)objc_claimAutoreleasedReturnValue();

            if (v73)
            {
              -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "input");
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "candidate");
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              v83[0] = v65;
              v83[1] = 3221225472;
              v83[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_7;
              v83[3] = &unk_1E16BB9F0;
              v72 = &v84;
              v84 = v66;
              objc_msgSend(v69, "replaceText:withText:options:withCompletionHandler:", v70, v71, 0, v83);
            }
            else
            {
              -[_UIKeyboardStateManager asyncWebKitInteractionDelegate](self, "asyncWebKitInteractionDelegate");
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "candidate");
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "input");
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              v81[0] = v65;
              v81[1] = 3221225472;
              v81[2] = __91___UIKeyboardStateManager_acceptAutocorrection_executionContextPassingTIKeyboardCandidate___block_invoke_8;
              v81[3] = &unk_1E16BBA18;
              v72 = &v82;
              v82 = v66;
              objc_msgSend(v69, "applyAutocorrection:toString:withCompletionHandler:", v70, v71, v81);
            }
          }

          v9 = v68;
          v21 = v80;
        }
        goto LABEL_37;
      }
      -[_UIKeyboardStateManager deleteWordLastDelete](self, "deleteWordLastDelete");
      v56 = -*MEMORY[0x1E0C9ADE8];
      if (v57 > v56)
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "insertText:updateInputSource:", CFSTR(" "), 0);

        -[_UIKeyboardStateManager setDeleteWordLastDelete:](self, "setDeleteWordLastDelete:", v56);
      }
      if (-[_UIKeyboardStateManager applyAutocorrection:](self, "applyAutocorrection:", v22))
      {
        -[_UIKeyboardStateManager underlineCandidate:](self, "underlineCandidate:", v22);
        objc_msgSend(v18, "candidate");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager animateAutocorrectionToText:fromRect:](self, "animateAutocorrectionToText:fromRect:", v59, v11, v13, v15, v17);

        -[_UIKeyboardStateManager didApplyAutocorrection:autocorrectPromptFrame:](self, "didApplyAutocorrection:autocorrectPromptFrame:", v18, v11, v13, v15, v17);
        objc_msgSend(v7, "returnExecutionToParentWithInfo:", v22);
LABEL_37:

        goto LABEL_38;
      }
    }
    else
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "selectedTextRange");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = objc_msgSend(v54, "isEmpty");

      if ((v55 & 1) == 0)
        -[_UIKeyboardStateManager collapseSelection](self, "collapseSelection");
    }
    objc_msgSend(v7, "returnExecutionToParent");
    goto LABEL_37;
  }
  objc_msgSend(v7, "returnExecutionToParent");
LABEL_38:

}

- (BOOL)shouldApplyAcceptedAutocorrection:(id)a3
{
  void *v3;
  id v5;
  BOOL v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v5 = a3;
  v6 = (objc_opt_respondsToSelector() & 1) == 0 || (objc_msgSend(v5, "candidateProperty") & 4) == 0;
  v7 = (objc_opt_respondsToSelector() & 1) == 0
    || objc_msgSend(v5, "performSelector:", sel_shouldHintAtAlternativeInput) == 0;
  objc_msgSend(v5, "candidate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    objc_msgSend(v5, "input");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
      goto LABEL_23;
  }
  objc_msgSend(v5, "candidate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "input");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isEqualToString:", v10))
  {
    v11 = v6 & ~objc_msgSend(v5, "isSupplementalItemCandidate") & v7;

    if (v8)
    {

      if ((v11 & 1) != 0)
        goto LABEL_23;
    }
    else
    {

      if ((v11 & 1) != 0)
      {
LABEL_23:
        v13 = 0;
        goto LABEL_26;
      }
    }
  }
  else
  {

    if (v8)
      v12 = v8;
    else
      v12 = v3;

  }
  if (objc_msgSend(v5, "slotID")
    || (-[_UIKeyboardStateManager inputDelegate](self, "inputDelegate"),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        v14,
        !v14))
  {
    v13 = 1;
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "selectedTextRange");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "isEmpty"))
    {
      objc_msgSend(v5, "input");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "length");

    }
    else
    {
      v18 = 0;
    }

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "candidate");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v19, "callShouldReplaceExtendedRange:withText:includeMarkedText:", v18, v20, 0);

  }
LABEL_26:

  return v13;
}

- (void)didApplyAutocorrection:(id)a3 autocorrectPromptFrame:(CGRect)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  CGRect v20;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v19 = a3;
  objc_msgSend(v19, "input");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "length");

  if (!v10)
  {
    v11 = objc_alloc_init(MEMORY[0x1E0DBDC40]);
    objc_msgSend(v11, "setAcceptedCandidate:", v19);
    objc_msgSend(v19, "candidate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "insertText:", v12);

    -[_UIKeyboardStateManager _postInputResponderCapabilitiesChangedNotificationWithOutput:selectionChanged:](self, "_postInputResponderCapabilitiesChangedNotificationWithOutput:selectionChanged:", v11, 0);
  }
  -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");
  if (-[_UIKeyboardStateManager isAutoFillMode](self, "isAutoFillMode"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "privateInputDelegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_opt_respondsToSelector();

    if ((v15 & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "privateInputDelegate");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "candidate");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "acceptedAutoFillWord:", v18);

    }
  }
  v20.origin.x = x;
  v20.origin.y = y;
  v20.size.width = width;
  v20.size.height = height;
  -[_UIKeyboardStateManager trackUsageForAcceptedAutocorrection:promptWasShowing:](self, "trackUsageForAcceptedAutocorrection:promptWasShowing:", v19, !CGRectIsNull(v20));

}

- (void)addWordTerminator:(id)a3 afterSpace:(BOOL)a4 afterAcceptingCandidate:(id)a5 elapsedTime:(double)a6 executionContext:(id)a7
{
  _BOOL8 v10;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  __CFString *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __CFString *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  id v31;

  v10 = a4;
  v12 = a3;
  v13 = a5;
  v14 = a7;
  objc_msgSend(v12, "string");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!-[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", v15))
  {
    objc_msgSend(v12, "acceptedCandidate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "isAutofillCandidate"))
    {

    }
    else
    {
      objc_msgSend(v12, "acceptedCandidate");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "isSlottedCandidate");

      if (!v18)
      {
        self->m_textInputChangingText = 1;
        -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");
        self->m_textInputChangingText = 0;
        objc_msgSend(v14, "returnExecutionToParent");
        goto LABEL_17;
      }
    }
  }
  -[_UIKeyboardStateManager clearInputWithCandidatesCleared:](self, "clearInputWithCandidatesCleared:", 0);
  -[_UIKeyboardStateManager handleDeleteAutospaceForInputString:afterSpace:](self, "handleDeleteAutospaceForInputString:afterSpace:", v15, v10);
  v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v19)
  {
    if (-[_UIKeyboardStateManager willDoubleSpacePeriodForInputString:afterSpace:elapsedTime:](self, "willDoubleSpacePeriodForInputString:afterSpace:elapsedTime:", v15, v10, a6))
    {
      -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "replacementForDoubleSpace");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "copy");
      v23 = (void *)v22;
      v24 = CFSTR(". ");
      if (v22)
        v24 = (__CFString *)v22;
      v19 = v24;

      if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
      {
        self->m_textInputChangesIgnored = 1;
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "unmarkText");

        self->m_textInputChangesIgnored = 0;
      }
    }
    else
    {
      v19 = 0;
    }
  }
  if (-[__CFString length](v19, "length"))
  {
    -[_UIKeyboardStateManager handleReplacement:forSpaceAndInput:](self, "handleReplacement:forSpaceAndInput:", v19, v12);
    v26 = objc_claimAutoreleasedReturnValue();

    v12 = (id)v26;
  }
  if (v12)
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "clearAutocorrection");

    +[UITextChecker noteWordTerminator:replacement:](UITextChecker, "noteWordTerminator:replacement:", v12, v19);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __109___UIKeyboardStateManager_addWordTerminator_afterSpace_afterAcceptingCandidate_elapsedTime_executionContext___block_invoke;
    v29[3] = &unk_1E16BB128;
    v29[4] = self;
    v30 = v13;
    v31 = v15;
    objc_msgSend(v14, "childWithContinuation:", v29);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager handleKeyboardInput:executionContext:](self, "handleKeyboardInput:executionContext:", v12, v28);

  }
LABEL_17:

}

- (void)completeAddInputString:(id)a3
{
  -[_UIKeyboardStateManager completeAddInputString:generateCandidates:](self, "completeAddInputString:generateCandidates:", a3, 1);
}

- (void)completeAddInputString:(id)a3 generateCandidates:(BOOL)a4
{
  _BOOL4 v4;
  id v6;

  v4 = a4;
  v6 = a3;
  -[_UIKeyboardStateManager setShiftOffIfNeeded](self, "setShiftOffIfNeeded");
  if (v4)
    -[_UIKeyboardStateManager generateCandidates](self, "generateCandidates");
  if (objc_msgSend(v6, "isEqualToString:", CFSTR("\n"))
    && !-[UITextInputTraits isSingleLineDocument](self->m_traits, "isSingleLineDocument"))
  {
    -[_UIKeyboardStateManager setInitialDirection](self, "setInitialDirection");
  }
  -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
  -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
  -[_UIKeyboardStateManager updateNoContentViews](self, "updateNoContentViews");
  -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");
  -[_UIKeyboardStateManager updateDoubleSpacePeriodStateForString:](self, "updateDoubleSpacePeriodStateForString:", v6);
  self->m_suggestionsShownForCurrentDeletion = 0;
  self->m_didAutomaticallyInsertSpace = 0;
  -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");

}

- (void)updateDocumentViewsAfterKeyboardOutput:(id)a3
{
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  objc_msgSend(v12, "insertionText");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "_isNewlineOrReturn"))
  {
    v5 = -[UITextInputTraits isSingleLineDocument](self->m_traits, "isSingleLineDocument");

    if (!v5)
      -[_UIKeyboardStateManager setInitialDirection](self, "setInitialDirection");
  }
  else
  {

  }
  -[_UIKeyboardStateManager updateNoContentViews](self, "updateNoContentViews");
  -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");
  objc_msgSend(v12, "insertionText");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v12, "insertionText");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v7, "rangeOfCharacterFromSet:", v8);

    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (-[UITextInputTraits returnKeyGoesToNextResponder](self->m_traits, "returnKeyGoesToNextResponder"))
      {
        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_nextKeyResponder");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "becomeFirstResponder");

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "postNotificationName:object:", CFSTR("UIKeyboardReturnKeyPressed"), 0);
      }

    }
  }
  self->m_textInputChangingCount = 0;
  *(_WORD *)&self->m_textInputChangesIgnored = 0;
  self->m_textInputChangingDirection = 0;

}

- (void)didChangePhraseBoundary
{
  if (-[_UIKeyboardStateManager supportsSetPhraseBoundary](self, "supportsSetPhraseBoundary"))
  {
    -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
    if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
      || !+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
    {
      -[_UIKeyboardStateManager setUserSelectedCurrentCandidate:](self, "setUserSelectedCurrentCandidate:", 0);
      -[_UIKeyboardStateManager generateCandidates](self, "generateCandidates");
      -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
    }
  }
}

- (unint64_t)phraseBoundary
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;

  if (!-[_UIKeyboardStateManager supportsSetPhraseBoundary](self, "supportsSetPhraseBoundary"))
    return 0x7FFFFFFFFFFFFFFFLL;
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    return 0x7FFFFFFFFFFFFFFFLL;
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "markedText");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "length");

  if (!v6)
    return 0;
  -[_UIKeyboardStateManager documentState](self, "documentState");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "selectedRangeInMarkedText");

  return v8;
}

- (void)adjustSegmentSize:(int64_t)a3
{
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (a3 >= 0)
    v5 = a3;
  else
    v5 = -a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "markedTextRange");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "textInRange:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "length");

  if (v10 >= v5)
    v11 = v5;
  else
    v11 = v10;
  if (v10 <= 0)
    v12 = v5;
  else
    v12 = v11;
  if (v12 >= 1)
  {
    v13 = (unint64_t)a3 >> 63;
    do
    {
      -[_UIKeyboardStateManager movePhraseBoundaryToDirection:granularity:](self, "movePhraseBoundaryToDirection:granularity:", v13, 1);
      --v12;
    }
    while (v12);
  }
}

- (void)movePhraseBoundaryToDirection:(int64_t)a3 granularity:(int64_t)a4
{
  void *v7;
  _QWORD v8[7];

  if (-[_UIKeyboardStateManager hasEditableMarkedText](self, "hasEditableMarkedText"))
  {
    if (-[_UIKeyboardStateManager phraseBoundary](self, "phraseBoundary") != 0x7FFFFFFFFFFFFFFFLL)
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __69___UIKeyboardStateManager_movePhraseBoundaryToDirection_granularity___block_invoke;
      v8[3] = &unk_1E16BBA40;
      v8[4] = self;
      v8[5] = a3;
      v8[6] = a4;
      objc_msgSend(v7, "performTask:", v8);

    }
  }
}

- (void)updateLayoutAndSetShift
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateLayout");

  -[_UIKeyboardStateManager setShift:](self, "setShift:", 1);
}

- (void)deleteOnceFromInputWithExecutionContext:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD v13[5];
  int v14;

  v4 = a3;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "inputIndex");

  if (!v6)
    goto LABEL_5;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "shadowTyping");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v8, "length") < v6)
  {

LABEL_5:
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v10, "_characterBeforeCaretSelection");

    goto LABEL_6;
  }
  v9 = objc_msgSend(v8, "characterAtIndex:", v6 - 1);

  if (!v9)
    goto LABEL_5;
LABEL_6:
  v11 = objc_alloc_init(MEMORY[0x1E0DBDBF8]);
  objc_msgSend(v11, "setBackspace:", 1);
  objc_msgSend(v11, "setShiftDown:", -[_UIKeyboardStateManager isShiftKeyBeingHeld](self, "isShiftKeyBeingHeld"));
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __67___UIKeyboardStateManager_deleteOnceFromInputWithExecutionContext___block_invoke;
  v13[3] = &unk_1E16BBA68;
  v13[4] = self;
  v14 = v9;
  objc_msgSend(v4, "childWithContinuation:", v13);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager handleKeyboardInput:executionContext:](self, "handleKeyboardInput:executionContext:", v11, v12);
}

- (BOOL)nextCharacterIsWordCharacter
{
  void *v3;
  uint64_t v4;
  TIKeyboardInputManagerState *m_inputManagerState;
  BOOL v6;
  void *v7;
  int v8;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_characterAfterCaretSelection");

  m_inputManagerState = self->m_inputManagerState;
  if (m_inputManagerState)
    v6 = (_DWORD)v4 == 0;
  else
    v6 = 1;
  if (v6)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "_stringWithUnichar:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[TIKeyboardInputManagerState stringEndsWord:](m_inputManagerState, "stringEndsWord:", v7) ^ 1;

  }
  return v8;
}

- (void)collapseSelection
{
  id v2;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "collapseSelectionAndAdjustByOffset:", 0);

}

- (BOOL)supportsScheduleReplacementsAfterDeletionToEndOfWord
{
  return -[TIKeyboardInputManagerState supportsReversionUI](self->m_inputManagerState, "supportsReversionUI");
}

- (void)scheduleReplacementsAfterDeletionToEndOfWord
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;

  if (-[_UIKeyboardStateManager supportsScheduleReplacementsAfterDeletionToEndOfWord](self, "supportsScheduleReplacementsAfterDeletionToEndOfWord"))
  {
    v3 = +[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled");
    v4 = 9;
    if (v3)
      v4 = 41;
    if (self->m_suggestionsShownForCurrentDeletion)
      v5 = v4 | 2;
    else
      v5 = v4;
    self->m_suggestionsShownForCurrentDeletion = 1;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hasAsyncCapableInputDelegate");

    if (v7)
      v8 = v5 | 0x10;
    else
      v8 = v5;
    -[_UIKeyboardStateManager scheduleReplacementsWithOptions:](self, "scheduleReplacementsWithOptions:", v8);
  }
}

- (void)completeDeleteOnceFromInputWithCharacterBefore:(unsigned int)a3
{
  uint64_t v3;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  char v12;
  void *v13;
  id WeakRetained;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v3 = *(_QWORD *)&a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "_stringWithUnichar:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setDeletedString:](self, "setDeletedString:", v5);

  if (!-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
    || -[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hasAsyncCapableInputDelegate");

    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager deletedString](self, "deletedString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "stringEndsWord:", v9);
    if (!v10 || (v7 & 1) != 0)
    {

      if (!v10)
        goto LABEL_14;
    }
    else
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "selectionIsEndOfWord");

      if ((v12 & 1) == 0)
        goto LABEL_14;
    }
    -[_UIKeyboardStateManager clearInput](self, "clearInput");
    -[_UIKeyboardStateManager scheduleReplacementsAfterDeletionToEndOfWord](self, "scheduleReplacementsAfterDeletionToEndOfWord");
    -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
    goto LABEL_14;
  }
  if (!self->m_candidateList)
    goto LABEL_14;
  -[_UIKeyboardStateManager _markedText](self, "_markedText");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v13, "length"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "candidateController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "barIsExtended");

    if (!v16)
      goto LABEL_14;
    v13 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v13, "candidateController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "collapse");

  }
LABEL_14:
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v18, "hasProactiveCandidates") & 1) != 0)
  {
    -[_UIKeyboardStateManager documentState](self, "documentState");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "contextBeforeInput");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if ((_DWORD)v3 && !v20)
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "clearAutocorrectionAndNotifyObservers:", 1);

      -[_UIKeyboardStateManager updateAssistantView](self, "updateAssistantView");
    }
  }
  else
  {

  }
  -[_UIKeyboardStateManager setShiftOffIfNeeded](self, "setShiftOffIfNeeded");
  -[_UIKeyboardStateManager updateDoubleSpacePeriodStateForCharacter:](self, "updateDoubleSpacePeriodStateForCharacter:", v3);
  self->m_didAutomaticallyInsertSpace = 0;
}

- (void)deleteFromInput
{
  -[_UIKeyboardStateManager deleteFromInputWithFlags:](self, "deleteFromInputWithFlags:", 0);
}

- (void)_deleteFromInputWithFlags:(unint64_t)a3
{
  void *v5;
  _QWORD v6[6];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __53___UIKeyboardStateManager__deleteFromInputWithFlags___block_invoke;
  v6[3] = &unk_1E16BBA90;
  v6[4] = self;
  v6[5] = a3;
  objc_msgSend(v5, "addTask:", v6);

}

- (void)deleteFromInputWithFlags:(unint64_t)a3
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[6];
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  if (-[_UIKeyboardStateManager isCurrentEditResponderWebKit](self, "isCurrentEditResponderWebKit")
    && -[_UIKeyboardStateManager shouldApplyKeyboardInputToUIHost](self, "shouldApplyKeyboardInputToUIHost"))
  {
    v5 = objc_alloc_init(NSClassFromString(CFSTR("RTIInputOperation")));
    v10[0] = CFSTR("flags");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[1] = CFSTR("selector");
    v11[0] = v6;
    v11[1] = CFSTR("_deleteFromInputWithFlags:");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCustomInfo:", v7);

    objc_msgSend(v5, "setCustomInfoType:", 0x1E1750380);
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "performInputOperation:", v5);

  }
  else
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __52___UIKeyboardStateManager_deleteFromInputWithFlags___block_invoke;
    v9[3] = &unk_1E16BBA90;
    v9[4] = self;
    v9[5] = a3;
    -[_UIKeyboardStateManager _scheduleInputAdditionOrDeletion:](self, "_scheduleInputAdditionOrDeletion:", v9);
  }
}

- (void)undoWithKeyboardInput:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __49___UIKeyboardStateManager_undoWithKeyboardInput___block_invoke;
  v7[3] = &unk_1E16BB0D8;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "addTask:", v7);

}

- (void)performAutoDeleteNumberOfTimes:(unint64_t)a3 deleteOneWord:(BOOL)a4 forwardToInputSource:(BOOL)a5
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  _QWORD *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  _BOOL4 v53;
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[4];
  id v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;

  v53 = a5;
  if (a3)
  {
    v6 = 0;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "textOperations");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "keyboardOutput");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setProducedByDeleteInput:", 1);

      v67 = 0;
      v68 = &v67;
      v69 = 0x2020000000;
      v70 = 0;
      if (a4 || a3 != 1 && -[_UIKeyboardStateManager usesAutoDeleteWord](self, "usesAutoDeleteWord"))
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "asyncCapableInputDelegate");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "_deleteByWord");

          v14 = 1;
        }
        else
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "selectedTextRange");
          v27 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v27, "start");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (v16)
          {
            -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "start");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "_positionAtStartOfWords:beforePosition:", 1, v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();

            if (v30)
            {
              objc_msgSend(v27, "end");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              if (v31)
              {
                -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v27, "end");
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v32, "textRangeFromPosition:toPosition:", v30, v33);
                v16 = (void *)objc_claimAutoreleasedReturnValue();

              }
              else
              {
                v16 = 0;
              }

            }
            else
            {
              v16 = 0;
            }
          }
          else
          {
            v30 = 0;
          }
          self->m_autoDeleteShiftCharacter = 0;
          -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "documentState");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "documentState");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "contextBeforeInput");
          v44 = (void *)objc_claimAutoreleasedReturnValue();

          v63 = 0;
          v64 = &v63;
          v65 = 0x2020000000;
          v66 = 0;
          v45 = objc_msgSend(v44, "length");
          v59[0] = v7;
          v59[1] = 3221225472;
          v59[2] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke;
          v59[3] = &unk_1E16BBAE0;
          v61 = &v67;
          v62 = &v63;
          v46 = v44;
          v60 = v46;
          objc_msgSend(v46, "enumerateSubstringsInRange:options:usingBlock:", 0, v45, 258, v59);
          *((_DWORD *)v68 + 6) += *((_DWORD *)v64 + 6);

          _Block_object_dispose(&v63, 8);
          v14 = 0;
          v17 = 0;
          if (v16)
            goto LABEL_10;
        }
      }
      else
      {
        v14 = 0;
      }
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      self->m_autoDeleteShiftCharacter = objc_msgSend(v15, "_characterBeforeCaretSelection");

      v16 = 0;
      v17 = 1;
LABEL_10:
      if (!-[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList")
        && -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
        && (-[_UIKeyboardStateManager inputManagerState](self, "inputManagerState"),
            v18 = (void *)objc_claimAutoreleasedReturnValue(),
            v19 = objc_msgSend(v18, "inputCount"),
            v18,
            v19))
      {
        if ((v17 & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "_stringWithUnichar:", self->m_autoDeleteShiftCharacter);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "textInRange:", v16);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

        }
        v35 = objc_msgSend(v20, "length");
        if (v35 <= 1)
          v36 = 1;
        else
          v36 = v35;
        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v37, "inputCount");

        if (v36 >= v38)
          v39 = v38;
        else
          v39 = v36;
        if (v53)
        {
          v58[0] = v7;
          v58[1] = 3221225472;
          v58[2] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke_3;
          v58[3] = &unk_1E16BBB08;
          v58[4] = &v67;
          -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v58);
        }
        if (v39 >= 1)
        {
          do
          {
            -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v57[0] = v7;
            v57[1] = 3221225472;
            v57[2] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke_4;
            v57[3] = &unk_1E16BAF98;
            v57[4] = self;
            objc_msgSend(v40, "performSingleTask:", v57);

            --v39;
          }
          while (v39);
        }

      }
      else
      {
        if ((v17 & 1) == 0)
        {
          self->m_textInputChangesIgnored = 1;
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "setSelectedTextRange:", v16);

          -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
          self->m_textInputChangesIgnored = 0;
        }
        if (v53)
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "hasAsyncCapableInputDelegate");

          v24 = &__block_literal_global_993;
          if (((v17 | v23) & 1) == 0)
          {
            v25 = -[_UIKeyboardStateManager textLengthToDeleteBeforeSelectedRangeForSmartDelete](self, "textLengthToDeleteBeforeSelectedRangeForSmartDelete", &__block_literal_global_993);
            *((_DWORD *)v68 + 6) += v25;
            v56[0] = v7;
            v56[1] = 3221225472;
            v56[2] = __93___UIKeyboardStateManager_performAutoDeleteNumberOfTimes_deleteOneWord_forwardToInputSource___block_invoke_5;
            v56[3] = &unk_1E16BBB08;
            v56[4] = &v67;
            v24 = v56;
          }
          -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v24);
        }
        if ((v14 & 1) == 0)
          -[_UIKeyboardStateManager deleteBackward](self, "deleteBackward");
        -[_UIKeyboardStateManager syncInputManagerToKeyboardState](self, "syncInputManagerToKeyboardState");
        if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
        {
          -[_UIKeyboardStateManager changingContextWithTrigger:](self, "changingContextWithTrigger:", CFSTR("rapidDeletion"));
          -[_UIKeyboardStateManager removeAutocorrectPromptAndCandidateList](self, "removeAutocorrectPromptAndCandidateList");
        }
      }
      _Block_object_dispose(&v67, 8);

      ++v6;
    }
    while (v6 != a3);
  }
  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "selectedTextRange");
    v48 = (void *)objc_claimAutoreleasedReturnValue();

    if (v48)
    {
      -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "selectedTextRange");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "start");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "updateUnderlinesIfNeededAfterPosition:", v52);

    }
  }
}

- (void)deleteFromInputWithFlags:(unint64_t)a3 executionContext:(id)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id WeakRetained;
  void *v13;
  void *v14;
  _BOOL8 v15;
  _QWORD v16[5];
  _QWORD v17[5];

  v6 = a4;
  -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", 0);
  if ((a3 & 0x80) != 0)
  {
    -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
    if (!-[_UIKeyboardStateManager callShouldDeleteWithWordCountForRapidDelete:characterCountForRapidDelete:](self, "callShouldDeleteWithWordCountForRapidDelete:characterCountForRapidDelete:", 2, 3))
    {
LABEL_23:
      objc_msgSend(v6, "returnExecutionToParent");
      goto LABEL_24;
    }
    v9 = objc_alloc_init(MEMORY[0x1E0DBDC40]);
    objc_msgSend(v9, "setDeletionCount:", 1);
    objc_msgSend(v9, "setProducedByDeleteInput:", 1);
    -[_UIKeyboardStateManager performKeyboardOutput:](self, "performKeyboardOutput:", v9);
    -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
    -[_UIKeyboardStateManager updateNoContentViews](self, "updateNoContentViews");
LABEL_22:

    goto LABEL_23;
  }
  if ((a3 & 0x400) == 0
    && !-[_UIKeyboardStateManager callShouldDeleteWithWordCountForRapidDelete:characterCountForRapidDelete:](self, "callShouldDeleteWithWordCountForRapidDelete:characterCountForRapidDelete:", 2, 3))
  {
    -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
    self->m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete = 1;
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __69___UIKeyboardStateManager_deleteFromInputWithFlags_executionContext___block_invoke;
    v17[3] = &unk_1E16BAF98;
    v17[4] = self;
    objc_msgSend(v9, "addTask:", v17);
    goto LABEL_22;
  }
  -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
  -[_UIKeyboardStateManager clearTransientState](self, "clearTransientState");
  if ((a3 & 0x200) != 0 || self->m_autoDeleteOK)
  {
    if ((a3 & 0x200) != 0 || self->m_autoDeleteCount < 0x14)
    {
      v11 = 0;
      v10 = 1;
    }
    else
    {
      if (-[_UIKeyboardStateManager usesAutoDeleteWord](self, "usesAutoDeleteWord"))
        v10 = 2;
      else
        v10 = 3;
      -[_UIKeyboardStateManager setLastDeletionCountForFastDelete:](self, "setLastDeletionCountForFastDelete:", v10);
      v11 = 1;
    }
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "playDeleteKeyFeedbackIfNecessaryRepeat:rapid:", 1, v11);

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "forwardingInputDelegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14 == 0;

    -[_UIKeyboardStateManager performAutoDeleteNumberOfTimes:deleteOneWord:forwardToInputSource:](self, "performAutoDeleteNumberOfTimes:deleteOneWord:forwardToInputSource:", v10, (a3 >> 9) & 1, v15);
    self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
    self->m_didAutomaticallyInsertSpace = 0;
    -[_UIKeyboardStateManager setShiftOffIfNeeded](self, "setShiftOffIfNeeded");
    -[_UIKeyboardStateManager completeDeleteFromInput](self, "completeDeleteFromInput");
    goto LABEL_23;
  }
  if (-[_UIKeyboardStateManager userSelectedCurrentCandidate](self, "userSelectedCurrentCandidate"))
  {
    -[UIKeyboardCandidateList showCandidateAtIndex:](self->m_candidateList, "showCandidateAtIndex:", 0x7FFFFFFFFFFFFFFFLL);
    -[_UIKeyboardStateManager setUserSelectedCurrentCandidate:](self, "setUserSelectedCurrentCandidate:", 0);
  }
  if (self->m_acceptingCandidate)
  {
    -[_UIKeyboardStateManager inputManager](self, "inputManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lastAcceptedCandidateCorrected");

  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __69___UIKeyboardStateManager_deleteFromInputWithFlags_executionContext___block_invoke_4;
  v16[3] = &unk_1E16BAF98;
  v16[4] = self;
  objc_msgSend(v6, "childWithContinuation:", v16);
  v8 = objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager deleteOnceFromInputWithExecutionContext:](self, "deleteOnceFromInputWithExecutionContext:", v8);
  v6 = (id)v8;
LABEL_24:

}

- (void)completeDeleteFromInput
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];

  -[_UIKeyboardStateManager documentState](self, "documentState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __50___UIKeyboardStateManager_completeDeleteFromInput__block_invoke;
  v6[3] = &unk_1E16BB930;
  v6[4] = self;
  objc_msgSend(v3, "inputStringWithTerminatorPredicate:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v4, "length"))
  {
    -[_UIKeyboardStateManager setInitialDirection](self, "setInitialDirection");
    -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "clearSecureCandidateHashes");

  }
  -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");

}

- (void)willReplaceTextInRangedSelectionWithKeyboardInput
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "selectedTextRange");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "selectionIsWord");

  if (v5)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "selectedTextRange");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "textInRange:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v9, "length"))
    {
      -[_UIKeyboardStateManager inputManager](self, "inputManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setOriginalInput:", v9);

    }
  }
  -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
  if ((objc_msgSend(v11, "isEmpty") & 1) == 0)
    -[_UIKeyboardStateManager removeTextChoiceUnderlinesInRange:](self, "removeTextChoiceUnderlinesInRange:", v11);

}

- (id)_acquireWaitingOnPerformAutocorrect
{
  _UIKeyboardStateManager *v2;
  void *v3;
  id waitingOnPerformAutocorrect;
  void *v5;

  v2 = self;
  objc_sync_enter(v2);
  v3 = _Block_copy(v2->_waitingOnPerformAutocorrect);
  waitingOnPerformAutocorrect = v2->_waitingOnPerformAutocorrect;
  v2->_waitingOnPerformAutocorrect = 0;

  v5 = _Block_copy(v3);
  objc_sync_exit(v2);

  return v5;
}

- (void)_setWaitingOnPerformAutocorrect:(id)a3
{
  _UIKeyboardStateManager *v4;
  uint64_t v5;
  id waitingOnPerformAutocorrect;
  id v7;

  v7 = a3;
  v4 = self;
  objc_sync_enter(v4);
  v5 = objc_msgSend(v7, "copy");
  waitingOnPerformAutocorrect = v4->_waitingOnPerformAutocorrect;
  v4->_waitingOnPerformAutocorrect = (id)v5;

  objc_sync_exit(v4);
}

- (BOOL)_shouldAcceptAutocorrectionOnSelectionChange
{
  BOOL v2;
  void *v4;
  void *v5;
  void *v6;

  if (self->m_skipAcceptAutocorrection)
    return 0;
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "requestedAutocorrection") & 1) != 0)
  {
    v2 = -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText");
  }
  else
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "autocorrection");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
      v2 = 1;
    else
      v2 = -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText");

  }
  return v2;
}

- (void)acceptAutocorrectionWithCompletionHandler:(id)a3
{
  -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:requestedByRemoteInputDestination:](self, "acceptAutocorrectionWithCompletionHandler:requestedByRemoteInputDestination:", a3, 0);
}

- (void)acceptInlineCompletionWithCompletionHandler:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  _UIKeyboardLog();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v10 = "-[_UIKeyboardStateManager acceptInlineCompletionWithCompletionHandler:]";
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_DEFAULT, "%s Initiating accept inline completion", buf, 0xCu);
  }

  -[_UIKeyboardStateManager beginAcceptingInlineCompletionByDirectTap](self, "beginAcceptingInlineCompletionByDirectTap");
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __71___UIKeyboardStateManager_acceptInlineCompletionWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E16BC218;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](self, "acceptAutocorrectionWithCompletionHandler:", v7);

}

- (void)beginAcceptingInlineCompletionByDirectTap
{
  id v3;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "forwardInputDestinationEventToUIHost:", sel_beginAcceptingInlineCompletionByDirectTap);
  }
  else
  {
    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setCurrentlyAcceptingInlineCompletionByDirectTap:", 1);
  }

}

- (void)endAcceptingInlineCompletionByDirectTap
{
  id v3;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "forwardInputDestinationEventToUIHost:", sel_endAcceptingInlineCompletionByDirectTap);
  }
  else
  {
    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setCurrentlyAcceptingInlineCompletionByDirectTap:", 0);
  }

}

- (void)acceptAutocorrectionWithCompletionHandler:(id)a3 requestedByRemoteInputDestination:(BOOL)a4
{
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void (**v17)(_QWORD);
  _QWORD aBlock[5];
  id v19;
  BOOL v20;
  _QWORD v21[5];
  id v22;
  uint64_t *v23;
  SEL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint8_t buf[4];
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    v25 = 0;
    v26 = &v25;
    v27 = 0x2020000000;
    v28 = 1;
    _UIKeyboardLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v30 = "-[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:requestedByRemoteInputDestination:]";
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_DEFAULT, "%s Forwarding to keyboard UI host", buf, 0xCu);
    }

    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __103___UIKeyboardStateManager_acceptAutocorrectionWithCompletionHandler_requestedByRemoteInputDestination___block_invoke;
    v21[3] = &unk_1E16BBB50;
    v10 = v7;
    v21[4] = self;
    v22 = v10;
    v23 = &v25;
    v24 = a2;
    objc_msgSend(v9, "forwardSelectorToUIHost:completionHandler:", sel_acceptAutocorrectionWithCompletionHandler_requestedByRemoteInputDestination_, v21);

    if (!v10)
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "bundleIdentifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "hasPrefix:", CFSTR("com.apple."));

      if ((v13 & 1) == 0)
      {
        if (*((_BYTE *)v26 + 24))
        {
          v14 = *MEMORY[0x1E0C99748];
          do
          {
            objc_msgSend(MEMORY[0x1E0C99E58], "currentRunLoop");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "runMode:beforeDate:", v14, v16);

          }
          while (*((_BYTE *)v26 + 24));
        }
      }
    }

    _Block_object_dispose(&v25, 8);
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __103___UIKeyboardStateManager_acceptAutocorrectionWithCompletionHandler_requestedByRemoteInputDestination___block_invoke_3;
    aBlock[3] = &unk_1E16BAFE8;
    aBlock[4] = self;
    v20 = a4;
    v19 = v7;
    v17 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (pthread_main_np() == 1)
      v17[2](v17);
    else
      dispatch_async(MEMORY[0x1E0C80D38], v17);

  }
}

- (void)_local_acceptAutocorrection
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD aBlock[5];

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "privateInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4 || objc_msgSend(v4, "isEditing"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "hasAsyncCapableInputDelegate");

    if (v6
      && (-[_UIKeyboardStateManager taskQueue](self, "taskQueue"),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v8 = objc_msgSend(v7, "isMainThreadExecutingTask"),
          v7,
          (v8 & 1) == 0))
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __54___UIKeyboardStateManager__local_acceptAutocorrection__block_invoke;
      aBlock[3] = &unk_1E16BAF98;
      aBlock[4] = self;
      v12 = _Block_copy(aBlock);
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addTask:", v12);

    }
    else if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")
           && (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
               v9 = (void *)objc_claimAutoreleasedReturnValue(),
               objc_msgSend(v9, "keyInputDelegate"),
               v10 = (void *)objc_claimAutoreleasedReturnValue(),
               v10,
               v9,
               v10))
    {
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "unmarkText");

      self->m_textInputChangesIgnored = 0;
    }
    else
    {
      -[_UIKeyboardStateManager clearInput](self, "clearInput");
    }
  }

}

- (void)_acceptAutocorrection
{
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  char v9;
  void *v10;
  int v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  _QWORD aBlock[5];
  uint8_t buf[4];
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "privateInputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5 || objc_msgSend(v5, "isEditing"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hasAsyncCapableInputDelegate");

    if (v7)
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isMainThreadExecutingTask");

      if ((v9 & 1) == 0)
      {
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = __48___UIKeyboardStateManager__acceptAutocorrection__block_invoke;
        aBlock[3] = &unk_1E16BAF98;
        aBlock[4] = self;
        v14 = _Block_copy(aBlock);
        -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "addTask:", v14);

LABEL_35:
        goto LABEL_36;
      }
    }
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "requestedAutocorrection");

    if (v11)
    {
      _UIKeyboardImplLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        v34 = "-[_UIKeyboardStateManager _acceptAutocorrection]";
        _os_log_debug_impl(&dword_185066000, v12, OS_LOG_TYPE_DEBUG, "Detected and avoided autocorrect deadlock in %s", buf, 0xCu);
      }

    }
    else
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "autocorrection");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        v15 = 0;
        goto LABEL_13;
      }
    }
    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v13, "currentlyAcceptingInlineCompletionByDirectTap") & 1) == 0)
    {

      v14 = 0;
      goto LABEL_20;
    }
    v14 = 0;
    v15 = 1;
LABEL_13:
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "keyInputDelegate");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    if (v2)
    {
      -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
      -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "currentlyAcceptingInlineCompletionByDirectTap");

      if (v18)
      {
        -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "acceptTextCompletionWithInteraction:wordTerminator:", 2, 0);
LABEL_18:

        goto LABEL_33;
      }
      v27 = -[_UIKeyboardStateManager acceptAutocorrectionForWordTerminator:](self, "acceptAutocorrectionForWordTerminator:", 0);
LABEL_33:
      if (!-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
        -[_UIKeyboardStateManager clearInput](self, "clearInput");
      goto LABEL_35;
    }
LABEL_20:
    if (!-[_UIKeyboardStateManager currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:](self, "currentKeyboardTraitsAllowCandidateBarWhileIgnoringHidePredictionTrait:", 1)|| !-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")|| -[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList"))
    {
      goto LABEL_33;
    }
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "inputCount");
    if (!v20)
    {
      -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v2, "count"))
      {

        goto LABEL_18;
      }
    }
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "keyInputDelegate");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v20)
    if (!v22)
      goto LABEL_33;
    -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
    self->m_shouldSkipCandidateGeneration = 1;
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v23, "acceptAutocorrectionCommitsInline"))
    {
      v24 = -[TIKeyboardState userSelectedCurrentCandidate](self->m_keyboardState, "userSelectedCurrentCandidate");

      if ((v24 & 1) == 0)
      {
        v25 = -[_UIKeyboardStateManager acceptInlineCandidate](self, "acceptInlineCandidate");
LABEL_39:
        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "inputCount");

        if (v30)
        {
          -[_UIKeyboardStateManager cancelCandidateRequests](self, "cancelCandidateRequests");
          v31 = -[_UIKeyboardStateManager acceptCurrentCandidate](self, "acceptCurrentCandidate");
        }
        self->m_shouldSkipCandidateGeneration = 0;
        goto LABEL_33;
      }
    }
    else
    {

    }
    v28 = -[_UIKeyboardStateManager acceptCurrentCandidate](self, "acceptCurrentCandidate");
    goto LABEL_39;
  }
LABEL_36:

}

- (void)acceptAutocorrection
{
  void *v3;
  dispatch_time_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  _UIKeyboardStateManager *v14;
  id v15;
  _QWORD block[4];
  id v17;
  id location;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    && (-[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    objc_initWeak(&location, self);
    v4 = dispatch_time(0, 800000000);
    dispatch_get_global_queue(25, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __47___UIKeyboardStateManager_acceptAutocorrection__block_invoke;
    block[3] = &unk_1E16B3F40;
    objc_copyWeak(&v17, &location);
    dispatch_after(v4, v5, block);

    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v6;
    v11 = 3221225472;
    v12 = __47___UIKeyboardStateManager_acceptAutocorrection__block_invoke_2;
    v13 = &unk_1E16BBBE0;
    objc_copyWeak(&v15, &location);
    v14 = self;
    objc_msgSend(v7, "performSingleTask:", &v10);

    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner", v10, v11, v12, v13);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "pendingOutputOperation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:](self, "performKeyboardOutput:checkingDelegate:forwardToRemoteInputSource:", v9, 1, 0);

    objc_destroyWeak(&v15);
    objc_destroyWeak(&v17);
    objc_destroyWeak(&location);
  }
  else
  {
    -[_UIKeyboardStateManager _acceptAutocorrection](self, "_acceptAutocorrection");
  }
}

- (void)removeAutocorrection
{
  -[_UIKeyboardStateManager removeAutocorrectPrompt](self, "removeAutocorrectPrompt");
  -[_UIKeyboardStateManager setAutocorrection:](self, "setAutocorrection:", 0);
}

- (void)insertTextSuggestionCandidate:(id)a3
{
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "candidateController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "clearCurrentCandidate");

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
    && (-[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession"),
        (v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    v7 = (void *)v6;
    objc_msgSend(v17, "textSuggestion");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "textOperations");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setCustomInfo:", v8);

    objc_msgSend(v7, "textOperations");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setCustomInfoType:", 0x1E1750280);

    objc_msgSend(v7, "flushOperations");
  }
  else
  {
    objc_msgSend(v17, "textSuggestion");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "performActionWihSender:", self);
    }
    else
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setTextSuggestionList:", 0);

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "insertTextSuggestion:", v7);

      if ((v13 & 1) == 0)
      {
        if ((objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
          && !-[_UIKeyboardStateManager insertAutoFillTextSuggestion:](self, "insertAutoFillTextSuggestion:", v7)
          || !-[_UIKeyboardStateManager acceptWord:firstDelete:](self, "acceptWord:firstDelete:", v17, objc_msgSend(v17, "deleteCount")))
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "textInputDelegate");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "inputText");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v15, v16);

        }
      }
    }
    self->m_predictionType = 0;
  }

}

- (id)emojiCandidate:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v3 = a3;
  +[UIKeyboardEmojiPreferences sharedInstance](UIKeyboardEmojiPreferences, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "candidate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "currentInputMode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "primaryLanguage");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "typingNameForEmoji:language:", v5, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "candidate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "input");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v6) = objc_msgSend(v10, "isEqualToString:", v11);

  if ((_DWORD)v6)
  {
    v12 = (void *)MEMORY[0x1E0DBDBE8];
    objc_msgSend(v3, "input");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "candidateWithCandidate:forInput:", v9, v13);
    v14 = v3;
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v3, "input");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "_containsEmoji"))
    {
      +[UIKeyboardEmojiPreferences sharedInstance](UIKeyboardEmojiPreferences, "sharedInstance");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "currentInputMode");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "primaryLanguage");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "typingNameForEmoji:language:", v13, v18);
      v19 = objc_claimAutoreleasedReturnValue();

      v13 = (void *)v19;
    }
    +[UIKeyboardEmojiPreferences sharedInstance](UIKeyboardEmojiPreferences, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "candidate");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "currentInputMode");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "primaryLanguage");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "emojiPredicted:typingName:language:", v20, v13, v23);

  }
  return v3;
}

- (void)_acceptSupplementalCandidate:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  id v8;
  uint64_t (**v9)(void *, void *, id, void *);
  void *v10;
  void *v11;
  void *v12;
  _UIStringAndPositionPair *v13;
  void *v14;
  void *v15;
  id *v16;
  void *v17;
  void *v18;
  BOOL v19;
  void *v20;
  id *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, void *, void *, void *);
  void *v27;
  _UIKeyboardStateManager *v28;
  id v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v24 = MEMORY[0x1E0C809B0];
  v25 = 3221225472;
  v26 = __67___UIKeyboardStateManager__acceptSupplementalCandidate_completion___block_invoke;
  v27 = &unk_1E16BBC30;
  v28 = self;
  v8 = v7;
  v29 = v8;
  v9 = (uint64_t (**)(void *, void *, id, void *))_Block_copy(&v24);
  objc_msgSend(v6, "ui_supplementalItems", v24, v25, v26, v27, v28);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "input");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = [_UIStringAndPositionPair alloc];
  objc_msgSend(v6, "input");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "start");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[_UIStringAndPositionPair initWithString:position:]((id *)&v13->super.isa, v14, v15);

  -[_UIKeyboardStateManager pendingSupplementalCandidateToInsert](self, "pendingSupplementalCandidateToInsert");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[_UIStringAndPositionPair isEqualToPair:inputDelegate:]((uint64_t)v17, v16, v18);

  if (!v19)
  {
    -[_UIKeyboardStateManager setPendingSupplementalCandidateToInsert:](self, "setPendingSupplementalCandidateToInsert:", v16);
    if (objc_msgSend(v10, "count") == 1 || (v9[2](v9, v10, v6, v12) & 1) == 0)
    {
      -[_UIKeyboardStateManager setPendingSupplementalCandidateToInsert:](self, "setPendingSupplementalCandidateToInsert:", 0);
      v20 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
      v21 = (id *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "numberWithUnsignedLongLong:", objc_msgSend(v21[1], "identifier"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v30[0] = v22;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setSupplementalItemIdentifiers:", v23);

      (*((void (**)(id, id))v8 + 2))(v8, v6);
    }
  }

}

- (void)acceptPredictiveInput:(id)a3
{
  -[_UIKeyboardStateManager acceptPredictiveInput:appendSeparator:](self, "acceptPredictiveInput:appendSeparator:", a3, 1);
}

- (void)acceptPredictiveInput:(id)a3 appendSeparator:(BOOL)a4
{
  id v6;
  id v7;
  void *v8;
  int64_t m_cachedAutofillMode;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void (**v17)(void *, id);
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD aBlock[4];
  id v32;
  BOOL v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  id location;

  v6 = a3;
  if (v6)
  {
    v7 = v6;
    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "willAcceptPredictiveInput:", v7);

    -[_UIKeyboardStateManager acceptingCandidateWithTrigger:](self, "acceptingCandidateWithTrigger:", *MEMORY[0x1E0DBDE48]);
    m_cachedAutofillMode = self->m_cachedAutofillMode;
    if (m_cachedAutofillMode == 2)
    {
      +[_UIKeyboardUsageTracking signupPasswordFromAutofillIncrement](_UIKeyboardUsageTracking, "signupPasswordFromAutofillIncrement");
    }
    else if (m_cachedAutofillMode == 1)
    {
      +[_UIKeyboardUsageTracking loginPasswordFromAutofillIncrement](_UIKeyboardUsageTracking, "loginPasswordFromAutofillIncrement");
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[_UIKeyboardStateManager insertTextSuggestionCandidate:](self, "insertTextSuggestionCandidate:", v7);
    }
    else
    {
      if (_os_feature_enabled_impl() && (objc_msgSend(v7, "candidateProperty") & 0x10) != 0)
      {
        +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "textInputTraits");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "inputContextHistory");
        v15 = (id)objc_claimAutoreleasedReturnValue();

        if (+[_UISmartReplyFeedbackManager candidateIsSmartReply:](_UISmartReplyFeedbackManager, "candidateIsSmartReply:", v7))
        {
          -[_UIKeyboardStateManager smartReplyFeedbackManager](self, "smartReplyFeedbackManager");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "label");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "threadIdentifier");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "userSelectedSmartReply:isLongForm:withMailOrMsgThreadId:", v24, 1, v26);

        }
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "textInputDelegate");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "candidate");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "tiInputContextHistory");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "_startWritingToolsWithTool:prompt:entryPoint:inputContextHistory:sender:", CFSTR("WTUIRequestedToolSmartReply"), 0, v29, v30, self);

      }
      else
      {
        if ((objc_opt_respondsToSelector() & 1) == 0
          || (objc_msgSend(v7, "candidateProperty") & 0x10) == 0
          || (-[_UIKeyboardStateManager backendController](self, "backendController"),
              v10 = (void *)objc_claimAutoreleasedReturnValue(),
              v11 = objc_opt_respondsToSelector(),
              v10,
              (v11 & 1) == 0))
        {
          objc_initWeak(&location, self);
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __65___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator___block_invoke_3;
          aBlock[3] = &unk_1E16BBCD0;
          objc_copyWeak(&v32, &location);
          v33 = a4;
          v17 = (void (**)(void *, id))_Block_copy(aBlock);
          if (objc_msgSend(v7, "isSupplementalItemCandidate"))
          {
            -[_UIKeyboardStateManager _acceptSupplementalCandidate:completion:](self, "_acceptSupplementalCandidate:completion:", v7, v17);
          }
          else
          {
            objc_msgSend(v7, "candidate");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "_containsEmoji");

            if (v19)
            {
              -[_UIKeyboardStateManager emojiCandidate:](self, "emojiCandidate:", v7);
              v20 = objc_claimAutoreleasedReturnValue();

              v7 = (id)v20;
            }
            v17[2](v17, v7);
          }

          objc_destroyWeak(&v32);
          objc_destroyWeak(&location);
          goto LABEL_24;
        }
        +[UIKeyboardImpl sendPerformanceNotification:](UIKeyboardImpl, "sendPerformanceNotification:", CFSTR("UIKeyboardPerformanceSearchCandidatesStartNotification"));
        -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
        v12 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
        objc_msgSend(MEMORY[0x1E0DBDB58], "tokenForKeyboardState:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager setCurrentCandidateRequest:](self, "setCurrentCandidateRequest:", v13);
        objc_initWeak(&location, self);
        -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = __65___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator___block_invoke;
        v34[3] = &unk_1E16BBC80;
        objc_copyWeak(&v38, &location);
        v7 = v7;
        v35 = v7;
        v15 = v12;
        v36 = v15;
        v16 = v13;
        v37 = v16;
        objc_msgSend(v14, "addTask:", v34);

        objc_destroyWeak(&v38);
        objc_destroyWeak(&location);

      }
    }
LABEL_24:

  }
}

- (void)rejectAutocorrection:(id)a3
{
  id v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  v4 = a3;
  if (v4)
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __48___UIKeyboardStateManager_rejectAutocorrection___block_invoke;
    v6[3] = &unk_1E16BB0D8;
    v6[4] = self;
    v7 = v4;
    objc_msgSend(v5, "addTask:", v6);

  }
}

- (BOOL)insertsSpaceAfterPredictiveInput
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "insertsSpaceAfterPredictiveInput");

  return v3;
}

- (void)textAccepted:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _UIKeyboardStateManager *v16;
  id v17;

  v4 = a3;
  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_msgSend(v4, "candidateProperty") & 4) != 0)
  {
    v6 = (void *)MEMORY[0x1E0DBDBE8];
    objc_msgSend(v4, "candidate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "input");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "candidateWithCandidate:forInput:property:", v7, v8, objc_msgSend(v4, "candidateProperty"));
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = v4;
  }
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "currentInputMode");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __40___UIKeyboardStateManager_textAccepted___block_invoke;
  v14[3] = &unk_1E16BB128;
  v15 = v10;
  v16 = self;
  v17 = v5;
  v12 = v5;
  v13 = v10;
  objc_msgSend(v11, "addTask:", v14);

}

- (void)textAccepted:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _UIKeyboardStateManager *v12;

  v6 = a4;
  v7 = a3;
  -[_UIKeyboardStateManager inputManager](self, "inputManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __57___UIKeyboardStateManager_textAccepted_executionContext___block_invoke;
  v10[3] = &unk_1E16BB3E0;
  v11 = v6;
  v12 = self;
  v9 = v6;
  objc_msgSend(v8, "textAccepted:completionHandler:", v7, v10);

}

- (BOOL)shouldForwardInsertSpaceAfterAcceptingPredictiveInput:(id)a3
{
  return objc_msgSend(a3, "shouldInsertSpaceAfterSelection");
}

- (BOOL)acceptAutofillExtraCandidateIfNeeded:(id)a3
{
  id v4;
  unint64_t v5;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  v5 = objc_msgSend(v4, "customInfoType");
  if ((v5 & 0x20) != 0)
  {
    if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __64___UIKeyboardStateManager_acceptAutofillExtraCandidateIfNeeded___block_invoke;
      v8[3] = &unk_1E16BB538;
      v9 = v4;
      -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v8);

    }
    else
    {
      UIKeyboardSafariPresentCredentialPickerForType(1);
      +[_UIKeyboardUsageTracking appAutofillExtraKeyTapped](_UIKeyboardUsageTracking, "appAutofillExtraKeyTapped");
    }
  }

  return (v5 >> 5) & 1;
}

- (void)acceptPredictiveInput:(id)a3 executionContext:(id)a4
{
  -[_UIKeyboardStateManager acceptPredictiveInput:appendSeparator:executionContext:](self, "acceptPredictiveInput:appendSeparator:executionContext:", a3, 1, a4);
}

- (void)acceptPredictiveInput:(id)a3 appendSeparator:(BOOL)a4 executionContext:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void (**v11)(void);
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  BOOL v18;
  BOOL v19;
  void *v20;
  id v21;
  void *v22;
  void **p_cache;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  __CFString *v30;
  int v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  int v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  int v52;
  __CFString *v53;
  void *v54;
  __CFString *v55;
  _QWORD v56[5];
  id v57;
  BOOL v58;
  _QWORD v59[5];
  __CFString *v60;
  id v61;

  v8 = a3;
  v9 = a5;
  if (-[_UIKeyboardStateManager acceptAutofillExtraCandidateIfNeeded:](self, "acceptAutofillExtraCandidateIfNeeded:", v8))
  {
    goto LABEL_5;
  }
  if ((objc_msgSend(v8, "customInfoType") & 0x8000) == 0)
  {
    objc_msgSend(v8, "handler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend(v8, "handler");
      v11 = (void (**)(void))objc_claimAutoreleasedReturnValue();
      v11[2]();

LABEL_5:
      objc_msgSend(v9, "returnExecutionToParent");
      goto LABEL_9;
    }
    if (_os_feature_enabled_impl()
      && (objc_opt_respondsToSelector() & 1) != 0
      && objc_msgSend(v8, "isHideMyEmailType"))
    {
      -[_UIKeyboardStateManager proceedShouldReturnIfNeededForASP](self, "proceedShouldReturnIfNeededForASP");
    }
    if (a4)
    {
      if (-[_UIKeyboardStateManager insertsSpaceAfterPredictiveInput](self, "insertsSpaceAfterPredictiveInput")
        || (objc_msgSend(v8, "isContinuousPathConversion") & 1) == 0)
      {
        -[_UIKeyboardStateManager shouldForwardInsertSpaceAfterAcceptingPredictiveInput:](self, "shouldForwardInsertSpaceAfterAcceptingPredictiveInput:", v8);
        goto LABEL_22;
      }
      v17 = objc_msgSend(v8, "shouldAccept");
      v18 = -[_UIKeyboardStateManager shouldForwardInsertSpaceAfterAcceptingPredictiveInput:](self, "shouldForwardInsertSpaceAfterAcceptingPredictiveInput:", v8);
      if ((v17 & 1) == 0)
      {
LABEL_22:
        p_cache = &OBJC_METACLASS____UINavigationBarTitleFontProvider.cache;
        +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "nextCandidateReplacementSource");

        if (v25 == 7)
        {
          if ((objc_msgSend(v8, "isToucanInlineCompletionCandidate") & 1) != 0)
          {
LABEL_27:
            -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "wordSeparator");
            v30 = (__CFString *)objc_claimAutoreleasedReturnValue();

            v31 = objc_msgSend(v8, "isAutofillCandidate");
            if (-[_UIKeyboardStateManager textInputTraitsNeedContactAutoFill](self, "textInputTraitsNeedContactAutoFill"))
            {
              -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "autocorrectionList");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = objc_msgSend(v33, "containsProactiveTriggers");

            }
            else
            {
              v34 = 0;
            }
            if (objc_msgSend(v8, "isSlottedCandidate"))
            {
              -[UITextInputTraits textContentType](self->m_traits, "textContentType");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              if (v35)
              {
                -[UITextInputTraits textContentType](self->m_traits, "textContentType");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                v37 = objc_msgSend(v36, "isEqualToString:", &stru_1E16EDF20) ^ 1;

              }
              else
              {
                v37 = 0;
              }

            }
            else
            {
              v37 = 0;
            }
            if (v30)
            {
              objc_msgSend(v8, "candidate");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              v39 = objc_msgSend(v38, "hasSuffix:", v30);

            }
            else
            {
              v39 = 1;
            }
            -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
            v40 = objc_claimAutoreleasedReturnValue();
            if (v40)
            {
              v41 = (void *)v40;
              v55 = v30;
              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "selectedTextRange");
              v43 = v34;
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              v45 = objc_msgSend(v44, "isEmpty") ^ 1 | v31 | v43 | v37 | v39;

              if (v45 == 1)
              {

                v30 = &stru_1E16EDF20;
                p_cache = (void **)(&OBJC_METACLASS____UINavigationBarTitleFontProvider + 16);
              }
              else
              {
                p_cache = &OBJC_METACLASS____UINavigationBarTitleFontProvider.cache;
                v30 = v55;
              }
            }
            -[_UIKeyboardStateManager inputEventForInputString:](self, "inputEventForInputString:", v30);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "setAcceptedCandidate:", v8);
            objc_msgSend(v46, "setSynthesizedByAcceptingCandidate:", 1);
            if (v31)
            {
              objc_msgSend(MEMORY[0x1E0DBDB48], "listWithCorrections:predictions:", 0, 0);
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v48, "setAutocorrectionList:", v47);
            }
            else
            {
              v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DBDB70]), "initWithAutocorrection:alternateCorrections:", v8, 0);
              objc_msgSend(MEMORY[0x1E0DBDB48], "listWithCorrections:predictions:", v47, 0);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v49, "setAutocorrectionList:", v48);

            }
            -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", 0);
            self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
            objc_msgSend(v8, "candidate");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager removeSpaceAfterEmojiForInputString:](self, "removeSpaceAfterEmojiForInputString:", v50);

            objc_msgSend(v8, "candidate");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = objc_msgSend(v51, "_containsEmojiOnly");

            if (v52)
              objc_msgSend(p_cache + 28, "emojiInsertedByMethod:inputType:", CFSTR("Touch"), CFSTR("PredictionBar"));
            self->m_didAutomaticallyInsertSpace = 0;
            v59[0] = MEMORY[0x1E0C809B0];
            v59[1] = 3221225472;
            v59[2] = __82___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator_executionContext___block_invoke;
            v59[3] = &unk_1E16BB128;
            v59[4] = self;
            v60 = v30;
            v61 = v8;
            v53 = v30;
            objc_msgSend(v9, "childWithContinuation:", v59);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager addInputEvent:executionContext:](self, "addInputEvent:executionContext:", v46, v54);

            goto LABEL_9;
          }
          +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = v26;
          v28 = 4;
        }
        else
        {
          +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = v26;
          v28 = 5;
        }
        objc_msgSend(v26, "setNextCandidateReplacementSource:", v28);

        goto LABEL_27;
      }
    }
    else
    {
      v18 = -[_UIKeyboardStateManager shouldForwardInsertSpaceAfterAcceptingPredictiveInput:](self, "shouldForwardInsertSpaceAfterAcceptingPredictiveInput:", v8);
    }
    v19 = v18;
    +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setNextCandidateReplacementSource:", 2);

    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3221225472;
    v56[2] = __82___UIKeyboardStateManager_acceptPredictiveInput_appendSeparator_executionContext___block_invoke_2;
    v56[3] = &unk_1E16BB010;
    v56[4] = self;
    v21 = v8;
    v57 = v21;
    v58 = v19;
    objc_msgSend(v9, "childWithContinuation:", v56);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager acceptAutocorrection:executionContextPassingTIKeyboardCandidate:](self, "acceptAutocorrection:executionContextPassingTIKeyboardCandidate:", v21, v22);

    goto LABEL_9;
  }
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "_responderForEditing");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "autocorrectionList");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    self->m_skipAcceptAutocorrection = 1;
    objc_msgSend(v13, "performSelector:withObject:", sel__showTextFormattingAnimationOptions_, 0);
    self->m_skipAcceptAutocorrection = 0;
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setAutocorrectionList:", v15);

  }
  objc_msgSend(v9, "returnExecutionToParent");

LABEL_9:
}

- (void)acceptCandidate:(id)a3
{
  -[_UIKeyboardStateManager acceptCandidate:forInput:](self, "acceptCandidate:forInput:", a3, 0);
}

- (void)acceptCandidate:(id)a3 forInput:(id)a4
{
  id v6;
  id v7;
  int v8;
  TIKeyboardCandidateResultSet *m_candidateResultSet;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  int v63;
  id WeakRetained;
  id v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  int v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[4];
  id v83;
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (!-[_UIKeyboardStateManager committingCandidate](self, "committingCandidate"))
  {
    v8 = 1;
    -[_UIKeyboardStateManager setCommittingCandidate:](self, "setCommittingCandidate:", 1);
    -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
    m_candidateResultSet = self->m_candidateResultSet;
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    if (m_candidateResultSet)
    {
      -[TIKeyboardCandidateResultSet candidates](m_candidateResultSet, "candidates");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "indexOfObject:", v6);

      if (v12 != 0x7FFFFFFFFFFFFFFFLL)
      {
        -[UIKeyboardCandidateList candidateAcceptedAtIndex:](self->m_candidateList, "candidateAcceptedAtIndex:", v12);
        v8 = 0;
        v10 = v12;
      }
    }
    if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled"))
    {
      if (-[_UIKeyboardStateManager shouldUnderlineCandidate:](self, "shouldUnderlineCandidate:", v6))
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "storedListForCandidate:", v6);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "addList:forCandidate:", v14, v6);

        objc_msgSend(v6, "candidate");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        +[UITextChecker setString:isExemptFromChecker:](UITextChecker, "setString:isExemptFromChecker:", v16, 1);
LABEL_8:

        goto LABEL_12;
      }
      if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
      {
        if ((objc_msgSend(v6, "isAutocorrection") & 1) == 0)
        {
          objc_msgSend(v6, "candidate");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "input");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend(v17, "isEqualToString:", v18);

          if ((v19 & 1) == 0)
          {
            objc_msgSend(v6, "input");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager _rangeForAutocorrectionText:](self, "_rangeForAutocorrectionText:", v67);
            v14 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v6, "candidate");
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            v69 = objc_msgSend(v68, "length");
            objc_msgSend(v6, "input");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            v71 = v69 - objc_msgSend(v70, "length");

            -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "start");
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "adjustRangesAfterPosition:byOffset:", v72, v71);

            goto LABEL_8;
          }
        }
      }
    }
LABEL_12:
    if (v6)
    {
      -[UIKeyboardCandidateList currentCandidate](self->m_candidateList, "currentCandidate");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend((id)objc_opt_class(), "type");

      if (v21 != 3)
      {
        UIKeyboardGetCurrentInputMode();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIKeyboardCandidateList statisticsIdentifier](self->m_candidateList, "statisticsIdentifier");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        TIStatisticGetKeyForCandidateAccepted();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        TIStatisticScalarIncrement();

        if (v8)
        {
          -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v82[0] = MEMORY[0x1E0C809B0];
          v82[1] = 3221225472;
          v82[2] = __52___UIKeyboardStateManager_acceptCandidate_forInput___block_invoke;
          v82[3] = &unk_1E16BBD20;
          v83 = v6;
          v10 = objc_msgSend(v26, "indexOfObjectPassingTest:", v82);

        }
        if (self->m_hasEditedMarkedTextInExtendedView)
        {
          TIStatisticGetKeyForCandidateAccepted();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        TIStatisticGetKeyForCandidateAccepted();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "candidate");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "length");
        TIStatisticDistributionPushValue();

        if (objc_msgSend(v6, "isExtensionCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isCompletionCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isInlineCompletionCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isForShortcutConversion"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isEmojiCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isStickerCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isFacemarkCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isOTAWordListCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isRegionalCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if ((objc_msgSend(v6, "isCompletionCandidate") & 1) == 0 && !v10)
        {
          TIStatisticGetKeyForCandidateAccepted();
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isFullwidthCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isPunctuationKeyCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (objc_msgSend(v6, "isPunctuationCompletionCandidate"))
        {
          TIStatisticGetKeyForCandidateAccepted();
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

        }
        if (v10 != 0x7FFFFFFFFFFFFFFFLL)
        {
          TIStatisticGetKeyForCandidateAccepted();
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticDistributionPushValue();

          if ((objc_opt_respondsToSelector() & 1) != 0
            && -[UIKeyboardCandidateList rowForCandidateAtIndex:](self->m_candidateList, "rowForCandidateAtIndex:", v10) != 0x7FFFFFFFFFFFFFFFLL)
          {
            TIStatisticGetKeyForCandidateAccepted();
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            TIStatisticDistributionPushValue();

          }
          v76 = v8;
          if ((objc_opt_respondsToSelector() & 1) != 0
            && -[UIKeyboardCandidateList viewOffsetForCandidateAtIndex:](self->m_candidateList, "viewOffsetForCandidateAtIndex:", v10) != 0x7FFFFFFFFFFFFFFFLL)
          {
            TIStatisticGetKeyForCandidateAccepted();
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            TIStatisticDistributionPushValue();

          }
          v73 = v24;
          v74 = v23;
          v75 = v22;
          v77 = v7;
          v46 = objc_msgSend(v6, "isOTAWordListCandidate");
          v47 = objc_msgSend(v6, "isRegionalCandidate");
          v78 = 0u;
          v79 = 0u;
          v80 = 0u;
          v81 = 0u;
          -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v78, v84, 16);
          if (v49)
          {
            v50 = v49;
            v51 = 0;
            v52 = *(_QWORD *)v79;
            do
            {
              for (i = 0; i != v50; ++i)
              {
                if (*(_QWORD *)v79 != v52)
                  objc_enumerationMutation(v48);
                v54 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * i);
                if ((v46 & 1) != 0)
                {
                  v46 = 1;
                  if ((v47 & 1) == 0)
                    goto LABEL_59;
                }
                else
                {
                  v46 = objc_msgSend(*(id *)(*((_QWORD *)&v78 + 1) + 8 * i), "isOTAWordListCandidate");
                  if ((v47 & 1) == 0)
                  {
LABEL_59:
                    v47 = objc_msgSend(v54, "isRegionalCandidate");
                    goto LABEL_62;
                  }
                }
                v47 = 1;
LABEL_62:
                if (v51 + i == 9)
                  goto LABEL_65;
              }
              v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v78, v84, 16);
              v51 += i;
            }
            while (v50);
          }
LABEL_65:

          v24 = v73;
          v23 = v74;
          if (v46)
          {
            TIStatisticGetKeyForCandidateAccepted();
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            TIStatisticScalarIncrement();

          }
          v7 = v77;
          v8 = v76;
          v22 = v75;
          if (v47)
          {
            TIStatisticGetKeyForCandidateAccepted();
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            TIStatisticScalarIncrement();

          }
        }

      }
      v57 = (void *)objc_msgSend(v6, "copy");

      self->m_acceptingCandidate = 1;
      if (!v8
        || (objc_msgSend(v57, "candidate"),
            v58 = (void *)objc_claimAutoreleasedReturnValue(),
            v59 = objc_msgSend(v58, "length"),
            v58,
            v59))
      {
        objc_msgSend(v57, "candidate");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", v60);

      }
      -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v61, "commitsAcceptedCandidate"))
      {

LABEL_77:
        WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        objc_msgSend(WeakRetained, "setSuppressUpdateCandidateView:", 1);

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          -[_UIKeyboardStateManager insertTextSuggestionCandidate:](self, "insertTextSuggestionCandidate:", v57);
        else
          -[_UIKeyboardStateManager acceptWord:firstDelete:forInput:](self, "acceptWord:firstDelete:forInput:", v57, objc_msgSend(v57, "deleteCount"), v7);
        v65 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        objc_msgSend(v65, "setSuppressUpdateCandidateView:", 0);

LABEL_81:
        if (-[UIKeyboardCandidateList isFloatingList](self->m_candidateList, "isFloatingList")
          && (-[UIKeyboardCandidateList isExtendedList](self->m_candidateList, "isExtendedList") & 1) != 0)
        {
          v66 = 0;
        }
        else if ((-[UIKeyboardCandidateList isFloatingList](self->m_candidateList, "isFloatingList") & 1) != 0)
        {
          v66 = 1;
        }
        else
        {
          v66 = -[UIKeyboardCandidateList isExtendedList](self->m_candidateList, "isExtendedList") ^ 1;
        }
        -[_UIKeyboardStateManager clearInputWithCandidatesCleared:](self, "clearInputWithCandidatesCleared:", v66);
        goto LABEL_88;
      }
      v62 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v63 = objc_msgSend(v62, "keyboardLayoutIsInAnotherProcess");

      if (v63)
        goto LABEL_77;
      -[TIKeyboardState setUserSelectedCurrentCandidate:](self->m_keyboardState, "setUserSelectedCurrentCandidate:", 0);
      self->m_doubleSpacePeriodWasAppliedInCurrentContext = 0;
      if (objc_msgSend((id)objc_opt_class(), "type") != 3)
      {
        -[_UIKeyboardStateManager handleDeletionForCandidate:](self, "handleDeletionForCandidate:", v57);
        goto LABEL_81;
      }
    }
    else
    {
      v57 = 0;
    }
LABEL_88:
    -[_UIKeyboardStateManager setCommittingCandidate:](self, "setCommittingCandidate:", 0);
    v6 = v57;
  }

}

- (void)handleDeletionForCandidate:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  _QWORD v10[5];

  v4 = a3;
  v5 = objc_msgSend(v4, "deleteCount");
  objc_msgSend(v4, "candidate");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "callShouldReplaceExtendedRange:withText:includeMarkedText:", v5, v9, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"));

      if (v8)
      {
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 3221225472;
        v10[2] = __54___UIKeyboardStateManager_handleDeletionForCandidate___block_invoke;
        v10[3] = &__block_descriptor_40_e26_v16__0__TIKeyboardOutput_8l;
        v10[4] = v5;
        -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:](self, "performKeyboardOutputOnInputSourceSession:", v10);
        -[_UIKeyboardStateManager deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:](self, "deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:", 0, v5, 0);
        -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");
      }
    }
  }

}

- (void)acceptHandwritingCandidate
{
  id WeakRetained;
  void *v4;
  int v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isHandwritingPlane");

  if (v5)
    v6 = -[_UIKeyboardStateManager acceptCurrentCandidate](self, "acceptCurrentCandidate");
}

- (id)acceptCurrentCandidate
{
  return -[_UIKeyboardStateManager acceptCurrentCandidateForInput:](self, "acceptCurrentCandidateForInput:", 0);
}

- (id)acceptInlineCandidate
{
  return -[_UIKeyboardStateManager acceptInlineCandidateForInput:](self, "acceptInlineCandidateForInput:", 0);
}

- (id)acceptCurrentCandidateForInput:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v15[4];
  id v16;
  id v17;
  _QWORD aBlock[5];

  v4 = a3;
  -[UIKeyboardCandidateList currentCandidate](self->m_candidateList, "currentCandidate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    -[TIKeyboardCandidateResultSet defaultCandidate](self->m_candidateResultSet, "defaultCandidate");
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[_UIKeyboardStateManager insertTextSuggestionCandidate:](self, "insertTextSuggestionCandidate:", v8);
    v9 = v8;
  }
  else
  {
    v10 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __58___UIKeyboardStateManager_acceptCurrentCandidateForInput___block_invoke;
    aBlock[3] = &unk_1E16BBD68;
    aBlock[4] = self;
    v11 = _Block_copy(aBlock);
    if (objc_msgSend(v8, "isSupplementalItemCandidate"))
    {
      v15[0] = v10;
      v15[1] = 3221225472;
      v15[2] = __58___UIKeyboardStateManager_acceptCurrentCandidateForInput___block_invoke_3;
      v15[3] = &unk_1E16BBD90;
      v17 = v11;
      v16 = v4;
      -[_UIKeyboardStateManager _acceptSupplementalCandidate:completion:](self, "_acceptSupplementalCandidate:completion:", v8, v15);
      v12 = v8;

    }
    else
    {
      if ((objc_msgSend(v8, "customInfoType") & 0x20) != 0)
        -[_UIKeyboardStateManager acceptAutofillExtraCandidateIfNeeded:](self, "acceptAutofillExtraCandidateIfNeeded:", v8);
      (*((void (**)(void *, void *, id))v11 + 2))(v11, v8, v4);
      v13 = v8;
    }

  }
  return v8;
}

- (id)acceptInlineCandidateForInput:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v12[5];
  id v13;
  id v14;

  v4 = a3;
  -[TIKeyboardCandidateResultSet defaultCandidate](self->m_candidateResultSet, "defaultCandidate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __57___UIKeyboardStateManager_acceptInlineCandidateForInput___block_invoke;
  v12[3] = &unk_1E16BB128;
  v12[4] = self;
  v7 = v5;
  v13 = v7;
  v14 = v4;
  v8 = v4;
  objc_msgSend(v6, "performSingleTask:", v12);

  v9 = v14;
  v10 = v7;

  return v10;
}

- (void)acceptCandidate:(id)a3 forInput:(id)a4 executionContext:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *);
  void *v15;
  _UIKeyboardStateManager *v16;
  id v17;

  v8 = a3;
  v9 = a5;
  -[_UIKeyboardStateManager acceptCandidate:forInput:](self, "acceptCandidate:forInput:", v8, a4);
  -[_UIKeyboardStateManager flushKeyboardOutputOnInputSourceSession](self, "flushKeyboardOutputOnInputSourceSession");
  if (-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists"))
  {
    objc_msgSend(v9, "returnExecutionToParent");

  }
  else
  {
    v12 = MEMORY[0x1E0C809B0];
    v13 = 3221225472;
    v14 = __69___UIKeyboardStateManager_acceptCandidate_forInput_executionContext___block_invoke;
    v15 = &unk_1E16BB0D8;
    v16 = self;
    v10 = v8;
    v17 = v10;
    objc_msgSend(v9, "childWithContinuation:", &v12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager handleAcceptedCandidate:executionContext:](self, "handleAcceptedCandidate:executionContext:", v10, v11, v12, v13, v14, v15, v16);
  }

}

- (void)acceptFirstCandidate
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v16[5];
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v7);
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if (v8 != v9)
        {
          if ((objc_msgSend(v8, "isSupplementalItemCandidate") & 1) != 0)
            v10 = 0;
          else
            v10 = v8;
          if (objc_msgSend(v8, "supplementalItemPrefix"))
          {
            objc_msgSend(v8, "supplementalItemIdentifiers");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = objc_msgSend(v11, "count");

            if (v12 == 1)
            {
              v13 = v8;

              v10 = v13;
            }
          }
          if (-[_UIKeyboardStateManager liveConversionEnabled](self, "liveConversionEnabled")
            && (objc_msgSend(v8, "isInlineCandidate") & 1) == 0)
          {

          }
          else if (v10)
          {

            goto LABEL_21;
          }
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v5);
  }

  -[TIKeyboardCandidateResultSet defaultCandidate](self->m_candidateResultSet, "defaultCandidate");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
LABEL_21:
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __47___UIKeyboardStateManager_acceptFirstCandidate__block_invoke;
    v16[3] = &unk_1E16BB0D8;
    v16[4] = self;
    v17 = v10;
    v15 = v10;
    objc_msgSend(v14, "performTask:", v16);

  }
}

- (BOOL)userSelectedCurrentCandidate
{
  return -[TIKeyboardState userSelectedCurrentCandidate](self->m_keyboardState, "userSelectedCurrentCandidate");
}

- (void)setUserSelectedCurrentCandidate:(BOOL)a3
{
  -[TIKeyboardState setUserSelectedCurrentCandidate:](self->m_keyboardState, "setUserSelectedCurrentCandidate:", a3);
}

- (void)acceptCurrentCandidateIfSelected
{
  id WeakRetained;
  char v4;
  void *v5;
  _QWORD v6[5];

  if (-[_UIKeyboardStateManager userSelectedCurrentCandidate](self, "userSelectedCurrentCandidate"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v4 = objc_msgSend(WeakRetained, "geometryIsChanging");

    if ((v4 & 1) == 0)
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __59___UIKeyboardStateManager_acceptCurrentCandidateIfSelected__block_invoke;
      v6[3] = &unk_1E16BAF98;
      v6[4] = self;
      objc_msgSend(v5, "performSingleTask:", v6);

    }
  }
}

- (void)acceptCurrentCandidateIfSelectedWithExecutionContext:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *);
  void *v11;
  _UIKeyboardStateManager *v12;
  id v13;

  v4 = a3;
  if (-[_UIKeyboardStateManager userSelectedCurrentCandidate](self, "userSelectedCurrentCandidate"))
  {
    -[UIKeyboardCandidateList currentCandidate](self->m_candidateList, "currentCandidate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager acceptCandidate:](self, "acceptCandidate:", v5);
    -[_UIKeyboardStateManager flushKeyboardOutputOnInputSourceSession](self, "flushKeyboardOutputOnInputSourceSession");
    v8 = MEMORY[0x1E0C809B0];
    v9 = 3221225472;
    v10 = __80___UIKeyboardStateManager_acceptCurrentCandidateIfSelectedWithExecutionContext___block_invoke;
    v11 = &unk_1E16BB0D8;
    v12 = self;
    v13 = v5;
    v6 = v5;
    objc_msgSend(v4, "childWithContinuation:", &v8);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager handleAcceptedCandidate:executionContext:](self, "handleAcceptedCandidate:executionContext:", v6, v7, v8, v9, v10, v11, v12);

  }
  else
  {
    objc_msgSend(v4, "returnExecutionToParent");
  }

}

- (void)completeAcceptCandidate:(id)a3
{
  void *v5;
  uint64_t v6;
  _BOOL4 v7;

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "inputCount");

  if (v6)
  {
    -[_UIKeyboardStateManager completeAddInputString:](self, "completeAddInputString:", 0);
    if (!a3)
      return;
    goto LABEL_10;
  }
  if (!self->m_shouldSkipCandidateGeneration)
  {
    v7 = -[_UIKeyboardStateManager suppliesCompletions](self, "suppliesCompletions");
    if (a3)
    {
      if (v7)
      {
        -[_UIKeyboardStateManager generateCandidatesWithOptions:](self, "generateCandidatesWithOptions:", 2);
        -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
        -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
        goto LABEL_10;
      }
    }
  }
  -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
  if (a3)
LABEL_10:
    -[_UIKeyboardStateManager _postInputResponderCapabilitiesChangedNotificationWithOutput:selectionChanged:](self, "_postInputResponderCapabilitiesChangedNotificationWithOutput:selectionChanged:", 0, 0);
}

- (void)candidateListAcceptCandidate:(id)a3
{
  UIKeyboardCandidateList *v4;
  void *v5;
  int v6;
  void *v7;
  id v8;
  _QWORD v9[5];

  v4 = (UIKeyboardCandidateList *)a3;
  -[_UIKeyboardStateManager acceptingCandidateWithTrigger:](self, "acceptingCandidateWithTrigger:", *MEMORY[0x1E0DBDE48]);
  if (self->m_candidateList == v4)
  {
    -[UIKeyboardCandidateList currentCandidate](v4, "currentCandidate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend((id)objc_opt_class(), "type");

    if (v6 != 3)
      -[_UIKeyboardStateManager trackUsageForCandidateAcceptedAction:](self, "trackUsageForCandidateAcceptedAction:", *MEMORY[0x1E0DBE5D8]);
    if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
      && !-[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList"))
    {
      v8 = -[_UIKeyboardStateManager acceptCurrentCandidate](self, "acceptCurrentCandidate");
    }
    else
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __56___UIKeyboardStateManager_candidateListAcceptCandidate___block_invoke;
      v9[3] = &unk_1E16BAF98;
      v9[4] = self;
      objc_msgSend(v7, "performTask:", v9);

    }
  }

}

- (void)candidateListSelectionDidChange:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  BOOL v9;
  UIKeyboardCandidateList *v10;
  BOOL v11;
  id WeakRetained;
  void *v13;
  char v14;
  UIKeyboardCandidateList *v15;

  v15 = (UIKeyboardCandidateList *)a3;
  v4 = -[UIKeyboardCandidateList currentIndex](v15, "currentIndex");
  if (v4 != -[TIKeyboardCandidateResultSet initialSelectedIndex](self->m_candidateResultSet, "initialSelectedIndex"))
  {
    -[UIKeyboardCandidateList currentCandidate](v15, "currentCandidate");
    v5 = objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = (void *)v5;
      -[UIKeyboardCandidateList currentCandidate](v15, "currentCandidate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend((id)objc_opt_class(), "type");

      if (v8 != 3)
        -[_UIKeyboardStateManager setUserSelectedCurrentCandidate:](self, "setUserSelectedCurrentCandidate:", 1);
    }
  }
  v9 = -[_UIKeyboardStateManager committingCandidate](self, "committingCandidate");
  v10 = v15;
  if (!v9 && self->m_candidateList == v15)
  {
    v11 = -[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists");
    v10 = v15;
    if (!v11)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "layout");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "hasActiveContinuousPathInput");

      v10 = v15;
      if ((v14 & 1) == 0)
      {
        -[_UIKeyboardStateManager syncInputManagerToKeyboardState](self, "syncInputManagerToKeyboardState");
        -[_UIKeyboardStateManager updateKeyboardConfigurations](self, "updateKeyboardConfigurations");
        v10 = v15;
      }
    }
  }

}

- (void)candidateListInvalidateSelection:(id)a3
{
  -[_UIKeyboardStateManager setUserSelectedCurrentCandidate:](self, "setUserSelectedCurrentCandidate:", 0);
}

- (void)clearInput
{
  _BOOL8 v3;

  v3 = !-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists")
    && !-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
    || !self->m_hasInputOnAcceptCandidate;
  -[_UIKeyboardStateManager clearInputWithCandidatesCleared:](self, "clearInputWithCandidatesCleared:", v3);
}

- (void)clearInputWithCandidatesCleared:(BOOL)a3
{
  _BOOL4 v3;
  int v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  v3 = a3;
  -[_UIKeyboardStateManager clearInputForMarkedText](self, "clearInputForMarkedText");
  if (v3)
  {
    if (!self->m_disableClearingTextSuggestions)
    {
      if (self->m_textInputUpdatingSelection)
        v5 = !-[_UIKeyboardStateManager noContent](self, "noContent");
      else
        LOBYTE(v5) = 1;
      if ((v5 & self->m_shouldClearTextSuggestions) != 0)
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "clearAutofillAndTextSuggestions");

      }
    }
    if (-[_UIKeyboardStateManager noContent](self, "noContent"))
    {
      -[_UIKeyboardStateManager removeTextChoiceUnderlines](self, "removeTextChoiceUnderlines");
      -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
    }
    -[_UIKeyboardStateManager setAutocorrection:](self, "setAutocorrection:", 0);
    -[_UIKeyboardStateManager setCandidates:](self, "setCandidates:", 0);
    -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
    if (self->_isSettingExtensionInputMode)
      self->_needsUpdateAssistantView = 1;
    else
      -[_UIKeyboardStateManager updateAssistantView](self, "updateAssistantView");
    -[_UISmartReplyFeedbackManager resetOnKeyboardCandidatesCleared](self->_smartReplyFeedbackManager, "resetOnKeyboardCandidatesCleared");
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "candidateController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "clearCurrentCandidate");

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "selectedTextRange");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "selectedTextRange");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "start");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "clearUnderlinesIfNeededBeforePosition:", v13);

    }
  }
  v15 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v15, "layout");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "didClearInput");

  if (!self->m_hasInputOnAcceptCandidate)
  {
    v18 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v18, "layout");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "restoreDefaultsForAllKeys");

  }
}

- (void)removeRecentInput:(id)a3 completionHandler:(id)a4
{
  void *v6;
  TIKeyboardState *m_keyboardState;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(id, void *);

  v16 = (void (**)(id, void *))a4;
  v6 = (void *)MEMORY[0x1E0DBDCB8];
  m_keyboardState = self->m_keyboardState;
  v8 = a3;
  -[TIKeyboardState textInputTraits](m_keyboardState, "textInputTraits");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "recentInputIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeInput:forSystemIdentifier:", v8, v10);

  v11 = (void *)MEMORY[0x1E0DBDCB8];
  -[TIKeyboardState textInputTraits](self->m_keyboardState, "textInputTraits");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "recentInputIdentifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "recentInputForIdentifier:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  +[UILexicon _lexiconWithTILexicon:](UILexicon, "_lexiconWithTILexicon:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
    v16[2](v16, v15);

}

- (void)acceptRecentInput:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __45___UIKeyboardStateManager_acceptRecentInput___block_invoke;
  v7[3] = &unk_1E16BB0D8;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "performTask:", v7);

}

- (void)addInputObject:(id)a3
{
  id v5;
  void *v6;
  int v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v11[5];
  id v12;

  v5 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isMainThreadExecutingTask");

  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("_UIKeyboardStateManager.m"), 14493, CFSTR("Received %s while performing another keyboard action."), "-[_UIKeyboardStateManager addInputObject:]");

  }
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __42___UIKeyboardStateManager_addInputObject___block_invoke;
  v11[3] = &unk_1E16BB0D8;
  v11[4] = self;
  v12 = v5;
  v9 = v5;
  objc_msgSend(v8, "addTask:", v11);

}

- (void)addInputObject:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  _QWORD v18[5];

  v6 = a3;
  v7 = a4;
  v8 = -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode");
  v9 = MEMORY[0x1E0C809B0];
  if (v8)
  {
    -[TIKeyboardState setHardwareKeyboardMode:](self->m_keyboardState, "setHardwareKeyboardMode:", 0);
    -[_UIKeyboardStateManager syncInputManagerToKeyboardState](self, "syncInputManagerToKeyboardState");
    -[_UIKeyboardStateManager removeCandidateList](self, "removeCandidateList");
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = v9;
    v18[1] = 3221225472;
    v18[2] = __59___UIKeyboardStateManager_addInputObject_executionContext___block_invoke;
    v18[3] = &unk_1E16BAF98;
    v18[4] = self;
    objc_msgSend(v10, "addTask:", v18);

  }
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "currentInputMode");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "updateLastUsedInputMode:", v13);

  v16[0] = v9;
  v16[1] = 3221225472;
  v16[2] = __59___UIKeyboardStateManager_addInputObject_executionContext___block_invoke_2;
  v16[3] = &unk_1E16BB0D8;
  v16[4] = self;
  v17 = v6;
  v14 = v6;
  objc_msgSend(v7, "childWithContinuation:", v16);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager acceptCurrentCandidateIfSelectedWithExecutionContext:](self, "acceptCurrentCandidateIfSelectedWithExecutionContext:", v15);
}

- (void)completeAcceptCandidateBeforeAddingInputObject:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  _QWORD v10[5];

  v6 = a4;
  v7 = a3;
  -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
  -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", &stru_1E16EDF20);
  self->m_acceptingCandidate = 0;
  -[_UIKeyboardStateManager clearTransientState](self, "clearTransientState");
  v8 = objc_alloc_init(MEMORY[0x1E0DBDBF8]);
  objc_msgSend(v8, "setObject:", v7);

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __91___UIKeyboardStateManager_completeAcceptCandidateBeforeAddingInputObject_executionContext___block_invoke;
  v10[3] = &unk_1E16BAF98;
  v10[4] = self;
  objc_msgSend(v6, "childWithContinuation:", v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager handleKeyboardInput:executionContext:](self, "handleKeyboardInput:executionContext:", v8, v9);
}

- (BOOL)_isSelecting
{
  return self->m_selecting;
}

- (void)clearTransientState
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "clearTransientState");

  self->m_selecting = 0;
  *(_WORD *)&self->m_userChangedSelection = 0;
}

- (void)clearDelegate
{
  void *v3;
  _UIKeyboardStateManager *v4;
  void *v5;
  void *v6;
  void *v7;
  _UIKeyboardStateManager *v8;
  void *v9;
  void *v10;
  void *v11;
  _UIKeyboardStateManager *v12;
  void *v13;
  id v14;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "inputDelegate");
  v4 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

  if (v4 == self)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setInputDelegate:", 0);

  }
  -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "asyncSystemInputDelegate");
    v8 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

    if (v8 == self)
    {
      -[_UIKeyboardStateManager asyncInputDelegate](self, "asyncInputDelegate");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setAsyncSystemInputDelegate:", 0);

    }
  }
  -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "asyncInputDelegate");
    v12 = (_UIKeyboardStateManager *)objc_claimAutoreleasedReturnValue();

    if (v12 == self)
    {
      -[_UIKeyboardStateManager webInputDelegate](self, "webInputDelegate");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setAsyncInputDelegate:", 0);

    }
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "clearDelegate");

}

- (void)clearRemoteTextInputPartner
{
  UIKBRTIPartner *remoteTextInputPartner;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[UIKBRTIPartner invalidate](self->_remoteTextInputPartner, "invalidate");
    -[UIKBRTIPartner setPartnerDelegate:](self->_remoteTextInputPartner, "setPartnerDelegate:", 0);
    remoteTextInputPartner = self->_remoteTextInputPartner;
    self->_remoteTextInputPartner = 0;

  }
}

- (void)textInput:(id)a3 deferReplaceTextActionToSystem:(id)a4
{
  -[_UIKeyboardStateManager deferReplaceTextActionToSystem:](self, "deferReplaceTextActionToSystem:", a4);
}

- (void)deferReplaceTextActionToSystem:(id)a3
{
  void *v5;
  id v6;

  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("_UIKeyboardStateManager.m"), 14601, CFSTR("Expected argument to be of class UITextReplacement"));

  }
  -[_UIKeyboardStateManager replaceText:](self, "replaceText:", v6);

}

- (void)replaceText:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  double v31;
  void *v32;
  double v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;

  v40 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hasAsyncCapableInputDelegate");

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6 || v5)
  {

  }
  else
  {
    objc_msgSend(v40, "originalText");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "range");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "textInRange:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v8, "isEqual:", v11);

    if (!v12)
      goto LABEL_25;
  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager textWillChange:](self, "textWillChange:", v13);

  objc_msgSend(v40, "range");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setSelectedTextRange:", v14);

  +[UITextChecker noteTextReplacement:](UITextChecker, "noteTextReplacement:", v40);
  objc_msgSend(v40, "replacementText");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v40, "isDictationCommandReplacement")
    && -[_UIKeyboardStateManager isSelectionAtSentenceAutoshiftBoundary:](self, "isSelectionAtSentenceAutoshiftBoundary:", 0))
  {
    +[UIDictationUtilities capitalizeFirstWord:](UIDictationUtilities, "capitalizeFirstWord:", v16);
    v17 = objc_claimAutoreleasedReturnValue();

    v16 = (void *)v17;
  }
  v18 = (void *)MEMORY[0x1E0DBDBE8];
  objc_msgSend(v40, "originalText");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "candidateWithCandidate:forInput:", v16, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v20, "candidate");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "_containsEmojiOnly");

  if (v22)
  {
    -[_UIKeyboardStateManager emojiCandidate:](self, "emojiCandidate:", v20);
    v23 = objc_claimAutoreleasedReturnValue();

    v20 = (void *)v23;
  }
  v24 = 1;
  self->m_replacingWord = 1;
  -[_UIKeyboardStateManager acceptWord:firstDelete:](self, "acceptWord:firstDelete:", v20, 0);
  -[_UIKeyboardStateManager flushKeyboardOutputOnInputSourceSession](self, "flushKeyboardOutputOnInputSourceSession");
  self->m_replacingWord = 0;
  self->m_suppressingDocumentAssertions = 1;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager textDidChange:](self, "textDidChange:", v25);

  self->m_suppressingDocumentAssertions = 0;
  objc_msgSend(v16, "lowercaseString");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "originalText");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "lowercaseString");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v26, "isEqualToString:", v28);

  if ((v29 & 1) == 0)
  {
    objc_msgSend(v40, "replacementText");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = latinRatio(v30);

    objc_msgSend(v40, "originalText");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = latinRatio(v32);

    if (v31 <= v33)
    {
      if (v33 <= v31)
        v24 = 0;
      else
        v24 = 3;
    }
    else
    {
      v24 = 2;
    }
  }
  +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v34, "nextCandidateReplacementSource");

  if (v35 == 8)
  {
    objc_msgSend(v40, "originalText");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIKBAnalyticsDispatcher didCandidateReplacementWithRemovedText:insertedText:](UIKBAnalyticsDispatcher, "didCandidateReplacementWithRemovedText:insertedText:", v36, v16);
    goto LABEL_21;
  }
  if (!v35)
  {
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "_textInputSessionAnalytics");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "didReplaceWithCandidate:", v24);

LABEL_21:
  }
  if (objc_msgSend(v40, "usageTrackingMask"))
  {
    UIKeyboardGetCurrentInputMode();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v40, "usageTrackingMask");
    TIStatisticScalarIncrementAutocorrectionKey();

  }
LABEL_25:

}

- (void)scheduleReplacementsWithOptions:(unint64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "interactionAssistant");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  v6 = v11;
  if (v11)
  {
    objc_msgSend(v11, "scheduleReplacementsWithOptions:", a3);
LABEL_5:
    v6 = v11;
    goto LABEL_6;
  }
  if ((a3 & 0x20) != 0)
  {
    -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "selectedTextRange");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "showAutocorrectReplacementChoicesIfNeeded:forRange:", v8, v10);

    goto LABEL_5;
  }
LABEL_6:

}

- (BOOL)acceptWord:(id)a3 firstDelete:(unint64_t)a4
{
  return -[_UIKeyboardStateManager acceptWord:firstDelete:forInput:](self, "acceptWord:firstDelete:forInput:", a3, a4, 0);
}

- (BOOL)acceptWord:(id)a3 firstDelete:(unint64_t)a4 forInput:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  int v12;
  id v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  int v36;
  void *v37;
  BOOL v38;
  char v39;
  id WeakRetained;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  char v52;
  void *v53;
  void *v54;
  id v56;
  void *v57;
  _QWORD v58[4];
  id v59;
  id v60;
  _QWORD v61[4];
  id v62;
  id v63;

  v8 = a3;
  v9 = a5;
  v10 = v8;
  objc_msgSend(v10, "candidate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "length");
  objc_msgSend(v10, "input");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "inputString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
    v13 = v15;
  v57 = v15;
  v16 = objc_msgSend(v13, "length");
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "forwardingInputDelegate");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    v38 = 0;
    v26 = v57;
    goto LABEL_57;
  }
  v56 = v9;
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    && -[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
  {
    v19 = -[_UIKeyboardStateManager performingRemoteTextOperations](self, "performingRemoteTextOperations");
    if (!v12)
      goto LABEL_23;
  }
  else
  {
    -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates", v9);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v20, "count");

    if (!v12)
      goto LABEL_23;
  }
  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection", v56) && v19)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v21
      || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
          v22 = (void *)objc_claimAutoreleasedReturnValue(),
          v23 = objc_msgSend(v22, "callShouldReplaceExtendedRange:withText:includeMarkedText:", a4, v11, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")), v22, v23))
    {
      if (!v18)
      {
        v61[0] = MEMORY[0x1E0C809B0];
        v61[1] = 3221225472;
        v61[2] = __59___UIKeyboardStateManager_acceptWord_firstDelete_forInput___block_invoke;
        v61[3] = &unk_1E16BBDB8;
        v62 = v10;
        v63 = v11;
        -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:shouldFlush:](self, "performKeyboardOutputOnInputSourceSession:shouldFlush:", v61, 0);

      }
      if (a4 > v16)
      {
        if (v16)
        {
          self->m_textInputChangesIgnored = 1;
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "unmarkText");

          self->m_textInputChangesIgnored = 0;
          a4 -= v16;
        }
        -[_UIKeyboardStateManager deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:](self, "deleteBackwardAndNotifyAtEnd:deletionCount:reinsertTextInLoop:", 0, a4, 0);
      }
      self->m_textInputChangesIgnored = 1;
      v25 = objc_msgSend(v10, "isSupplementalItemCandidate");
      if (v25)
        -[_UIKeyboardStateManager _willReplaceText:withSupplementalCandidate:](self, "_willReplaceText:withSupplementalCandidate:", v11, v10);
      v26 = v57;
      if (self->m_replacingWord
        || (objc_msgSend(v13, "isEqualToString:", CFSTR(" ")) & 1) == 0
        && (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
         || !_AXSExtendedKeyboardPredictionsEnabled()))
      {
        -[_UIKeyboardStateManager documentState](self, "documentState");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "documentStateAfterSettingMarkedText:selectedRange:", v11, objc_msgSend(v11, "length"), 0);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v28);

        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "_setMarkedText:selectedRange:", v11, objc_msgSend(v11, "length"), 0);

        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "unmarkText");

      }
      else
      {
        -[_UIKeyboardStateManager applyAutocorrection:](self, "applyAutocorrection:", v10);
      }
      v9 = v56;
      if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess") && ((v25 ^ 1) & 1) == 0)
      {
        -[_UIKeyboardStateManager _didReplaceText:withSupplementalCandidate:](self, "_didReplaceText:withSupplementalCandidate:", v11, v10);
        -[_UIKeyboardStateManager _insertSupplementalCandidate:overridingCandidateText:](self, "_insertSupplementalCandidate:overridingCandidateText:", v10, v11);
      }
      self->m_textInputChangesIgnored = 0;
      -[_UIKeyboardStateManager removeAutocorrectPromptAndCandidateList](self, "removeAutocorrectPromptAndCandidateList");
      v39 = 0;
      v38 = 1;
      goto LABEL_52;
    }
    goto LABEL_35;
  }
LABEL_23:
  if (!v16 || (objc_msgSend(v11, "isEqualToString:", v13) & 1) == 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate", v56);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v31)
      goto LABEL_30;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "selectedTextRange");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend(v33, "isEmpty") ? v16 : 0;

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(v35, "callShouldReplaceExtendedRange:withText:includeMarkedText:", v34, v11, 0);

    if (v36)
    {
LABEL_30:
      if (!v18)
      {
        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 3221225472;
        v58[2] = __59___UIKeyboardStateManager_acceptWord_firstDelete_forInput___block_invoke_2;
        v58[3] = &unk_1E16BBDB8;
        v59 = v10;
        v60 = v11;
        -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:shouldFlush:](self, "performKeyboardOutputOnInputSourceSession:shouldFlush:", v58, 0);

      }
      if (self->m_replacingWord)
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "replaceRange:oldText:withText:forReplaceAction:", 0, 0, v11, 1);
        v26 = v57;
      }
      else
      {
        WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        objc_msgSend(WeakRetained, "autocorrectPrompt");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        if (v37)
        {
          objc_msgSend(v37, "frame");
          v42 = v41;
          v44 = v43;
          v46 = v45;
          v48 = v47;
        }
        else
        {
          v42 = *MEMORY[0x1E0C9D628];
          v44 = *(double *)(MEMORY[0x1E0C9D628] + 8);
          v46 = *(double *)(MEMORY[0x1E0C9D628] + 16);
          v48 = *(double *)(MEMORY[0x1E0C9D628] + 24);
        }
        v26 = v57;
        -[_UIKeyboardStateManager applyAutocorrection:](self, "applyAutocorrection:", v10);
        -[_UIKeyboardStateManager underlineCandidate:](self, "underlineCandidate:", v10);
        objc_msgSend(v10, "candidate");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager animateAutocorrectionToText:fromRect:](self, "animateAutocorrectionToText:fromRect:", v49, v42, v44, v46, v48);

        -[_UIKeyboardStateManager setAutocorrection:](self, "setAutocorrection:", 0);
      }

      if (-[_UIKeyboardStateManager isAutoFillMode](self, "isAutoFillMode"))
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "keyInputDelegate");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = objc_opt_respondsToSelector();

        if ((v52 & 1) != 0)
        {
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "keyInputDelegate");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "acceptedAutoFillWord:", v11);

        }
      }
      v39 = 0;
      v38 = 1;
      v9 = v56;
      goto LABEL_52;
    }
  }
LABEL_35:
  v38 = 0;
  v39 = 1;
  v9 = v56;
  v26 = v57;
LABEL_52:
  if (!-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry", v56))
  {
    if (!v9)
    {
      -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
      -[_UIKeyboardStateManager textAccepted:](self, "textAccepted:", v10);
      if ((v39 & 1) != 0)
        goto LABEL_57;
      goto LABEL_56;
    }
    objc_msgSend(v9, "setAcceptedCandidate:", v10);
  }
  if ((v39 & 1) == 0)
LABEL_56:
    -[_UIKeyboardStateManager setChangedDelegate](self, "setChangedDelegate");
LABEL_57:

  return v38;
}

- (void)processPayloadInfo:(id)a3
{
  id v4;
  id v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  _UIKeyboardStateManager *v11;
  id v12;

  v4 = a3;
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = __46___UIKeyboardStateManager_processPayloadInfo___block_invoke;
  v10 = &unk_1E16B1B50;
  v11 = self;
  v12 = v4;
  v5 = v4;
  v6 = (void (**)(_QWORD))_Block_copy(&v7);
  if (pthread_main_np() == 1)
    v6[2](v6);
  else
    dispatch_async(MEMORY[0x1E0C80D38], v6);
  +[_UIKeyboardUsageTracking appAutofillCredentialFromSafariUI](_UIKeyboardUsageTracking, "appAutofillCredentialFromSafariUI", v7, v8, v9, v10, v11);

}

- (void)pushAutocorrections:(id)a3 requestToken:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __60___UIKeyboardStateManager_pushAutocorrections_requestToken___block_invoke;
  v11[3] = &unk_1E16BB128;
  v11[4] = self;
  v12 = v7;
  v13 = v6;
  v9 = v6;
  v10 = v7;
  objc_msgSend(v8, "addTask:", v11);

}

- (void)pushCandidateResultSet:(id)a3 requestToken:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __63___UIKeyboardStateManager_pushCandidateResultSet_requestToken___block_invoke;
  v11[3] = &unk_1E16BB128;
  v11[4] = self;
  v12 = v7;
  v13 = v6;
  v9 = v6;
  v10 = v7;
  objc_msgSend(v8, "addDeferredTask:", v11);

}

- (id)candidateList
{
  return self->m_candidateList;
}

- (id)candidateResultSet
{
  return self->m_candidateResultSet;
}

- (void)setCandidateList:(id)a3
{
  UIKeyboardCandidateList *v5;
  UIKeyboardCandidateList *m_candidateList;
  int v7;
  UIKeyboardCandidateList *v8;
  void *v9;
  void *v10;
  UIKeyboardCandidateList *v11;

  v5 = (UIKeyboardCandidateList *)a3;
  m_candidateList = self->m_candidateList;
  if (m_candidateList != v5)
  {
    v11 = v5;
    if ((-[UIKeyboardCandidateList isExtendedList](m_candidateList, "isExtendedList") & 1) != 0
      || !-[UIKeyboardCandidateList isExtendedList](v11, "isExtendedList"))
    {
      v7 = 0;
    }
    else
    {
      v7 = -[TIKeyboardCandidateResultSet hasMetadata](self->m_candidateResultSet, "hasMetadata") ^ 1;
    }
    v8 = self->m_candidateList;
    objc_storeStrong((id *)&self->m_candidateList, a3);
    -[UIKeyboardCandidateList setUIKeyboardCandidateListDelegate:](self->m_candidateList, "setUIKeyboardCandidateListDelegate:", self);
    -[_UIKeyboardStateManager setUserSelectedCurrentCandidate:](self, "setUserSelectedCurrentCandidate:", 0);
    if (v7)
    {
      -[UIKeyboardCandidateList currentCandidate](v8, "currentCandidate");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", 0, 0x7FFFFFFFLL, v9);

      -[_UIKeyboardStateManager updateKeyboardConfigurations](self, "updateKeyboardConfigurations");
    }
    else
    {
      if (!-[_UIKeyboardStateManager committingCandidate](self, "committingCandidate"))
        -[_UIKeyboardStateManager syncInputManagerToKeyboardState](self, "syncInputManagerToKeyboardState");
      -[_UIKeyboardStateManager updateKeyboardConfigurations](self, "updateKeyboardConfigurations");
      -[UIKeyboardCandidateList currentCandidate](v8, "currentCandidate");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
      -[UIKeyboardCandidateList showCandidate:](self->m_candidateList, "showCandidate:", v10);

    }
    v5 = v11;
  }

}

- (void)_setCandidateList:(id)a3
{
  objc_storeStrong((id *)&self->m_candidateList, a3);
}

- (void)_conditionallyNotifyPredictionsAreAvailableForCandidates:(id)a3 containingProactiveTriggers:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  char v14;
  _BOOL4 v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v4 = a4;
  v22 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = a3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v18;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (objc_msgSend(v12, "isResponseKitCandidate", (_QWORD)v17))
        {
          objc_msgSend(v12, "responseKitCategory");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(&unk_1E1A92C48, "containsObject:", v13);

          if ((v14 & 1) == 0)
          {

            v4 = 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v8)
        continue;
      break;
    }

    if ((v9 & 1) != 0)
      v4 = 0;
  }
  else
  {

  }
LABEL_15:
  v15 = -[_UIKeyboardStateManager predictionFromPreference](self, "predictionFromPreference", (_QWORD)v17);
  if (v15)
    v15 = -[_UIKeyboardStateManager continuousPathUnderway](self, "continuousPathUnderway");
  if (v15 || v4)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "postNotificationName:object:", CFSTR("UIKeyboardPredictionsAvailable"), 0);

  }
}

- (void)setCandidateDisplayIsExtended:(BOOL)a3
{
  _BOOL8 v3;
  void *v4;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "candidateController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setIsExtended:", v3);

}

- (void)updateCandidateDisplayAsyncWithCandidateSet:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  id WeakRetained;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  id v22;
  void *v23;
  int v24;
  id v25;
  void *v26;
  void *v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  int v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  void *v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "candidates");
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v64;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v64 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
        if (objc_msgSend(v10, "slotID", (_QWORD)v63)
          || (objc_msgSend(v10, "isResponseKitCandidate") & 1) != 0)
        {
          v11 = 1;
          goto LABEL_13;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
      v11 = 0;
      if (v7)
        continue;
      break;
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_13:

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v13 = (void *)objc_opt_class();
  v69 = CFSTR("UIKeyboardPerformanceSearchFoundProactiveResults");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v70, &v69, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "sendPerformanceNotification:userInfo:", CFSTR("UIKeyboardPerformanceSearchCandidatesEndNotification"), v15);

  objc_msgSend(v4, "committedText");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
      goto LABEL_16;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "committedText");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v18, "callShouldReplaceExtendedRange:withText:includeMarkedText:", 0, v19, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"));

    if (!v20)
    {
      -[_UIKeyboardStateManager unmarkText:](self, "unmarkText:", &stru_1E16EDF20);
    }
    else
    {
LABEL_16:
      objc_msgSend(v4, "committedText", (_QWORD)v63);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager unmarkText:](self, "unmarkText:", v21);

    }
    v22 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v22, "candidateController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "barIsExtended");

    if (v24)
    {
      v25 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v25, "candidateController");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "collapse");

    }
  }
  objc_msgSend(v4, "uncommittedText", (_QWORD)v63);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    v28 = 0;
    if (!v27)
      goto LABEL_29;
  }
  else
  {
    objc_msgSend(v27, "displayString");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v29, "length") || (objc_msgSend(v27, "selectedRange"), v30))
    {
      v28 = 0;
    }
    else
    {
      objc_msgSend(v27, "inputString");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v61, "length"))
      {
        v28 = 0;
      }
      else
      {
        objc_msgSend(v27, "searchString");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v62, "length") == 0;

      }
    }

    if (!v27)
      goto LABEL_29;
  }
  if (!v28)
    -[_UIKeyboardStateManager assertIntermediateText:](self, "assertIntermediateText:", v27);
LABEL_29:
  if (!-[_UIKeyboardStateManager userSelectedCurrentCandidate](self, "userSelectedCurrentCandidate"))
  {
    -[_UIKeyboardStateManager setCommittingCandidate:](self, "setCommittingCandidate:", 0);
    -[_UIKeyboardStateManager setCandidates:](self, "setCandidates:", v4);
    if (objc_msgSend(v4, "hasCandidates")
      && ((v11 & 1) != 0
       || !-[_UIKeyboardStateManager shouldPrioritizeTextSuggestionsOverCandidateResultSet:](self, "shouldPrioritizeTextSuggestionsOverCandidateResultSet:", v4)))
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "postNotificationName:object:", CFSTR("UIKeyboardCandidatesAvailable"), 0);

      if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
      {
        -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v32, "hidePrediction");

        if (v33)
        {
          -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "setHidePrediction:", 0);

          -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = CFSTR("name");
          v68 = CFSTR("UIKeyboardCandidatesAvailable");
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "forwardKeyboardOperation:object:", sel_postNotificationName_, v36);

        }
      }
    }
    -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
    -[_UIKeyboardStateManager updateReturnKey](self, "updateReturnKey");
    +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "_didChangeCandidateList");

    if (-[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList")
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "selectedTextRange");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "start");
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "tokenizer");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "rangeEnclosingPosition:withGranularity:inDirection:", v40, 2, 1);
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      if (v43)
      {
        objc_msgSend(v43, "start");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "textRangeFromPosition:toPosition:", v44, v40);
        v46 = (void *)objc_claimAutoreleasedReturnValue();

        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "textInRange:", v46);
        v48 = (void *)objc_claimAutoreleasedReturnValue();

        -[UIKeyboardCandidateList setInlineText:](self->m_candidateList, "setInlineText:", v48);
      }

    }
    v49 = objc_msgSend(v4, "generatedCandidateCount");
    v50 = objc_msgSend(v4, "batchCandidateLocation");
    objc_msgSend(v4, "candidates");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend(v51, "count") + v50;

    if (v49 > v52)
    {
      -[_UIKeyboardStateManager delayedCandidateRequest](self, "delayedCandidateRequest");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "invalidate");

      +[_UIActionWhenIdle actionWhenIdleWithTarget:selector:object:](_UIActionWhenIdle, "actionWhenIdleWithTarget:selector:object:", self, sel_generateCandidatesAsynchronously, 0);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager setDelayedCandidateRequest:](self, "setDelayedCandidateRequest:", v54);
LABEL_43:

      goto LABEL_48;
    }
    if (self->m_candidateList)
    {
      if (!-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "selectedTextRange");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = objc_msgSend(v56, "isEmpty");

        if (v57)
        {
          UIKeyboardGetCurrentInputMode();
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v58);
          v54 = (void *)objc_claimAutoreleasedReturnValue();

          -[UIKeyboardCandidateList statisticsIdentifier](self->m_candidateList, "statisticsIdentifier");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticGetKeyForCandidateAccepted();
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          TIStatisticScalarIncrement();

          goto LABEL_43;
        }
      }
    }
  }
LABEL_48:
  -[_UIKeyboardStateManager _setNeedsCandidates:](self, "_setNeedsCandidates:", 0);

}

- (unsigned)assertIntermediateText:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v4 = a3;
  objc_msgSend(v4, "displayString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "selectedRange");
  v8 = v7;
  objc_msgSend(v4, "inputString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lastInputString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "searchString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v4, "candidateOffset");
  objc_msgSend(v4, "liveConversionSegments");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[_UIKeyboardStateManager setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:](self, "setMarkedText:selectedRange:inputString:lastInputString:searchString:candidateOffset:liveConversionSegments:highlighSegmentIndex:", v5, v6, v8, v9, v10, v11, v12, v13, objc_msgSend(v4, "highlightSegmentIndex"));

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "forwardingInputDelegate");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17 && !v16)
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v18)
    {
      objc_msgSend(v18, "textOperations");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setIntermediateText:", v4);

      objc_msgSend(v19, "flushOperations");
    }

  }
  return v14;
}

- (BOOL)presentTextCompletionAsMarkedText:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v21;

  v4 = a3;
  if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")
    && !-[_UIKeyboardStateManager hasInlineCompletionAsMarkedText](self, "hasInlineCompletionAsMarkedText"))
  {
    v12 = 0;
  }
  else
  {
    objc_msgSend(v4, "displayString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager _noteInlineCompletionAsMarkedText:](self, "_noteInlineCompletionAsMarkedText:", v5);

    objc_msgSend(v4, "displayString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "selectedRange");
    v9 = v8;
    objc_msgSend(v4, "inputString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "searchString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 1;
    LOBYTE(v21) = 1;
    -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v6, v7, v9, v10, 0, v11, v21);

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "forwardingInputDelegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15 && !v14)
    {
      -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v16)
      {
        objc_msgSend(v16, "textOperations");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setStyledIntermediateText:", v4);

        objc_msgSend(v17, "textOperations");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "setCustomInfoType:", 0x1E1750440);

        objc_msgSend(v17, "flushOperations");
      }

      v12 = 1;
    }
  }

  return v12;
}

- (void)removeTextCompletionFromMarkedText:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;

  v21 = a3;
  if (objc_msgSend(v21, "length"))
  {
    -[_UIKeyboardStateManager _markedText](self, "_markedText");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4 || objc_msgSend(v21, "isEqualToString:", v4))
    {
      -[_UIKeyboardStateManager _noteInlineCompletionAsMarkedText:](self, "_noteInlineCompletionAsMarkedText:", 0);
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E16EDF20);
      objc_msgSend(MEMORY[0x1E0D871C8], "intermediateTextWithInputString:displayString:selectionLocation:", &stru_1E16EDF20, v5, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "displayString");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v6, "selectedRange");
      v10 = v9;
      objc_msgSend(v6, "inputString");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "searchString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v20) = 1;
      -[_UIKeyboardStateManager _setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:](self, "_setAttributedMarkedText:selectedRange:inputString:lastInputString:searchString:compareAttributes:", v7, v8, v10, v11, 0, v12, v20);

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "forwardingInputDelegate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15 && !v14)
      {
        -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v16;
        if (v16)
        {
          objc_msgSend(v16, "textOperations");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "setStyledIntermediateText:", v6);

          objc_msgSend(v17, "textOperations");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setCustomInfoType:", 0x1E1750440);

          objc_msgSend(v17, "flushOperations");
        }

      }
    }

  }
}

- (BOOL)needsToDeferUpdateTextCandidateView
{
  int v3;
  void *v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  void *v8;
  void *v9;
  const char *ClassName;

  v3 = -[TIKeyboardCandidateResultSet hasCandidates](self->m_candidateResultSet, "hasCandidates");
  if (v3)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "keyInputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0)
      goto LABEL_4;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "keyInputDelegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "superview");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    ClassName = object_getClassName(v9);
    LODWORD(v7) = strcmp(ClassName, "RecipientTextField");

    if (!(_DWORD)v7)
      LOBYTE(v3) = 1;
    else
LABEL_4:
      LOBYTE(v3) = 0;
  }
  return v3;
}

- (void)updateCandidateDisplay
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateCandidateDisplay");

}

- (BOOL)canUseCandidateBarAsSupplementToInlineView
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  id v11;
  int v12;
  void *v13;
  char v14;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "_rootInputWindowController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "placement");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "visualModeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "useVisualModeWindowed"))
  {
    objc_msgSend(v7, "visualModeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "windowingModeEnabled"))
      v10 = objc_msgSend(v6, "isFloatingAssistantView");
    else
      v10 = 0;

  }
  else
  {
    v10 = 0;
  }

  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    v11 = objc_loadWeakRetained((id *)p_presentationDelegate);
    if (objc_msgSend((id)objc_opt_class(), "isFloating")
      && !objc_msgSend(v6, "isFloatingAssistantView"))
    {
      v14 = 0;
    }
    else
    {
      if (-[UITextInputTraits autocorrectionType](self->m_traits, "autocorrectionType") == 1)
        v12 = 1;
      else
        v12 = v10;
      if (v12 == 1)
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "hasAutofillCandidates");

      }
      else
      {
        v14 = 1;
      }
    }

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (BOOL)showsCandidateInline
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "showsCandidateInline");

  return v3;
}

- (BOOL)showsCandidateBar
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "showsCandidateBar");

  return v3;
}

- (void)setShowsCandidateBar:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "setShowsCandidateBar:", v3);

}

- (void)candidateBarDidExtendWithGesture
{
  id v2;

  -[_UIKeyboardStateManager inputManager](self, "inputManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "logDiscoverabilityEvent:userInfo:", 1, 0);

}

- (BOOL)isMinimized
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "isMinimized");

  return v3;
}

- (BOOL)maximizing
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "maximizing");

  return v3;
}

- (void)layoutDidResize
{
  id v2;

  -[_UIKeyboardStateManager inputManager](self, "inputManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "logDiscoverabilityEvent:userInfo:", 0, 0);

}

- (void)responseContextDidChange
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  char v34;
  NSObject *v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "privateInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "textInputTraits");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "responseContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    -[_UIKeyboardStateManager delegate](self, "delegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_opt_respondsToSelector();

    if ((v8 & 1) != 0)
    {
      -[_UIKeyboardStateManager delegate](self, "delegate");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "responseContext");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v6 = 0;
    }
  }
  -[TIKeyboardState setResponseContext:](self->m_keyboardState, "setResponseContext:", v6);
  -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "textInputTraits");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "inputContextHistory");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    -[_UIKeyboardStateManager delegate](self, "delegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_opt_respondsToSelector();

    if ((v15 & 1) != 0)
    {
      -[_UIKeyboardStateManager delegate](self, "delegate");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "inputContextHistory");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v13 = 0;
    }
  }
  _UIKeyboardSmartReplyLog();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v10, "debugDescription");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "tiInputContextHistory");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "debugDescription");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 138478083;
    v37 = v18;
    v38 = 2113;
    v39 = v20;
    _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_DEFAULT, "Handling responseContextDidChange - existing: %{private}@, new: %{private}@", (uint8_t *)&v36, 0x16u);

  }
  if (!v13
    || (objc_msgSend(v13, "tiInputContextHistory"),
        v21 = (void *)objc_claimAutoreleasedReturnValue(),
        v21,
        v21 == v10))
  {
    v28 = 0;
  }
  else
  {
    objc_msgSend(v13, "tiInputContextHistory");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[TIKeyboardState setInputContextHistory:](self->m_keyboardState, "setInputContextHistory:", v22);

    _UIKeyboardSmartReplyLog();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      -[TIKeyboardState inputContextHistory](self->m_keyboardState, "inputContextHistory");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "debugDescription");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138477827;
      v37 = v25;
      _os_log_impl(&dword_185066000, v23, OS_LOG_TYPE_DEFAULT, "Handling setting state to: %{private}@", (uint8_t *)&v36, 0xCu);

    }
    -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setInputContextHistory:", v13);

    objc_msgSend(v13, "tiInputContextHistory");
    v27 = objc_claimAutoreleasedReturnValue();

    v28 = 1;
    v10 = (void *)v27;
  }
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "documentTraitsChanged");
LABEL_19:

    goto LABEL_20;
  }
  objc_msgSend(v10, "mostRecentNonSenderTextEntry");
  v30 = objc_claimAutoreleasedReturnValue();
  if (v30 && (v31 = (void *)v30, v32 = objc_msgSend(v10, "mostRecentTextEntryIsByMe"), v31, !v32)
    || objc_msgSend(v6, "length"))
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v33, "hasText") & 1) != 0)
    {
      v34 = v28 | objc_msgSend(v10, "hasPendingEntries");

      if ((v34 & 1) == 0)
        goto LABEL_20;
    }
    else
    {

    }
  }
  else if ((v28 | objc_msgSend(v10, "hasPendingEntries")) != 1)
  {
    goto LABEL_20;
  }
  _UIKeyboardSmartReplyLog();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v36) = 0;
    _os_log_impl(&dword_185066000, v35, OS_LOG_TYPE_DEFAULT, "Will regenerate smart replies for responseContextDidChange", (uint8_t *)&v36, 2u);
  }

  if (-[_UIKeyboardStateManager canShowPredictionBar](self, "canShowPredictionBar")
    && !-[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList"))
  {
    -[_UIKeyboardStateManager _requestInputManagerSync](self, "_requestInputManagerSync");
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setNeedsAutocorrection");
    goto LABEL_19;
  }
  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
  {
    -[_UIKeyboardStateManager _requestInputManagerSync](self, "_requestInputManagerSync");
    -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", 0, 0x7FFFFFFFLL, 0);
  }
LABEL_20:

}

- (void)setAutocorrection:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (v6)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DBDB70]), "initWithAutocorrection:alternateCorrections:", v6, 0);
    objc_msgSend(MEMORY[0x1E0DBDB48], "listWithCorrections:predictions:", v4, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setAutocorrectionList:](self, "setAutocorrectionList:", v5);

  }
  else
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "clearAutocorrection");
  }

}

- (id)_supplementalCandidateIcon:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  objc_msgSend(a3, "ui_supplementalItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count"))
  {
    if (objc_msgSend(v4, "count") == 1)
    {
      objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "icon");
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "supplementalLexiconAmbiguousItemIcon");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v9)
      {
        +[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("questionmark.circle"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_9;
      }
      -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "supplementalLexiconAmbiguousItemIcon");
      v6 = objc_claimAutoreleasedReturnValue();
    }
    v7 = (void *)v6;

  }
  else
  {
    v7 = 0;
  }
LABEL_9:

  return v7;
}

- (void)setAutocorrectionList:(id)a3
{
  id v4;
  void (**v5)(void *, void *);
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  char v24;
  int m_predictionType;
  void *v26;
  void *v27;
  int v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  char v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD aBlock[5];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __49___UIKeyboardStateManager_setAutocorrectionList___block_invoke;
  aBlock[3] = &unk_1E16BBE08;
  aBlock[4] = self;
  v5 = (void (**)(void *, void *))_Block_copy(aBlock);
  objc_msgSend(v4, "autocorrectionIfSupplemental");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    v5[2](v5, v6);
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  objc_msgSend(v4, "predictionsIfSupplemental");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v54;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v54 != v10)
          objc_enumerationMutation(v7);
        v5[2](v5, *(void **)(*((_QWORD *)&v53 + 1) + 8 * i));
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
    }
    while (v9);
  }

  if (self->m_pendingAutofillIndex < 0
    || (objc_msgSend(v4, "predictions"), v12 = (void *)objc_claimAutoreleasedReturnValue(), v12, !v12))
  {
    objc_msgSend(v4, "predictions");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "firstObject");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
    {
      if (!objc_msgSend(v16, "slotID"))
      {
LABEL_21:
        objc_msgSend(v4, "corrections");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "autocorrection");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "isContinuousPathConversion");

        if ((v21 & 1) == 0)
        {
          m_predictionType = self->m_predictionType;
          if ((m_predictionType | 2) == 3)
          {
            self->m_predictionType = 0;
            goto LABEL_32;
          }
LABEL_26:
          if (m_predictionType == 4 || m_predictionType == 2)
          {
            objc_msgSend(v4, "corrections");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "autocorrection");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v27, "isForShortcutConversion");

            if (!v28)
              goto LABEL_45;
          }
          goto LABEL_32;
        }
      }
LABEL_22:
      v18 = 1;
      goto LABEL_23;
    }
    v17 = objc_msgSend(v16, "isAutofillCandidate");
    if (objc_msgSend(v16, "slotID"))
    {
      if (!v17)
        goto LABEL_22;
    }
    else if ((v17 & 1) == 0)
    {
      goto LABEL_21;
    }
    v18 = 3;
LABEL_23:
    self->m_predictionType = v18;
    objc_msgSend(v4, "corrections");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "autocorrection");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "isContinuousPathConversion");

    if ((v24 & 1) != 0)
    {
      self->m_predictionType = 5;
LABEL_32:
      if (-[_UIKeyboardStateManager prewarmsPredictiveCandidates](self, "prewarmsPredictiveCandidates"))
      {
        v29 = 1;
      }
      else
      {
        +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "preferencesActions");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v31, "predictionEnabled") & 1) != 0)
        {
          v29 = 1;
        }
        else
        {
          objc_msgSend(v4, "corrections");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "autocorrection");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = v33 != 0;

        }
      }
      v34 = self->m_predictionType;
      if ((v34 | 2) == 3 || ((v34 != 5) & ~v29) == 0)
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = v35;
        v37 = v4;
LABEL_46:
        objc_msgSend(v35, "setAutocorrectionList:", v37);
        goto LABEL_47;
      }
      objc_msgSend(v4, "corrections");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "autocorrection");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "input");
      v40 = objc_claimAutoreleasedReturnValue();
      if (v40)
      {
        v52 = (void *)v40;
        objc_msgSend(v4, "corrections");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "autocorrection");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "input");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "corrections");
        v51 = v38;
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "autocorrection");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "candidate");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v41, "isEqualToString:", v44);

        if ((v48 & 1) == 0)
        {
          v45 = (void *)MEMORY[0x1E0DBDB48];
          objc_msgSend(v4, "corrections");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "listWithCorrections:predictions:", v36, 0);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "setAutocorrectionList:", v46);

LABEL_47:
          goto LABEL_48;
        }
      }
      else
      {

      }
LABEL_45:
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v35;
      v37 = 0;
      goto LABEL_46;
    }
    m_predictionType = self->m_predictionType;
    goto LABEL_26;
  }
  objc_msgSend(v4, "predictions");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectAtIndex:", self->m_pendingAutofillIndex);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager acceptPredictiveInput:](self, "acceptPredictiveInput:", v14);

  self->m_pendingAutofillIndex = -1;
LABEL_48:

}

- (BOOL)hasAutocorrectPrompt
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "hasAutocorrectPrompt");

  return v3;
}

- (void)removeAutocorrectPrompt
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "removeAutocorrectPrompt");

}

- (void)removeCandidateList
{
  void (**v3)(_QWORD);
  UIKeyboardCandidateList *m_candidateList;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __46___UIKeyboardStateManager_removeCandidateList__block_invoke;
  aBlock[3] = &unk_1E16B1B28;
  aBlock[4] = self;
  v3 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (+[UIViewPropertyAnimator _trackedAnimationsStartPaused](UIViewPropertyAnimator, "_trackedAnimationsStartPaused"))
  {
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v3);
  }
  else
  {
    v3[2](v3);
  }
  m_candidateList = self->m_candidateList;
  self->m_candidateList = 0;

  -[_UIKeyboardStateManager setUserSelectedCurrentCandidate:](self, "setUserSelectedCurrentCandidate:", 0);
  -[_UIKeyboardStateManager updateKeyboardConfigurations](self, "updateKeyboardConfigurations");

}

- (void)removeAutocorrectPromptAndCandidateList
{
  id v3;

  -[_UIKeyboardStateManager removeAutocorrectPrompt](self, "removeAutocorrectPrompt");
  -[_UIKeyboardStateManager removeCandidateList](self, "removeCandidateList");
  -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
  -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeTextCompletionPrompt");

}

- (void)removeInlineTextCompletionPrompt
{
  id v3;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "forwardInputDestinationEventToUIHost:", sel_removeInlineTextCompletionPrompt);
  }
  else
  {
    -[_UIKeyboardStateManager inlineTextCompletionController](self, "inlineTextCompletionController");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removeTextCompletionPrompt");
  }

}

- (void)removeTextChoicePromptWithUnderline
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "removeTextChoicePromptWithUnderline");

}

- (void)removeTextChoicePrompt
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "removeTextChoicePrompt");

}

- (void)removeTextChoicePromptAndAutocorrection
{
  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled"))
  {
    -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
  }
  else
  {
    -[_UIKeyboardStateManager removeAutocorrection](self, "removeAutocorrection");
  }
}

- (void)removeTextChoiceUnderlines
{
  id v3;

  if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled"))
  {
    -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removeAllUnderlines");

  }
}

- (void)removeTextChoiceUnderlinesInRange:(id)a3
{
  _BOOL4 v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v4 = +[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled");
  v5 = v10;
  if (v10 && v4)
  {
    v6 = objc_msgSend(v10, "isEmpty");
    -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v6)
    {
      objc_msgSend(v10, "start");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "clearUnderlineForPosition:", v9);

    }
    else
    {
      objc_msgSend(v7, "removeAllUnderlines");
    }

    v5 = v10;
  }

}

- (id)_autocorrectionListDemotingAutocorrectionFromList:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "corrections");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "autocorrection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
    goto LABEL_6;
  objc_msgSend(v5, "candidate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "input");
  v7 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  v8 = (__CFString *)v7;
  v9 = v7 ? (__CFString *)v7 : &stru_1E16EDF20;
  v10 = objc_msgSend(v6, "isEqualToString:", v9);

  if ((v10 & 1) == 0)
  {
    v12 = (void *)MEMORY[0x1E0DBDBE8];
    objc_msgSend(v5, "input");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v13)
      v15 = (const __CFString *)v13;
    else
      v15 = &stru_1E16EDF20;
    objc_msgSend(v12, "candidateWithUnchangedInput:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v33[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "corrections");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "alternateCorrections");
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = (void *)v19;
    if (v19)
      v21 = v19;
    else
      v21 = MEMORY[0x1E0C9AA60];
    objc_msgSend(v17, "arrayByAddingObjectsFromArray:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DBDB70]), "initWithAutocorrection:alternateCorrections:autocorrectionBlocked:", v16, v22, 1);
    objc_msgSend(v3, "predictions");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v24)
    {
      v32 = v5;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v32, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "predictions");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "arrayByAddingObjectsFromArray:", v26);
      v24 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v27 = (void *)MEMORY[0x1E0DBDB48];
    objc_msgSend(v3, "emojiList");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "inlineCompletions");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "proactiveTriggers");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "listWithCorrections:predictions:emojiList:inlineCompletionList:proactiveTriggers:", v23, v24, v28, v29, v30);
    v11 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
LABEL_6:
    v11 = v3;
  }

  return v11;
}

- (void)dismissTextChoicePrompt
{
  void *v3;
  int v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "forwardInputDestinationEventToUIHost:", sel_dismissTextChoicePrompt);
  }
  else
  {
    -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "hasAutocorrection");

    if (!v4)
      return;
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "autocorrectionList");
    v8 = (id)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager _autocorrectionListDemotingAutocorrectionFromList:](self, "_autocorrectionListDemotingAutocorrectionFromList:", v8);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (v8 != v6)
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setAutocorrectionList:", v6);

    }
  }

}

- (void)presentTextChoicePromptForRange:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "forwardInputDestinationEventToUIHost:", sel_presentTextChoicePromptForRange_);
  }
  else
  {
    -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "presentIfNeededForRange:", v5);
  }

}

- (void)setCandidates:(id)a3
{
  TIKeyboardCandidateResultSet *v4;
  TIKeyboardCandidateResultSet *v5;
  TIKeyboardCandidateResultSet **p_m_candidateResultSet;
  TIKeyboardCandidateResultSet *v7;
  TIKeyboardCandidateResultSet *v8;
  TIKeyboardCandidateResultSet *v9;
  TIKeyboardCandidateResultSet *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  TIKeyboardCandidateResultSet *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, void *);
  void *v37;
  id v38;
  _UIKeyboardStateManager *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (TIKeyboardCandidateResultSet *)a3;
  v5 = v4;
  p_m_candidateResultSet = &self->m_candidateResultSet;
  if (self->m_candidateResultSet != v4)
  {
    v7 = v4;
    if (-[TIKeyboardCandidateResultSet batchCandidateLocation](v7, "batchCandidateLocation"))
    {
      -[TIKeyboardCandidateResultSet setByAppendingSet:](*p_m_candidateResultSet, "setByAppendingSet:", v7);
      v8 = (TIKeyboardCandidateResultSet *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (!v8)
        v9 = *p_m_candidateResultSet;
      v10 = v9;

      v7 = v10;
    }
    if (*p_m_candidateResultSet != v7)
    {
      -[TIKeyboardCandidateResultSet candidates](v7, "candidates");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "count");

      if (v12)
      {
        objc_storeStrong((id *)&self->m_candidateResultSet, v7);
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        -[TIKeyboardCandidateResultSet candidatesIfSupplemental](v7, "candidatesIfSupplemental");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v41;
          do
          {
            for (i = 0; i != v15; ++i)
            {
              if (*(_QWORD *)v41 != v16)
                objc_enumerationMutation(v13);
              v18 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
              -[_UIKeyboardStateManager _supplementalCandidateIcon:](self, "_supplementalCandidateIcon:", v18);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "setIcon:", v19);

            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
          }
          while (v15);
        }

        -[TIKeyboardCandidateResultSet candidates](self->m_candidateResultSet, "candidates");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "firstObject");
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (-[_UIKeyboardStateManager shouldShowLongPredictionList](self, "shouldShowLongPredictionList"))
        {
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (v21 != v22)
          {
            v34 = MEMORY[0x1E0C809B0];
            v35 = 3221225472;
            v36 = __41___UIKeyboardStateManager_setCandidates___block_invoke;
            v37 = &unk_1E16BB0D8;
            v38 = v21;
            v39 = self;
            v23 = _Block_copy(&v34);
            -[_UIKeyboardStateManager taskQueue](self, "taskQueue", v34, v35, v36, v37);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "addTask:", v23);

          }
        }

      }
      else
      {
        v25 = *p_m_candidateResultSet;
        *p_m_candidateResultSet = 0;

      }
    }

    v4 = *p_m_candidateResultSet;
  }
  if (-[TIKeyboardCandidateResultSet hasCandidates](v4, "hasCandidates"))
  {
    self->_receivedCandidatesInCurrentInputMode = 1;
    if (!self->m_candidateList)
    {
      -[_UIKeyboardStateManager updateTextCandidateView](self, "updateTextCandidateView");
      +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "_didChangeCandidateList");

      +[UIDevice currentDevice](UIDevice, "currentDevice");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v27, "userInterfaceIdiom");

      if (!v28)
      {
        if (-[_UIKeyboardStateManager isMinimized](self, "isMinimized"))
        {
          -[TIKeyboardCandidateResultSet firstCandidate](*p_m_candidateResultSet, "firstCandidate");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = objc_msgSend(v29, "slotID");

          if (v30)
          {
            -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            -[TIKeyboardCandidateResultSet firstCandidate](self->m_candidateResultSet, "firstCandidate");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v44 = v32;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v44, 1);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "showChoicesForCandidates:", v33);

          }
        }
      }
    }
  }

}

- (BOOL)noContent
{
  void *v3;
  void *v4;
  void *v5;
  char v6;
  char v7;
  void *v8;
  void *v9;
  char v10;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "keyInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    return 0;
  +[UIDictationLandingView activeInstance](UIDictationLandingView, "activeInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "delegateWasEmpty");

  if ((v6 & 1) != 0)
    return 1;
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "documentState");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "hasText");

  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "hasText");
  }
  v7 = v10 ^ 1;

  return v7;
}

- (int)returnKeyType
{
  int result;
  _BOOL4 v4;

  if (-[UITextInputTraits emptyContentReturnKeyType](self->m_traits, "emptyContentReturnKeyType")
    && -[_UIKeyboardStateManager noContent](self, "noContent"))
  {
    return -[UITextInputTraits emptyContentReturnKeyType](self->m_traits, "emptyContentReturnKeyType");
  }
  v4 = -[UITextInputTraits suppressReturnKeyStyling](self->m_traits, "suppressReturnKeyStyling");
  result = -[UITextInputTraits returnKeyType](self->m_traits, "returnKeyType");
  if (v4)
    return -result;
  return result;
}

- (BOOL)returnKeyEnabled
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "returnKeyEnabled");

  return v3;
}

- (void)setReturnKeyEnabled:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "setReturnKeyEnabled:", v3);

}

- (void)updateReturnKey
{
  -[_UIKeyboardStateManager updateReturnKey:](self, "updateReturnKey:", 0);
}

- (void)updateReturnKey:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateReturnKey:", v3);

}

- (void)_handleKeyBehavior:(unint64_t)a3 forKeyType:(id)a4
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v6;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "_handleKeyBehavior:forKeyType:", a3, v6);

}

- (void)performKeyBehaviorConfirm
{
  _BOOL4 v3;
  _QWORD *v4;
  id v5;
  void *v6;
  void *v7;
  int v8;

  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
  {
    v3 = -[_UIKeyboardStateManager handlingKeyCommandFromHardwareKeyboard](self, "handlingKeyCommandFromHardwareKeyboard");
    v4 = (_QWORD *)MEMORY[0x1E0DBE630];
    if (!v3)
      v4 = (_QWORD *)MEMORY[0x1E0DBE5F0];
    -[_UIKeyboardStateManager trackUsageForCandidateAcceptedAction:](self, "trackUsageForCandidateAcceptedAction:", *v4);
    v5 = -[_UIKeyboardStateManager acceptCurrentCandidate](self, "acceptCurrentCandidate");
  }
  else
  {
    -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](self, "acceptAutocorrectionWithCompletionHandler:", 0);
    -[_UIKeyboardStateManager removeTextChoicePrompt](self, "removeTextChoicePrompt");
    if (-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists"))
    {
      -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "wordSeparator");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "isEqualToString:", &stru_1E16EDF20);

      if (v8)
      {
        -[_UIKeyboardStateManager generateCandidates](self, "generateCandidates");
        -[_UIKeyboardStateManager updateCandidateDisplay](self, "updateCandidateDisplay");
      }
    }
  }
}

- (void)performKeyBehaviorConfirmFirstCandidate
{
  _BOOL4 v3;
  _QWORD *v4;

  v3 = -[_UIKeyboardStateManager handlingKeyCommandFromHardwareKeyboard](self, "handlingKeyCommandFromHardwareKeyboard");
  v4 = (_QWORD *)MEMORY[0x1E0DBE628];
  if (!v3)
    v4 = (_QWORD *)MEMORY[0x1E0DBE5E8];
  -[_UIKeyboardStateManager trackUsageForCandidateAcceptedAction:](self, "trackUsageForCandidateAcceptedAction:", *v4);
  -[_UIKeyboardStateManager acceptFirstCandidate](self, "acceptFirstCandidate");
}

- (void)performKeyBehaviorCommitInline
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char isKindOfClass;
  id v9;

  -[_UIKeyboardStateManager acceptInlineCandidate](self, "acceptInlineCandidate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "autocorrectionList");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "predictions");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    v3 = 0;
    if ((isKindOfClass & 1) != 0)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0DBDC40]);
      objc_msgSend(v9, "setInsertionText:", CFSTR("\n"));
      -[_UIKeyboardStateManager performKeyboardOutput:](self, "performKeyboardOutput:", v9);

      v3 = 0;
    }
  }

}

- (id)_keyboardBehaviorState
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  UIKeyboardCandidateList *m_candidateList;
  _BOOL8 v15;
  id WeakRetained;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  v3 = objc_alloc_init(MEMORY[0x1E0DBDBB8]);
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "usesCandidateSelection"))
  {
    objc_msgSend(v3, "setHasInput:", -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"));
  }
  else
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "hasAutocorrection"))
    {
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "autocorrection");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setHasInput:", v7 != 0);

    }
    else
    {
      objc_msgSend(v3, "setHasInput:", 1);
    }

  }
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "hasAutocorrection"))
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "autocorrection");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = 0;
  }

  objc_msgSend(v10, "candidate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "length"))
  {
    objc_msgSend(v10, "input");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "candidate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setHasAutocorrection:", objc_msgSend(v12, "isEqualToString:", v13) ^ 1);

  }
  else
  {
    objc_msgSend(v3, "setHasAutocorrection:", 0);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setContinuousPathUnderway:", -[_UIKeyboardStateManager continuousPathUnderway](self, "continuousPathUnderway"));
  objc_msgSend(v3, "setHasCandidates:", -[TIKeyboardCandidateResultSet hasCandidates](self->m_candidateResultSet, "hasCandidates"));
  m_candidateList = self->m_candidateList;
  if (m_candidateList)
    v15 = -[UIKeyboardCandidateList currentIndex](m_candidateList, "currentIndex") != 0x7FFFFFFFFFFFFFFFLL;
  else
    v15 = 0;
  objc_msgSend(v3, "setHasCandidateSelected:", v15);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setHasNextPage:", -[UIKeyboardCandidateList hasCandidateInForwardDirection:granularity:](self->m_candidateList, "hasCandidateInForwardDirection:granularity:", 1, 2));
  objc_msgSend(v3, "setUserSelectedCurrentCandidate:", -[TIKeyboardState userSelectedCurrentCandidate](self->m_keyboardState, "userSelectedCurrentCandidate"));
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "candidateController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setShowsExtendedList:", objc_msgSend(v17, "isExtended"));

  -[TIKeyboardState layoutState](self->m_keyboardState, "layoutState");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setShowsCandidatesInLayout:", objc_msgSend(v18, "hasCandidateKey"));

  -[_UIKeyboardStateManager _markedText](self, "_markedText");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "_lastGrapheme");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v20, "_containsBopomofoOnly"))
    v21 = objc_msgSend(v20, "_containsBopomofoToneOnly") ^ 1;
  else
    v21 = 0;
  objc_msgSend(v3, "setFollowsZhuyin:", v21);
  objc_msgSend(v3, "setFollowsIncompleteRomaji:", -[TIKeyboardInputManagerState shouldFixupIncompleteRomaji](self->m_inputManagerState, "shouldFixupIncompleteRomaji"));
  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "preferencesActions");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "valueForPreferenceKey:", *MEMORY[0x1E0DBE500]);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (!v24)
    {
      v25 = 1;
      goto LABEL_29;
    }
    v25 = objc_msgSend(v24, "BOOLValue");
  }
  else
  {
    v25 = 1;
  }

LABEL_29:
  objc_msgSend(v3, "setSpaceConfirmation:", v25);
  objc_msgSend(v3, "setHardwareKeyboardMode:", -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode"));

  return v3;
}

- (id)updateKeyBehaviors:(id)a3 withBehaviors:(id)a4 forState:(id)a5
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = a3;
  objc_msgSend(a4, "keyBehaviorsForState:", a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "spaceKeyBehavior");
  if (!v9)
    v9 = objc_msgSend(v7, "spaceKeyBehavior");
  v10 = objc_msgSend(v8, "returnKeyBehavior");
  if (!v10)
    v10 = objc_msgSend(v7, "returnKeyBehavior");
  if (objc_msgSend(v8, "spaceKeyBehavior") != v9 || objc_msgSend(v8, "returnKeyBehavior") != v10)
  {
    objc_msgSend(MEMORY[0x1E0DBDC28], "behaviorForSpaceKey:forReturnKey:", v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v11;
  }

  return v8;
}

- (id)updatedKeyBehaviors
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  -[_UIKeyboardStateManager _keyboardBehaviorState](self, "_keyboardBehaviorState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIKeyboardCandidateList keyboardBehaviors](self->m_candidateList, "keyboardBehaviors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager updateKeyBehaviors:withBehaviors:forState:](self, "updateKeyBehaviors:withBehaviors:forState:", 0, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "keyboardBehaviors");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager updateKeyBehaviors:withBehaviors:forState:](self, "updateKeyBehaviors:withBehaviors:forState:", v5, v7, v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)_updateKeyboardConfigurations
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id WeakRetained;

  -[UIKeyboardCandidateList keyboardBehaviors](self->m_candidateList, "keyboardBehaviors");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {

  }
  else
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "keyboardBehaviors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "layout");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "restoreDefaultsForAllKeys");

      goto LABEL_8;
    }
  }
  if (self->m_hasInputOnAcceptCandidate)
  {
    -[_UIKeyboardStateManager _handleKeyBehavior:forKeyType:](self, "_handleKeyBehavior:forKeyType:", 8, CFSTR("_keyid_space_"));
    -[_UIKeyboardStateManager _handleKeyBehavior:forKeyType:](self, "_handleKeyBehavior:forKeyType:", 8, CFSTR("_keyid_return_"));
    return;
  }
  -[_UIKeyboardStateManager updatedKeyBehaviors](self, "updatedKeyBehaviors");
  WeakRetained = (id)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _handleKeyBehavior:forKeyType:](self, "_handleKeyBehavior:forKeyType:", objc_msgSend(WeakRetained, "spaceKeyBehavior"), CFSTR("_keyid_space_"));
  -[_UIKeyboardStateManager _handleKeyBehavior:forKeyType:](self, "_handleKeyBehavior:forKeyType:", objc_msgSend(WeakRetained, "returnKeyBehavior"), CFSTR("_keyid_return_"));
LABEL_8:

}

- (void)updateKeyboardConfigurations
{
  if (!self->m_inDealloc)
    -[_UIKeyboardStateManager _updateKeyboardConfigurations](self, "_updateKeyboardConfigurations");
}

- (id)activeLayout
{
  id WeakRetained;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "activeLayout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (BOOL)callLayoutUsesAutoShift
{
  void *v3;
  void *v4;
  int v5;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v9;
  id v10;
  void *v11;
  char v12;
  id v13;
  void *v14;
  char v15;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentInputMode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isExtensionInputMode");

  if (v5)
    return self->m_usesAutoShiftFor3PK;
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    return 1;
  v10 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v10, "layout");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_opt_respondsToSelector();

  if ((v12 & 1) == 0)
    return 0;
  v13 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v13, "layout");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "usesAutoShift");

  return v15;
}

- (BOOL)callLayoutIgnoresShiftState
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  void *v9;
  char v10;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    return 0;
  v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v5, "layout");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) == 0)
    return 0;
  v8 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v8, "layout");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "ignoresShiftState");

  return v10;
}

- (BOOL)callLayoutIsShiftKeyPlaneChooser
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  void *v9;
  char v10;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    return 1;
  v5 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v5, "layout");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) == 0)
    return 0;
  v8 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v8, "layout");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isShiftKeyPlaneChooser");

  return v10;
}

- (BOOL)callLayoutIsShiftKeyBeingHeld
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  char v5;
  id v6;
  void *v7;
  char v8;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) == 0)
    return 0;
  v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(v6, "layout");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isShiftKeyBeingHeld");

  return v8;
}

- (void)callLayoutSetShift:(BOOL)a3
{
  _BOOL8 v3;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v6;
  char v7;
  void *v8;
  id v9;

  v3 = a3;
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) != 0)
  {
    v9 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v9, "layout");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setShift:", v3);

  }
}

- (void)callLayoutSetAutoshift:(BOOL)a3
{
  _BOOL8 v3;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v6;
  char v7;
  void *v8;
  id v9;

  v3 = a3;
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_opt_respondsToSelector();

  if ((v7 & 1) != 0)
  {
    v9 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v9, "layout");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setAutoshift:", v3);

  }
}

- (void)callLayoutLongPressAction
{
  void *v3;
  char v4;
  id v5;

  -[_UIKeyboardStateManager activeLayout](self, "activeLayout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[_UIKeyboardStateManager activeLayout](self, "activeLayout");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "longPressAction");

  }
}

- (void)callLayoutUpdateLocalizedKeys
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  char v5;
  void *v6;
  id v7;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v7, "layout");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "updateLocalizedKeys:", 0);

  }
}

- (void)callLayoutUpdateAllLocalizedKeys
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  char v5;
  void *v6;
  id v7;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    v7 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v7, "layout");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "updateLocalizedKeys:", 1);

  }
}

- (UIView)inputOverlayContainer
{
  return (UIView *)-[_UIKeyboardStateManager inputOverlayContainerForCandidateView:](self, "inputOverlayContainerForCandidateView:", 0);
}

- (id)inputOverlayContainerForCandidateView:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  id v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  void *v29;

  v3 = a3;
  if (-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
  {
    if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) == 1)
    {
      -[_UIKeyboardStateManager delegate](self, "delegate");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "textInputView");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[_UIPopoverView popoverViewContainingView:](_UIPopoverView, "popoverViewContainingView:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {

        if (!v3)
          goto LABEL_13;
        goto LABEL_9;
      }

      if (v3)
      {
LABEL_9:
        WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        objc_msgSend(WeakRetained, "candidateController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v9, "inlineRectIsVertical") & 1) != 0)
        {
          +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "visualModeManager");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "shouldShowWithinAppWindow");

          if (v12)
          {
            +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "keyboardWindow");
            v14 = objc_claimAutoreleasedReturnValue();
            goto LABEL_16;
          }
        }
        else
        {

        }
LABEL_13:
        v15 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        v16 = objc_msgSend(v15, "isEmojiPopoverPresented");

        if (v16)
        {
          v13 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          objc_msgSend(v13, "emojiPopoverController");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "popoverPresentationController");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "containerView");
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_17;
        }
        +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "transformedContainerView");
        v14 = objc_claimAutoreleasedReturnValue();
LABEL_16:
        v19 = (void *)v14;
LABEL_17:

        if (v19)
          return v19;
      }
    }
    else if (v3)
    {
      goto LABEL_9;
    }
  }
  v20 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v21 = objc_msgSend(v20, "selectionScrolling");

  if (!v21
    || (-[_UIKeyboardStateManager inputDelegate](self, "inputDelegate"),
        v22 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v22, "textInputView"),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        v22,
        !v19))
  {
    if (!-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection")
      || !-[_UIKeyboardStateManager showsCandidateInline](self, "showsCandidateInline")
      && !-[_UIKeyboardStateManager floatingForced](self, "floatingForced")
      || -[_UIKeyboardStateManager isMinimized](self, "isMinimized")
      || (+[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance"),
          v23 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v23, "transformedContainerView"),
          v19 = (void *)objc_claimAutoreleasedReturnValue(),
          v23,
          !v19))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v24
        || (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
            v25 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v25, "automaticallySelectedOverlay"),
            v19 = (void *)objc_claimAutoreleasedReturnValue(),
            v25,
            !v19))
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_opt_respondsToSelector();

        if ((v27 & 1) == 0
          || (-[_UIKeyboardStateManager inputDelegate](self, "inputDelegate"),
              v28 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(v28, "textInputView"),
              v19 = (void *)objc_claimAutoreleasedReturnValue(),
              v28,
              !v19))
        {
          +[UIPeripheralHost sharedInstance](UIPeripheralHost, "sharedInstance");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "transformedContainerView");
          v19 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }
    }
  }
  return v19;
}

- (CGRect)correctionRect
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  -[_UIKeyboardStateManager getCorrectionRectIsVertical:](self, "getCorrectionRectIsVertical:", 0);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (CGRect)getCorrectionRectIsVertical:(BOOL *)a3
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  char v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  void *v47;
  void *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  void *v53;
  void *v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  unint64_t v63;
  void *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  void *v72;
  unint64_t v73;
  void *v74;
  void *v75;
  double v76;
  double v77;
  double v78;
  double v79;
  void *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  void *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  double v94;
  double v95;
  double v96;
  double v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  double v104;
  double v105;
  double v106;
  double v107;
  char v108;
  void *v109;
  char v110;
  void *v111;
  void *v112;
  void *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect result;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;

  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "markedTextRange");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "inputIndex");
  v13 = v12 - -[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset");

  if (v13 >= 5)
    v14 = 5;
  else
    v14 = v13;
  if (!v10)
    goto LABEL_13;
  if (-[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset") == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_10;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "start");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "positionFromPosition:offset:", v16, -[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "positionFromPosition:offset:", v17, v14);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v19
    || (-[_UIKeyboardStateManager inputDelegate](self, "inputDelegate"),
        v20 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v10, "end"),
        v21 = (void *)objc_claimAutoreleasedReturnValue(),
        v22 = objc_msgSend(v20, "comparePosition:toPosition:", v19, v21),
        v21,
        v20,
        v22 == 1))
  {
    objc_msgSend(v10, "end");
    v23 = objc_claimAutoreleasedReturnValue();

    v19 = (void *)v23;
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "textRangeFromPosition:toPosition:", v17, v19);
  v25 = objc_claimAutoreleasedReturnValue();

  v10 = (void *)v25;
  if (v25)
  {
LABEL_10:
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "_lastRectForRange:", v10);
    x = v27;
    y = v28;
    width = v29;
    height = v30;

    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "firstRectForRange:", v10);
    v33 = v32;
    v35 = v34;
    v37 = v36;
    v39 = v38;

    v122.origin.x = x;
    v122.origin.y = y;
    v122.size.width = width;
    v122.size.height = height;
    v131.origin.x = v33;
    v131.origin.y = v35;
    v131.size.width = v37;
    v131.size.height = v39;
    if (!CGRectEqualToRect(v122, v131))
    {
      v123.origin.x = x;
      v123.origin.y = y;
      v123.size.width = width;
      v123.size.height = height;
      v132.origin.x = v33;
      v132.origin.y = v35;
      v132.size.width = v37;
      v132.size.height = v39;
      v124 = CGRectUnion(v123, v132);
      x = v124.origin.x;
      y = v124.origin.y;
      width = v124.size.width;
      height = v124.size.height;
    }
    v40 = 1;
  }
  else
  {
LABEL_13:
    v40 = 0;
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "asyncCapableInputDelegate");
  v42 = objc_claimAutoreleasedReturnValue();
  if (!v42)
  {

    goto LABEL_25;
  }
  v43 = (void *)v42;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v44, "hasMarkedText");

  if (!v45)
    goto LABEL_25;
  -[_UIKeyboardStateManager characterRectsForCharacterRange](self, "characterRectsForCharacterRange");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (v46)
  {
    -[_UIKeyboardStateManager characterRectsForCharacterRange](self, "characterRectsForCharacterRange");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "firstObject");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "rectValue");
    x = v49;
    y = v50;
    width = v51;
    height = v52;

    -[_UIKeyboardStateManager characterRectsForCharacterRange](self, "characterRectsForCharacterRange");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "lastObject");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "rectValue");
    v56 = v55;
    v58 = v57;
    v60 = v59;
    v62 = v61;

    if (-[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset") != 0x7FFFFFFFFFFFFFFFLL)
    {
      v63 = -[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset");
      -[_UIKeyboardStateManager characterRectsForCharacterRange](self, "characterRectsForCharacterRange");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = objc_msgSend(v64, "count");

      if (v63 < v65)
      {
        -[_UIKeyboardStateManager characterRectsForCharacterRange](self, "characterRectsForCharacterRange");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "objectAtIndexedSubscript:", -[_UIKeyboardStateManager candidateViewOffset](self, "candidateViewOffset"));
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "rectValue");
        x = v68;
        y = v69;
        width = v70;
        height = v71;

      }
      -[_UIKeyboardStateManager characterRectsForCharacterRange](self, "characterRectsForCharacterRange");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = objc_msgSend(v72, "count");

      if (v14 < v73)
      {
        -[_UIKeyboardStateManager characterRectsForCharacterRange](self, "characterRectsForCharacterRange");
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "objectAtIndexedSubscript:", v14);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "rectValue");
        v56 = v76;
        v58 = v77;
        v60 = v78;
        v62 = v79;

      }
    }
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "textLastRect");
    x = v81;
    y = v82;
    width = v83;
    height = v84;

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "textFirstRect");
    v56 = v86;
    v58 = v87;
    v60 = v88;
    v62 = v89;

    v125.origin.x = x;
    v125.origin.y = y;
    v125.size.width = width;
    v125.size.height = height;
    v133.origin.x = v56;
    v133.origin.y = v58;
    v133.size.width = v60;
    v133.size.height = v62;
    if (CGRectEqualToRect(v125, v133))
      goto LABEL_25;
  }
  v126.origin.x = x;
  v126.origin.y = y;
  v126.size.width = width;
  v126.size.height = height;
  v134.origin.x = v56;
  v134.origin.y = v58;
  v134.size.width = v60;
  v134.size.height = v62;
  v127 = CGRectUnion(v126, v134);
  x = v127.origin.x;
  y = v127.origin.y;
  width = v127.size.width;
  height = v127.size.height;
LABEL_25:
  v128.origin.x = x;
  v128.origin.y = y;
  v128.size.width = width;
  v128.size.height = height;
  if (CGRectIsEmpty(v128))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "selectedTextRange");
    v91 = (void *)objc_claimAutoreleasedReturnValue();

    if (v91)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v91, "start");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v92, "caretRectForPosition:", v93);
      x = v94;
      y = v95;
      width = v96;
      height = v97;

    }
  }
  v129.origin.x = x;
  v129.origin.y = y;
  v129.size.width = width;
  v129.size.height = height;
  if (CGRectIsNull(v129))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "privateInputDelegate");
    v99 = objc_claimAutoreleasedReturnValue();
    if (v99)
    {
      v100 = (void *)v99;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "__content");
      v102 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v102)
        goto LABEL_34;
      -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "activeSelection");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v103, "caretRect");
      x = v104;
      y = v105;
      width = v106;
      height = v107;

    }
  }
LABEL_34:
  v108 = v40 ^ 1;
  if (!a3)
    v108 = 1;
  if ((v108 & 1) == 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    v110 = objc_opt_respondsToSelector();

    if ((v110 & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v111, "selectionRectsForRange:", v10);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v112, "lastObject");
      v113 = (void *)objc_claimAutoreleasedReturnValue();

      *a3 = objc_msgSend(v113, "isVertical");
      if (objc_msgSend(v113, "isVertical"))
      {
        objc_msgSend(v113, "rect");
        x = v114;
        y = v115;
        width = v116;
        height = v117;
      }

    }
  }

  v118 = x;
  v119 = y;
  v120 = width;
  v121 = height;
  result.size.height = v121;
  result.size.width = v120;
  result.origin.y = v119;
  result.origin.x = v118;
  return result;
}

- (void)updateTextCandidateView
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateTextCandidateView");

}

- (void)sendCallbacksForPreCorrectionsDisplay
{
  void *v3;
  char v4;
  id v5;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_willShowCorrections");

  }
}

- (void)sendCallbacksForPostCorrectionsRemoval
{
  void *v3;
  char v4;
  id v5;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_didHideCorrections");

  }
}

- (void)touchAutocorrectPromptTimer
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "touchAutocorrectPromptTimer");

}

- (void)clearDelayDeleteTimer
{
  UIKeyboardScheduledTask *m_delayDeleteTask;

  -[UIKeyboardScheduledTask invalidate](self->m_delayDeleteTask, "invalidate");
  m_delayDeleteTask = self->m_delayDeleteTask;
  self->m_delayDeleteTask = 0;

}

- (void)touchDelayDeleteTimerWithThreshold:(double)a3
{
  void *v5;
  UIKeyboardScheduledTask *v6;
  UIKeyboardScheduledTask *m_delayDeleteTask;
  _QWORD v8[5];

  -[_UIKeyboardStateManager clearDelayDeleteTimer](self, "clearDelayDeleteTimer");
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __62___UIKeyboardStateManager_touchDelayDeleteTimerWithThreshold___block_invoke;
  v8[3] = &unk_1E16BAF98;
  v8[4] = self;
  objc_msgSend(v5, "scheduleTask:timeInterval:repeats:", v8, 0, a3);
  v6 = (UIKeyboardScheduledTask *)objc_claimAutoreleasedReturnValue();
  m_delayDeleteTask = self->m_delayDeleteTask;
  self->m_delayDeleteTask = v6;

}

- (void)clearAutocorrectPromptTimer
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "clearAutocorrectPromptTimer");

}

- (id)_rangeForAutocorrectionText:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = a3;
  if (!+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
    goto LABEL_4;
  if (!self->_pendingAutocorrectRange)
    goto LABEL_4;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITextRange end](self->_pendingAutocorrectRange, "end");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_rangeOfText:endingAtPosition:", v4, v6);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
LABEL_4:
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "selectedTextRange");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
      goto LABEL_8;
    if (objc_msgSend(v4, "length"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "end");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_rangeOfText:endingAtPosition:", v4, v11);
      v7 = (id)objc_claimAutoreleasedReturnValue();

      if (v7)
      {
LABEL_10:

        goto LABEL_11;
      }
      if ((objc_msgSend(v9, "isEmpty") & 1) != 0)
      {
LABEL_8:
        v7 = 0;
        goto LABEL_10;
      }
    }
    v7 = v9;
    goto LABEL_10;
  }
LABEL_11:

  return v7;
}

- (id)autocorrectPromptRectsFromFirstDelegateRect:(CGRect)a3 lastDelegateRect:(CGRect)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v13;
  CGFloat *v14;
  void *v15;
  double *v16;
  void *v17;
  void *v18;
  id WeakRetained;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  _QWORD v35[2];
  _QWORD v36[7];
  CGRect v37;
  CGRect v38;
  CGRect v39;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v8 = a3.size.height;
  v9 = a3.size.width;
  v10 = a3.origin.y;
  v11 = a3.origin.x;
  v36[6] = *MEMORY[0x1E0C80C00];
  if (CGRectIsNull(a3))
  {
    v13 = 0;
  }
  else
  {
    *(CGFloat *)v35 = v11;
    *(CGFloat *)&v35[1] = v10;
    v13 = 1;
    *(CGFloat *)v36 = v9;
    *(CGFloat *)&v36[1] = v8;
  }
  v37.origin.x = x;
  v37.origin.y = y;
  v37.size.width = width;
  v37.size.height = height;
  if (!CGRectIsEmpty(v37))
  {
    v38.origin.x = x;
    v38.origin.y = y;
    v38.size.width = width;
    v38.size.height = height;
    v39.origin.x = v11;
    v39.origin.y = v10;
    v39.size.width = v9;
    v39.size.height = v8;
    if (!CGRectIntersectsRect(v38, v39))
    {
      v14 = (CGFloat *)&v35[4 * v13];
      *v14 = x;
      v14[1] = y;
      ++v13;
      v14[2] = width;
      v14[3] = height;
    }
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v16 = (double *)v36;
    do
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "textInputView");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      -[_UIKeyboardStateManager inputOverlayContainer](self, "inputOverlayContainer");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(v16 - 2);
      v22 = *(v16 - 1);
      v23 = *v16;
      v24 = v16[1];
      v16 += 4;
      objc_msgSend(WeakRetained, "convertRectToAutocorrectRect:delegateView:container:", v18, v20, v21, v22, v23, v24);
      v26 = v25;
      v28 = v27;
      v30 = v29;
      v32 = v31;

      +[UISimpleSelectionRect rectWithCGRect:](UISimpleSelectionRect, "rectWithCGRect:", v26, v28, v30, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addObject:", v33);

      --v13;
    }
    while (v13);
  }
  return v15;
}

- (void)updateAutocorrectPrompt:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v4;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "updateAutocorrectPrompt:", v4);

}

- (void)updateAutocorrectPrompt:(id)a3 executionContext:(id)a4
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v6;
  id v7;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v6 = a4;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "updateAutocorrectPrompt:executionContext:", v7, v6);

}

- (void)insertText:(id)a3 withAlternativePredictions:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v17;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v17 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v13), "candidate", (_QWORD)v16);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v14);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v11);
  }

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "insertText:alternatives:style:", v6, v8, 1);

}

- (BOOL)applyAutocorrection:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  _QWORD v68[5];
  id v69;
  _QWORD v70[5];
  id v71;

  v4 = a3;
  v5 = v4;
  if ((!v4 || objc_msgSend(v4, "slotID")) && objc_msgSend(v5, "customInfoType") != 4096)
  {
    LOBYTE(v6) = 0;
    goto LABEL_56;
  }
  if (!-[_UIKeyboardStateManager hasAsyncCapableInputDelegate](self, "hasAsyncCapableInputDelegate"))
  {
    +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "nextCandidateReplacementSource");

    if (v15 != 1)
      goto LABEL_19;
    if (objc_msgSend(v5, "isToucanInlineCompletionCandidate"))
    {
      +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      v18 = 6;
    }
    else
    {
      objc_msgSend(v5, "input");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "length");

      if (!v20)
        goto LABEL_17;
      +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      v18 = 3;
    }
    objc_msgSend(v16, "setNextCandidateReplacementSource:", v18);

LABEL_17:
    +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "nextCandidateReplacementSource");

    if (v22 != 1)
    {
      objc_msgSend(v5, "input");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "setNextCandidateReplacementRemovedText:", v23);

      objc_msgSend(v5, "label");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setNextCandidateReplacementInsertedText:", v25);

      +[UIKBAnalyticsDispatcher sharedInstance](UIKBAnalyticsDispatcher, "sharedInstance");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setAnalyticsSkipDidKeyPress:", 1);

    }
LABEL_19:
    objc_msgSend(v5, "input");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "length");

    if (!v29)
    {
      LOBYTE(v6) = 1;
      self->m_textInputChangesIgnored = 1;
      objc_msgSend(v5, "candidate");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "insertText:", v30);

      self->m_textInputChangesIgnored = 0;
LABEL_55:

      goto LABEL_56;
    }
    objc_msgSend(v5, "input");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v5, "performSelector:", sel_rawInput);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v31 = 0;
    }
    -[_UIKeyboardStateManager _rangeForAutocorrectionText:](self, "_rangeForAutocorrectionText:", v30);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v33 && v31)
    {
      if ((objc_msgSend(v31, "isEqual:", v30) & 1) != 0)
      {
        v33 = 0;
LABEL_33:
        LOBYTE(v6) = 0;
        goto LABEL_54;
      }
      -[_UIKeyboardStateManager _rangeForAutocorrectionText:](self, "_rangeForAutocorrectionText:", v31);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (!v33)
      goto LABEL_33;
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
LABEL_54:

      goto LABEL_55;
    }
    self->m_textInputChangesIgnored = 1;
    objc_msgSend(v5, "candidate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager attributedCorrectionFromTextAnimationCandidate:](self, "attributedCorrectionFromTextAnimationCandidate:", v5);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "selectedTextRange");
    v67 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v36;
    if (v34)
      objc_msgSend(v36, "replaceRange:oldText:withAttributedText:forReplaceAction:", v33, 0, v34, 0);
    else
      objc_msgSend(v36, "replaceRange:oldText:withText:forReplaceAction:", v33, 0, v6, 0);

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "selectedTextRange");
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (self->_pendingAutocorrectRange)
      objc_storeStrong((id *)&self->_pendingAutocorrectRange, v39);
    if (!+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
      || (objc_msgSend(v67, "isEqual:", v39) & 1) != 0
      || !self->_pendingAutocorrectRange)
    {
LABEL_50:
      v52 = v39;
      -[_UIKeyboardStateManager documentState](self, "documentState", v59);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "documentStateAfterReplacingText:withText:", v30, v6);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      if (v54)
      {
        -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v54);
      }
      else
      {
        v66 = v6;
        v55 = (void *)MEMORY[0x1E0DBDB78];
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v64 = v34;
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "documentStateOfDocument:", v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v57);

        v6 = v66;
        v34 = v64;
      }

      self->m_textInputChangesIgnored = 0;
      LOBYTE(v6) = 1;
      goto LABEL_54;
    }
    v40 = v67;
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    if (v65 && v40)
    {
      v62 = v39;
      v60 = objc_msgSend(v6, "length");
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "start");
      v63 = v40;
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "end");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = objc_msgSend(v41, "offsetFromPosition:toPosition:", v42, v43);

      objc_msgSend(v63, "start");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "end");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = objc_msgSend(v65, "comparePosition:toPosition:", v44, v45);

      v47 = v60 - v59;
      if (v60 == v59 || v46 != 1)
      {
        v39 = v62;
        v40 = v63;
LABEL_48:
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager", v59);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "setSelectedTextRange:", v40);

LABEL_49:
        goto LABEL_50;
      }
      objc_msgSend(v63, "start");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "positionFromPosition:offset:", v48, v47);
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v63, "end");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "positionFromPosition:offset:", v49, v47);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v65, "textRangeFromPosition:toPosition:", v61, v50);
      v40 = (id)objc_claimAutoreleasedReturnValue();

      v39 = v62;
    }
    if (!v40)
      goto LABEL_49;
    goto LABEL_48;
  }
  LOBYTE(v6) = 1;
  self->m_textInputChangesIgnored = 1;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = +[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled");
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "candidate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "input");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v12 = -[_UIKeyboardStateManager shouldUnderlineCandidate:](self, "shouldUnderlineCandidate:", v5);
      v70[0] = MEMORY[0x1E0C809B0];
      v70[1] = 3221225472;
      v70[2] = __47___UIKeyboardStateManager_applyAutocorrection___block_invoke;
      v70[3] = &unk_1E16BBE30;
      v70[4] = self;
      v71 = v5;
      objc_msgSend(v9, "applyAutocorrection:toString:shouldUnderline:withCompletionHandler:", v10, v11, v12, v70);

      v13 = v71;
    }
    else
    {
      v68[0] = MEMORY[0x1E0C809B0];
      v68[1] = 3221225472;
      v68[2] = __47___UIKeyboardStateManager_applyAutocorrection___block_invoke_2;
      v68[3] = &unk_1E16BBE30;
      v68[4] = self;
      v69 = v5;
      objc_msgSend(v9, "applyAutocorrection:toString:withCompletionHandler:", v10, v11, v68);

      v13 = v69;
    }

    LOBYTE(v6) = 1;
  }
LABEL_56:

  return (char)v6;
}

- (id)attributedCorrectionFromTextAnimationCandidate:(id)a3
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v4;
    objc_msgSend(v5, "textEffectName");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(&unk_1E1A92C60, "containsObject:", v6))
    {
      -[_UIKeyboardStateManager _attributedCorrectionTextEffectAnimation:](self, "_attributedCorrectionTextEffectAnimation:", v5);
      v7 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!objc_msgSend(&unk_1E1A92C78, "containsObject:", v6))
      {
        v8 = 0;
        goto LABEL_9;
      }
      -[_UIKeyboardStateManager _attributedCorrectionTextEffectStyle:](self, "_attributedCorrectionTextEffectStyle:", v5);
      v7 = objc_claimAutoreleasedReturnValue();
    }
    v8 = (void *)v7;
LABEL_9:

    goto LABEL_10;
  }
  v8 = 0;
LABEL_10:

  return v8;
}

- (id)_attributedCorrectionTextEffectAnimation:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;

  v3 = a3;
  objc_msgSend(v3, "textEffectName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UITextAnimation animationWithName:](_UITextAnimation, "animationWithName:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5
    && (objc_msgSend(v3, "candidate"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "length"),
        v6,
        v7))
  {
    objc_msgSend(v3, "candidate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "length");

    v10 = objc_alloc(MEMORY[0x1E0CB3778]);
    objc_msgSend(v3, "candidate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithString:", v11);

    objc_msgSend(v12, "addAttribute:value:range:", *(_QWORD *)off_1E16790F0, v5, 0, v9);
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (id)_attributedCorrectionTextEffectStyle:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD *v17;
  id v18;
  void *v19;

  v3 = a3;
  objc_msgSend(v3, "textEffectName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "candidate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "length");

  if (objc_msgSend(v4, "isEqualToString:", CFSTR("bold")))
  {
    v7 = objc_alloc(MEMORY[0x1E0CB3778]);
    objc_msgSend(v3, "candidate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v7, "initWithString:", v8);

    v10 = *(_QWORD *)off_1E1678D90;
    objc_msgSend(off_1E167A828, "boldSystemFontOfSize:", 12.0);
    v11 = objc_claimAutoreleasedReturnValue();
LABEL_5:
    v14 = (void *)v11;
    objc_msgSend(v9, "addAttribute:value:range:", v10, v11, 0, v6);

    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("italic")))
  {
    v12 = objc_alloc(MEMORY[0x1E0CB3778]);
    objc_msgSend(v3, "candidate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v12, "initWithString:", v13);

    v10 = *(_QWORD *)off_1E1678D90;
    objc_msgSend(off_1E167A828, "italicSystemFontOfSize:", 12.0);
    v11 = objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("underline")))
  {
    v15 = objc_alloc(MEMORY[0x1E0CB3778]);
    objc_msgSend(v3, "candidate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v15, "initWithString:", v16);

    v17 = off_1E1679240;
  }
  else
  {
    if (!objc_msgSend(v4, "isEqualToString:", CFSTR("strikeThrough")))
    {
      v9 = 0;
      goto LABEL_12;
    }
    v18 = objc_alloc(MEMORY[0x1E0CB3778]);
    objc_msgSend(v3, "candidate");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v18, "initWithString:", v19);

    v17 = off_1E1679060;
  }
  objc_msgSend(v9, "addAttribute:value:range:", *v17, &unk_1E1A972C0, 0, v6);
LABEL_12:

  return v9;
}

- (void)animateAutocorrectionToText:(id)a3 fromRect:(CGRect)a4
{
  double height;
  double width;
  double y;
  double x;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v9;
  id WeakRetained;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  p_presentationDelegate = &self->_presentationDelegate;
  v9 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "animateAutocorrectionToText:fromRect:", v9, x, y, width, height);

}

- (void)animateAutocorrectionToRect:(CGRect)a3 fromRect:(CGRect)a4
{
  double height;
  double width;
  double y;
  double x;
  double v8;
  double v9;
  double v10;
  double v11;
  id WeakRetained;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v8 = a3.size.height;
  v9 = a3.size.width;
  v10 = a3.origin.y;
  v11 = a3.origin.x;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "animateAutocorrectionToRect:fromRect:", v11, v10, v9, v8, x, y, width, height);

}

- (void)rejectAutocorrectionForPromptFade
{
  void *v3;
  void *v4;
  id v5;

  -[_UIKeyboardStateManager inputManager](self, "inputManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "autocorrection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "candidateRejected:", v4);

}

- (void)fadeAutocorrectPrompt
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "fadeAutocorrectPrompt");

}

- (void)underlineCandidate:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v4;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "underlineCandidate:", v4);

}

- (BOOL)shouldUnderlineCandidate:(id)a3
{
  id v3;
  BOOL v4;

  v3 = a3;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(v3, "performSelector:", sel_shouldHintAtAlternativeInput))
  {
    v4 = 1;
  }
  else if (objc_msgSend(v3, "confidence"))
  {
    v4 = objc_msgSend(v3, "confidence") != 3;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (id)autocorrectionRecordForWord:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "inputString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "isEqualToString:", v6);

  if (!v7
    || (-[_UIKeyboardStateManager inputManagerState](self, "inputManagerState"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v8, "autocorrectionRecordForInputString"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        !v9))
  {
    if (+[UITextSelectionDisplayInteraction isTextAccelerationUIEnabled](UITextSelectionDisplayInteraction, "isTextAccelerationUIEnabled"))
    {
      -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "candidateForFinalString:", v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v9 = 0;
    }
  }

  return v9;
}

- (BOOL)delegateSuggestionsForCurrentInput
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  void *v25;
  unint64_t v26;
  void *v27;
  BOOL v28;
  char v29;
  void *v30;
  char isKindOfClass;
  void *v32;
  void *v33;
  void *v34;

  -[UITextInputTraits textSuggestionDelegate](self->m_traits, "textSuggestionDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
LABEL_34:
    v28 = 1;
    goto LABEL_35;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0 || objc_msgSend(v3, "hasCurrentSuggestions"))
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_fullText");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_selectedNSRange");

    v8 = (void *)objc_msgSend(v3, "suggestionsForString:inputIndex:", v5, v7);
    v10 = v9;
    v11 = v8;
    if (objc_msgSend(v11, "count"))
    {
      objc_msgSend(v11, "objectAtIndex:", 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = 0;
    }
    v13 = objc_msgSend(v12, "length");
    if (v13)
    {
      v14 = v13;
      if ((objc_msgSend(v5, "isEqualToString:", v12) & 1) != 0)
      {
LABEL_28:
        if ((unint64_t)objc_msgSend(v11, "count") < 2)
        {
          v32 = 0;
        }
        else
        {
          objc_msgSend(v11, "objectAtIndex:", 1);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0)
          {
            objc_msgSend(v11, "objectAtIndex:", 1);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v33 = (void *)MEMORY[0x1E0DBDBE8];
            objc_msgSend(v11, "objectAtIndex:", 1);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "candidateWithCandidate:forInput:", v34, v5);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

          }
        }
        -[_UIKeyboardStateManager setAutocorrection:](self, "setAutocorrection:", v32);
        -[_UIKeyboardStateManager syncInputManagerToKeyboardState](self, "syncInputManagerToKeyboardState");

        goto LABEL_34;
      }
      if (!delegateSuggestionsForCurrentInput_nbspString)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "_stringWithUnichar:", 160);
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = (void *)delegateSuggestionsForCurrentInput_nbspString;
        delegateSuggestionsForCurrentInput_nbspString = v15;

      }
      v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", v12);
      objc_msgSend(v17, "replaceOccurrencesOfString:withString:options:range:", CFSTR(" "), delegateSuggestionsForCurrentInput_nbspString, 2, 0, v14);
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "_selectAll");

      -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
      self->m_textInputChangesIgnored = 0;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "insertText:updateInputSource:", v17, 0);

      if (v10 >= v14)
        v20 = v14;
      else
        v20 = v10;
      if (v14 > v10)
      {
        self->m_textInputChangesIgnored = 1;
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v21 = objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v21, "_moveCurrentSelection:", (v20 - v14));

        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v21) = objc_opt_respondsToSelector();

        if ((v21 & 1) != 0)
        {
          v23 = objc_msgSend(v12, "_isNaturallyRTL");
          if (v20 > 5 || (v23 & 1) != 0)
          {
            v29 = v23 ^ 1;
            if (v20 < v14 - 5)
              v29 = 1;
            if ((v29 & 1) != 0)
              goto LABEL_26;
            -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = v24;
            v26 = v14 - 1;
          }
          else
          {
            -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = v24;
            v26 = 0;
          }
          objc_msgSend(v24, "_scrollRangeToVisible:animated:", v26, 0, 0);

        }
LABEL_26:
        -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
        self->m_textInputChangesIgnored = 0;
      }
    }
    else
    {
      self->m_textInputChangesIgnored = 1;
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "_selectAll");

      -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
      self->m_textInputChangesIgnored = 0;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "insertText:updateInputSource:", &stru_1E16EDF20, 0);
    }

    goto LABEL_28;
  }
  v28 = 0;
LABEL_35:

  return v28;
}

- (BOOL)canShowAppConnections
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  BOOL v11;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "beginningOfDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "endOfDocument");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v3, "comparePosition:toPosition:", v5, v7);

  -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "textContentType");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    v11 = 1;
  else
    v11 = v10 == 0;
  return !v11;
}

- (void)generateCandidates
{
  -[_UIKeyboardStateManager generateCandidatesWithOptions:](self, "generateCandidatesWithOptions:", 0);
}

- (void)generateCandidatesWithOptions:(int)a3
{
  char v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _BOOL4 v23;
  void *v24;
  unsigned int v25;
  void *v26;
  int v27;
  _BOOL8 v28;
  _BOOL4 v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  _BOOL4 v34;
  char v35;
  _UIKeyboardStateManager *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  _QWORD v56[2];

  v3 = a3;
  v56[1] = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager setCurrentCandidateRequest:](self, "setCurrentCandidateRequest:", 0);
  if (!-[_UIKeyboardStateManager canShowPredictionBar](self, "canShowPredictionBar")
    && !-[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection"))
  {
    -[_UIKeyboardStateManager setCandidates:](self, "setCandidates:", 0);
  }
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (+[UIKeyboardCameraSession shouldShowTextSuggestionForResponder:](UIKeyboardCameraSession, "shouldShowTextSuggestionForResponder:", v5))
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "autocorrectionList");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "predictions");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count") == 0;

  }
  else
  {
    v9 = 0;
  }

  v10 = -[_UIKeyboardStateManager canShowAppConnections](self, "canShowAppConnections");
  if (!-[_UIKeyboardStateManager canShowPredictionBar](self, "canShowPredictionBar"))
  {
    v11 = -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection");
    v12 = !self->m_userChangedSelection || v11;
    if (!v12 && !v10 && !v9)
    {
      -[_UIKeyboardStateManager setAutocorrection:](self, "setAutocorrection:", 0);
      return;
    }
  }
  if (!v9
    && -[_UIKeyboardStateManager _isShowingSuggestionForKeyboardCamera](self, "_isShowingSuggestionForKeyboardCamera"))
  {
    -[_UIKeyboardStateManager setSuggestions:](self, "setSuggestions:", 0);
  }
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v13, "_shouldDisplayWritingToolsCandidateOptions") & 1) != 0)
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "autocorrectionList");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "predictions");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "count");

    if (!v17)
    {
      v18 = 1;
      goto LABEL_21;
    }
  }
  else
  {

  }
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "textSuggestionList");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v20, "isShowingSuggestionForWritingTools");

  if (v18)
  {
    -[_UIKeyboardStateManager setSuggestions:](self, "setSuggestions:", 0);
    v18 = 0;
  }
LABEL_21:
  if ((v3 & 4) == 0)
  {
    -[UITextInputTraits textSuggestionDelegate](self->m_traits, "textSuggestionDelegate");
    v21 = objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      v22 = (void *)v21;
      v23 = -[_UIKeyboardStateManager delegateSuggestionsForCurrentInput](self, "delegateSuggestionsForCurrentInput");

      if (v23)
      {
        -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = v9 & ~objc_msgSend(v24, "hasTextSuggestionCandidates");

        if (v25 != 1)
        {
          -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = v18 & (objc_msgSend(v26, "hasTextSuggestionCandidates") ^ 1);

          if (v27 != 1)
            return;
          goto LABEL_57;
        }
LABEL_70:
        -[_UIKeyboardStateManager _generateTextSuggestionForKeyboardCamera](self, "_generateTextSuggestionForKeyboardCamera");
        return;
      }
    }
  }
  v28 = -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection");
  if (-[_UIKeyboardStateManager utlizeEuclidModelForDictationReplacement](self, "utlizeEuclidModelForDictationReplacement"))
  {
    -[_UIKeyboardStateManager populateEuclidCandidates:](self, "populateEuclidCandidates:", v28);
    return;
  }
  if (v28)
  {
    if ((v3 & 4) != 0)
    {
      -[_UIKeyboardStateManager setUserSelectedCurrentCandidate:](self, "setUserSelectedCurrentCandidate:", 0);
    }
    else if (v9
           && (-[_UIKeyboardStateManager inputForMarkedText](self, "inputForMarkedText"),
               v30 = (void *)objc_claimAutoreleasedReturnValue(),
               v30,
               !v30))
    {
      -[_UIKeyboardStateManager _generateTextSuggestionForKeyboardCamera](self, "_generateTextSuggestionForKeyboardCamera");
    }
    else if (v18)
    {
      -[_UIKeyboardStateManager inputForMarkedText](self, "inputForMarkedText");
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v31)
      {
        -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "_textSuggestionsForWritingTools");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager setSuggestions:](self, "setSuggestions:", v33);

      }
    }
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager generateCandidatesAsynchronouslyWithRange:selectedCandidate:](self, "generateCandidatesAsynchronouslyWithRange:selectedCandidate:", 0, objc_msgSend(v44, "initialCandidateBatchCount"), 0);

    v45 = (void *)MEMORY[0x1E0DBDBE8];
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v46, "suppressPlaceholderCandidate"))
    {
      objc_msgSend(v45, "candidateWithUnchangedInput:", 0);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[_UIKeyboardStateManager _markedText](self, "_markedText");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "candidateWithUnchangedInput:", v48);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v49 = (void *)MEMORY[0x1E0DBDBE0];
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v56[0] = v50;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v56, 1);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setWithCandidates:initialSelectedIndex:defaultCandidate:sortMethods:sortMethodGroups:indexTitles:showExtensionCandidates:disambiguationCandidates:selectedDisambiguationCandidateIndex:", v51, 0x7FFFFFFFFFFFFFFFLL, v47, 0, 0, 0, 0, 0, 0x7FFFFFFFFFFFFFFFLL);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setCandidates:](self, "setCandidates:", v52);

    -[_UIKeyboardStateManager updateKeyboardConfigurations](self, "updateKeyboardConfigurations");
    return;
  }
  if (-[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits"))
    v29 = -[_UIKeyboardStateManager changeCount](self, "changeCount") != 0;
  else
    v29 = 0;
  v34 = -[_UIKeyboardStateManager _shouldLoadPredictionsBasedOnCurrentTraits](self, "_shouldLoadPredictionsBasedOnCurrentTraits");
  v35 = -[TIKeyboardState needContactAutofill](self->m_keyboardState, "needContactAutofill");
  if ((v3 & 4) != 0 || v29 || v34 || v10 || (v35 & 1) != 0)
  {
    if ((v3 & 4) == 0)
      goto LABEL_54;
    -[_UIKeyboardStateManager autocorrectionToAcceptBeforeProgressiveCandidates](self, "autocorrectionToAcceptBeforeProgressiveCandidates");
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (v37)
    {
LABEL_69:
      if (v9)
        goto LABEL_70;
      -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
      v55 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "setNeedsAutocorrection");

      return;
    }
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "autocorrection");
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v39, "isContinuousPathConversion"))
    {

    }
    else if (v39)
    {
LABEL_68:
      -[_UIKeyboardStateManager setAutocorrectionToAcceptBeforeProgressiveCandidates:](self, "setAutocorrectionToAcceptBeforeProgressiveCandidates:", v39);

      goto LABEL_69;
    }
    objc_msgSend(MEMORY[0x1E0DBDBE8], "candidateWithUnchangedInput:", &stru_1E16EDF20);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_68;
  }
  if ((UIKeyboardCurrentInputModeIsKoreanEnglishBilingual() & 1) != 0)
  {
LABEL_54:
    if (-[_UIKeyboardStateManager usesAutocorrectionLists](self, "usesAutocorrectionLists"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "selectedTextRange");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend(v41, "_isRanged");

      if (v42)
      {
        if (!v18)
        {
          -[_UIKeyboardStateManager generateCandidatesFromReplacements](self, "generateCandidatesFromReplacements");
          return;
        }
LABEL_57:
        v36 = self;
        goto LABEL_58;
      }
    }
    goto LABEL_69;
  }
  if (v9)
    goto LABEL_70;
  v36 = self;
  if (v18)
  {
LABEL_58:
    -[_UIKeyboardStateManager delegateAsResponder](v36, "delegateAsResponder");
    v54 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "_textSuggestionsForWritingTools");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setSuggestions:](self, "setSuggestions:", v43);

    return;
  }
  if (-[_UIKeyboardStateManager _isShowingSuggestionForKeyboardCamera](self, "_isShowingSuggestionForKeyboardCamera"))
    -[_UIKeyboardStateManager setSuggestions:](self, "setSuggestions:", 0);
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v53 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "clearAutocorrectionAndNotifyObservers:", 1);

}

- (void)populateEuclidCandidates:(BOOL)a3
{
  void *v5;
  char v6;
  void *v7;
  UITextInputController *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[5];
  id v14;
  BOOL v15;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "performSelector:", sel_textLayoutController);
    v8 = (UITextInputController *)objc_claimAutoreleasedReturnValue();

    -[_UITextLayoutControllerBase textInputController](v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  objc_msgSend(v9, "_selectedText");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIDictationController activeInstance](UIDictationController, "activeInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __52___UIKeyboardStateManager_populateEuclidCandidates___block_invoke;
  v13[3] = &unk_1E16BBE58;
  v13[4] = self;
  v14 = v10;
  v15 = a3;
  v12 = v10;
  objc_msgSend(v11, "euclidPhoneticString:maxResultsCount:completion:", v12, 10, v13);

}

- (BOOL)utlizeEuclidModelForDictationReplacement
{
  void *v3;
  char v4;
  void *v5;
  UITextInputController *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "performSelector:", sel_textLayoutController);
    v6 = (UITextInputController *)objc_claimAutoreleasedReturnValue();

    -[_UITextLayoutControllerBase textInputController](v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_selectedText");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "length");

    if (v9)
    {
      objc_msgSend(v7, "dictationLanguageForSelectedText");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        +[UIDictationController activeInstance](UIDictationController, "activeInstance");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v9) = objc_msgSend(v11, "enableEuclidAlternatives");
        if (!(_DWORD)v9)
        {
LABEL_7:

LABEL_10:
          goto LABEL_11;
        }
        v12 = objc_msgSend(v10, "isEqualToString:", CFSTR("en_US"));

        if (v12)
        {
          +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager _sessionIdentifier](self, "_sessionIdentifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "UUIDString");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "preheatEuclidModelWithLanguageCode:clientID:", v10, v14);

          goto LABEL_7;
        }
      }
      LOBYTE(v9) = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
    LOBYTE(v9) = 0;
  }
LABEL_11:

  return v9;
}

- (BOOL)_isShowingSuggestionForKeyboardCamera
{
  void *v2;
  void *v3;
  char v4;

  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "textSuggestionList");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isShowingSuggestionForKeyboardCamera");

  return v4;
}

- (void)_generateTextSuggestionForKeyboardCamera
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIAction _textFromCameraTitleForResponder:](UIAction, "_textFromCameraTitleForResponder:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITextSuggestion textSuggestionWithInputText:](UITextSuggestionWithAction, "textSuggestionWithInputText:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setTarget:", v3);
  objc_msgSend(v5, "setAction:", sel_captureTextFromCamera_);
  +[UIAction _textFromCameraImage](UIAction, "_textFromCameraImage");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setImage:", v6);

  v8[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setSuggestions:](self, "setSuggestions:", v7);

}

- (id)replacementsFromSelectedText
{
  UITextReplacementGeneratorForCorrections *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = objc_alloc_init(UITextReplacementGeneratorForCorrections);
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "selectedTextRange");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITextReplacementGenerator setReplacementRange:](v3, "setReplacementRange:", v5);

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITextReplacementGenerator replacementRange](v3, "replacementRange");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "textInRange:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITextReplacementGenerator setStringToReplace:](v3, "setStringToReplace:", v8);

  v9 = -[UITextChecker _initWithAsynchronousLoading:]([UITextChecker alloc], "_initWithAsynchronousLoading:", 1);
  if (objc_msgSend(v9, "_doneLoading"))
    v10 = v9;
  else
    v10 = 0;
  -[UITextReplacementGeneratorForCorrections setTextChecker:](v3, "setTextChecker:", v10);
  -[UITextReplacementGenerator stringToReplace](v3, "stringToReplace");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager autocorrectionRecordForWord:](self, "autocorrectionRecordForWord:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITextReplacementGeneratorForCorrections setAutocorrectionRecord:](v3, "setAutocorrectionRecord:", v12);

  -[UITextReplacementGeneratorForCorrections setForceHistoryReplacement:](v3, "setForceHistoryReplacement:", 1);
  -[UITextReplacementGeneratorForCorrections setForceAutocorrectionGuesses:](v3, "setForceAutocorrectionGuesses:", 1);
  -[UITextReplacementGeneratorForCorrections setForceSpellingGuesses:](v3, "setForceSpellingGuesses:", 1);
  -[UITextReplacementGeneratorForCorrections setMaxCountAfterAutocorrectionGuesses:](v3, "setMaxCountAfterAutocorrectionGuesses:", 1);
  -[UITextReplacementGeneratorForCorrections setMaxCountAfterSpellingGuesses:](v3, "setMaxCountAfterSpellingGuesses:", 3);
  -[UITextReplacementGeneratorForCorrections replacements](v3, "replacements");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

- (void)generateCandidatesFromReplacements
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager replacementsFromSelectedText](self, "replacementsFromSelectedText");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        v11 = (void *)MEMORY[0x1E0DBDBE8];
        objc_msgSend(v10, "replacementText", (_QWORD)v18);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "originalText");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "candidateWithCandidate:forInput:", v12, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v14);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }

  objc_msgSend(MEMORY[0x1E0DBDB48], "listWithCorrections:predictions:", 0, v4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "updateLabelsWithSmartPunctuation:", self->m_smartPunctuationController);
  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setAutocorrectionList:", v15);

  objc_msgSend(MEMORY[0x1E0DBDBE0], "setWithCandidates:", v4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setCandidates:](self, "setCandidates:", v17);

}

- (id)generateAutocorrectionReplacements:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[5];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v4 = a3;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__37;
  v16 = __Block_byref_object_dispose__37;
  v17 = 0;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __62___UIKeyboardStateManager_generateAutocorrectionReplacements___block_invoke;
  v9[3] = &unk_1E16BB908;
  v9[4] = self;
  v6 = v4;
  v10 = v6;
  v11 = &v12;
  objc_msgSend(v5, "performSingleTask:", v9);

  objc_msgSend((id)v13[5], "updateLabelsWithSmartPunctuation:", self->m_smartPunctuationController);
  objc_msgSend((id)v13[5], "predictions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (id)generateAutocorrectionListForSelectedText
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _UIKeyboardStateManager *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  if (!-[_UIKeyboardStateManager shouldAccessInputManagerService](self, "shouldAccessInputManagerService"))
    return 0;
  -[_UIKeyboardStateManager refreshKeyboardState](self, "refreshKeyboardState");
  if ((-[TIKeyboardState autocorrectionListUIDisplayed](self->m_keyboardState, "autocorrectionListUIDisplayed") & 1) != 0)
    return 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__37;
  v16 = __Block_byref_object_dispose__37;
  v17 = 0;
  v4 = (void *)-[TIKeyboardState copy](self->m_keyboardState, "copy");
  objc_msgSend(v4, "setAutofillMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode")));
  objc_msgSend(v4, "setAutofillSubMode:", +[UIKBAutofillController translateToTextInputAutofillMode:](UIKBAutofillController, "translateToTextInputAutofillMode:", -[TIKeyboardState autofillSubMode](self->m_keyboardState, "autofillSubMode")));
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __68___UIKeyboardStateManager_generateAutocorrectionListForSelectedText__block_invoke;
  v8[3] = &unk_1E16BB908;
  v6 = v4;
  v9 = v6;
  v10 = self;
  v11 = &v12;
  objc_msgSend(v5, "performSingleTask:", v8);

  objc_msgSend((id)v13[5], "updateLabelsWithSmartPunctuation:", self->m_smartPunctuationController);
  v7 = (id)v13[5];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (id)savedAutocorrectionListForCandidate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[_UIKeyboardStateManager _textChoicesAssistant](self, "_textChoicesAssistant");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "candidate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "listForFinalString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)clearAutoDeleteTimer
{
  UIKeyboardScheduledTask *m_autoDeleteTask;

  -[UIKeyboardScheduledTask invalidate](self->m_autoDeleteTask, "invalidate");
  m_autoDeleteTask = self->m_autoDeleteTask;
  self->m_autoDeleteTask = 0;

}

- (void)touchAutoDeleteTimerWithThreshold:(double)a3 adjustForPartialCompletion:(BOOL)a4
{
  _BOOL4 v4;
  double v7;
  void *v8;
  UIKeyboardScheduledTask *v9;
  UIKeyboardScheduledTask *m_autoDeleteTask;
  _QWORD v11[6];
  BOOL v12;

  v4 = a4;
  -[_UIKeyboardStateManager clearAutoDeleteTimer](self, "clearAutoDeleteTimer");
  v7 = a3;
  if (v4)
    v7 = a3 - (CFAbsoluteTimeGetCurrent() - self->m_autoDeleteLastDelete);
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __88___UIKeyboardStateManager_touchAutoDeleteTimerWithThreshold_adjustForPartialCompletion___block_invoke;
  v11[3] = &unk_1E16BBEF8;
  v12 = v4;
  v11[4] = self;
  *(double *)&v11[5] = a3;
  objc_msgSend(v8, "scheduleTask:timeInterval:repeats:", v11, !v4, v7);
  v9 = (UIKeyboardScheduledTask *)objc_claimAutoreleasedReturnValue();
  m_autoDeleteTask = self->m_autoDeleteTask;
  self->m_autoDeleteTask = v9;

}

- (void)handleAutoDeleteContinuationOnDestinationWithDeletionCount:(unint64_t)a3
{
  void *v5;
  void *v6;
  int v7;
  id v8;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_selectionAtDocumentStart");

    if (v7)
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "forwardInputDestinationEventToUIHost:", sel_performStopAutoDeleteAtDocumentStart);
    }
    else
    {
      if (!a3)
        return;
      -[_UIKeyboardStateManager performAutoDeleteNumberOfTimes:deleteOneWord:forwardToInputSource:](self, "performAutoDeleteNumberOfTimes:deleteOneWord:forwardToInputSource:", a3, 1, 0);
      +[UIDictationController activeInstance](UIDictationController, "activeInstance");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "markKeyboardDeleteMetricEvent");
    }

  }
}

- (void)performStopAutoDeleteAtDocumentStart
{
  void *v3;
  _QWORD v4[5];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __63___UIKeyboardStateManager_performStopAutoDeleteAtDocumentStart__block_invoke;
  v4[3] = &unk_1E16BAF98;
  v4[4] = self;
  objc_msgSend(v3, "addTask:", v4);

}

- (void)_stopAutoDeleteAtDocumentStart
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deactivateActiveKeys");

  -[_UIKeyboardStateManager clearAutoDeleteTimer](self, "clearAutoDeleteTimer");
  -[_UIKeyboardStateManager clearShiftState](self, "clearShiftState");
}

- (void)handleAutoDeleteWithExecutionContext:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  CFAbsoluteTime Current;
  uint64_t v14;
  void *v15;
  _QWORD v16[5];

  v4 = a3;
  if (!-[_UIKeyboardStateManager hasAdvancedInputDelegate](self, "hasAdvancedInputDelegate"))
    goto LABEL_10;
  self->m_autoDeleteOK = 1;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_selectionAtDocumentStart");

  if (v6)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "forwardingInputDelegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess") || v8)
    {
      -[_UIKeyboardStateManager _stopAutoDeleteAtDocumentStart](self, "_stopAutoDeleteAtDocumentStart");
    }
    else
    {
      -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "textOperations");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setCustomInfoType:", 0x1E1750360);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[_UIKeyboardStateManager lastDeletionCountForFastDelete](self, "lastDeletionCountForFastDelete"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "textOperations");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setCustomInfo:", v11);

      objc_msgSend(v9, "flushOperations");
    }
    goto LABEL_10;
  }
  Current = CFAbsoluteTimeGetCurrent();
  if (self->m_autoDeleteCount)
  {
    if (Current - self->m_autoDeleteLastDelete < self->m_autoDeleteInterval * 0.5)
    {
LABEL_10:
      objc_msgSend(v4, "returnExecutionToParent");
      goto LABEL_11;
    }
  }
  v14 = MEMORY[0x1E0C809B0];
  self->m_autoDeleteLastDelete = Current;
  v16[0] = v14;
  v16[1] = 3221225472;
  v16[2] = __64___UIKeyboardStateManager_handleAutoDeleteWithExecutionContext___block_invoke;
  v16[3] = &unk_1E16BAF98;
  v16[4] = self;
  objc_msgSend(v4, "childWithContinuation:", v16);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager handleDeleteAsRepeat:executionContext:](self, "handleDeleteAsRepeat:executionContext:", 1, v15);

LABEL_11:
}

- (void)completeHandleAutoDelete
{
  double m_autoDeleteInterval;
  void *v4;
  unsigned int m_autoDeleteCount;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  float v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;

  m_autoDeleteInterval = self->m_autoDeleteInterval;
  if (self->m_repeatDeleteWord)
  {
    -[TIKeyboardCandidateResultSet uncommittedText](self->m_candidateResultSet, "uncommittedText");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "preferencesActions");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "valueForPreferenceKey:", CFSTR("RepeatDeleteWordRepeatInterfal"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "floatValue");
      v11 = v10;

      +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "preferencesActions");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "valueForPreferenceKey:", CFSTR("RepeatDeleteWordCountForDecrement"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "integerValue");

      m_autoDeleteInterval = v11 + (double)(self->m_autoDeleteCount / v15) * -0.1;
LABEL_10:
      if (m_autoDeleteInterval < 0.05)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  m_autoDeleteCount = self->m_autoDeleteCount;
  if (m_autoDeleteCount != 20)
  {
    if (m_autoDeleteCount)
      goto LABEL_10;
    if (!self->m_autoDeleteUseForce)
    {
      m_autoDeleteInterval = 0.1;
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  if (self->m_autoDeleteUseForce)
  {
LABEL_8:
    -[_UIKeyboardStateManager timeoutForCurrentForce](self, "timeoutForCurrentForce");
    m_autoDeleteInterval = v6;
    goto LABEL_10;
  }
  m_autoDeleteInterval = 0.35;
LABEL_13:
  if (m_autoDeleteInterval != self->m_autoDeleteInterval)
  {
    self->m_autoDeleteInterval = m_autoDeleteInterval;
    -[_UIKeyboardStateManager touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:](self, "touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:", 0, m_autoDeleteInterval);
  }
LABEL_15:
  ++self->m_autoDeleteCount;
}

- (void)startAutoDeleteTimer
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  float v8;
  double m_autoDeleteInterval;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferencesActions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  self->m_repeatDeleteWord = objc_msgSend(v4, "BOOLForPreferenceKey:", CFSTR("RepeatDeleteWordEnabled"));

  if (self->m_repeatDeleteWord)
  {
    +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "preferencesActions");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "valueForPreferenceKey:", CFSTR("RepeatDeleteWordFirstDelay"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "floatValue");
    self->m_autoDeleteInterval = v8;

    m_autoDeleteInterval = self->m_autoDeleteInterval;
  }
  else
  {
    self->m_autoDeleteInterval = 0.5;
    m_autoDeleteInterval = 0.5;
  }
  -[_UIKeyboardStateManager touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:](self, "touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:", 0, m_autoDeleteInterval);
  self->m_autoDeleteCount = 0;
  self->m_autoDeleteLastDelete = -*MEMORY[0x1E0C9ADE8];
  self->m_autoDeleteShiftCharacter = 0;
}

- (double)convertForceToGrams:(double)a3
{
  return self->m_autoDeleteCurrentForceMultipler * a3 * 60.0;
}

- (double)scaleCurrentForceFrom:(double)result to:(double)a4
{
  double v4;
  double v5;
  double v6;
  double v7;

  if (self->m_autoDeleteUseForce)
    v4 = (self->m_autoDeleteCurrentForce + -80.0) / 420.0;
  else
    v4 = 0.5;
  v5 = (a4 - result) * v4 + result;
  if (result >= a4)
    v6 = result;
  else
    v6 = a4;
  if (result >= a4)
    result = a4;
  if (v5 >= v6)
    v7 = v6;
  else
    v7 = v5;
  if (v7 >= result)
    return v7;
  return result;
}

- (double)timeoutForCurrentForce
{
  _BOOL4 v3;
  double v4;
  double result;

  v3 = -[_UIKeyboardStateManager shouldRapidDelete](self, "shouldRapidDelete");
  v4 = 0.3;
  if (!v3)
    v4 = 0.1;
  -[_UIKeyboardStateManager scaleCurrentForceFrom:to:](self, "scaleCurrentForceFrom:to:", v4);
  return result;
}

- (void)startAutoDeleteTimerForForce:(double)a3
{
  float v5;
  double v6;

  if (_AXSForceTouchEnabled())
  {
    self->m_autoDeleteUseForce = 1;
    _AXSForceTouchSensitivity();
    self->m_autoDeleteCurrentForceMultipler = v5;
    -[_UIKeyboardStateManager convertForceToGrams:](self, "convertForceToGrams:", a3);
    self->m_autoDeleteCurrentForce = v6;
  }
  -[_UIKeyboardStateManager startAutoDeleteTimer](self, "startAutoDeleteTimer");
}

- (void)adjustAutoDeleteTimerForForce:(double)a3
{
  double v4;

  if (self->m_autoDeleteUseForce)
  {
    -[_UIKeyboardStateManager convertForceToGrams:](self, "convertForceToGrams:", a3);
    if (v4 != self->m_autoDeleteCurrentForce)
    {
      self->m_autoDeleteCurrentForce = v4;
      if (self->m_autoDeleteCount)
      {
        -[_UIKeyboardStateManager timeoutForCurrentForce](self, "timeoutForCurrentForce");
        -[_UIKeyboardStateManager touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:](self, "touchAutoDeleteTimerWithThreshold:adjustForPartialCompletion:", 1);
      }
    }
  }
}

- (void)stopAutoDelete
{
  if (pthread_main_np())
  {
    if (-[UIKeyboardScheduledTask isValid](self->m_autoDeleteTask, "isValid")
      || self->m_repeatDeleteFromHardwareKeyboard)
    {
      self->m_autoDeleteOK = 0;
      -[_UIKeyboardStateManager clearAutoDeleteTimer](self, "clearAutoDeleteTimer");
      self->m_autoDeleteUseForce = 0;
      if (self->m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete
        || self->m_autoDeleteCount > self->m_repeatDeleteFromHardwareKeyboard)
      {
        -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
        -[_UIKeyboardStateManager completeDelete](self, "completeDelete");
      }
      self->m_repeatDeleteFromHardwareKeyboard = 0;
      self->m_needsOneShotGenerateCandidatesAfterStoppingAutoDelete = 0;
    }
  }
  else
  {
    -[_UIKeyboardStateManager performSelectorOnMainThread:withObject:waitUntilDone:](self, "performSelectorOnMainThread:withObject:waitUntilDone:", a2, 0, 0);
  }
}

- (void)touchUpdateLastUsedInputModeAction
{
  id WeakRetained;
  void *v4;
  int v5;
  void *v6;
  char v7;
  UIDelayedAction *m_updateLastUsedInputModeAction;
  void *v9;
  void *v10;
  double v11;
  double v12;
  UIDelayedAction *v13;
  UIDelayedAction *v14;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isPossibleToTypeFast");

  if (v5)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "disablesUpdateLastUsedInputModeTimer");

    if ((v7 & 1) == 0)
    {
      m_updateLastUsedInputModeAction = self->m_updateLastUsedInputModeAction;
      if (m_updateLastUsedInputModeAction)
      {
        -[UIDelayedAction touch](m_updateLastUsedInputModeAction, "touch");
      }
      else
      {
        if (TIGetUpdateLastUsedInputModeDelayValue_onceToken != -1)
          dispatch_once(&TIGetUpdateLastUsedInputModeDelayValue_onceToken, &__block_literal_global_3030);
        objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "valueForPreferenceKey:", CFSTR("UpdateLastUsedInputModeDelay"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v10, "doubleValue");
        v12 = v11;

        if (v12 > 0.0)
        {
          v13 = -[UIDelayedAction initWithTarget:action:userInfo:delay:]([UIDelayedAction alloc], "initWithTarget:action:userInfo:delay:", self, sel_handleUpdateLastUsedInputModeAction_, 0, v12);
          v14 = self->m_updateLastUsedInputModeAction;
          self->m_updateLastUsedInputModeAction = v13;

        }
      }
    }
  }
}

- (void)clearUpdateLastUsedInputModeAction
{
  UIDelayedAction *m_updateLastUsedInputModeAction;

  -[UIDelayedAction cancel](self->m_updateLastUsedInputModeAction, "cancel");
  m_updateLastUsedInputModeAction = self->m_updateLastUsedInputModeAction;
  self->m_updateLastUsedInputModeAction = 0;

}

- (void)handleUpdateLastUsedInputModeAction:(id)a3
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id v7;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentInputMode");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "primaryLanguage");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("emoji"));

  if ((v5 & 1) == 0)
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "updateLastUsedInputMode:", v7);

  }
}

- (void)touchLongPressTimerWithDelay:(double)a3 userInfo:(id)a4
{
  UIDelayedAction *m_longPressAction;
  double v7;
  UIDelayedAction *v8;
  UIDelayedAction *v9;
  id v10;

  v10 = a4;
  m_longPressAction = self->m_longPressAction;
  if (m_longPressAction)
  {
    -[UIDelayedAction delay](m_longPressAction, "delay");
    if (v7 == a3)
    {
      -[UIDelayedAction touch](self->m_longPressAction, "touch");
      goto LABEL_6;
    }
    -[_UIKeyboardStateManager clearLongPressTimer](self, "clearLongPressTimer");
  }
  v8 = -[UIDelayedAction initWithTarget:action:userInfo:delay:]([UIDelayedAction alloc], "initWithTarget:action:userInfo:delay:", self, sel_handleDelayedActionLongPress_, v10, a3);
  v9 = self->m_longPressAction;
  self->m_longPressAction = v8;

LABEL_6:
}

- (void)touchLongPressTimerWithDelay:(double)a3
{
  -[_UIKeyboardStateManager touchLongPressTimerWithDelay:userInfo:](self, "touchLongPressTimerWithDelay:userInfo:", 0, a3);
}

- (void)touchLongPressTimer
{
  -[_UIKeyboardStateManager touchLongPressTimerWithDelay:](self, "touchLongPressTimerWithDelay:", 0.375);
}

- (void)clearLongPressTimer
{
  UIDelayedAction *m_longPressAction;

  -[UIDelayedAction setTarget:](self->m_longPressAction, "setTarget:", 0);
  m_longPressAction = self->m_longPressAction;
  self->m_longPressAction = 0;

  self->m_longPress = 0;
}

- (double)shouldExtendLongPressAction:(id)a3
{
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id WeakRetained;
  void *v11;
  void *v12;
  unint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "systemUptime");
  v7 = v6;

  -[_UIKeyboardStateManager timestampOfLastTouchesEnded](self, "timestampOfLastTouchesEnded");
  v9 = 0.0;
  if (v8 + 0.4 < v7)
  {
    if (self->m_didExtendLongPressDelayForContinuousPath)
      goto LABEL_5;
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "typingStyleEstimator");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "currentTypingStyleEstimation");

    if (v13 < 2)
    {
LABEL_5:
      self->m_didExtendLongPressDelayForContinuousPath = 0;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v14, "layout", 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "gestureRecognizers");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v17)
      {
        v18 = v17;
        v19 = *(_QWORD *)v27;
        do
        {
          v20 = 0;
          do
          {
            if (*(_QWORD *)v27 != v19)
              objc_enumerationMutation(v16);
            v21 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v20);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && !objc_msgSend(v21, "state")
              && objc_msgSend(v21, "forceHasIncreasedForTimeInterval:", 0.1))
            {
              objc_msgSend(v21, "minimumPressDuration");
              v23 = v22;
              objc_msgSend(v4, "delay");
              v9 = v23 - v24 + 0.01;
            }
            ++v20;
          }
          while (v18 != v20);
          v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        }
        while (v18);
      }

    }
    else
    {
      self->m_didExtendLongPressDelayForContinuousPath = 1;
      v9 = 1.0;
    }
  }

  return v9;
}

- (void)handleDelayedActionLongPress:(id)a3
{
  id v4;
  double v5;
  UIDelayedAction *v6;
  void *v7;
  UIDelayedAction *v8;
  _QWORD v9[4];
  UIDelayedAction *v10;
  _UIKeyboardStateManager *v11;
  id v12;

  v4 = a3;
  -[_UIKeyboardStateManager shouldExtendLongPressAction:](self, "shouldExtendLongPressAction:", self->m_longPressAction);
  if (v5 <= 0.0)
  {
    v6 = self->m_longPressAction;
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __56___UIKeyboardStateManager_handleDelayedActionLongPress___block_invoke;
    v9[3] = &unk_1E16BB128;
    v10 = v6;
    v11 = self;
    v12 = v4;
    v8 = v6;
    objc_msgSend(v7, "addTask:", v9);

  }
  else
  {
    -[_UIKeyboardStateManager touchLongPressTimerWithDelay:](self, "touchLongPressTimerWithDelay:");
  }

}

- (void)longPressAction:(id)a3
{
  -[_UIKeyboardStateManager clearLongPressTimer](self, "clearLongPressTimer", a3);
  self->m_longPress = 1;
  -[_UIKeyboardStateManager callLayoutLongPressAction](self, "callLayoutLongPressAction");
}

- (void)longPressAction
{
  -[_UIKeyboardStateManager longPressAction:](self, "longPressAction:", 0);
}

- (BOOL)isLongPress
{
  return self->m_longPress;
}

- (void)clearTimers
{
  if (pthread_main_np())
  {
    -[_UIKeyboardStateManager clearLongPressTimer](self, "clearLongPressTimer");
    -[_UIKeyboardStateManager clearAutocorrectPromptTimer](self, "clearAutocorrectPromptTimer");
    -[_UIKeyboardStateManager clearAutoDeleteTimer](self, "clearAutoDeleteTimer");
    -[_UIKeyboardStateManager clearCapsLockDelayOverrideTimer](self, "clearCapsLockDelayOverrideTimer");
    -[_UIKeyboardStateManager clearUpdateLastUsedInputModeAction](self, "clearUpdateLastUsedInputModeAction");
    -[_UIKeyboardStateManager clearIdleDetectionAction](self, "clearIdleDetectionAction");
  }
  else
  {
    -[_UIKeyboardStateManager performSelectorOnMainThread:withObject:waitUntilDone:](self, "performSelectorOnMainThread:withObject:waitUntilDone:", a2, 0, 0);
  }
}

- (void)clearChangeTimeAndCount
{
  self->m_changeCount = 0;
  self->m_changeTime = 0.0;
}

- (void)updateChangeTimeAndIncrementCount
{
  ++self->m_changeCount;
  self->m_changeTime = CFAbsoluteTimeGetCurrent();
}

- (int)changeCount
{
  return self->m_changeCount;
}

- (void)updateHardwareKeyboardLayout
{
  -[_UIKeyboardStateManager updateHardwareKeyboardLayout:](self, "updateHardwareKeyboardLayout:", 0);
}

- (void)updateHardwareKeyboardLayout:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "updateHardwareKeyboardLayout:", v3);

}

- (void)setInHardwareKeyboardMode:(BOOL)a3
{
  -[_UIKeyboardStateManager setInHardwareKeyboardMode:forceRebuild:](self, "setInHardwareKeyboardMode:forceRebuild:", a3, 0);
}

- (void)setInHardwareKeyboardMode:(BOOL)a3 forceRebuild:(BOOL)a4
{
  -[_UIKeyboardStateManager setInHardwareKeyboardMode:forceRebuild:shouldMoveKeyboard:](self, "setInHardwareKeyboardMode:forceRebuild:shouldMoveKeyboard:", a3, a4, 1);
}

- (void)setInHardwareKeyboardMode:(BOOL)a3 shouldMoveKeyboard:(BOOL)a4
{
  -[_UIKeyboardStateManager setInHardwareKeyboardMode:forceRebuild:shouldMoveKeyboard:](self, "setInHardwareKeyboardMode:forceRebuild:shouldMoveKeyboard:", a3, 0, a4);
}

- (void)setInHardwareKeyboardMode:(BOOL)a3 forceRebuild:(BOOL)a4 shouldMoveKeyboard:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL8 v6;
  _BOOL8 v7;
  int v9;
  int64_t v10;
  void *v11;
  char v12;
  void *WeakRetained;
  void *v14;
  id v15;
  void *v16;
  int v17;
  void *v18;
  char v19;
  id v20;
  char v21;
  id v22;
  void *v23;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v9 = -[TIKeyboardState hardwareKeyboardMode](self->m_keyboardState, "hardwareKeyboardMode") ^ a3;
  if (v9 == 1)
  {
    -[TIKeyboardState setHardwareKeyboardMode:](self->m_keyboardState, "setHardwareKeyboardMode:", v7);
    v10 = 4;
    if (!v7)
      v10 = 1;
    self->m_textInputSource = v10;
    -[_UIKeyboardStateManager _requestInputManagerSync](self, "_requestInputManagerSync");
  }
  if (!v5)
    goto LABEL_13;
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "remoteTextInputClientHasActiveSession");

    if ((v12 & 1) != 0)
      goto LABEL_13;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "geometryDelegate");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v14, "isAutomatic"))
  {

    goto LABEL_12;
  }
  if (v9)
  {

  }
  else
  {
    v15 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v15, "geometryDelegate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isMinimized");

    if (v17 == v7)
      return;
  }
  if (-[TIKeyboardState hardwareKeyboardMode](self->m_keyboardState, "hardwareKeyboardMode")
    && !-[_UIKeyboardStateManager floatingForced](self, "floatingForced"))
  {
    if (!-[_UIKeyboardStateManager automaticMinimizationEnabled](self, "automaticMinimizationEnabled"))
      goto LABEL_13;
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "hideKeyboard");
LABEL_12:

    goto LABEL_13;
  }
  +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient](UIKeyboardSceneDelegate, "automaticKeyboardArbiterClient");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "handlingRemoteEvent");

  if ((v19 & 1) == 0)
  {
    v20 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    v21 = objc_msgSend(v20, "isUsingDictationLayout");

    if ((v21 & 1) != 0)
    {
      v22 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v22, "showKeyboard");

      +[UIDictationView sharedInstance](UIDictationView, "sharedInstance");
      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
      +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "setState:", objc_msgSend(v23, "state"));

    }
    else
    {
      -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:](self, "recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:", 1, 1);
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(WeakRetained, "showKeyboard");
    }
    goto LABEL_12;
  }
LABEL_13:
  if (v9)
  {
    if (self->m_hardwareKeyboardAttached)
      -[_UIKeyboardStateManager updateHardwareKeyboardLayout:](self, "updateHardwareKeyboardLayout:", v6);
    -[_UIKeyboardStateManager notifyInputSourceStateChangeIfNeeded](self, "notifyInputSourceStateChangeIfNeeded");
  }
}

- (BOOL)isInHardwareKeyboardMode
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "rtiInputSourceState");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
    return -[TIKeyboardState hardwareKeyboardMode](self->m_keyboardState, "hardwareKeyboardMode");
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "rtiInputSourceState");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "hardwareKeyboardMode");

  return v7;
}

- (void)proceedShouldReturnIfNeededForASP
{
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;
  void *v7;
  char isKindOfClass;
  void *v9;
  char v10;
  id v11;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentInputMode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "isEqualToString:", CFSTR("autofillsignup")))
  {

LABEL_7:
    -[_UIKeyboardStateManager dismissKeyboard](self, "dismissKeyboard");
    return;
  }
  v6 = -[_UIKeyboardStateManager delegateAlreadyInAutofillGroup](self, "delegateAlreadyInAutofillGroup");

  if (!v6)
    goto LABEL_7;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
    goto LABEL_7;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "delegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_opt_respondsToSelector();

  if ((v10 & 1) != 0)
    -[_UIKeyboardStateManager callShouldInsertText:](self, "callShouldInsertText:", CFSTR("\n"));
  else
    -[_UIKeyboardStateManager dismissKeyboard](self, "dismissKeyboard");

}

- (void)nonDestructivelyDismissKeyboard
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "nonDestructivelyDismissKeyboard");

}

- (void)dismissKeyboard
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "dismissKeyboard");

}

- (void)_attemptAuthenticationWithMessage:(id)a3
{
  if (a3)
    -[TIKeyboardState setEventAuthenticationMessage:](self->m_keyboardState, "setEventAuthenticationMessage:");
}

- (void)cancelAllKeyEvents
{
  -[NSMutableDictionary removeAllObjects](self->m_hardwareKeyDownCodeToEventMap, "removeAllObjects");
}

- (BOOL)_isValidKeyInput:(id)a3
{
  id v4;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  unsigned int v16;

  v4 = a3;
  if (-[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry"))
  {
    p_presentationDelegate = &self->_presentationDelegate;
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v7 = objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = (void *)v7;
      v9 = objc_loadWeakRetained((id *)p_presentationDelegate);
      objc_msgSend(v9, "layout");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "canProduceString:", v4);

      if (!v11)
      {
        v12 = 0;
        goto LABEL_16;
      }
    }
    else
    {

    }
  }
  v13 = objc_msgSend(v4, "length");
  if (v13)
  {
    v14 = v13;
    v12 = 0;
    for (i = 0; i != v14; v12 = i >= v14)
    {
      v16 = objc_msgSend(v4, "characterAtIndex:", i);
      if (v16 <= 0x1F && ((1 << v16) & 0xFFFFD8FF) != 0)
        break;
      ++i;
    }
  }
  else
  {
    v12 = 1;
  }
LABEL_16:

  return v12;
}

- (void)updateKeyboardEventsLagging:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;

  v4 = a3;
  v5 = (double)(unint64_t)GSCurrentEventTimestamp() / 1000000000.0;
  objc_msgSend(v4, "timestamp");
  v7 = v6;

  -[TIKeyboardState setKeyboardEventsLagging:](self->m_keyboardState, "setKeyboardEventsLagging:", v5 - v7 > 0.004, v5 - v7);
}

- (void)_handleWebKeyEvent:(id)a3 withEventType:(unint64_t)a4 withInputString:(id)a5 withInputStringIgnoringModifiers:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  unint64_t v21;

  v10 = a3;
  v11 = a5;
  v12 = a6;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __109___UIKeyboardStateManager__handleWebKeyEvent_withEventType_withInputString_withInputStringIgnoringModifiers___block_invoke;
  v17[3] = &unk_1E16BB560;
  v17[4] = self;
  v18 = v10;
  v20 = v12;
  v21 = a4;
  v19 = v11;
  v14 = v12;
  v15 = v11;
  v16 = v10;
  objc_msgSend(v13, "addTask:", v17);

}

- (void)_handleWebKeyEvent:(id)a3 withEventType:(int)a4 withInputString:(id)a5 withInputStringIgnoringModifiers:(id)a6 executionContext:(id)a7
{
  uint64_t v10;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  objc_class *v23;
  id v24;
  double v25;
  double v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  __int16 v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id val;
  id v44;
  id v45;
  _QWORD v46[4];
  id v47;
  _UIKeyboardStateManager *v48;
  uint64_t *v49;
  _QWORD aBlock[5];
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  id *v56;
  id v57;
  id location;
  id *p_location;
  uint64_t v60;
  uint64_t v61;

  v10 = *(_QWORD *)&a4;
  v12 = a3;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v16)
    {
      objc_msgSend(v16, "textOperations");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setKeyEventForwardedFromInputUIHost:", 1);
      objc_msgSend(v18, "setCustomInfoType:", 0x1E1750380);
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setObject:forKeyedSubscript:", CFSTR("_handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:"), CFSTR("selector"));
      objc_msgSend(v19, "setObject:forKeyedSubscript:", v12, CFSTR("keyEvent"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v10);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setObject:forKeyedSubscript:", v20, CFSTR("webEventType"));

      if (v13)
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v13, CFSTR("inputString"));
      if (v14)
        objc_msgSend(v19, "setObject:forKeyedSubscript:", v14, CFSTR("inputStringIgnoringModifiers"));
      objc_msgSend(v18, "setCustomInfo:", v19);
      -[_UIKeyboardStateManager buildInputSourceState](self, "buildInputSourceState");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setInputSourceState:", v21);

      objc_msgSend(v17, "flushOperations");
    }
    objc_msgSend(v15, "returnExecutionToParent");

  }
  else
  {
    location = 0;
    p_location = &location;
    v60 = 0x2050000000;
    v22 = (id)qword_1ECD7D278;
    v61 = qword_1ECD7D278;
    if (!qword_1ECD7D278)
    {
      v52 = MEMORY[0x1E0C809B0];
      v53 = 3221225472;
      v54 = (uint64_t)__getWebEventClass_block_invoke;
      v55 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E16B14C0;
      v56 = &location;
      __getWebEventClass_block_invoke((uint64_t)&v52);
      v22 = p_location[3];
    }
    v23 = (objc_class *)objc_retainAutorelease(v22);
    _Block_object_dispose(&location, 8);
    v24 = [v23 alloc];
    objc_msgSend(v12, "timestamp");
    v26 = v25;
    v27 = objc_msgSend(v12, "_gsModifierFlags");
    v44 = v14;
    v45 = v13;
    val = v15;
    if (objc_msgSend(v12, "_hidEvent") || self->m_shiftLocked)
      v28 = 0;
    else
      v28 = self->m_shift << 17;
    v29 = v28 | v27;
    v30 = objc_msgSend(v12, "_isARepeat");
    v31 = objc_msgSend(v12, "_inputFlags");
    objc_msgSend(v12, "_hint");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v12, "_keyCode");
    objc_msgSend(v12, "_modifiedInput");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE2(v42) = objc_msgSend(v34, "isEqualToString:", CFSTR("\t"));
    LOWORD(v42) = v33;
    v35 = (void *)objc_msgSend(v24, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", v10, v45, v44, v29, v30, v31, v26, v32, v42);

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v36, "delegateAdoptsWebTextInputPrivate");

    if (v37)
    {
      v52 = 0;
      v53 = (uint64_t)&v52;
      v54 = 0x3032000000;
      v55 = __Block_byref_object_copy__37;
      v56 = (id *)__Block_byref_object_dispose__37;
      v57 = 0;
      v15 = val;
      objc_initWeak(&location, val);
      v38 = MEMORY[0x1E0C809B0];
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __126___UIKeyboardStateManager__handleWebKeyEvent_withEventType_withInputString_withInputStringIgnoringModifiers_executionContext___block_invoke;
      aBlock[3] = &unk_1E16BBF20;
      objc_copyWeak(&v51, &location);
      aBlock[4] = &v52;
      v39 = _Block_copy(aBlock);
      objc_msgSend(val, "setPendingCompletionBlock:", v39);
      ++self->m_changeCount;
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v46[0] = v38;
      v46[1] = 3221225472;
      v46[2] = __126___UIKeyboardStateManager__handleWebKeyEvent_withEventType_withInputString_withInputStringIgnoringModifiers_executionContext___block_invoke_2;
      v46[3] = &unk_1E16BBF48;
      v48 = self;
      v49 = &v52;
      v47 = val;
      objc_msgSend(v40, "handleKeyWebEvent:withCompletionHandler:", v35, v46);

      objc_destroyWeak(&v51);
      objc_destroyWeak(&location);
      _Block_object_dispose(&v52, 8);

    }
    else
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "handleKeyWebEvent:", v35);

      v15 = val;
      objc_msgSend(val, "returnExecutionToParentWithInfo:", MEMORY[0x1E0C9AAB0]);
    }
    v14 = v44;
    v13 = v45;

  }
}

- (void)_handleWebKeyEvent:(id)a3 withIndex:(unint64_t)a4 inInputString:(id)a5
{
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  unint64_t v16;

  v8 = a3;
  v9 = a5;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __70___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString___block_invoke;
  v13[3] = &unk_1E16BB848;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v16 = a4;
  v11 = v9;
  v12 = v8;
  objc_msgSend(v10, "addTask:", v13);

}

- (void)_handleWebKeyEvent:(id)a3 withIndex:(unint64_t)a4 inInputString:(id)a5 executionContext:(id)a6
{
  id v10;
  __CFString *v11;
  id v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  _UIKeyboardStateManager *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  _UIKeyboardStateManager *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  _QWORD v50[5];
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  _QWORD v57[5];
  id v58;
  id v59;
  id v60;
  _QWORD v61[5];
  BOOL v62;
  _QWORD v63[5];
  _QWORD aBlock[5];
  id v65;
  __CFString *v66;
  uint64_t v67;
  uint64_t v68;

  v10 = a3;
  v11 = (__CFString *)a5;
  v12 = a6;
  if (-[__CFString length](v11, "length") <= a4)
  {
    objc_msgSend(v12, "returnExecutionToParent");
  }
  else
  {
    if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "delegateAdoptsWebTextInputPrivate");

      if (v14)
        -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "inputSystemSourceSession");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        objc_msgSend(v16, "textOperations");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", CFSTR("_handleWebKeyEvent:withIndex:inInputString:"), CFSTR("selector"));
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v10, CFSTR("event"));
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("index"));

        if (v11)
          v20 = v11;
        else
          v20 = &stru_1E16EDF20;
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v20, CFSTR("inputString"));
        objc_msgSend(v17, "setCustomInfoType:", 0x1E1750380);
        objc_msgSend(v17, "setCustomInfo:", v18);
        objc_msgSend(v16, "flushOperations");

      }
      objc_msgSend(v12, "returnExecutionToParent");
    }
    else
    {
      -[_UIKeyboardStateManager setExternalTask:](self, "setExternalTask:", 0);
      -[_UIKeyboardStateManager setEventForCurrentWebEvent:](self, "setEventForCurrentWebEvent:", v10);
      *(_WORD *)&self->m_webEventWasHandledAsKeyCommand = 0;
      v21 = -[__CFString rangeOfComposedCharacterSequenceAtIndex:](v11, "rangeOfComposedCharacterSequenceAtIndex:", a4);
      v22 = -[__CFString length](v11, "length");
      if (v22)
      {
        v23 = v11;
        objc_msgSend(v10, "_shiftModifiedInput");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = v24;
        v49 = v23;
        if (v24)
        {
          v26 = v24;
        }
        else
        {
          objc_msgSend(v10, "_unmodifiedInput");
          v26 = (id)objc_claimAutoreleasedReturnValue();
        }
        v48 = v26;

      }
      else
      {
        -[__CFString substringWithRange:](v11, "substringWithRange:", v21, 0);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = (void *)objc_msgSend(v49, "copy");
      }
      v27 = objc_msgSend(v10, "_hidEvent");
      v28 = MEMORY[0x1E0C809B0];
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke;
      aBlock[3] = &unk_1E16BB870;
      aBlock[4] = self;
      v29 = v10;
      v65 = v29;
      v67 = v21;
      v68 = v22;
      v66 = v11;
      v30 = _Block_copy(aBlock);
      v63[0] = v28;
      v63[1] = 3221225472;
      v63[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_2;
      v63[3] = &unk_1E16BBF70;
      v63[4] = self;
      v31 = _Block_copy(v63);
      v61[0] = v28;
      v61[1] = 3221225472;
      v61[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_3;
      v61[3] = &unk_1E16BBF98;
      v62 = v27 != 0;
      v61[4] = self;
      v32 = _Block_copy(v61);
      if (v27)
      {
        if (objc_msgSend(v29, "_isKeyDown"))
          v33 = 4;
        else
          v33 = 5;
        self->m_webEventIsKeyDown = objc_msgSend(v29, "_isKeyDown");
        v57[0] = v28;
        v57[1] = 3221225472;
        v57[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_4;
        v57[3] = &unk_1E16BBFE8;
        v57[4] = self;
        v58 = v31;
        v59 = v32;
        v60 = v30;
        v34 = v32;
        objc_msgSend(v12, "childWithContinuation:", v57);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = self;
        v37 = v33;
        v38 = v48;
        v16 = v49;
        -[_UIKeyboardStateManager _handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:executionContext:](v36, "_handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:executionContext:", v29, v37, v49, v48, v35);

        v39 = v58;
      }
      else
      {
        self->m_webEventIsKeyDown = 1;
        v50[0] = v28;
        v50[1] = 3221225472;
        v50[2] = __87___UIKeyboardStateManager__handleWebKeyEvent_withIndex_inInputString_executionContext___block_invoke_6;
        v50[3] = &unk_1E16BC010;
        v50[4] = self;
        v47 = v29;
        v51 = v47;
        v46 = v49;
        v52 = v46;
        v38 = v48;
        v40 = v48;
        v53 = v40;
        v54 = v31;
        v55 = v32;
        v56 = v30;
        v41 = v32;
        objc_msgSend(v12, "childWithContinuation:", v50);
        v42 = v31;
        v43 = v30;
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = self;
        v16 = v49;
        -[_UIKeyboardStateManager _handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:executionContext:](v45, "_handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:executionContext:", v47, 4, v46, v40, v44);

        v30 = v43;
        v31 = v42;

        v39 = v51;
      }

    }
  }

}

- (void)triggerPendingKeyup
{
  void *v3;
  void *v4;
  _UIKeyboardImplHeldOperation *pendingKeyupOperation;

  if (self->_pendingKeyupOperation)
  {
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardImplHeldOperation operation](self->_pendingKeyupOperation, "operation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addDeferredTask:", v4);

    pendingKeyupOperation = self->_pendingKeyupOperation;
    self->_pendingKeyupOperation = 0;

  }
}

- (void)_handleWebKeyEvent:(id)a3 withInputString:(id)a4 executionContext:(id)a5
{
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  id v15;

  v15 = a3;
  v8 = a4;
  v9 = a5;
  if ((unint64_t)objc_msgSend(v8, "length") >= 2
    && objc_msgSend(v8, "characterAtIndex:", 0) == 46)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "privateInputDelegate");
    v11 = objc_claimAutoreleasedReturnValue();
    if (!v11)
    {
LABEL_6:

      goto LABEL_7;
    }
    v12 = (void *)v11;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "_characterBeforeCaretSelection");

    if (v14 == 46)
    {
      objc_msgSend(v8, "substringFromIndex:", 1);
      v10 = v8;
      v8 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
LABEL_7:
  -[_UIKeyboardStateManager _handleWebKeyEvent:withIndex:inInputString:executionContext:](self, "_handleWebKeyEvent:withIndex:inInputString:executionContext:", v15, 0, v8, v9);

}

- (void)_remapKeyEvent:(id)a3 withKeyEventMap:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;

  v12 = a3;
  v6 = a4;
  LODWORD(a4) = objc_msgSend(v12, "_gsModifierFlags");
  objc_msgSend(v12, "_modifiedInput");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "_unmodifiedInput");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "remapKeyWithString:stringWithoutModifiers:modifierFlags:keyboardState:", v7, v8, a4, self->m_keyboardState);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v12, "_modifiedInput");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isEqualToString:", v9);

    if ((v11 & 1) == 0)
      objc_msgSend(v12, "set_modifiedInput:", v9);
  }

}

- (void)flushTouchEventWaitingForKeyInputEventIfNecessary
{
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager touchEventWaitingForKeyInputEvent](self, "touchEventWaitingForKeyInputEvent");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager touchEventWaitingForKeyInputEvent](self, "touchEventWaitingForKeyInputEvent");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager skipHitTestForTouchEvent:](self, "skipHitTestForTouchEvent:", v4);

    -[_UIKeyboardStateManager setTouchEventWaitingForKeyInputEvent:](self, "setTouchEventWaitingForKeyInputEvent:", 0);
  }
}

- (void)_handleKeyEvent:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  os_signpost_id_t v9;
  os_signpost_id_t v10;
  id WeakRetained;
  NSObject *v12;
  os_signpost_id_t v13;
  os_signpost_id_t v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD);
  void *v17;
  _QWORD v18[5];
  uint8_t buf[16];

  v6 = a3;
  v7 = a4;
  -[_UIKeyboardStateManager setExternalTask:](self, "setExternalTask:", 0);
  kdebug_trace();
  kac_get_log();
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v9 = os_signpost_id_make_with_pointer(v8, v6);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v9;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v10, "appKey", ", buf, 2u);
    }
  }

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "allowResponderChainFirstChanceToHandleKeyEvent:", v6);

  kdebug_trace();
  kac_get_log();
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v13 = os_signpost_id_make_with_pointer(v12, v6);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = v13;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_185066000, v12, OS_SIGNPOST_INTERVAL_END, v14, "appKey", ", buf, 2u);
    }
  }

  -[_UIKeyboardStateManager externalTask](self, "externalTask");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    -[_UIKeyboardStateManager externalTask](self, "externalTask");
    v16 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setExternalTask:](self, "setExternalTask:", 0);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __60___UIKeyboardStateManager__handleKeyEvent_executionContext___block_invoke;
    v18[3] = &unk_1E16BAF98;
    v18[4] = self;
    objc_msgSend(v7, "childWithContinuation:", v18);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v16)[2](v16, v17);

  }
  else
  {
    -[_UIKeyboardStateManager flushTouchEventWaitingForKeyInputEventIfNecessary](self, "flushTouchEventWaitingForKeyInputEventIfNecessary");
    objc_msgSend(v7, "returnExecutionToParent");
  }

}

- (void)handleKeyEvent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  _UIKeyboardStateManager *v14;
  id v15;

  v4 = a3;
  v5 = v4;
  if (objc_msgSend(v4, "_hidEvent"))
  {
    v5 = (void *)objc_msgSend(v4, "_cloneEvent");

  }
  if (!objc_msgSend(v5, "_hidEvent")
    || objc_msgSend(v5, "_modifierFlags") != 0x40000
    || objc_msgSend(v5, "_keyCode") != 40)
  {
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __42___UIKeyboardStateManager_handleKeyEvent___block_invoke;
    v13 = &unk_1E16BB0D8;
    v14 = self;
    v15 = v5;
    v6 = _Block_copy(&v10);
    -[_UIKeyboardStateManager taskQueue](self, "taskQueue", v10, v11, v12, v13, v14);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isMainThreadExecutingTask");

    if (v8)
    {
      -[_UIKeyboardStateManager setExternalTask:](self, "setExternalTask:", v6);
    }
    else
    {
      -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addTask:", v6);

    }
  }

}

- (BOOL)_isKeyCommand:(id)a3
{
  return -[_UIKeyboardStateManager _handleKeyCommandCommon:options:](self, "_handleKeyCommandCommon:options:", a3, 2) != 0;
}

- (BOOL)_handlesKeyCommandForEvent:(id)a3
{
  return -[_UIKeyboardStateManager _handleKeyCommandCommon:options:](self, "_handleKeyCommandCommon:options:", a3, 6) != 0;
}

- (BOOL)_handleKeyCommand:(id)a3
{
  return -[_UIKeyboardStateManager _handleKeyCommandCommon:options:](self, "_handleKeyCommandCommon:options:", a3, 0) != 0;
}

- (unint64_t)_handleKeyCommandCommon:(id)a3 options:(unint64_t)a4
{
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;

  v10 = 0;
  v6 = a3;
  v7 = objc_msgSend(v6, "_hidEvent");
  v8 = -[_UIKeyboardStateManager handleKeyCommand:repeatOkay:options:](self, "handleKeyCommand:repeatOkay:options:", v6, &v10, a4);

  result = 0;
  if (v7 && v8)
  {
    if ((a4 & 2) == 0 && !v10)
      -[_UIKeyboardStateManager cancelAllKeyEvents](self, "cancelAllKeyEvents");
    return v8;
  }
  return result;
}

- (BOOL)_shouldEmitString:(id)a3 forKeyEvent:(id)a4
{
  id v6;
  id WeakRetained;
  int v8;
  BOOL v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v6 = a3;
  if ((objc_msgSend(a4, "_inputFlags") & 0x10) != 0
    && (-[TIKeyboardInputManagerState ignoresDeadKeys](self->m_inputManagerState, "ignoresDeadKeys") & 1) != 0
    || (WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate),
        v8 = objc_msgSend(WeakRetained, "returnKeyState"),
        WeakRetained,
        v8 == 1)
    && (objc_msgSend(v6, "_isNewlineOrReturn") & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "keyboardBehaviors");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager _keyboardBehaviorState](self, "_keyboardBehaviorState");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "keyBehaviorsForState:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = !v13
      || (objc_msgSend(v13, "tabKeyBehavior") == 1 || (objc_msgSend(v6, "isEqualToString:", CFSTR("\t")) & 1) == 0)
      && ((unint64_t)(objc_msgSend(v13, "spaceKeyBehavior") - 3) > 1
       || (objc_msgSend(v6, "isEqualToString:", CFSTR(" ")) & 1) == 0);

  }
  return v9;
}

- (void)handleKeyEvent:(id)a3 executionContext:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  int v12;
  _BOOL8 m_hardwareKeyboardAttached;
  id v14;
  void *v15;
  void *v16;
  char v17;
  id v18;
  void *v19;
  char v20;
  id v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *m_updateCapsLockDelayOverrideForNonTyping;
  UIDelayedAction *v28;
  void *v29;
  int v30;
  void *v31;
  int v32;
  NSMutableDictionary *v33;
  void *v34;
  void *v35;
  NSMutableDictionary *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _BOOL4 v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  int v50;
  void *v51;
  _UIKeyboardPresentationDelegate **v52;
  void *v53;
  const void *v54;
  const void *v55;
  int ModifierState;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  UIDelayedAction *m_showCursorAccessory;
  UIDelayedAction *v61;
  UIDelayedAction *v62;
  void *v63;
  void *v64;
  _UIInvalidatable *v65;
  _UIInvalidatable *m_hideCursorAccessoriesAssertion;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  int v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  void *v77;
  int v78;
  id v79;
  void *v80;
  NSMutableDictionary *m_hardwareKeyDownCodeToEventMap;
  void *v82;
  void *v83;
  void *v84;
  _WORD *v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id *location;
  _BOOL4 v94;
  _QWORD v95[5];
  id v96;
  id v97;
  id v98;
  _WORD v99[5];

  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "_privatize");
  if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost")
    || +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    && (objc_msgSend(v6, "_inputFlags") & 0x80) != 0)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "forwardKeyboardEventToUIHost:", v6);

    objc_msgSend(v7, "returnExecutionToParent");
  }
  else
  {
    if ((objc_msgSend(v6, "_inputFlags") & 0x20) == 0)
    {
      -[_UIKeyboardStateManager updateKeyboardEventsLagging:](self, "updateKeyboardEventsLagging:", v6);
      v9 = objc_msgSend(v6, "_hidEvent");
      p_presentationDelegate = &self->_presentationDelegate;
      WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      v12 = objc_msgSend(WeakRetained, "isEmojiPopoverPresented");

      m_hardwareKeyboardAttached = self->m_hardwareKeyboardAttached;
      if (self->m_hardwareKeyboardAttached && !v9 && (v12 & 1) == 0)
        m_hardwareKeyboardAttached = -[_UIKeyboardStateManager exclusivityIdentifierMatched](self, "exclusivityIdentifierMatched", m_hardwareKeyboardAttached);
      -[_UIKeyboardStateManager setInHardwareKeyboardMode:](self, "setInHardwareKeyboardMode:", m_hardwareKeyboardAttached);
      v94 = v9 != 0;
      if (self->m_hardwareKeyboardAttached && v9)
      {
        v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
        objc_msgSend(v14, "setHardwareKeyboardIsSeen");

        +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "currentInputMode");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isExtensionInputMode");

        if ((v17 & 1) == 0)
        {
          -[_UIKeyboardStateManager setAutomaticMinimizationEnabled:](self, "setAutomaticMinimizationEnabled:", 1);
          v18 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          objc_msgSend(v18, "geometryDelegate");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v19, "isMinimized");

          if ((v20 & 1) == 0)
            -[_UIKeyboardStateManager toggleSoftwareKeyboard](self, "toggleSoftwareKeyboard");
          v21 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
          objc_msgSend(v21, "dismissFloatingKeyboardFromPencilKitIfNeeded");

        }
        +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v22, "hideSystemInputAssistantView"))
        {
          objc_msgSend(v22, "setHideSystemInputAssistantView:", 0);
          objc_msgSend(v22, "systemInputAssistantViewController");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "shouldBeShownForInputDelegate:inputViews:", 0, 0);

          if (v24)
            objc_msgSend(v22, "minimize");
          else
            objc_msgSend(v22, "setHideSystemInputAssistantView:", 1);
        }
        if (-[_UIKeyboardStateManager isCapsLockASCIIToggle](self, "isCapsLockASCIIToggle"))
        {
          -[_UIKeyboardStateManager updateCapsLockDelayOverrideForNonTyping](self, "updateCapsLockDelayOverrideForNonTyping");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v25, "scheduled");

          if (v26)
          {
            -[_UIKeyboardStateManager updateCapsLockDelayOverrideForNonTyping](self, "updateCapsLockDelayOverrideForNonTyping");
            m_updateCapsLockDelayOverrideForNonTyping = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(m_updateCapsLockDelayOverrideForNonTyping, "touch");
          }
          else
          {
            -[_UIKeyboardStateManager adjustCapsLockDelayOverride](self, "adjustCapsLockDelayOverride");
            -[_UIKeyboardStateManager clearCapsLockDelayOverrideTimer](self, "clearCapsLockDelayOverrideTimer");
            v28 = -[UIDelayedAction initWithTarget:action:userInfo:delay:]([UIDelayedAction alloc], "initWithTarget:action:userInfo:delay:", self, sel_removeCapsLockDelayOverride, 0, 0.15);
            m_updateCapsLockDelayOverrideForNonTyping = self->m_updateCapsLockDelayOverrideForNonTyping;
            self->m_updateCapsLockDelayOverrideForNonTyping = v28;
          }

        }
      }
      else if (!v9)
      {
        goto LABEL_38;
      }
      if (objc_msgSend(v6, "_isKeyDown"))
      {
        if (objc_msgSend(v6, "_isARepeat"))
        {
          objc_msgSend(v6, "_modifiedInput");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = objc_msgSend(v29, "_isDelete");

          if (v30)
          {
            self->m_repeatDeleteFromHardwareKeyboard = 1;
            self->m_autoDeleteCount = 0;
          }
        }
      }
      if (objc_msgSend(v6, "_isKeyDown") && objc_msgSend(v6, "_isARepeat"))
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v31 || -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
        {
LABEL_37:

          goto LABEL_38;
        }
        v42 = -[_UIKeyboardStateManager canPresentPressAndHoldPopover:](self, "canPresentPressAndHoldPopover:", v6);

        if (v42)
        {
          -[_UIKeyboardStateManager documentState](self, "documentState");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "contextBeforeInput");
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v31, "length"))
          {
            v44 = objc_msgSend(v31, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v31, "length") - 1);
            objc_msgSend(v31, "substringWithRange:", v44, v45);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            if (+[UIPressAndHoldPopoverController canPresentPressAndHoldPopoverForKeyString:](UIPressAndHoldPopoverController, "canPresentPressAndHoldPopoverForKeyString:", v46))
            {
              v47 = objc_loadWeakRetained((id *)p_presentationDelegate);
              objc_msgSend(v47, "presentPressAndHoldPopoverWithKeyString:", v46);

            }
            objc_msgSend(v7, "returnExecutionToParent");

            goto LABEL_113;
          }
          goto LABEL_37;
        }
      }
LABEL_38:
      +[UIInputSwitcher activeInstance](UIInputSwitcher, "activeInstance");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v9)
        goto LABEL_64;
      if ((objc_msgSend(v6, "_isARepeat") & 1) != 0)
      {
LABEL_55:
        -[_UIKeyboardStateManager updatedKeyBehaviors](self, "updatedKeyBehaviors");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v6, "_isKeyDown"))
        {
LABEL_61:
          objc_msgSend(v7, "returnExecutionToParent");

          goto LABEL_113;
        }
        objc_msgSend(v6, "_modifiedInput");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v49, "_isPlainSpace") && objc_msgSend(v48, "spaceKeyBehavior") == 8)
        {

          goto LABEL_61;
        }
        v50 = v12;
        v51 = v31;
        v52 = p_presentationDelegate;
        objc_msgSend(v6, "_modifiedInput");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v53, "_isNewlineOrReturn") & 1) != 0)
        {
          v92 = objc_msgSend(v48, "returnKeyBehavior");

          p_presentationDelegate = v52;
          v31 = v51;
          v12 = v50;
          if (v92 == 8)
            goto LABEL_61;
        }
        else
        {

          p_presentationDelegate = v52;
          v31 = v51;
          v12 = v50;
        }

LABEL_64:
        v54 = (const void *)objc_msgSend((id)UIApp, "_hardwareKeyboardForPhysicalKeyboardEvent:createIfNeeded:", v6, 0);
        v55 = v54;
        location = (id *)p_presentationDelegate;
        if (v54)
        {
          CFRetain(v54);
          ModifierState = GSKeyboardGetModifierState();
        }
        else
        {
          ModifierState = 0;
        }
        objc_msgSend(v31, "hideSwitcherIfNeeded");
        v57 = objc_msgSend((id)UIApp, "_hardwareKeyboardForPhysicalKeyboardEvent:createIfNeeded:", v6, 0);
        if (v9)
        {
          v58 = v57;
          if (v55 != (const void *)v57)
          {
            if ((ModifierState & 0x220000) != 0)
            {
              v99[0] = 0;
              v90 = 0;
              v91 = 7;
              v88 = 0;
              v89 = v99;
              v86 = 0;
              v87 = v99;
              v85 = v99;
              GSKeyboardTranslateKeyExtendedCommandWithUsagePage();
            }
            objc_msgSend(v6, "_setHIDEvent:keyboard:", objc_msgSend(v6, "_hidEvent", v85, v86, v87, v88, v89, v90, v91), v58);
          }
        }
        if (v55)
          CFRelease(v55);
        if (+[UIKeyboard isRedesignedTextCursorEnabled](UIKeyboard, "isRedesignedTextCursorEnabled")
          && objc_msgSend(v6, "_keyCode") != 57
          && (objc_msgSend(v6, "_isGlobeKey") & 1) == 0)
        {
          -[_UIKeyboardStateManager inputModeIndicatorController](self, "inputModeIndicatorController");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "keyPressed");

          m_showCursorAccessory = self->m_showCursorAccessory;
          if (!m_showCursorAccessory)
          {
            v61 = -[UIDelayedAction initWithTarget:action:userInfo:delay:]([UIDelayedAction alloc], "initWithTarget:action:userInfo:delay:", self, sel_showCursorAccessory, 0, 0.5);
            v62 = self->m_showCursorAccessory;
            self->m_showCursorAccessory = v61;

            m_showCursorAccessory = self->m_showCursorAccessory;
          }
          -[UIDelayedAction touch](m_showCursorAccessory, "touch");
          if (!self->m_hideCursorAccessoriesAssertion)
          {
            -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v63, "_selectionViewManager");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v64, "_obtainHideCursorAccessoriesAssertionWithReason:", CFSTR("key press"));
            v65 = (_UIInvalidatable *)objc_claimAutoreleasedReturnValue();
            m_hideCursorAccessoriesAssertion = self->m_hideCursorAccessoriesAssertion;
            self->m_hideCursorAccessoriesAssertion = v65;

          }
        }
        -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "keyEventMap");
        v68 = (void *)objc_claimAutoreleasedReturnValue();

        if (v68)
        {
          -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "keyEventMap");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager _remapKeyEvent:withKeyEventMap:](self, "_remapKeyEvent:withKeyEventMap:", v6, v70);

        }
        objc_msgSend(v6, "_modifiedInput");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        v72 = -[_UIKeyboardStateManager _shouldEmitString:forKeyEvent:](self, "_shouldEmitString:forKeyEvent:", v71, v6);
        if (v72)
        {
          if (objc_msgSend(v71, "length"))
          {
            if (-[_UIKeyboardStateManager _isValidKeyInput:](self, "_isValidKeyInput:", v71))
            {
              if (-[_UIKeyboardStateManager delayedCandidateList](self, "delayedCandidateList"))
              {
                if (self->m_candidateList)
                {
                  if (!-[_UIKeyboardStateManager isPredictionViewControllerVisible](self, "isPredictionViewControllerVisible"))
                  {
                    v73 = objc_loadWeakRetained(location);
                    objc_msgSend(v73, "candidateController");
                    v74 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v74, "inlineCandidateView");
                    v75 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v75)
                      -[_UIKeyboardStateManager removeCandidateList](self, "removeCandidateList");
                  }
                }
              }
            }
          }
        }
        if (v12 && objc_msgSend(v6, "_isKeyDown"))
        {
          v76 = objc_loadWeakRetained(location);
          objc_msgSend(v76, "emojiPopoverController");
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          v78 = objc_msgSend(v77, "handleHardwareKeyboardEvent:", v6);

          v72 = v78 ^ 1;
          if (((v78 | v94) & 1) != 0)
          {
LABEL_96:
            if (!-[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents")
              || (objc_msgSend(v6, "_isGlobeKey") & 1) != 0
              || ((v72 ^ 1) & 1) != 0)
            {
              if ((v78 & 1) == 0 && -[_UIKeyboardStateManager _handleKeyCommand:](self, "_handleKeyCommand:", v6))
                goto LABEL_111;
              -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "keyInputDelegate");
              v84 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v84
                || !v72
                || objc_msgSend(v71, "length")
                && !-[_UIKeyboardStateManager _isValidKeyInput:](self, "_isValidKeyInput:", v71))
              {
                goto LABEL_111;
              }
              if (objc_msgSend(v71, "length"))
              {
                v95[0] = MEMORY[0x1E0C809B0];
                v95[1] = 3221225472;
                v95[2] = __59___UIKeyboardStateManager_handleKeyEvent_executionContext___block_invoke;
                v95[3] = &unk_1E16B51E8;
                v95[4] = self;
                v96 = v71;
                v97 = v6;
                v98 = v7;
                -[_UIKeyboardStateManager performOperations:withTextInputSource:](self, "performOperations:withTextInputSource:", v95, objc_msgSend(v97, "source"));

LABEL_112:
                goto LABEL_113;
              }
            }
            else
            {
              objc_msgSend(v31, "hideSwitcherIfNeeded");
              if (objc_msgSend(v71, "length"))
              {
                -[_UIKeyboardStateManager _handleWebKeyEvent:withInputString:executionContext:](self, "_handleWebKeyEvent:withInputString:executionContext:", v6, v71, v7);
                if ((objc_msgSend(v6, "_modifierFlags") & 0x100000) != 0)
                {
                  m_hardwareKeyDownCodeToEventMap = self->m_hardwareKeyDownCodeToEventMap;
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", objc_msgSend(v6, "_keyCode"));
                  v82 = (void *)objc_claimAutoreleasedReturnValue();
                  -[NSMutableDictionary removeObjectForKey:](m_hardwareKeyDownCodeToEventMap, "removeObjectForKey:", v82);

                }
                goto LABEL_112;
              }
            }
            -[_UIKeyboardStateManager completeHandleKeyEvent:](self, "completeHandleKeyEvent:", v6);
LABEL_111:
            objc_msgSend(v7, "returnExecutionToParent");
            goto LABEL_112;
          }
          v79 = objc_loadWeakRetained(location);
          objc_msgSend(v79, "emojiPopoverController");
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v79, "dismissKeyboardPopover:beforeCleanup:completion:", v80, 0, 0);

        }
        LOBYTE(v78) = 0;
        goto LABEL_96;
      }
      v32 = objc_msgSend(v6, "_isKeyDown");
      v33 = self->m_hardwareKeyDownCodeToEventMap;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", objc_msgSend(v6, "_keyCode"));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32)
      {
        -[NSMutableDictionary setObject:forKey:](v33, "setObject:forKey:", v6, v34);
      }
      else
      {
        -[NSMutableDictionary objectForKey:](v33, "objectForKey:", v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();

        if (v35)
        {
          v36 = self->m_hardwareKeyDownCodeToEventMap;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", objc_msgSend(v6, "_keyCode"));
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSMutableDictionary removeObjectForKey:](v36, "removeObjectForKey:", v37);

          if (self->m_repeatDeleteFromHardwareKeyboard)
            -[_UIKeyboardStateManager stopAutoDelete](self, "stopAutoDelete");
          if (-[_UIKeyboardStateManager _delegateRequiresKeyEvents](self, "_delegateRequiresKeyEvents"))
          {
            v38 = (void *)objc_msgSend(v6, "_cloneEvent");
            objc_msgSend(v35, "_modifiedInput");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "set_modifiedInput:", v39);

            objc_msgSend(v35, "_unmodifiedInput");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "set_unmodifiedInput:", v40);

            objc_msgSend(v38, "_modifiedInput");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            -[_UIKeyboardStateManager _handleWebKeyEvent:withInputString:executionContext:](self, "_handleWebKeyEvent:withInputString:executionContext:", v38, v41, v7);

LABEL_113:
            goto LABEL_114;
          }
          p_presentationDelegate = &self->_presentationDelegate;
          v34 = v35;
          goto LABEL_54;
        }
        v34 = 0;
      }
      p_presentationDelegate = &self->_presentationDelegate;
LABEL_54:

      goto LABEL_55;
    }
    -[_UIKeyboardStateManager handleModifiersChangeForKeyEvent:executionContext:](self, "handleModifiersChangeForKeyEvent:executionContext:", v6, v7);
  }
LABEL_114:

}

- (void)handleModifiersChangeForKeyEvent:(id)a3 executionContext:(id)a4
{
  id v6;
  void *v7;
  __int16 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void *v18;
  id WeakRetained;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;

  v23 = a3;
  v6 = a4;
  if (objc_msgSend(v23, "_hidEvent") && (objc_msgSend(v23, "_modifierFlags") & 0x20000) != 0 && self->m_autoshift)
  {
    self->m_autoshift = 0;
    -[_UIKeyboardStateManager _forwardNeededShiftStatesToDestination](self, "_forwardNeededShiftStatesToDestination");
  }
  -[_UIKeyboardStateManager showCursorAccessory](self, "showCursorAccessory");
  +[UIInputSwitcher sharedInstance](UIInputSwitcher, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleModifiersChangedEvent:", v23);

  v8 = objc_msgSend(v23, "_keyCode");
  if (-[_UIKeyboardStateManager shouldShowKeyboardMenu](self, "shouldShowKeyboardMenu")
    && v8 == 57
    && objc_msgSend(v23, "_hidEvent")
    && -[_UIKeyboardStateManager isCapsLockSwitchEnabled](self, "isCapsLockSwitchEnabled")
    && objc_msgSend(v23, "_isKeyDown"))
  {
    +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "inputModeForASCIIToggleWithTraits:", self->m_traits);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "activeInputModes");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "containsObject:", v10);

      if (v13)
      {
        -[_UIKeyboardStateManager showCursorAccessory](self, "showCursorAccessory");
        objc_msgSend(v10, "identifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = -[_UIKeyboardStateManager switchMode:withHUD:withDelay:fromCapsLock:](self, "switchMode:withHUD:withDelay:fromCapsLock:", v14, 1, 1, 1);

        if (!v15)
          goto LABEL_15;
        v16 = (void *)UIApp;
        +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "hardwareInputMode");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "automaticHardwareLayout");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setHardwareKeyboardLayoutName:", v18);

      }
    }

  }
LABEL_15:
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "setCapsLockIfNeededForPhysicalKeyboardEvent:", v23);

  if (objc_msgSend(v23, "_isKeyDown"))
    v20 = 4;
  else
    v20 = 5;
  objc_msgSend(v23, "_unmodifiedInput");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "_modifiedInput");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:executionContext:](self, "_handleWebKeyEvent:withEventType:withInputString:withInputStringIgnoringModifiers:executionContext:", v23, v20, v21, v22, v6);

}

- (void)cancelDictationOnSendReturnKeyPressed
{
  id v2;

  if (-[UITextInputTraits returnKeyType](self->m_traits, "returnKeyType") == 7)
  {
    if (+[UIDictationController isRunning](UIDictationController, "isRunning"))
    {
      +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
      v2 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "cancelDictation");

    }
  }
}

- (void)handleKeyWithString:(id)a3 forKeyEvent:(id)a4 executionContext:(id)a5
{
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  id WeakRetained;
  void *v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  unsigned int v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void *);
  void *v31;
  _UIKeyboardStateManager *v32;
  id v33;
  _QWORD v34[5];
  id v35;
  _QWORD v36[5];
  id v37;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = objc_msgSend(v9, "_inputFlags");
  v12 = v11;
  v13 = v11 & 0x18;
  v14 = v13 != 0;
  if ((unint64_t)objc_msgSend(v8, "length") >= 2)
  {
    objc_msgSend(v8, "substringFromIndex:", objc_msgSend(v8, "length") - 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "_isDelete");

    if ((v16 & 1) == 0)
      goto LABEL_3;
LABEL_7:
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "playDeleteKeyFeedbackIfNecessaryRepeat:rapid:", 0, 0);

    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __76___UIKeyboardStateManager_handleKeyWithString_forKeyEvent_executionContext___block_invoke;
    v36[3] = &unk_1E16BB0D8;
    v36[4] = self;
    v37 = v9;
    objc_msgSend(v10, "childWithContinuation:", v36);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager handleDeleteAsRepeat:executionContext:](self, "handleDeleteAsRepeat:executionContext:", 0, v20);

    v21 = v37;
LABEL_19:

    goto LABEL_20;
  }
  if (objc_msgSend(v8, "_isDelete"))
    goto LABEL_7;
LABEL_3:
  if (!objc_msgSend(v8, "_isNewlineOrReturn"))
  {
    v22 = -[_UIKeyboardStateManager shouldSkipCandidateSelection](self, "shouldSkipCandidateSelection");
    self->m_originalShouldSkipCandidateSelection = v22;
    if ((v13 != 0) == v22 || -[_UIKeyboardStateManager isInHardwareKeyboardMode](self, "isInHardwareKeyboardMode"))
    {
      -[_UIKeyboardStateManager textInputTraits](self, "textInputTraits");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "keyboardType");
      if ((v24 > 0xB || ((1 << v24) & 0x930) == 0) && v24 != 127)
      {

        goto LABEL_15;
      }

      v14 = 1;
    }
    -[_UIKeyboardStateManager setShouldSkipCandidateSelection:](self, "setShouldSkipCandidateSelection:", v14);
LABEL_15:
    if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
      -[_UIKeyboardStateManager updateShiftState](self, "updateShiftState");
    objc_msgSend(v9, "_hint");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = MEMORY[0x1E0C809B0];
    v29 = 3221225472;
    v30 = __76___UIKeyboardStateManager_handleKeyWithString_forKeyEvent_executionContext___block_invoke_3;
    v31 = &unk_1E16BB0D8;
    v32 = self;
    v33 = v9;
    objc_msgSend(v10, "childWithContinuation:", &v28);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager handleStringInput:withFlags:withInputManagerHint:executionContext:](self, "handleStringInput:withFlags:withInputManagerHint:executionContext:", v8, v12, v25, v26, v28, v29, v30, v31, v32);

    v21 = v33;
    goto LABEL_19;
  }
  -[_UIKeyboardStateManager cancelDictationOnSendReturnKeyPressed](self, "cancelDictationOnSendReturnKeyPressed");
  if (!-[UITextInputTraits returnKeyGoesToNextResponder](self->m_traits, "returnKeyGoesToNextResponder"))
  {
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = __76___UIKeyboardStateManager_handleKeyWithString_forKeyEvent_executionContext___block_invoke_2;
    v34[3] = &unk_1E16BB0D8;
    v34[4] = self;
    v35 = v9;
    objc_msgSend(v10, "childWithContinuation:", v34);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager handleStringInput:withFlags:withInputManagerHint:executionContext:](self, "handleStringInput:withFlags:withInputManagerHint:executionContext:", CFSTR("\n"), v12, 0, v27);

    v21 = v35;
    goto LABEL_19;
  }
  -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "_nextKeyResponder");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "becomeFirstResponder");

  -[_UIKeyboardStateManager completeHandleKeyEvent:](self, "completeHandleKeyEvent:", v9);
  objc_msgSend(v10, "returnExecutionToParent");
LABEL_20:

}

- (void)completeHandleKeyEvent:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(a3, "_markedInput");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "length"))
  {
    self->m_textInputChangesIgnored = 1;
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setMarkedText:selectedRange:", v7, objc_msgSend(v7, "length"), 0);

    -[_UIKeyboardStateManager documentState](self, "documentState");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "documentStateAfterSettingMarkedText:selectedRange:", v7, objc_msgSend(v7, "length"), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager setDocumentState:](self, "setDocumentState:", v6);

    -[TIKeyboardState setInputForMarkedText:](self->m_keyboardState, "setInputForMarkedText:", v7);
    self->m_textInputChangesIgnored = 0;
    -[_UIKeyboardStateManager updateChangeTimeAndIncrementCount](self, "updateChangeTimeAndIncrementCount");
    -[_UIKeyboardStateManager setShiftOffIfNeeded](self, "setShiftOffIfNeeded");
  }
  self->m_textInputChangingCount = 0;
  *(_WORD *)&self->m_textInputChangesIgnored = 0;
  self->m_textInputChangingDirection = 0;

}

- (BOOL)shouldDeferEventHandlingToSystemForTextInput:(id)a3 context:(id)a4
{
  void *v5;

  objc_msgSend(a4, "_uikitKeyEventContext", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(self) = -[_UIKeyboardStateManager deferEventHandlingToSystemWithContext:](self, "deferEventHandlingToSystemWithContext:", v5);

  return (char)self;
}

- (BOOL)deferEventHandlingToSystemWithContext:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  BOOL v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint8_t v20[16];

  v4 = a3;
  objc_msgSend(v4, "keyEvent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "shouldEvaluateForInputSystemHandling"))
  {
    if ((objc_msgSend(v4, "documentIsEditable") & 1) == 0 && objc_msgSend(v5, "keyCode") == 43)
    {
      _UIKeyboardImplLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v20 = 0;
        v9 = "deferEventHandlingToSystemWithContext, handled tab";
LABEL_41:
        _os_log_debug_impl(&dword_185066000, v8, OS_LOG_TYPE_DEBUG, v9, v20, 2u);
        goto LABEL_42;
      }
      goto LABEL_42;
    }
    if ((objc_msgSend(v4, "shouldInsertChar") & 1) == 0
      && -[_UIKeyboardStateManager handleKeyTextCommandForCurrentEvent](self, "handleKeyTextCommandForCurrentEvent"))
    {
      _UIKeyboardImplLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v20 = 0;
        v11 = "deferEventHandlingToSystemWithContext, handleKeyTextCommandForCurrentEvent";
LABEL_45:
        _os_log_debug_impl(&dword_185066000, v10, OS_LOG_TYPE_DEBUG, v11, v20, 2u);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
    if (objc_msgSend(v4, "shouldInsertChar")
      && -[_UIKeyboardStateManager handleKeyAppCommandForCurrentEvent](self, "handleKeyAppCommandForCurrentEvent"))
    {
      _UIKeyboardImplLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v20 = 0;
        v11 = "deferEventHandlingToSystemWithContext, handleKeyAppCommandForCurrentEvent";
        goto LABEL_45;
      }
      goto LABEL_16;
    }
    if ((objc_msgSend(v5, "modifierFlags") & 0x100000) != 0)
    {
      _UIKeyboardImplLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v20 = 0;
        v9 = "deferEventHandlingToSystemWithContext, handled command modifier";
        goto LABEL_41;
      }
LABEL_42:

      v7 = 0;
      goto LABEL_43;
    }
    objc_msgSend(v5, "characters");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "length");

    if (!v13)
    {
      _UIKeyboardImplLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v20 = 0;
        v9 = "deferEventHandlingToSystemWithContext, handled no characters";
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    objc_msgSend(v5, "characters");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "characterAtIndex:", 0);

    if (v15 > 12)
    {
      if (v15 != 13)
      {
        if (v15 != 127)
          goto LABEL_22;
        goto LABEL_32;
      }
    }
    else if (v15 != 3)
    {
      if (v15 != 8)
      {
LABEL_22:
        if (objc_msgSend(v4, "documentIsEditable") && objc_msgSend(v4, "shouldInsertChar"))
        {
          objc_msgSend(v5, "characters");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v5, "inputFlags");
          objc_msgSend(v5, "inputManagerHint");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          -[_UIKeyboardStateManager addInputString:withFlags:withInputManagerHint:](self, "addInputString:withFlags:withInputManagerHint:", v16, v17, v18);

          _UIKeyboardImplLog();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v20 = 0;
            v11 = "deferEventHandlingToSystemWithContext, addInputString for character";
            goto LABEL_45;
          }
LABEL_16:

          v7 = 1;
          goto LABEL_43;
        }
LABEL_39:
        _UIKeyboardImplLog();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v20 = 0;
          v9 = "deferEventHandlingToSystemWithContext, did not handle";
          goto LABEL_41;
        }
        goto LABEL_42;
      }
LABEL_32:
      if (objc_msgSend(v4, "documentIsEditable"))
      {
        -[_UIKeyboardStateManager deleteFromInputWithFlags:](self, "deleteFromInputWithFlags:", objc_msgSend(v5, "inputFlags"));
        _UIKeyboardImplLog();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v20 = 0;
          v11 = "deferEventHandlingToSystemWithContext, deleteFromInputWithFlags";
          goto LABEL_45;
        }
        goto LABEL_16;
      }
      goto LABEL_39;
    }
    if (objc_msgSend(v4, "documentIsEditable") && objc_msgSend(v4, "shouldInsertChar"))
    {
      -[_UIKeyboardStateManager addInputString:withFlags:withInputManagerHint:](self, "addInputString:withFlags:withInputManagerHint:", CFSTR("\n"), 0, 0);
      _UIKeyboardImplLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v20 = 0;
        v11 = "deferEventHandlingToSystemWithContext, addInputString for enter";
        goto LABEL_45;
      }
      goto LABEL_16;
    }
    goto LABEL_39;
  }
  _UIKeyboardImplLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v20 = 0;
    _os_log_debug_impl(&dword_185066000, v6, OS_LOG_TYPE_DEBUG, "deferEventHandlingToSystemWithContext, shouldEvaluateForInputSystemHandling", v20, 2u);
  }

  v7 = -[_UIKeyboardStateManager handleKeyInputMethodCommandForCurrentEvent](self, "handleKeyInputMethodCommandForCurrentEvent");
LABEL_43:

  return v7;
}

- (void)toggleSoftwareKeyboard
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "toggleSoftwareKeyboard");

}

- (void)ejectKeyDown
{
  id WeakRetained;
  id v4;

  if (-[_UIKeyboardStateManager shouldApplyKeyboardCommandToUIHost](self, "shouldApplyKeyboardCommandToUIHost"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "forwardInputDestinationEventToUIHost:", sel_ejectKeyDown);

  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "setHardwareKeyboardIsSeen");

    -[_UIKeyboardStateManager toggleSoftwareKeyboard](self, "toggleSoftwareKeyboard");
  }
}

- (void)setKeyboardMinimizedByDictation:(BOOL)a3
{
  _BOOL8 v3;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v7;
  int v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[2];
  _QWORD v21[3];

  v3 = a3;
  v21[2] = *MEMORY[0x1E0C80C00];
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "geometryDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isMinimized");

  if (v8 != v3)
  {
    +[UIDictationController activeInstance](UIDictationController, "activeInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setShouldSuppressSoftwareKeyboard:", v3);

    v10 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v10, "geometryDelegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setMinimized:", v3);

    if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (v12)
      {
        objc_msgSend(v12, "textOperations");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "setCustomInfoType:", 0x1E1750220);
        v20[0] = CFSTR("selector");
        NSStringFromSelector(sel_setKeyboardMinimizedByDictation_);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v20[1] = CFSTR("minimized");
        v21[0] = v15;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v21[1] = v16;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 2);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "setCustomInfo:", v17);

        objc_msgSend(v13, "flushOperations");
      }

    }
    else if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
    {
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v19 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "forwardDictationEventToUIHost:withOptionalObject:", sel_setKeyboardMinimizedByDictation_, v18);

    }
  }
}

- (id)_activeAssertionController
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_assertionController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "selectionDisplayInteraction");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_cursorAssertionController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

- (void)setCaretVisible:(BOOL)a3
{
  _BOOL8 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "setCaretVisible:", v3);

}

- (void)clearSelection
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id v7;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "__content");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    self->m_textInputChangesIgnored = 1;
    -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "activeSelection");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "clearSelection");
    objc_msgSend(v7, "commit");
    -[_UIKeyboardStateManager syncDocumentStateToInputDelegate](self, "syncDocumentStateToInputDelegate");
    self->m_textInputChangesIgnored = 0;

  }
}

- (id)dynamicCaretList
{
  void *v2;
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_legacySelectionView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dynamicCaretList");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)updateNoContentViews
{
  void *v3;
  void *v4;
  id v5;

  -[_UIKeyboardStateManager dynamicCaretList](self, "dynamicCaretList");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_legacySelectionView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updateDocumentHasContent:", -[_UIKeyboardStateManager noContent](self, "noContent") ^ 1);

  }
}

- (BOOL)canHandleKeyHitTest
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager inputManagerState](self, "inputManagerState");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "canHandleKeyHitTest");

  return v3;
}

- (BOOL)isAutoFillMode
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "keyInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "keyInputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isAutoFillMode");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)trackUsageForAcceptedAutocorrection:(id)a3 promptWasShowing:(BOOL)a4
{
  _BOOL4 v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a4;
  v8 = a3;
  UIKeyboardGetCurrentInputMode();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v8, "isForShortcutConversion"))
  {
    TIStatisticGetKeyForCandidateAccepted();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    TIStatisticScalarIncrement();

  }
  else if (objc_msgSend(v8, "wordOriginFeedbackID"))
  {
    objc_msgSend(v8, "usageTrackingMask");
    TIStatisticScalarIncrementAutocorrectionKey();
    if (v4)
    {
      objc_msgSend(v8, "usageTrackingMask");
      TIStatisticScalarIncrementAutocorrectionKey();
    }
  }

}

- (void)trackUsageForPromptedCorrection:(id)a3 inputString:(id)a4 previousPrompt:(id)a5
{
  id v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a5;
  v7 = a3;
  objc_msgSend(v14, "correction");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "isEqualToString:", v8);

  if ((v9 & 1) == 0)
  {
    UIKeyboardGetCurrentInputMode();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v14, "usageTrackingMask");
      TIStatisticScalarIncrementAutocorrectionKey();
    }
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "autocorrection");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "usageTrackingMask");
    TIStatisticScalarIncrementAutocorrectionKey();

  }
}

- (void)trackUsageForCandidateAcceptedAction:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *WeakRetained;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  id v17;

  v17 = a3;
  -[UIKeyboardCandidateList statisticsIdentifier](self->m_candidateList, "statisticsIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_11;
  UIKeyboardGetCurrentInputMode();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  TIStatisticGetKeyForCandidateAccepted();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  TIStatisticScalarIncrement();

  if ((UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL) != 1)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "currentKeyplane");
    v10 = objc_claimAutoreleasedReturnValue();
    if (!v10)
    {

      goto LABEL_7;
    }
    v11 = (void *)v10;
    v12 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v12, "layout");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "currentKeyplane");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "visualStyling");

    if ((v15 & 0x40) != 0)
    {
      TIStatisticGetKeyForCandidateAccepted();
      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
      TIStatisticScalarIncrement();
LABEL_7:

    }
  }
  if (-[UIKeyboardCandidateList selectedSortIndex](self->m_candidateList, "selectedSortIndex") != 0x7FFFFFFFFFFFFFFFLL)
  {
    TIStatisticGetKeyForCandidateAcceptedSelectedSortingMethod();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    TIStatisticScalarIncrement();

  }
LABEL_11:

}

- (id)responderForSendCurrentLocation
{
  void *v2;
  uint64_t v3;
  void *v4;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0 && (v3 = objc_msgSend(v2, "_sendCurrentLocationAction")) != 0)
  {
    objc_msgSend(v2, "targetForAction:withSender:", v3, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (void)performSendCurrentLocation
{
  void *v3;
  const char *v4;
  id v5;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager responderForSendCurrentLocation](self, "responderForSendCurrentLocation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (const char *)objc_msgSend(v5, "_sendCurrentLocationAction");
    if (dyld_program_sdk_at_least())
      objc_msgSend(v3, v4);
    else
      objc_msgSend(v3, sel_performSelector_, v4);
  }

}

- (void)enableTransientInputDelegateSelectionMode
{
  void *v3;
  _QWORD v4[5];

  objc_msgSend(MEMORY[0x1E0C99E58], "mainRunLoop");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __68___UIKeyboardStateManager_enableTransientInputDelegateSelectionMode__block_invoke;
  v4[3] = &unk_1E16B1B28;
  v4[4] = self;
  objc_msgSend(v3, "performBlock:", v4);

}

- (void)enableTransientSelectionMode
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "delegateRespectingForwardingDelegate:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _setTransientSelectionModeEnabled:forInputDelegate:](self, "_setTransientSelectionModeEnabled:forInputDelegate:", 1, v4);

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "inputSystemSourceSession");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v7, "textOperations");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setEditingActionSelector:", sel_enableTransientSelectionMode);
      objc_msgSend(v7, "flushOperations");

    }
  }
}

- (void)disableTransientSelectionMode
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "delegateRespectingForwardingDelegate:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager _setTransientSelectionModeEnabled:forInputDelegate:](self, "_setTransientSelectionModeEnabled:forInputDelegate:", 0, v4);

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "inputSystemSourceSession");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v7, "textOperations");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setEditingActionSelector:", sel_disableTransientSelectionMode);
      objc_msgSend(v7, "flushOperations");

    }
  }
}

- (void)clearForwardingInputDelegateAndResign:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a3;
  if (-[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText"))
  {
    if (+[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI"))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "forwardingInputDelegate");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "unmarkText");

      }
    }
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "clearForwardingInputDelegateAndResign:", v3);

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "forwardClearForwardingInputDelegateAndResign:", v3);

}

- (void)didChangeForwardingInputDelegate:(id)a3
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v11;
  char v12;
  void *v13;
  id v14;

  -[_UIKeyboardStateManager takeTextInputTraitsFromDelegate](self, "takeTextInputTraitsFromDelegate");
  if (a3)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "forwardingInputDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "keyboardType");

    if (v7 == 122)
      -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:](self, "recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:", 0, 1);
  }
  else
  {
    -[_UIKeyboardStateManager disableTransientSelectionMode](self, "disableTransientSelectionMode");
    -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:](self, "recomputeActiveInputModesWithExtensions:allowNonLinguisticInputModes:", 1, 1);
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "updateRenderConfigForCurrentResponder");

    -[_UIKeyboardStateManager reinitializeAfterInputModeSwitch:](self, "reinitializeAfterInputModeSwitch:", 0);
    p_presentationDelegate = &self->_presentationDelegate;
    WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_opt_respondsToSelector();

    if ((v12 & 1) != 0)
    {
      v14 = objc_loadWeakRetained((id *)p_presentationDelegate);
      objc_msgSend(v14, "layout");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "didTriggerDestructiveRenderConfigChange");

    }
  }
}

- (void)_setTransientSelectionModeEnabled:(BOOL)a3 forInputDelegate:(id)a4
{
  _BOOL8 v4;
  void *v5;
  id v6;

  v4 = a3;
  v6 = a4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v6, "interactionAssistant");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setSelectionDisplayVisible:", 1);
    objc_msgSend(v5, "setCursorBlinkAnimationEnabled:", v4 ^ 1);
    objc_msgSend(v5, "setGhostAppearance:", v4);

  }
}

- (void)_performKeyboardOutput:(id)a3 respectingForwardingDelegate:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void (**v14)(void);

  v4 = a4;
  v14 = (void (**)(void))a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "forwardingInputDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7 || v4)
  {
    v14[2]();
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "shouldRespectForwardingInputDelegate");

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setShouldRespectForwardingInputDelegate:", 0);

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "updateRespectForwardingInputDelegateFlagInDestination");

    v14[2]();
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setShouldRespectForwardingInputDelegate:", v9);

    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "updateRespectForwardingInputDelegateFlagInDestination");

  }
}

- (void)_ensureRTIConnection
{
  id v2;

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "ensureRTIConnection");

}

- (UIKBRTIPartner)remoteTextInputPartner
{
  UIKBRTIPartner *v3;
  UIKBRTIPartner *remoteTextInputPartner;
  void *v5;
  int v6;
  UIKBRTIPartner *v7;

  if (!self->_remoteTextInputPartner)
  {
    v3 = objc_alloc_init(UIKBRTIPartner);
    remoteTextInputPartner = self->_remoteTextInputPartner;
    self->_remoteTextInputPartner = v3;

    -[UIKBRTIPartner setPartnerDelegate:](self->_remoteTextInputPartner, "setPartnerDelegate:", self);
    -[UIKBRTIPartner setInputSystemClientEnabled:](self->_remoteTextInputPartner, "setInputSystemClientEnabled:", -[_UIKeyboardStateManager serviceRole](self, "serviceRole") == 1);
  }
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    && (+[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate"), v5 = (void *)objc_claimAutoreleasedReturnValue(), v6 = objc_msgSend(v5, "automaticAppearanceEnabled"), v5, !v6))
  {
    v7 = 0;
  }
  else
  {
    v7 = self->_remoteTextInputPartner;
  }
  return v7;
}

- (UIKBRTIPartner)remoteTextInputPartnerPrivate
{
  void *remoteTextInputPartner;
  void *v4;
  UIKBRTIPartner *v5;

  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  remoteTextInputPartner = (void *)objc_claimAutoreleasedReturnValue();
  v4 = remoteTextInputPartner;
  if (!remoteTextInputPartner)
    remoteTextInputPartner = self->_remoteTextInputPartner;
  v5 = remoteTextInputPartner;

  return v5;
}

- (id)buildInputSourceState
{
  id WeakRetained;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "buildInputSourceState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)notifyInputSourceStateChangeIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v6 = v3;
      objc_msgSend(v3, "textOperations");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager buildInputSourceState](self, "buildInputSourceState");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setInputSourceState:", v5);

      objc_msgSend(v6, "flushOperations");
      v3 = v6;
    }

  }
}

- (id)remoteTextEditingMetadata
{
  return (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
}

- (unint64_t)delegateConformanceType
{
  void *v2;
  unint64_t v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "delegateConformanceType");

  return v3;
}

- (void)resetInputDelegate
{
  id v3;

  -[_UIKeyboardStateManager delegate](self, "delegate");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setDelegate:](self, "setDelegate:", 0);
  -[_UIKeyboardStateManager setDelegate:](self, "setDelegate:", v3);

}

- (id)inputSystemSourceSession
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "inputSystemSourceSession");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)modifyTextInputTraits:(id)a3 forceSync:(BOOL)a4
{
  _BOOL8 v4;
  UITextInputTraits *remoteTextInputTraits;
  void (**v7)(id, id);
  id v8;

  v4 = a4;
  remoteTextInputTraits = self->_remoteTextInputTraits;
  v7 = (void (**)(id, id))a3;
  v8 = (id)-[UITextInputTraits copy](remoteTextInputTraits, "copy");
  v7[2](v7, v8);

  -[_UIKeyboardStateManager updateInputDelegateForRemoteTraitChange:forceSync:](self, "updateInputDelegateForRemoteTraitChange:forceSync:", v8, v4);
}

- (void)updateInputDelegateForRemoteTraitChange:(id)a3 forceSync:(BOOL)a4
{
  _BOOL4 v4;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  char v32;
  void *v33;
  void *v34;
  char v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  int v41;
  id WeakRetained;
  uint64_t v43;
  void *v44;
  int v45;
  _BOOL4 v46;
  void *v47;
  uint64_t v48;
  void *v49;
  __CFString *v50;
  uint64_t v51;
  void *v52;
  const __CFString *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  int v57;
  int64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  UITextInputTraits *v64;
  UITextInputTraits *v65;
  UITextInputTraits *v66;
  UITextInputTraits *v67;
  int v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  void *v77;
  BOOL v78;
  void *v79;
  void *v80;
  void *v81;
  BOOL v82;
  int v83;
  void *v84;
  void *v85;
  UITextInputTraits *v86;
  UITextInputTraits *m_traits;
  _BOOL4 v88;
  char v89;
  uint64_t v90;
  int64_t v91;
  int64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  int v96;
  __CFString *v97;
  _QWORD v98[2];

  v4 = a4;
  v98[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (!-[_UIKeyboardStateManager showingEmojiSearch](self, "showingEmojiSearch"))
  {
    objc_storeStrong((id *)&self->_remoteTextInputTraits, a3);
    v8 = objc_msgSend(v7, "autocapitalizationType");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setAutocapitalizationType:", v8);

    v10 = objc_msgSend(v7, "autocorrectionType");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setAutocorrectionType:", v10);

    v12 = objc_msgSend(v7, "spellCheckingType");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setSpellCheckingType:", v12);

    v14 = objc_msgSend(v7, "keyboardType");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setKeyboardType:", v14);

    v16 = objc_msgSend(v7, "returnKeyType");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setReturnKeyType:", v16);

    v18 = objc_msgSend(v7, "enablesReturnKeyAutomatically");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setEnablesReturnKeyAutomatically:", v18);

    v20 = objc_msgSend(v7, "isSecureTextEntry");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setSecureTextEntry:", v20);

    objc_msgSend(v7, "textContentType");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setTextContentType:", v22);

    v24 = objc_msgSend(v7, "smartInsertDeleteType");
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v25 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v25, "setSmartInsertDeleteType:", v24);

    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v25) = objc_opt_respondsToSelector();

    if ((v25 & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setForceEnableDictation:", objc_msgSend(v7, "forceEnableDictation"));

    }
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_opt_respondsToSelector();

    if ((v29 & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "setDevicePasscodeEntry:", objc_msgSend(v7, "isDevicePasscodeEntry"));

    }
    -[UITextInputTraits setHidePrediction:](self->m_traits, "setHidePrediction:", objc_msgSend(v7, "hidePrediction"));
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_opt_respondsToSelector();

    if ((v32 & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setHidePrediction:", objc_msgSend(v7, "hidePrediction"));

    }
    -[UITextInputTraits setDisablePrediction:](self->m_traits, "setDisablePrediction:", objc_msgSend(v7, "disablePrediction"));
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_opt_respondsToSelector();

    if ((v35 & 1) != 0)
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "setDisablePrediction:", objc_msgSend(v7, "disablePrediction"));

    }
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_opt_respondsToSelector();

    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v38 & 1) != 0)
    {
      objc_msgSend(v39, "setInlinePredictionType:", objc_msgSend(v7, "inlinePredictionType"));
    }
    else
    {
      v40 = objc_opt_respondsToSelector();

      if ((v40 & 1) == 0)
        goto LABEL_15;
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "setInlineCompletionType:", objc_msgSend(v7, "inlinePredictionType"));
    }

  }
LABEL_15:
  v41 = -[UITextInputTraits forceFloatingKeyboard](self->m_traits, "forceFloatingKeyboard");
  if (v41 != objc_msgSend(v7, "forceFloatingKeyboard"))
  {
    -[UITextInputTraits setForceFloatingKeyboard:](self->m_traits, "setForceFloatingKeyboard:", objc_msgSend(v7, "forceFloatingKeyboard"));
    -[_UIKeyboardStateManager setFloatingForced:](self, "setFloatingForced:", objc_msgSend(v7, "forceFloatingKeyboard"));
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "refreshRivenPreferences");

    -[_UIKeyboardStateManager notifyInputSourceStateChangeIfNeeded](self, "notifyInputSourceStateChangeIfNeeded");
  }
  v43 = -[TIKeyboardState autofillMode](self->m_keyboardState, "autofillMode");
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = v43;
  objc_msgSend(v44, "setDelegateNeedsAutofillMode:", v43);

  if (v4)
    -[_UIKeyboardStateManager _requestInputManagerSync](self, "_requestInputManagerSync");
  v45 = objc_msgSend(v7, "forceEnableDictation");
  v46 = -[UITextInputTraits forceEnableDictation](self->m_traits, "forceEnableDictation");
  objc_msgSend(v7, "inputContextHistory");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  -[UITextInputTraits inputContextHistory](self->m_traits, "inputContextHistory");
  v93 = (void *)objc_claimAutoreleasedReturnValue();

  v95 = v47;
  objc_msgSend(v7, "responseContext");
  v48 = objc_claimAutoreleasedReturnValue();
  v49 = (void *)v48;
  if (v48)
    v50 = (__CFString *)v48;
  else
    v50 = &stru_1E16EDF20;
  -[UITextInputTraits responseContext](self->m_traits, "responseContext");
  v51 = objc_claimAutoreleasedReturnValue();
  v52 = (void *)v51;
  if (v51)
    v53 = (const __CFString *)v51;
  else
    v53 = &stru_1E16EDF20;
  v96 = -[__CFString isEqualToString:](v50, "isEqualToString:", v53);

  v54 = objc_msgSend(v7, "keyboardAppearance");
  v55 = -[UITextInputTraits keyboardAppearance](self->m_traits, "keyboardAppearance");
  v56 = objc_msgSend(v7, "updateResultComparedToTraits:", self->m_traits);
  v57 = -[UITextInputTraits isSecureTextEntry](self->m_traits, "isSecureTextEntry");
  if (v57 == objc_msgSend(v7, "isSecureTextEntry")
    && (v58 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType"), v58 == objc_msgSend(v7, "keyboardType")))
  {
    v91 = v55;
    -[UITextInputTraits textContentType](self->m_traits, "textContentType");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "textContentType");
    v60 = objc_claimAutoreleasedReturnValue();
    if (v59 == (void *)v60)
    {

      v86 = (UITextInputTraits *)objc_msgSend(v7, "copy");
      m_traits = self->m_traits;
      self->m_traits = v86;

      goto LABEL_32;
    }
    v61 = (void *)v60;
    -[UITextInputTraits textContentType](self->m_traits, "textContentType");
    v90 = v54;
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "textContentType");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = objc_msgSend(v62, "isEqualToString:", v63);

    v54 = v90;
    v64 = (UITextInputTraits *)objc_msgSend(v7, "copy");
    v65 = self->m_traits;
    self->m_traits = v64;

    v55 = v91;
    if ((v89 & 1) != 0)
      goto LABEL_32;
  }
  else
  {
    v66 = (UITextInputTraits *)objc_msgSend(v7, "copy");
    v67 = self->m_traits;
    self->m_traits = v66;

  }
  -[_UIKeyboardStateManager recomputeActiveInputModesWithExtensions:](self, "recomputeActiveInputModesWithExtensions:", objc_msgSend(v7, "isSecureTextEntry") ^ 1);
LABEL_32:
  v68 = v45 ^ v46;
  if (v4
    && (-[_UIKeyboardStateManager delegate](self, "delegate"),
        v69 = (void *)objc_claimAutoreleasedReturnValue(),
        v69,
        v69)
    && v56 == 2)
  {
    v92 = v55;
    v70 = v54;
    v72 = v93;
    v71 = v94;
    if (self->m_shift)
    {
      v73 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
      objc_msgSend(v73, "layout");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v74
        || self->m_shiftLocked
        || -[_UIKeyboardStateManager callLayoutIsShiftKeyBeingHeld](self, "callLayoutIsShiftKeyBeingHeld"))
      {

      }
      else
      {
        v88 = -[_UIKeyboardStateManager callLayoutIsShiftKeyPlaneChooser](self, "callLayoutIsShiftKeyPlaneChooser");

        if (v88)
          -[_UIKeyboardStateManager clearShiftState](self, "clearShiftState");
      }
    }
    if (v70 != v92 && +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
    {
      +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "traitCollectionDidChange");

    }
    v76 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v76, "updateLayout");

    v77 = v95;
  }
  else
  {
    v78 = v56 == 1;
    v71 = v94;
    v77 = v95;
    v72 = v93;
    if (v78)
      -[_UIKeyboardStateManager updateReturnKey:](self, "updateReturnKey:", 1);
  }
  if (v68)
  {
    +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = CFSTR("reason");
    v98[0] = CFSTR("Dictation state changed due to trait change");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v98, &v97, 1);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "postNotificationName:userInfo:", CFSTR("UIKeyboardDictationAvailabilityDidChangeNotification"), v80);

  }
  self->m_cachedAutofillMode = -[_UIKeyboardStateManager needAutofill](self, "needAutofill");
  if (v71)
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v81, "hasAutofillCandidates"))
    {

    }
    else
    {
      v82 = -[TIKeyboardCandidateResultSet hasOnlySlottedCandidates](self->m_candidateResultSet, "hasOnlySlottedCandidates");

      if (!v82)
        -[_UIKeyboardStateManager generateAutofillCandidateByAddingTask:](self, "generateAutofillCandidateByAddingTask:", 1);
    }
  }
  if (v77 == v72)
    v83 = v96;
  else
    v83 = 1;
  if (v83 == 1)
    -[_UIKeyboardStateManager responseContextDidChange](self, "responseContextDidChange");
  if ((+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
     || +[UIKeyboard usesInputSystemUIForAutoFillOnlyWithRTI](UIKeyboard, "usesInputSystemUIForAutoFillOnlyWithRTI"))&& -[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "documentTraitsChanged");

  }
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "updateDelegateConformanceForRemoteTraits");

  }
}

- (void)updateInputDelegateForRemoteDocumentStateChange:(id)a3 selectedTextRange:(_NSRange)a4 hasText:(BOOL)a5 forceSync:(BOOL)a6
{
  NSUInteger length;
  NSUInteger location;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  _QWORD v27[5];
  id v28;
  id v29;
  NSUInteger v30;
  NSUInteger v31;
  BOOL v32;
  BOOL v33;

  length = a4.length;
  location = a4.location;
  v11 = a3;
  objc_msgSend(v11, "fullString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "selectedText");
  v13 = objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = (void *)v13;
    objc_msgSend(v11, "selectedText");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "length");

    if (!v16)
    {
      v26 = objc_alloc(MEMORY[0x1E0DBDB78]);
      objc_msgSend(v11, "contextBeforeInput");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "markedText");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "contextAfterInput");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v11, "selectedRangeInMarkedText");
      v21 = objc_msgSend(v26, "initWithUnboundedContextBefore:markedText:selectedText:unboundedContextAfter:selectedRangeInMarkedText:", v25, v17, 0, v18, v19, v20);

      v11 = (id)v21;
    }
  }
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __111___UIKeyboardStateManager_updateInputDelegateForRemoteDocumentStateChange_selectedTextRange_hasText_forceSync___block_invoke;
  v27[3] = &unk_1E16BC080;
  v32 = a6;
  v33 = a5;
  v27[4] = self;
  v28 = v12;
  v29 = v11;
  v30 = location;
  v31 = length;
  v23 = v11;
  v24 = v12;
  objc_msgSend(v22, "addTask:", v27);

}

- (void)updateForExpectedRemoteDocumentStateChange:(id)a3 selectedTextRange:(_NSRange)a4 forceSync:(BOOL)a5
{
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];

  if (a5
    && -[_UIKeyboardStateManager hasAutocorrectPrompt](self, "hasAutocorrectPrompt", a3, a4.location, a4.length)
    && +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "autocorrection");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager updateAutocorrectPrompt:](self, "updateAutocorrectPrompt:", v7);

  }
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue", a3, a4.location, a4.length);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __98___UIKeyboardStateManager_updateForExpectedRemoteDocumentStateChange_selectedTextRange_forceSync___block_invoke;
  v9[3] = &unk_1E16BAF98;
  v9[4] = self;
  objc_msgSend(v8, "addTask:", v9);

}

- (BOOL)assertTextForRemoteDocument:(id)a3 withSelectionDelta:(id)a4 updatingSelection:(BOOL)a5
{
  _BOOL4 v5;
  int64_t var1;
  int64_t var0;
  id v9;
  BOOL v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[5];

  v5 = a5;
  var1 = a4.var1;
  var0 = a4.var0;
  v9 = a3;
  v10 = v9 != 0;
  if (v9)
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager replaceAllTextInResponder:withText:](self, "replaceAllTextInResponder:withText:", v11, v9);

  }
  if (var0 | var1)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "asyncCapableInputDelegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __92___UIKeyboardStateManager_assertTextForRemoteDocument_withSelectionDelta_updatingSelection___block_invoke;
      v19[3] = &unk_1E16B1B28;
      v19[4] = self;
      objc_msgSend(v14, "adjustSelection:completionHandler:", var0, var1, v19);

      v10 = 1;
    }
    else
    {
      -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "_rangeFromCurrentRangeWithDelta:", var0, var1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setSelectedTextRange:", v16);

      if (v5)
      {
        -[_UIKeyboardStateManager updateForChangedSelection](self, "updateForChangedSelection");
        v10 = 1;
      }

    }
  }

  return v10;
}

- (id)asyncWebKitInteractionDelegate
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "asyncWebKitInteractionDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)insertAttributedText:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "insertAttributedText:", v4);

}

- (void)insertAdaptiveImageGlyph:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "delegateRespectingForwardingDelegate:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (-[_UIKeyboardStateManager canInsertAdaptiveImageGlyph](self, "canInsertAdaptiveImageGlyph")
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "selectedTextRange");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "insertAdaptiveImageGlyph:replacementRange:", v7, v6);

    -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", 0);
  }

}

- (void)insertEmojiImageTextAttachment:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "delegateRespectingForwardingDelegate:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (-[_UIKeyboardStateManager canInsertEmojiImageTextAttachment](self, "canInsertEmojiImageTextAttachment")
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "selectedTextRange");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "insertEmojiImageTextAttachment:replacementRange:", v7, v6);

    -[_UIKeyboardStateManager setPreviousInputString:](self, "setPreviousInputString:", 0);
  }

}

- (void)updateAssistantViewInfo:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v4;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "updateAssistantViewInfo:", v4);

}

- (void)applyAssistantItem:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v4;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "applyAssistantItem:", v4);

}

- (void)unmarkText:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "unmarkText:", v4);

}

- (BOOL)_hasMarkedText
{
  void *v2;
  char v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_hasMarkedText");

  return v3;
}

- (id)_markedText
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "markedText");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)handleRemoteDictationEvent_switchToDictationInputModeWithOptions:(id)a3
{
  id v3;
  int has_internal_diagnostics;
  BOOL v5;
  void *v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  v3 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v5 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v5)
    {
      __UIFaultDebugAssertLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v5)
  {
    v8 = handleRemoteDictationEvent_switchToDictationInputModeWithOptions____s_category;
    if (!handleRemoteDictationEvent_switchToDictationInputModeWithOptions____s_category)
    {
      v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&handleRemoteDictationEvent_switchToDictationInputModeWithOptions____s_category);
    }
    v9 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Unexpected event handling", v10, 2u);
    }
  }
  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "switchToDictationInputModeWithOptions:", v3);

}

- (void)handleRemoteDictationEvent_switchToDictationLanguage:(id)a3
{
  id v3;
  int has_internal_diagnostics;
  BOOL v5;
  void *v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  v3 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v5 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v5)
    {
      __UIFaultDebugAssertLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v5)
  {
    v8 = handleRemoteDictationEvent_switchToDictationLanguage____s_category;
    if (!handleRemoteDictationEvent_switchToDictationLanguage____s_category)
    {
      v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&handleRemoteDictationEvent_switchToDictationLanguage____s_category);
    }
    v9 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Unexpected event handling", v10, 2u);
    }
  }
  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "switchToDictationLanguage:", v3);

}

- (void)handleRemoteDictationEvent_startDictation
{
  int has_internal_diagnostics;
  BOOL v3;
  void *v4;
  NSObject *v5;
  unint64_t v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v3 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v3)
  {
    v6 = handleRemoteDictationEvent_startDictation___s_category;
    if (!handleRemoteDictationEvent_startDictation___s_category)
    {
      v6 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&handleRemoteDictationEvent_startDictation___s_category);
    }
    v7 = *(NSObject **)(v6 + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "Unexpected event handling", v8, 2u);
    }
  }
  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDictation");

}

- (void)handleRemoteDictationEvent_stopDictation:(BOOL)a3
{
  _BOOL8 v3;
  int has_internal_diagnostics;
  BOOL v5;
  void *v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v3 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v5 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v5)
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v5)
  {
    v9 = handleRemoteDictationEvent_stopDictation____s_category;
    if (!handleRemoteDictationEvent_stopDictation____s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&handleRemoteDictationEvent_stopDictation____s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Unexpected event handling", v11, 2u);
    }
  }
  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stopDictation:", v3);

  +[UIDictationController activeInstance](UIDictationController, "activeInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "resignFirstResponderWhenIdleIfNeeded");

}

- (void)handleRemoteDictationEvent_cancelDictation
{
  int has_internal_diagnostics;
  BOOL v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v3 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v3)
  {
    v7 = handleRemoteDictationEvent_cancelDictation___s_category;
    if (!handleRemoteDictationEvent_cancelDictation___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&handleRemoteDictationEvent_cancelDictation___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unexpected event handling", v9, 2u);
    }
  }
  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "cancelDictation");

  +[UIDictationController activeInstance](UIDictationController, "activeInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "resignFirstResponderWhenIdleIfNeeded");

}

- (void)handleRemoteDictationEvent_handleTip:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  unint64_t v13;
  NSObject *v14;
  uint8_t v15[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v12, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v13 = handleRemoteDictationEvent_handleTip____s_category;
    if (!handleRemoteDictationEvent_handleTip____s_category)
    {
      v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&handleRemoteDictationEvent_handleTip____s_category);
    }
    v14 = *(NSObject **)(v13 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Unexpected event handling", v15, 2u);
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "dictationPopoverController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("text"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("title"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "presentTip:tipDescription:", v10, v11);

  }
  else
  {
    objc_msgSend(v8, "dismissTip");
  }

}

- (void)handleRemoteDictationEvent_movePopoverView:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  void *v8;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  unint64_t v18;
  NSObject *v19;
  uint8_t v20[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v17, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v18 = handleRemoteDictationEvent_movePopoverView____s_category;
    if (!handleRemoteDictationEvent_movePopoverView____s_category)
    {
      v18 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v18, (unint64_t *)&handleRemoteDictationEvent_movePopoverView____s_category);
    }
    v19 = *(NSObject **)(v18 + 8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "Unexpected event handling", v20, 2u);
    }
  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_window");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "window");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 != v11)
  {
    v12 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v12, "dictationPopoverController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("sourceRect"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "rectValue");
    objc_msgSend(v13, "movePopoverView:");

    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("editMenuFrame"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v16 = objc_loadWeakRetained((id *)p_presentationDelegate);
      objc_msgSend(v15, "rectValue");
      objc_msgSend(v16, "setEditMenuFrame:");

    }
  }

}

- (void)handleRemoteDictationEvent_setEditMenuFrame:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  void *v8;
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v11;
  id v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  NSObject *v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v15 = handleRemoteDictationEvent_setEditMenuFrame____s_category;
    if (!handleRemoteDictationEvent_setEditMenuFrame____s_category)
    {
      v15 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v15, (unint64_t *)&handleRemoteDictationEvent_setEditMenuFrame____s_category);
    }
    v16 = *(NSObject **)(v15 + 8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "Unexpected event handling", v17, 2u);
    }
  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_window");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "window");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 != v11)
  {
    v12 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("editMenuFrame"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "rectValue");
    objc_msgSend(v12, "setEditMenuFrame:");

  }
}

- (void)handleRemoteDictationEvent_updateIdleDetection:(int64_t)a3
{
  int has_internal_diagnostics;
  BOOL v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v8 = handleRemoteDictationEvent_updateIdleDetection____s_category;
    if (!handleRemoteDictationEvent_updateIdleDetection____s_category)
    {
      v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&handleRemoteDictationEvent_updateIdleDetection____s_category);
    }
    v9 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Unexpected event handling", v10, 2u);
    }
  }
  -[_UIKeyboardStateManager updateIdleDetection:](self, "updateIdleDetection:", a3);
}

- (void)handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases
{
  int has_internal_diagnostics;
  BOOL v3;
  void *v4;
  NSObject *v5;
  unint64_t v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v3 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v3)
  {
    v6 = handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases___s_category;
    if (!handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases___s_category)
    {
      v6 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases___s_category);
    }
    v7 = *(NSObject **)(v6 + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "Unexpected event handling", v8, 2u);
    }
  }
  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stopDictationIgnoreFinalizePhrases");

}

- (void)handleRemoteDictationEvent_resumeDictation
{
  int has_internal_diagnostics;
  BOOL v3;
  void *v4;
  NSObject *v5;
  unint64_t v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v3 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v3)
    {
      __UIFaultDebugAssertLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v3)
  {
    v6 = handleRemoteDictationEvent_resumeDictation___s_category;
    if (!handleRemoteDictationEvent_resumeDictation___s_category)
    {
      v6 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v6, (unint64_t *)&handleRemoteDictationEvent_resumeDictation___s_category);
    }
    v7 = *(NSObject **)(v6 + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "Unexpected event handling", v8, 2u);
    }
  }
  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "resumeDictation");

}

- (void)handleRemoteKeyboardCameraEvent_startCameraInput:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "Unexpected event handling", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v10 = handleRemoteKeyboardCameraEvent_startCameraInput____s_category;
    if (!handleRemoteKeyboardCameraEvent_startCameraInput____s_category)
    {
      v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v10, (unint64_t *)&handleRemoteKeyboardCameraEvent_startCameraInput____s_category);
    }
    v11 = *(NSObject **)(v10 + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Unexpected event handling", v12, 2u);
    }
  }
  +[UIKeyboardCameraSession sharedSession](UIKeyboardCameraSession, "sharedSession");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "showForResponder:sender:rtiConfiguration:", v8, 0, v4);

}

- (void)handleEventFromRemoteSource_insertSupplementalCandidate:(id)a3 textToCommit:(id)a4
{
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  const __CFString *v10;
  _UIKeyboardStateManager *v11;
  id v12;

  v12 = a3;
  v6 = (__CFString *)a4;
  self->m_didSyncDocumentStateToInputDelegate = 0;
  if (!v6)
    goto LABEL_11;
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7
    && (-[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v8, "callShouldReplaceExtendedRange:withText:includeMarkedText:", 0, v6, -[_UIKeyboardStateManager _hasMarkedText](self, "_hasMarkedText")), v8, !v9))
  {
    v10 = &stru_1E16EDF20;
    v11 = self;
  }
  else
  {
    if (objc_msgSend(v12, "isSupplementalItemCandidate"))
    {
      -[_UIKeyboardStateManager _willReplaceText:withSupplementalCandidate:](self, "_willReplaceText:withSupplementalCandidate:", v6, v12);
      -[_UIKeyboardStateManager unmarkText:](self, "unmarkText:", v6);
      -[_UIKeyboardStateManager _didReplaceText:withSupplementalCandidate:](self, "_didReplaceText:withSupplementalCandidate:", v6, v12);
      goto LABEL_9;
    }
    v11 = self;
    v10 = v6;
  }
  -[_UIKeyboardStateManager unmarkText:](v11, "unmarkText:", v10);
LABEL_9:
  if (objc_msgSend(v12, "isSupplementalItemCandidate"))
    -[_UIKeyboardStateManager _insertSupplementalCandidate:overridingCandidateText:](self, "_insertSupplementalCandidate:overridingCandidateText:", v12, v6);
LABEL_11:

}

- (void)handleEventFromRemoteSource_chooseSupplementalItem:(id)a3 toReplaceText:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void (**v9)(void *, void *, id);
  void *v10;
  char v11;
  void *v12;
  _UIStringAndPositionPair *v13;
  void *v14;
  id *v15;
  void *v16;
  void *v17;
  BOOL v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  void (**v25)(void *, void *, id);
  id v26[2];
  id location;
  _QWORD aBlock[5];

  v6 = a3;
  v7 = a4;
  v8 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __92___UIKeyboardStateManager_handleEventFromRemoteSource_chooseSupplementalItem_toReplaceText___block_invoke;
  aBlock[3] = &unk_1E16BC0A8;
  aBlock[4] = self;
  v9 = (void (**)(void *, void *, id))_Block_copy(aBlock);
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_opt_respondsToSelector();

  if ((v11 & 1) != 0 && objc_msgSend(v6, "count"))
  {
    -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = [_UIStringAndPositionPair alloc];
    objc_msgSend(v12, "start");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[_UIStringAndPositionPair initWithString:position:]((id *)&v13->super.isa, v7, v14);

    -[_UIKeyboardStateManager pendingSupplementalCandidateToInsert](self, "pendingSupplementalCandidateToInsert");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[_UIStringAndPositionPair isEqualToPair:inputDelegate:]((uint64_t)v16, v15, v17);

    if (!v18)
    {
      -[_UIKeyboardStateManager setPendingSupplementalCandidateToInsert:](self, "setPendingSupplementalCandidateToInsert:", v15);
      if (objc_msgSend(v6, "count") == 1)
      {
        -[_UIKeyboardStateManager setPendingSupplementalCandidateToInsert:](self, "setPendingSupplementalCandidateToInsert:", 0);
        objc_msgSend(v6, "firstObject");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v9[2](v9, v19, v7);

      }
      else
      {
        objc_initWeak(&location, self);
        v20 = (void *)(self->m_lastChooseSupplementalItemToInsertCallbackIdentifier + 1);
        self->m_lastChooseSupplementalItemToInsertCallbackIdentifier = (unint64_t)v20;
        self->m_textInputChangesIgnored = 1;
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22[0] = v8;
        v22[1] = 3221225472;
        v22[2] = __92___UIKeyboardStateManager_handleEventFromRemoteSource_chooseSupplementalItem_toReplaceText___block_invoke_2;
        v22[3] = &unk_1E16BC0D0;
        objc_copyWeak(v26, &location);
        v25 = v9;
        v23 = v7;
        v26[1] = v20;
        v24 = v12;
        objc_msgSend(v21, "_chooseSupplementalItemToInsert:replacementRange:completionHandler:", v6, v24, v22);

        self->m_textInputChangesIgnored = 0;
        objc_destroyWeak(v26);
        objc_destroyWeak(&location);
      }
    }

  }
  else
  {
    v9[2](v9, 0, v7);
  }

}

- (void)handleEventCallbackFromRemoteDestination_didChooseSupplementalItem:(id)a3 toReplaceText:(id)a4
{
  id v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  id v9;

  v9 = a3;
  v6 = a4;
  -[_UIKeyboardStateManager chooseSupplementalCandidateCompletion](self, "chooseSupplementalCandidateCompletion");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[_UIKeyboardStateManager chooseSupplementalCandidateCompletion](self, "chooseSupplementalCandidateCompletion");
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, id))v8)[2](v8, v9, v6);

    -[_UIKeyboardStateManager setChooseSupplementalCandidateCompletion:](self, "setChooseSupplementalCandidateCompletion:", 0);
  }

}

- (void)handleEventFromRemoteSource_insertionPointEnteredText:(id)a3 withSupplementalCandidate:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  -[_UIKeyboardStateManager _rangeForSupplementalItemText:](self, "_rangeForSupplementalItemText:", v8);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isEmpty") & 1) == 0)
    -[_UIKeyboardStateManager _dispatchInsertionPointEnteredText:range:withSupplementalCandidate:](self, "_dispatchInsertionPointEnteredText:range:withSupplementalCandidate:", v8, v7, v6);

}

- (void)handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection:(BOOL)a3
{
  void *v5;
  _QWORD v6[5];
  BOOL v7;

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __107___UIKeyboardStateManager_handleEventFromRemoteDestination_canSuggestSupplementalItemsForCurrentSelection___block_invoke;
  v6[3] = &unk_1E16BBCF8;
  v6[4] = self;
  v7 = a3;
  objc_msgSend(v5, "addTask:", v6);

}

- (void)handleEventFromRemoteSource_insertAutofillContent:(id)a3
{
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = (objc_class *)MEMORY[0x1E0DBDC40];
  v5 = a3;
  v6 = objc_alloc_init(v4);
  v7 = (void *)objc_msgSend(v5, "copy");

  objc_msgSend(v6, "setCustomInfo:", v7);
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __77___UIKeyboardStateManager_handleEventFromRemoteSource_insertAutofillContent___block_invoke;
  v10[3] = &unk_1E16BB0D8;
  v10[4] = self;
  v11 = v6;
  v9 = v6;
  objc_msgSend(v8, "addTask:", v10);

}

- (void)handleEventFromRemoteSource_autoFillIsMenuPresented:(BOOL)a3
{
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  void *v12;
  void *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  void *v44;
  int v45;
  id v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  if (self->m_isAutoFillMenuPresented == a3)
  {
    if (a3)
LABEL_3:
      self->m_shouldSuppressSelectionCommands = 1;
  }
  else
  {
    self->m_isAutoFillMenuPresented = a3;
    if (a3)
    {
      +[UIPeripheralHost visiblePeripheralFrame](UIPeripheralHost, "visiblePeripheralFrame");
      v5 = v4;
      v7 = v6;
      v9 = v8;
      v11 = v10;
      -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "rtiDocumentState");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "caretRectInWindow");
      v49.origin.x = v14;
      v49.origin.y = v15;
      v49.size.width = v16;
      v49.size.height = v17;
      v47.origin.x = v5;
      v47.origin.y = v7;
      v47.size.width = v9;
      v47.size.height = v11;
      v18 = CGRectContainsRect(v47, v49);

      if (v18)
      {
        -[_UIKeyboardStateManager dismissAutoFillMenu](self, "dismissAutoFillMenu");
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "selectedTextRange");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "start");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "caretRectForPosition:", v22);
        v24 = v23;
        v26 = v25;
        v28 = v27;
        v30 = v29;

        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "textInputView");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "textInputView");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "window");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "convertRect:toView:", v35, v24, v26, v28, v30);
        v37 = v36;
        v39 = v38;
        v41 = v40;
        v43 = v42;

        +[UIPeripheralHost visiblePeripheralFrame](UIPeripheralHost, "visiblePeripheralFrame");
        v50.origin.x = v37;
        v50.origin.y = v39;
        v50.size.width = v41;
        v50.size.height = v43;
        if (CGRectContainsRect(v48, v50))
          return;
        -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
        v46 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "documentStateChanged");
      }
      else
      {
        -[_UIKeyboardStateManager _editMenuAssistant](self, "_editMenuAssistant");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = objc_msgSend(v44, "_editMenuIsVisible");

        if (!v45)
          goto LABEL_3;
        -[_UIKeyboardStateManager _editMenuAssistant](self, "_editMenuAssistant");
        v46 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "hideSelectionCommands");
      }

      return;
    }
    self->m_shouldSuppressSelectionCommands = 0;
  }
}

- (void)dismissAutoFillMenu
{
  void *v3;

  if (self->m_isAutoFillMenuPresented)
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "forwardInputDestinationEventToUIHost:", sel_dismissAutoFillMenu);

    self->m_isAutoFillMenuPresented = 0;
    self->m_shouldSuppressSelectionCommands = 0;
  }
}

- (BOOL)shouldSuppressSelectionCommands
{
  _BOOL4 m_shouldSuppressSelectionCommands;

  m_shouldSuppressSelectionCommands = self->m_shouldSuppressSelectionCommands;
  if (self->m_shouldSuppressSelectionCommands)
  {
    self->m_shouldSuppressSelectionCommands = 0;
  }
  else if (self->m_isAutoFillMenuPresented)
  {
    -[_UIKeyboardStateManager dismissAutoFillMenu](self, "dismissAutoFillMenu");
  }
  return m_shouldSuppressSelectionCommands;
}

- (void)resumeDictationForResponderChange
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "resumeDictationForResponderChange");

}

- (UIInlineTextCompletionController)inlineTextCompletionController
{
  return self->m_inlineTextCompletionController;
}

- (BOOL)isSelecting
{
  int v2;
  void *v3;
  void *v4;

  if (self->m_selecting)
  {
    LOBYTE(v2) = 1;
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "selectedTextRange");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v4, "isEmpty") ^ 1;

  }
  return v2;
}

- (BOOL)inlineTextCompletionAllowedForTraits
{
  return -[_UIKeyboardStateManager autocorrectionPreferenceForTraits](self, "autocorrectionPreferenceForTraits") == 1;
}

- (void)_noteInlineCompletionAsMarkedText:(id)a3
{
  void *v4;
  uint64_t v5;
  NSAttributedString *v6;
  NSAttributedString *inlineCompletionAsMarkedText;
  id v8;

  v8 = a3;
  objc_msgSend(v8, "string");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "length");

  if (v5)
  {
    v6 = (NSAttributedString *)objc_msgSend(v8, "copy");
    inlineCompletionAsMarkedText = self->_inlineCompletionAsMarkedText;
    self->_inlineCompletionAsMarkedText = v6;
  }
  else
  {
    inlineCompletionAsMarkedText = self->_inlineCompletionAsMarkedText;
    self->_inlineCompletionAsMarkedText = 0;
  }

}

- (id)inlineCompletionAsMarkedText
{
  return self->_inlineCompletionAsMarkedText;
}

- (void)handleGrammarCorrectionEntries:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "forwardGrammarCorrectionEntries:", v5);

  }
  else
  {
    +[UITextChecker handleGrammarCorrectionEntries:](UITextChecker, "handleGrammarCorrectionEntries:", v5);
  }

}

- (void)_setInputManager:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  sharedInputManagerMux();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addClient:", v4);

  -[_UIKeyboardStateManager syncInputManagerToKeyboardState](self, "syncInputManagerToKeyboardState");
}

- (void)_setShiftLockedEnabled:(BOOL)a3
{
  self->m_shiftLockedEnabled = a3;
}

- (void)updateFromTextInputTraits
{
  -[_UIKeyboardStateManager takeTextInputTraitsFromDelegate](self, "takeTextInputTraitsFromDelegate");
  -[_UIKeyboardStateManager updateReturnKey:](self, "updateReturnKey:", 1);
}

- (BOOL)_isShowingCandidateUIWithAvailableCandidates
{
  int v3;

  _UIDeviceNativeUserInterfaceIdiom();
  v3 = -[_UIKeyboardStateManager showsCandidateBar](self, "showsCandidateBar");
  if (v3)
    LOBYTE(v3) = -[UIKeyboardCandidateList hasCandidates](self->m_candidateList, "hasCandidates");
  return v3;
}

- (unint64_t)textInputChangingCount
{
  return self->m_textInputChangingCount;
}

- (BOOL)isAutoDeleteActive
{
  return -[UIKeyboardScheduledTask isValid](self->m_autoDeleteTask, "isValid");
}

- (void)_setAutofillGroup:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[_UIKeyboardStateManager _clearAutofillGroup](self, "_clearAutofillGroup");
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "performSelector:withObject:", sel__setAutofillGroup_, v4);

}

- (id)_autofillGroup
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "autofillGroup");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)_fallbackAutofillGroup
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fallbackAutofillGroup");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (BOOL)_containsUsernamePasswordPairsInAutofillGroup:(id)a3
{
  id v4;
  void *v5;
  char v6;

  v4 = a3;
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "containsUsernamePasswordPairsInAutofillGroup:", v4);

  return v6;
}

- (BOOL)isSelectionChanging
{
  return self->m_textInputChangingCount && !self->m_textInputChangesIgnored;
}

- (void)createTypoTrackerReport
{
  void *v3;
  _QWORD v4[5];

  -[_UIKeyboardStateManager inputManager](self, "inputManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __50___UIKeyboardStateManager_createTypoTrackerReport__block_invoke;
  v4[3] = &unk_1E16BC0F8;
  v4[4] = self;
  objc_msgSend(v3, "writeTypologyLogWithCompletionHandler:", v4);

}

- (void)presentKeyboardFeedbackAssistantViewControllerForLogURL:(id)a3
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id v4;
  id WeakRetained;

  p_presentationDelegate = &self->_presentationDelegate;
  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)p_presentationDelegate);
  objc_msgSend(WeakRetained, "presentKeyboardFeedbackAssistantViewControllerForLogURL:", v4);

}

- (void)_performInputViewControllerOutput:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  _UIKeyboardStateManager *v9;

  v4 = a3;
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __61___UIKeyboardStateManager__performInputViewControllerOutput___block_invoke;
  v7[3] = &unk_1E16BB0D8;
  v8 = v4;
  v9 = self;
  v6 = v4;
  objc_msgSend(v5, "addTask:", v7);

}

- (void)_requestInputManagerSync
{
  void *v3;
  _QWORD v4[5];

  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __51___UIKeyboardStateManager__requestInputManagerSync__block_invoke;
  v4[3] = &unk_1E16BAF98;
  v4[4] = self;
  objc_msgSend(v3, "addTask:", v4);

}

- (void)_tagTouchForTypingMenu:(unsigned int)a3
{
  uint64_t v3;
  void (*v4)(uint64_t);
  void *v5;
  void *v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v3 = *(_QWORD *)&a3;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v4 = (void (*)(uint64_t))off_1ECD7D288;
  v11 = off_1ECD7D288;
  if (!off_1ECD7D288)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __getSBSTagTouchForTypingMenuSymbolLoc_block_invoke;
    v7[3] = &unk_1E16B14C0;
    v7[4] = &v8;
    __getSBSTagTouchForTypingMenuSymbolLoc_block_invoke(v7);
    v4 = (void (*)(uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(v3);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void UIKBSBSTagTouchForTypingMenu(uint32_t)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("_UIKeyboardStateManager.m"), 231, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

- (void)setInitialDirection
{
  -[_UIKeyboardStateManager setInitialDirectionIgnoreRangeCheck:](self, "setInitialDirectionIgnoreRangeCheck:", 0);
}

- (void)setInitialDirectionIgnoreRangeCheck:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  unint64_t v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  int64_t m_currentDirection;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  const __CFString *v22;
  _QWORD v23[2];

  v3 = a3;
  v23[1] = *MEMORY[0x1E0C80C00];
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;
    if (v3)
    {

    }
    else
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "selectedTextRange");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isEmpty");

      if (!v9)
        return;
    }
    v10 = -[UITextInputTraits keyboardType](self->m_traits, "keyboardType");
    if (v10 > 0xB || ((1 << v10) & 0x930) == 0)
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "_characterBeforeCaretSelection");

      if (v12 == 10 || !v12)
      {
        -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "_characterAfterCaretSelection");

        if ((v14 == 10 || !v14) && !self->m_textInputChangingDirection)
        {
          self->m_textInputChangingDirection = 1;
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          m_currentDirection = self->m_currentDirection;
          -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "selectedTextRange");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setBaseWritingDirection:forRange:", m_currentDirection, v18);

          objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = CFSTR("writingDirection");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", self->m_currentDirection);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v23[0] = v20;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "postNotificationName:object:userInfo:", 0x1E174CBE0, 0, v21);

          self->m_textInputChangingDirection = 0;
        }
      }
    }
  }
}

- (UITextInteractionAssistant)textInteractionAssistant
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "textInteractionAssistant");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (UITextInteractionAssistant *)v3;
}

- (_UITextInteractionEditMenuAssistant)_editMenuAssistant
{
  void *v2;
  void *v3;

  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_editMenuAssistant");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (_UITextInteractionEditMenuAssistant *)v3;
}

- (_UITextChoiceAccelerationAssistant)_textChoicesAssistant
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _UITextChoiceAccelerationAssistant *v7;
  _UITextChoiceAccelerationAssistant *customInputDelegateChoiceAccelerationAssistant;
  void *v9;
  _UITextChoiceAccelerationAssistant *v10;
  _UITextChoiceAccelerationAssistant *v11;

  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_textChoicesAssistant");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "setDelegate:", self);
    -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_textChoicesAssistant");
    v7 = (_UITextChoiceAccelerationAssistant *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    customInputDelegateChoiceAccelerationAssistant = self->_customInputDelegateChoiceAccelerationAssistant;
    if (!customInputDelegateChoiceAccelerationAssistant
      || (-[_UITextChoiceAccelerationAssistant textInputResponder](customInputDelegateChoiceAccelerationAssistant, "textInputResponder"), v9 = (void *)objc_claimAutoreleasedReturnValue(), v9, v9 != v5))
    {
      v10 = -[_UITextChoiceAccelerationAssistant initWithTextInputResponder:]([_UITextChoiceAccelerationAssistant alloc], "initWithTextInputResponder:", v5);
      v11 = self->_customInputDelegateChoiceAccelerationAssistant;
      self->_customInputDelegateChoiceAccelerationAssistant = v10;

      -[_UITextChoiceAccelerationAssistant setDelegate:](self->_customInputDelegateChoiceAccelerationAssistant, "setDelegate:", self);
    }
    v7 = self->_customInputDelegateChoiceAccelerationAssistant;
  }

  return v7;
}

- (void)traitCollectionDidChange
{
  void *v3;
  id v4;

  -[_UIKeyboardStateManager takeTextInputTraitsFromDelegate](self, "takeTextInputTraitsFromDelegate");
  -[_UIKeyboardStateManager activeLayout](self, "activeLayout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "traitCollectionDidChange");

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    || +[UIKeyboard usesInputSystemUIForAutoFillOnlyWithRTI](UIKeyboard, "usesInputSystemUIForAutoFillOnlyWithRTI"))
  {
    -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "documentTraitsChanged");

  }
}

- (void)_dynamicUserInterfaceTraitDidChange
{
  void *v3;
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  UITextInputTraits *m_traits;
  uint64_t v11;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "keyInputDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v4, "__isKindOfUIResponder") & 1) == 0)
  {
    -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  if (v4)
  {
    v6 = (objc_opt_respondsToSelector() & 1) == 0 || objc_msgSend(v4, "keyboardAppearance") == 10;

  }
  else
  {
    v6 = 1;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "traitCollection");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "userInterfaceStyle");

  if (v6)
  {
    m_traits = self->m_traits;
    if (m_traits)
    {
      if (v9 == 2)
        v11 = 1;
      else
        v11 = 2;
      -[UITextInputTraits setKeyboardAppearance:](m_traits, "setKeyboardAppearance:", v11);
    }
  }
}

- (void)setTextInputChangesIgnored:(BOOL)a3
{
  self->m_textInputChangesIgnored = a3;
}

- (BOOL)allowsReachableKeyboard
{
  void *v3;
  double v4;
  double v5;
  unint64_t v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  BOOL result;

  +[UIScreen mainScreen](UIScreen, "mainScreen");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_unjailedReferenceBounds");
  v5 = v4;

  _UIDeviceNativeUserInterfaceIdiom();
  v6 = UIKeyboardGetSafeDeviceIdiom() & 0xFFFFFFFFFFFFFFFBLL;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "orientation");

  result = 0;
  if (v6 != 1 && v5 > 320.0 && (unint64_t)(v9 - 3) >= 2)
    return !-[_UIKeyboardStateManager keyboardIsKeyPad](self, "keyboardIsKeyPad");
  return result;
}

- (int64_t)currentHandBias
{
  id WeakRetained;
  void *v3;
  int64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "currentHandBias");

  return v4;
}

- (double)biasedKeyboardWidthRatio
{
  id WeakRetained;
  void *v3;
  double v4;
  double v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "biasedKeyboardWidthRatio");
  v5 = v4;

  return v5;
}

- (void)acceptAutocorrectionAndEndComposition
{
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "autocorrection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    -[_UIKeyboardStateManager acceptAutocorrectionWithCompletionHandler:](self, "acceptAutocorrectionWithCompletionHandler:", 0);
  else
    -[_UIKeyboardStateManager textAccepted:](self, "textAccepted:", 0);
}

- (id)internationalKeyDisplayStringOnEmojiKeyboard
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  id WeakRetained;
  void *v8;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentInputMode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isExtensionInputMode");

  if ((v5 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(WeakRetained, "layout");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "internationalKeyDisplayStringOnEmojiKeyboard");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

- (id)_autofillContext
{
  return (id)-[TIKeyboardState autofillContext](self->m_keyboardState, "autofillContext");
}

- (id)_remoteAppId
{
  void *v2;
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "documentTraits");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appId");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_remoteLocalizedAppName
{
  void *v2;
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "documentTraits");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizedAppName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_remoteUnlocalizedAppName
{
  void *v2;
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "documentTraits");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_remoteAssociatedDomains
{
  void *v2;
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "documentTraits");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "associatedDomains");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (BOOL)shouldLoadAutofillSignUpInputViewController
{
  _BOOL4 v3;

  v3 = -[_UIKeyboardStateManager _shouldLoadAutofillSignUpInputViewController](self, "_shouldLoadAutofillSignUpInputViewController");
  if (v3)
    LOBYTE(v3) = !self->m_usesSystemKeyboardForASP;
  else
    self->m_usesSystemKeyboardForASP = 0;
  return v3;
}

- (BOOL)_shouldLoadAutofillSignUpInputViewController
{
  void *v3;
  void *v4;
  char v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;

  if ((self->m_cachedAutofillMode & 0xFFFFFFFFFFFFFFFELL) != 2)
    return 0;
  -[_UIKeyboardStateManager _autofillContext](self, "_autofillContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("_automaticPasswordKeyboard"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLValue");

  if ((v5 & 1) != 0)
    return 1;
  +[UIKeyboardInputMode autofillSignupInputMode](UIKeyboardInputMode, "autofillSignupInputMode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "viewControllerClass");

  if (!v8)
    return 0;
  if (+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess"))
  {
    -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v9, "documentTraits");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    LOBYTE(v9) = objc_msgSend(v10, "shouldLoadAutofillSignUp");
    if ((v9 & 1) != 0)
      return 1;
  }
  -[_UIKeyboardStateManager autofillController](self, "autofillController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "autofillGroup");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKey:", CFSTR("UIAutofillASPOptInKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 && !objc_msgSend(v13, "BOOLValue"))
  {
    v6 = 0;
  }
  else
  {
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v14, "__isKindOfUIResponder") & 1) == 0)
    {
      -[_UIKeyboardStateManager delegateAsResponder](self, "delegateAsResponder");
      v15 = objc_claimAutoreleasedReturnValue();

      v14 = (void *)v15;
    }
    -[_UIKeyboardStateManager autofillController](self, "autofillController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v16, "shouldLoadASPForResponder:", v14);

  }
  return v6;
}

- (void)_showAutofillExtras
{
  UIKeyboardSafariPresentCredentialPickerForType(1);
}

- (void)_deactiveActiveKeys
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deactivateActiveKeys");

}

- (void)performBlockWithTextInputChangesIgnoredForNonMacOS:(id)a3
{
  BOOL m_textInputChangesIgnored;

  m_textInputChangesIgnored = self->m_textInputChangesIgnored;
  self->m_textInputChangesIgnored = 1;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  self->m_textInputChangesIgnored = m_textInputChangesIgnored;
}

- (BOOL)hardwareKeyboardAttached
{
  return self->m_hardwareKeyboardAttached;
}

- (BOOL)exclusivityIdentifierMatched
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hardwareKeyboardExclusivityIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[_UIKeyboardStateManager hardwareKeyboardExclusivityIdentifier](self, "hardwareKeyboardExclusivityIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 == v4)
  {
    v7 = 1;
  }
  else
  {
    -[_UIKeyboardStateManager hardwareKeyboardExclusivityIdentifier](self, "hardwareKeyboardExclusivityIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "isEqualToString:", v6);

  }
  return v7;
}

- (void)setHardwareKeyboardAttached:(BOOL)a3
{
  BOOL v4;

  v4 = a3 && -[_UIKeyboardStateManager exclusivityIdentifierMatched](self, "exclusivityIdentifierMatched");
  self->m_hardwareKeyboardAttached = v4;
}

- (void)updateHardwareKeyboardExclusivityIdentifier
{
  void *v3;
  id v4;

  +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hardwareKeyboardExclusivityIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_UIKeyboardStateManager setHardwareKeyboardExclusivityIdentifier:](self, "setHardwareKeyboardExclusivityIdentifier:", v3);

}

+ (BOOL)isHardwareShiftKeyBeingHeld
{
  objc_msgSend((id)UIApp, "_hardwareKeyboard:", 0);
  return (GSKeyboardGetLiveModifierState() & 0x220000) != 0;
}

+ (BOOL)isHardwareCommandKeyBeingHeld
{
  objc_msgSend((id)UIApp, "_hardwareKeyboard:", 0);
  return (GSKeyboardGetLiveModifierState() & 0x1010000) != 0;
}

- (BOOL)isShiftKeyBeingHeld
{
  id WeakRetained;
  char v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v4 = objc_msgSend((id)objc_opt_class(), "isHardwareShiftKeyBeingHeld");

  LOBYTE(WeakRetained) = -[_UIKeyboardStateManager callLayoutIsShiftKeyBeingHeld](self, "callLayoutIsShiftKeyBeingHeld");
  return v4 | WeakRetained | -[_UIKeyboardStateManager _mimicShiftBeingHeld](self, "_mimicShiftBeingHeld");
}

- (void)lookUpResponderChainForCustomInputView
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "inputSystemSourceSession");
  v8 = (id)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v8, "textOperations");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setEditingActionSelector:", sel_lookUpResponderChainForCustomInputView);
    objc_msgSend(v8, "flushOperations");

  }
  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)v5;
    while ((objc_opt_respondsToSelector() & 1) == 0)
    {
      objc_msgSend(v6, "nextResponder");
      v7 = objc_claimAutoreleasedReturnValue();

      v6 = (void *)v7;
      if (!v7)
        goto LABEL_9;
    }
    objc_msgSend(v6, "_showCustomInputView");

  }
LABEL_9:

}

- (id)attributedText
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_textSelectingContainer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if ((v5 & 1) != 0)
  {
    objc_msgSend(v6, "_textSelectingContainer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "attributedText");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = objc_opt_respondsToSelector();

    if ((v10 & 1) == 0)
    {
      v9 = 0;
      return v9;
    }
    -[_UIKeyboardStateManager inputDelegate](self, "inputDelegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "attributedText");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v9;
}

- (void)showTextAlternativesInRange:(_NSRange)a3
{
  self->m_textAlternativesRange = a3;
  -[_UIKeyboardStateManager showFirstTextAlternativeWithRangeAdjustment:](self, "showFirstTextAlternativeWithRangeAdjustment:", 0);
}

- (void)showFirstTextAlternativeWithRangeAdjustment:(int64_t)a3
{
  NSUInteger location;
  void *v5;
  NSUInteger v6;
  NSUInteger v7;
  NSUInteger v8;
  NSUInteger length;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;

  location = self->m_textAlternativesRange.location;
  if (location != 0x7FFFFFFFFFFFFFFFLL)
  {
    self->m_textAlternativesRange.location = location - a3;
    -[_UIKeyboardStateManager attributedText](self, "attributedText");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = self->m_textAlternativesRange.length + self->m_textAlternativesRange.location;
    if (v6 <= objc_msgSend(v5, "length"))
    {
      v8 = self->m_textAlternativesRange.location;
      length = self->m_textAlternativesRange.length;
    }
    else
    {
      v7 = objc_msgSend(v5, "length");
      v8 = self->m_textAlternativesRange.location;
      length = v7 - v8;
      if (v7 <= v8)
      {
        length = 0;
        self->m_textAlternativesRange.location = v7;
        self->m_textAlternativesRange.length = 0;
        v8 = v7;
      }
      else
      {
        self->m_textAlternativesRange.length = length;
      }
    }
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = length == 0;
    objc_msgSend(v5, "enumerateAttribute:inRange:options:usingBlock:", *(_QWORD *)off_1E16790E0, v8);
    if (*((_BYTE *)v14 + 24))
    {
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_textRangeFromNSRange:", self->m_textAlternativesRange.location, self->m_textAlternativesRange.length);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setSelectedTextRange:", v11);

    }
    _Block_object_dispose(&v13, 8);

  }
}

- (void)clearTextAlternativesRange
{
  self->m_textAlternativesRange.location = 0x7FFFFFFFFFFFFFFFLL;
  self->m_textAlternativesRange.length = 0;
}

- (BOOL)callShouldInsertText:(id)a3 onDelegate:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  void *v14;

  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EDE21770))
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;
  if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EDE22B80))
    v10 = v7;
  else
    v10 = 0;
  v11 = v10;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v12 = objc_msgSend(v9, "keyboardInput:shouldInsertText:isMarkedText:", v9, v6, 0);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "selectedTextRange");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "shouldChangeTextInRange:replacementText:", v14, v6);

  }
  else
  {
    v12 = 1;
  }

  return v12;
}

- (BOOL)keyboardLayoutIsInAnotherProcess
{
  void *v3;
  _BOOL4 v4;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI")
    && -[_UIKeyboardStateManager isRTIClient](self, "isRTIClient"))
  {
    +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "automaticAppearanceEnabled"))
      v4 = !+[UIKeyboard usesLocalKeyboard](UIKeyboard, "usesLocalKeyboard");
    else
      LOBYTE(v4) = 0;

  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (BOOL)shouldApplyKeyboardCommandToUIHost
{
  id WeakRetained;
  char v3;

  if (!self->m_hardwareKeyboardAttached)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "keyboardLayoutIsInAnotherProcess");

  return v3;
}

- (BOOL)shouldApplyKeyboardInputToUIHost
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v3 = objc_msgSend(WeakRetained, "keyboardLayoutIsInAnotherProcess");

  return v3;
}

- (BOOL)isRTIClient
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  char v8;
  void *v9;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend((id)objc_opt_class(), "keyboardScreen");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
  +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v5, objc_msgSend(v6, "_keyboardOrientation"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "idiom") == 3)
  {
    v8 = 0;
  }
  else
  {
    -[_UIKeyboardStateManager remoteTextInputPartnerPrivate](self, "remoteTextInputPartnerPrivate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v9, "inputSystemClientEnabled");

  }
  return v8;
}

- (void)performKeyboardOutputOnInputSourceSession:(id)a3
{
  -[_UIKeyboardStateManager performKeyboardOutputOnInputSourceSession:shouldFlush:](self, "performKeyboardOutputOnInputSourceSession:shouldFlush:", a3, 1);
}

- (void)performKeyboardOutputOnInputSourceSession:(id)a3 shouldFlush:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void (**v11)(id, void *);

  v4 = a4;
  v11 = (void (**)(id, void *))a3;
  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 && v6)
  {
    -[_UIKeyboardStateManager buildInputSourceState](self, "buildInputSourceState");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "textOperations");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setInputSourceState:", v7);

    objc_msgSend(v6, "textOperations");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "keyboardOutput");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11[2](v11, v10);
    if (v4)
      objc_msgSend(v6, "flushOperations");

  }
}

- (void)flushKeyboardOutputOnInputSourceSession
{
  void *v2;
  id v3;

  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "flushOperations");
    v2 = v3;
  }

}

- (void)performOnInputSourceSessionActionSelector:(SEL)a3
{
  void *v4;
  void *v5;
  id v6;

  -[_UIKeyboardStateManager inputSystemSourceSession](self, "inputSystemSourceSession");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v6 = v4;
    objc_msgSend(v4, "textOperations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setEditingActionSelector:", a3);

    objc_msgSend(v6, "flushOperations");
    v4 = v6;
  }

}

- (void)presentContinuousPathIntroductionView
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "presentContinuousPathIntroductionView");

}

- (void)_shouldClearTextSuggestions:(BOOL)a3
{
  self->m_shouldClearTextSuggestions = a3;
  self->m_pendingRestoreTextSuggestions = 1;
}

- (void)restoreTextSuggestions
{
  void *v3;

  if (!+[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess")
    && self->m_pendingRestoreTextSuggestions)
  {
    -[_UIKeyboardStateManager textSuggestions](self, "textSuggestions");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIKeyboardStateManager _setSuggestions:](self, "_setSuggestions:", v3);

  }
  self->m_pendingRestoreTextSuggestions = 0;
}

- (id)implProxy
{
  return self->m_implProxy;
}

- (unint64_t)serviceRole
{
  return self->_serviceRole;
}

- (void)setServiceRole:(unint64_t)a3
{
  self->_serviceRole = a3;
  -[UIKBRTIPartner setInputSystemClientEnabled:](self->_remoteTextInputPartner, "setInputSystemClientEnabled:", a3 == 1);
}

- (BOOL)isOutOfProcess
{
  return self->_serviceRole - 1 < 2;
}

- (id)keyboardWindowSnapshot
{
  return self->m_keyboardWindowSnapshot;
}

- (void)clearKeyboardWindowSnapshot
{
  UIView *m_keyboardWindowSnapshot;

  m_keyboardWindowSnapshot = self->m_keyboardWindowSnapshot;
  self->m_keyboardWindowSnapshot = 0;

}

- (void)updateIdleDetection:(int64_t)a3
{
  void *v5;
  UIDelayedAction *m_idleDetection;
  UIDelayedAction *v7;
  UIDelayedAction *v8;
  id v9;

  if (+[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI"))
  {
    -[_UIKeyboardStateManager forwardDictationEvent_updateIdleDetection:](self, "forwardDictationEvent_updateIdleDetection:", a3);
  }
  else
  {
    self->m_userInteraction = a3;
    -[_UIKeyboardStateManager userInteractionDelegate](self, "userInteractionDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      m_idleDetection = self->m_idleDetection;
      if (m_idleDetection)
      {
        -[UIDelayedAction touch](m_idleDetection, "touch");
      }
      else
      {
        v7 = -[UIDelayedAction initWithTarget:action:userInfo:delay:]([UIDelayedAction alloc], "initWithTarget:action:userInfo:delay:", self, sel_handleIdleDetectionAction, 0, 0.5);
        v8 = self->m_idleDetection;
        self->m_idleDetection = v7;

      }
      -[_UIKeyboardStateManager userInteractionDelegate](self, "userInteractionDelegate");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "beginUserInteraction:", a3);

    }
  }
}

- (void)handleIdleDetectionAction
{
  void *v2;
  void *v4;
  _BOOL4 v5;
  BOOL v6;
  id WeakRetained;
  void *v8;
  void *v9;
  int64_t m_userInteraction;
  _UIKeyboardStateManager *v11;
  BOOL v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  void *v17;
  char isKindOfClass;
  id v19;
  void *v20;
  void *v21;
  int v22;
  id v23;

  -[_UIKeyboardStateManager clearIdleDetectionAction](self, "clearIdleDetectionAction");
  -[_UIKeyboardStateManager taskQueue](self, "taskQueue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "isEmpty")
    || -[UIDelayedAction scheduled](self->m_longPressAction, "scheduled")
    || -[_UIKeyboardStateManager isAutoDeleteActive](self, "isAutoDeleteActive"))
  {
    goto LABEL_11;
  }
  v5 = -[_UIKeyboardStateManager usesCandidateSelection](self, "usesCandidateSelection");
  v6 = v5;
  if (v5)
  {
    -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v2, "_hasMarkedText") & 1) != 0)
      goto LABEL_10;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "hasActiveContinuousPathInput") & 1) != 0)
    goto LABEL_9;
  -[_UIKeyboardStateManager textInteractionAssistant](self, "textInteractionAssistant");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "hasActiveSelectionInteraction") & 1) != 0)
  {

LABEL_9:
    if (!v6)
    {
LABEL_11:

LABEL_12:
      m_userInteraction = self->m_userInteraction;
      v11 = self;
LABEL_13:
      -[_UIKeyboardStateManager updateIdleDetection:](v11, "updateIdleDetection:", m_userInteraction);
      return;
    }
LABEL_10:

    goto LABEL_11;
  }
  v12 = -[_UIKeyboardStateManager isRotating](self, "isRotating");

  if (v6)
  if (v12)
    goto LABEL_12;
  v4 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v4, "emojiPopoverController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "layout");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "hasActiveKeys"))
  {

    goto LABEL_10;
  }
  v14 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  v15 = objc_msgSend(v14, "isPressAndHoldPopoverPresented");

  if ((v15 & 1) != 0)
    goto LABEL_12;
  v16 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(v16, "layout");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v19 = objc_loadWeakRetained((id *)&self->_presentationDelegate);
    objc_msgSend(v19, "layout");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    LODWORD(v19) = objc_msgSend(v20, "hasActiveKeys");
    if ((_DWORD)v19)
      goto LABEL_12;
  }
  if (-[_UIKeyboardStateManager isTrackpadMode](self, "isTrackpadMode"))
  {
    +[UIKeyboardInputMode dictationInputMode](UIKeyboardInputMode, "dictationInputMode");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "usingTypeAndTalk");

    if (v22)
    {
      v11 = self;
      m_userInteraction = 0;
      goto LABEL_13;
    }
  }
  -[_UIKeyboardStateManager userInteractionDelegate](self, "userInteractionDelegate");
  v23 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "endUserInteraction");

}

- (void)clearIdleDetectionAction
{
  UIDelayedAction *m_idleDetection;

  -[UIDelayedAction cancel](self->m_idleDetection, "cancel");
  m_idleDetection = self->m_idleDetection;
  self->m_idleDetection = 0;

}

- (void)forwardDictationEvent_switchToDictationInputModeWithOptions:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v9 = forwardDictationEvent_switchToDictationInputModeWithOptions____s_category;
    if (!forwardDictationEvent_switchToDictationInputModeWithOptions____s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&forwardDictationEvent_switchToDictationInputModeWithOptions____s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v11, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_switchToDictationInputModeWithOptions_, v4);

}

- (void)forwardDictationEvent_handleDictationShouldPause:(BOOL)a3 withNewDelagate:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  int has_internal_diagnostics;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  unint64_t v14;
  NSObject *v15;
  uint8_t v16[8];
  _QWORD v17[2];
  _QWORD v18[3];

  v4 = a4;
  v5 = a3;
  v18[2] = *MEMORY[0x1E0C80C00];
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v8 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v8)
    {
      __UIFaultDebugAssertLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_fault_impl(&dword_185066000, v13, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", v16, 2u);
      }

    }
  }
  else if (!v8)
  {
    v14 = forwardDictationEvent_handleDictationShouldPause_withNewDelagate____s_category;
    if (!forwardDictationEvent_handleDictationShouldPause_withNewDelagate____s_category)
    {
      v14 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v14, (unint64_t *)&forwardDictationEvent_handleDictationShouldPause_withNewDelagate____s_category);
    }
    v15 = *(NSObject **)(v14 + 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v16, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = CFSTR("shouldPause");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[1] = CFSTR("withNewDelagate");
  v18[0] = v10;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleDictationShouldPause_withNewDelagate_, v12);

}

- (void)forwardDictationEvent_switchToDictationLanguage:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v9 = forwardDictationEvent_switchToDictationLanguage____s_category;
    if (!forwardDictationEvent_switchToDictationLanguage____s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&forwardDictationEvent_switchToDictationLanguage____s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v11, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_switchToDictationLanguage_, v4);

}

- (void)forwardDictationEvent_startDictation
{
  int has_internal_diagnostics;
  BOOL v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v4 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v4)
  {
    v7 = forwardDictationEvent_startDictation___s_category;
    if (!forwardDictationEvent_startDictation___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&forwardDictationEvent_startDictation___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v9, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_startDictation, 0);

}

- (void)forwardDictationEvent_stopDictation:(BOOL)a3
{
  _BOOL8 v3;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  v3 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v10 = forwardDictationEvent_stopDictation____s_category;
    if (!forwardDictationEvent_stopDictation____s_category)
    {
      v10 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v10, (unint64_t *)&forwardDictationEvent_stopDictation____s_category);
    }
    v11 = *(NSObject **)(v10 + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_185066000, v11, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v12, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_stopDictation_, v8);

}

- (void)forwardDictationEvent_cancelDictation
{
  int has_internal_diagnostics;
  BOOL v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v4 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v4)
  {
    v7 = forwardDictationEvent_cancelDictation___s_category;
    if (!forwardDictationEvent_cancelDictation___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&forwardDictationEvent_cancelDictation___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v9, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_cancelDictation, 0);

}

- (void)forwardDictationEvent_movePopoverView:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v9 = forwardDictationEvent_movePopoverView____s_category;
    if (!forwardDictationEvent_movePopoverView____s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&forwardDictationEvent_movePopoverView____s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v11, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_movePopoverView_, v4);

}

- (void)forwardDictationEvent_handleTip:(id)a3 title:(id)a4
{
  id v6;
  id v7;
  int has_internal_diagnostics;
  BOOL v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  unint64_t v14;
  NSObject *v15;
  uint8_t v16[8];
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v9 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v9)
    {
      __UIFaultDebugAssertLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_fault_impl(&dword_185066000, v13, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", v16, 2u);
      }

    }
  }
  else if (!v9)
  {
    v14 = forwardDictationEvent_handleTip_title____s_category;
    if (!forwardDictationEvent_handleTip_title____s_category)
    {
      v14 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v14, (unint64_t *)&forwardDictationEvent_handleTip_title____s_category);
    }
    v15 = *(NSObject **)(v14 + 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v16, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v6)
  {
    v17[0] = CFSTR("text");
    v17[1] = CFSTR("title");
    v18[0] = v6;
    v18[1] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_handleTip_, v12);

  }
  else
  {
    objc_msgSend(v10, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_handleTip_, 0);
  }

}

- (void)forwardDictationEvent_updateIdleDetection:(int64_t)a3
{
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v11 = forwardDictationEvent_updateIdleDetection____s_category;
    if (!forwardDictationEvent_updateIdleDetection____s_category)
    {
      v11 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v11, (unint64_t *)&forwardDictationEvent_updateIdleDetection____s_category);
    }
    v12 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v13, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_updateIdleDetection_, v8);

  +[UIDictationController sharedInstance](UIDictationController, "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "insertLastHypothesisAsFinalResultLocally");

}

- (void)forwardDictationEvent_stopDictationIgnoreFinalizePhrases
{
  int has_internal_diagnostics;
  BOOL v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v4 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v4)
  {
    v7 = forwardDictationEvent_stopDictationIgnoreFinalizePhrases___s_category;
    if (!forwardDictationEvent_stopDictationIgnoreFinalizePhrases___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&forwardDictationEvent_stopDictationIgnoreFinalizePhrases___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v9, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_stopDictationIgnoreFinalizePhrases, 0);

}

- (void)forwardDictationEvent_resumeDictation
{
  int has_internal_diagnostics;
  BOOL v4;
  void *v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v4 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v4)
  {
    v7 = forwardDictationEvent_resumeDictation___s_category;
    if (!forwardDictationEvent_resumeDictation___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&forwardDictationEvent_resumeDictation___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v9, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "forwardDictationEventToUIHost:withOptionalObject:", sel_handleRemoteDictationEvent_resumeDictation, 0);

}

- (void)forwardKeyboardCameraEvent_startCameraInput:(id)a3
{
  id v4;
  int has_internal_diagnostics;
  BOOL v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v4 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = +[UIKeyboard usesInputSystemUI](UIKeyboard, "usesInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v6)
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v6)
  {
    v9 = forwardKeyboardCameraEvent_startCameraInput____s_category;
    if (!forwardKeyboardCameraEvent_startCameraInput____s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&forwardKeyboardCameraEvent_startCameraInput____s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v11, 2u);
    }
  }
  -[_UIKeyboardStateManager remoteTextInputPartner](self, "remoteTextInputPartner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "forwardKeyboardCameraEvent_startCameraInput:", v4);

}

- (void)forwardKeyboardCameraEvent_selfDestruct
{
  int has_internal_diagnostics;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v4 = +[UIKeyboard isInputSystemUI](UIKeyboard, "isInputSystemUI");
  if (has_internal_diagnostics)
  {
    if (!v4)
    {
      __UIFaultDebugAssertLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v4)
  {
    v9 = forwardKeyboardCameraEvent_selfDestruct___s_category;
    if (!forwardKeyboardCameraEvent_selfDestruct___s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&forwardKeyboardCameraEvent_selfDestruct___s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v11, 2u);
    }
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "inputSystemSourceSession");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v6, "textOperations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setEditingActionSelector:", sel_handleRemoteKeyboardCameraEvent_selfDestruct);
    objc_msgSend(v6, "flushOperations");

  }
}

- (void)forwardKeyboardCameraEvent_updatePreviewText:(id)a3 asMarkedText:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  int has_internal_diagnostics;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  unint64_t v16;
  NSObject *v17;
  uint8_t v18[16];
  uint8_t buf[16];

  v4 = a4;
  v6 = a3;
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v8 = +[UIKeyboard isKeyboardProcess](UIKeyboard, "isKeyboardProcess");
  if (has_internal_diagnostics)
  {
    if (!v8)
    {
      __UIFaultDebugAssertLog();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v15, OS_LOG_TYPE_FAULT, "Unexpected forwarding event", buf, 2u);
      }

    }
  }
  else if (!v8)
  {
    v16 = forwardKeyboardCameraEvent_updatePreviewText_asMarkedText____s_category;
    if (!forwardKeyboardCameraEvent_updatePreviewText_asMarkedText____s_category)
    {
      v16 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v16, (unint64_t *)&forwardKeyboardCameraEvent_updatePreviewText_asMarkedText____s_category);
    }
    v17 = *(NSObject **)(v16 + 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Unexpected forwarding event", v18, 2u);
    }
  }
  -[_UIKeyboardStateManager inputDelegateManager](self, "inputDelegateManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "inputSystemSourceSession");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0DBDC20], "intermediateTextWithInputString:displayString:", &stru_1E16EDF20, v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "textOperations");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setIntermediateText:", v11);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DBDC20], "intermediateTextWithInputString:displayString:", &stru_1E16EDF20, &stru_1E16EDF20);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "textOperations");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setIntermediateText:", v13);

      objc_msgSend(v10, "textOperations");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "keyboardOutput");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "insertText:", v6);
    }

    objc_msgSend(v10, "flushOperations");
  }

}

- (void)handleTextChoiceBubbleTapped
{
  -[_UIKeyboardStateManager updateIdleDetection:](self, "updateIdleDetection:", 5);
}

- (id)_getCurrentKeyplaneName
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  char isKindOfClass;
  id v6;
  void *v7;
  void *v8;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v6, "layout");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "keyplaneName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

- (id)_getCurrentKeyboardName
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  char isKindOfClass;
  id v6;
  void *v7;
  void *v8;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v6, "layout");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "keyboardName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

- (id)_getLocalizedInputMode
{
  _UIKeyboardPresentationDelegate **p_presentationDelegate;
  id WeakRetained;
  void *v4;
  char isKindOfClass;
  id v6;
  void *v7;
  void *v8;

  p_presentationDelegate = &self->_presentationDelegate;
  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "layout");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v6 = objc_loadWeakRetained((id *)p_presentationDelegate);
    objc_msgSend(v6, "layout");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedInputMode");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

- (void)_setAutocorrects:(BOOL)a3
{
  -[TIKeyboardState setAutocorrectionEnabled:](self->m_keyboardState, "setAutocorrectionEnabled:", a3);
}

- (id)_getAutocorrection
{
  void *v2;
  void *v3;
  void *v4;

  -[_UIKeyboardStateManager autocorrectionController](self, "autocorrectionController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "autocorrection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "candidate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_getAutocorrectionList
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  +[UIKeyboardSceneDelegate activeKeyboardSceneDelegate](UIKeyboardSceneDelegate, "activeKeyboardSceneDelegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "systemInputAssistantViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "centerViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayedCandidates");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)_getCandidateList
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentationDelegate);
  objc_msgSend(WeakRetained, "candidateController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "candidates");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "candidates");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (BOOL)_hasCandidates
{
  return -[TIKeyboardCandidateResultSet hasCandidates](self->m_candidateResultSet, "hasCandidates");
}

- (int64_t)_positionInCandidateList:(id)a3
{
  return -[TIKeyboardCandidateResultSet positionInCandidateList:](self->m_candidateResultSet, "positionInCandidateList:", a3);
}

- (void)_setNeedsCandidates:(BOOL)a3
{
  self->m_needsCandidates = a3;
}

- (BOOL)_needsCandidates
{
  return self->m_needsCandidates;
}

- (BOOL)prewarmsPredictiveCandidates
{
  void *v2;
  void *v3;
  char v4;
  BOOL v5;

  +[UIKeyboardPreferencesController sharedPreferencesController](UIKeyboardPreferencesController, "sharedPreferencesController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferencesActions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "predictionEnabled");
  if (kbPrewarmsPredictiveCandidates)
    v5 = v4;
  else
    v5 = 0;

  return v5;
}

- (void)setPrewarmsPredictiveCandidates:(BOOL)a3
{
  kbPrewarmsPredictiveCandidates = a3;
}

- (UIPhysicalKeyboardEvent)eventForCurrentWebEvent
{
  return self->m_currentEventForKeyCommand;
}

- (void)setEventForCurrentWebEvent:(id)a3
{
  objc_storeStrong((id *)&self->m_currentEventForKeyCommand, a3);
}

- (TIKeyboardInputManagerState)inputManagerState
{
  return self->m_inputManagerState;
}

- (TIKeyboardTouchEvent)touchEventWaitingForKeyInputEvent
{
  return self->m_touchEventWaitingForKeyInputEvent;
}

- (void)setTouchEventWaitingForKeyInputEvent:(id)a3
{
  objc_storeStrong((id *)&self->m_touchEventWaitingForKeyInputEvent, a3);
}

- (_UIActionWhenIdle)delayedCandidateRequest
{
  return self->m_delayedCandidateRequest;
}

- (void)setDelayedCandidateRequest:(id)a3
{
  objc_storeStrong((id *)&self->m_delayedCandidateRequest, a3);
}

- (_UIActionWhenIdle)deferredDidSetDelegateAction
{
  return self->m_deferredDidSetDelegateAction;
}

- (void)setDeferredDidSetDelegateAction:(id)a3
{
  objc_storeStrong((id *)&self->m_deferredDidSetDelegateAction, a3);
}

- (id)changedDelegate
{
  return self->m_changedDelegate;
}

- (void)setChangedDelegate:(id)a3
{
  objc_storeStrong(&self->m_changedDelegate, a3);
}

- (BOOL)committingCandidate
{
  return self->committingCandidate;
}

- (void)setCommittingCandidate:(BOOL)a3
{
  self->committingCandidate = a3;
}

- (BOOL)disableSmartInsertDelete
{
  return self->m_disableSmartInsertDelete;
}

- (void)setDisableSmartInsertDelete:(BOOL)a3
{
  self->m_disableSmartInsertDelete = a3;
}

- (BOOL)suppressUpdateLayout
{
  return self->m_suppressUpdateLayout;
}

- (void)setSuppressUpdateLayout:(BOOL)a3
{
  self->m_suppressUpdateLayout = a3;
}

- (BOOL)suppressUpdateShiftState
{
  return self->m_suppressUpdateShiftState;
}

- (void)setSuppressUpdateShiftState:(BOOL)a3
{
  self->m_suppressUpdateShiftState = a3;
}

- (int)predictionType
{
  return self->m_predictionType;
}

- (void)setPredictionType:(int)a3
{
  self->m_predictionType = a3;
}

- (UIKBAutofillController)autofillController
{
  return self->m_autofillController;
}

- (void)setAutofillController:(id)a3
{
  objc_storeStrong((id *)&self->m_autofillController, a3);
}

- (UIDelayedAction)updateCapsLockDelayOverrideForNonTyping
{
  return self->m_updateCapsLockDelayOverrideForNonTyping;
}

- (void)setUpdateCapsLockDelayOverrideForNonTyping:(id)a3
{
  objc_storeStrong((id *)&self->m_updateCapsLockDelayOverrideForNonTyping, a3);
}

- (BOOL)delegateRequiresKeyEvents
{
  return self->m_delegateRequiresKeyEvents;
}

- (BOOL)everPresentedPasswordAutofillPanel
{
  return self->m_everPresentedPasswordAutofillPanel;
}

- (void)setEverPresentedPasswordAutofillPanel:(BOOL)a3
{
  self->m_everPresentedPasswordAutofillPanel = a3;
}

- (TIKeyboardState)keyboardState
{
  return self->m_keyboardState;
}

- (void)setKeyboardState:(id)a3
{
  objc_storeStrong((id *)&self->m_keyboardState, a3);
}

- (BOOL)textInputChangesIgnored
{
  return self->m_textInputChangesIgnored;
}

- (void)setTextInputChangingCount:(unint64_t)a3
{
  self->m_textInputChangingCount = a3;
}

- (BOOL)textInputChangingText
{
  return self->m_textInputChangingText;
}

- (void)setTextInputChangingText:(BOOL)a3
{
  self->m_textInputChangingText = a3;
}

- (BOOL)textInputChangingDirection
{
  return self->m_textInputChangingDirection;
}

- (void)setTextInputChangingDirection:(BOOL)a3
{
  self->m_textInputChangingDirection = a3;
}

- (BOOL)textInputUpdatingSelection
{
  return self->m_textInputUpdatingSelection;
}

- (void)setTextInputUpdatingSelection:(BOOL)a3
{
  self->m_textInputUpdatingSelection = a3;
}

- (BOOL)autoshifted
{
  return self->m_autoshift;
}

- (void)setAutoshifted:(BOOL)a3
{
  self->m_autoshift = a3;
}

- (BOOL)shifted
{
  return self->m_shift;
}

- (void)setShifted:(BOOL)a3
{
  self->m_shift = a3;
}

- (BOOL)shiftLocked
{
  return self->m_shiftLocked;
}

- (void)setShiftLockedEnabled:(BOOL)a3
{
  self->m_shiftLockedEnabled = a3;
}

- (BOOL)shiftNeedsUpdate
{
  return self->m_shiftNeedsUpdate;
}

- (void)setShiftNeedsUpdate:(BOOL)a3
{
  self->m_shiftNeedsUpdate = a3;
}

- (BOOL)shiftPreventAutoshift
{
  return self->m_shiftPreventAutoshift;
}

- (int64_t)textInputSource
{
  return self->m_textInputSource;
}

- (void)setTextInputSource:(int64_t)a3
{
  self->m_textInputSource = a3;
}

- (UIKeyboardScheduledTask)autoDeleteTask
{
  return self->m_autoDeleteTask;
}

- (BOOL)autoDeleteOK
{
  return self->m_autoDeleteOK;
}

- (unsigned)autoDeleteCount
{
  return self->m_autoDeleteCount;
}

- (void)setAutoDeleteCount:(unsigned int)a3
{
  self->m_autoDeleteCount = a3;
}

- (void)setAutocapitalizationPreference:(BOOL)a3
{
  self->m_autocapitalizationPreference = a3;
}

- (void)setAutocorrectionPreference:(BOOL)a3
{
  self->m_autocorrectionPreference = a3;
}

- (BOOL)originalShouldSkipCandidateSelection
{
  return self->m_originalShouldSkipCandidateSelection;
}

- (void)setOriginalShouldSkipCandidateSelection:(BOOL)a3
{
  self->m_originalShouldSkipCandidateSelection = a3;
}

- (BOOL)editingTraitsMarkedDirty
{
  return self->m_editingTraitsMarkedDirty;
}

- (void)setEditingTraitsMarkedDirty:(BOOL)a3
{
  self->m_editingTraitsMarkedDirty = a3;
}

- (void)setShouldSuppressSelectionCommands:(BOOL)a3
{
  self->m_shouldSuppressSelectionCommands = a3;
}

- (UITextInputTraits)traitsForPreviousDelegate
{
  return self->m_traitsForPreviousDelegate;
}

- (void)setTraitsForPreviousDelegate:(id)a3
{
  objc_storeStrong((id *)&self->m_traitsForPreviousDelegate, a3);
}

- (unint64_t)lastChooseSupplementalItemToInsertCallbackIdentifier
{
  return self->m_lastChooseSupplementalItemToInsertCallbackIdentifier;
}

- (void)setLastChooseSupplementalItemToInsertCallbackIdentifier:(unint64_t)a3
{
  self->m_lastChooseSupplementalItemToInsertCallbackIdentifier = a3;
}

- (BOOL)performingRemoteTextOperations
{
  return self->performingRemoteTextOperations;
}

- (void)setPerformingRemoteTextOperations:(BOOL)a3
{
  self->performingRemoteTextOperations = a3;
}

- (UIKBInputDelegateManager)inputDelegateManager
{
  return self->_inputDelegateManager;
}

- (void)setInputDelegateManager:(id)a3
{
  objc_storeStrong((id *)&self->_inputDelegateManager, a3);
}

- (_UITextInputUserInteractionDelegate)userInteractionDelegate
{
  return (_UITextInputUserInteractionDelegate *)objc_loadWeakRetained((id *)&self->_userInteractionDelegate);
}

- (void)setUserInteractionDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_userInteractionDelegate, a3);
}

- (id)didTeardownExistingDelegate
{
  return self->_didTeardownExistingDelegate;
}

- (id)willSetupNewDelegate
{
  return self->_willSetupNewDelegate;
}

- (BOOL)forCustomInputView
{
  return self->_forCustomInputView;
}

- (void)setForCustomInputView:(BOOL)a3
{
  self->_forCustomInputView = a3;
}

- (BOOL)receivedCandidatesInCurrentInputMode
{
  return self->_receivedCandidatesInCurrentInputMode;
}

- (void)setReceivedCandidatesInCurrentInputMode:(BOOL)a3
{
  self->_receivedCandidatesInCurrentInputMode = a3;
}

- (double)deleteWordLastDelete
{
  return self->_deleteWordLastDelete;
}

- (void)setDeleteWordLastDelete:(double)a3
{
  self->_deleteWordLastDelete = a3;
}

- (UIKeyboardTaskQueue)taskQueue
{
  return self->_taskQueue;
}

- (BOOL)suppressUpdateAssistantView
{
  return self->_suppressUpdateAssistantView;
}

- (void)setSuppressUpdateAssistantView:(BOOL)a3
{
  self->_suppressUpdateAssistantView = a3;
}

- (BOOL)suppressUpdateInputMode
{
  return self->_suppressUpdateInputMode;
}

- (void)setSuppressUpdateInputMode:(BOOL)a3
{
  self->_suppressUpdateInputMode = a3;
}

- (BOOL)isCallingTextChangedDuringInputModeSwitch
{
  return self->_isCallingTextChangedDuringInputModeSwitch;
}

- (void)setIsCallingTextChangedDuringInputModeSwitch:(BOOL)a3
{
  self->_isCallingTextChangedDuringInputModeSwitch = a3;
}

- (NSString)activeDictationLanguage
{
  return self->_activeDictationLanguage;
}

- (void)setActiveDictationLanguage:(id)a3
{
  objc_storeStrong((id *)&self->_activeDictationLanguage, a3);
}

- (NSString)hardwareKeyboardExclusivityIdentifier
{
  return self->_hardwareKeyboardExclusivityIdentifier;
}

- (void)setHardwareKeyboardExclusivityIdentifier:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 728);
}

- (_UIStringAndPositionPair)lastMatchedSupplementalCandidate
{
  return self->_lastMatchedSupplementalCandidate;
}

- (void)setLastMatchedSupplementalCandidate:(id)a3
{
  objc_storeStrong((id *)&self->_lastMatchedSupplementalCandidate, a3);
}

- (_UIStringAndPositionPair)pendingSupplementalCandidateToInsert
{
  return self->_pendingSupplementalCandidateToInsert;
}

- (void)setPendingSupplementalCandidateToInsert:(id)a3
{
  objc_storeStrong((id *)&self->_pendingSupplementalCandidateToInsert, a3);
}

- (BOOL)isSettingDelegate
{
  return self->_isSettingDelegate;
}

- (BOOL)keyboardDelegateStateNeedsRefresh
{
  return self->_keyboardDelegateStateNeedsRefresh;
}

- (void)setKeyboardDelegateStateNeedsRefresh:(BOOL)a3
{
  self->_keyboardDelegateStateNeedsRefresh = a3;
}

- (BOOL)_mimicShiftBeingHeld
{
  return self->__mimicShiftBeingHeld;
}

- (void)set_mimicShiftBeingHeld:(BOOL)a3
{
  self->__mimicShiftBeingHeld = a3;
}

- (BOOL)hasPreviousKeyResponder
{
  return self->_hasPreviousKeyResponder;
}

- (void)setHasPreviousKeyResponder:(BOOL)a3
{
  self->_hasPreviousKeyResponder = a3;
}

- (BOOL)hasNextKeyResponder
{
  return self->_hasNextKeyResponder;
}

- (void)setHasNextKeyResponder:(BOOL)a3
{
  self->_hasNextKeyResponder = a3;
}

- (UIKeyboardInputModeIndicatorController)inputModeIndicatorController
{
  return self->_inputModeIndicatorController;
}

- (BOOL)skipRecomputeInputMode
{
  return self->_skipRecomputeInputMode;
}

- (void)setSkipRecomputeInputMode:(BOOL)a3
{
  self->_skipRecomputeInputMode = a3;
}

- (BOOL)syncingDictationLanguageForInputModeSwitch
{
  return self->_syncingDictationLanguageForInputModeSwitch;
}

- (void)setSyncingDictationLanguageForInputModeSwitch:(BOOL)a3
{
  self->_syncingDictationLanguageForInputModeSwitch = a3;
}

- (UITextInputArrowKeyHistory)arrowKeyHistory
{
  return self->_arrowKeyHistory;
}

- (void)setArrowKeyHistory:(id)a3
{
  objc_storeStrong((id *)&self->_arrowKeyHistory, a3);
}

- (BOOL)floatingForced
{
  return self->_floatingForced;
}

- (void)setFloatingForced:(BOOL)a3
{
  self->_floatingForced = a3;
}

- (_UISmartReplyFeedbackManager)smartReplyFeedbackManager
{
  return self->_smartReplyFeedbackManager;
}

- (void)setSmartReplyFeedbackManager:(id)a3
{
  objc_storeStrong((id *)&self->_smartReplyFeedbackManager, a3);
}

- (_UIKeyboardPresentationDelegate)presentationDelegate
{
  return (_UIKeyboardPresentationDelegate *)objc_loadWeakRetained((id *)&self->_presentationDelegate);
}

- (void)setPresentationDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_presentationDelegate, a3);
}

- (id)externalTask
{
  return self->_externalTask;
}

- (void)setExternalTask:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 784);
}

- (_UITextChoiceAccelerationAssistant)customInputDelegateChoiceAccelerationAssistant
{
  return self->_customInputDelegateChoiceAccelerationAssistant;
}

- (void)setCustomInputDelegateChoiceAccelerationAssistant:(id)a3
{
  objc_storeStrong((id *)&self->_customInputDelegateChoiceAccelerationAssistant, a3);
}

- (_UIKeyboardTextSelectionController)customInputDelegateSelectionController
{
  return self->_customInputDelegateSelectionController;
}

- (void)setCustomInputDelegateSelectionController:(id)a3
{
  objc_storeStrong((id *)&self->_customInputDelegateSelectionController, a3);
}

- (_UIKeyboardTextSelectionInteraction)customInputDelegateSelectionInteraction
{
  return self->_customInputDelegateSelectionInteraction;
}

- (void)setCustomInputDelegateSelectionInteraction:(id)a3
{
  objc_storeStrong((id *)&self->_customInputDelegateSelectionInteraction, a3);
}

- (NSUUID)resigningRTISessionIdentifier
{
  return self->_resigningRTISessionIdentifier;
}

- (void)setResigningRTISessionIdentifier:(id)a3
{
  objc_storeStrong((id *)&self->_resigningRTISessionIdentifier, a3);
}

- (BOOL)handlingKeyCommandFromHardwareKeyboard
{
  return self->_handlingKeyCommandFromHardwareKeyboard;
}

- (void)setHandlingKeyCommandFromHardwareKeyboard:(BOOL)a3
{
  self->_handlingKeyCommandFromHardwareKeyboard = a3;
}

- (TICandidateRequestToken)currentCandidateRequest
{
  return self->_currentCandidateRequest;
}

- (NSDictionary)currentCandidateRequestInfo
{
  return self->_currentCandidateRequestInfo;
}

- (void)setCurrentCandidateRequestInfo:(id)a3
{
  objc_storeStrong((id *)&self->_currentCandidateRequestInfo, a3);
}

- (NSMutableDictionary)delegateForCandidateRequest
{
  return self->_delegateForCandidateRequest;
}

- (void)setDelegateForCandidateRequest:(id)a3
{
  objc_storeStrong((id *)&self->_delegateForCandidateRequest, a3);
}

- (TIKeyboardCandidate)autocorrectionToAcceptBeforeProgressiveCandidates
{
  return self->_autocorrectionToAcceptBeforeProgressiveCandidates;
}

- (void)setAutocorrectionToAcceptBeforeProgressiveCandidates:(id)a3
{
  objc_storeStrong((id *)&self->_autocorrectionToAcceptBeforeProgressiveCandidates, a3);
}

- (int64_t)candidateViewOffset
{
  return self->_candidateViewOffset;
}

- (void)setCandidateViewOffset:(int64_t)a3
{
  self->_candidateViewOffset = a3;
}

- (NSString)deletedString
{
  return self->_deletedString;
}

- (void)setDeletedString:(id)a3
{
  objc_storeStrong((id *)&self->_deletedString, a3);
}

- (NSArray)characterRectsForCharacterRange
{
  return self->_characterRectsForCharacterRange;
}

- (void)setCharacterRectsForCharacterRange:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 872);
}

- (id)chooseSupplementalCandidateCompletion
{
  return self->_chooseSupplementalCandidateCompletion;
}

- (void)setChooseSupplementalCandidateCompletion:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 880);
}

- (unint64_t)lastDeletionCountForFastDelete
{
  return self->_lastDeletionCountForFastDelete;
}

- (void)setLastDeletionCountForFastDelete:(unint64_t)a3
{
  self->_lastDeletionCountForFastDelete = a3;
}

- (UIView)overlayContainerObserved
{
  return (UIView *)objc_loadWeakRetained((id *)&self->_overlayContainerObserved);
}

- (void)setOverlayContainerObserved:(id)a3
{
  objc_storeWeak((id *)&self->_overlayContainerObserved, a3);
}

- (void)skippedEndInputSession
{
  return self->_skippedEndInputSession;
}

- (void)setSkippedEndInputSession:(void *)a3
{
  self->_skippedEndInputSession = a3;
}

- (NSUUID)skippedEndInputSessionID
{
  return self->_skippedEndInputSessionID;
}

- (void)setSkippedEndInputSessionID:(id)a3
{
  objc_storeStrong((id *)&self->_skippedEndInputSessionID, a3);
}

- (TUISmartReplyGenerator_Staging)smartReplyGenerator
{
  return self->_smartReplyGenerator;
}

- (void)setSmartReplyGenerator:(id)a3
{
  objc_storeStrong((id *)&self->_smartReplyGenerator, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_smartReplyGenerator, 0);
  objc_storeStrong((id *)&self->_skippedEndInputSessionID, 0);
  objc_destroyWeak((id *)&self->_overlayContainerObserved);
  objc_storeStrong(&self->_chooseSupplementalCandidateCompletion, 0);
  objc_storeStrong((id *)&self->_characterRectsForCharacterRange, 0);
  objc_storeStrong((id *)&self->_deletedString, 0);
  objc_storeStrong((id *)&self->_autocorrectionToAcceptBeforeProgressiveCandidates, 0);
  objc_storeStrong((id *)&self->_delegateForCandidateRequest, 0);
  objc_storeStrong((id *)&self->_currentCandidateRequestInfo, 0);
  objc_storeStrong((id *)&self->_currentCandidateRequest, 0);
  objc_storeStrong((id *)&self->_resigningRTISessionIdentifier, 0);
  objc_storeStrong((id *)&self->_customInputDelegateSelectionInteraction, 0);
  objc_storeStrong((id *)&self->_customInputDelegateSelectionController, 0);
  objc_storeStrong((id *)&self->_customInputDelegateChoiceAccelerationAssistant, 0);
  objc_storeStrong(&self->_externalTask, 0);
  objc_destroyWeak((id *)&self->_presentationDelegate);
  objc_storeStrong((id *)&self->_smartReplyFeedbackManager, 0);
  objc_storeStrong((id *)&self->_arrowKeyHistory, 0);
  objc_storeStrong((id *)&self->_inputModeIndicatorController, 0);
  objc_storeStrong((id *)&self->_pendingSupplementalCandidateToInsert, 0);
  objc_storeStrong((id *)&self->_lastMatchedSupplementalCandidate, 0);
  objc_storeStrong((id *)&self->_hardwareKeyboardExclusivityIdentifier, 0);
  objc_storeStrong((id *)&self->_activeDictationLanguage, 0);
  objc_storeStrong((id *)&self->_taskQueue, 0);
  objc_storeStrong(&self->_willSetupNewDelegate, 0);
  objc_storeStrong(&self->_didTeardownExistingDelegate, 0);
  objc_destroyWeak((id *)&self->_userInteractionDelegate);
  objc_storeStrong((id *)&self->_inputDelegateManager, 0);
  objc_storeStrong((id *)&self->m_traitsForPreviousDelegate, 0);
  objc_storeStrong((id *)&self->m_autoDeleteTask, 0);
  objc_storeStrong((id *)&self->m_keyboardState, 0);
  objc_storeStrong((id *)&self->m_updateCapsLockDelayOverrideForNonTyping, 0);
  objc_storeStrong(&self->m_changedDelegate, 0);
  objc_storeStrong((id *)&self->m_deferredDidSetDelegateAction, 0);
  objc_storeStrong((id *)&self->m_delayedCandidateRequest, 0);
  objc_storeStrong((id *)&self->m_touchEventWaitingForKeyInputEvent, 0);
  objc_storeStrong((id *)&self->m_smartPunctuationController, 0);
  objc_storeStrong((id *)&self->m_inlineTextCompletionController, 0);
  objc_storeStrong((id *)&self->m_inputManagerState, 0);
  objc_storeStrong((id *)&self->m_currentEventForKeyCommand, 0);
  objc_storeStrong((id *)&self->_pendingKeyupOperation, 0);
  objc_storeStrong((id *)&self->_pendingAutocorrectRange, 0);
  objc_storeStrong(&self->_waitingOnPerformAutocorrect, 0);
  objc_storeStrong((id *)&self->_inlineCompletionAsMarkedText, 0);
  objc_storeStrong((id *)&self->m_keyboardWindowSnapshot, 0);
  objc_storeStrong((id *)&self->_remoteTextInputTraits, 0);
  objc_storeStrong((id *)&self->_remoteTextInputPartner, 0);
  objc_storeStrong((id *)&self->m_hardwareKeyDownCodeToEventMap, 0);
  objc_storeStrong(&self->_deferredUpdateTask, 0);
  objc_storeStrong((id *)&self->m_delayDeleteTask, 0);
  objc_storeStrong((id *)&self->m_implProxy, 0);
  objc_storeStrong((id *)&self->m_autofillCustomInfo, 0);
  objc_storeStrong((id *)&self->m_autofillController, 0);
  objc_storeStrong((id *)&self->m_hideCursorAccessoriesAssertion, 0);
  objc_storeStrong((id *)&self->m_showCursorAccessory, 0);
  objc_storeStrong((id *)&self->m_idleDetection, 0);
  objc_storeStrong((id *)&self->m_updateLastUsedInputModeAction, 0);
  objc_storeStrong((id *)&self->_hostingController, 0);
  objc_storeStrong((id *)&self->m_previousGlobeKeyEvent, 0);
  objc_storeStrong((id *)&self->m_overrideTraits, 0);
  objc_storeStrong((id *)&self->m_traits, 0);
  objc_storeStrong((id *)&self->m_defaultTraits, 0);
  objc_storeStrong((id *)&self->m_longPressAction, 0);
  objc_storeStrong((id *)&self->m_candidateList, 0);
  objc_storeStrong((id *)&self->m_candidateResultSet, 0);
  objc_storeStrong((id *)&self->m_autocorrectionController, 0);
  objc_storeStrong((id *)&self->m_previousInputString, 0);
}

@end
