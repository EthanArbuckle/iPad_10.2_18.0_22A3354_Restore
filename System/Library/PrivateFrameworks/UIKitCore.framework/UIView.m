@implementation UIView

- (id)_allSubviews
{
  _UIViewBackingAux *v3;
  id *p_isa;
  NSMutableArray *allSubviewsCache;
  NSMutableArray *v6;
  NSMutableArray *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = self->_viewBackingAux;
  p_isa = (id *)&v3->super.isa;
  if (!v3)
  {
    -[UIView subviews](self, "subviews");
    v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  allSubviewsCache = v3->_allSubviewsCache;
  if (!allSubviewsCache)
  {
    -[UIView _backing_sublayers]((uint64_t)self);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (NSMutableArray *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v8, "count"));
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v19 != v12)
            objc_enumerationMutation(v9);
          v14 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "unsafeUnretainedDelegate", (_QWORD)v18);
          if (v14)
          {
            v15 = v14;
            if (_IsKindOfUIView((uint64_t)v14))
            {
              v16 = v15;
              -[NSMutableArray addObject:](v7, "addObject:", v16);

            }
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v11);

      if (!self)
        goto LABEL_20;
    }
    else
    {

    }
    if ((*(_QWORD *)&self->_viewFlags & 0x1000) != 0)
    {
LABEL_21:

      goto LABEL_22;
    }
LABEL_20:
    objc_storeStrong(p_isa + 4, v7);
    goto LABEL_21;
  }
  v6 = allSubviewsCache;
LABEL_5:
  v7 = v6;
LABEL_22:

  return v7;
}

- (NSArray)subviews
{
  NSArray **p_subviewCache;
  NSArray *subviewCache;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  p_subviewCache = &self->_subviewCache;
  subviewCache = self->_subviewCache;
  if (subviewCache)
    return subviewCache;
  -[CALayer sublayers](self->_layer, "sublayers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");
  if (v7)
  {
    if (v7 == 1)
    {
      objc_msgSend(v6, "objectAtIndex:", 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (id)objc_msgSend(v8, "unsafeUnretainedDelegate");

      if (v9 && _IsKindOfUIView((uint64_t)v9))
      {
        v23[0] = v9;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v10 = (void *)MEMORY[0x1E0C9AA60];
      }
    }
    else
    {
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v7);
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v11 = v6;
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v19 != v14)
              objc_enumerationMutation(v11);
            v16 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "unsafeUnretainedDelegate", (_QWORD)v18);
            if (v16)
            {
              v17 = v16;
              if (_IsKindOfUIView((uint64_t)v16))
                objc_msgSend(v10, "addObject:", v17);
            }
          }
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v13);

        if (!self)
          goto LABEL_24;
      }
      else
      {

      }
    }
    if ((*(_QWORD *)&self->_viewFlags & 0x1000) == 0)
LABEL_24:
      objc_storeStrong((id *)p_subviewCache, v10);
  }
  else
  {
    v10 = (void *)MEMORY[0x1E0C9AA60];
  }

  return (NSArray *)v10;
}

- (void)setPresentationValue:(void *)a3 velocity:(int)a4 preferredFrameRateRangeMaximum:(uint64_t)a5 immediate:(void *)a6 forKey:
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  _QWORD *v23;
  uint64_t *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  _QWORD v33[5];
  id v34;

  v11 = a2;
  v12 = a3;
  v13 = a6;
  if (a1)
  {
    objc_opt_self();
    if (_os_feature_enabled_impl())
    {
      objc_msgSend(a1, "__swift_setPresentationValue:velocity:preferredFrameRateRangeMaximum:immediate:key:", v11, v12, a4, a5, v13);
    }
    else
    {
      -[UIView animationInfoCreateIfNecessary:](a1, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v11)
      {
        +[UIInterpolatedValue interpolatedWrapperForZeroForKey:](UIInterpolatedValue, "interpolatedWrapperForZeroForKey:", v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "getValue");
        v11 = (id)objc_claimAutoreleasedReturnValue();

      }
      v33[0] = 0;
      v33[1] = v33;
      v33[2] = 0x3032000000;
      v33[3] = __Block_byref_object_copy__238;
      v33[4] = __Block_byref_object_dispose__238;
      v34 = 0;
      v27 = 0;
      v28 = &v27;
      v29 = 0x3032000000;
      v30 = __Block_byref_object_copy__238;
      v31 = __Block_byref_object_dispose__238;
      v32 = 0;
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke;
      v17[3] = &unk_1E16EB710;
      v23 = v33;
      v16 = v14;
      v18 = v16;
      v19 = v13;
      v26 = a5;
      v11 = v11;
      v20 = v11;
      v24 = &v27;
      v25 = a4;
      v21 = v12;
      v22 = a1;
      objc_msgSend(v16, "performWithLock:", v17);
      -[UIView _removePresentationModifier:withInfo:](a1, (void *)v28[5], v16);

      _Block_object_dispose(&v27, 8);
      _Block_object_dispose(v33, 8);

    }
  }

}

- (id)animationInfoCreateIfNecessary:(id)val
{
  id v2;
  UIViewAnimationInfo *v3;
  void *v4;
  _QWORD v6[4];
  id v7;
  id location;

  if (val)
  {
    v2 = val;
    if (a2 && !*((_QWORD *)val + 5))
    {
      objc_initWeak(&location, val);
      v3 = -[UIViewAnimationInfo initWithView:]([UIViewAnimationInfo alloc], "initWithView:", v2);
      v4 = (void *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = v3;

      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __71__UIView_InProcessAnimations_Internal__animationInfoCreateIfNecessary___block_invoke;
      v6[3] = &unk_1E16B3F40;
      objc_copyWeak(&v7, &location);
      objc_msgSend(*((id *)v2 + 5), "setInvalidationBlock:", v6);
      objc_destroyWeak(&v7);
      objc_destroyWeak(&location);
    }
    val = *((id *)v2 + 5);
  }
  return val;
}

- (void)_removePresentationModifier:(void *)a3 withInfo:
{
  id v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (a1 && v5)
  {
    if (pthread_main_np() == 1)
    {
      objc_msgSend(a1, "layer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "removePresentationModifier:", v5);

    }
    else
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __77__UIView_InProcessAnimations_Internal___removePresentationModifier_withInfo___block_invoke;
      v8[3] = &unk_1E16B1B50;
      v9 = v6;
      v10 = v5;
      UIViewInProcessAnimationManagerDispatchAsyncOntoMainBeforeTickExit((uint64_t)v8);

    }
  }

}

- (id)_backing_sublayers
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 176);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    -[UIView _backing_layers]((_QWORD *)a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      v7 = (void *)MEMORY[0x1E0C9AA60];
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          if (*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i) == *(_QWORD *)(a1 + 168))
          {
            objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "sublayers", (_QWORD)v12);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v9);
            v10 = objc_claimAutoreleasedReturnValue();

            v7 = (void *)v10;
          }
          else
          {
            objc_msgSend(v7, "arrayByAddingObject:");
            v9 = v7;
            v7 = (void *)objc_claimAutoreleasedReturnValue();
          }

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v5);
    }
    else
    {
      v7 = (void *)MEMORY[0x1E0C9AA60];
    }

    return v7;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 168), "sublayers");
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

- (BOOL)_canHostViewControllerContentScrollView
{
  return 1;
}

uint64_t __74__UIView_InProcessAnimations_Internal____removeAllRetargetableAnimations___block_invoke()
{
  return 1;
}

- (void)constraintsDidChangeInEngine:(id)a3
{
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x80) == 0)
    -[UIView _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel](self, "_invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel", a3);
}

- (void)_updateContentSizeConstraints
{
  void *v2;
  id v3;
  id v4;
  void *ContentSize;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char i;
  char v10;
  void *v11;
  void *v12;
  BOOL v13;
  BOOL v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((objc_msgSend(a1, "translatesAutoresizingMaskIntoConstraints") & 1) == 0)
    {
      v2 = -[UIView _contentSizeConstraints](a1);
      if (!v2 || (a1[13] & 0x400000000000) == 0)
      {
        v32[0] = 0;
        v32[1] = 0;
        v30 = 0;
        v31 = 0;
        extractContentSizeConstraints((uint64_t)a1, v2, (uint64_t *)&v30, (uint64_t *)&v31);
        if (v30 && objc_msgSend(v30, "firstAttribute") != 7)
        {
          v26 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          objc_msgSend(v26, "handleFailureInMethod:object:file:lineNumber:description:", sel__updateContentSizeConstraints, a1, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 2371, CFSTR("Unexpected content size constraint %@ on view %@"), v30, a1);
        }
        if (v31 && objc_msgSend(v31, "firstAttribute") != 8)
        {
          v27 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          objc_msgSend(v27, "handleFailureInMethod:object:file:lineNumber:description:", sel__updateContentSizeConstraints, a1, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 2372, CFSTR("Unexpected content size constraint %@ on view %@"), v31, a1);
        }
        v3 = v30;
        v4 = v31;
        v28 = 0;
        v29 = 0;
        ContentSize = -[UIView _generateContentSizeConstraints](a1);
        extractContentSizeConstraints((uint64_t)a1, ContentSize, &v28, &v29);
        v6 = (void *)objc_msgSend(a1, "_containerForContentSizeConstraints");
        v7 = 0;
        v8 = 0;
        for (i = 1; ; i = 0)
        {
          v10 = i;
          v11 = *(&v30 + v7);
          v12 = (void *)*(&v28 + v7);
          if (v11)
            v13 = 1;
          else
            v13 = v12 == 0;
          if (!v13)
            goto LABEL_33;
          if (!v11 || v12 != 0)
            break;
          objc_msgSend(v6, "removeConstraint:", *(&v30 + v7));
LABEL_35:
          v7 = 1;
          if ((v10 & 1) == 0)
          {
            v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v32, v8);
            -[UIView _setContentSizeConstraints:](a1, (uint64_t)v25);

            a1[13] |= 0x400000000000uLL;
            return;
          }
        }
        if (v11)
          v15 = v12 == 0;
        else
          v15 = 1;
        if (v15)
          goto LABEL_35;
        if (objc_msgSend(v6, "_layoutEngine")
          && (objc_msgSend(v11, "huggingPriority"), v17 = v16, objc_msgSend(v12, "huggingPriority"), v17 == v18)
          && (objc_msgSend(v11, "compressionResistancePriority"),
              v20 = v19,
              objc_msgSend(v12, "compressionResistancePriority"),
              v20 == v21))
        {
          objc_msgSend(v11, "constant");
          v23 = v22;
          objc_msgSend(v12, "constant");
          if (v23 != v24)
          {
            objc_msgSend(v12, "constant");
            objc_msgSend(v11, "setConstant:");
          }
          v12 = v11;
        }
        else
        {
          objc_msgSend(v6, "removeConstraint:", v11);
LABEL_33:
          objc_msgSend(v6, "addConstraint:", v12);
        }
        v32[v8++] = v12;
        goto LABEL_35;
      }
    }
  }
}

- (void)nsli_addConstraint:(id)a3
{
  kdebug_trace();
  -[UIView _tryToAddConstraint:roundingAdjustment:mutuallyExclusiveConstraints:]((uint64_t)self, a3, 0, 0.0);
  -[UIView _scheduleFaultingInGuidesForConstraint:](self, "_scheduleFaultingInGuidesForConstraint:", a3);
  if (kdebug_is_enabled())
  {
    objc_msgSend((id)objc_msgSend(a3, "description"), "UTF8String");
    kdebug_trace_string();
    kdebug_trace();
  }
}

- (uint64_t)_tryToAddConstraint:(uint64_t)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:
{
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (result)
  {
    v7 = (_QWORD *)result;
    v8 = objc_msgSend(a2, "container");
    if ((_QWORD *)v8 == v7)
      return 1;
    v9 = (void *)v8;
    if (v8)
    {
      v10 = a2;
      objc_msgSend(v9, "removeConstraint:", a2);
    }
    objc_msgSend(v7, "_layoutEngineCreateIfNecessary");
    objc_msgSend((id)objc_msgSend(v7, "_constraintsArray"), "addObject:", a2);
    if (NSLayoutConstraintIsPotentiallyDanglyInContainer())
      v7[13] |= 0x10000000000000uLL;
    if ((-[UIView _layoutEngine_didAddLayoutConstraint:roundingAdjustment:mutuallyExclusiveConstraints:](v7, a2, a3, a4) & 1) != 0)
    {
      return 1;
    }
    else
    {
      objc_msgSend((id)objc_msgSend(v7, "_constraintsExceptingSubviewAutoresizingConstraints"), "removeObject:", a2);
      return 0;
    }
  }
  return result;
}

- (void)_scheduleFaultingInGuidesForConstraint:(id)a3
{
  _BOOL4 v5;
  _BOOL4 v6;

  if (objc_msgSend(a3, "firstItem"))
  {
    if (!a3)
    {
      LOBYTE(v6) = objc_msgSend(0, "secondItem") != 0;
LABEL_11:
      objc_msgSend((id)objc_msgSend(a3, "firstItem"), "_addConstraintToBeProcessedAfterDecoding:", a3);
      goto LABEL_12;
    }
    v5 = objc_msgSend((id)objc_msgSend(a3, "firstItem"), "_referenceView") == 0;
  }
  else
  {
    v5 = 0;
  }
  if (objc_msgSend(a3, "secondItem"))
  {
    if (!a3)
    {
      if (v5)
        objc_msgSend((id)objc_msgSend(0, "firstItem"), "_addConstraintToBeProcessedAfterDecoding:", 0);
      goto LABEL_13;
    }
    v6 = objc_msgSend((id)objc_msgSend(a3, "secondItem"), "_referenceView") == 0;
  }
  else
  {
    v6 = 0;
  }
  if (!v5 && !v6)
  {
    -[UIView _faultInGuidesForConstraint:](self, "_faultInGuidesForConstraint:", a3);
    return;
  }
  if (v5)
    goto LABEL_11;
LABEL_12:
  if (v6)
LABEL_13:
    objc_msgSend((id)objc_msgSend(a3, "secondItem"), "_addConstraintToBeProcessedAfterDecoding:", a3);
}

- (id)_constraintsArray
{
  NSMutableArray *constraintsExceptingSubviewAutoresizingConstraints;
  NSMutableArray *v4;
  NSMutableArray *v5;

  constraintsExceptingSubviewAutoresizingConstraints = self->_constraintsExceptingSubviewAutoresizingConstraints;
  if (!constraintsExceptingSubviewAutoresizingConstraints)
  {
    v4 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v5 = self->_constraintsExceptingSubviewAutoresizingConstraints;
    self->_constraintsExceptingSubviewAutoresizingConstraints = v4;

    constraintsExceptingSubviewAutoresizingConstraints = self->_constraintsExceptingSubviewAutoresizingConstraints;
  }
  return constraintsExceptingSubviewAutoresizingConstraints;
}

- (void)_nsis_center:(double *)a3 bounds:(void *)a4 inEngine:(void *)a5 forLayoutGuide:
{
  void *v10;
  void *v11;
  double v12;
  double v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  NSObject *v22;
  double v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  CGFloat MaxY;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double MidX;
  double MidY;
  double v57;
  double v58;
  double v59;
  double v60;
  CGFloat Width;
  CGFloat Height;
  double v63;
  double v64;
  NSObject *v65;
  unint64_t v66;
  NSObject *v67;
  NSObject *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  uint8_t buf[4];
  void *v79;
  uint64_t v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;

  v80 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = (void *)objc_msgSend(a4, "delegate");
    if ((dyld_program_sdk_at_least() & 1) == 0
      && (!v10 || (objc_msgSend(v10, "_forceLayoutEngineSolutionInRationalEdges") & 1) == 0))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__nsis_center_bounds_inEngine_forLayoutGuide_, a1, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 3733, CFSTR("Error in compatibility flow"));
    }
    if (os_variant_has_internal_diagnostics())
    {
      if (!a4)
      {
        v65 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v79 = a1;
          _os_log_fault_impl(&dword_185066000, v65, OS_LOG_TYPE_FAULT, "Attempting to get auto layout values with nil engine. Affected view: %@", buf, 0xCu);
        }
      }
    }
    else if (!a4)
    {
      v66 = qword_1ECD79180;
      if (!qword_1ECD79180)
      {
        v66 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v66, (unint64_t *)&qword_1ECD79180);
      }
      v67 = *(NSObject **)(v66 + 8);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v79 = a1;
        _os_log_impl(&dword_185066000, v67, OS_LOG_TYPE_ERROR, "Attempting to get auto layout values with nil engine. Affected view: %@", buf, 0xCu);
      }
    }
    if (a5)
      v11 = a5;
    else
      v11 = a1;
    objc_msgSend(a1, "_currentScreenScale");
    v76 = 0.0;
    v77 = 0.0;
    v74 = v12;
    v13 = 360.0 / v12;
    v14 = objc_msgSend(a4, "hasValue:forVariable:", &v77, objc_msgSend(v11, "nsli_minXVariable"));
    v15 = objc_msgSend(a4, "hasValue:forVariable:", &v76, objc_msgSend(v11, "nsli_minYVariable"));
    v73 = v13;
    if (v13 <= 1.0)
      v16 = v13;
    else
      v16 = 1.0;
    objc_msgSend(a4, "valueForVariable:", objc_msgSend(v11, "nsli_boundsWidthVariable"));
    v18 = v17;
    objc_msgSend(a4, "valueForVariable:", objc_msgSend(v11, "nsli_boundsHeightVariable"));
    v20 = v19;
    if (a2
      && (!objc_msgSend(a4, "delegate")
       || (*(_QWORD *)(objc_msgSend(a4, "delegate") + 112) & 0x1000) != 0
       || (void *)objc_msgSend((id)objc_msgSend(a4, "delegate"), "_layoutEngine") != a4))
    {
      if (os_variant_has_internal_diagnostics())
      {
        v68 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v79 = a1;
          _os_log_fault_impl(&dword_185066000, v68, OS_LOG_TYPE_FAULT, "frame.origin may be incorrect for %@ in an engine that is separate from the usual layout engine.", buf, 0xCu);
        }
      }
      else
      {
        v21 = qword_1ECD79188;
        if (!qword_1ECD79188)
        {
          v21 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v21, (unint64_t *)&qword_1ECD79188);
        }
        v22 = *(NSObject **)(v21 + 8);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v79 = a1;
          _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "frame.origin may be incorrect for %@ in an engine that is separate from the usual layout engine.", buf, 0xCu);
        }
      }
    }
    v23 = v18 / v16;
    v24 = a1;
    v25 = v20 / v16;
    if (!a5)
      v24 = (void *)objc_msgSend(a1, "superview");
    v26 = round(v23);
    v27 = round(v25);
    v28 = *MEMORY[0x1E0C9D538];
    v29 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v30 = objc_msgSend(v24, "_layoutEngine");
    v31 = (void *)v30;
    v32 = v29;
    v33 = v28;
    if (a2)
    {
      v32 = v29;
      v33 = v28;
      if (v24)
      {
        v32 = v29;
        v33 = v28;
        if ((void *)v30 == a4)
        {
          -[_UIViewLayoutEngineRelativeAlignmentRectOriginCache origin](-[UIView _alignmentRectOriginCacheCreateIfNecessary:](v24, 1), "origin");
          v33 = v34;
          v32 = v35;
        }
      }
    }
    v36 = v16 * v26;
    v37 = v16 * v27;
    v69 = v29;
    v70 = v28;
    v72 = v32;
    if (a5 || (void *)objc_msgSend(a1, "_layoutEngine") != a4 && v31 == a4)
    {
      v28 = v33 + v77;
      v38 = v32 + v76;
    }
    else
    {
      v38 = v29;
      if (a2)
      {
        -[_UIViewLayoutEngineRelativeAlignmentRectOriginCache origin](-[UIView _alignmentRectOriginCacheCreateIfNecessary:](a1, 1), "origin");
        v28 = v63;
        v38 = v64;
      }
    }
    v81.origin.x = v28;
    v81.origin.y = v38;
    v81.size.width = v36;
    v81.size.height = v37;
    v75 = round(CGRectGetMinX(v81) / v73) / v74;
    v82.origin.x = v28;
    v82.origin.y = v38;
    v82.size.width = v36;
    v82.size.height = v37;
    v39 = round(CGRectGetMinY(v82) / v73) / v74;
    v83.origin.x = v28;
    v83.origin.y = v38;
    v83.size.width = v36;
    v83.size.height = v37;
    v40 = round(CGRectGetMaxX(v83) / v73) / v74;
    v84.origin.x = v28;
    v84.origin.y = v38;
    v84.size.width = v36;
    v84.size.height = v37;
    MaxY = CGRectGetMaxY(v84);
    v71 = UISizeRoundToScale(v40 - v75, round(MaxY / v73) / v74 - v39, v74);
    v43 = v42;
    objc_msgSend(v24, "alignmentRectInsets");
    v45 = v75 - round(v33 / v73) / v74 + v44;
    v47 = v39 - round(v72 / v73) / v74 + v46;
    if ((dyld_program_sdk_at_least() & 1) == 0 && (v14 & v15 & 1) == 0)
    {
      v48 = -round(v28 / v73) / v74;
      v49 = -round(v38 / v73) / v74;
      if (!v14)
        v45 = v48;
      if (!v15)
        v47 = v49;
    }
    v50 = v71;
    if (!a5)
    {
      objc_msgSend(a1, "alignmentRectInsets");
      v45 = v45 - v53;
      v47 = v47 - v54;
      v50 = v71 - (-v52 - v53);
      v43 = v43 - (-v51 - v54);
    }
    if (a2)
    {
      v85.origin.x = v45;
      v85.origin.y = v47;
      v85.size.width = v50;
      v85.size.height = v43;
      MidX = CGRectGetMidX(v85);
      v86.origin.x = v45;
      v86.origin.y = v47;
      v86.size.width = v50;
      v86.size.height = v43;
      MidY = CGRectGetMidY(v86);
      if (!a5 && objc_msgSend(v24, "_supportsContentDimensionVariables"))
      {
        objc_msgSend(v24, "_offsetForCenterOfPossibleZoomView:withIncomingBoundsSize:", a1, v50, v43);
        MidX = MidX + v57;
        MidY = MidY + v58;
      }
      *a2 = MidX;
      a2[1] = MidY;
    }
    if (a3)
    {
      if (!a5)
      {
        objc_msgSend(a1, "bounds");
        v69 = v60;
        v70 = v59;
      }
      v87.origin.x = v45;
      v87.origin.y = v47;
      v87.size.width = v50;
      v87.size.height = v43;
      Width = CGRectGetWidth(v87);
      v88.origin.x = v45;
      v88.origin.y = v47;
      v88.size.width = v50;
      v88.size.height = v43;
      Height = CGRectGetHeight(v88);
      *a3 = v70;
      a3[1] = v69;
      a3[2] = Width;
      a3[3] = Height;
    }
  }
}

- (UIEdgeInsets)alignmentRectInsets
{
  double v2;
  double v3;
  double v4;
  double v5;
  UIEdgeInsets result;

  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  result.right = v5;
  result.bottom = v4;
  result.left = v3;
  result.top = v2;
  return result;
}

- (_UIViewLayoutEngineRelativeAlignmentRectOriginCache)_alignmentRectOriginCacheCreateIfNecessary:(void *)a1
{
  _UIViewLayoutEngineRelativeAlignmentRectOriginCache *v4;

  if (a1)
  {
    objc_msgSend(a1, "_alignmentRectOriginCache");
    v4 = (_UIViewLayoutEngineRelativeAlignmentRectOriginCache *)objc_claimAutoreleasedReturnValue();
    if (!v4 && a2)
    {
      v4 = -[_UIViewLayoutEngineRelativeAlignmentRectOriginCache initWithDelegate:]([_UIViewLayoutEngineRelativeAlignmentRectOriginCache alloc], "initWithDelegate:", a1);
      objc_msgSend(a1, "_setAlignmentRectOriginCache:", v4);
    }
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

- (_UIViewLayoutEngineRelativeAlignmentRectOriginCache)_alignmentRectOriginCache
{
  return self->__alignmentRectOriginCache;
}

- (void)_faultInGuidesForConstraint:(id)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v13;
  _BOOL4 v15;

  v5 = (void *)objc_msgSend(a3, "firstItem");
  if (a3)
  {
    v6 = (void *)objc_msgSend((id)objc_msgSend(a3, "firstItem"), "_referenceView");
    v7 = (void *)objc_msgSend(a3, "secondItem");
    v8 = (void *)objc_msgSend((id)objc_msgSend(a3, "secondItem"), "_referenceView");
  }
  else
  {
    v7 = (void *)objc_msgSend(0, "secondItem");
    v6 = 0;
    v8 = 0;
  }
  v9 = objc_msgSend(a3, "firstAttribute");
  v10 = objc_msgSend(a3, "secondAttribute");
  v11 = v10;
  v13 = (v9 - 13) < 8 && v5 == v6;
  v15 = (v10 - 13) < 8 && v7 == v8;
  if (!v13 && !v15)
  {
LABEL_25:
    if (!v6)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (v13)
  {
    if (!objc_msgSend(v5, "_requiresExplicitLayoutMarginsGuideForAttribute:getAttributeForGuide:", v9, 0))
    {
      objc_msgSend(v5, "nsli_layoutMarginsItem");
      if (!v15)
        goto LABEL_25;
      goto LABEL_23;
    }
    objc_msgSend(v5, "layoutMarginsGuide");
  }
  if (!v15)
    goto LABEL_25;
LABEL_23:
  if (objc_msgSend(v7, "_requiresExplicitLayoutMarginsGuideForAttribute:getAttributeForGuide:", v11, 0))
  {
    objc_msgSend(v7, "layoutMarginsGuide");
    goto LABEL_25;
  }
  objc_msgSend(v7, "nsli_layoutMarginsItem");
  if (v6)
LABEL_26:
    _UIViewEnumerateViewsForWhichConstraintIsVulnerableToScrollViewBoundsOrigin(v6, v9, v8, v7, self, (uint64_t)&__block_literal_global_152_4);
LABEL_27:
  if (v8)
    _UIViewEnumerateViewsForWhichConstraintIsVulnerableToScrollViewBoundsOrigin(v8, v11, v6, v5, self, (uint64_t)&__block_literal_global_153_2);
}

- (uint64_t)_layoutEngine_didAddLayoutConstraint:(uint64_t)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  int v12;
  int v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  _QWORD *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t *v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  void *v64;
  char v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id obj;
  BOOL v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD v81[8];
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[128];
  _BYTE v96[128];
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v6 = a2;
  v7 = a1;
  if (a2)
  {
    v8 = (void *)objc_msgSend((id)objc_msgSend(a2, "firstItem"), "_referenceView");
    v9 = (void *)objc_msgSend((id)objc_msgSend(v6, "secondItem"), "_referenceView");
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = -[UIView _isViewHierarchyPreparedForConstraint:]((uint64_t)v7, v6);
  v11 = v10;
  if (v8 && (v10 & 1) == 0)
    objc_msgSend(v7, "_viewHierarchyUnpreparedForConstraint:", v6);
  objc_msgSend(v6, "setContainer:", v7);
  v70 = objc_msgSend(v7, "_layoutEngineCreateIfNecessary");
  if (qword_1ECD791C8 != -1)
    dispatch_once(&qword_1ECD791C8, &__block_literal_global_736);
  if (byte_1ECD790BA)
  {
    if (qword_1ECD791D0 != -1)
      dispatch_once(&qword_1ECD791D0, &__block_literal_global_739);
  }
  else
  {
    if (qword_1ECD791D0 != -1)
      dispatch_once(&qword_1ECD791D0, &__block_literal_global_739);
    if (!byte_1ECD790BB)
    {
      _tagLayoutItem((void *)objc_msgSend(v6, "firstItem"), objc_msgSend(v6, "firstAttribute"));
      _tagLayoutItem((void *)objc_msgSend(v6, "secondItem"), objc_msgSend(v6, "secondAttribute"));
      goto LABEL_125;
    }
  }
  v12 = byte_1ECD790BB;
  v66 = v7;
  if (qword_1ECD791C8 != -1)
    dispatch_once(&qword_1ECD791C8, &__block_literal_global_736);
  v65 = v11;
  v13 = byte_1ECD790BA;
  v79 = v12;
  if (!(byte_1ECD790BA | v12))
  {
    v64 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _tagConstraintItemsIfNecessary(NSLayoutConstraint *)"), CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 927, CFSTR("Internal UIKit error: Unexpected use of extended constraint item tagging"));
  }
  v69 = a3;
  v14 = (_QWORD *)objc_msgSend(v6, "firstItem");
  v15 = (void *)objc_msgSend(v6, "secondItem");
  v76 = v14;
  v16 = (_QWORD *)objc_msgSend(v14, "_referenceView");
  v17 = (void *)objc_msgSend(v15, "_referenceView");
  v18 = objc_msgSend(v6, "firstAnchor");
  v19 = objc_msgSend(v6, "secondAnchor");
  if (v18)
    v20 = objc_msgSend(v6, "firstItem") == 0;
  else
    v20 = 0;
  v71 = v6;
  v21 = v76;
  if (v19)
  {
    v22 = objc_msgSend(v6, "secondItem") == 0;
    if (v20)
    {
LABEL_24:
      v77 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    v22 = 0;
    if (v20)
      goto LABEL_24;
  }
  v23 = objc_msgSend(v76, "_referenceView");
  v77 = 0;
  if (v76 && (_QWORD *)v23 != v76)
    v77 = objc_msgSend(v76, "nsli_superitem") == v23;
LABEL_29:
  if (v22)
  {
    v73 = 0;
  }
  else
  {
    v24 = objc_msgSend(v15, "_referenceView");
    v73 = 0;
    if (v15 && (void *)v24 != v15)
      v73 = objc_msgSend(v15, "nsli_superitem") == v24;
  }
  if (v13)
    v25 = v20;
  else
    v25 = 1;
  v75 = v15;
  if ((v25 & 1) != 0)
  {
    v26 = !v20;
    v27 = &qword_1ECD79000;
  }
  else
  {
    v27 = &qword_1ECD79000;
    if (objc_msgSend(v16, "_hostsLayoutEngine"))
    {
      v26 = 0;
      if (v76 && v16 == v76 && !v75)
        v26 = (v76[14] & 0x80) == 0;
    }
    else
    {
      v26 = 1;
    }
  }
  v67 = v8;
  v68 = v9;
  if (v13)
    v28 = v22;
  else
    v28 = 1;
  v29 = v22;
  v30 = (uint64_t)v17;
  if ((v28 & 1) == 0)
    v29 = objc_msgSend(v17, "_hostsLayoutEngine");
  v31 = v29 ^ 1;
  if (qword_1ECD791C8 != -1)
    dispatch_once(&qword_1ECD791C8, &__block_literal_global_736);
  if (*((_BYTE *)v27 + 186))
  {
    if (qword_1ECD791D8 != -1)
      dispatch_once(&qword_1ECD791D8, &__block_literal_global_945_1);
    if (v71 && byte_1ECD790BD)
    {
      v32 = (void *)objc_msgSend((id)objc_msgSend(v71, "firstItem"), "_referenceView");
      v33 = (void *)objc_msgSend((id)objc_msgSend(v71, "secondItem"), "_referenceView");
      if (v32)
      {
        if (objc_msgSend(v32, "superview"))
        {
          v34 = objc_msgSend(v32, "superview");
          if (v34 == objc_msgSend(v32, "window"))
            v26 = 1;
        }
      }
      if (v33)
      {
        if (objc_msgSend(v33, "superview"))
        {
          v35 = objc_msgSend(v33, "superview");
          if (v35 == objc_msgSend(v33, "window"))
            v31 = 1;
        }
      }
      v21 = v76;
    }
  }
  if (v13)
  {
    if (v26 && v31)
    {
      v31 = 1;
LABEL_87:
      _tagLayoutItem((void *)objc_msgSend(v71, "firstItem"), objc_msgSend(v71, "firstAttribute"));
      goto LABEL_88;
    }
    if (v30 && !v26)
      v26 = (_QWORD *)v30 == v16 && v77 || !-[UIView _containsView:]((uint64_t)v16, v30);
    if (v16 && !v31)
    {
      if ((_QWORD *)v30 != v16 || !v73)
      {
        v31 = !-[UIView _containsView:](v30, (uint64_t)v16);
        if (!v26)
          goto LABEL_88;
        goto LABEL_87;
      }
      v31 = 1;
    }
  }
  if (v26)
    goto LABEL_87;
LABEL_88:
  if (v31)
    _tagLayoutItem((void *)objc_msgSend(v71, "secondItem"), objc_msgSend(v71, "secondAttribute"));
  v38 = v75;
  if (v79)
  {
    if (v20 || v22)
    {
      v39 = (void *)objc_msgSend(v71, "_referencedLayoutItems");
      v40 = objc_msgSend(v39, "count");
      v41 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", v40);
      v42 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", v40);
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      obj = v39;
      v78 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v91, v97, 16);
      if (v78)
      {
        v74 = *(_QWORD *)v92;
        do
        {
          v43 = 0;
          do
          {
            if (*(_QWORD *)v92 != v74)
              objc_enumerationMutation(obj);
            v44 = *(_QWORD **)(*((_QWORD *)&v91 + 1) + 8 * v43);
            if (v44 != v21 && v44 != v38)
            {
              v46 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v91 + 1) + 8 * v43), "_referenceView");
              if (objc_msgSend(v46, "_hostsLayoutEngine"))
              {
                objc_msgSend(v41, "addObject:", v46);
              }
              else
              {
                objc_msgSend(v42, "addObject:", v46);
                _tagLayoutItem(v44, 0);
              }
            }
            v80 = v43;
            v89 = 0u;
            v90 = 0u;
            v87 = 0u;
            v88 = 0u;
            v47 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v87, v96, 16);
            if (v47)
            {
              v48 = v47;
              v49 = *(_QWORD *)v88;
              do
              {
                for (i = 0; i != v48; ++i)
                {
                  if (*(_QWORD *)v88 != v49)
                    objc_enumerationMutation(v41);
                  v51 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * i);
                  if (v13)
                  {
                    v85 = 0u;
                    v86 = 0u;
                    v83 = 0u;
                    v84 = 0u;
                    v52 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
                    if (!v52)
                      continue;
                    v53 = v52;
                    v54 = *(_QWORD *)v84;
LABEL_112:
                    v55 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v84 != v54)
                        objc_enumerationMutation(v42);
                      if (!objc_msgSend(v51, "containsView:", *(_QWORD *)(*((_QWORD *)&v83 + 1) + 8 * v55)))break;
                      if (v53 == ++v55)
                      {
                        v53 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
                        if (v53)
                          goto LABEL_112;
                        goto LABEL_120;
                      }
                    }
                  }
                  _tagLayoutItem(v51, 0);
LABEL_120:
                  ;
                }
                v48 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v87, v96, 16);
              }
              while (v48);
            }
            v43 = v80 + 1;
            v38 = v75;
            v21 = v76;
          }
          while (v80 + 1 != v78);
          v78 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v97, 16);
        }
        while (v78);
      }
    }
  }
  v6 = v71;
  v9 = v68;
  a3 = v69;
  v7 = v66;
  v8 = v67;
  v11 = v65;
LABEL_125:
  v81[0] = MEMORY[0x1E0C809B0];
  v81[1] = 3221225472;
  v81[2] = __120__UIView_UIConstraintBasedLayout___layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints___block_invoke;
  v81[3] = &unk_1E16E9970;
  v82 = v11;
  v81[4] = v70;
  v81[5] = v7;
  v81[6] = v6;
  v81[7] = sel__layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints_;
  v56 = objc_msgSend(v6, "firstItem");
  v57 = objc_msgSend(v6, "secondItem");
  v58 = (void *)v57;
  if (v8 == (void *)v56 && v9 == (void *)v57 || (void *)objc_msgSend(v7, "_window") != v7)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
  }
  else
  {
    if (v8 == (void *)v56)
      v60 = 0;
    else
      v60 = objc_msgSend((id)objc_msgSend(v6, "firstItem"), "_isSafeAreaAspectFitLayoutGuide");
    if (v9 == v58)
      v61 = 0;
    else
      v61 = objc_msgSend((id)objc_msgSend(v6, "secondItem"), "_isSafeAreaAspectFitLayoutGuide");
    v59 = v60 ^ v61;
  }
  __120__UIView_UIConstraintBasedLayout___layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints___block_invoke((uint64_t)v81, v8, objc_msgSend(v6, "firstAttribute"), v8 != (void *)v56, v59 & v61);
  __120__UIView_UIConstraintBasedLayout___layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints___block_invoke((uint64_t)v81, v9, objc_msgSend(v6, "secondAttribute"), v9 != v58, v59 & v60);
  if ((objc_msgSend(v6, "_addToEngine:integralizationAdjustment:mutuallyExclusiveConstraints:", v70, a3, a4) & 1) == 0)
  {
    objc_msgSend(v6, "setContainer:", 0);
    return 0;
  }
  v62 = 1;
  _UIOldConstraintsSupportUpdateDependentViewsForConstraint(v6, 1);
  return v62;
}

- (id)_layoutEngineCreateIfNecessary
{
  id result;

  result = -[UIView _layoutEngine](self, "_layoutEngine");
  if (!result)
  {
    -[UIView _initializeLayoutEngine](self, "_initializeLayoutEngine");
    return -[UIView _layoutEngine](self, "_layoutEngine");
  }
  return result;
}

uint64_t __120__UIView_UIConstraintBasedLayout___layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints___block_invoke(uint64_t result, void *a2, int a3, int a4, int a5)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a2)
  {
    v7 = a2;
    v8 = result;
    if ((a3 - 13) >= 0xFFFFFFFE && (a4 & 1) == 0)
      v7 = (void *)objc_msgSend(a2, "_viewForLoweringBaselineLayoutAttribute:");
    result = objc_msgSend(v7, "_layoutEngineCreateIfNecessary");
    if (result != *(_QWORD *)(v8 + 32))
    {
      v9 = result;
      if (!*(_BYTE *)(v8 + 64))
        result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 40), CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 1026, CFSTR("Impossible to set up layout with view hierarchy unprepared for constraint."));
      if (a4)
        v10 = 0;
      else
        v10 = v7;
      if ((a4 & 1) == 0)
      {
        result = objc_msgSend(v7, "superview");
        v7 = (void *)result;
      }
      if (a5)
      {
        result = objc_msgSend(*(id *)(v8 + 40), "_layoutEngine_isEngineMergingAllowedBetweenEngine:itemEngine:forConstraint:initialView:", *(_QWORD *)(v8 + 32), v9, *(_QWORD *)(v8 + 48), v7);
        if ((result & 1) == 0)
          result = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Constraints to the safeAreaAspectFitLayoutGuide not allowed with views deeper in the view controller hierarchy than the window's root view controller. The safeAreaAspectFitLayoutGuide should only be used for displaying full-window/full-screen media content with views that are direct subviews or close descendants of the guide's window. %@"), *(_QWORD *)(v8 + 48));
      }
      if (v7 != *(void **)(v8 + 40))
      {
        do
        {
          v11 = v10;
          v10 = v7;
          objc_msgSend(v7, "_setHostsLayoutEngine:", 0);
          if ((objc_msgSend(v7, "_wantsAutolayout") & 1) == 0)
          {
            objc_msgSend(v7, "_setWantsAutolayout");
            if (objc_msgSend(v11, "translatesAutoresizingMaskIntoConstraints"))
            {
              -[UIView _invalidateAutoresizingConstraints]((uint64_t)v11);
              -[UIView _updateAutoresizingConstraints](v11);
            }
          }
          result = objc_msgSend(v7, "superview");
          v7 = (void *)result;
        }
        while (result != *(_QWORD *)(v8 + 40));
      }
    }
  }
  return result;
}

- (void)_setWantsAutolayout
{
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) == 0)
  {
    -[UIView _configureAutolayoutFlagsNeedingLayout:](self, "_configureAutolayoutFlagsNeedingLayout:", 1);
    -[UIView _setSubviewWantsAutolayoutTripWantsAutolayout:](-[UIView superview](self, "superview"), "_setSubviewWantsAutolayoutTripWantsAutolayout:", -[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine") ^ 1);
  }
}

- (id)_viewControllerForAncestor
{
  if (self)
  {
    while ((*(_DWORD *)&self->_viewFlags & 0x80000000) == 0)
    {
      self = (UIView *)-[UIView superview](self, "superview");
      if (!self)
        return self;
    }
    self = self->_viewDelegate;
  }
  return self;
}

- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6 onBehalfOfLayoutGuide:(id)a7
{
  uint64_t v10;
  int v13;
  void *v14;
  UIView *v15;
  uint64_t v16;
  void *v17;
  int v18;
  UIView *v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t v25;
  UIView *v26;
  const __CFString *v27;
  int has_internal_diagnostics;
  int v29;
  int v30;
  char v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  UIView *v37;
  double v38;
  _UIViewBaselineLoweringInfo *v39;
  id AssociatedObject;
  id v41;
  uint64_t v42;
  uint64_t v43;
  UIView *v44;
  double v45;
  double v46;
  int v47;
  id v48;
  double v49;
  _BOOL4 v50;
  BOOL v51;
  int v52;
  BOOL v53;
  int v54;
  char v55;
  double v56;
  double v57;
  double v58;
  double v59;
  UIView *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v67;
  void *v68;
  const __CFString *v69;
  uint64_t v70;
  int v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  int v75;
  UIView *i;
  uint64_t v77;
  UIView *v78;
  _BOOL4 v79;
  _BOOL4 v80;
  UIView *j;
  NSObject *v83;
  unint64_t v84;
  NSObject *v85;
  int v86;
  SEL v87;
  void *v88;
  void *context;
  id object;
  unsigned int v91;
  UIView *v92;
  _BOOL4 v93;
  UIView *v94;
  _QWORD v96[2];
  uint64_t (*v97)(uint64_t, void *);
  void *v98;
  id v99;
  double v100;
  int v101;
  _QWORD v102[5];
  _OWORD v103[2];
  uint64_t v104;
  _BYTE buf[22];
  __int16 v106;
  UIView *v107;
  __int16 v108;
  const __CFString *v109;
  uint64_t v110;

  v10 = *(_QWORD *)&a3;
  v110 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  memset(v103, 0, sizeof(v103));
  v13 = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_UIViewDebugSignposts, (uint64_t)CFSTR("UIViewDebugSignposts"));
  v102[0] = MEMORY[0x1E0C809B0];
  v102[1] = 3221225472;
  v102[2] = __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke;
  v102[3] = &unk_1E16E9A08;
  v102[4] = self;
  v14 = (void *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine", _UIScopedSignpostIntervalInit((uint64_t)v103, (byte_1ECD75E44 != 0) & ~v13, (uint64_t)v102)), "delegate");
  if ((dyld_program_sdk_at_least() & 1) == 0
    && (!v14 || (objc_msgSend(v14, "_forceLayoutEngineSolutionInRationalEdges") & 1) == 0))
  {
    v20 = -[UIView _old_nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:](self, "_old_nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:", v10, a4, a6, a5);
    goto LABEL_213;
  }
  v15 = (UIView *)objc_msgSend(a6, "container");
  if (!v15 || -[UIView isDescendantOfView:](self, "isDescendantOfView:", v15))
  {
    -[UIView superview](self, "superview");
    v16 = kdebug_trace();
    v87 = a2;
    context = (void *)MEMORY[0x186DC9484](v16);
    if (a7)
      v17 = a7;
    else
      v17 = self;
    v18 = objc_msgSend(a4, "isConstant");
    if (v18)
    {
      v19 = (UIView *)objc_msgSend(a6, "secondItem");
      v91 = objc_msgSend(a6, "secondAttribute");
    }
    else
    {
      v19 = (UIView *)objc_msgSend(a6, "firstItem");
      v91 = objc_msgSend(a6, "firstAttribute");
    }
    v92 = v15;
    v94 = -[UIView _referenceView](v19, "_referenceView");
    object = a6;
    v88 = v17;
    if ((_DWORD)v10 == 101)
    {
      v21 = 1;
      v22 = 7;
    }
    else if ((_DWORD)v10 == 102)
    {
      v21 = 1;
      v22 = 8;
    }
    else
    {
      v21 = 0;
      v22 = v10;
    }
    has_internal_diagnostics = os_variant_has_internal_diagnostics();
    if (a7)
      v29 = v21;
    else
      v29 = 0;
    if (has_internal_diagnostics)
    {
      if (!v29)
      {
LABEL_30:
        if (a7)
          v30 = 0;
        else
          v30 = v21;
        v93 = v30;
        if (a7)
          v31 = 1;
        else
          v31 = v21;
        if ((v31 & 1) == 0)
        {
          v93 = 0;
          if (v22 <= 0x25 && ((1 << v22) & 0x3F001FFE7FLL) != 0)
          {
            v93 = 0;
            if (v19 != self && v19 && v19 == v94)
              v93 = -[UIView _supportsContentDimensionVariables](self, "_supportsContentDimensionVariables")
                 && !-[UIView _isFloatingLayoutItem](v19, "_isFloatingLayoutItem")
                 && -[UIView isDescendantOfView:](v19, "isDescendantOfView:", self);
          }
        }
LABEL_46:
        -[UIView nsli_engineToUserScalingCoefficients](self, "nsli_engineToUserScalingCoefficients");
        v34 = v33;
        if (v10 <= 0x25 && ((1 << v10) & 0x2A00119D19) != 0)
          v34 = v32;
        v35 = 0.0;
        if (a7)
        {
          v36 = 0;
          v37 = (UIView *)a7;
          goto LABEL_70;
        }
        if ((v10 - 11) > 1)
        {
          v36 = 0;
          v37 = self;
          goto LABEL_70;
        }
        v37 = -[UIView _viewForLoweringBaselineLayoutAttribute:](self, "_viewForLoweringBaselineLayoutAttribute:", v10);
        -[UIView _baselineOffsetFromNearestEdgeForLayoutAttribute:](v37, "_baselineOffsetFromNearestEdgeForLayoutAttribute:", v10);
        v35 = v38;
        if (!self || !-[UIView _recordBaselineLoweringInfo](self, "_recordBaselineLoweringInfo"))
        {
LABEL_69:
          v36 = 1;
LABEL_70:
          v44 = -[UIView _referenceView](v37, "_referenceView");
          v45 = 1.0 / v34;
          v46 = a5 / (1.0 / v34);
          if (v22 <= 0x12 && ((1 << v22) & 0x60060) != 0 || (v50 = 0, v91 <= 0x12) && ((1 << v91) & 0x60060) != 0)
          {
            v47 = objc_msgSend((id)UIApp, "pureUserInterfaceLayoutDirection") == 1;
            if (v19)
            {
              if (v37)
              {
                if (v44)
                {
                  if (v94)
                  {
                    v48 = -[UIView _firstCommonAncestorToView:givenCommonAncestor:](v94, "_firstCommonAncestorToView:givenCommonAncestor:", v44, v92);
                    if (v48)
                      v47 = objc_msgSend(v48, "_shouldReverseLayoutDirection");
                  }
                }
              }
            }
            v49 = -v46;
            if (((1 << v22) & 0x60060) == 0)
              v49 = a5 / (1.0 / v34);
            if (v22 > 0x12)
              v49 = a5 / (1.0 / v34);
            v51 = v47 == 0;
            v50 = v47 != 0;
            if (!v51)
              v46 = v49;
          }
          if ((int)v22 > 16)
          {
            if (v22 != 17)
            {
              if (v22 != 18)
                goto LABEL_102;
              v51 = !v50;
              v52 = 13;
              goto LABEL_91;
            }
            v53 = !v50;
            v54 = 13;
          }
          else
          {
            if (v22 != 5)
            {
              if (v22 != 6)
                goto LABEL_102;
              v51 = !v50;
              v52 = 1;
LABEL_91:
              if (v51)
                v22 = v52 + 1;
              else
                v22 = v52;
              goto LABEL_102;
            }
            v53 = !v50;
            v54 = 1;
          }
          if (v53)
            v22 = v54;
          else
            v22 = v54 + 1;
LABEL_102:
          v55 = v36 ^ 1;
          if ((v10 - 13) > 7)
            v55 = 1;
          if ((v55 & 1) == 0)
            objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", v87, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 5881, CFSTR("Internal error, attribute not supported"));
          -[UIView nsli_engineToUserScalingCoefficients](self, "nsli_engineToUserScalingCoefficients");
          if (v10 <= 0x25 && ((1 << v10) & 0x2A00119D19) != 0)
            v56 = v57;
          if (v46 >= 0.0)
            v58 = v56;
          else
            v58 = -v56;
          v59 = v46;
          if (v19)
          {
            if (v10 > 0x25 || (v59 = v46, ((1 << v10) & 0x3F00000181) == 0))
            {
              objc_msgSend(object, "multiplier");
              if (v92 != self || a7 != 0 || v19 == self)
                v67 = v46;
              else
                v67 = v58;
              if (v64 == 1.0)
                v59 = v46;
              else
                v59 = v67;
            }
          }
          v60 = v92;
          switch(v22)
          {
            case 1u:
            case 0xDu:
            case 0x20u:
              v62 = -[UIView nsli_minXVariable](v37, "nsli_minXVariable");
              goto LABEL_132;
            case 2u:
            case 0xEu:
            case 0x24u:
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_minXVariable](v37, "nsli_minXVariable"), v59);
              if (v93)
                goto LABEL_128;
              goto LABEL_147;
            case 3u:
            case 0xCu:
            case 0xFu:
            case 0x21u:
              if (v36)
                objc_msgSend(a4, "incrementConstant:", v45 * (v35 * v46));
              goto LABEL_131;
            case 4u:
            case 0xBu:
            case 0x10u:
            case 0x25u:
              if (v36)
                objc_msgSend(a4, "incrementConstant:", v45 * -(v46 * v35));
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_minYVariable](v37, "nsli_minYVariable"), v59);
              if (v93)
                goto LABEL_121;
              goto LABEL_151;
            case 5u:
              v68 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v69 = CFSTR("Internal error, _NSLayoutAttributeLeading should have been resolved to left or right previously");
              v70 = 5899;
              goto LABEL_149;
            case 6u:
              v68 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v69 = CFSTR("Internal error, _NSLayoutAttributeTrailing should have been resolved to left or right previously");
              v70 = 5902;
LABEL_149:
              objc_msgSend(v68, "handleFailureInMethod:object:file:lineNumber:description:", v87, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), v70, v69);
              break;
            case 7u:
              if (v93)
LABEL_128:
                v61 = -[UIView nsli_contentWidthVariable](v37, "nsli_contentWidthVariable");
              else
LABEL_147:
                v61 = -[UIView nsli_boundsWidthVariable](v37, "nsli_boundsWidthVariable");
              goto LABEL_152;
            case 8u:
              if (v93)
LABEL_121:
                v61 = -[UIView nsli_contentHeightVariable](v37, "nsli_contentHeightVariable");
              else
LABEL_151:
                v61 = -[UIView nsli_boundsHeightVariable](v37, "nsli_boundsHeightVariable");
LABEL_152:
              v63 = v61;
              v59 = v46;
              goto LABEL_153;
            case 9u:
            case 0x13u:
            case 0x22u:
              if (v50 && (v91 <= 0x12 && ((1 << v91) & 0x60060) != 0 || v91 == 9))
              {
                v46 = -v46;
                v58 = -v58;
                v59 = -v59;
              }
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_boundsWidthVariable](v37, "nsli_boundsWidthVariable"), v46 * 0.5);
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_minXVariable](v37, "nsli_minXVariable"), v59);
              break;
            case 0xAu:
            case 0x14u:
            case 0x23u:
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_boundsHeightVariable](v37, "nsli_boundsHeightVariable"), v46 * 0.5);
LABEL_131:
              v62 = -[UIView nsli_minYVariable](v37, "nsli_minYVariable");
LABEL_132:
              v63 = v62;
LABEL_153:
              objc_msgSend(a4, "addVariable:coefficient:", v63, v59);
              break;
            case 0x11u:
            case 0x12u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
              break;
            default:
              v60 = v92;
              break;
          }
          if (dyld_program_sdk_at_least())
          {
            if (v22 <= 0x25 && ((1 << v22) & 0x3F00000181) != 0)
              goto LABEL_183;
            v71 = 1;
            if (v91 <= 0x25 && ((1 << v91) & 0x3F00000181) != 0)
              goto LABEL_183;
          }
          else
          {
            v72 = (void *)objc_msgSend(object, "firstItem") == v88 && objc_msgSend(object, "secondItem") == 0;
            v73 = 1;
            if (v22 <= 0x25 && ((1 << v22) & 0x3F001FFE7FLL) != 0)
              v73 = v72;
            v71 = v73 ^ 1;
          }
          if (v37 != v60 && v71)
          {
            if (v22 <= 0x25 && ((1 << v22) & 0x2A00119D19) != 0)
            {
              if (v37 != v44)
              {
                v74 = -[UIView nsli_minYVariable](v44, "nsli_minYVariable");
                v75 = 0;
LABEL_173:
                objc_msgSend(a4, "addVariable:coefficient:", v74, v58);
                goto LABEL_175;
              }
              v75 = 0;
            }
            else
            {
              if (v37 != v44)
              {
                v74 = -[UIView nsli_minXVariable](v44, "nsli_minXVariable");
                v75 = 1;
                goto LABEL_173;
              }
              v75 = 1;
            }
LABEL_175:
            if (v44 != v60)
            {
              for (i = -[UIView superview](v44, "superview"); i; i = -[UIView superview](i, "superview"))
              {
                v77 = (uint64_t)(v75
                              ? -[UIView nsli_minXVariable](i, "nsli_minXVariable")
                              : -[UIView nsli_minYVariable](i, "nsli_minYVariable"));
                objc_msgSend(a4, "addVariable:coefficient:", v77, v58);
                if (i == v60)
                  break;
              }
            }
          }
LABEL_183:
          if (-[UIView _uili_isFocusGuide](v19, "_uili_isFocusGuide"))
            v78 = v19;
          else
            v78 = v94;
          if (v78 && v78 != self && ((v10 - 1) < 6 || (v10 - 9) <= 1))
          {
            v96[0] = MEMORY[0x1E0C809B0];
            v96[1] = 3221225472;
            v97 = __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke_443;
            v98 = &unk_1E16E9B38;
            v101 = v10;
            v99 = a4;
            v100 = v46;
            if (-[UIView _isFloatingLayoutItem](self, "_isFloatingLayoutItem")
              && -[UIView _supportsContentDimensionVariables](v94, "_supportsContentDimensionVariables")
              && -[UIView superview](self, "superview") == v19)
            {
              v97((uint64_t)v96, v19);
            }
            else
            {
              v79 = -[UIView _supportsContentDimensionVariables](v94, "_supportsContentDimensionVariables");
              v80 = v94 != v19 && v79;
              if (!v80
                || v19 == (UIView *)-[UIView _contentLayoutGuideIfExists](v94, "_contentLayoutGuideIfExists")
                || v19 == (UIView *)-[UIView _contentMarginsGuideIfExists](v94, "_contentMarginsGuideIfExists"))
              {
                if (v94 && v44 != v60)
                  v44 = -[UIView _firstCommonAncestorToView:givenCommonAncestor:](v44, "_firstCommonAncestorToView:givenCommonAncestor:", v94, v60);
                if (v44 != self)
                {
                  for (j = -[UIView superview](self, "superview"); j && j != v44; j = -[UIView superview](j, "superview"))
                  {
                    if (-[UIView _supportsContentDimensionVariables](j, "_supportsContentDimensionVariables"))
                      v97((uint64_t)v96, j);
                  }
                }
              }
              else if (!-[UIView isDescendantOfView:](v94, "isDescendantOfView:", self))
              {
                v97((uint64_t)v96, v94);
              }
            }
          }
          objc_autoreleasePoolPop(context);
          -[UIView superview](self, "superview");
          kdebug_trace();
          v20 = 1;
          goto LABEL_213;
        }
        v39 = objc_alloc_init(_UIViewBaselineLoweringInfo);
        -[_UIViewBaselineLoweringInfo setBaselineView:](v39, "setBaselineView:", v37);
        -[_UIViewBaselineLoweringInfo setBaselineOffset:](v39, "setBaselineOffset:", v35);
        if (object)
        {
          if (v18)
          {
            if (objc_msgSend(object, "firstAttribute") - 11 < 2)
            {
              AssociatedObject = objc_getAssociatedObject(object, &unk_1ECD790BC);
              if (objc_msgSend(AssociatedObject, "count") != 2)
              {
                *(_QWORD *)buf = v39;
                v43 = 1;
LABEL_67:
                objc_setAssociatedObject(object, &unk_1ECD790BC, (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, v43), (void *)1);
                goto LABEL_68;
              }
              *(_QWORD *)buf = v39;
              *(_QWORD *)&buf[8] = objc_msgSend(AssociatedObject, "objectAtIndexedSubscript:", 1);
LABEL_66:
              v43 = 2;
              goto LABEL_67;
            }
          }
          else if (objc_msgSend(object, "secondAttribute") - 11 < 2)
          {
            v41 = objc_getAssociatedObject(object, &unk_1ECD790BC);
            if (objc_msgSend(v41, "count"))
              v42 = objc_msgSend(v41, "objectAtIndexedSubscript:", 0);
            else
              v42 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
            *(_QWORD *)buf = v42;
            *(_QWORD *)&buf[8] = v39;
            goto LABEL_66;
          }
        }
LABEL_68:

        goto LABEL_69;
      }
      v83 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a7;
        _os_log_fault_impl(&dword_185066000, v83, OS_LOG_TYPE_FAULT, "Unexpectedly lowering a content size attribute for a layout guide. layoutGuide = %@", buf, 0xCu);
      }
    }
    else
    {
      if (!v29)
        goto LABEL_30;
      v84 = qword_1ECD791B8;
      if (!qword_1ECD791B8)
      {
        v84 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v84, (unint64_t *)&qword_1ECD791B8);
      }
      v85 = *(NSObject **)(v84 + 8);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a7;
        _os_log_impl(&dword_185066000, v85, OS_LOG_TYPE_ERROR, "Unexpectedly lowering a content size attribute for a layout guide. layoutGuide = %@", buf, 0xCu);
      }
    }
    if (a7)
      v86 = 0;
    else
      v86 = v21;
    v93 = v86;
    goto LABEL_46;
  }
  v23 = qword_1ECD791B0;
  if (!qword_1ECD791B0)
  {
    v23 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v23, (unint64_t *)&qword_1ECD791B0);
  }
  v24 = *(NSObject **)(v23 + 8);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v25 = -[UIView performSelector:](v15, "performSelector:", sel_recursiveDescription);
    v26 = -[UIView superview](self, "superview");
    v27 = CFSTR("NO SUPERVIEW");
    *(_DWORD *)buf = 138413058;
    if (v26)
      v27 = (const __CFString *)v26;
    *(_QWORD *)&buf[4] = a6;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v25;
    v106 = 2112;
    v107 = self;
    v108 = 2112;
    v109 = v27;
    _os_log_impl(&dword_185066000, v24, OS_LOG_TYPE_ERROR, "View hierarchy unprepared for constraint.\n\tConstraint: %@\n\tContainer hierarchy: \n%@\n\tView not found in container hierarchy: %@\n\tThat view's superview: %@", buf, 0x2Au);
  }
  v20 = 0;
LABEL_213:
  if (LODWORD(v103[0]))
    kdebug_trace();
  return v20;
}

- (CGSize)nsli_engineToUserScalingCoefficients
{
  NSISEngine *v3;
  double v4;
  double v5;
  CGSize result;

  v3 = -[UIView _layoutEngine](self, "_layoutEngine");
  if (self)
  {
    if (v3)
      -[NSISEngine engineScalingCoefficients](v3, "engineScalingCoefficients");
    else
      v4 = -[UIView _preferredLayoutEngineToUserScalingCoefficients](self);
  }
  else
  {
    v5 = 0.0;
    v4 = 0.0;
  }
  result.height = v5;
  result.width = v4;
  return result;
}

- (NSISEngine)_layoutEngine
{
  return self->_layoutEngine;
}

- (BOOL)isDescendantOfView:(UIView *)view
{
  BOOL v3;

  if (!view)
    return 0;
  v3 = self != 0;
  if (self && self != view)
  {
    do
    {
      self = (UIView *)-[UIView superview](self, "superview");
      v3 = self != 0;
    }
    while (self != view && self);
  }
  return v3;
}

- (UIView)superview
{
  if ((*(_QWORD *)&self->_viewFlags & 0x8000000) != 0)
    return (UIView *)objc_msgSend((id)CALayerGetSuperlayer(), "unsafeUnretainedDelegate");
  else
    return 0;
}

- (BOOL)_supportsContentDimensionVariables
{
  return 0;
}

- (BOOL)_uili_isFocusGuide
{
  return 0;
}

- (BOOL)_isFloatingLayoutItem
{
  return 0;
}

- (BOOL)_shouldReverseLayoutDirection
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 19) & 1;
}

- (id)_firstCommonAncestorToView:(id)a3 givenCommonAncestor:(id)a4
{
  UIView *v6;
  UIView *v7;
  UIView *v8;
  UIView *v9;
  UIView *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  UIView *v15;
  uint64_t v16;
  UIView *v17;
  UIView *v18;
  UIView *v20;
  uint64_t v21;
  UIView *v22;
  UIView *v23;
  UIView *v24;
  BOOL v25;
  UIView *v26;
  UIView *v27;
  UIView *v28;

  v6 = (UIView *)a3;
  v7 = (UIView *)a4;
  v8 = v7;
  if (v6)
  {
    if (v6 != self)
    {
      if (self == v7 || v6 == v7)
      {
        v18 = v7;
        goto LABEL_20;
      }
      -[UIView superview](self, "superview");
      v9 = (UIView *)objc_claimAutoreleasedReturnValue();

      if (v9 != v6)
      {
        -[UIView superview](v6, "superview");
        v10 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (v10 != self)
        {
          -[UIView _window](self, "_window");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[UIView _window](v6, "_window");
          v12 = objc_claimAutoreleasedReturnValue();
          v13 = (void *)v12;
          if (v11 && v12 && v11 != (void *)v12)
            goto LABEL_37;
          -[UIView superview](self, "superview");
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = (UIView *)v14;
          v16 = 0;
          if (v14 && (UIView *)v14 != v8)
          {
            v16 = 0;
            while (v15 != v6)
            {
              ++v16;
              -[UIView superview](v15, "superview");
              v17 = (UIView *)objc_claimAutoreleasedReturnValue();

              if (v17)
              {
                v15 = v17;
                if (v17 != v8)
                  continue;
              }
              goto LABEL_24;
            }
            self = v6;
            goto LABEL_38;
          }
          v17 = (UIView *)v14;
LABEL_24:
          if (v8 && !v17)
            goto LABEL_37;
          -[UIView superview](v6, "superview");
          v20 = (UIView *)objc_claimAutoreleasedReturnValue();

          v21 = 0;
          if (v20 && v20 != v8)
          {
            v21 = 0;
            while (v20 != self)
            {
              ++v21;
              -[UIView superview](v20, "superview");
              v22 = (UIView *)objc_claimAutoreleasedReturnValue();

              if (v22)
              {
                v20 = v22;
                if (v22 != v8)
                  continue;
              }
              goto LABEL_35;
            }
            goto LABEL_38;
          }
          v22 = v20;
LABEL_35:
          if (v8 && !v22)
          {
LABEL_37:
            self = 0;
          }
          else
          {

            v23 = self;
            v24 = v6;
            v25 = v16 < v21;
            if (v16 <= v21)
            {
              while (v25)
              {
                v28 = v24;
                -[UIView superview](v24, "superview");
                v24 = (UIView *)objc_claimAutoreleasedReturnValue();

                v25 = v16 < --v21;
              }
            }
            else
            {
              do
              {
                v26 = v23;
                -[UIView superview](v23, "superview");
                v23 = (UIView *)objc_claimAutoreleasedReturnValue();

                --v16;
              }
              while (v16 > v21);
            }
            if (v23 == v24)
            {
              self = v23;
            }
            else
            {
              do
              {
                -[UIView superview](v23, "superview");
                self = (UIView *)objc_claimAutoreleasedReturnValue();

                -[UIView superview](v24, "superview");
                v27 = (UIView *)objc_claimAutoreleasedReturnValue();

                v24 = v27;
                v23 = self;
              }
              while (self != v27);
            }

          }
LABEL_38:

          goto LABEL_21;
        }
        v18 = self;
        goto LABEL_20;
      }
    }
    v18 = v6;
LABEL_20:
    self = v18;
    goto LABEL_21;
  }
  self = 0;
LABEL_21:

  return self;
}

+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)attribute
{
  return +[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:](UIView, "userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:", attribute, objc_msgSend((id)UIApp, "userInterfaceLayoutDirection"));
}

- (uint64_t)_isViewHierarchyPreparedForConstraint:(uint64_t)result
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  if (result)
  {
    v3 = result;
    if (!a2)
    {
      v6 = 0;
      return objc_msgSend(v6, "isDescendantOfView:", v3);
    }
    v4 = (void *)objc_msgSend((id)objc_msgSend(a2, "firstItem"), "_referenceView");
    v5 = objc_msgSend((id)objc_msgSend(a2, "secondItem"), "_referenceView");
    if ((objc_msgSend(v4, "isDescendantOfView:", v3) & 1) != 0)
    {
      if (v5)
      {
        v6 = (void *)v5;
        return objc_msgSend(v6, "isDescendantOfView:", v3);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (void)_setSubviewWantsAutolayoutTripWantsAutolayout:(BOOL)a3
{
  uint64_t v4;
  _BOOL4 v5;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t v7;
  uint64_t viewFlags;
  int v9;
  UIView *v10;
  UIView *v11;

  if (!a3 || -[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine"))
  {
    -[UIView superview](self, "superview");
    v4 = 0;
    v5 = 0;
LABEL_4:
    p_viewFlags = &self->_viewFlags;
    viewFlags = (uint64_t)self->_viewFlags;
    v7 = *((_QWORD *)&self->_viewFlags + 1);
    v9 = *((_DWORD *)&self->_viewFlags + 4);
    if ((viewFlags & 0x800000000000000) != 0 && !v5)
      return;
    goto LABEL_15;
  }
  p_viewFlags = &self->_viewFlags;
  if ((*((_QWORD *)&self->_viewFlags + 1) & 8) == 0)
    -[UIView _configureAutolayoutFlagsNeedingLayout:](self, "_configureAutolayoutFlagsNeedingLayout:", 0);
  v10 = -[UIView superview](self, "superview");
  if (!v10)
  {
    v5 = 0;
    goto LABEL_13;
  }
  v11 = v10;
  if (-[UIView _wantsAutolayout](v10, "_wantsAutolayout"))
  {
    v5 = (*(_QWORD *)&v11->_viewFlags & 0x800000000000000) == 0;
LABEL_13:
    v4 = 1;
    goto LABEL_4;
  }
  viewFlags = *(_QWORD *)p_viewFlags;
  v7 = *((_QWORD *)&self->_viewFlags + 1);
  v5 = 1;
  v4 = 1;
  v9 = *((_DWORD *)&self->_viewFlags + 4);
LABEL_15:
  *(_QWORD *)p_viewFlags = viewFlags | 0x800000000000000;
  *((_QWORD *)p_viewFlags + 1) = v7;
  *((_DWORD *)p_viewFlags + 4) = v9;
  if ((v7 & 4) == 0)
    -[UIView _setNeedsUpdateConstraints](self, "_setNeedsUpdateConstraints");
  if (v5)
    -[UIView _setSubviewWantsAutolayoutTripWantsAutolayout:](-[UIView superview](self, "superview"), "_setSubviewWantsAutolayoutTripWantsAutolayout:", v4);
}

- (void)_configureAutolayoutFlagsNeedingLayout:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t viewFlags;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v3 = a3;
  v17 = *MEMORY[0x1E0C80C00];
  viewFlags = (uint64_t)self->_viewFlags;
  *(_QWORD *)&self->_viewFlags = viewFlags | 0x400000000000000;
  if ((viewFlags & 0xC00000000000000) == 0x800000000000000)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v6 = -[UIView _allSubviews](self, "_allSubviews", 0);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v13 != v9)
            objc_enumerationMutation(v6);
          v11 = *(_QWORD **)(*((_QWORD *)&v12 + 1) + 8 * i);
          if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v11)
            && -[UIView _usesAutoresizingConstraints]((uint64_t)v11)
            && !-[UIView _autoresizingConstraints](v11)
            && (v11[14] & 4) == 0)
          {
            objc_msgSend(v11, "_setNeedsUpdateConstraintsNeedingLayout:", v3);
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v8);
    }
  }
  if ((*((_QWORD *)&self->_viewFlags + 1) & 4) == 0)
    -[UIView _setNeedsUpdateConstraintsNeedingLayout:](self, "_setNeedsUpdateConstraintsNeedingLayout:", v3);
}

- (void)_setNeedsUpdateConstraintsNeedingLayout:(BOOL)a3
{
  uint64_t v3;
  uint64_t *v5;

  v3 = a3;
  *(_QWORD *)&self->_viewFlags &= ~0x100000000000uLL;
  -[UIView _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:](self, "_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:");
  v5 = (uint64_t *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate");
  if (v5)
  {
    if (v5[13] >= 0)
      v3 = v3;
    else
      v3 = 0;
  }
  objc_msgSend(v5, "_scheduleUpdateConstraintsPassAsEngineHostNeedingLayout:", v3);
}

- (void)_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:(BOOL)a3
{
  _BOOL4 v3;
  UIView *v5;
  UIView *v6;
  uint64_t viewFlags;
  uint64_t v8;
  int v9;
  int v10;

  v3 = a3;
  v5 = -[UIView superview](self, "superview");
  if (v5)
  {
    v6 = v5;
    viewFlags = (uint64_t)v5->_viewFlags;
    if ((viewFlags & 0x200000000000) != 0)
    {
      v8 = *((_QWORD *)&v5->_viewFlags + 1);
      v9 = *((_DWORD *)&v5->_viewFlags + 4);
      *(_QWORD *)&v5->_viewFlags = viewFlags & 0xFFFFDFFFFFFFFFFFLL;
      *((_QWORD *)&v5->_viewFlags + 1) = v8;
      *((_DWORD *)&v5->_viewFlags + 4) = v9;
      if (v3 && v5 == (UIView *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate"))
      {
        if ((*(_QWORD *)&v6->_viewFlags & 0x8000000000000000) == 0)
          -[UIView setNeedsLayout](v6, "setNeedsLayout");
        v10 = 0;
      }
      else
      {
        v10 = 1;
      }
      -[UIView _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:](v6, "_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:", v10 & v3);
    }
  }
}

- (NSMutableArray)_internalConstraints
{
  return self->_internalConstraints;
}

- (void)_scheduleUpdateConstraintsPassAsEngineHostNeedingLayout:(BOOL)a3
{
  if (a3)
    -[UIView setNeedsLayout](self, "setNeedsLayout");
}

- (void)_setNeedsUpdateConstraints
{
  -[UIView _setNeedsUpdateConstraintsNeedingLayout:](self, "_setNeedsUpdateConstraintsNeedingLayout:", 1);
}

- (double)_preferredLayoutEngineToUserScalingCoefficients
{
  void *v2;
  double v3;
  void *v4;
  UIScreen *v5;
  double v6;

  if (!a1)
    return 0.0;
  v2 = a1;
  if ((objc_msgSend(a1, "_canBecomeLayoutEngineDelegate") & 1) == 0)
    v2 = (void *)objc_msgSend((id)objc_msgSend(a1, "_layoutEngine"), "delegate");
  v3 = 0.00277777778;
  if ((dyld_program_sdk_at_least() & 1) == 0
    && (!v2 || (objc_msgSend(v2, "_forceLayoutEngineSolutionInRationalEdges") & 1) == 0))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v4 = a1;
    else
      v4 = (void *)objc_msgSend(a1, "window");
    v5 = (UIScreen *)objc_msgSend(v4, "screen");
    if (!v5)
      v5 = +[UIScreen mainScreen](UIScreen, "mainScreen");
    -[UIScreen scale](v5, "scale");
    return 1.0 / v6;
  }
  return v3;
}

- (void)_notifyArrangementsOfChangeInItem:(uint64_t)a3 withSelector:
{
  void *v5;
  id i;

  for (i = a2; a1; a1 = (id)objc_msgSend(a1, "superview"))
  {
    objc_msgSend(a1, "_mutableLayoutArrangements");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "makeObjectsPerformSelector:withObject:", a3, i);

    if ((objc_msgSend(a1, "_hostsLayoutEngine") & 1) != 0)
      break;
  }

}

- (NSMutableArray)_mutableLayoutArrangements
{
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x2000) == 0)
    return (NSMutableArray *)0;
  objc_getAssociatedObject(self, &_UIViewLayoutArrangementsAssocObjectKey);
  return (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
}

- (void)_initializeLayoutEngine
{
  if (!-[UIView _layoutEngine](self, "_layoutEngine"))
  {
    if (-[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine"))
      -[UIView _initializeHostedLayoutEngine](self, "_initializeHostedLayoutEngine");
    else
      -[UIView _initializeLayoutEngine](-[UIView superview](self, "superview"), "_initializeLayoutEngine");
  }
}

- (BOOL)_hostsLayoutEngine
{
  return (*(_QWORD *)&self->_viewFlags >> 43) & 1;
}

- (id)_uili_observableLayoutEngineForBaseFrameVariables:(BOOL)a3
{
  if ((*(_QWORD *)&self->_viewFlags & 0x80000000000) != 0 && a3)
    self = -[UIView superview](self, "superview");
  return -[UIView nsli_layoutEngine](self, "nsli_layoutEngine", a3);
}

- (BOOL)_uili_requiresObservationForVariable:(id)a3
{
  if ((*(_QWORD *)&self->_viewFlags & 0x20000000000000) != 0)
    return 1;
  else
    return objc_msgSend(-[UIView _uili_existingBaseFrameVariables](self, "_uili_existingBaseFrameVariables"), "containsObject:", a3) ^ 1;
}

- (void)_contentSizeConstraints
{
  void *v1;

  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, "translatesAutoresizingMaskIntoConstraints"))
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__contentSizeConstraints, v1, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 2240, CFSTR("Retrieving contentSize constraints when autoresizing is on"));
    return (void *)objc_msgSend(v1, "_internalConstraints");
  }
  return result;
}

- (void)_setInternalConstraints:(id)a3
{
  objc_storeStrong((id *)&self->_internalConstraints, a3);
}

- (id)_containerForContentSizeConstraints
{
  if ((~*((_QWORD *)self + 13) & 0x20080000000000) == 0)
    return (id)objc_msgSend(self, "superview");
  return self;
}

- (void)_setContentSizeConstraints:(void *)result
{
  void *v3;

  if (result)
  {
    v3 = result;
    if (objc_msgSend(result, "translatesAutoresizingMaskIntoConstraints"))
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__setContentSizeConstraints_, v3, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 2245, CFSTR("Setting contentSize constraints when autoresizing is on"));
    return (void *)objc_msgSend(v3, "_setInternalConstraints:", a2);
  }
  return result;
}

- (void)_setAlignmentRectOriginCache:(id)a3
{
  objc_storeStrong((id *)&self->__alignmentRectOriginCache, a3);
}

- (BOOL)_recordBaselineLoweringInfo
{
  return 0;
}

uint64_t __63__UIView_UIConstraintBasedLayout___faultInGuidesForConstraint___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_faultInContentOffsetGuide");
}

uint64_t __63__UIView_UIConstraintBasedLayout___faultInGuidesForConstraint___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_faultInContentOffsetGuide");
}

- (void)layoutSublayersOfLayer:(id)a3
{
  BOOL v5;
  int v6;
  uint64_t v7;
  UIView *v8;
  uint64_t v9;
  UIView *v10;
  UIView *v11;
  void *v12;
  void *v13;
  BOOL v14;
  id v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  char v20;
  double Current;
  _QWORD *v22;
  void *v23;
  void *v24;
  BOOL v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char *v31;
  void *v32;
  void *v33;
  void *v34;
  char *v35;
  void *v36;
  void *v37;
  void *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  char *v49;
  void *v50;
  void *v51;
  void *v52;
  char *v53;
  id v54;
  id v55;
  void *v56;
  double v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  UIView *v65;
  UIView *v66;
  void *v67;
  id v68;
  BOOL v69;
  NSObject *v70;
  unint64_t v71;
  NSObject *v72;
  NSObject *v73;
  unint64_t v74;
  unint64_t v75;
  NSObject *v76;
  NSObject *v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  int v81;
  _QWORD *v82;
  void *v83;
  id v84;
  int v85;
  void *v86;
  char v87;
  _BYTE v88[352];
  _OWORD v89[22];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD __dst[22];
  _OWORD v95[22];
  _QWORD v96[5];
  BOOL v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _BYTE v101[128];
  _OWORD __src[22];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (self)
    v5 = -[CALayer needsLayout](self->_layer, "needsLayout");
  else
    v5 = 0;
  v100 = 0;
  v99 = 0u;
  v98 = 0u;
  v6 = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewDebugSignposts, (uint64_t)CFSTR("UIViewDebugSignposts"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  v7 = MEMORY[0x1E0C809B0];
  v96[0] = MEMORY[0x1E0C809B0];
  v96[1] = 3221225472;
  v96[2] = __50__UIView_CALayerDelegate__layoutSublayersOfLayer___block_invoke;
  v96[3] = &unk_1E16EBB80;
  v96[4] = self;
  v87 = v5;
  v97 = v5;
  _UIScopedSignpostIntervalInit((uint64_t)&v98, (byte_1ECD75E44 != 0) & ~v6, (uint64_t)v96);
  v8 = self;
  v9 = (uint64_t)v8;
  if (~*(_QWORD *)&v8->_viewFlags & 0xC00000000000000 | *((_QWORD *)&v8->_viewFlags + 1) & 0x800000000000)
    goto LABEL_13;
  v10 = v8;
  v11 = v10;
  if ((*(_QWORD *)&v10->_viewFlags & 0x40000000000000) != 0)
  {

    goto LABEL_8;
  }
  -[UIView _layoutEngine](v10, "_layoutEngine");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    v14 = -[UIView _hostsLayoutEngine](v11, "_hostsLayoutEngine");

    if (v14)
      goto LABEL_13;
LABEL_8:
    if ((*((_BYTE *)&v11->_viewFlags + 23) & 0x40) == 0 && dyld_program_sdk_at_least())
    {
      -[UIView _layoutEngine](v11, "_layoutEngine");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {

LABEL_106:
        memset(v95, 0, 64);
        -[UIView _allSubviews](v11, "_allSubviews");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", v95, __src, 16);
        if (v61)
        {
          v62 = **(_QWORD **)&v95[1];
LABEL_108:
          v63 = 0;
          while (1)
          {
            if (**(_QWORD **)&v95[1] != v62)
              objc_enumerationMutation(v60);
            if (-[UIView _subviewPreventsSkipLayout:](v11, "_subviewPreventsSkipLayout:", *(_QWORD *)(*((_QWORD *)&v95[0] + 1) + 8 * v63)))
            {
              break;
            }
            if (v61 == ++v63)
            {
              v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", v95, __src, 16);
              v7 = MEMORY[0x1E0C809B0];
              if (v61)
                goto LABEL_108;
              goto LABEL_114;
            }
          }

          v7 = MEMORY[0x1E0C809B0];
          if (self)
            goto LABEL_14;
          v85 = 1;
          goto LABEL_17;
        }
LABEL_114:

        goto LABEL_116;
      }
      if (-[UIView _hostsLayoutEngine](v11, "_hostsLayoutEngine"))
        goto LABEL_106;
    }

LABEL_116:
    if ((*(_QWORD *)(v9 + 112) & 0x100) == 0)
      goto LABEL_126;
    -[UIView _layoutEngine](v11, "_layoutEngine");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v64);

    *(_QWORD *)(v9 + 112) &= ~0x100uLL;
    v65 = v11;
    v66 = v65;
    if ((*(_QWORD *)&v65->_viewFlags & 0x40000000000000) != 0)
    {

      goto LABEL_126;
    }
    -[UIView _layoutEngine](v65, "_layoutEngine");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    if (v67)
    {

    }
    else
    {
      v69 = -[UIView _hostsLayoutEngine](v66, "_hostsLayoutEngine");

      if (!v69)
        goto LABEL_126;
    }
    goto LABEL_14;
  }

LABEL_13:
LABEL_14:
  if ((*(_QWORD *)(v9 + 112) & 0x30000) != 0)
  {
    *(_QWORD *)(v9 + 112) |= 0x80000uLL;
    goto LABEL_126;
  }
  v85 = 0;
LABEL_17:
  -[UIView _updateAppearanceIfNeeded](v9);
  v15 = *(id *)(v9 + 168);
  v16 = v15 == a3;

  if (!v16)
    goto LABEL_126;
  if (pthread_main_np() != 1)
    -[UIView _raiseExceptionForBackgroundThreadLayout]((id *)v9);
  +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "didEnterLayoutSublayersOfLayerForView:", v9);
  v86 = v17;
  ++*(_WORD *)(v9 + 220);
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting](v9))
  {
    objc_msgSend((id)v9, "_layoutEngine");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "delegate");
    v19 = (id)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      v20 = 0;
      v19[14] |= 0x100uLL;
      goto LABEL_25;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = 1;
LABEL_25:
  v82 = v19;
  v80 = v20;
  if (__UILogIdenticalLayouts)
    Current = CFAbsoluteTimeGetCurrent();
  else
    Current = 0.0;
  *(_QWORD *)(v9 + 104) |= 0x8000000000000000;
  v84 = *(id *)(v9 + 96);
  objc_msgSend((id)v9, "_viewControllerToNotifyOnLayoutSubviews");
  v22 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v9, "_presentationControllerToNotifyOnLayoutSubviews");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v9, "_lastNotifiedTraitCollection");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  if (v84)
  {
    if ((objc_msgSend((id)v9, "_canSkipTraitsAndOverlayUpdatesForViewControllerToNotifyOnLayoutResetState:", 1) & 1) == 0)
    {
      -[UIViewController _updateTraitsIfNecessarySchedulingPropagation:]((uint64_t)v84, 0);
      if (!objc_msgSend((id)v9, "_viewDelegateContentOverlayInsetsAreClean")
        || (objc_msgSend(v84, "navigationController"),
            v24 = (void *)objc_claimAutoreleasedReturnValue(),
            v25 = v24 == 0,
            v24,
            !v25))
      {
        objc_msgSend(v84, "_updateContentOverlayInsetsFromParentIfNecessary");
      }
    }
  }
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  v81 = byte_1EDDCA61D;
  if (byte_1EDDCA61D
    && _UIViewShouldProcessTraitChangeDuringLayout((_QWORD *)v9, (uint64_t)v84, (uint64_t)v23))
  {
    -[UIView _updateTraitCollectionAndProcessChangesWithBehavior:previousCollection:]((void *)v9, 0, v83);
    -[UIView _updateAppearanceIfNeeded](v9);
  }
  if (v22)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!v85)
        goto LABEL_41;
      __UIFaultDebugAssertLog();
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__src[0]) = 0;
        _os_log_fault_impl(&dword_185066000, v72, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
      }
    }
    else
    {
      if (!v85)
      {
LABEL_41:
        +[UITraitCollection _currentTraitCollectionIfExists]();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v9, "traitCollection");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v27);

        v28 = (void *)_UISetCurrentFallbackEnvironment((void *)v9);
        -[UIViewController __viewIsAppearing:skipWindowCheck:]((uint64_t)v22, (v22[46] >> 22) & 1, 0);
        -[UIViewController _performContentUnavailableConfigurationStateUpdate]((uint64_t)v22);
        memset(__src, 0, sizeof(__src));
        _UIBeginTrackingTraitUsage((void *)v9, v22, __src);
        objc_msgSend(v86, "willSendViewWillLayoutSubviewsToViewControllerOfView:", v9);
        if (_UIObservationTrackingEnabled())
          objc_msgSend(v22, "_viewWillLayoutSubviewsWithObservationTracking");
        else
          objc_msgSend(v22, "viewWillLayoutSubviews");
        objc_msgSend(v86, "didSendViewWillLayoutSubviewsToViewControllerOfView:", v9);
        objc_msgSend(v22, "_embeddedDelegate");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = v29;
        if (v29)
          objc_msgSend(v29, "viewControllerViewWillLayoutSubviews:", v22);
        memset(v95, 0, sizeof(v95));
        memcpy(__dst, __src, sizeof(__dst));
        v31 = (char *)GetTraitCollectionTSD() + 16;
        memcpy(v95, v31, sizeof(v95));
        memcpy(v31, __dst, 0x160uLL);
        -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v9, (uint64_t)&v95[8] + 8, objc_msgSend(v22, "methodForSelector:", sel_viewWillLayoutSubviews), sel_setNeedsLayout);
        -[UIViewController _recordTraitUsage:insideMethod:withInvalidationAction:](v22, (uint64_t)&v95[19] + 8, objc_msgSend(v22, "methodForSelector:", sel_viewWillLayoutSubviews), sel__invalidateViewLayout);
        _UITraitUsageTrackingResultDestroy((uint64_t)v95);
        _UIRestorePreviousFallbackEnvironment(v28);
        +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v26);

        goto LABEL_47;
      }
      v74 = qword_1EDDCA7C0;
      if (!qword_1EDDCA7C0)
      {
        v74 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v74, (unint64_t *)&qword_1EDDCA7C0);
      }
      v72 = *(id *)(v74 + 8);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__src[0]) = 0;
        _os_log_impl(&dword_185066000, v72, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
      }
    }

    goto LABEL_41;
  }
LABEL_47:
  if (!v23)
    goto LABEL_54;
  if (os_variant_has_internal_diagnostics())
  {
    if (!v85)
      goto LABEL_50;
    __UIFaultDebugAssertLog();
    v73 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_fault_impl(&dword_185066000, v73, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
LABEL_154:

    goto LABEL_50;
  }
  if (v85)
  {
    v75 = qword_1EDDCA7C8;
    if (!qword_1EDDCA7C8)
    {
      v75 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v75, (unint64_t *)&qword_1EDDCA7C8);
    }
    v73 = *(id *)(v75 + 8);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl(&dword_185066000, v73, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
    goto LABEL_154;
  }
LABEL_50:
  +[UITraitCollection _currentTraitCollectionIfExists]();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v9, "traitCollection");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v33);

  v34 = (void *)_UISetCurrentFallbackEnvironment((void *)v9);
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage((void *)v9, v23, __src);
  if (_UIObservationTrackingEnabled())
    objc_msgSend(v23, "_containerViewWillLayoutSubviewsWithObservationTracking");
  else
    objc_msgSend(v23, "_containerViewWillLayoutSubviews");
  memset(v95, 0, sizeof(v95));
  memcpy(__dst, __src, sizeof(__dst));
  v35 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v95, v35, sizeof(v95));
  memcpy(v35, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v9, (uint64_t)&v95[8] + 8, objc_msgSend(v23, "methodForSelector:", sel_containerViewWillLayoutSubviews), sel_setNeedsLayout);
  -[UIPresentationController _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v23, (uint64_t)&v95[19] + 8, objc_msgSend(v23, "methodForSelector:", sel_containerViewWillLayoutSubviews), sel__invalidateContainerViewLayout);
  _UITraitUsageTrackingResultDestroy((uint64_t)v95);
  _UIRestorePreviousFallbackEnvironment(v34);
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v32);

LABEL_54:
  if (!v81 && _UIViewShouldProcessTraitChangeDuringLayout((_QWORD *)v9, (uint64_t)v84, (uint64_t)v23))
    -[UIView _updateTraitCollectionAndProcessChangesWithBehavior:previousCollection:]((void *)v9, 0, v83);
  if (((dyld_program_sdk_at_least() & 1) != 0
     || objc_msgSend((id)v9, "_forceLayoutEngineSolutionInRationalEdges"))
    && -[UIView _usesLayoutEngineHostingConstraints](v9))
  {
    -[UIView _resetLayoutEngineHostConstraints]((void *)v9);
  }
  objc_msgSend(v86, "willSendLayoutSubviewsToView:", v9);
  if (os_variant_has_internal_diagnostics())
  {
    if (!v85)
      goto LABEL_63;
    __UIFaultDebugAssertLog();
    v70 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v70, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_fault_impl(&dword_185066000, v70, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
  }
  else
  {
    if (!v85)
      goto LABEL_63;
    v71 = qword_1EDDCA7D0;
    if (!qword_1EDDCA7D0)
    {
      v71 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v71, (unint64_t *)&qword_1EDDCA7D0);
    }
    v70 = *(id *)(v71 + 8);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl(&dword_185066000, v70, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
  }

LABEL_63:
  +[UITraitCollection _currentTraitCollectionIfExists]();
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v9, "traitCollection");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v37);

  v38 = (void *)_UISetCurrentFallbackEnvironment((void *)v9);
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage((void *)v9, 0, __src);
  ++*(_WORD *)(v9 + 218);
  if (_UIObservationTrackingEnabled())
    objc_msgSend((id)v9, "_layoutSubviewsWithObservationTracking");
  else
    objc_msgSend((id)v9, "layoutSubviews");
  --*(_WORD *)(v9 + 218);
  --*(_WORD *)(v9 + 220);
  memset(v95, 0, sizeof(v95));
  memcpy(__dst, __src, sizeof(__dst));
  v39 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v95, v39, sizeof(v95));
  memcpy(v39, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v9, (uint64_t)&v95[8] + 8, objc_msgSend((id)v9, "methodForSelector:", sel_layoutSubviews), sel_setNeedsLayout);
  _UITraitUsageTrackingResultDestroy((uint64_t)v95);
  _UIRestorePreviousFallbackEnvironment(v38);
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v36);
  objc_msgSend(v86, "didSendLayoutSubviewsToView:", v9);
  *(_QWORD *)&v99 = v99 | 2;
  if (-[UIView _wantsReapplicationOfAutoLayoutWithLayoutDirtyOnEntry:]((_QWORD *)v9, v87))
    -[UIView _updateConstraintsAsNecessaryAndApplyLayoutFromEngine](v9);
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  objc_msgSend((id)v9, "_allSubviews");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v90, v101, 16);
  if (v41)
  {
    v42 = *(_QWORD *)v91;
    do
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v91 != v42)
          objc_enumerationMutation(v40);
        objc_msgSend(*(id *)(*((_QWORD *)&v90 + 1) + 8 * i), "_updateSafeAreaInsets");
      }
      v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v90, v101, 16);
    }
    while (v41);
  }

  if (v22)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!v85)
        goto LABEL_78;
      __UIFaultDebugAssertLog();
      v76 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_fault_impl(&dword_185066000, v76, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }
    else
    {
      if (!v85)
      {
LABEL_78:
        +[UITraitCollection _currentTraitCollectionIfExists]();
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v9, "traitCollection");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v45);

        v46 = (void *)_UISetCurrentFallbackEnvironment((void *)v9);
        memset(__dst, 0, sizeof(__dst));
        _UIBeginTrackingTraitUsage((void *)v9, v22, __dst);
        objc_msgSend(v86, "willSendViewDidLayoutSubviewsToViewControllerOfView:", v9);
        if (_UIObservationTrackingEnabled())
          objc_msgSend(v22, "_viewDidLayoutSubviewsWithObservationTracking");
        else
          objc_msgSend(v22, "viewDidLayoutSubviews");
        objc_msgSend(v86, "didSendViewDidLayoutSubviewsToViewControllerOfView:", v9);
        objc_msgSend(v22, "_embeddedDelegate");
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        if (v47)
        {
          objc_msgSend(v22, "_embeddedDelegate");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "viewControllerViewDidLayoutSubviews:", v22);

        }
        objc_msgSend(v22, "_viewDidPerformLayout");
        memset(v89, 0, sizeof(v89));
        memcpy(v88, __dst, sizeof(v88));
        v49 = (char *)GetTraitCollectionTSD() + 16;
        memcpy(v89, v49, sizeof(v89));
        memcpy(v49, v88, 0x160uLL);
        -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v9, (uint64_t)&v89[8] + 8, objc_msgSend(v22, "methodForSelector:", sel_viewDidLayoutSubviews), sel_setNeedsLayout);
        -[UIViewController _recordTraitUsage:insideMethod:withInvalidationAction:](v22, (uint64_t)&v89[19] + 8, objc_msgSend(v22, "methodForSelector:", sel_viewDidLayoutSubviews), sel__invalidateViewLayout);
        _UITraitUsageTrackingResultDestroy((uint64_t)v89);
        _UIRestorePreviousFallbackEnvironment(v46);
        +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v44);
        if (-[UIView _wantsReapplicationOfAutoLayoutWithLayoutDirtyOnEntry:]((_QWORD *)v9, v87))
          -[UIView _updateConstraintsAsNecessaryAndApplyLayoutFromEngine](v9);

        goto LABEL_86;
      }
      v78 = qword_1EDDCA7D8;
      if (!qword_1EDDCA7D8)
      {
        v78 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v78, (unint64_t *)&qword_1EDDCA7D8);
      }
      v76 = *(id *)(v78 + 8);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_impl(&dword_185066000, v76, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }

    goto LABEL_78;
  }
LABEL_86:
  if (v23)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!v85)
        goto LABEL_89;
      __UIFaultDebugAssertLog();
      v77 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_fault_impl(&dword_185066000, v77, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }
    else
    {
      if (!v85)
      {
LABEL_89:
        +[UITraitCollection _currentTraitCollectionIfExists]();
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v9, "traitCollection");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v51);

        v52 = (void *)_UISetCurrentFallbackEnvironment((void *)v9);
        memset(__dst, 0, sizeof(__dst));
        _UIBeginTrackingTraitUsage((void *)v9, v23, __dst);
        if (_UIObservationTrackingEnabled())
          objc_msgSend(v23, "_containerViewDidLayoutSubviewsWithObservationTracking");
        else
          objc_msgSend(v23, "containerViewDidLayoutSubviews");
        memset(v89, 0, sizeof(v89));
        memcpy(v88, __dst, sizeof(v88));
        v53 = (char *)GetTraitCollectionTSD() + 16;
        memcpy(v89, v53, sizeof(v89));
        memcpy(v53, v88, 0x160uLL);
        -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v9, (uint64_t)&v89[8] + 8, objc_msgSend(v23, "methodForSelector:", sel_containerViewDidLayoutSubviews), sel_setNeedsLayout);
        -[UIPresentationController _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v23, (uint64_t)&v89[19] + 8, objc_msgSend(v23, "methodForSelector:", sel_containerViewDidLayoutSubviews), sel__invalidateContainerViewLayout);
        _UITraitUsageTrackingResultDestroy((uint64_t)v89);
        _UIRestorePreviousFallbackEnvironment(v52);
        +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v50);

        goto LABEL_93;
      }
      v79 = qword_1EDDCA7E0;
      if (!qword_1EDDCA7E0)
      {
        v79 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v79, (unint64_t *)&qword_1EDDCA7E0);
      }
      v77 = *(id *)(v79 + 8);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_impl(&dword_185066000, v77, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }

    goto LABEL_89;
  }
LABEL_93:
  if ((_UIViewShowAlignmentRects() & 1) != 0
    || +[UIView _toolsDebugAlignmentRects](UIView, "_toolsDebugAlignmentRects"))
  {
    v54 = (id)objc_msgSend((id)v9, "_alignmentDebuggingOverlayCreateIfNecessary:", 1);
  }
  if (+[UIView _toolsDebugColorViewBounds](UIView, "_toolsDebugColorViewBounds"))
    v55 = (id)objc_msgSend((id)v9, "_colorViewBoundsOverlayCreateIfNecessary:", 1);
  if (+[UIView _toolsDebugShouldDetectClippedViews](UIView, "_toolsDebugShouldDetectClippedViews"))
    objc_msgSend((id)v9, "_detectAndHandleClippedView");
  if ((v80 & 1) == 0)
  {
    objc_msgSend((id)v9, "_layoutEngine");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v56);

    v82[14] &= ~0x100uLL;
  }
  *(_QWORD *)(v9 + 104) &= ~0x8000000000000000;
  if (__UILogIdenticalLayouts)
  {
    v57 = CFAbsoluteTimeGetCurrent();
    -[UIView _layoutHashesStackCreateIfNeeded:]((void *)v9, 0);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    if (v58)
    {
      v59 = -[UIView _layoutHash]((void *)v9);
      *(_QWORD *)&__dst[0] = v7;
      *((_QWORD *)&__dst[0] + 1) = 3221225472;
      *(_QWORD *)&__dst[1] = __65__UIView_Hierarchy___validateLayoutHashHasChangedWithLayoutTime___block_invoke;
      *((_QWORD *)&__dst[1] + 1) = &unk_1E16EB7C8;
      *(double *)&__dst[3] = v57 - Current;
      *((_QWORD *)&__dst[2] + 1) = v59;
      *(_QWORD *)&__dst[2] = v9;
      objc_msgSend(v58, "enumerateObjectsWithOptions:usingBlock:", 2, __dst);
      objc_msgSend(v58, "removeAllObjects");
    }
    else
    {
      v68 = -[UIView _layoutHashesStackCreateIfNeeded:]((void *)v9, 1);
    }

  }
  objc_msgSend(v86, "willExitLayoutSublayersOfLayerForView:", v9);

LABEL_126:
  if ((_DWORD)v98)
    kdebug_trace();
}

- (_QWORD)_backing_outermostLayer
{
  _QWORD *v1;
  uint64_t v2;
  id v3;
  void *v4;

  v1 = a1;
  if (a1)
  {
    v2 = a1[22];
    if (!v2 || (v3 = *(id *)(v2 + 8), (v4 = v3) == 0))
    {
      v3 = 0;
      v4 = (void *)v1[21];
    }
    v1 = v4;

  }
  return v1;
}

- (double)_currentScreenScale
{
  UIView *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  void *v8;
  void *v9;

  v2 = self;
  if (!dyld_program_sdk_at_least()
    || (-[UIView traitCollection](v2, "traitCollection"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v3, "displayScale"),
        v5 = v4,
        v3,
        v5 <= 0.0))
  {
    objc_msgSend(-[UIView _screen](v2, "_screen"), "scale");
    v5 = v6;
  }
  if (v5 <= 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CGFloat GetCurrentScreenScaleForView(UIView *__strong)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("UIView.m"), 19158, CFSTR("GetCurrentScreenScaleForView() must always return a valid scale (%g > 0.0)"), *(_QWORD *)&v5);

  }
  return v5;
}

- (UITraitCollection)traitCollection
{
  UIView *v3;
  uint64_t v4;
  UITraitCollection *cachedTraitCollection;
  UITraitCollection *v6;
  id v7;
  UITraitCollection *v8;
  UITraitCollection *v9;
  UITraitCollection *v10;
  BOOL v11;

  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  if (byte_1EDDCA61D)
  {
    if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_DebugStaleViewTraitCollection, (uint64_t)CFSTR("DebugStaleViewTraitCollection"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1ECD76AEC&& !-[UIView _cachedTraitCollectionIsValid](self, "_cachedTraitCollectionIsValid"))
    {
      v3 = self;
      v4 = (uint64_t)v3;
      if ((byte_1EDDCA61E & 1) != 0)
      {
LABEL_18:

        return self->_cachedTraitCollection;
      }
      byte_1EDDCA61E = 1;
      cachedTraitCollection = v3->_cachedTraitCollection;
      v6 = cachedTraitCollection;
      -[UIView _updateCachedTraitCollectionIfNeeded](v4);
      v7 = *(id *)(v4 + 32);
      objc_storeStrong((id *)(v4 + 32), cachedTraitCollection);
      *(_DWORD *)(v4 + 120) &= ~0x80u;
      v8 = v6;
      v9 = (UITraitCollection *)v7;
      v10 = v9;
      if (v8 == v9)
      {

      }
      else
      {
        if (v8 && v9)
        {
          v11 = -[UITraitCollection isEqual:](v8, "isEqual:", v9);

          if (v11)
            goto LABEL_17;
        }
        else
        {

        }
        UIViewReturningStaleTraitCollection((void *)v4, (uint64_t)v8, (uint64_t)v10);
      }
LABEL_17:
      byte_1EDDCA61E = 0;

      goto LABEL_18;
    }
  }
  else
  {
    -[UIView _updateCachedTraitCollectionIfNeeded]((uint64_t)self);
  }
  return self->_cachedTraitCollection;
}

- (double)_setSafeAreaInsets:(double)a3 updateSubviewsDuringNextLayoutPass:(double)a4
{
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  BOOL v16;
  uint64_t v19;
  char v20;
  id v21;
  void *v22;
  id v23;
  char v24;
  void *v25;

  if (result)
  {
    v10 = (uint64_t)result;
    v12 = result[48];
    v11 = result[49];
    v14 = result[50];
    v13 = result[51];
    v15 = a4 == v11 && a3 == v12;
    v16 = v15 && a6 == v13;
    if (!v16 || a5 != v14)
    {
      objc_msgSend(result, "_safeAreaInsetsWillChange");
      v19 = *(_QWORD *)(v10 + 124);
      *(_QWORD *)(v10 + 124) = v19 & 0xFFFFFEFFFFFFFFFFLL;
      if ((v19 & 0x20000000000) != 0)
        -[UIView _invalidateCalculatedSafeAreas](v10);
      *(double *)(v10 + 384) = a3;
      *(double *)(v10 + 392) = a4;
      *(double *)(v10 + 400) = a5;
      *(double *)(v10 + 408) = a6;
      if (*(_WORD *)(v10 + 220))
      {
        v20 = 1;
        if (!a2)
        {
LABEL_27:
          if ((*(_QWORD *)(v10 + 112) & 0x1E00000000000000) != 0)
            objc_msgSend((id)v10, "_updateInferredLayoutMargins");
          -[UIView _updateSafeAreaLayoutGuideConstraintsIfNecessary]((id *)v10);
          -[UIView _updateReadableContentGuideConstraintsIfNecessary]((_QWORD *)v10);
          +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "didUpdateSafeAreaInsets:ofView:", v10, *(double *)(v10 + 384), *(double *)(v10 + 392), *(double *)(v10 + 400), *(double *)(v10 + 408));

          return (double *)objc_msgSend((id)v10, "_safeAreaInsetsDidChangeFromOldInsets:", v12, v11, v14, v13);
        }
      }
      else
      {
        v21 = *(id *)(v10 + 96);
        objc_msgSend(v21, "navigationController");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "topViewController");
        v23 = (id)objc_claimAutoreleasedReturnValue();
        if (v21 == v23)
          v20 = objc_msgSend(v21, "_navControllerIsLayingOutTopViewController");
        else
          v20 = 0;

        if (!a2)
          goto LABEL_27;
      }
      if (objc_msgSend((id)v10, "_edgesPropagatingSafeAreaInsetsToSubviews"))
        v24 = v20;
      else
        v24 = 1;
      if ((v24 & 1) == 0)
        objc_msgSend((id)v10, "setNeedsLayout");
      goto LABEL_27;
    }
  }
  return result;
}

- (void)setSafeAreaInsets:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  if (dyld_program_sdk_at_least())
    -[UIView _setSafeAreaInsets:updateSubviewsDuringNextLayoutPass:]((double *)self, 1, top, left, bottom, right);
}

- (UIPresentationController)_presentationControllerToNotifyOnLayoutSubviews
{
  void *v2;
  void *v3;

  if ((*((_BYTE *)&self->_viewFlags + 21) & 0x20) != 0)
  {
    objc_getAssociatedObject(self, &_UIViewPresentationControllerToNotifyOnLayoutSubviews);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "object");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return (UIPresentationController *)v2;
}

- (UITraitCollection)_lastNotifiedTraitCollection
{
  return self->__lastNotifiedTraitCollection;
}

- (void)_updateCachedTraitCollectionIfNeeded
{
  _BYTE *TraitCollectionTSD;
  char v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void **v9;
  void **v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  id v17;
  _QWORD v18[5];
  char v19;

  if (!a1 || (objc_msgSend((id)a1, "_cachedTraitCollectionIsValid") & 1) != 0)
    return;
  TraitCollectionTSD = GetTraitCollectionTSD();
  v3 = TraitCollectionTSD[9];
  TraitCollectionTSD[9] = 1;
  v4 = *(_QWORD *)(a1 + 124) & 0x80000000;
  *(_QWORD *)(a1 + 124) |= 0x80000000uLL;
  objc_msgSend((id)a1, "_parentTraitEnvironment");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "_traitCollectionForChildEnvironment:", a1);
    v7 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend((id)a1, "_lastNotifiedTraitCollection");
      v17 = (id)objc_claimAutoreleasedReturnValue();
      if (!v17)
      {
        UIViewMissingInitialTraitCollection((void *)a1);
        v17 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)a1, "_setLastNotifiedTraitCollection:");
      }
      goto LABEL_11;
    }
    +[UITraitCollection _defaultTraitCollection]();
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v17 = (id)v7;
LABEL_11:

  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __46__UIView__updateCachedTraitCollectionIfNeeded__block_invoke;
  v18[3] = &unk_1E16EB328;
  v19 = v4 >> 31;
  v18[4] = a1;
  -[UITraitCollection _traitCollectionByModifyingTraitsCopyOnWrite:](v17, (uint64_t)v18);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*(_DWORD *)(a1 + 120) & 0x100) != 0)
  {
    objc_getAssociatedObject((id)a1, &_UIViewTraitOverridesKey);
    v9 = (void **)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      -[_UITraitOverrides _traitCollectionByApplyingOverridesToTraitCollection:](v9, v8);
      v11 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v11;
    }

  }
  _UITraitEnvironmentGeneratedTraitCollection(a1, (unint64_t)v8);
  v12 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;

  *(_DWORD *)(a1 + 120) |= 0x80u;
  *(_QWORD *)(a1 + 124) = *(_QWORD *)(a1 + 124) & 0xFFFFFFFF7FFFFFFFLL | v4;
  *((_BYTE *)GetTraitCollectionTSD() + 9) = v3;
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  if (!byte_1EDDCA61D && dyld_program_sdk_at_least())
  {
    v13 = *(_QWORD *)(a1 + 32);
    objc_msgSend((id)a1, "_lastNotifiedTraitCollection");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v13)
    {
      v16 = _colorAppearanceTraitChanged(v13, (uint64_t)v14);

      if (v16)
        *(_QWORD *)(a1 + 124) |= 0x40000uLL;
    }
    else
    {

    }
  }

}

- (BOOL)_cachedTraitCollectionIsValid
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 7) & 1;
}

- (void)_updateInferredLayoutMarginsFromSuperview:(id)a3
{
  id v4;
  double DefaultLayoutMargins;
  double v6;
  double v7;
  double left;
  double top;
  double right;
  double bottom;
  double v12;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  BOOL v27;
  BOOL v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x200) == 0)
  {
    DefaultLayoutMargins = _UIViewGetDefaultLayoutMargins();
    top = self->_inferredLayoutMargins.top;
    left = self->_inferredLayoutMargins.left;
    bottom = self->_inferredLayoutMargins.bottom;
    right = self->_inferredLayoutMargins.right;
    if (left == v12 && top == DefaultLayoutMargins && right == v7 && bottom == v6)
    {
      top = _UIViewResolvedMargins((id *)&self->super.super.isa, self->_inferredLayoutMargins.top, self->_inferredLayoutMargins.left, self->_inferredLayoutMargins.bottom, self->_inferredLayoutMargins.right);
      left = v16;
      bottom = v17;
      right = v18;
    }
    *((_QWORD *)&v19 + 1) = *((unsigned int *)&self->_viewFlags + 4);
    *(_QWORD *)&v19 = *((_QWORD *)&self->_viewFlags + 1);
    v22 = _UIViewAdjustedLayoutMarginsForLayoutMargins((uint64_t)self, v4, (v19 >> 57) & 0xF, self->_rawLayoutMargins.top, self->_rawLayoutMargins.left, self->_rawLayoutMargins.bottom, self->_rawLayoutMargins.right);
    v24 = v23;
    v25 = v20;
    v26 = v21;
    v27 = left == v23;
    if (top != v22)
      v27 = 0;
    if (right != v21)
      v27 = 0;
    v28 = bottom == v20 && v27;
    if (!v28)
      -[UIView _layoutMarginsWillChange](self, "_layoutMarginsWillChange");
    self->_inferredLayoutMargins.top = v22;
    self->_inferredLayoutMargins.left = v24;
    self->_inferredLayoutMargins.bottom = v25;
    self->_inferredLayoutMargins.right = v26;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    -[UIView _allSubviews](self, "_allSubviews", 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (v30)
    {
      v31 = v30;
      v32 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v31; ++i)
        {
          if (*(_QWORD *)v36 != v32)
            objc_enumerationMutation(v29);
          v34 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
          if (objc_msgSend(v34, "preservesSuperviewLayoutMargins"))
            objc_msgSend(v34, "_updateInferredLayoutMargins");
        }
        v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      }
      while (v31);
    }

    if (!v28)
      -[UIView _layoutMarginsDidChangeFromOldMargins:](self, "_layoutMarginsDidChangeFromOldMargins:", top, left, bottom, right);
  }

}

+ (BOOL)_toolsDebugAlignmentRects
{
  return __toolsDebugAlignmentRects;
}

+ (BOOL)_toolsDebugColorViewBounds
{
  return __toolsDebugColorViewBounds;
}

- (void)setFrame:(CGRect)frame
{
  double height;
  double width;
  double y;
  double x;
  _BOOL4 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _BOOL4 v21;
  id *v22;
  id *v23;
  char v24;
  void *v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  _BOOL4 v39;
  _BOOL4 v40;
  uint64_t v41;
  char v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  height = frame.size.height;
  width = frame.size.width;
  y = frame.origin.y;
  x = frame.origin.x;
  v8 = __currentViewAnimationState
    && (*(_BYTE *)(__currentViewAnimationState + 172) & 0x10) != 0
    && -[UIView _needsLayoutOnAnimatedFrameChangeForNewFrame:](self, "_needsLayoutOnAnimatedFrameChangeForNewFrame:", frame.origin.x, frame.origin.y, frame.size.width, frame.size.height);
  -[UIView bounds](self, "bounds");
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  -[UIView center](self, "center");
  v48 = v17;
  v46 = v18;
  -[UIView frame](self, "frame");
  v47 = v19;
  v50 = v20;
  v21 = -[UIView _shouldInvalidateBaselineConstraintsForSize:oldSize:](self, "_shouldInvalidateBaselineConstraintsForSize:oldSize:", width, height, v14, v16);
  v22 = (id *)-[UIView superview](self, "superview");
  v23 = v22;
  if (v22)
    v24 = objc_msgSend(v22[21], "needsLayout");
  else
    v24 = 0;
  +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "willSendSetFrame:toLayerOfView:", self, x, y, width, height);

  -[UIView _backing_setFrame:]((uint64_t)self, x, y, width, height);
  v26 = 0;
  v49 = width;
  v27 = height;
  v28 = x;
  v29 = y;
  if (v23 && (v24 & 1) == 0)
    v26 = objc_msgSend(v23[21], "needsLayout");
  -[UIView _synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:updateSuperview:]((uint64_t)self, v26, v10, v12, v14, v16);
  -[UIView bounds](self, "bounds");
  v31 = v30;
  v33 = v32;
  -[UIView center](self, "center");
  v35 = v34;
  v45 = v36;
  -[UIView frame](self, "frame");
  v39 = v33 == v16 && v31 == v14;
  v40 = v38 != v50 || v37 != v47;
  if ((*(_QWORD *)&self->_viewFlags & 0x20000) == 0 && !v39)
    -[UIView resizeSubviewsWithOldSize:](self, "resizeSubviewsWithOldSize:", v14, v16);
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self)
    && (*(_QWORD *)&self->_viewFlags & 0x200000000000000) == 0
    && -[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints")
    && (!v39 || v40))
  {
    -[UIView _constraints_frameDidChange]((uint64_t)self);
  }
  if (v21)
    -[UIView _invalidateBaselineConstraints](self, "_invalidateBaselineConstraints");
  if (v8)
    -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded");
  if ((!v39 || v40)
    && *((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((_QWORD *)&self->_viewFlags + 1) & 0x8000000000000000)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    if (v39)
    {
      v41 = 2;
      if (!v40)
        goto LABEL_39;
    }
    else
    {
      *((double *)&v53 + 1) = v14;
      *(double *)&v54 = v16;
      *(_QWORD *)&v51 = 8;
      if (-[UIView _shouldNotifyGeometryObserversForBaselineChanges](self, "_shouldNotifyGeometryObserversForBaselineChanges"))
      {
        *(_QWORD *)&v51 = 2056;
        v41 = 2058;
        if (!v40)
          goto LABEL_39;
      }
      else
      {
        v41 = 10;
        if (!v40)
        {
LABEL_39:
          -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v51);
          goto LABEL_40;
        }
      }
    }
    *((double *)&v51 + 1) = v47;
    *(double *)&v52 = v50;
    *(_QWORD *)&v51 = v41;
    goto LABEL_39;
  }
LABEL_40:
  v42 = v35 != v48 || !v39;
  if ((v42 & 1) != 0 || (v44 = v45, v43 = v46, v45 != v46))
  {
    -[UIView _updateCombinedInsetsIfNecessary](self, "_updateCombinedInsetsIfNecessary");
    -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary](self);
  }
  if (!v39)
  {
    -[UIView _notifyReferenceViewSizeChange](self, "_notifyReferenceViewSizeChange", v43, v44);
    -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);
  }
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1000000) != 0)
    -[UIView _setFrameForBackdropMaskViews:convertFrame:](self, 1, v28, v29, v49, v27);
}

- (double)_backing_position
{
  uint64_t v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2 || (v3 = *(id *)(v2 + 8), (v4 = v3) == 0))
  {
    v4 = 0;
    v3 = *(id *)(a1 + 168);
  }
  objc_msgSend(v3, "position");
  v6 = v5;

  if ((*(_BYTE *)(a1 + 130) & 1) != 0)
  {
    objc_msgSend((id)a1, "superview");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "bounds");
    v9 = v8;

    return v6 + v9;
  }
  return v6;
}

- (double)_safeAreaInsetsForFrame:(char)a3 inSuperview:(CGFloat)a4 ignoreViewController:(CGFloat)a5
{
  id v14;
  void *v15;
  double v16;
  double v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  char v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  double v32;
  double v33;
  double v34;

  if (!a1)
    return 0.0;
  v14 = *(id *)(a1 + 96);
  v15 = v14;
  if (v14 && (a3 & 1) == 0)
  {
    if ((*(_QWORD *)(a1 + 112) & 0x4000000000000000) == 0)
      objc_msgSend(v14, "_updateContentOverlayInsetsFromParentIfNecessary");
    objc_msgSend((id)a1, "safeAreaInsets");
    v17 = v16;
    goto LABEL_16;
  }
  if (a2)
  {
    if ((*(_BYTE *)(a1 + 128) & 0x10) != 0)
    {
      objc_msgSend(a2, "superview");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (a2[12])
      {
        v21 = a2;
LABEL_15:
        v22 = objc_msgSend(v20, "_edgesPropagatingSafeAreaInsetsToSubviews");
        objc_msgSend(v20, "bounds");
        v24 = v23;
        v26 = v25;
        v28 = v27;
        v30 = v29;
        objc_msgSend(v21, "safeAreaInsets");
        v17 = _UIEdgeInsetsPropagatedToChildRectOnEdges(v22, v31, v32, v33, v34, v24, v26, v28, v30, a4, a5, a6, a7);

        goto LABEL_16;
      }
      v18 = v19;
    }
    else
    {
      v18 = a2;
    }
    v21 = v18;
    v20 = v18;
    goto LABEL_15;
  }
  v17 = 0.0;
LABEL_16:

  return v17;
}

- (CGRect)bounds
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  if (self)
  {
    -[CALayer bounds](self->_layer, "bounds");
  }
  else
  {
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
    v2 = 0.0;
  }
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (UIEdgeInsets)safeAreaInsets
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_safeAreaInsets.top;
  left = self->_safeAreaInsets.left;
  bottom = self->_safeAreaInsets.bottom;
  right = self->_safeAreaInsets.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (unint64_t)_edgesPropagatingSafeAreaInsetsToSubviews
{
  return 15;
}

- (BOOL)_shouldInvalidateBaselineConstraintsForSize:(CGSize)a3 oldSize:(CGSize)a4
{
  BOOL v4;
  BOOL result;

  result = 0;
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    v4 = a3.width == a4.width && a3.height == a4.height;
    if (!v4 && -[UIView _hasBaseline](self, "_hasBaseline"))
      return 1;
  }
  return result;
}

- (void)setNeedsLayout
{
  uint64_t viewFlags;
  UIViewController *viewDelegate;
  int v5;
  BOOL v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x20) == 0)
  {
    if (pthread_main_np() != 1)
      -[UIView _raiseExceptionForBackgroundThreadLayout]((id *)&self->super.super.isa);
    viewFlags = (uint64_t)self->_viewFlags;
    if (((viewFlags & 0x400000000000000) != 0 || (viewFlags & 0x800080000000000) == 0x800080000000000)
      && (_UIAppUseModernRotationAndPresentationBehaviors()
       || ((viewDelegate = self->_viewDelegate,
            v5 = -[UIViewController _appearState](viewDelegate, "_appearState"),
            viewDelegate)
         ? (v6 = v5 == 1)
         : (v6 = 1),
           !v6 ? (v7 = v5 == 2) : (v7 = 1),
           v7)))
    {
      -[UIView _viewsJostledDuringUpdateConstraintsPass](self, "_viewsJostledDuringUpdateConstraintsPass");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v8;
      if (v8)
      {
        objc_msgSend(v8, "addObject:", self);
      }
      else
      {
        -[UIView _is_setNeedsLayout](self, "_is_setNeedsLayout");
        +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "willSendSetNeedsLayoutToLayerOfView:", self);

        -[CALayer setNeedsLayout](self->_layer, "setNeedsLayout");
        if (__UILogIdenticalLayouts)
          -[UIView _pushLayoutHash](self);
      }

    }
    else
    {
      +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "willSendSetNeedsLayoutToLayerOfView:", self);

      -[CALayer setNeedsLayout](self->_layer, "setNeedsLayout");
      if (__UILogIdenticalLayouts)
        -[UIView _pushLayoutHash](self);
    }
  }
}

- (void)_synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:(double)a3 updateSuperview:(double)a4
{
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting](a1))
    {
      if ((*(_QWORD *)(a1 + 104) & 0x8000000000000000) == 0)
      {
        if ((objc_msgSend(*(id *)(a1 + 168), "needsLayout") & 1) != 0
          || objc_msgSend(*(id *)(a1 + 168), "needsLayoutOnGeometryChange")
          && (objc_msgSend((id)a1, "bounds"),
              (_UIRectEquivalentToRectWithAccuracy(a3, a4, a5, a6, v12, v13, v14, v15, 0.00000011920929) & 1) == 0))
        {
          objc_msgSend((id)a1, "_is_setNeedsLayout");
        }
      }
    }
    if (a2)
    {
      if ((dyld_program_sdk_at_least() & 1) != 0)
      {
LABEL_10:
        objc_msgSend((id)a1, "superview");
        v24 = (_QWORD *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v24, "_wantsAutolayout");
        v17 = v24;
        if (v16)
        {
          if ((v24[13] & 0x8000000000000000) == 0)
          {
            objc_msgSend(v24, "_is_setNeedsLayout");
            v17 = v24;
          }
        }

        return;
      }
      if ((*(_QWORD *)(a1 + 104) & 0x8000000000000000) == 0)
      {
        if (qword_1EDDCA720 != -1)
          dispatch_once(&qword_1EDDCA720, &__block_literal_global_985);
        if (!byte_1EDDCA615)
        {
          if ((objc_msgSend((id)a1, "translatesAutoresizingMaskIntoConstraints") & 1) != 0
            || !objc_msgSend((id)a1, "_wantsAutolayout"))
          {
            goto LABEL_10;
          }
          -[UIView __viewDelegate]((id *)a1);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "parentViewController");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v19
            || (objc_msgSend(v18, "navigationController"),
                v20 = (void *)objc_claimAutoreleasedReturnValue(),
                v20,
                v20 != v19))
          {

            goto LABEL_10;
          }
          if (os_variant_has_internal_diagnostics())
          {
            __UIFaultDebugAssertLog();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              v26 = v18;
              _os_log_fault_impl(&dword_185066000, v23, OS_LOG_TYPE_FAULT, "Setting translatesAutoresizingMaskIntoContraints to NO for the view of a view controller that is pushed on a UINavigationController is not supported and at high risk of a layout feedback loop when built on iOS 13.0 or later. Problem occurs for %@", buf, 0xCu);
            }

          }
          else
          {
            v21 = qword_1EDDCA728;
            if (!qword_1EDDCA728)
            {
              v21 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v21, (unint64_t *)&qword_1EDDCA728);
            }
            v22 = *(NSObject **)(v21 + 8);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v26 = v18;
              _os_log_impl(&dword_185066000, v22, OS_LOG_TYPE_ERROR, "Setting translatesAutoresizingMaskIntoContraints to NO for the view of a view controller that is pushed on a UINavigationController is not supported and at high risk of a layout feedback loop when built on iOS 13.0 or later. Problem occurs for %@", buf, 0xCu);
            }
          }

        }
      }
    }
  }
}

- (void)_updateSublayerGeometry
{
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  double MidX;
  double MidY;
  double v14;
  double v15;
  double v16;
  double v17;
  double Width;
  double Height;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  v31 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(id *)(a1 + 168);
    v3 = *(_QWORD *)(a1 + 176);
    if (v3)
    {
      v4 = *(id *)(v3 + 8);
      if (v4)
      {
        v5 = v4;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        -[UIView _backing_layers]((_QWORD *)a1);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        if (!v7)
          goto LABEL_22;
        v8 = v7;
        v9 = *(_QWORD *)v27;
        while (1)
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v27 != v9)
              objc_enumerationMutation(v6);
            v11 = *(id *)(*((_QWORD *)&v26 + 1) + 8 * i);
            objc_msgSend(v5, "bounds", (_QWORD)v26);
            MidX = CGRectGetMidX(v32);
            objc_msgSend(v5, "bounds");
            MidY = CGRectGetMidY(v33);
            objc_msgSend(v11, "bounds");
            v15 = v14;
            objc_msgSend(v11, "bounds");
            v17 = v16;
            objc_msgSend(v5, "bounds");
            Width = CGRectGetWidth(v34);
            objc_msgSend(v5, "bounds");
            Height = CGRectGetHeight(v35);
            v20 = (id)objc_msgSend(v11, "unsafeUnretainedDelegate");
            if (v20)
            {
              v21 = v20;
              if (_IsKindOfUIView((uint64_t)v20))
                v22 = v21;
              else
                v22 = 0;
              v23 = v22;
              v24 = v23;
              if (v23)
                v25 = v11 == v2;
              else
                v25 = 1;
              if (!v25)
              {
                objc_msgSend(v23, "_privateSubview_updateGeometryWithCenter:bounds:", MidX, MidY, v15, v17, Width, Height);
                goto LABEL_20;
              }
            }
            else
            {
              v24 = 0;
            }
            objc_msgSend(v11, "setPosition:", MidX, MidY);
            objc_msgSend(v11, "setBounds:", v15, v17, Width, Height);
            v21 = v24;
LABEL_20:

          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
          if (!v8)
          {
LABEL_22:

            break;
          }
        }
      }
    }

  }
}

- (void)_backing_setFrame:(double)y
{
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  id v16;
  void *v17;
  CGRect v18;
  CGRect v19;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 130) & 1) != 0)
    {
      objc_msgSend((id)a1, "superview");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "bounds");
      v12 = v11;
      v14 = v13;

      -[UIView _setIntermediateLayerMaskFrameOrigin:]((void *)a1);
      v18.origin.x = x;
      v18.origin.y = y;
      v18.size.width = width;
      v18.size.height = height;
      v19 = CGRectOffset(v18, -v12, -v14);
      x = v19.origin.x;
      y = v19.origin.y;
      width = v19.size.width;
      height = v19.size.height;
    }
    v15 = *(_QWORD *)(a1 + 176);
    if (!v15 || (v16 = *(id *)(v15 + 8), (v17 = v16) == 0))
    {
      v17 = 0;
      v16 = *(id *)(a1 + 168);
    }
    objc_msgSend(v16, "setFrame:", x, y, width, height);

    -[UIView _updateSublayerGeometry](a1);
  }
}

- (void)_updateInferredLayoutMargins
{
  -[UIView _updateInferredLayoutMarginsFromSuperview:](self, "_updateInferredLayoutMarginsFromSuperview:", -[UIView superview](self, "superview"));
}

- (UIEdgeInsets)_concreteDefaultLayoutMargins
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  UIEdgeInsets result;

  -[UIView __viewDelegate]((id *)&self->super.super.isa);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = 0.0;
  if (!v2)
    v3 = 8.0;
  v4 = v3;
  v5 = v3;
  v6 = v3;
  result.right = v6;
  result.bottom = v5;
  result.left = v4;
  result.top = v3;
  return result;
}

- (id)__viewDelegate
{
  if (a1)
    a1 = (id *)a1[12];
  return a1;
}

- (void)_updateSafeAreaInsets
{
  if (!-[UIView _safeAreaInsetsFrozen](self, "_safeAreaInsetsFrozen"))
  {
    -[UIView _safeAreaInsetsInSuperview:](self, "_safeAreaInsetsInSuperview:", -[UIView superview](self, "superview"));
    -[UIView setSafeAreaInsets:](self, "setSafeAreaInsets:");
  }
}

- (UIEdgeInsets)_safeAreaInsetsInSuperview:(id)a3
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect v17;
  UIEdgeInsets result;

  if (-[UIView _safeAreaInsetsFrozen](self, "_safeAreaInsetsFrozen"))
  {
    -[UIView safeAreaInsets](self, "safeAreaInsets");
  }
  else
  {
    if ((*((_DWORD *)&self->_viewFlags + 4) & 0x800000) != 0)
      -[UIView _frameIgnoringLayerTransform](self, "_frameIgnoringLayerTransform");
    else
      -[UIView frame](self, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    if (a3 && objc_msgSend(*((id *)a3 + 21), "flipsHorizontalAxis"))
    {
      objc_msgSend(a3, "bounds");
      v13 = CGRectGetMaxX(v17) - v15 - v13;
    }
    -[UIView _safeAreaInsetsForFrame:inSuperview:](self, "_safeAreaInsetsForFrame:inSuperview:", a3, v13, v14, v15, v16);
  }
  result.right = v8;
  result.bottom = v7;
  result.left = v6;
  result.top = v5;
  return result;
}

- (double)_backing_frame
{
  uint64_t v2;
  id v3;
  void *v4;
  unint64_t v5;
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  id v12;
  double v13;
  CGRect v15;

  if (!a1)
    return 0.0;
  if ((*(_BYTE *)(a1 + 130) & 1) != 0)
  {
    objc_msgSend((id)a1, "superview");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bounds");
    v8 = v7;
    v10 = v9;

    v11 = *(_QWORD *)(a1 + 176);
    if (!v11 || (v12 = *(id *)(v11 + 8), (v4 = v12) == 0))
    {
      v4 = 0;
      v12 = *(id *)(a1 + 168);
    }
    objc_msgSend(v12, "frame");
    v5 = (unint64_t)CGRectOffset(v15, v8, v10);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (!v2 || (v3 = *(id *)(v2 + 8), (v4 = v3) == 0))
    {
      v4 = 0;
      v3 = *(id *)(a1 + 168);
    }
    objc_msgSend(v3, "frame");
  }
  v13 = *(double *)&v5;

  return v13;
}

- (BOOL)_safeAreaInsetsFrozen
{
  return (*((_QWORD *)&self->_viewFlags + 1) >> 61) & 1;
}

- (UIEdgeInsets)_safeAreaInsetsForFrame:(CGRect)a3 inSuperview:(id)a4
{
  double v4;
  double v5;
  double v6;
  double v7;
  UIEdgeInsets result;

  v4 = -[UIView _safeAreaInsetsForFrame:inSuperview:ignoreViewController:]((uint64_t)self, a4, 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  result.right = v7;
  result.bottom = v6;
  result.left = v5;
  result.top = v4;
  return result;
}

- (BOOL)layoutMarginsFollowReadableWidth
{
  return (*((unsigned __int8 *)&self->_viewFlags + 21) >> 4) & 1;
}

- (BOOL)preservesSuperviewLayoutMargins
{
  return (*((_QWORD *)&self->_viewFlags + 1) & 0x1E0000000000000) != 0;
}

- (void)_updateCombinedInsetsIfNecessary
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (qword_1EDDCA718 != -1)
    dispatch_once(&qword_1EDDCA718, &__block_literal_global_981_0);
  if (byte_1EDDCA614)
    -[UIView _setViewDelegateContentOverlayInsetsAreClean:](self, "_setViewDelegateContentOverlayInsetsAreClean:", 0);
  -[UIView safeAreaInsets](self, "safeAreaInsets");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[UIView _updateSafeAreaInsets](self, "_updateSafeAreaInsets");
  -[UIView safeAreaInsets](self, "safeAreaInsets");
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1E00000000000000) == 0
    || v6 == v12 && v4 == v11 && v10 == v14 && v8 == v13)
  {
    -[UIView _updateInferredLayoutMargins](self, "_updateInferredLayoutMargins");
  }
}

- (void)_setViewDelegateContentOverlayInsetsAreClean:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x4000000000000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xBFFFFFFFFFFFFFFFLL | v3;
}

- (BOOL)_wantsReapplicationOfAutoLayoutWithLayoutDirtyOnEntry:(_QWORD *)a1
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  objc_msgSend(a1, "_allSubviews");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (!v5)
    return 0;
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)a1))
  {
    objc_msgSend(a1, "_layoutEngine");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v6);

  }
  v7 = 0;
  v8 = a1[13];
  if ((v8 & 0x40000000000000) == 0 && (a2 & 1) == 0)
  {
    if ((v8 & 0x800000000000000) != 0)
    {
      if ((v8 & 0x200000000000) != 0)
      {
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        objc_msgSend(a1, "_allSubviews", 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v17;
          while (2)
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v17 != v13)
                objc_enumerationMutation(v10);
              v15 = *(_QWORD **)(*((_QWORD *)&v16 + 1) + 8 * v14);
              if ((v15[13] & 0x400000000000000) != 0
                && !objc_msgSend(v15, "translatesAutoresizingMaskIntoConstraints"))
              {
                v7 = 1;
                goto LABEL_24;
              }
              ++v14;
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
            if (v12)
              continue;
            break;
          }
        }
        v7 = 0;
LABEL_24:

      }
      else
      {
        return 1;
      }
    }
    else
    {
      return (v8 & 0x400100000000000) == 0x400000000000000;
    }
  }
  return v7;
}

- (void)_updateAppearanceIfNeeded
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  id v5;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 104);
    if ((v2 & 0x20000000000) != 0)
    {
      v3 = *(_QWORD *)(a1 + 112);
      v4 = *(_DWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 104) = v2 & 0xFFFFFDFFFFFFFFFFLL;
      *(_QWORD *)(a1 + 112) = v3;
      *(_DWORD *)(a1 + 120) = v4;
      objc_msgSend((id)a1, "window");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      +[_UIAppearance _applyInvocationsTo:window:](_UIAppearance, "_applyInvocationsTo:window:", a1, v5);

    }
  }
}

+ (BOOL)_toolsDebugShouldDetectClippedViews
{
  if (qword_1EDDCA800 != -1)
    dispatch_once(&qword_1EDDCA800, &__block_literal_global_2850);
  return byte_1EDDCA618;
}

- (id)_viewsJostledDuringUpdateConstraintsPass
{
  return -[UIView _viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:](self, "_viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:", 0);
}

- (id)_parentTraitEnvironment
{
  UIViewController *viewDelegate;

  viewDelegate = self->_viewDelegate;
  if (viewDelegate)
    return viewDelegate;
  -[UIView superview](self, "superview");
  return (id)objc_claimAutoreleasedReturnValue();
}

- (BOOL)_viewDelegateContentOverlayInsetsAreClean
{
  return (*((_QWORD *)&self->_viewFlags + 1) >> 62) & 1;
}

- (BOOL)_canSkipTraitsAndOverlayUpdatesForViewControllerToNotifyOnLayoutResetState:(BOOL)a3
{
  return 0;
}

- (BOOL)_needsLayoutOnAnimatedFrameChangeForNewFrame:(CGRect)a3
{
  double height;
  double width;
  double v5;
  double v6;

  height = a3.size.height;
  width = a3.size.width;
  -[UIView bounds](self, "bounds", a3.origin.x, a3.origin.y);
  return v6 != height || v5 != width;
}

uint64_t __57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = (void *)objc_msgSend(*(id *)(a1 + 32), "_allSubviews");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "_parentalLayoutEngineDidChangeTo:", *(_QWORD *)(a1 + 40));
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      v4 = result;
    }
    while (result);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(void **)(a1 + 32);
    if (v7)
      _UIViewEnumerateConstraints(v7, (uint64_t)&__block_literal_global_168_1);
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v8 = *(void **)(a1 + 48);
    result = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (result)
    {
      v9 = result;
      v10 = *(_QWORD *)v13;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "_addToEngine:", *(_QWORD *)(a1 + 40));
        }
        while (v9 != v11);
        result = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
        v9 = result;
      }
      while (result);
    }
    if (!*(_QWORD *)(a1 + 56))
    {
      result = objc_msgSend(*(id *)(a1 + 32), "needsUpdateConstraints");
      if ((_DWORD)result)
        return objc_msgSend(*(id *)(a1 + 32), "_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:", objc_msgSend(*(id *)(a1 + 32), "_wantsAutolayout"));
    }
  }
  return result;
}

void __45__UIView_Hierarchy___postMovedFromSuperview___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id v26;

  v2 = *(void **)(a1 + 32);
  if (v2)
    _UIViewRemoveConstraintsMadeDanglyByChangingSuperview(*(_QWORD *)(a1 + 40), v2, *(void **)(a1 + 56));
  v3 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 56), "_layoutEngine");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_parentalLayoutEngineDidChangeTo:", v4);

  v5 = *(_QWORD *)(a1 + 64);
  if (v5 != *(_QWORD *)(a1 + 48))
  {
    -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](*(_QWORD **)(a1 + 40), v5);
    objc_msgSend(*(id *)(a1 + 40), "_didMoveFromWindow:toWindow:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "_needsDoubleUpdateConstraintsPass") & 1) != 0)
  {
    LODWORD(v6) = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 104);
      if ((v8 & 0x1000000000000) != 0)
      {
        objc_msgSend(*(id *)(a1 + 40), "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
        v8 = *(_QWORD *)(v7 + 104);
      }
      v6 = (v8 >> 47) & 1;
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  v9 = *(void **)(a1 + 56);
  if (v9)
  {
    v10 = *(void **)(a1 + 40);
    if (*(_QWORD *)(a1 + 64) && v10 && !__disablePromoteDescendantToFirstResponderCount)
    {
      objc_msgSend(v10, "_promoteSelfOrDescendantToFirstResponderIfNecessary");
      v9 = *(void **)(a1 + 56);
      v10 = *(void **)(a1 + 40);
    }
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 32);
    _UIViewVisitorEntertainAscendingTrackingVisitors(v9, (uint64_t)v10, v11, v12);
    _UIViewVisitorEntertainDescendingTrackingVisitors(v9, (uint64_t)v10, v11, v12);
    if ((_DWORD)v6)
      -[UIView _informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass](*(_QWORD *)(a1 + 40));
    if (dyld_program_sdk_at_least())
    {
      v13 = *(_QWORD *)(a1 + 64);
      if (v13 && v13 == *(_QWORD *)(a1 + 48))
        -[UIView _handleTraitChangeForHierarchyChangeWithBehavior:](*(_QWORD *)(a1 + 40), 0);
      goto LABEL_40;
    }
    -[UIView __viewDelegate](*(id **)(a1 + 40));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      objc_msgSend(v14, "traitCollection");
      v16 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "_lastNotifiedTraitCollection");
      v17 = objc_claimAutoreleasedReturnValue();
      if (v16 | v17)
      {
        v18 = (id)v17;
        if ((objc_msgSend((id)v16, "isEqual:", v17) & 1) == 0)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) |= 0x800000000000uLL;
          objc_msgSend(*(id *)(a1 + 40), "setNeedsLayout");
        }
      }
      else
      {
        v18 = 0;
        v16 = 0;
      }
      goto LABEL_38;
    }
    _traitCollectionIfValid(*(void **)(a1 + 56));
    v16 = objc_claimAutoreleasedReturnValue();
    if (!v16)
    {
LABEL_39:

      goto LABEL_40;
    }
    _traitCollectionIfValid(*(void **)(a1 + 32));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v19)
    {
      +[UITraitCollection _defaultTraitCollection]();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v20 = (id)v16;
    v18 = v19;
    v21 = v20;
    v16 = (uint64_t)v21;
    if (v18 == v21)
    {

    }
    else
    {
      if (v18)
      {
        v22 = objc_msgSend(v18, "isEqual:", v21);

        if ((v22 & 1) != 0)
          goto LABEL_37;
      }
      else
      {

      }
      -[UIView _processChangesFromOldTraits:toCurrentTraits:withBehavior:](*(void **)(a1 + 40), v18, (void *)v16, 3);
    }
LABEL_37:

LABEL_38:
    goto LABEL_39;
  }
LABEL_40:
  v23 = *(_QWORD *)(a1 + 32);
  if ((_DWORD)v6 && v23)
  {
    do
    {
      if ((*(_QWORD *)(v23 + 104) & 0x1000000000000) != 0)
        break;
      v24 = *(_QWORD *)(v23 + 112);
      v25 = *(_DWORD *)(v23 + 120);
      *(_QWORD *)(v23 + 104) |= 0x1000000000000uLL;
      *(_QWORD *)(v23 + 112) = v24;
      *(_DWORD *)(v23 + 120) = v25;
      v23 = objc_msgSend((id)v23, "superview");
    }
    while (v23);
    v23 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend((id)v23, "_mutableLayoutArrangements");
  v26 = (id)objc_claimAutoreleasedReturnValue();
  if (v26)
    objc_msgSend(v26, "makeObjectsPerformSelector:withObject:", sel_removeItem_, *(_QWORD *)(a1 + 40));
  -[UIView _backing_didMoveToSuperView](*(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 40), "_didMoveFromSuperview:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "movedFromSuperview:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "didMoveToSuperview");

}

- (BOOL)_needsDoubleUpdateConstraintsPass
{
  uint64_t viewFlags;
  uint64_t v4;
  unint64_t v5;

  viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x400000000000000) != 0)
  {
    if (-[UIView _axesForDerivingIntrinsicContentSizeFromLayoutSize](self, "_axesForDerivingIntrinsicContentSizeFromLayoutSize"))
    {
      LOBYTE(v4) = -[UIView _layoutHeightDependsOnWidth](self, "_layoutHeightDependsOnWidth");
      return v4;
    }
    viewFlags = (uint64_t)self->_viewFlags;
  }
  if ((viewFlags & 0x20000000000000) != 0)
  {
    LODWORD(v4) = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
    if ((_DWORD)v4)
    {
      v5 = (unint64_t)self->_viewFlags;
      if ((v5 & 0x1000000000000) != 0)
      {
        -[UIView _recalculateStrictDescendantNeedsDoubleUpdateConstraints](self, "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
        v5 = (unint64_t)self->_viewFlags;
      }
      return (v5 >> 47) & 1;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (void)_parentalLayoutEngineDidChangeTo:(id)a3
{
  uint64_t viewFlags;

  viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x80000000000) != 0)
  {
    if ((viewFlags & 0x20000000000000) != 0)
    {
      if (objc_msgSend(-[UIView _contentSizeConstraints](self), "count"))
        -[UIView addConstraints:](-[UIView superview](self, "superview"), "addConstraints:", -[UIView _contentSizeConstraints](self));
    }
  }
  else
  {
    -[UIView _switchToLayoutEngine:](self, "_switchToLayoutEngine:", a3);
  }
}

- (void)_switchToLayoutEngine:(id)a3
{
  NSISEngine *v5;
  NSISEngine *v6;
  id v7;
  NSISEngine *v8;
  NSISEngine *v9;
  uint64_t v10;
  uint64_t v11;
  void *(*v12)(uint64_t);
  void *v13;
  NSISEngine *v14;
  UIView *v15;
  id v16;
  id v17;

  v5 = -[UIView _layoutEngine](self, "_layoutEngine");
  if (v5 != a3)
  {
    v6 = v5;
    if (!self || !a3 || (*(_QWORD *)&self->_viewFlags & 0x1000) == 0)
    {
      v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      -[UIView _accumulateViewConstraintsIntoArray:](self, "_accumulateViewConstraintsIntoArray:", v7);
      v8 = v6;
      v10 = MEMORY[0x1E0C809B0];
      v11 = 3221225472;
      v12 = __57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke;
      v13 = &unk_1E16C70A0;
      v14 = v6;
      v15 = self;
      v16 = v7;
      v17 = a3;
      if (self)
      {
        v9 = -[UIView _layoutEngine](self, "_layoutEngine", v10, v11, v12, v13, v14, v15, v16, v17);
        if (v9)
          -[NSISEngine withAutomaticOptimizationDisabled:](v9, "withAutomaticOptimizationDisabled:", &v10);
        else
          __57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke((uint64_t)&v10);
      }

    }
  }
}

- (uint64_t)_backing_didMoveToSuperView
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  if (result)
  {
    v1 = result;
    -[UIView _updateAutomaticCaptureGroupIfNecessary](result);
    v2 = *(_QWORD *)(v1 + 176);
    if (v2)
      v3 = *(void **)(v2 + 40);
    else
      v3 = 0;
    return objc_msgSend(v3, "didMoveToSuperview");
  }
  return result;
}

- (void)_updateAutomaticCaptureGroupIfNecessary
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 176);
    v3 = v2 ? *(void **)(v2 + 40) : 0;
    objc_msgSend(v3, "backgroundEffects");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "count");

    if (v5)
    {
      if ((*(_BYTE *)(a1 + 129) & 0x10) == 0)
      {
        if (objc_msgSend((id)a1, "_backgroundMergeBehavior") == 1)
        {
          -[_UICollectionLayoutItemSolver setSolveResult:](*(_QWORD *)(a1 + 176), 0);
          objc_msgSend((id)a1, "mt_captureGroupName");
          v6 = objc_claimAutoreleasedReturnValue();
          v7 = *(_QWORD *)(a1 + 176);
          if (v7)
            v8 = *(void **)(v7 + 40);
          else
            v8 = 0;
          v13 = (id)v6;
          objc_msgSend(v8, "_setCaptureGroupName:", v6);
        }
        else
        {
          objc_msgSend((id)a1, "superview");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if (v9)
          {
            v10 = v9;
            while (!objc_msgSend(v10, "_hasBackgroundMaterial"))
            {
              objc_msgSend(v10, "superview");
              v11 = objc_claimAutoreleasedReturnValue();

              v10 = (void *)v11;
              if (!v11)
              {
                v9 = 0;
                goto LABEL_21;
              }
            }
            v14 = v10;
            if (objc_msgSend((id)a1, "_backgroundMergeBehavior") == 2
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              objc_msgSend(v14, "mt_captureGroupName");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              -[UIView _mt_setCaptureGroupName:]((uint64_t *)a1, v12);

            }
            v9 = v14;
          }
LABEL_21:
          v13 = v9;

        }
      }
    }
  }
}

- (unint64_t)_axesForDerivingIntrinsicContentSizeFromLayoutSize
{
  return 0;
}

- (void)_recursivelyUpdateCachedWindowForMoveToWindow:(_QWORD *)a1
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    a1[10] = a2;
    if ((a1[14] & 0x200000) != 0)
    {
      objc_msgSend(a1, "_maskView");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](v4, a2);

    }
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    -[UIView _backing_sublayers]((uint64_t)a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v13;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v5);
          v10 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9), "unsafeUnretainedDelegate", (_QWORD)v12);
          if (v10)
          {
            v11 = v10;
            if (_IsKindOfUIView((uint64_t)v10))
              -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](v11, a2);
          }
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v7);
    }

  }
}

- (void)_addSubview:(id)a3 positioned:(int64_t)a4 relativeTo:(id)a5
{
  char *v9;
  UIView *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  id v25;
  unint64_t v26;
  NSObject *v27;
  void *v28;
  int v29;
  id v30;
  void *v31;
  void *v32;
  CALayer *v33;
  int *v34;
  CALayer *v35;
  _QWORD *v36;
  void *v37;
  CALayer *v38;
  void *v39;
  BOOL v40;
  _BOOL4 v41;
  id v42;
  id v43;
  id v44;
  _BOOL4 v45;
  void *v46;
  NSMapTable *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t k;
  _QWORD *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t m;
  UIView *v63;
  UIView *v64;
  void *v65;
  UIView *v66;
  UIView *v67;
  UIView *v68;
  void *v69;
  UIView *v70;
  __int128 v71;
  UIView *v72;
  void *v73;
  unint64_t v74;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  _QWORD *v80;
  void *v81;
  id v82;
  id obj;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  UIView *v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[128];
  uint8_t v114[128];
  uint8_t buf[4];
  void *v116;
  __int16 v117;
  UIView *v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (!a3 || a4 <= -2 && !a5)
    return;
  if (self == a3)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Can't add self as subview"));
  v9 = (char *)a3 + 104;
  *(_QWORD *)((char *)a3 + 124) &= ~0x800000000000uLL;
  v10 = (UIView *)(id)objc_msgSend(a3, "superview");
  v11 = (id)objc_msgSend(a3, "window");
  if (qword_1EDDCA8B8 != -1)
    dispatch_once(&qword_1EDDCA8B8, &__block_literal_global_3390);
  v12 = self;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    -[UIView window](self, "window");
    v12 = (id)objc_claimAutoreleasedReturnValue();

  }
  v13 = 0;
  if (self && !__disablePromoteDescendantToFirstResponderCount)
  {
    if (objc_msgSend(a3, "_isAncestorOfFirstResponder"))
    {
      objc_msgSend(v11, "_firstResponder");
      v13 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v13 = 0;
    }
  }
  v80 = a5;
  v77 = v12;
  v78 = v11;
  if (v10 == self)
  {
    obj = 0;
  }
  else
  {
    if (v12 != v11)
    {
      objc_msgSend(a3, "setViewTraversalMark:", 1);
      objc_msgSend(a3, "_willMoveToWindow:withAncestorView:", v12, self);
      objc_msgSend(a3, "_makeSubtreePerformSelector:withObject:withObject:copySublayers:", sel__willMoveToWindow_withAncestorView_, v12, self, 1);
      objc_msgSend(a3, "setViewTraversalMark:", 0);
    }
    -[UIView _willRemoveSubview:](v10, "_willRemoveSubview:", a3);
    v14 = *((_QWORD *)a3 + 22);
    if (v14)
      v15 = *(void **)(v14 + 40);
    else
      v15 = 0;
    objc_msgSend(v15, "willMoveToSuperview:", self);
    objc_msgSend(a3, "willMoveToSuperview:", self);
    if ((*(_QWORD *)v9 & 0x400000000000000) != 0)
      -[UIView _constraints_subviewWillChangeSuperview:](v10, "_constraints_subviewWillChangeSuperview:", a3);
    v16 = v13;
    -[UIView _removeParentGeometryObservers](a3);
    objc_msgSend(v11, "_subtreeMonitorsForView:", a3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_subtreeMonitorsForView:", self);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v17)
    {
      objc_msgSend(v17, "setByAddingObjectsFromSet:", v18);
      v20 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v20 = v18;
    }
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    obj = v20;
    v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v114, 16);
    v13 = v16;
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v106;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v106 != v23)
            objc_enumerationMutation(obj);
          objc_msgSend(*(id *)(*((_QWORD *)&v105 + 1) + 8 * i), "_monitoredView:willMoveFromSuperview:toSuperview:", a3, v10, self);
        }
        v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v105, v114, 16);
      }
      while (v22);
    }

    objc_msgSend(a3, "_unsubscribeToScrollNotificationsIfNecessary:", v10);
    objc_msgSend(a3, "_makeSubtreePerformSelector:withObject:", sel__unsubscribeToScrollNotificationsIfNecessary_, v10);
    v9 = (char *)a3 + 104;
    if (v13)
    {
      if (v77)
        __addingResponderToTree = 1;
      objc_msgSend(v78, "_setFirstResponder:", 0);
    }

  }
  if (_UIIsPrivateMainBundle())
  {
    -[UIView maskView](self, "maskView");
    v25 = (id)objc_claimAutoreleasedReturnValue();

    if (v25 != a3)
      goto LABEL_49;
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v27 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        goto LABEL_148;
      -[UIView maskView](self, "maskView");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v116 = v28;
      v117 = 2112;
      v118 = self;
      goto LABEL_147;
    }
    v26 = qword_1EDDCA7B0;
    if (!qword_1EDDCA7B0)
    {
      v26 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v26, (unint64_t *)&qword_1EDDCA7B0);
    }
    v27 = *(id *)(v26 + 8);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_148;
    -[UIView maskView](self, "maskView");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v116 = v28;
    v117 = 2112;
    v118 = self;
LABEL_146:
LABEL_147:

    goto LABEL_148;
  }
  v29 = dyld_program_sdk_at_least();
  -[UIView _safeMaskView](self);
  v30 = (id)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    if (v30 != a3)
      goto LABEL_49;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v27 = objc_claimAutoreleasedReturnValue();
    -[UIView _safeMaskView](self);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_149;
  }
  if (v30 != a3)
    goto LABEL_49;
  v74 = qword_1EDDCA7B8;
  if (!qword_1EDDCA7B8)
  {
    v74 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v74, (unint64_t *)&qword_1EDDCA7B8);
  }
  v27 = *(id *)(v74 + 8);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    -[UIView _safeMaskView](self);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v116 = v28;
    v117 = 2112;
    v118 = self;
    goto LABEL_146;
  }
LABEL_148:
  v9 = (char *)a3 + 104;
LABEL_149:

LABEL_49:
  -[UIView _backing_outermostLayer](a3);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "superlayer");
  v33 = (CALayer *)objc_claimAutoreleasedReturnValue();
  v34 = &OBJC_IVAR____UIViewFittingSizeTargetInfo__verticalPriority;
  v35 = self->_layer;
  if (v33 == v35)
  {
    -[UIView _backing_outermostLayer](a3);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = self->_layer;
    -[CALayer mask](v38, "mask");
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = v37 == v39;
    v34 = &OBJC_IVAR____UIViewFittingSizeTargetInfo__verticalPriority;
    v36 = v80;
    v9 = (char *)a3 + 104;
    if (!v40)
      goto LABEL_54;
  }
  else
  {

    v36 = v80;
  }
  -[UIView _backing_outermostLayer](a3);
  objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "removeFromSuperlayer");
  if (v10 == self)
  {
    -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");
    goto LABEL_58;
  }
  -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)v10);
LABEL_54:
  -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");
  v41 = v10 == 0;
  if (!v10 || v10 == self)
    goto LABEL_59;
  _UIViewVisitorEntertainAscendingTrackingVisitors(v10, (uint64_t)a3, (uint64_t)v78, (uint64_t)v10);
  _UIViewVisitorEntertainDescendingTrackingVisitors(v10, (uint64_t)a3, (uint64_t)v78, (uint64_t)v10);
LABEL_58:
  v41 = 0;
LABEL_59:
  switch(a4)
  {
    case -3:
      if ((objc_msgSend(v36, "__isKindOfUIView") & 1) == 0)
        v36 = 0;
      -[UIView _backing_insertSubview:belowSubview:]((uint64_t)self, a3, v36);
      break;
    case -2:
      if ((objc_msgSend(v36, "__isKindOfUIView") & 1) == 0)
        v36 = 0;
      -[UIView _backing_insertSubview:aboveSubview:]((uint64_t)self, a3, v36);
      break;
    case -1:
      -[UIView _backing_addSubview:]((uint64_t)self, a3);
      break;
    default:
      if ((a4 & 0x8000000000000000) == 0)
      {
        v42 = *(id *)((char *)a3 + v34[639]);
        objc_msgSend(v42, "superlayer");
        v43 = (id)objc_claimAutoreleasedReturnValue();
        v44 = *(id *)((char *)&self->super.super.isa + v34[639]);
        if (v43 == v44)
        {
          CLIENT_LAYER((uint64_t)self);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v81, "sublayers");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          CLIENT_LAYER((uint64_t)a3);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = objc_msgSend(v79, "indexOfObject:", v76) < (unint64_t)a4;

        }
        else
        {
          v45 = 0;
        }

        -[UIView _backing_insertSubview:atIndex:]((uint64_t)self, a3, a4 + v45);
        v9 = (char *)a3 + 104;
        v34 = &OBJC_IVAR____UIViewFittingSizeTargetInfo__verticalPriority;
      }
      break;
  }
  *(_QWORD *)v9 |= 0x8000000uLL;
  if (v41)
  {
    objc_setAssociatedObject(objc_retainAutorelease(*(id *)((char *)a3 + v34[639])), &unk_1EDDCA61C, a3, (void *)1);
    v46 = (void *)*((_QWORD *)a3 + 8);
    *((_QWORD *)a3 + 8) = 0;

    -[UIBackgroundConfiguration _setCustomView:](*((_QWORD *)a3 + 22), 0);
  }
  objc_msgSend(a3, "_subscribeToScrollNotificationsIfNecessary:", self);
  objc_msgSend(a3, "_makeSubtreePerformSelector:withObject:", sel__subscribeToScrollNotificationsIfNecessary_, self);
  if (v10 != self)
    -[UIView _invalidateSubviewCache](v10, "_invalidateSubviewCache");
  if ((*(_QWORD *)v9 & 0x400000000000000) != 0)
    -[UIView _setSubviewWantsAutolayoutTripWantsAutolayout:](self, "_setSubviewWantsAutolayoutTripWantsAutolayout:", objc_msgSend(a3, "_hostsLayoutEngine") ^ 1);
  if (v10 != self)
  {
    if ((*((_QWORD *)v9 + 1) & 0x8000000000000000) != 0)
    {
      v82 = v13;
      objc_getAssociatedObject(a3, &_UIGeometryObserversKey);
      v47 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
      v109 = 0u;
      v110 = 0u;
      v111 = 0u;
      v112 = 0u;
      v48 = -[NSMapTable countByEnumeratingWithState:objects:count:](v47, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
      if (v48)
      {
        v49 = v48;
        v50 = *(_QWORD *)v110;
        do
        {
          for (j = 0; j != v49; ++j)
          {
            if (*(_QWORD *)v110 != v50)
              objc_enumerationMutation(v47);
            v52 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * j);
            v53 = (uint64_t)NSMapGet(v47, v52);
            if (v53 >= 1)
            {
              if (v53 <= 1)
                v54 = 1;
              else
                v54 = v53;
              do
              {
                objc_msgSend(a3, "superview");
                v55 = (_QWORD *)objc_claimAutoreleasedReturnValue();
                -[UIView _addGeometryChangeObserver:](v55, v52);

                --v54;
              }
              while (v54);
            }
          }
          v49 = -[NSMapTable countByEnumeratingWithState:objects:count:](v47, "countByEnumeratingWithState:objects:count:", &v109, buf, 16);
        }
        while (v49);
      }

      v13 = v82;
      v9 = (char *)a3 + 104;
    }
    for (k = ((unint64_t)*((unsigned int *)v9 + 4) >> 2) & 0xF; k; --k)
    {
      objc_msgSend(a3, "superview");
      v57 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      -[UIView _addGeometryChangeObserver:](v57, a3);

    }
    if (v13)
    {
      objc_msgSend(v77, "_setFirstResponder:", v13);
      if (v77)
        __addingResponderToTree = 0;
    }
    -[UIView _postMovedFromSuperview:](a3, v10);
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v58 = obj;
    v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v101, v113, 16);
    if (v59)
    {
      v60 = v59;
      v61 = *(_QWORD *)v102;
      do
      {
        for (m = 0; m != v60; ++m)
        {
          if (*(_QWORD *)v102 != v61)
            objc_enumerationMutation(v58);
          objc_msgSend(*(id *)(*((_QWORD *)&v101 + 1) + 8 * m), "_monitoredView:didMoveFromSuperview:toSuperview:", a3, v10, self);
        }
        v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v101, v113, 16);
      }
      while (v60);
    }

    _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(a3, &__block_literal_global_972_1);
  }
  objc_msgSend(a3, "movedToSuperview:", self);
  -[UIView didAddSubview:](self, "didAddSubview:", a3);
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0
    || (*(_QWORD *)v9 & 0x400000000000000) != 0 && -[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine"))
  {
    if (v10 != self)
      -[UIView _invalidateAutoresizingConstraints]((uint64_t)a3);
    -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
  }
  if ((_UIViewShowAlignmentRects() & 1) != 0
    || +[UIView _toolsDebugAlignmentRects](UIView, "_toolsDebugAlignmentRects"))
  {
    -[UIView _alignmentDebuggingOverlayCreateIfNecessary:](self, "_alignmentDebuggingOverlayCreateIfNecessary:", 0);
    v63 = (UIView *)objc_claimAutoreleasedReturnValue();
    v64 = v63;
    if (v63 && v63 != self)
    {
      -[UIView subviews](self, "subviews");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "lastObject");
      v66 = (UIView *)objc_claimAutoreleasedReturnValue();

      if (v64 != v66)
        -[UIView bringSubviewToFront:](self, "bringSubviewToFront:", v64);

    }
  }
  else if ((*((_QWORD *)&self->_viewFlags + 1) & 0x10000000000000) != 0)
  {
    _UIViewRecursivelyRemoveDebugAlignmentViews(self);
  }
  if (+[UIView _toolsDebugColorViewBounds](UIView, "_toolsDebugColorViewBounds"))
  {
    -[UIView _colorViewBoundsOverlayCreateIfNecessary:](self, "_colorViewBoundsOverlayCreateIfNecessary:", 0);
    v67 = (UIView *)objc_claimAutoreleasedReturnValue();
    v68 = v67;
    if (v67)
    {
      if (v67 != self)
      {
        -[UIView subviews](self, "subviews");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "lastObject");
        v70 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (v68 != v70)
          -[UIView bringSubviewToFront:](self, "bringSubviewToFront:", v68);
      }
    }

  }
  else if ((*((_QWORD *)&self->_viewFlags + 1) & 0x8000000000000) != 0)
  {
    -[UIView _removeColorViewBoundsOverlays](self, "_removeColorViewBoundsOverlays");
  }
  if (objc_msgSend(a3, "_drawsAsBackdropOverlay"))
  {
    *((_QWORD *)&v71 + 1) = *((unsigned int *)v9 + 4);
    *(_QWORD *)&v71 = *((_QWORD *)v9 + 1);
    objc_msgSend(a3, "_setDrawsAsBackdropOverlayWithBlendMode:", (unint64_t)(v71 >> 33) & 3);
  }
  if (v10 != self)
  {
    if (*((_DWORD *)v9 + 4) & 0x3C | *((_QWORD *)v9 + 1) & 0x8000000000000000)
    {
      v72 = v10;
      v97 = 0;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v95 = 0u;
      v96 = 0u;
      v99 = 0u;
      v84 = 16;
      v100 = 0;
      v98 = v72;
      -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)a3, &v84);

    }
    objc_msgSend(a3, "_updateCombinedInsetsIfNecessary");
    if (-[UIView _shouldInformFocusAboutBecomingVisible](self, "_shouldInformFocusAboutBecomingVisible"))
    {
      if (objc_msgSend(a3, "_shouldInformFocusAboutBecomingVisible"))
      {
        objc_msgSend(a3, "_focusSystem");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v73, "_focusEnvironmentDidAppear:", a3);

      }
    }
  }

}

- (void)_makeSubtreePerformSelector:(SEL)a3 withObject:(id)a4 withObject:(id)a5 copySublayers:(BOOL)a6
{
  _makeSubTreePerformSelector(self, a3, (uint64_t)a4, (uint64_t)a5, a6);
}

- (void)_makeSubtreePerformSelector:(SEL)a3 withObject:(id)a4
{
  -[UIView _makeSubtreePerformSelector:withObject:withObject:copySublayers:](self, "_makeSubtreePerformSelector:withObject:withObject:copySublayers:", a3, a4, 0, 0);
}

- (_QWORD)_findFirstSubviewWantingToBecomeFirstResponder
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 168), "sublayers");
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v1 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v24 != v4)
          objc_enumerationMutation(v1);
        v6 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "unsafeUnretainedDelegate");
        if (v6 && (v7 = v6, _IsKindOfUIView((uint64_t)v6)))
        {
          v8 = v7;
          if ((v8[13] & 0x800) != 0)
            goto LABEL_29;
        }
        else
        {
          v8 = 0;
        }

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v3);
  }

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v9 = v1;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
LABEL_16:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v20 != v12)
        objc_enumerationMutation(v9);
      v14 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v13), "unsafeUnretainedDelegate", (_QWORD)v19);
      if (v14)
      {
        v15 = v14;
        v16 = _IsKindOfUIView((uint64_t)v14) ? v15 : 0;
      }
      else
      {
        v16 = 0;
      }
      v17 = v16;
      -[UIView _findFirstSubviewWantingToBecomeFirstResponder]();
      v8 = (_QWORD *)objc_claimAutoreleasedReturnValue();

      if (v8)
        break;
      if (v11 == ++v13)
      {
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        v8 = 0;
        if (v11)
          goto LABEL_16;
        break;
      }
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_29:

  return v8;
}

- (BOOL)__isKindOfUIView
{
  return 1;
}

- (UIView)_maskView
{
  void *v2;
  void *v3;

  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x200000) != 0)
  {
    objc_getAssociatedObject(self, &_UIMaskViewKey);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "maskView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return (UIView *)v2;
}

- (void)setViewTraversalMark:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x10000000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFEFFFFFFFFFFLL | v3;
}

- (BOOL)viewTraversalMark
{
  return (*(_QWORD *)&self->_viewFlags >> 40) & 1;
}

- (void)_subscribeToScrollNotificationsIfNecessary:(id)a3
{
  id v4;

  if ((*(_QWORD *)&self->_viewFlags & 8) != 0)
  {
    __scrollViewAncestorOfView(a3, 0);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_addScrollViewScrollObserver:", self);

  }
}

- (void)_unsubscribeToScrollNotificationsIfNecessary:(id)a3
{
  id v4;
  void *i;
  void *v6;
  id v7;

  v7 = a3;
  if ((*(_QWORD *)&self->_viewFlags & 8) != 0)
  {
    v4 = v7;
    for (i = v4; ; v4 = i)
    {
      __scrollViewAncestorOfView(v4, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        break;
      objc_msgSend(v6, "_removeScrollViewScrollObserver:", self);
      objc_msgSend(v6, "superview");
      i = (void *)objc_claimAutoreleasedReturnValue();

    }
  }

}

- (void)_backing_invalidateSubviewCache
{
  void *v2;

  if (a1)
  {
    v2 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;

    -[UIContentUnavailableImageProperties _setTintColor:](*(_QWORD *)(a1 + 176), 0);
  }
}

- (void)_synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable
{
  void *v2;

  if (a1 && objc_msgSend(*(id *)(a1 + 168), "needsLayout"))
  {
    +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "didSendSetNeedsLayoutToLayerOfView:", a1);

    if ((*(_QWORD *)(a1 + 104) & 0x800000000000000) != 0)
      objc_msgSend((id)a1, "_is_setNeedsLayout");
  }
}

- (void)setAlpha:(CGFloat)alpha
{
  double v5;
  unint64_t v6;
  int v7;
  void *v8;

  v5 = -[UIView _backing_alpha]((uint64_t)self);
  v6 = -[UIView _countOfMotionEffectsInSubtree](self, "_countOfMotionEffectsInSubtree");
  -[UIView _backing_setAlpha:]((uint64_t)self, alpha);
  if (v6)
  {
    if (alpha < 0.01 || v5 >= 0.01)
    {
      if (self && alpha < 0.01 && v5 >= 0.01)
        _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(self, &__block_literal_global_970);
    }
    else
    {
      -[UIView _recursivelyConsiderResumingMotionEffects](self);
    }
  }
  v7 = (alpha < 0.01) ^ (v5 < 0.01);
  if (_UIViewNotifiesFocusEngineForAlphaAndHiddenChanges() && v7)
  {
    if (alpha >= 0.01)
    {
      if (!-[UIView _shouldInformFocusAboutBecomingVisible](self, "_shouldInformFocusAboutBecomingVisible"))
        goto LABEL_16;
      -[UIView _focusSystem](self, "_focusSystem");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_focusEnvironmentDidBecomeVisible:", self);
    }
    else
    {
      -[UIView _focusSystem](self, "_focusSystem");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_focusEnvironmentWillBecomeInvisible:", self);
    }

  }
LABEL_16:
  if (v5 != alpha)
    +[UIFocusRingManager updateRingForFocusItem:](UIFocusRingManager, "updateRingForFocusItem:", self);
  if (v7)
    _UIViewNotifyPhysicalButtonArbiterOfEffectiveVisibilityChangeIfNeeded(self);
}

- (unint64_t)_countOfMotionEffectsInSubtree
{
  void *v2;
  unint64_t v3;

  objc_getAssociatedObject(self, &_UIViewCountOfMotionEffectsInSubtreeAssocObjectKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedIntegerValue");

  return v3;
}

- (double)_backing_alpha
{
  uint64_t v2;
  id v3;
  void *v4;
  float v5;
  double v6;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2 || (v3 = *(id *)(v2 + 8), (v4 = v3) == 0))
  {
    v4 = 0;
    v3 = *(id *)(a1 + 168);
  }
  objc_msgSend(v3, "opacity");
  v6 = v5;

  return v6;
}

- (void)_backing_setAlpha:(uint64_t)a1
{
  float v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;

  if (a1)
  {
    v3 = a2;
    v4 = *(_QWORD *)(a1 + 176);
    if (!v4 || (v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
    {
      v6 = 0;
      v5 = *(id *)(a1 + 168);
    }
    v7 = v6;
    *(float *)&a2 = v3;
    objc_msgSend(v5, "setOpacity:", a2);

  }
}

- (BOOL)isFocused
{
  UIView *v2;
  void *v3;
  UIView *v4;

  v2 = self;
  -[UIView _focusSystem](self, "_focusSystem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_focusedView");
  v4 = (UIView *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = v4 == v2;

  return (char)v2;
}

- (UIFocusSystem)_focusSystem
{
  return +[UIFocusSystem focusSystemForEnvironment:](UIFocusSystem, "focusSystemForEnvironment:", self);
}

- (void)_removeParentGeometryObservers
{
  _QWORD *v2;
  _QWORD *v3;
  NSMapTable *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t j;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (id)objc_msgSend(a1, "superview");
    v3 = a1 + 13;
    if ((a1[14] & 0x8000000000000000) != 0)
    {
      objc_getAssociatedObject(a1, &_UIGeometryObserversKey);
      v4 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v5 = -[NSMapTable countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v14;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v14 != v7)
              objc_enumerationMutation(v4);
            v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
            v10 = (uint64_t)NSMapGet(v4, v9);
            if (v10 >= 1)
            {
              if (v10 <= 1)
                v11 = 1;
              else
                v11 = v10;
              do
              {
                -[UIView _removeGeometryChangeObserver:](v2, v9);
                --v11;
              }
              while (v11);
            }
          }
          v6 = -[NSMapTable countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        }
        while (v6);
      }

      v3 = a1 + 13;
    }
    for (j = ((unint64_t)*((unsigned int *)v3 + 4) >> 2) & 0xF; j; --j)
      -[UIView _removeGeometryChangeObserver:](v2, a1);
  }
}

- (BOOL)_isAncestorOfFirstResponder
{
  return (*(_QWORD *)&self->_viewFlags >> 16) & 1;
}

- (BOOL)_drawsAsBackdropOverlay
{
  return (*((_QWORD *)&self->_viewFlags + 1) & 0x600000000) != 0;
}

- (void)_postMovedFromSuperview:(void *)a1
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  _BOOL4 v14;
  BOOL v15;
  void *v16;
  _QWORD v17[2];
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  _QWORD *v27;

  v3 = a2;
  if (a1)
  {
    v4 = (id)objc_msgSend(a1, "superview");
    objc_msgSend(v4, "_window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
      v5 = __windowForView((uint64_t)a1);
    if (qword_1EDDCA8B8 != -1)
      dispatch_once(&qword_1EDDCA8B8, &__block_literal_global_3390);
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = v3;
    }
    else
    {
      objc_msgSend(v3, "window");
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    v7 = v6;
    v8 = MEMORY[0x1E0C809B0];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v18 = __45__UIView_Hierarchy___postMovedFromSuperview___block_invoke;
    v19 = &unk_1E16EB778;
    v20 = v3;
    v21 = a1;
    v23 = v4;
    v24 = v5;
    v9 = v7;
    v22 = v9;
    v10 = v17;
    v11 = v5;
    objc_msgSend(v9, "_layoutEngineIfAvailable");
    v12 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_layoutEngineIfAvailable");
    v13 = (id)objc_claimAutoreleasedReturnValue();

    if (v12 == v13)
    {

      v15 = 0;
      v13 = 0;
      v14 = v12 != 0;
    }
    else
    {
      v14 = v12 != 0;
      v15 = v13 != 0;
      if (v12 && v13)
      {
        v25[0] = v8;
        v25[1] = 3221225472;
        v25[2] = ___UIInvokeWithWindowsEngineOptimizationDisabled_block_invoke;
        v25[3] = &unk_1E16B1D18;
        v13 = v13;
        v26 = v13;
        v27 = v10;
        objc_msgSend(v12, "withAutomaticOptimizationDisabled:", v25);

LABEL_21:
        goto LABEL_22;
      }
    }
    if (v15 || v14)
    {
      if (v14)
        v16 = v12;
      else
        v16 = v13;
      objc_msgSend(v16, "withAutomaticOptimizationDisabled:", v10);
    }
    else
    {
      v18((uint64_t)v10);
    }
    goto LABEL_21;
  }
LABEL_22:

}

- (id)_ancestorTintColor
{
  void *v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = 0;
    return v4;
  }
  if ((a1[14] & 0x100000000000) != 0
    || (objc_msgSend(a1, "window"), v2 = (void *)objc_claimAutoreleasedReturnValue(), v2, !v2))
  {
    objc_msgSend((id)objc_msgSend(a1, "superview"), "_normalInheritedTintColor");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4)
    {
LABEL_7:
      +[UIView _defaultInteractionTintColorForIdiom:](UIView, "_defaultInteractionTintColorForIdiom:", objc_msgSend((id)objc_msgSend(a1, "_screen"), "_userInterfaceIdiom"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    objc_msgSend(a1, "window");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_normalInheritedTintColor");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
      goto LABEL_7;
  }
  return v4;
}

- (id)_screen
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;

  -[UIView _window](self, "_window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "screen");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;

  return v6;
}

- (UIWindow)window
{
  if (self)
    self = &self->_window->super;
  return (UIWindow *)self;
}

- (int64_t)_userInterfaceIdiom
{
  __int128 v2;
  int64_t v3;

  *((_QWORD *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_viewFlags + 1);
  v3 = (v2 >> 41) & 7;
  if ((v2 & 0x10000000000) != 0)
    return v3;
  else
    return -1;
}

+ (id)_defaultInteractionTintColorForIdiom:(int64_t)a3
{
  void *v3;

  if (a3 == 2 || a3 == 8)
  {
    +[UIColor _tvAppKeyColorOrDefaultTint](UIColor, "_tvAppKeyColorOrDefaultTint");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a3 == 3)
      +[UIColor _alternateSystemInteractionTintColor](UIColor, "_alternateSystemInteractionTintColor");
    else
      +[UIColor _appKeyColorOrDefaultTint]();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

- (BOOL)_definesTintColor
{
  void *v2;
  BOOL v3;

  -[UIView _interactionTintColor](self, "_interactionTintColor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (id)_normalInheritedTintColor
{
  uint64_t v3;
  void *v4;
  void *v6;
  void *v7;
  char *v8;
  void *v9;
  uint64_t v10;

  if (_AXSUseSingleSystemColor())
  {
    _UIAccessibilitySingleSystemColor();
    v3 = objc_claimAutoreleasedReturnValue();
LABEL_3:
    v4 = (void *)v3;
    return v4;
  }
  _UIViewGetInteractionTintColor(self);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    -[UIView _ancestorTintColor](self);
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_3;
  }
  v4 = v6;
  if (objc_msgSend(v6, "_isDynamicTintColor"))
  {
    -[UIView _ancestorTintColor](self);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView traitCollection](self, "traitCollection");
    v8 = (char *)objc_claimAutoreleasedReturnValue();
    -[UITraitCollection _traitCollectionByReplacingTintColor:](v8, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "resolvedColorWithTraitCollection:", v9);
    v10 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v10;
  }
  return v4;
}

- (UIColor)_overrideTintColor
{
  if ((*(_QWORD *)&self->_viewFlags & 0x200) == 0)
    return (UIColor *)0;
  objc_getAssociatedObject(self, &unk_1EDDCA60B);
  return (UIColor *)(id)objc_claimAutoreleasedReturnValue();
}

- (void)_willMoveToWindow:(id)a3 withAncestorView:(id)a4
{
  void *v7;
  UIViewController *viewDelegate;
  id v9;
  void *v10;
  int v11;
  _BOOL8 v12;
  int v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  if (a3)
  {
    if ((*(_QWORD *)&self->_viewFlags & 0x80000000) != 0)
    {
      -[UIView window](self, "window");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        viewDelegate = self->_viewDelegate;
        v9 = -[UIViewController parentViewController](viewDelegate, "parentViewController");
        v10 = v9;
        if (v9 && (objc_msgSend(v9, "_forwardAppearanceMethods") & 1) != 0)
          v11 = 0;
        else
          v11 = !-[UIViewController _forwardAppearanceMethods](viewDelegate, "_forwardAppearanceMethods");
        v12 = -[UIView viewTraversalMark](self, "viewTraversalMark");
        if ((objc_msgSend(a4, "_associatedViewControllerForwardsAppearanceCallbacks:performHierarchyCheck:isRoot:", viewDelegate, v12, v12) & 1) == 0)
        {
          v13 = v11 ^ 1;
          if (v10)
            v13 = 0;
          if (v13 | v12
            || !-[UIView _associatedViewControllerForwardsAppearanceCallbacks:performHierarchyCheck:isRoot:](-[UIView superview](self, "superview"), "_associatedViewControllerForwardsAppearanceCallbacks:performHierarchyCheck:isRoot:", viewDelegate, 1, 0))
          {
            v14 = v10 ? v11 : 1;
            if ((v14 & 1) != 0
              || (objc_msgSend(v10, "_existingView"),
                  v15 = (void *)objc_claimAutoreleasedReturnValue(),
                  objc_msgSend(v15, "window"),
                  v16 = (void *)objc_claimAutoreleasedReturnValue(),
                  v16,
                  v15,
                  v16))
            {
              if (!-[UIViewController inExplicitAppearanceTransition](viewDelegate, "inExplicitAppearanceTransition"))
              {
                if (_UIViewIsAnimating(self))
                {
                  v17 = 1;
                }
                else
                {
                  v18 = _UIAncestorViewIsInTransition(a4, 0);
                  v17 = v18;
                  if (!v10 && !(_DWORD)v18)
                    v17 = _UIAncestorViewControllerIsInAnimatedTransition(self);
                }
                -[UIViewController _parentModalViewController](viewDelegate, "_parentModalViewController");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                if (v19)
                {

                }
                else if (!-[UIViewController isPerformingModalTransition](viewDelegate, "isPerformingModalTransition"))
                {
                  -[UIViewController setInAnimatedVCTransition:](viewDelegate, "setInAnimatedVCTransition:", v17);
                }
              }
              -[UIViewController viewWillMoveToWindow:](viewDelegate, "viewWillMoveToWindow:", a3);
              *(_QWORD *)&self->_viewFlags |= 0x100000000uLL;
            }
          }
        }
        if (v12)
          -[UIView setViewTraversalMark:](self, "setViewTraversalMark:", 0);
      }
    }
  }
  -[UIView _willMoveToWindow:](self, "_willMoveToWindow:", a3, a4);
}

- (void)_snipDangliesWithForce:(BOOL)a3 repairIfPossibleForViewThatMoved:(id)a4 newSuperview:(id)a5 oldSuperview:(id)a6
{
  uint64_t viewFlags;
  uint64_t v11;
  int v12;
  NSArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  id v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t);
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  uint64_t v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x2000) != 0)
    return;
  v11 = *((_QWORD *)&self->_viewFlags + 1);
  v12 = *((_DWORD *)&self->_viewFlags + 4);
  if ((viewFlags & 0x10000000000000) == 0 && !a3)
    return;
  *(_QWORD *)&self->_viewFlags = viewFlags & 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)&self->_viewFlags + 1) = v11;
  *((_DWORD *)&self->_viewFlags + 4) = v12;
  v38 = 0;
  v39 = &v38;
  v40 = 0x3052000000;
  v41 = __Block_byref_object_copy__230;
  v42 = __Block_byref_object_dispose__230;
  v43 = 0;
  v32 = 0;
  v33 = &v32;
  v34 = 0x3052000000;
  v35 = __Block_byref_object_copy__230;
  v36 = __Block_byref_object_dispose__230;
  v37 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v13 = -[UIView _constraintsExceptingSubviewAutoresizingConstraints](self, "_constraintsExceptingSubviewAutoresizingConstraints", a3);
  v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v28, v44, 16);
  if (!v14)
    goto LABEL_20;
  v15 = *(_QWORD *)v29;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v29 != v15)
        objc_enumerationMutation(v13);
      v17 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v20 = __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke;
      v21 = &unk_1E16E9B10;
      v22 = a5;
      v23 = v17;
      v24 = a4;
      v25 = a6;
      v26 = &v38;
      v27 = &v32;
      if (!NSLayoutConstraintIsPotentiallyDanglyInContainer())
      {
        if (self != a5)
          continue;
        goto LABEL_17;
      }
      if (!NSLayoutConstraintIsDanglyInContainer())
      {
        *(_QWORD *)&self->_viewFlags |= 0x10000000000000uLL;
LABEL_17:
        v20((uint64_t)v19);
        continue;
      }
      v18 = (id)v39[5];
      if (!v18)
      {
        v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v39[5] = (uint64_t)v18;
      }
      objc_msgSend(v18, "addObject:", v17);
    }
    v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v28, v44, 16);
  }
  while (v14);
LABEL_20:
  if (v39[5])
  {
    -[UIView removeConstraints:](self, "removeConstraints:");

  }
  if (v33[5])
  {
    -[UIView addConstraints:](self, "addConstraints:");

  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v38, 8);
}

uint64_t __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke(uint64_t result)
{
  uint64_t v1;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  id v8[4];
  __int128 v9;
  uint64_t v10;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    result = objc_msgSend(*(id *)(result + 40), "firstAttribute");
    if (result <= 0x25 && ((1 << result) & 0x3F001FFE7FLL) != 0)
    {
      result = *(_QWORD *)(v1 + 40);
      if (result)
      {
        result = objc_msgSend((id)objc_msgSend((id)result, "secondItem"), "_referenceView");
        if (result)
        {
          v8[0] = (id)MEMORY[0x1E0C809B0];
          v8[1] = (id)3221225472;
          v8[2] = __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke_2;
          v8[3] = &unk_1E16E9AE8;
          v9 = *(_OWORD *)(v1 + 48);
          v3 = *(void **)(v1 + 40);
          v10 = *(_QWORD *)(v1 + 32);
          v4 = v3 ? (void *)objc_msgSend((id)objc_msgSend(v3, "firstItem"), "_referenceView") : 0;
          v5 = __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke_2(v8, v4);
          v6 = *(void **)(v1 + 40);
          v7 = v6 ? (void *)objc_msgSend((id)objc_msgSend(v6, "secondItem"), "_referenceView") : 0;
          result = __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke_2(v8, v7);
          if (v5 != (_DWORD)result)
          {
            if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40))
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40) = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 40))
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 40) = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 8) + 40), "addObject:", *(_QWORD *)(v1 + 40));
            return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8) + 40), "addObject:", *(_QWORD *)(v1 + 40));
          }
        }
      }
    }
  }
  return result;
}

- (void)_prepareForWindowHostingSceneRemoval
{
  objc_msgSend((id)UIApp, "_cancelGestureRecognizersForView:", self);
}

- (void)_prepareForWindowDealloc
{
  self->_window = 0;
  *(_QWORD *)&self->_viewFlags |= 0x4000uLL;
}

BOOL __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke_2(id *a1, id a2)
{
  BOOL v4;
  NSObject *v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!os_variant_has_internal_diagnostics())
  {
    if (a2)
      goto LABEL_3;
    v9 = UILayoutFittingExpandedSize_block_invoke_14___s_category;
    if (!UILayoutFittingExpandedSize_block_invoke_14___s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&UILayoutFittingExpandedSize_block_invoke_14___s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = objc_msgSend(a1[4], "nsli_description");
      v12 = a1[4];
      v13 = 138412546;
      v14 = v11;
      v15 = 2112;
      v16 = v12;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "Internal NSLayoutConstraint clean-up problem after view moved leafward in the hierarchy: %@: %@", (uint8_t *)&v13, 0x16u);
    }
    return 0;
  }
  if (!a2)
  {
    v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v7 = objc_msgSend(a1[4], "nsli_description");
      v8 = a1[4];
      v13 = 138412546;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Internal NSLayoutConstraint clean-up problem after view moved leafward in the hierarchy: %@: %@", (uint8_t *)&v13, 0x16u);
    }
    return 0;
  }
LABEL_3:
  v4 = 0;
  do
  {
    if (a2 == a1[5])
      break;
    if (a2 == a1[6] || v4)
      break;
    v4 = a2 == a1[4];
    a2 = (id)objc_msgSend(a2, "superview");
  }
  while (a2);
  return v4;
}

- (void)_recalculateStrictDescendantNeedsDoubleUpdateConstraints
{
  uint64_t v3;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = __Block_byref_object_copy__230;
  v9 = __Block_byref_object_dispose__230;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __91__UIView_AdditionalLayoutSupport___recalculateStrictDescendantNeedsDoubleUpdateConstraints__block_invoke;
  v4[3] = &unk_1E16E9AA0;
  v4[4] = self;
  v4[5] = &v5;
  _UIViewTopDownSubtreeTraversal((uint64_t)self, v4, &__block_literal_global_398_2);
  v3 = v6[5];
  if (v3)
    -[UIView _informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass](v3);
  else
    *(_QWORD *)&self->_viewFlags &= 0xFFFE7FFFFFFFFFFFLL;
  _Block_object_dispose(&v5, 8);
}

void __75__UIView_InProcessAnimations_Internal__stopSettingPresentationValueForKey___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(*(id *)(a1 + 32), "presentationModifierForKey:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    objc_msgSend(*(id *)(a1 + 32), "setPresentationModifier:forKey:", 0, *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "modifierGroupRequestHandlerForKey:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;
    +[UIViewInProcessAnimationManager _cancelPresentationModifierGroupRequest:](UIViewInProcessAnimationManager, "_cancelPresentationModifierGroupRequest:", v5);
    objc_msgSend(*(id *)(a1 + 32), "setModifierGroupRequestHandler:forKey:", 0, *(_QWORD *)(a1 + 40));
    v5 = v6;
  }

}

uint64_t __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_3(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setPresentationModifier:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "setModifierGroupRequestHandler:forKey:", 0, *(_QWORD *)(a1 + 40));
}

void __71__UIView_InProcessAnimations_Internal__animationInfoCreateIfNecessary___block_invoke(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  _QWORD *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)WeakRetained[5];
    WeakRetained[5] = 0;
    v3 = WeakRetained;

    WeakRetained = v3;
  }

}

- (id)_appearanceContainer
{
  void *v3;
  void *v4;
  id v5;
  void *v6;

  +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    -[UIView superview](self, "superview");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;

  return v6;
}

+ (BOOL)_preventsAppearanceProxyCustomization
{
  return 0;
}

void __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  objc_msgSend(*(id *)(a1 + 32), "presentationModifierForKey:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  if (v5)
  {
    if (*(_BYTE *)(a1 + 92)
      || (objc_msgSend(v5, "value"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v7 = objc_msgSend(v6, "CA_numericValueCount"),
          v8 = objc_msgSend(*(id *)(a1 + 48), "CA_numericValueCount"),
          v6,
          v7 != v8))
    {
      objc_msgSend(*(id *)(a1 + 32), "setPresentationModifier:forKey:", 0, *(_QWORD *)(a1 + 40));
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = 0;

    }
  }
  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  if (v11)
  {
    objc_msgSend(v11, "setValue:velocity:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "modifierGroupRequestHandlerForKey:", *(_QWORD *)(a1 + 40));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
      +[UIViewInProcessAnimationManager _cancelPresentationModifierGroupRequest:](UIViewInProcessAnimationManager, "_cancelPresentationModifierGroupRequest:", v12);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_2;
    v20[3] = &unk_1E16EB6E8;
    v26 = *(_QWORD *)(a1 + 72);
    v21 = *(id *)(a1 + 48);
    v22 = *(id *)(a1 + 56);
    v27 = *(_DWORD *)(a1 + 88);
    v23 = *(id *)(a1 + 40);
    v13 = *(id *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 64);
    v24 = v13;
    v25 = v14;
    +[UIViewInProcessAnimationManager _requestPresentationModifierGroup:](UIViewInProcessAnimationManager, "_requestPresentationModifierGroup:", v20);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "setModifierGroupRequestHandler:forKey:", v15, *(_QWORD *)(a1 + 40));
    objc_msgSend(MEMORY[0x1E0CB3978], "currentThread");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "threadDictionary");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("com.apple.UIKit.collectedViewPresentationProperties"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)objc_opt_new();
    objc_msgSend(v18, "setValue:forObject:andProperty:", v19, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40));

  }
}

uint64_t __46__UIView_Geometry__resizeSubviewsWithOldSize___block_invoke(uint64_t result, _QWORD *a2)
{
  if ((a2[13] & 0x400000000FC0000) != 0)
    return objc_msgSend(a2, "resizeWithOldSuperviewSize:", *(double *)(result + 32), *(double *)(result + 40));
  return result;
}

- (void)_setPresentationValue:(id)a3 forKey:(id)a4
{
  -[UIView setPresentationValue:velocity:preferredFrameRateRangeMaximum:immediate:forKey:](self, a3, 0, 0, 0, a4);
}

- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6
{
  uint64_t v9;
  BOOL v11;
  void *v12;
  UIView *v13;
  uint64_t v14;
  id v15;
  double v16;
  id v17;
  UILayoutGuide *v18;
  UILayoutGuide *v19;
  unsigned int v21;

  v9 = *(_QWORD *)&a3;
  v21 = 0;
  v11 = -[UIView _requiresExplicitLayoutMarginsGuideForAttribute:getAttributeForGuide:](self, "_requiresExplicitLayoutMarginsGuideForAttribute:getAttributeForGuide:", a3, &v21);
  if (v21)
  {
    if (v11
      || -[UIView _supportsContentDimensionVariables](self, "_supportsContentDimensionVariables")
      && (!objc_msgSend(a4, "isConstant")
        ? (v12 = (void *)objc_msgSend(a6, "firstItem"))
        : (v12 = (void *)objc_msgSend(a6, "secondItem")),
          -[UIView _firstCommonAncestorToView:givenCommonAncestor:](self, "_firstCommonAncestorToView:givenCommonAncestor:", objc_msgSend(v12, "_referenceView"), objc_msgSend(a6, "container")) != self))
    {
      v19 = -[UIView layoutMarginsGuide](self, "layoutMarginsGuide");
    }
    else
    {
      v19 = -[UIView nsli_layoutMarginsItem](self, "nsli_layoutMarginsItem");
    }
    v18 = v19;
    v14 = v21;
    v13 = self;
    v15 = a4;
    v16 = a5;
    v17 = a6;
  }
  else
  {
    v13 = self;
    v14 = v9;
    v15 = a4;
    v16 = a5;
    v17 = a6;
    v18 = 0;
  }
  return -[UIView nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:](v13, "nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:", v14, v15, v17, v18, v16);
}

- (BOOL)_requiresExplicitLayoutMarginsGuideForAttribute:(int64_t)a3 getAttributeForGuide:(int *)a4
{
  int v4;

  if (a4)
  {
    if ((a3 - 13) > 7)
      v4 = 0;
    else
      v4 = dword_1866851E0[(int)a3 - 13];
    *a4 = v4;
  }
  return 0;
}

- (CGPoint)convertPoint:(CGPoint)a3 toCoordinateSpace:(id)a4
{
  double v4;
  double v5;
  CGPoint result;

  -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", a4, a3.x, a3.y, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
  result.y = v5;
  result.x = v4;
  return result;
}

- (void)_willMoveToWindow:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  UIViewController *viewDelegate;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  _UIViewBackingAux *viewBackingAux;
  UIVisualEffectBackingHost *effectHost;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = -[UIView window](self, "window");
  v6 = v5;
  if (a3 || !v5)
  {
    if (!v5)
      goto LABEL_35;
  }
  else
  {
    objc_msgSend(v5, "windowScene");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend((id)UIApp, "_cancelGestureRecognizersForView:", self);
      objc_msgSend((id)UIApp, "_cancelPressesIfNeededForViewRemovedFromResponderChain:", self);
      if (qword_1EDDCA748 != -1)
        dispatch_once(&qword_1EDDCA748, &__block_literal_global_2106);
      if (byte_1EDDCA617)
        objc_msgSend((id)UIApp, "_cancelTouchesIfNeededForViewRemovedFromResponderChain:", self);
    }
    if ((*(_DWORD *)&self->_viewFlags & 0x80000000) != 0)
    {
      v8 = -[UIView viewTraversalMark](self, "viewTraversalMark");
      viewDelegate = self->_viewDelegate;
      v10 = -[UIViewController parentViewController](viewDelegate, "parentViewController");
      v11 = v10;
      if ((v8 || !v10)
        && !-[UIView _associatedViewControllerForwardsAppearanceCallbacks:performHierarchyCheck:isRoot:](-[UIView superview](self, "superview"), "_associatedViewControllerForwardsAppearanceCallbacks:performHierarchyCheck:isRoot:", viewDelegate, 0, v8))
      {
        if (!-[UIViewController inExplicitAppearanceTransition](viewDelegate, "inExplicitAppearanceTransition"))
        {
          if (_UIViewIsAnimating(self))
          {
            v12 = 1;
          }
          else
          {
            objc_msgSend(v11, "_existingView");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = _UIAncestorViewIsInTransition(v13, self);

            if (!(_DWORD)v12 && !v11)
              v12 = _UIAncestorViewControllerIsInAnimatedTransition(self);
          }
          -[UIViewController _parentModalViewController](viewDelegate, "_parentModalViewController");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if (v14)
          {

          }
          else if (!-[UIViewController isPerformingModalTransition](viewDelegate, "isPerformingModalTransition"))
          {
            -[UIViewController setInAnimatedVCTransition:](viewDelegate, "setInAnimatedVCTransition:", v12);
          }
        }
        -[UIViewController viewWillMoveToWindow:](viewDelegate, "viewWillMoveToWindow:", 0);
        *(_QWORD *)&self->_viewFlags |= 0x100000000uLL;
      }
      if (v8)
        -[UIView setViewTraversalMark:](self, "setViewTraversalMark:", 0);
      -[UIResponder _resignIfContainsFirstResponder](viewDelegate, "_resignIfContainsFirstResponder");
    }
    if (-[UIView isFirstResponder](self, "isFirstResponder"))
      -[UIResponder resignFirstResponder](self, "resignFirstResponder");
  }
  if (objc_msgSend(v6, "isTrackingKeyboard"))
  {
    v15 = v6;
    v16 = v15;
    if (self && self->_keyboardLayoutGuide)
      objc_msgSend(v15, "removeKeyboardLayoutGuideIfNeeded:");

  }
LABEL_35:
  if ((*(_QWORD *)&self->_viewFlags & 0x40000000000) != 0)
    objc_msgSend(v6, "_unregisterSubtreeMonitor:", self);
  if (a3)
  {
    objc_msgSend(a3, "screen");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _willChangeToIdiomOnScreen:traverseHierarchy:](self, v17, 0);

  }
  viewBackingAux = self->_viewBackingAux;
  if (viewBackingAux)
    effectHost = viewBackingAux->_effectHost;
  else
    effectHost = 0;
  -[UIVisualEffectBackingHost willMoveToWindow:](effectHost, "willMoveToWindow:", a3);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[UIView interactions](self, "interactions", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v27 != v23)
          objc_enumerationMutation(v20);
        v25 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v25, "_willMoveFromWindow:toWindow:", v6, a3);
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v22);
  }

  -[UIView willMoveToWindow:](self, "willMoveToWindow:", a3);
}

void __88__UIView_Internal___performUpdatesForPossibleChangesOfIdiom_orScreen_traverseHierarchy___block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(a2, "_applyAppearanceInvocations");
  if (*(_BYTE *)(a1 + 57))
    -[UIView _evaluateScreenPropertiesForOldScreen:newScreen:](a2, *(void **)(a1 + 40), *(void **)(a1 + 48));
  if (*(_BYTE *)(a1 + 58))
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    objc_msgSend(a2, "_allSubviews", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16))();
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

  }
}

- (void)_didMoveFromWindow:(id)a3 toWindow:(id)a4
{
  UIView *v6;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  CALayer *v27;
  id v28;
  CALayer *v29;
  BOOL v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _UITintColorVisitor *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t k;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  $1DC6EB69857CC9E7E7608875A7943F0A *v57;
  UIView *v58;
  id obj;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[128];
  _BYTE v89[128];
  _BYTE v90[128];
  uint64_t v91;

  v6 = self;
  v91 = *MEMORY[0x1E0C80C00];
  p_viewFlags = &self->_viewFlags;
  v55 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  *(_QWORD *)((char *)&self->_viewFlags + 20) = v55 & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(((unint64_t)a4 | v55 & 0x400000) != 0) << 22);
  if (a4)
  {
    *(_QWORD *)p_viewFlags &= ~0x4000uLL;
    if ((dyld_program_sdk_at_least() & 1) != 0)
    {
      -[UIView _handleTraitChangeForHierarchyChangeWithBehavior:]((uint64_t)v6, 1);
      v8 = *(_QWORD *)p_viewFlags;
      if ((*(_QWORD *)p_viewFlags & 0x400000000000000) != 0)
        goto LABEL_4;
    }
    else
    {
      v8 = *(_QWORD *)p_viewFlags;
      *((_DWORD *)p_viewFlags + 4) &= ~0x80u;
      if ((v8 & 0x400000000000000) != 0)
      {
LABEL_4:
        if ((v8 & 0x400000000000000) != 0)
          goto LABEL_6;
        goto LABEL_5;
      }
    }
LABEL_13:
    v13 = objc_msgSend((id)objc_opt_class(), "requiresConstraintBasedLayout");
    if (!a4 || !v13)
      goto LABEL_17;
    if ((*(_QWORD *)p_viewFlags & 0x400000000000000) != 0)
      goto LABEL_6;
LABEL_5:
    -[UIView _setWantsAutolayout](v6, "_setWantsAutolayout");
LABEL_6:
    -[UIView _layoutEngine_windowDidChange](v6);
    if ((~*(_QWORD *)p_viewFlags & 0x300000000000) != 0)
      -[UIView _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:](v6, "_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:", 1);
    goto LABEL_17;
  }
  v9 = dyld_program_sdk_at_least();
  v10 = *(_QWORD *)p_viewFlags;
  if ((v9 & 1) == 0)
  {
    v11 = *((_QWORD *)p_viewFlags + 1);
    v12 = *((_DWORD *)p_viewFlags + 4) & 0xFFFFFF7F;
    *(_QWORD *)p_viewFlags = v10;
    *((_QWORD *)p_viewFlags + 1) = v11;
    *((_DWORD *)p_viewFlags + 4) = v12;
  }
  if ((v10 & 0x400000000000000) == 0)
    goto LABEL_13;
LABEL_17:
  v57 = p_viewFlags;
  v14 = (id)objc_msgSend(a4, "screen");
  if (a3)
  {
    objc_msgSend(a3, "screen");
    v15 = (id)objc_claimAutoreleasedReturnValue();

    if (v15 == v14)
      -[UIView _applyAppearanceInvocations](v6, "_applyAppearanceInvocations");
  }
  v56 = v14;
  -[UIView _maskView](v6, "_maskView");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = a3;
  objc_msgSend(v16, "_didMoveFromWindow:toWindow:", a3, a4);

  -[UIView _backing_sublayers]((uint64_t)v6);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v18, "copy");

  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  obj = v19;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v90, 16);
  v58 = v6;
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v85;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v85 != v22)
          objc_enumerationMutation(obj);
        v24 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * i);
        v25 = (id)objc_msgSend(v24, "unsafeUnretainedDelegate");
        if (v25)
        {
          v26 = v25;
          if (_IsKindOfUIView((uint64_t)v25))
          {
            objc_msgSend(v24, "superlayer");
            v27 = (CALayer *)objc_claimAutoreleasedReturnValue();
            v28 = a4;
            if (v27 == v6->_layer)
              goto LABEL_32;
            -[UIView _backing_outermostLayer](v6);
            v29 = (CALayer *)objc_claimAutoreleasedReturnValue();

            v28 = a4;
            v30 = v27 == v29;
            v6 = v58;
            if (v30)
              goto LABEL_32;
            v28 = __windowForView((uint64_t)v26);
            if ((id)v26[10] != v28)
              -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](v26, (uint64_t)v28);
            if (v28 != v17)
LABEL_32:
              objc_msgSend(v26, "_didMoveFromWindow:toWindow:", v17, v28);

          }
        }
      }
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v90, 16);
    }
    while (v21);
  }

  v31 = v17;
  -[UIView _backing__didMoveFromWindow:toWindow:]((uint64_t)v6, (uint64_t)v17, (uint64_t)a4);
  if ((*((_BYTE *)v57 + 20) & 0x10) != 0)
  {
    objc_msgSend(a4, "_registerChargedView:", v6);
    objc_msgSend(v17, "_unregisterChargedView:", v6);
  }
  if (UIApp)
    -[UIEventEnvironment _clearTouchesOfView:onWindow:](*(_QWORD *)(*(_QWORD *)(UIApp + 160) + 8), (uint64_t)v6, (uint64_t)v17);
  if (v17)
    -[UIView movedFromWindow:](v6, "movedFromWindow:", v17);
  if (a4)
  {
    if ((*(_QWORD *)v57 & 0x40000000000) != 0)
      objc_msgSend(v17, "_unregisterSubtreeMonitor:", v6);
    -[UIView movedToWindow:](v6, "movedToWindow:", a4);
    if ((*((_QWORD *)v57 + 1) & 0xC0000000) != 0)
    {
LABEL_56:
      objc_msgSend(a4, "_createSystemGestureGateGestureRecognizerIfNeeded");
      objc_msgSend(a4, "_createOtherSystemGateGestureRecognizersIfNeeded");
    }
    else
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      -[UIView gestureRecognizers](v6, "gestureRecognizers");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v81;
        while (2)
        {
          for (j = 0; j != v34; ++j)
          {
            if (*(_QWORD *)v81 != v35)
              objc_enumerationMutation(v32);
            if ((objc_msgSend(*(id *)(*((_QWORD *)&v80 + 1) + 8 * j), "_requiresSystemGesturesToFail") & 1) != 0)
            {

              v31 = v17;
              goto LABEL_56;
            }
          }
          v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
          v31 = v17;
          if (v34)
            continue;
          break;
        }
      }

    }
  }
  if ((*(_DWORD *)v57 & 0x80000000) != 0)
  {
    +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", v6);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView window](v6, "window");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "viewDidMoveToWindow:shouldAppearOrDisappear:", v38, HIDWORD(*(_QWORD *)v57) & 1);

    *(_QWORD *)v57 &= ~0x100000000uLL;
  }
  objc_msgSend(v31, "screen");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _evaluateScreenPropertiesForOldScreen:newScreen:](v6, v39, v56);

  if (a4)
  {
    objc_msgSend(v31, "screen");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _didChangeFromIdiomOnScreen:traverseHierarchy:](v6, v40, 0);

    if ((*((_QWORD *)v57 + 1) & 0x1800000000) == 0 && (v55 & 0x400000) != 0)
      -[UIView _tintColorDidChange](v6, "_tintColorDidChange");
    -[UIView _constrainKeyboardGuideToWindowGuideIfNeeded:]((uint64_t)v6, a4);
  }
  if (_AXSInvertColorsEnabled())
  {
    v41 = -[_UITintColorVisitor initWithNotificationReasons:]([_UITintColorVisitor alloc], "initWithNotificationReasons:", 8);
    -[UIView _receiveVisitor:](v6, "_receiveVisitor:", v41);

  }
  -[UIView accessibilityApplyInvertFilter](v6, "accessibilityApplyInvertFilter");
  v42 = v31;
  v43 = a4;
  objc_getAssociatedObject(v6, &_UIBoundingPathChangeObserversKey);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v44, "count"))
  {
    -[UIView _removeBoundingPathRotationNotificationsForWindow:](v6, v42);
    -[UIView _addBoundingPathRotationNotificationsForWindow:](v6, v43);
  }

  +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
  v45 = objc_claimAutoreleasedReturnValue();
  v46 = (void *)v45;
  if (!v43
    && v45
    && -[UIView isUserInteractionEnabled](v6, "isUserInteractionEnabled")
    && !-[UIView _shouldIgnoreAutofillSave](v6, "_shouldIgnoreAutofillSave")
    && objc_msgSend(v46, "isMemberOfPossibleAutofillGroup:", v6))
  {
    +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "handleAutofillCredentialSaveIfNeeded:", v6);

  }
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  -[UIView interactions](v6, "interactions");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
  if (v49)
  {
    v50 = v49;
    v51 = *(_QWORD *)v77;
    do
    {
      for (k = 0; k != v50; ++k)
      {
        if (*(_QWORD *)v77 != v51)
          objc_enumerationMutation(v48);
        v53 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * k);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v53, "_didMoveFromWindow:toWindow:", v42, v43);
      }
      v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
    }
    while (v50);
  }

  if (*((_DWORD *)v57 + 4) & 0x3C | *((_QWORD *)v57 + 1) & 0x8000000000000000)
  {
    v54 = v42;
    v74 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v60 = 256;
    v75 = 0;
    *(_QWORD *)&v74 = v54;
    -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)v58, &v60);

  }
  -[UIView didMoveToWindow](v58, "didMoveToWindow");

}

- (NSArray)interactions
{
  void *v2;
  void *v3;
  void *v4;

  if ((*((_BYTE *)&self->_viewFlags + 20) & 0x40) != 0)
  {
    v3 = (void *)MEMORY[0x1E0C99D20];
    objc_getAssociatedObject(self, &_UIViewInteractionsKey);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "arrayWithArray:", v4);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = (void *)MEMORY[0x1E0C9AA60];
  }
  return (NSArray *)v2;
}

- (void)_evaluateScreenPropertiesForOldScreen:(void *)a3 newScreen:
{
  void *v5;
  double v6;
  double v7;
  double v8;

  if (result)
  {
    v5 = result;
    result = (void *)objc_msgSend(result, "_shouldInheritScreenScaleAsContentScaleFactor");
    if ((_DWORD)result)
    {
      objc_msgSend(v5, "contentScaleFactor");
      v7 = v6;
      result = (void *)objc_msgSend(a3, "scale");
      if (v8 != v7)
      {
        objc_msgSend(v5, "setContentScaleFactor:");
        result = (void *)objc_msgSend(v5, "setNeedsDisplay");
      }
    }
    if (a2 != a3)
      return (void *)objc_msgSend(v5, "_viewDidMoveFromScreen:toScreen:", a2, a3);
  }
  return result;
}

+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute relativeToLayoutDirection:(UIUserInterfaceLayoutDirection)layoutDirection
{
  _BOOL4 v6;
  UIUserInterfaceLayoutDirection v7;

  v6 = +[UIView _enableRTL](UIView, "_enableRTL");
  v7 = (unint64_t)(semanticContentAttribute == UISemanticContentAttributeUnspecified);
  if (layoutDirection == UIUserInterfaceLayoutDirectionLeftToRight)
    v7 = UIUserInterfaceLayoutDirectionLeftToRight;
  if (semanticContentAttribute == UISemanticContentAttributeForceRightToLeft)
    v7 = UIUserInterfaceLayoutDirectionRightToLeft;
  if (semanticContentAttribute == UISemanticContentAttributeForceLeftToRight)
    v7 = UIUserInterfaceLayoutDirectionLeftToRight;
  if (v6)
    return v7;
  else
    return 0;
}

+ (BOOL)_enableRTL
{
  if (_enableRTL_onceToken != -1)
    dispatch_once(&_enableRTL_onceToken, &__block_literal_global_3187);
  if (_enableRTL_result)
    return objc_msgSend(a1, "_enableLegacyRTL") ^ 1;
  else
    return 0;
}

+ (BOOL)_enableLegacyRTL
{
  BOOL v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!+[UIView _legacyRTLPreferenceEnabled](UIView, "_legacyRTLPreferenceEnabled"))
    return 0;
  if ((objc_msgSend((id)UIApp, "_isSpringBoard") & 1) != 0)
    return 1;
  +[UIApplication displayIdentifier](UIApplication, "displayIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(&unk_1E1A95378, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(&unk_1E1A95378);
        if ((objc_msgSend(v3, "hasPrefix:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v5 = objc_msgSend(&unk_1E1A95378, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
        continue;
      break;
    }
  }
  v2 = 0;
LABEL_15:

  return v2;
}

+ (BOOL)_legacyRTLPreferenceEnabled
{
  if (qword_1EDDCA820 != -1)
    dispatch_once(&qword_1EDDCA820, &__block_literal_global_3194);
  return byte_1EDDCA61B;
}

+ (BOOL)requiresConstraintBasedLayout
{
  return 0;
}

- (void)setContentScaleFactor:(CGFloat)contentScaleFactor
{
  double v3;
  double v5;
  double v6;

  v3 = contentScaleFactor;
  if (contentScaleFactor == 0.0)
  {
    v3 = 1.0;
    if (-[UIView _canDrawContent](self, "_canDrawContent"))
    {
      -[UIView _currentScreenScale](self, "_currentScreenScale");
      if (self)
        v3 = v5;
      else
        v3 = 0.0;
    }
  }
  -[UIView contentScaleFactor](self, "contentScaleFactor");
  if (v6 != v3)
  {
    -[CALayer setContentsScale:](self->_layer, "setContentsScale:", v3);
    -[CALayer setRasterizationScale:](self->_layer, "setRasterizationScale:", v3);
    -[UIView setNeedsDisplay](self, "setNeedsDisplay");
  }
}

- (CGFloat)contentScaleFactor
{
  CGFloat result;

  -[CALayer contentsScale](self->_layer, "contentsScale");
  return result;
}

- (UIViewContentMode)contentMode
{
  unint64_t v4;

  if (-[CALayer needsDisplayOnBoundsChange](self->_layer, "needsDisplayOnBoundsChange"))
    return 3;
  v4 = -[CALayer contentsGravityEnum](self->_layer, "contentsGravityEnum");
  if (v4 > 0xB)
    return 0;
  else
    return qword_186685718[v4];
}

- (BOOL)isOpaque
{
  return (*(_QWORD *)&self->_viewFlags >> 10) & 1;
}

- (void)_setNeedsContentsFormatUpdate:(BOOL)a3
{
  int v3;

  if (a3)
    v3 = 0x200000;
  else
    v3 = 0;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFDFFFFF | v3;
}

- (void)_updateAutogeneratedNameForLayerIfNeeded
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  objc_class *v6;
  objc_class *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id object;

  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewSetLayerNameDescription, (uint64_t)CFSTR("UIViewSetLayerNameDescription"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1ECD76AD4|| _os_feature_enabled_impl()&& ((_os_feature_enabled_impl() & 1) != 0 || objc_msgSend((id)a1, "__isLandmarkView")))
  {
    v2 = *(id *)(a1 + 168);
    if (!v2)
    {
LABEL_26:

      return;
    }
    object = v2;
    objc_msgSend(v2, "name");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_getAssociatedObject(object, &unk_1EDDCA607);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v4)
      {
LABEL_25:

        v2 = object;
        goto LABEL_26;
      }
      if (!objc_msgSend(v3, "isEqual:", v4))
      {
        v5 = 0;
        v9 = object;
LABEL_24:
        objc_setAssociatedObject(v9, &unk_1EDDCA607, v5, (void *)1);
        goto LABEL_25;
      }

    }
    if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewSetLayerNameDescription, (uint64_t)CFSTR("UIViewSetLayerNameDescription"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1ECD76AD4)
    {
      if (qword_1EDDCA698 != -1)
        dispatch_once(&qword_1EDDCA698, &__block_literal_global_608);
      qword_1EDDCA690(a1, qword_1EDDCA688);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_23;
    }
    v6 = (objc_class *)objc_opt_class();
    NSStringFromClass(v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_QWORD *)(a1 + 96))
    {
      v7 = (objc_class *)objc_opt_class();
      NSStringFromClass(v7);
      v8 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!objc_msgSend((id)a1, "__isKindOfUIWindow"))
      {
LABEL_23:
        objc_msgSend(object, "setName:", v5);
        v9 = object;
        v4 = v5;
        goto LABEL_24;
      }
      _UIMainBundleIdentifier();
      v8 = objc_claimAutoreleasedReturnValue();
    }
    v10 = (void *)v8;
    objc_msgSend(v5, "stringByAppendingFormat:", CFSTR(" (%@)"), v8);
    v11 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v11;
    goto LABEL_23;
  }
}

+ (void)_registerClassForIdiomInitializationIfNeccessary
{
  uint64_t v3;
  uint64_t i;

  if (qword_1EDDCA7A0 != -1)
    dispatch_once(&qword_1EDDCA7A0, &__block_literal_global_2574);
  v3 = objc_msgSend(a1, "methodForSelector:", sel__initializeForIdiom_);
  if (v3 != qword_1EDDCA798
    && (objc_msgSend((id)_UIViewClassesRegisteredForIdiomInitialization, "containsObject:", a1) & 1) == 0)
  {
    objc_msgSend((id)objc_msgSend(a1, "superclass"), "_registerClassForIdiomInitializationIfNeccessary");
    for (i = 0; i != 11; ++i)
    {
      if (_UIViewDidAlreadyInitializeIdiom[i])
        objc_msgSend(a1, "_initializeForIdiom:", i);
    }
    objc_msgSend((id)_UIViewClassesRegisteredForIdiomInitialization, "addObject:", a1);
  }
}

- (BOOL)__isLandmarkView
{
  return self->_viewDelegate != 0;
}

+ (BOOL)_wantsDeepColorByDefault
{
  return dyld_program_sdk_at_least();
}

- (void)_populateInitialTraitCollection:(id)a3
{
  UITraitCollection *v5;
  UITraitCollection *cachedTraitCollection;
  UITraitCollection *v7;
  void *v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  UIView *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = (UITraitCollection *)a3;
  if (self->_cachedTraitCollection)
  {
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 4639, CFSTR("View was already initialized: %@"), self);

    }
    else if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v13 = self;
        _os_log_fault_impl(&dword_185066000, v11, OS_LOG_TYPE_FAULT, "View was already initialized: %@  This will become an assert in a future version.", buf, 0xCu);
      }

    }
    else
    {
      v9 = _populateInitialTraitCollection____s_category_0;
      if (!_populateInitialTraitCollection____s_category_0)
      {
        v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v9, (unint64_t *)&_populateInitialTraitCollection____s_category_0);
      }
      v10 = *(NSObject **)(v9 + 8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v13 = self;
        _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "View was already initialized: %@  This will become an assert in a future version.", buf, 0xCu);
      }
    }
  }
  cachedTraitCollection = self->_cachedTraitCollection;
  self->_cachedTraitCollection = v5;
  v7 = v5;

  *((_DWORD *)&self->_viewFlags + 4) |= 0x80u;
  -[UIView _setLastNotifiedTraitCollection:](self, "_setLastNotifiedTraitCollection:", v7);
  _UITraitEnvironmentGeneratedTraitCollection((uint64_t)self, (unint64_t)v7);

}

- (void)_setLastNotifiedTraitCollection:(id)a3
{
  objc_storeStrong((id *)&self->__lastNotifiedTraitCollection, a3);
}

- (void)_setNeedsContentsFormatUpdate
{
  -[UIView _setNeedsContentsFormatUpdate:](self, "_setNeedsContentsFormatUpdate:", 1);
}

- (BOOL)_subclassImplementsDrawRect
{
  uint64_t v2;
  BOOL v3;

  v2 = -[UIView methodForSelector:](self, "methodForSelector:", sel_drawRect_);
  if (v2)
    v3 = v2 == qword_1EDDCA770;
  else
    v3 = 1;
  return !v3;
}

- (NSArray)gestureRecognizers
{
  return self->_gestureRecognizers;
}

- (uint64_t)_backing__didMoveFromWindow:(uint64_t)a3 toWindow:
{
  uint64_t v3;
  void *v4;

  if (result)
  {
    v3 = *(_QWORD *)(result + 176);
    if (v3)
      v4 = *(void **)(v3 + 40);
    else
      v4 = 0;
    return objc_msgSend(v4, "_didMoveFromWindow:toWindow:", a2, a3);
  }
  return result;
}

- (void)_handleTraitChangeForHierarchyChangeWithBehavior:(uint64_t)a1
{
  void *v4;
  void *v5;
  id v6;
  char v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;

  if (a1)
  {
    if (qword_1EDDCA898 != -1)
      dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
    if (byte_1EDDCA61D)
    {
      _UIViewInvalidateTraitCollectionAndSchedulePropagation(a1, 0);
      -[UIView _updateTraitsIfNeededWithBehavior:](a1, a2);
      return;
    }
    objc_msgSend((id)a1, "_lastNotifiedTraitCollection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a1 + 120) &= ~0x80u;
    objc_msgSend((id)a1, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v4;
    v6 = v5;
    if (v12 == v6)
    {

      v8 = v12;
    }
    else
    {
      if (v12 && v6)
      {
        v7 = objc_msgSend(v12, "isEqual:", v6);

        if ((v7 & 1) != 0)
          goto LABEL_22;
      }
      else
      {

      }
      v9 = *(id *)(a1 + 96);
      if (v9)
      {
        v8 = v9;
        *(_QWORD *)(a1 + 112) |= 0x800000000000uLL;
        objc_msgSend((id)a1, "setNeedsLayout");
      }
      else
      {
        v10 = (_QWORD *)a1;
        do
        {
          v10 = (id)objc_msgSend(v10, "superview");
          if (!v10)
            goto LABEL_19;
        }
        while (!v10[12]);
        if ((v10[14] & 0x800000000000) == 0)
        {
LABEL_19:
          -[UIView _processChangesFromOldTraits:toCurrentTraits:withBehavior:]((void *)a1, v12, v6, 3);
          goto LABEL_20;
        }
        v11 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v11 | 0x800000000000;
        if ((v11 & 0x1000000000000) != 0)
          objc_msgSend((id)a1, "setNeedsLayout");
LABEL_20:
        v8 = 0;
      }
    }

LABEL_22:
  }
}

- (UIView)initWithFrame:(CGRect)frame
{
  double height;
  double width;
  double y;
  double x;
  UIView *v7;
  UIView *v8;
  objc_super v10;

  height = frame.size.height;
  width = frame.size.width;
  y = frame.origin.y;
  x = frame.origin.x;
  v10.receiver = self;
  v10.super_class = (Class)UIView;
  v7 = -[UIView init](&v10, sel_init);
  v8 = v7;
  if (v7)
  {
    *(_QWORD *)&v7->_viewFlags |= 0x4000400uLL;
    UIViewCommonInitWithFrame(v7, x, y, width, height);
    if (__invalidatesViewUponCreation)
      -[UIView setNeedsDisplay](v8, "setNeedsDisplay");
    *(_QWORD *)&v8->_viewFlags &= ~0x4000000uLL;
    if (_UIConstraintBasedLayoutEngageNonLazily())
      *(_QWORD *)&v8->_viewFlags |= 0x400000000000000uLL;
  }
  return v8;
}

- (CGColor)_backgroundCGColor
{
  BOOL v3;
  uint64_t viewFlags;
  id v6;
  CGColor *v7;

  v3 = -[UIView _canDrawContent](self, "_canDrawContent");
  viewFlags = (uint64_t)self->_viewFlags;
  if (v3 || (*(_QWORD *)&self->_viewFlags & 0x11000000) == 0x1000000)
  {
    if ((viewFlags & 0x40) != 0)
      return (CGColor *)objc_getAssociatedObject(self, &unk_1EDDCA608);
    else
      return 0;
  }
  else if ((viewFlags & 0x10000000) != 0)
  {
    objc_getAssociatedObject(self, &unk_1EDDCA609);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v7 = (CGColor *)objc_msgSend(v6, "CGColor");

    return v7;
  }
  else
  {
    return -[CALayer backgroundColor](self->_layer, "backgroundColor");
  }
}

- (BOOL)_shouldInheritScreenScaleAsContentScaleFactor
{
  void *v3;
  BOOL v4;

  -[UIView window](self, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3
    && !-[UIView _controlsOwnScaleFactor](self, "_controlsOwnScaleFactor")
    && -[UIView _canDrawContent](self, "_canDrawContent");

  return v4;
}

- (void)setNeedsDisplay
{
  if ((*(_QWORD *)&self->_viewFlags & 0x11000000) == 0x1000000 || -[UIView _canDrawContent](self, "_canDrawContent"))
  {
    -[CALayer setNeedsDisplay](self->_layer, "setNeedsDisplay");
    UIViewDidSetNeedsDisplay(self);
  }
}

- (BOOL)_canDrawContent
{
  return (*(_QWORD *)&self->_viewFlags & 0x4000000004) != 0;
}

- (BOOL)_controlsOwnScaleFactor
{
  return 0;
}

+ (Class)layerClass
{
  return (Class)objc_opt_class();
}

- (void)_constrainKeyboardGuideToWindowGuideIfNeeded:(uint64_t)a1
{
  id v3;
  id v4;

  v3 = a2;
  if (a1 && *(_QWORD *)(a1 + 272))
  {
    v4 = v3;
    objc_msgSend(v3, "addKeyboardLayoutGuideIfNeeded:");
    v3 = v4;
  }

}

- (void)_applyAppearanceInvocations
{
  id v3;
  id v4;

  v3 = -[UIView window](self, "window");
  if (v3)
  {
    v4 = v3;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (+[_UIAppearance _hasCustomizationsForClass:guideClass:](_UIAppearance, "_hasCustomizationsForClass:guideClass:", objc_opt_class(), -[UIView _appearanceGuideClass](self, "_appearanceGuideClass")))
      {
        *(_QWORD *)&self->_viewFlags &= ~0x20000000000uLL;
        +[_UIAppearance _applyInvocationsTo:window:](_UIAppearance, "_applyInvocationsTo:window:", self, v4);
      }
    }
  }
}

- (Class)_appearanceGuideClass
{
  return 0;
}

- (void)_willChangeToIdiomOnScreen:(char)a3 traverseHierarchy:
{
  void *v5;
  uint64_t v6;

  if (a1)
  {
    v5 = a1;
    if (a2)
      a1 = a2;
    v6 = objc_msgSend(a1, "_userInterfaceIdiom");
    if (v6 != objc_msgSend(v5, "_userInterfaceIdiom"))
      -[UIView _willChangeToIdiom:onScreen:traverseHierarchy:](v5, v6, a2, a3);
  }
}

- (void)_didChangeFromIdiomOnScreen:(uint64_t)a3 traverseHierarchy:
{
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  if (a1)
  {
    v5 = v9;
    if (!v9)
      v5 = a1;
    v6 = objc_msgSend(v5, "_userInterfaceIdiom");
    v7 = (id)objc_msgSend(a1, "_screen");
    if (!v7)
      v7 = a1;
    v8 = objc_msgSend(v7, "_userInterfaceIdiom");
    if (v8 == v6)
    {
      -[UIView _performUpdatesForPossibleChangesOfIdiom:orScreen:traverseHierarchy:](a1, v6, v9, a3);
    }
    else
    {
      objc_msgSend(a1, "_setUserInterfaceIdiom:", v8);
      objc_msgSend(a1, "_didChangeFromIdiom:onScreen:traverseHierarchy:", v6, v9, a3);
    }
  }

}

- (void)_performUpdatesForPossibleChangesOfIdiom:(id)a3 orScreen:(char)a4 traverseHierarchy:
{
  id v8;
  id v9;
  BOOL v10;
  _QWORD v11[7];
  BOOL v12;
  BOOL v13;
  char v14;
  _QWORD v15[4];

  if (a1)
  {
    v8 = (id)objc_msgSend(a1, "_screen");
    v9 = v8;
    if (a3)
      v10 = objc_msgSend(v8, "_userInterfaceIdiom") != a2;
    else
      v10 = 1;
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2050000000;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __88__UIView_Internal___performUpdatesForPossibleChangesOfIdiom_orScreen_traverseHierarchy___block_invoke;
    v11[3] = &unk_1E16EB940;
    v12 = v10;
    v13 = v9 != a3;
    v11[5] = a3;
    v11[6] = v9;
    v14 = a4;
    v11[4] = v15;
    v15[3] = v11;
    __88__UIView_Internal___performUpdatesForPossibleChangesOfIdiom_orScreen_traverseHierarchy___block_invoke((uint64_t)v11, a1);
    _Block_object_dispose(v15, 8);
  }
}

- (void)_willChangeToIdiom:(void *)a3 onScreen:(char)a4 traverseHierarchy:
{
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  _QWORD v15[4];

  v7 = a3;
  v8 = v7;
  if (a1)
  {
    if (v7)
    {
      if (objc_msgSend(a1, "_screen"))
      {
        v9 = objc_msgSend((id)objc_msgSend(a1, "_screen"), "_userInterfaceIdiom");
        objc_msgSend(v8, "scale");
        if (v9 == a2)
          goto LABEL_9;
      }
      else
      {
        objc_msgSend(v8, "scale");
      }
      v15[0] = 0;
      v15[1] = v15;
      v15[2] = 0x2050000000;
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __66__UIView_Internal___willChangeToIdiom_onScreen_traverseHierarchy___block_invoke;
      v10[3] = &unk_1E16EB918;
      v13 = a2;
      v14 = a4;
      v11 = v8;
      v12 = v15;
      v15[3] = v10;
      __66__UIView_Internal___willChangeToIdiom_onScreen_traverseHierarchy___block_invoke((uint64_t)v10, a1);

      _Block_object_dispose(v15, 8);
    }
    else
    {
      objc_msgSend(0, "scale");
    }
  }
LABEL_9:

}

- (void)_setUserInterfaceIdiom:(int64_t)a3
{
  uint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)&self->_viewFlags + 1);
  v4 = v3 & 0xFFFFF0FFFFFFFFFFLL | ((unint64_t)(a3 != -1) << 40) | ((unint64_t)(a3 & 7) << 41);
  if (a3 == -1)
    v4 = v3 & 0xFFFFFEFFFFFFFFFFLL;
  *((_QWORD *)&self->_viewFlags + 1) = v4;
}

- (void)_didChangeFromIdiom:(int64_t)a3 onScreen:(id)a4 traverseHierarchy:(BOOL)a5
{
  -[UIView _performUpdatesForPossibleChangesOfIdiom:orScreen:traverseHierarchy:](self, a3, a4, a5);
}

- (BOOL)_containsView:(uint64_t)a1
{
  _BOOL8 v2;
  void *v4;
  void *v5;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = *(void **)(a2 + 168);
    if (v4)
    {
      do
      {
        v5 = *(void **)(a1 + 168);
        v2 = v4 == v5;
        if (v4 == v5)
          break;
        v4 = (void *)objc_msgSend(v4, "superlayer");
      }
      while (v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

- (void)_layoutEngine_windowDidChange
{
  double v2;
  double v3;
  double v4;
  double v5;

  if (a1 && objc_msgSend(a1, "window"))
  {
    if (!objc_msgSend(a1, "_layoutEngine")
      && ((a1[13] & 0x400000000000000) != 0 || objc_msgSend(_UIViewConstraints(a1), "count")))
    {
      objc_msgSend(a1, "_initializeLayoutEngine");
    }
    if (objc_msgSend(a1, "_hostsLayoutEngine"))
    {
      objc_msgSend((id)objc_msgSend(a1, "_layoutEngine"), "engineScalingCoefficients");
      v3 = v2;
      if (v5 != -[UIView _preferredLayoutEngineToUserScalingCoefficients](a1) || v3 != v4)
      {
        if ((dyld_program_sdk_at_least() & 1) != 0
          || objc_msgSend(a1, "_forceLayoutEngineSolutionInRationalEdges"))
        {
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__layoutEngine_windowDidChange, a1, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 807, CFSTR("Engine should not change scale because we are no longer integralizing in the engine"));
        }
        -[UIView _rebuildLayoutFromScratch](a1);
      }
    }
  }
}

- (BOOL)_shouldIgnoreAutofillSave
{
  return 0;
}

+ (BOOL)_supportsInvalidatingFocusCache
{
  uint64_t v3;

  v3 = +[UIView instanceMethodForSelector:](UIView, "instanceMethodForSelector:", sel_focusItemsInRect_);
  return v3 == objc_msgSend(a1, "instanceMethodForSelector:", sel_focusItemsInRect_);
}

- (id)_actingParentViewForGestureRecognizers
{
  return 0;
}

- (UIView)viewWithTag:(NSInteger)tag
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (_tagForView(self) == tag)
    return self;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[CALayer sublayers](self->_layer, "sublayers", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v16;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v6);
        v11 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v10), "unsafeUnretainedDelegate");
        if (v11)
        {
          v12 = v11;
          if (_IsKindOfUIView((uint64_t)v11))
            v11 = v12;
          else
            v11 = 0;
        }
        objc_msgSend(v11, "viewWithTag:", tag);
        v13 = objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          v14 = (void *)v13;

          return (UIView *)v14;
        }
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v8)
        continue;
      break;
    }
  }

  return (UIView *)0;
}

+ (id)_collectedViewPresentationPropertiesByPerforming:(uint64_t)a1
{
  void (**v2)(_QWORD);
  void *v3;

  v2 = a2;
  objc_opt_self();
  v3 = (void *)objc_opt_new();
  __setCollectedViewPresentationProperties(v3);
  v2[2](v2);

  __setCollectedViewPresentationProperties(0);
  return v3;
}

- (UIUserInterfaceLayoutDirection)effectiveUserInterfaceLayoutDirection
{
  void *v3;
  unint64_t v4;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "layoutDirection");

  if (v4 >= 2)
  {
    if (v4 == -1)
      v4 = objc_msgSend((id)UIApp, "userInterfaceLayoutDirection");
    else
      v4 = 0;
  }
  return +[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:](UIView, "userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:", -[UIView semanticContentAttribute](self, "semanticContentAttribute"), v4);
}

- (UISemanticContentAttribute)semanticContentAttribute
{
  return (*(_QWORD *)((char *)&self->_viewFlags + 20) >> 14) & 7;
}

- (double)_resolvedInferredLayoutMargins
{
  if (a1)
    return _UIViewResolvedMargins((id *)a1, *(double *)(a1 + 352), *(double *)(a1 + 360), *(double *)(a1 + 368), *(double *)(a1 + 376));
  else
    return 0.0;
}

uint64_t __38__UIView_Geometry__hitTest_withEvent___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)setCenter:(CGPoint)center
{
  double y;
  double x;
  _BOOL4 v6;
  double v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _QWORD v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  y = center.y;
  x = center.x;
  v6 = center.x == -[UIView _backing_position]((uint64_t)self);
  v8 = y == v7 && v6;
  if (v8)
  {
    v9 = *MEMORY[0x1E0C9D538];
    v10 = *(_QWORD *)(MEMORY[0x1E0C9D538] + 8);
  }
  else
  {
    -[UIView frame](self, "frame");
    v9 = v11;
    v10 = v12;
  }
  -[UIView superview](self, "superview");
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
    v15 = objc_msgSend(*(id *)(v13 + 168), "needsLayout");
  else
    v15 = 1;
  +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "willSendSetPosition:toLayerOfView:", self, x, y);

  -[UIView _backing_setPosition:]((uint64_t)self, x, y);
  if (((v8 | -[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self) ^ 1) & 1) == 0
    && (*(_QWORD *)&self->_viewFlags & 0x200000000000000) == 0
    && -[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
  {
    -[UIView _constraints_frameDidChange]((uint64_t)self);
  }
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1000000) != 0)
  {
    -[UIView superview](self, "superview");
    v17 = objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      v18 = (void *)v17;
      -[UIView _anyBackdropMaskView](self);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "superview");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
      {
        -[UIView superview](self, "superview");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIView _anyBackdropMaskView](self);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "superview");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "convertPoint:toView:", v23, x, y);
        x = v24;
        y = v25;

      }
    }
    -[UIView _backdropMaskViewForGrayscaleTint](self, "_backdropMaskViewForGrayscaleTint");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setCenter:", x, y);

    -[UIView _backdropMaskViewForColorTint](self, "_backdropMaskViewForColorTint");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setCenter:", x, y);

    -[UIView _backdropMaskViewForColorBurnTint](self);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setCenter:", x, y);

    -[UIView _backdropMaskViewForDarkeningTint](self);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setCenter:", x, y);

    -[UIView _backdropMaskViewForFilters](self, "_backdropMaskViewForFilters");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setCenter:", x, y);

  }
  if (!v8)
  {
    if (*((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((_QWORD *)&self->_viewFlags + 1) & 0x8000000000000000)
    {
      v50 = 0;
      v49 = 0u;
      v48 = 0u;
      v47 = 0u;
      v46 = 0u;
      v45 = 0u;
      v44 = 0u;
      v43 = 0u;
      v42 = 0u;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      v38 = 0u;
      v37 = 0u;
      v36[0] = 2;
      v36[1] = v9;
      v36[2] = v10;
      -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, v36);
    }
    -[UIView _updateCombinedInsetsIfNecessary](self, "_updateCombinedInsetsIfNecessary");
    -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary](self);
    if (v14)
      v31 = v15;
    else
      v31 = 1;
    if ((v31 & 1) == 0
      && objc_msgSend(*(id *)(v14 + 168), "needsLayout")
      && (*(_QWORD *)(v14 + 104) & 0x1000000000000000) == 0)
    {
      -[UIView bounds](self, "bounds");
      -[UIView _synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:updateSuperview:]((uint64_t)self, 1, v32, v33, v34, v35);
    }
  }

}

- (void)_updateEmbeddedViewControllerContentOverlayInsetsIfNecessary
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  double v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1[12])
    {
      objc_msgSend(a1, "_setViewDelegateContentOverlayInsetsAreClean:", 0);
      return;
    }
    objc_msgSend(a1, "_viewControllerForAncestor");
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "childViewControllers");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (!v3)
      goto LABEL_35;
    v4 = v3;
    v5 = *(_QWORD *)v35;
    while (1)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v35 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v6);
        if (objc_msgSend(v7, "_appearState") - 1 > 1)
          goto LABEL_19;
        objc_msgSend(v7, "view");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "isDescendantOfView:", a1);

        if (!v9)
          goto LABEL_19;
        if ((a1[13] & 0x200000000000000) == 0)
          goto LABEL_18;
        objc_msgSend(v7, "view");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v10, "_wantsAutolayout")
          || (objc_msgSend(v10, "translatesAutoresizingMaskIntoConstraints") & 1) != 0
          || (objc_msgSend(v10, "superview"),
              v11 = (void *)objc_claimAutoreleasedReturnValue(),
              v12 = objc_msgSend(v11, "_is_needsLayout"),
              v11,
              !v12))
        {

LABEL_18:
          objc_msgSend(v7, "_updateContentOverlayInsetsFromParentIfNecessary");
          goto LABEL_19;
        }
        v32 = 0.0;
        v33 = 0.0;
        v30 = 0u;
        v31 = 0u;
        objc_msgSend(v10, "_layoutEngineCreateIfNecessary");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "delegate");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (dyld_program_sdk_at_least())
        {

LABEL_23:
          if (v10)
            -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](v10, &v32, (double *)&v30, v13, 0);
          objc_msgSend(v10, "center");
          if (v32 != v16)
          {
LABEL_33:

            goto LABEL_19;
          }
          v17 = v33;
          goto LABEL_29;
        }
        if (v14)
        {
          v29 = objc_msgSend(v14, "_forceLayoutEngineSolutionInRationalEdges");

          if (v29)
            goto LABEL_23;
        }
        objc_msgSend(v10, "_nsis_origin:bounds:inEngine:", &v32, &v30, v13);
        v18 = *((double *)&v31 + 1);
        v19 = v33;
        v20 = v32 + *(double *)&v31 * 0.5;
        objc_msgSend(v10, "center");
        if (v20 != v21)
          goto LABEL_33;
        v17 = v19 + v18 * 0.5;
LABEL_29:
        if (v17 != v15)
          goto LABEL_33;
        objc_msgSend(v10, "bounds");
        v23 = v22;
        v25 = v24;
        v26 = v31;

        if (*(double *)&v26 == v23 && *((double *)&v26 + 1) == v25)
          goto LABEL_18;
LABEL_19:
        ++v6;
      }
      while (v4 != v6);
      v27 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      v4 = v27;
      if (!v27)
      {
LABEL_35:

        return;
      }
    }
  }
}

- (void)_backing_setPosition:(double)a3
{
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 130) & 1) != 0)
    {
      objc_msgSend((id)a1, "superview");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "bounds");
      v8 = v7;
      v10 = v9;

      a2 = a2 - v8;
      a3 = a3 - v10;
    }
    v11 = *(_QWORD *)(a1 + 176);
    if (!v11 || (v12 = *(id *)(v11 + 8), (v13 = v12) == 0))
    {
      v13 = 0;
      v12 = *(id *)(a1 + 168);
    }
    v14 = v13;
    objc_msgSend(v12, "setPosition:", a2, a3);

  }
}

- (void)_tintColorDidChange
{
  int v3;
  void *v4;
  void *v5;
  UITraitCollection *v6;
  UITraitCollection *cachedTraitCollection;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  uint8_t v14[16];
  uint8_t buf[16];

  v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    if (qword_1EDDCA898 != -1)
      dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
    if (byte_1EDDCA61D)
    {
      -[UIView __tintColor](self);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[UITraitCollection _tintColor](self->_cachedTraitCollection, "_tintColor");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5 != v4)
      {
        -[UITraitCollection _traitCollectionByReplacingTintColor:]((char *)self->_cachedTraitCollection, v4);
        v6 = (UITraitCollection *)objc_claimAutoreleasedReturnValue();
        cachedTraitCollection = self->_cachedTraitCollection;
        self->_cachedTraitCollection = v6;

        _UITraitEnvironmentGeneratedTraitCollection((uint64_t)self, (unint64_t)self->_cachedTraitCollection);
      }

    }
    else
    {
      *((_DWORD *)&self->_viewFlags + 4) &= ~0x80u;
    }
  }
  if (os_variant_has_internal_diagnostics())
  {
    if (!self)
    {
      __UIFaultDebugAssertLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v11, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", buf, 2u);
      }

    }
  }
  else if (!self)
  {
    v12 = qword_1EDDCA6F8;
    if (!qword_1EDDCA6F8)
    {
      v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&qword_1EDDCA6F8);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", v14, 2u);
    }
  }
  +[UITraitCollection _currentTraitCollectionIfExists]();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView traitCollection](self, "traitCollection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v9);

  v10 = (void *)_UISetCurrentFallbackEnvironment(self);
  -[UIView tintColorDidChange](self, "tintColorDidChange");
  -[UIView interactionTintColorDidChange](self, "interactionTintColorDidChange");
  if (v3)
    -[UIView _effectiveThemeTraitCollectionDidChangeInternal:](self, HIDWORD(*(_QWORD *)((char *)&self->_viewFlags + 20)) & 1);
  _UIRestorePreviousFallbackEnvironment(v10);
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v8);

}

void __46__UIView__updateCachedTraitCollectionIfNeeded__block_invoke(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void (**v14)(void);

  v14 = a2;
  v5 = a3;
  if (!*(_BYTE *)(a1 + 40))
  {
    -[UIView __tintColor](*(void **)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v14[2]();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "_tintColor");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8 != v6)
      {
        v5[2](v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "_setTintColor:", v6);

      }
    }

  }
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) & 0x8000000000) != 0)
  {
    v14[2]();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "preferredContentSizeCategory");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[UIView _limitedContentSizeCategoryWithBaseValue:](*(void **)(a1 + 32), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12 != v11)
    {
      v5[2](v5);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "_setObject:forTraitToken:", v12, 0x1E1A99540);

    }
  }

}

- (id)__tintColor
{
  void *v2;
  uint64_t v3;

  if (a1)
  {
    -[UIView __undimmedTintColor](a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(a1, "tintAdjustmentMode") == 2)
    {
      -[UIView _variantOfColor:forKey:withCreationBlock:](a1, v2, "UI.tintColorAdjustmentModeDimmedVariant", &__block_literal_global_951_0);
      v3 = objc_claimAutoreleasedReturnValue();

      v2 = (void *)v3;
    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (UIViewTintAdjustmentMode)tintAdjustmentMode
{
  __int128 v2;
  UIViewTintAdjustmentMode v3;

  if (self)
  {
    *((_QWORD *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
    *(_QWORD *)&v2 = *((_QWORD *)&self->_viewFlags + 1);
    v3 = (unint64_t)((v2 >> 35) & 3);
    if (((v2 >> 35) & 3) != 0)
      return v3;
    if (self->_tintAdjustmentDimmingCount)
      return 2;
  }
  return -[UIView _defaultTintAdjustmentMode](self, "_defaultTintAdjustmentMode");
}

- (int64_t)_defaultTintAdjustmentMode
{
  id v2;
  int64_t result;

  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x200000000000) == 0)
    return 1;
  v2 = -[UIView superview](self, "superview");
  if (!v2)
    return 1;
  result = objc_msgSend(v2, "tintAdjustmentMode");
  if ((unint64_t)result <= 1)
    return 1;
  return result;
}

- (void)__accessibilityUndimmedTintColorHighContrastVariantStorageKey
{
  void *v1;

  if (result)
  {
    v1 = result;
    if (_AXDarkenSystemColors())
    {
      if (dyld_program_sdk_at_least() && objc_msgSend(v1, "_accessibilityResolvedInterfaceStyle") == 2)
        return &UIAccessibilityLightOnDarkToken;
      else
        return &UIAccessibilityDarkOnLightToken;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (_WORD)_effectiveThemeTraitCollectionDidChangeInternal:(_WORD *)result
{
  _WORD *v2;

  if (result)
  {
    v2 = result;
    if (a2)
    {
      objc_msgSend(result, "setNeedsDisplay");
      if (!v2[110] || (dyld_program_sdk_at_least() & 1) == 0)
        objc_msgSend(v2, "setNeedsLayout");
    }
    return (_WORD *)objc_msgSend(v2, "_updateDynamicBackgroundColor");
  }
  return result;
}

- (void)_setBackgroundColor:(id)a3
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  char *v24;
  NSObject *v25;
  unint64_t v26;
  NSObject *v27;
  void *v28;
  const char *v29;
  _BYTE __dst[352];
  _BYTE v31[352];
  _OWORD __src[23];

  v5 = a3;
  if (os_variant_has_internal_diagnostics())
  {
    if (!self)
    {
      __UIFaultDebugAssertLog();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__src[0]) = 0;
        _os_log_fault_impl(&dword_185066000, v25, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
      }

    }
  }
  else if (!self)
  {
    v26 = qword_1EDDCA740;
    if (!qword_1EDDCA740)
    {
      v26 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v26, (unint64_t *)&qword_1EDDCA740);
    }
    v27 = *(NSObject **)(v26 + 8);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl(&dword_185066000, v27, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
  }
  +[UITraitCollection _currentTraitCollectionIfExists]();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView traitCollection](self, "traitCollection");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v7);

  v8 = (void *)_UISetCurrentFallbackEnvironment(self);
  memset(__src, 0, 352);
  _UIBeginTrackingTraitUsage(self, 0, __src);
  if ((*((_BYTE *)&self->_viewFlags + 22) & 8) != 0)
  {
    v12 = (void *)objc_msgSend(objc_retainAutorelease(v5), "CGColor");
  }
  else
  {
    -[UIView traitCollection](self, "traitCollection");
    v9 = v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIColor _resolvedBackgroundColorWithTraitCollection:](v5, v10);
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v12 = (void *)objc_msgSend(v11, "CGColor");

    v8 = v9;
  }
  v13 = objc_msgSend(v5, "_isDynamic");
  v14 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  if (v13)
  {
    if ((v14 & 0x2000000000) != 0)
    {
      v28 = v8;
      -[UIView traitCollection](self, "traitCollection");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = a2;
      if (_UILightWeightMaterialsEnabled(objc_msgSend(v16, "userInterfaceIdiom")))
      {
        objc_msgSend(v16, "traitCollectionByModifyingTraits:", &__block_literal_global_2105);
        v17 = objc_claimAutoreleasedReturnValue();

        v16 = (void *)v17;
      }
      objc_msgSend(v5, "_resolvedMaterialWithTraitCollection:", v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "backgroundEffects");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "contentEffects");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "arrayByAddingObjectsFromArray:", v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView mt_setBackgroundEffects:](self, "mt_setBackgroundEffects:", v21);

      if (v18)
      {
        -[UIView _nilBackgroundColor](self, "_nilBackgroundColor");
        v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v12 = (void *)objc_msgSend(v22, "CGColor");

      }
      v8 = v28;
      a2 = v29;
    }
    else
    {
      -[UIView mt_setBackgroundEffects:](self, "mt_setBackgroundEffects:", 0);
    }
    objc_setAssociatedObject(self, &unk_1EDDCA620, v5, (void *)1);
    objc_setAssociatedObject(self, &unk_1EDDCA61F, v12, (void *)1);
    v15 = *(_QWORD *)((char *)&self->_viewFlags + 20) | 0x20000;
    goto LABEL_17;
  }
  if ((v14 & 0x20000) != 0)
  {
    objc_setAssociatedObject(self, &unk_1EDDCA620, 0, (void *)1);
    objc_setAssociatedObject(self, &unk_1EDDCA61F, 0, (void *)1);
    -[UIView mt_setContentEffects:](self, "mt_setContentEffects:", 0);
    -[UIView mt_setBackgroundEffects:](self, "mt_setBackgroundEffects:", 0);
    v15 = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFDFFFFLL;
LABEL_17:
    *(_QWORD *)((char *)&self->_viewFlags + 20) = v15;
  }
  objc_msgSend(v5, "_systemColorName");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _setBackgroundCGColor:withSystemColorName:]((uint64_t)self, (CGColor *)v12, v23);

  memcpy(__dst, __src, sizeof(__dst));
  v24 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v31, v24, sizeof(v31));
  memcpy(v24, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)self, (uint64_t)&v31[136], -[UIView methodForSelector:](self, "methodForSelector:", a2), sel__updateDynamicBackgroundColor);
  _UITraitUsageTrackingResultDestroy((uint64_t)v31);
  _UIRestorePreviousFallbackEnvironment(v8);
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v6);

}

- (void)mt_setContentEffects:(id)a3
{
  _UIViewBackingAux *viewBackingAux;
  UIVisualEffectBackingHost *v6;
  void *v7;
  void *v8;
  id v9;

  if (self)
  {
    viewBackingAux = self->_viewBackingAux;
    if (viewBackingAux && (v6 = viewBackingAux->_effectHost) != 0)
    {

    }
    else if (!objc_msgSend(a3, "count"))
    {
      return;
    }
    -[UIView _backing_wrapLayerInIntermediate]((uint64_t)self);
    -[UIView _backing_outermostLayer](self);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAllowsGroupBlending:", 0);

    v9 = (id)objc_msgSend(a3, "copy");
    -[UIView _effectHost](self);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setContentEffects:", v9);

  }
}

- (void)_setBackgroundCGColor:(void *)a3 withSystemColorName:
{
  id v5;
  CGPatternRef Pattern;
  double b;
  double c;
  CGImage *Image;
  CGImage *v10;
  size_t Width;
  size_t Height;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  CGColorSpace *ColorSpace;
  uint64_t v35;
  CGPattern *v36;
  const CGFloat *Components;
  CGColorRef v38;
  void *v39;
  id v40;
  double v41;
  double v42;
  CGAffineTransform v43;
  CGAffineTransform v44;

  v5 = a3;
  if (!a1 || CGColorEqualToColor(a2, (CGColorRef)objc_msgSend((id)a1, "_backgroundCGColor")))
    goto LABEL_62;
  objc_setAssociatedObject((id)a1, &unk_1EDDCA609, 0, (void *)1);
  Pattern = CGColorGetPattern(a2);
  if (!Pattern)
    goto LABEL_14;
  Image = (CGImage *)CGPatternGetImage();
  if (!Image)
    goto LABEL_14;
  v10 = Image;
  Width = CGImageGetWidth(Image);
  Height = CGImageGetHeight(v10);
  CGPatternGetStep();
  v14 = v13;
  v16 = v15;
  memset(&v44, 0, sizeof(v44));
  CGPatternGetMatrix();
  b = (double)Width;
  if (v14 == (double)Width)
  {
    v17 = v16 == (double)Height;
    b = v44.b;
    c = v44.c;
    if (v44.b != 0.0)
      v17 = 0;
    v18 = v44.c == 0.0 && v17;
    v19 = a1 + 104;
    v23 = !v18;
    v20 = 0x10000000;
    if (v23)
      v20 = 0;
  }
  else
  {
LABEL_14:
    v20 = 0;
    v19 = a1 + 104;
  }
  v21 = *(_DWORD *)(v19 + 16);
  v22 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v19 & 0xFFFFFFFFEFFFFFFFLL | v20;
  *(_QWORD *)(v19 + 8) = v22;
  *(_DWORD *)(v19 + 16) = v21;
  if (Pattern)
    v23 = v20 == 0;
  else
    v23 = 0;
  v24 = v23;
  v25 = objc_msgSend((id)a1, "_canDrawContent", b, c);
  v27 = *(_QWORD *)(a1 + 104);
  v26 = *(_QWORD *)(a1 + 112);
  v28 = *(_DWORD *)(a1 + 120);
  if ((v24 & 1) != 0 || v25)
  {
    if ((v27 & 0x40) != 0)
    {
      if (objc_getAssociatedObject((id)a1, &unk_1EDDCA608) == a2)
      {
        v27 = *(_QWORD *)(a1 + 104);
        v26 = *(_QWORD *)(a1 + 112);
        v28 = *(_DWORD *)(a1 + 120);
        if (a2)
        {
LABEL_33:
          if ((v27 & 0x40) == 0)
          {
            objc_setAssociatedObject((id)a1, &unk_1EDDCA608, a2, (void *)1);
            v28 = *(_DWORD *)(a1 + 120);
            v26 = *(_QWORD *)(a1 + 112);
            v27 = *(_QWORD *)(a1 + 104) | 0x40;
            *(_QWORD *)(a1 + 104) = v27;
          }
        }
LABEL_35:
        if ((v27 & 0x10000000) == 0)
        {
          v31 = 0x1000000;
          if (!v24)
            v31 = 0;
          *(_QWORD *)(a1 + 104) = v27 & 0xFFFFFFFFFEFFFFFFLL | v31;
          *(_QWORD *)(a1 + 112) = v26;
          *(_DWORD *)(a1 + 120) = v28;
        }
        objc_msgSend(*(id *)(a1 + 168), "setBackgroundColor:", 0);
        objc_msgSend((id)a1, "setNeedsDisplay");
        goto LABEL_56;
      }
      objc_setAssociatedObject((id)a1, &unk_1EDDCA608, 0, (void *)1);
      v28 = *(_DWORD *)(a1 + 120);
      v26 = *(_QWORD *)(a1 + 112);
      v27 = *(_QWORD *)(a1 + 104) & 0xFFFFFFFFFFFFFFBFLL;
      *(_QWORD *)(a1 + 104) = v27;
    }
    if (a2)
      goto LABEL_33;
    goto LABEL_35;
  }
  if ((v27 & 0x10000000) == 0)
  {
    v27 &= ~0x1000000uLL;
    *(_QWORD *)(a1 + 104) = v27;
    *(_QWORD *)(a1 + 112) = v26;
    *(_DWORD *)(a1 + 120) = v28;
  }
  if ((v27 & 0x40) != 0 && objc_getAssociatedObject((id)a1, &unk_1EDDCA608) != a2)
  {
    objc_setAssociatedObject((id)a1, &unk_1EDDCA608, 0, (void *)1);
    *(_QWORD *)(a1 + 104) &= ~0x40uLL;
    v29 = objc_msgSend((id)a1, "_canDrawContent");
    v30 = *(void **)(a1 + 168);
    if (v29)
      objc_msgSend(v30, "setNeedsDisplay");
    else
      objc_msgSend(v30, "setContents:", 0);
  }
  if ((*(_QWORD *)(a1 + 104) & 0x10000000) != 0)
  {
    +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", a2);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject((id)a1, &unk_1EDDCA609, v32, (void *)1);

    v33 = *(id *)(a1 + 168);
    if (a2)
    {
      ColorSpace = CGColorGetPattern(a2);
      if (!ColorSpace)
      {
LABEL_55:
        objc_msgSend(v33, "setBackgroundColor:", ColorSpace);

        goto LABEL_56;
      }
      if (CGPatternGetImage())
      {
        memset(&v44, 0, sizeof(v44));
        CGPatternGetMatrix();
        CGAffineTransformScale(&v44, &v43, 1.0, -1.0);
        CGPatternGetTiling();
        v35 = CGPatternCreateWithImage2();
        if (v35)
        {
          v36 = (CGPattern *)v35;
          ColorSpace = CGColorGetColorSpace(a2);
          if (ColorSpace)
          {
            Components = CGColorGetComponents(a2);
            if (Components)
            {
              v38 = CGColorCreateWithPattern(ColorSpace, v36, Components);
              ColorSpace = (CGColorSpace *)CFAutorelease(v38);
            }
            else
            {
              ColorSpace = 0;
            }
          }
          CGPatternRelease(v36);
          goto LABEL_55;
        }
      }
    }
    ColorSpace = 0;
    goto LABEL_55;
  }
  objc_msgSend(*(id *)(a1 + 168), "setBackgroundColor:", a2);
LABEL_56:
  v39 = *(void **)(a1 + 168);
  if (a2)
  {
    v40 = v39;
    objc_msgSend(v40, "setOpaque:", -[UIView _hasOpaqueBackground](a1));

    if (Pattern)
    {
      CGPatternGetMatrix();
      objc_msgSend((id)a1, "contentScaleFactor");
      if (1.0 / v42 > v41)
        objc_msgSend((id)a1, "setContentScaleFactor:", 1.0 / v42);
    }
  }
  else
  {
    objc_msgSend(v39, "setOpaque:", (*(_QWORD *)(a1 + 104) >> 10) & 1);
  }
  -[UIView _updateNeedsDisplayOnBoundsChange]((void *)a1);
  _UIViewSetBackgroundColorSystemColorName((void *)a1, v5);
LABEL_62:

}

- (BOOL)_canBeParentTraitEnvironment
{
  return (*((_DWORD *)&self->_viewFlags + 4) & 0x100000) == 0;
}

- (double)_backing_transform
{
  uint64_t v4;
  id v5;
  id v6;
  double result;
  id v8;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 176);
    if (v4)
    {
      v5 = *(id *)(v4 + 8);
      v6 = v5;
      if (v5)
        goto LABEL_6;
    }
    v5 = *(id *)(a1 + 168);
    if (v5)
    {
      v6 = 0;
LABEL_6:
      v8 = v6;
      objc_msgSend(v5, "affineTransform");

      return result;
    }
  }
  result = 0.0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return result;
}

- (uint64_t)_hasOpaqueBackground
{
  CGColor *v1;

  if (result)
  {
    if ((*(_QWORD *)(result + 104) & 0x40) == 0)
      return 0;
    result = objc_msgSend((id)result, "_backgroundCGColor");
    if (result)
    {
      v1 = (CGColor *)result;
      if (!CGColorGetPattern((CGColorRef)result))
        return CGColorGetAlpha(v1) == 1.0;
      if (CGPatternGetImage())
      {
        if ((CGImageHasAlpha() & 1) != 0)
          return 0;
        return CGColorGetAlpha(v1) == 1.0;
      }
      return 1;
    }
  }
  return result;
}

- (void)mt_setBackgroundEffects:(id)a3
{
  _UIViewBackingAux *viewBackingAux;
  UIVisualEffectBackingHost *v6;
  void *v7;
  void *v8;
  id v9;

  if (self)
  {
    viewBackingAux = self->_viewBackingAux;
    if (viewBackingAux && (v6 = viewBackingAux->_effectHost) != 0)
    {

    }
    else if (!objc_msgSend(a3, "count"))
    {
      return;
    }
    -[UIView _backing_wrapLayerInIntermediate]((uint64_t)self);
    -[UIView _updateAutomaticCaptureGroupIfNecessary]((uint64_t)self);
    -[UIView _backing_outermostLayer](self);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAllowsGroupBlending:", 0);

    v9 = (id)objc_msgSend(a3, "copy");
    -[UIView _effectHost](self);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setBackgroundEffects:", v9);

  }
}

- (id)_variantOfColor:(const void *)a3 forKey:(void *)a4 withCreationBlock:
{
  id v7;
  void (**v8)(id, id);
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v7 = a2;
  v8 = a4;
  if (a1)
  {
    if (objc_msgSend(v7, "_isDynamic"))
    {
      objc_msgSend(a1, "traitCollection");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "resolvedColorWithTraitCollection:", v9);
      v10 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v11 = v7;
      if (!v7)
        v11 = (void *)objc_opt_class();
      v10 = v11;
    }
    objc_getAssociatedObject(v10, a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      os_variant_has_internal_diagnostics();
      +[UITraitCollection _currentTraitCollectionIfExists]();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "traitCollection");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v14);

      v15 = (void *)_UISetCurrentFallbackEnvironment(a1);
      v8[2](v8, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      _UIRestorePreviousFallbackEnvironment(v15);
      +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v13);
      objc_setAssociatedObject(v10, a3, v12, (void *)1);

    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

id __21__UIView___tintColor__block_invoke(uint64_t a1, void *a2)
{
  double v2;
  double v3;
  double v5;
  double v6;

  v5 = 0.0;
  v6 = 0.0;
  if (a2)
  {
    objc_msgSend(a2, "getWhite:alpha:", &v6, &v5);
    v2 = v6;
    v3 = v5 * 0.8;
  }
  else
  {
    v3 = 0.0;
    v2 = 0.0;
  }
  +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", v2, v3, *(_QWORD *)&v5, *(_QWORD *)&v6);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)setUserInteractionEnabled:(BOOL)userInteractionEnabled
{
  unint64_t viewFlags;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  id v9;

  viewFlags = (unint64_t)self->_viewFlags;
  if (((viewFlags >> 1) & 1) == userInteractionEnabled)
  {
    v5 = *((_QWORD *)&self->_viewFlags + 1);
    v6 = *((_DWORD *)&self->_viewFlags + 4);
    v7 = 2;
    if (userInteractionEnabled)
      v7 = 0;
    *(_QWORD *)&self->_viewFlags = viewFlags & 0xFFFFFFFFFFFFFFFDLL | v7;
    *((_QWORD *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v6;
    if (userInteractionEnabled)
    {
      -[UIView _promoteSelfOrDescendantToFirstResponderIfNecessary](self, "_promoteSelfOrDescendantToFirstResponderIfNecessary");
    }
    else
    {
      -[UIView _firstResponder](self, "_firstResponder");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_responderForBecomeFirstResponder");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0
          && -[UIView containsView:](self, "containsView:", v9)
          && (objc_opt_respondsToSelector() & 1) != 0)
        {
          if (-[UIView _shouldResignFirstResponderWithInteractionDisabled](self, "_shouldResignFirstResponderWithInteractionDisabled"))
          {
            objc_msgSend(v9, "resignFirstResponder");
            objc_msgSend(v8, "_becomeFirstResponderWhenPossible");
          }
        }
      }

    }
  }
}

- (id)_firstResponder
{
  void *v2;
  void *v3;

  -[UIResponder _responderWindow](self, "_responderWindow");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_firstResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)nextResponder
{
  UIViewController *v3;

  -[UIResponder _nextResponderOverride](self, "_nextResponderOverride");
  v3 = (UIViewController *)objc_claimAutoreleasedReturnValue();
  if (!v3 && ((*(_DWORD *)&self->_viewFlags & 0x80000000) == 0 || (v3 = self->_viewDelegate) == 0))
  {
    -[UIView superview](self, "superview");
    v3 = (UIViewController *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

- (BOOL)isUserInteractionEnabled
{
  return (*(_QWORD *)&self->_viewFlags & 2) == 0;
}

- (BOOL)_isInAnimatedLayout
{
  return *((_DWORD *)&self->_viewFlags + 2) & 1;
}

- (BOOL)_la_isVisible
{
  return !-[UIView isHidden](self, "isHidden");
}

- (uint64_t)_isInVisibleHierarchy
{
  void *v1;
  id v2;
  double v3;
  uint64_t v4;

  if (result)
  {
    v1 = (void *)result;
    result = objc_msgSend((id)result, "_isInAWindow");
    if ((_DWORD)result)
    {
      v2 = v1;
      while ((objc_msgSend(v2, "isHidden") & 1) == 0)
      {
        objc_msgSend(v2, "alpha");
        if (v3 < 0.01)
          break;
        objc_msgSend(v2, "superview");
        v4 = objc_claimAutoreleasedReturnValue();

        v2 = (id)v4;
        if (!v4)
          return 1;
      }

      return 0;
    }
  }
  return result;
}

- (void)setHidden:(BOOL)hidden
{
  _BOOL8 v3;
  _BOOL4 v5;
  uint64_t v6;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v3 = hidden;
  v26 = *MEMORY[0x1E0C80C00];
  if (self)
    v5 = (*((_QWORD *)&self->_viewFlags + 1) & 0x30000) != 0;
  else
    v5 = 0;
  if ((-[UIView _backing_isHidden]((uint64_t)self) & 1) != 0)
  {
    LODWORD(v6) = 1;
    if (v3)
      goto LABEL_8;
  }
  else
  {
    v6 = (*((_QWORD *)&self->_viewFlags + 1) >> 20) & 1;
    if (v3)
      goto LABEL_8;
  }
  if (v5)
    goto LABEL_19;
LABEL_8:
  if (!v3)
  {
    -[UIView _backing_setHidden:]((uint64_t)self, 0);
    if (self)
    {
      v11 = -[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewPendingHiddenCount", -1, (*((_QWORD *)&self->_viewFlags + 1) >> 20) & 1);
      v12 = 0x100000;
      if (!v11)
        v12 = 0;
      *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFFEFFFFFLL | v12;
    }
LABEL_19:
    if (!v5)
      goto LABEL_23;
    goto LABEL_20;
  }
  p_viewFlags = &self->_viewFlags;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x4000) != 0
    && +[UIView _isInAnimationBlockWithAnimationsEnabled](UIView, "_isInAnimationBlockWithAnimationsEnabled")&& self->_window)
  {
    p_viewFlags = &self->_viewFlags;
    v8 = -[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewPendingHiddenCount", 1, (*((_QWORD *)&self->_viewFlags + 1) >> 20) & 1);
    v9 = 0x100000;
    if (!v8)
      v9 = 0;
    v10 = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFFEFFFFFLL | v9;
  }
  else
  {
    -[UIView _backing_setHidden:]((uint64_t)self, 1);
    v10 = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFFEFFFFFLL;
  }
  *((_QWORD *)p_viewFlags + 1) = v10;
  if (v5)
  {
LABEL_20:
    v13 = 0x40000;
    if (!v3)
      v13 = 0;
    *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFFFBFFFFLL | v13;
  }
LABEL_23:
  if (!-[UIView _ignoreBackdropViewsWhenHiding](self, "_ignoreBackdropViewsWhenHiding"))
    -[UIView _recursivelySetHiddenForBackdropMaskViews:](self, v3);
  if ((_DWORD)v6 != v3)
  {
    if (v6 | !v3)
    {
      if ((_DWORD)v6 && !v3)
        -[UIView _recursivelyConsiderResumingMotionEffects](self);
    }
    else if (self)
    {
      _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(self, &__block_literal_global_970);
    }
    -[UIView _notifyArrangementsOfChangeInItem:withSelector:](self, self, (uint64_t)sel__visibilityParameterChangedForItem_);
    if (!_UIViewNotifiesFocusEngineForAlphaAndHiddenChanges())
      goto LABEL_41;
    if (v3)
    {
      -[UIView _focusSystem](self, "_focusSystem");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "_focusEnvironmentWillBecomeInvisible:", self);
    }
    else
    {
      if (!-[UIView _shouldInformFocusAboutBecomingVisible](self, "_shouldInformFocusAboutBecomingVisible"))
      {
LABEL_41:
        _UIViewNotifyPhysicalButtonArbiterOfEffectiveVisibilityChangeIfNeeded(self);
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        -[UIView interactions](self, "interactions", 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v22;
          do
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_QWORD *)v22 != v18)
                objc_enumerationMutation(v15);
              v20 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend(v20, "_viewVisibilityDidChange");
            }
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          }
          while (v17);
        }

        return;
      }
      -[UIView _focusSystem](self, "_focusSystem");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "_focusEnvironmentDidBecomeVisible:", self);
    }

    goto LABEL_41;
  }
}

- (void)_recursivelySetHiddenForBackdropMaskViews:(_QWORD *)a1
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((a1[14] & 0x1000000) != 0)
    {
      objc_msgSend(a1, "_backdropMaskViewForGrayscaleTint");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setHidden:", a2);

      objc_msgSend(a1, "_backdropMaskViewForColorTint");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setHidden:", a2);

      -[UIView _backdropMaskViewForColorBurnTint](a1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setHidden:", a2);

      -[UIView _backdropMaskViewForDarkeningTint](a1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setHidden:", a2);

      objc_msgSend(a1, "_backdropMaskViewForFilters");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setHidden:", a2);

    }
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    objc_msgSend(a1, "subviews", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v15;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v15 != v12)
            objc_enumerationMutation(v9);
          -[UIView _recursivelySetHiddenForBackdropMaskViews:](*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v13++), a2);
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v11);
    }

  }
}

- (BOOL)isHidden
{
  _BOOL8 v3;

  if ((-[UIView _backing_isHidden]((uint64_t)self) & 1) != 0)
    LOBYTE(v3) = 1;
  else
    return (*((_QWORD *)&self->_viewFlags + 1) >> 20) & 1;
  return v3;
}

- (uint64_t)_backing_isHidden
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 176);
    if (!v2 || (v3 = *(id *)(v2 + 8), (v4 = v3) == 0))
    {
      v4 = 0;
      v3 = *(id *)(v1 + 168);
    }
    v5 = objc_msgSend(v3, "isHidden");

    return v5;
  }
  return result;
}

- (BOOL)_ignoreBackdropViewsWhenHiding
{
  return (*((unsigned __int8 *)&self->_viewFlags + 20) >> 5) & 1;
}

- (void)_backing_setHidden:(uint64_t)a1
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 176);
    if (!v4 || (v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
    {
      v6 = 0;
      v5 = *(id *)(a1 + 168);
    }
    v7 = v6;
    objc_msgSend(v5, "setHidden:", a2);

  }
}

- (uint64_t)_bitFlagValueAfterIncrementingHiddenManagementCountForKey:(uint64_t)a3 withIncrement:(int)a4 bitFlagValue:
{
  void *v6;
  uint64_t v7;

  if (!a1 || -[UIView _hiddenManagementCountForKey:bitFlagValue:](a1, a2, a4) + a3 < 1)
    return 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 1;
  objc_setAssociatedObject(a1, a2, v6, (void *)1);

  return v7;
}

- (uint64_t)_hiddenManagementCountForKey:(int)a3 bitFlagValue:
{
  void *v3;
  uint64_t v4;

  if (!a1 || !a3)
    return 0;
  objc_getAssociatedObject(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "integerValue");

  return v4;
}

- (BOOL)_isInAWindow
{
  return self->_window != 0;
}

- (void)_recursivelyConsiderResumingMotionEffects
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1 && -[UIView _isInHierarchyAllowingMotionEffects]((uint64_t)a1))
  {
    objc_msgSend((id)_motionEffectEngine, "endSuspendingMotionEffectsForView:", a1);
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    objc_msgSend(a1, "subviews", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v2);
          _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(*(_QWORD **)(*((_QWORD *)&v7 + 1) + 8 * v6++), &__block_literal_global_971_0);
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v4);
    }

  }
}

- (void)_isInHierarchyAllowingMotionEffects
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)a1;
  if (a1)
  {
    if (-[UIView _isInVisibleHierarchy](a1))
    {
      objc_msgSend(v1, "_window");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "_windowHostingScene");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v1 = (void *)(objc_msgSend(v3, "_sceneSessionRoleIsCarPlayOrNonInteractiveExternal") ^ 1);

    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t __109__UIView_UIConstraintBasedLayout_EngineDelegate___invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel__block_invoke(uint64_t result, _QWORD *a2, _BYTE *a3)
{
  uint64_t v4;
  id *v6;
  uint64_t v7;

  v4 = result;
  if (*(_QWORD **)(result + 32) != a2)
  {
    if ((a2[13] & 0x400000000000000) == 0 || (result = objc_msgSend(a2, "_hostsLayoutEngine"), (result & 1) != 0))
    {
      *a3 = 1;
      return result;
    }
  }
  a2[14] |= 0x400uLL;
  v6 = -[UIView __viewDelegate]((id *)a2);
  result = objc_msgSend((id)objc_msgSend(v6, "parentViewController"), "_monitorsSystemLayoutFittingSize");
  if ((_DWORD)result)
  {
    if (!objc_msgSend(v6, "_previousFittingSizeInfo"))
    {
      v7 = objc_msgSend(a2, "_previousFittingSizeInfo");
      if (!v7)
        v7 = objc_msgSend(*(id *)(v4 + 40), "_dummyFittingSizeInfo");
      objc_msgSend(v6, "_setPreviousFittingSizeInfo:", v7);
    }
  }
  else if ((a2[14] & 0x200) == 0)
  {
    return result;
  }
  return objc_msgSend(a2, "setNeedsLayout");
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_3(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t result;

  result = objc_msgSend(a2, "_wantsBaselineUpdatingFollowingConstraintsPass");
  if ((_DWORD)result)
    result = objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  if ((a2[13] & 0x800000000000000) == 0)
    *a3 = 1;
  return result;
}

void __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke_2(uint64_t a1, void *a2, _BYTE *a3)
{
  int v5;
  void *v6;
  char v7;
  _QWORD *v8;

  v8 = a2;
  v5 = objc_msgSend(v8, "_wantsAutolayout");
  v6 = v8;
  if (v5 && (v8[13] & 0x800000000000000) != 0)
  {
    v7 = objc_msgSend(v8, "_isInAnimatedLayout");
    v6 = v8;
    if ((v7 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
      objc_msgSend(v8, "_setInAnimatedLayout:", 1);
      v6 = v8;
    }
  }
  else
  {
    *a3 = 1;
  }

}

void __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_6(uint64_t a1, uint64_t a2, BOOL *a3)
{
  *a3 = (*(_QWORD *)(a2 + 104) & 0x200000000000) != 0;
  *(_QWORD *)(a2 + 104) |= 0x100000000000uLL;
}

uint64_t __48__UIView__layoutMarginsDidChangeFromOldMargins___block_invoke(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v6;

  result = objc_msgSend(a2, "_needsDoubleUpdateConstraintsPass");
  if ((_DWORD)result)
    result = objc_msgSend(a2, "_invalidateIntrinsicContentSizeNeedingLayout:", 1);
  if (!a2)
    goto LABEL_7;
  v6 = a2[13];
  if ((v6 & 0x1000000000000) != 0)
  {
    result = objc_msgSend(a2, "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
    v6 = a2[13];
  }
  if ((v6 & 0x800000000000) == 0)
LABEL_7:
    *a3 = 1;
  return result;
}

uint64_t __91__UIView_AdditionalLayoutSupport___recalculateStrictDescendantNeedsDoubleUpdateConstraints__block_invoke(uint64_t result, _QWORD *a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD **)(result + 32) != a2)
  {
    v7 = result;
    result = objc_msgSend(a2, "_needsDoubleUpdateConstraintsPass");
    if ((result & 1) != 0)
      goto LABEL_5;
    v8 = a2[13];
    if ((v8 & 0x1000000000000) != 0)
      return result;
    if ((v8 & 0x800000000000) != 0)
    {
LABEL_5:
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 40) = a2;
      a3 = a4;
    }
    *a3 = 1;
  }
  return result;
}

void __91__UIView_AdditionalLayoutSupport___recalculateStrictDescendantNeedsDoubleUpdateConstraints__block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 104) &= 0xFFFE7FFFFFFFFFFFLL;
}

- (UIFocusEnvironment)parentFocusEnvironment
{
  void *v3;
  void *v4;
  UIView *v5;
  UIViewController *v6;
  UIViewController *v7;

  if ((*(_DWORD *)&self->_viewFlags & 0x80000000) != 0)
  {
    v7 = self->_viewDelegate;
  }
  else
  {
    -[UIView _presentationControllerToNotifyOnLayoutSubviews](self, "_presentationControllerToNotifyOnLayoutSubviews");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3
      && (objc_msgSend(v3, "containerView"),
          v5 = (UIView *)objc_claimAutoreleasedReturnValue(),
          v5,
          v5 == self))
    {
      v6 = v4;
    }
    else
    {
      -[UIView superview](self, "superview");
      v6 = (UIViewController *)objc_claimAutoreleasedReturnValue();
    }
    v7 = v6;

  }
  return (UIFocusEnvironment *)v7;
}

- (void)__removeAllRetargetableAnimations:(id *)a1
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[6];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v21 = a1[5];
    objc_msgSend(v21, "animatablePropertyKeys");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "layer");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "isPartOfHigherOrderProperty");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v28 != v7)
            objc_enumerationMutation(v5);
          v9 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
          objc_msgSend(v4, "objectForKey:", v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = v10 == 0;

          if (v11)
          {
            objc_msgSend(v20, "valueForKeyPath:", v9);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            +[UIInterpolatedValue interpolatedWrapperForValue:key:](UIInterpolatedValue, "interpolatedWrapperForValue:key:", v12, v9);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "animatablePropertyForKey:createIfNecessary:", v9, 1);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v26[0] = MEMORY[0x1E0C809B0];
            v26[1] = 3221225472;
            v26[2] = __74__UIView_InProcessAnimations_Internal____removeAllRetargetableAnimations___block_invoke_2;
            v26[3] = &unk_1E16B1B50;
            v26[4] = a1;
            v26[5] = v9;
            objc_msgSend(v14, "animatePropertyWithCurrentValue:targetValue:preTickShouldRemoveCallback:newValueCallback:removedCallback:", v13, v13, &__block_literal_global_2092, 0, v26);

          }
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v6);
    }

    if (a2)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      objc_msgSend(a1, "_allSubviews");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
      if (v16)
      {
        v17 = *(_QWORD *)v23;
        do
        {
          for (j = 0; j != v16; ++j)
          {
            if (*(_QWORD *)v23 != v17)
              objc_enumerationMutation(v15);
            -[UIView __removeAllRetargetableAnimations:](*(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * j), 1);
          }
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
        }
        while (v16);
      }

    }
  }
}

- (void)accessibilityApplyInvertFilter
{
  uint64_t v3;

  if (!-[UIScreen _isCarScreen](-[UIWindow screen](-[UIView window](self, "window"), "screen"), "_isCarScreen"))
  {
    v3 = -[UIView accessibilityIgnoresInvertColors](self, "accessibilityIgnoresInvertColors")
      && _AXSInvertColorsEnabled()
      && !-[UIView _ancestorHasInvertFilterApplied](self, "_ancestorHasInvertFilterApplied")
      && -[UITraitCollection userInterfaceStyle](-[UIView traitCollection](self, "traitCollection"), "userInterfaceStyle") == UIUserInterfaceStyleLight;
    UIAccessibilityUpdateInvertColorsFilters(-[UIView layer](self, "layer"), 0, v3);
  }
}

- (CALayer)layer
{
  return self->_layer;
}

- (BOOL)accessibilityIgnoresInvertColors
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 22) & 1;
}

- (void)setBounds:(CGRect)bounds
{
  double height;
  double width;
  double y;
  double x;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  char v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  -[UIView bounds](self, "bounds");
  v11 = v8;
  v12 = v9;
  v13 = v10;
  v15 = v14;
  v16 = height == v14 && width == v10;
  v17 = y != v9 || x != v8;
  v18 = -[UIView _shouldInvalidateBaselineConstraintsForSize:oldSize:](self, "_shouldInvalidateBaselineConstraintsForSize:oldSize:", width, height);
  if (v16 && !v17)
    return;
  v19 = (*(_QWORD *)&self->_viewFlags & 0x13000000) == 0x1000000 && v17;
  v33 = v19;
  v20 = -[UIView _willForceLayoutForBoundsChangeToNewBounds:]((_BOOL8)self, x, y, width, height);
  -[UIView superview](self, "superview");
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = v21;
  if (v21)
    v23 = objc_msgSend(*(id *)(v21 + 168), "needsLayout");
  else
    v23 = 0;
  +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "willSendSetBounds:toLayerOfView:", self, x, y, width, height);

  -[UIView _backing_setBounds:]((uint64_t)self, x, y, width, height);
  v25 = !v20;
  if (!v22)
    v25 = 1;
  if ((v25 & 1) != 0 || (*(_QWORD *)(v22 + 104) & 0x1000000000000000) == 0)
  {
    v26 = 0;
    if (v22 && v23 != 1)
      v26 = objc_msgSend(*(id *)(v22 + 168), "needsLayout");
    -[UIView _synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:updateSuperview:]((uint64_t)self, v26, v11, v12, v13, v15);
  }
  if (!((*(_QWORD *)&self->_viewFlags >> 17) & 1 | v16))
    -[UIView resizeSubviewsWithOldSize:](self, "resizeSubviewsWithOldSize:", v13, v15);
  if (((-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self) ^ 1 | v16) & 1) == 0
    && (*(_QWORD *)&self->_viewFlags & 0x300000000000000) == 0
    && -[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
  {
    -[UIView _constraints_frameDidChange]((uint64_t)self);
  }
  if (v18)
  {
    -[UIView _invalidateBaselineConstraints](self, "_invalidateBaselineConstraints");
    if (v16)
    {
LABEL_31:
      if (!v20)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  else if (v16)
  {
    goto LABEL_31;
  }
  -[UIView _notifyReferenceViewSizeChange](self, "_notifyReferenceViewSizeChange");
  if (v20)
LABEL_32:
    -[UIView layoutBelowIfNeeded](self, "layoutBelowIfNeeded");
LABEL_33:
  if (v33)
    -[UIView setNeedsDisplay](self, "setNeedsDisplay");
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1000000) != 0)
  {
    -[UIView _backdropMaskViewForGrayscaleTint](self, "_backdropMaskViewForGrayscaleTint");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setBounds:", x, y, width, height);

    -[UIView _backdropMaskViewForColorTint](self, "_backdropMaskViewForColorTint");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setBounds:", x, y, width, height);

    -[UIView _backdropMaskViewForColorBurnTint](self);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setBounds:", x, y, width, height);

    -[UIView _backdropMaskViewForDarkeningTint](self);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setBounds:", x, y, width, height);

    -[UIView _backdropMaskViewForFilters](self, "_backdropMaskViewForFilters");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "setBounds:", x, y, width, height);

  }
  if (!v17 && v16
    || !(*((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((_QWORD *)&self->_viewFlags + 1) & 0x8000000000000000))
  {
    goto LABEL_49;
  }
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  if (v17)
  {
    *(_QWORD *)&v34 = 4;
    *((double *)&v35 + 1) = v11;
    *(double *)&v36 = v12;
    v32 = 12;
    if (v16)
      goto LABEL_48;
LABEL_46:
    *(_QWORD *)&v34 = v32;
    *((double *)&v36 + 1) = v13;
    *(double *)&v37 = v15;
    if (-[UIView _shouldNotifyGeometryObserversForBaselineChanges](self, "_shouldNotifyGeometryObserversForBaselineChanges"))
    {
      *(_QWORD *)&v34 = v32 | 0x800;
    }
    goto LABEL_48;
  }
  v32 = 8;
  if (!v16)
    goto LABEL_46;
LABEL_48:
  -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v34);
LABEL_49:
  if (!v16)
  {
    -[UIView _updateCombinedInsetsIfNecessary](self, "_updateCombinedInsetsIfNecessary");
    -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);
    -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary](self);
  }

}

- (void)resizeSubviewsWithOldSize:(CGSize)a3
{
  CGFloat height;
  CGFloat width;
  id v5;
  _QWORD v6[6];

  height = a3.height;
  width = a3.width;
  -[UIView subviews](self, "subviews");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __46__UIView_Geometry__resizeSubviewsWithOldSize___block_invoke;
  v6[3] = &__block_descriptor_48_e15_v32__0_8Q16_B24l;
  *(CGFloat *)&v6[4] = width;
  *(CGFloat *)&v6[5] = height;
  objc_msgSend(v5, "enumerateObjectsWithOptions:usingBlock:", 2, v6);

}

- (void)_notifyReferenceViewSizeChange
{
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x2000000000) != 0)
    +[UIDynamicAnimator _referenceViewSizeChanged:](UIDynamicAnimator, "_referenceViewSizeChanged:", self);
}

- (void)layoutBelowIfNeeded
{
  int v3;
  void *v4;
  void *v5;
  UIView *v6;
  UIView *v7;
  uint64_t v8;
  UIView *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  UIView *v18;
  UIView *v19;
  void *v20;
  UIView *v21;
  _BOOL4 v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  UIView *v26;
  id v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  double v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[4];
  id v40;
  _QWORD v41[4];
  UIView *v42;
  id v43;
  UIView *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!self || (*(_QWORD *)&self->_viewFlags & 0x1000) == 0)
  {
    if (pthread_main_np() != 1)
      -[UIView _raiseExceptionForBackgroundThreadLayout]((id *)&self->super.super.isa);
    if (qword_1EDDCA8C0 != -1)
      dispatch_once(&qword_1EDDCA8C0, &__block_literal_global_3401);
    v3 = byte_1EDDCA622;
    if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self))
    {
      -[UIView _layoutEngine](self, "_layoutEngine");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v4;
      if ((*(_QWORD *)&self->_viewFlags & 0x40200000000000) == 0x40000000000000)
      {
        objc_msgSend(v4, "delegate");
        v6 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (v6 == self)
          v7 = 0;
        else
          v7 = self;
        -[UIView _updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:](self, v7);
        -[UIView _layoutEngine](self, "_layoutEngine");
        v8 = objc_claimAutoreleasedReturnValue();

        v5 = (void *)v8;
      }
      -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v5);
      if ((*(_QWORD *)&self->_viewFlags & 0x40000000000000) != 0)
      {
        v11 = 0;
        v9 = 0;
        v10 = 0;
      }
      else
      {
        if (v5)
        {
          v9 = 0;
          v10 = 0;
        }
        else
        {
          v10 = objc_alloc_init(MEMORY[0x1E0D156C8]);
          objc_msgSend(v10, "setEngineScalingCoefficients:", -[UIView _preferredLayoutEngineToUserScalingCoefficients](self));
          -[UIView window](self, "window");
          v18 = (UIView *)objc_claimAutoreleasedReturnValue();
          v19 = v18;
          if (!v18
            || (-[UIView _layoutEngine](v18, "_layoutEngine"),
                v20 = (void *)objc_claimAutoreleasedReturnValue(),
                v20,
                v21 = v19,
                v3)
            && (v21 = v19, v20))
          {
            v21 = self;
          }
          v9 = v21;
          v22 = -[UIView translatesAutoresizingMaskIntoConstraints](v9, "translatesAutoresizingMaskIntoConstraints");
          if (!v3 || !v22)
          {
            -[UIView superview](v9, "superview");
            v23 = objc_claimAutoreleasedReturnValue();
            if (v23)
            {
              v24 = (_QWORD *)v23;
              while (1)
              {
                objc_msgSend(v24, "_layoutEngine");
                v25 = (void *)objc_claimAutoreleasedReturnValue();

                if (v3)
                {
                  if (v25)
                    break;
                }
                if ((v24[13] & 0x1000) != 0)
                {

                  goto LABEL_29;
                }
                v26 = v24;

                -[UIView superview](v26, "superview");
                v24 = (_QWORD *)objc_claimAutoreleasedReturnValue();
                v9 = v26;
                if (!v24)
                  goto LABEL_45;
              }
            }
          }
          v26 = v9;
LABEL_45:
          objc_msgSend(v10, "setDelegate:", v26);
          v41[0] = MEMORY[0x1E0C809B0];
          v41[1] = 3221225472;
          v41[2] = __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke;
          v41[3] = &unk_1E16B47A8;
          v9 = v26;
          v42 = v9;
          v10 = v10;
          v43 = v10;
          v44 = self;
          objc_msgSend(v10, "withAutomaticOptimizationDisabled:", v41);

        }
        if (+[UIView _isInAnimationBlockWithAnimationsEnabled](UIView, "_isInAnimationBlockWithAnimationsEnabled"))
        {
          v27 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          -[UIView _layoutEngine](self, "_layoutEngine");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "delegate");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v39[0] = MEMORY[0x1E0C809B0];
          v39[1] = 3221225472;
          v39[2] = __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke_2;
          v39[3] = &unk_1E16CC9B0;
          v11 = v27;
          v40 = v11;
          _UIViewTopDownSubtreeTraversal((uint64_t)v29, v39, 0);

        }
        else
        {
          v11 = 0;
        }
        if (self)
          -[UIView _updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:](self, self);
        if (dyld_program_sdk_at_least())
        {
          if ((*(_QWORD *)&self->_viewFlags & 0x1A0000000000000) == 0x20000000000000)
            -[UIView _applyISEngineLayoutValuesToBoundsOnly:](self, "_applyISEngineLayoutValuesToBoundsOnly:", 1);
        }
        else
        {
          v30 = -[UIView superview](self, "superview");
          if (v30)
          {
            v31 = v30;
            v32 = v30[13];
            v30[13] = v32 | 0x1000000000000000;
            objc_msgSend(v30, "bounds");
            -[UIView _resizeWithOldSuperviewSize:](self, "_resizeWithOldSuperviewSize:", v33, v34);
            if ((v32 & 0x1000000000000000) == 0)
              v31[13] &= ~0x1000000000000000uLL;
          }
          else
          {
            -[UIView _resizeWithOldSuperviewSize:](self, "_resizeWithOldSuperviewSize:", *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
          }
        }
      }

    }
    else
    {
      v11 = 0;
      v9 = 0;
      v10 = 0;
    }
    -[UIView _backing_outermostLayer](self);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "layoutBelowIfNeeded");

    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v13 = v11;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v36 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * i), "_setInAnimatedLayout:", 0, (_QWORD)v35);
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
      }
      while (v15);
    }

    if (v10)
    {
      -[UIView _discardLayoutEngine:](v9, "_discardLayoutEngine:", v10);
      if (-[UIView translatesAutoresizingMaskIntoConstraints](v9, "translatesAutoresizingMaskIntoConstraints"))
        -[UIView _invalidateAutoresizingConstraints]((uint64_t)v9);
    }
LABEL_29:

  }
}

- (void)setTransform:(CGAffineTransform *)transform
{
  __int128 v5;
  __int128 v6;
  CATransform3D v7;
  CATransform3D a;
  CATransform3D v9;

  memset(&v9, 0, sizeof(v9));
  -[UIView _backing_transform3D]((uint64_t)self, &v9);
  v5 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.m11 = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.m13 = v5;
  *(_OWORD *)&v7.m21 = *(_OWORD *)&transform->tx;
  -[UIView _backing_setTransform:]((uint64_t)self, (__int128 *)&v7);
  v6 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.m11 = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.m13 = v6;
  *(_OWORD *)&v7.m21 = *(_OWORD *)&transform->tx;
  CATransform3DMakeAffineTransform(&a, (CGAffineTransform *)&v7);
  v7 = v9;
  if (!CATransform3DEqualToTransform(&a, &v7))
  {
    v7 = v9;
    -[UIView _didChangeTransformFromPreviousTransform:]((uint64_t)self, &v7);
  }
}

- (double)_backing_transform3D
{
  uint64_t v4;
  id v5;
  id v6;
  double result;
  id v8;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 176);
    if (v4)
    {
      v5 = *(id *)(v4 + 8);
      v6 = v5;
      if (v5)
        goto LABEL_6;
    }
    v5 = *(id *)(a1 + 168);
    if (v5)
    {
      v6 = 0;
LABEL_6:
      v8 = v6;
      objc_msgSend(v5, "transform");

      return result;
    }
  }
  result = 0.0;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

- (void)_backing_setTransform:(uint64_t)a1
{
  __int128 v3;
  uint64_t v4;
  id v5;
  void *v6;
  _OWORD v7[3];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1)
  {
    v3 = a2[1];
    v8 = *a2;
    v9 = v3;
    v10 = a2[2];
    v4 = *(_QWORD *)(a1 + 176);
    if (!v4 || (v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
    {
      v6 = 0;
      v5 = *(id *)(a1 + 168);
    }
    v7[0] = v8;
    v7[1] = v9;
    v7[2] = v10;
    objc_msgSend(v5, "setAffineTransform:", v7);

  }
}

- (void)_layoutMarginsDidChangeFromOldMargins:(UIEdgeInsets)a3
{
  double right;
  double left;
  void *v6;
  uint64_t viewFlags;
  UIViewController *v8;

  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    right = a3.right;
    left = a3.left;
    -[UIView _layoutEngine](self, "_layoutEngine", a3.top, a3.left, a3.bottom);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      if ((*((_QWORD *)&self->_viewFlags + 1) & 4) == 0)
      {
        a3.top = self->_inferredLayoutMargins.left;
        if (left != a3.top)
        {
          a3.top = self->_inferredLayoutMargins.right;
          if (right != a3.top)
          {
            viewFlags = (uint64_t)self->_viewFlags;
            if ((viewFlags & 0x1000000000000) != 0)
            {
              -[UIView _recalculateStrictDescendantNeedsDoubleUpdateConstraints](self, "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
              viewFlags = (uint64_t)self->_viewFlags;
            }
            if ((viewFlags & 0x800000000000) != 0)
              _UIViewTopDownSubtreeTraversal((uint64_t)self, &__block_literal_global_794, 0);
          }
        }
      }
    }
  }
  -[UIView _updateLayoutMarginsGuideConstraintsIfNecessary](self, "_updateLayoutMarginsGuideConstraintsIfNecessary", a3.top, a3.left, a3.bottom, a3.right);
  -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);
  -[UIView layoutMarginsDidChange](self, "layoutMarginsDidChange");
  v8 = self->_viewDelegate;
  -[UIViewController viewLayoutMarginsDidChange](v8, "viewLayoutMarginsDidChange");

}

- (void)_updateReadableContentGuideConstraintsIfNecessary
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  if (a1)
  {
    v2 = (void *)a1[35];
    if (v2)
    {
      objc_msgSend(v2, "_systemConstraints");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "lastObject");
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      LODWORD(v3) = os_variant_has_internal_diagnostics();
      v5 = objc_msgSend(v4, "firstAttribute");
      if ((_DWORD)v3)
      {
        if (v5 != 7)
        {
          __UIFaultDebugAssertLog();
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "The readableWidthConstraint should be a width constraint. If this is not true, something has changed and the assumption that the last of the _systemConstraints is the readableWidthConstraint may not be true!", buf, 2u);
          }

        }
      }
      else if (v5 != 7)
      {
        v7 = _updateReadableContentGuideConstraintsIfNecessary___s_category;
        if (!_updateReadableContentGuideConstraintsIfNecessary___s_category)
        {
          v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v7, (unint64_t *)&_updateReadableContentGuideConstraintsIfNecessary___s_category);
        }
        v8 = *(NSObject **)(v7 + 8);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "The readableWidthConstraint should be a width constraint. If this is not true, something has changed and the assumption that the last of the _systemConstraints is the readableWidthConstraint may not be true!", v9, 2u);
        }
      }
      objc_msgSend(v4, "setConstant:", _UIViewReadableWidthForView(a1));

    }
  }
}

- (void)_updateLayoutMarginsGuideConstraintsIfNecessary
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  if (self->_layoutMarginsGuide)
  {
    -[UIView layoutMargins](self, "layoutMargins");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    -[UILayoutGuide _systemConstraints](self->_layoutMarginsGuide, "_systemConstraints");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectAtIndexedSubscript:", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setConstant:", v4);

    objc_msgSend(v15, "objectAtIndexedSubscript:", 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setConstant:", v6);

    objc_msgSend(v15, "objectAtIndexedSubscript:", 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setConstant:", v8);

    objc_msgSend(v15, "objectAtIndexedSubscript:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setConstant:", v10);

  }
}

- (BOOL)_willForceLayoutForBoundsChangeToNewBounds:(double)a3
{
  void *v5;
  double v8;
  double v9;

  if (result)
  {
    if (__currentViewAnimationState)
    {
      v5 = (void *)result;
      result = 0;
      if ((*(_BYTE *)(__currentViewAnimationState + 172) & 0x10) != 0 && __animate)
      {
        objc_msgSend(v5, "bounds");
        return v9 != a5 || v8 != a4;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (void)_backing_setBounds:(double)a3
{
  uint64_t v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 168), "setBounds:");
    v8 = *(_QWORD *)(a1 + 176);
    if (v8)
    {
      v9 = *(id *)(v8 + 8);
      if (v9)
      {
        v17 = v9;
        objc_msgSend(v9, "setBounds:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), a4, a5);
        if ((*(_QWORD *)(a1 + 112) & 0x200000) != 0)
        {
          -[UIView _safeMaskView]((void *)a1);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = -[UIView _intermediateLayerMaskFrameOrigin](v10);
          v13 = v12;
          objc_msgSend(v10, "frame");
          v15 = v14;
          objc_msgSend(v10, "frame");
          -[UIView _backing_setFrame:]((uint64_t)v10, v11, v13, v15, v16);

        }
        -[UIView _updateSublayerGeometry](a1);

      }
    }
  }
}

- (void)layoutSubviews
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  UIView *v7;
  _QWORD v8[5];

  if ((-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self) & 1) != 0)
  {
    -[UIView _allSubviews](self, "_allSubviews");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "count"))
    {

    }
    else
    {
      -[UIView layoutGuides](self, "layoutGuides");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "count");

      if (!v5)
      {
        *(_QWORD *)&self->_viewFlags |= 0x40000000000000uLL;
        goto LABEL_12;
      }
    }
    -[UIView _layoutEngine](self, "_layoutEngine");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v6);

    if ((*(_QWORD *)&self->_viewFlags & 0x40000000000000) == 0)
    {
      if ((*((_BYTE *)&self->_viewFlags + 22) & 0x20) != 0
        && (-[UIView _outermostLayoutEngineDelegateView](self),
            v7 = (UIView *)objc_claimAutoreleasedReturnValue(),
            v7,
            v7 == self))
      {
        v8[0] = MEMORY[0x1E0C809B0];
        v8[1] = 3221225472;
        v8[2] = __35__UIView_Hierarchy__layoutSubviews__block_invoke;
        v8[3] = &unk_1E16B1B28;
        v8[4] = self;
        -[UIView _withUnsatisfiableConstraintsLoggingSuspendedForFullSubtreeFromOutermostEngineDelegate:](self, (uint64_t)v8);
      }
      else
      {
        -[UIView _updateConstraintsAsNecessaryAndApplyLayoutFromEngine]((uint64_t)self);
      }
    }
  }
LABEL_12:
  *(_QWORD *)((char *)&self->_viewFlags + 20) &= ~0x200000uLL;
}

- (void)_updateConstraintsAsNecessaryAndApplyLayoutFromEngine
{
  void *v2;
  int v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  int v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[5];
  _OWORD v30[2];
  uint64_t v31;
  CGRect v32;

  if (a1)
  {
    objc_msgSend((id)a1, "superview");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    kdebug_trace();

    v31 = 0;
    memset(v30, 0, sizeof(v30));
    v3 = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewDebugSignposts, (uint64_t)CFSTR("UIViewDebugSignposts"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __74__UIView_Hierarchy___updateConstraintsAsNecessaryAndApplyLayoutFromEngine__block_invoke;
    v29[3] = &unk_1E16E7148;
    v29[4] = a1;
    objc_msgSend((id)a1, "_layoutEngine", _UIScopedSignpostIntervalInit((uint64_t)v30, (byte_1ECD75E44 != 0) & ~v3, (uint64_t)v29));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {

    }
    else if (-[UIView _usesLayoutEngineHostingConstraints](a1))
    {
      v5 = (id)objc_msgSend((id)a1, "_layoutEngineCreateIfNecessary");
    }
    -[UIView _updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:]((_QWORD *)a1, (void *)a1);
    if ((*(_QWORD *)(a1 + 104) & 0x800000000000000) != 0)
    {
      v6 = *(id *)(a1 + 96);
      objc_msgSend(v6, "_parentContentContainer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "_previousFittingSizeInfo");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8 && objc_msgSend(v7, "_monitorsSystemLayoutFittingSize"))
      {
        if (objc_msgSend(v8, "count")
          && (objc_msgSend(v8, "allKeys"),
              v11 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(v11, "objectAtIndexedSubscript:", 0),
              v12 = objc_claimAutoreleasedReturnValue(),
              v11,
              v12))
        {
          objc_msgSend(v8, "objectForKeyedSubscript:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("layoutSize"));
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "CGSizeValue");
          v16 = v15;
          v18 = v17;

          v20 = *(_DWORD *)(v12 + 12);
          v19 = *(_DWORD *)(v12 + 16);
          v21 = *(double *)(v12 + 24);
          v22 = *(double *)(v12 + 32);
        }
        else
        {
          v12 = 0;
          v16 = *MEMORY[0x1E0C9D820];
          v18 = *(double *)(MEMORY[0x1E0C9D820] + 8);
          v19 = 1112014848;
          v20 = 1112014848;
          v21 = *MEMORY[0x1E0C9D820];
          v22 = v18;
        }
        v23 = *(_QWORD *)(a1 + 104);
        if ((v23 & 0x1000000000000) != 0)
        {
          objc_msgSend((id)a1, "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
          v23 = *(_QWORD *)(a1 + 104);
        }
        if ((v23 & 0x800000000000) != 0 && (objc_msgSend((id)a1, "_nsis_bounds"), CGRectGetWidth(v32) != v21)
          || (LODWORD(v9) = v20,
              LODWORD(v10) = v19,
              objc_msgSend((id)a1, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v21, v22, v9, v10), v16 != v25)|| v18 != v24|| v12 && *(_BYTE *)(v12 + 8))
        {
          objc_msgSend(v7, "_systemLayoutFittingSizeDidChangeForChildContentContainer:childViewController:", v6, v6);
          objc_msgSend(v6, "_setPreviousFittingSizeInfo:", 0);
        }

      }
      if ((*(_QWORD *)(a1 + 112) & 0x200) != 0)
      {
        objc_msgSend((id)a1, "invalidateIntrinsicContentSize");
        objc_msgSend((id)a1, "_layoutEngine");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
          objc_msgSend((id)a1, "_resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:", v26);

      }
      objc_msgSend((id)a1, "_is_layout");
      if ((*(_QWORD *)(a1 + 104) & 0x40000000000000) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "handleFailureInMethod:object:file:lineNumber:description:", sel__updateConstraintsAsNecessaryAndApplyLayoutFromEngine, a1, CFSTR("UIView.m"), 14710, CFSTR("layout should have been successfully accomplished"));

      }
    }
    else if (dyld_program_sdk_at_least())
    {
      *(_QWORD *)(a1 + 104) |= 0x40000000000000uLL;
    }
    objc_msgSend((id)a1, "superview");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    kdebug_trace();

    if (LODWORD(v30[0]))
      kdebug_trace();
  }
}

- (_QWORD)_updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:(_QWORD *)result
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  CGFloat width;
  CGFloat height;
  CGFloat v27;
  CGFloat v28;
  CGFloat MidX;
  CGFloat MidY;
  double v31;
  double v32;
  BOOL v33;
  double v34;
  double v35;
  BOOL v36;
  id obj;
  uint64_t v38;
  CGFloat v39;
  CGFloat v40;
  double v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];
  uint64_t v55;
  CGRect v56;
  CGRect v57;

  v55 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    if ((result[14] & 0x44) == 0)
    {
      v4 = (_QWORD *)objc_msgSend((id)objc_msgSend(result, "_layoutEngine"), "delegate");
      if (v4)
        v5 = v4;
      else
        v5 = v2;
      v6 = v5[13];
      if ((~v6 & 0x300000000000) != 0)
      {
        v7 = v2 + 13;
        v8 = v2[13];
        if (v8 < 0)
        {
          v9 = v5[14];
          v10 = *((_DWORD *)v5 + 30);
          v5[13] = v6;
          v5[14] = v9 | 0x20;
          *((_DWORD *)v5 + 30) = v10;
          v8 = *v7;
        }
        v11 = *((_DWORD *)v2 + 30);
        v12 = v2[14] | 0x40;
        *v7 = v8;
        v2[14] = v12;
        *((_DWORD *)v2 + 30) = v11;
        objc_msgSend(v4, "_createJostledViewsIfNecessary");
        objc_msgSend(v5, "_updateConstraintsIfNeededWithViewForVariableChangeNotifications:", a2);
        v2[14] &= ~0x40uLL;
        v13 = (void *)objc_msgSend(v2, "_layoutEngine");
        v14 = (void *)objc_msgSend(v13, "delegate");
        v15 = (void *)objc_msgSend(v14, "_viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:", 1);
        v5[14] &= ~0x20uLL;
        objc_msgSend(v2, "_setViewsJostledDuringUpdateConstraintsPass:", 0);
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        obj = v15;
        result = (_QWORD *)objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
        if (result)
        {
          v16 = result;
          v38 = *(_QWORD *)v50;
          do
          {
            v17 = 0;
            do
            {
              if (*(_QWORD *)v50 != v38)
                objc_enumerationMutation(obj);
              v18 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)v17);
              v45 = 0u;
              v46 = 0u;
              v47 = 0u;
              v48 = 0u;
              v19 = (void *)objc_msgSend(v18, "_allSubviews");
              v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
              if (v20)
              {
                v21 = v20;
                v22 = *(_QWORD *)v46;
                while (2)
                {
                  for (i = 0; i != v21; ++i)
                  {
                    if (*(_QWORD *)v46 != v22)
                      objc_enumerationMutation(v19);
                    v24 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
                    if (objc_msgSend(v24, "_wantsAutolayout")
                      && (objc_msgSend(v24, "translatesAutoresizingMaskIntoConstraints") & 1) == 0)
                    {
                      v43 = 0u;
                      v44 = 0u;
                      v41 = 0.0;
                      v42 = 0.0;
                      if ((dyld_program_sdk_at_least() & 1) != 0
                        || v14 && objc_msgSend(v14, "_forceLayoutEngineSolutionInRationalEdges"))
                      {
                        if (v24)
                          -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](v24, &v41, (double *)&v43, v13, 0);
                      }
                      else
                      {
                        v39 = 0.0;
                        v40 = 0.0;
                        objc_msgSend(v24, "_nsis_origin:bounds:inEngine:", &v39, &v43, v13);
                        objc_msgSend(v24, "frame");
                        width = v56.size.width;
                        height = v56.size.height;
                        v27 = v39;
                        v28 = v40;
                        v56.origin.x = v39;
                        v56.origin.y = v40;
                        MidX = CGRectGetMidX(v56);
                        v57.origin.x = v27;
                        v57.origin.y = v28;
                        v57.size.width = width;
                        v57.size.height = height;
                        MidY = CGRectGetMidY(v57);
                        v41 = MidX;
                        v42 = MidY;
                      }
                      objc_msgSend(v24, "center");
                      v33 = v41 == v32 && v42 == v31;
                      if (!v33
                        || ((objc_msgSend(v24, "bounds"), *(double *)&v44 == v35)
                          ? (v36 = *((double *)&v44 + 1) == v34)
                          : (v36 = 0),
                            !v36))
                      {
                        objc_msgSend(v18, "setNeedsLayout");
                        goto LABEL_44;
                      }
                    }
                  }
                  v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
                  if (v21)
                    continue;
                  break;
                }
              }
LABEL_44:
              v17 = (_QWORD *)((char *)v17 + 1);
            }
            while (v17 != v16);
            result = (_QWORD *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
            v16 = result;
          }
          while (result);
        }
      }
      else
      {
        result = (_QWORD *)-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)a2);
        if ((_DWORD)result)
          return (_QWORD *)-[NSISEngine _UIKitPerformPendingChangeNotifications](objc_msgSend(a2, "_layoutEngine"));
      }
    }
  }
  return result;
}

- (id)_viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:(BOOL)a3
{
  void *v3;
  _QWORD *v4;
  void *v5;

  -[UIView _layoutEngine](self, "_layoutEngine", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "delegate");
  v4 = (_QWORD *)objc_claimAutoreleasedReturnValue();

  if (v4 && (v4[14] & 0x20) != 0)
  {
    objc_getAssociatedObject(v4, &_UIViewsJostledDuringUpdateConstraintsPassKey);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_is_layout
{
  NSISEngine *v3;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t v5;
  unint64_t viewFlags;
  int v7;
  NSISEngine *v8;
  double v9;
  double v10;
  NSArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = -[UIView _layoutEngine](self, "_layoutEngine");
  p_viewFlags = &self->_viewFlags;
  viewFlags = (unint64_t)self->_viewFlags;
  v5 = *((_QWORD *)&self->_viewFlags + 1);
  v7 = *((_DWORD *)&self->_viewFlags + 4);
  if (v3)
  {
    v8 = v3;
    *(_QWORD *)p_viewFlags = viewFlags | 0x1000000000000000;
    *((_QWORD *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v7;
    -[UIView bounds](self, "bounds");
    -[UIView resizeSubviewsWithOldSize:](self, "resizeSubviewsWithOldSize:", v9, v10);
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v11 = -[UIView layoutGuides](self, "layoutGuides", 0);
    v12 = -[NSArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v17;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v17 != v14)
            objc_enumerationMutation(v11);
          objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * i), "_updateLayoutFrameInOwningView:fromEngine:", self, v8);
        }
        v13 = -[NSArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v13);
    }
    v7 = *((_DWORD *)&self->_viewFlags + 4);
    v5 = *((_QWORD *)&self->_viewFlags + 1);
    viewFlags = *(_QWORD *)&self->_viewFlags & 0xEFFFFFFFFFFFFFFFLL;
  }
  *(_QWORD *)p_viewFlags = viewFlags | 0x40000000000000;
  *((_QWORD *)&self->_viewFlags + 1) = v5;
  *((_DWORD *)&self->_viewFlags + 4) = v7;
}

- (void)_setViewsJostledDuringUpdateConstraintsPass:(id)a3
{
  void *v4;
  void *v5;
  id value;

  value = a3;
  -[UIView _layoutEngine](self, "_layoutEngine");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    objc_setAssociatedObject(v5, &_UIViewsJostledDuringUpdateConstraintsPassKey, value, (void *)1);

}

- (unint64_t)_accessibilityInterfaceStyleIntent
{
  return *((_BYTE *)&self->_viewFlags + 19) & 3;
}

- (unint64_t)_accessibilityResolvedInterfaceStyle
{
  unint64_t v2;
  unint64_t v5;
  void *v6;

  v2 = ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 26) & 3;
  if (!v2)
  {
    v5 = -[UIView _accessibilityInterfaceStyleIntent](self, "_accessibilityInterfaceStyleIntent");
    v2 = v5;
    if (v5 != 2 && v5 != 1)
    {
      if (v5)
        abort();
      if (dyld_program_sdk_at_least())
      {
        -[UIView traitCollection](self, "traitCollection");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v6, "userInterfaceStyle") == 2)
          v2 = 2;
        else
          v2 = 1;

      }
      else
      {
        return 1;
      }
    }
  }
  return v2;
}

- (void)_safeAreaInsetsDidChangeFromOldInsets:(UIEdgeInsets)a3
{
  id v4;

  -[UIView safeAreaInsetsDidChange](self, "safeAreaInsetsDidChange", a3.top, a3.left, a3.bottom, a3.right);
  -[UIView __viewDelegate]((id *)&self->super.super.isa);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_safeAreaInsetsDidChangeForView");

}

- (CGRect)convertRect:(CGRect)rect fromView:(UIView *)view
{
  UIView *v4;
  double height;
  double width;
  double y;
  double x;
  void *v10;
  CALayer *layer;
  CALayer *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect result;

  v4 = view;
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (view || (v4 = (UIView *)-[UIView window](self, "window")) != 0)
  {
    -[UIView _window](self, "_window");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _window](v4, "_window");

    if (v4 != self)
    {
      layer = v4->_layer;
      v12 = self->_layer;
      -[CALayer convertRect:fromLayer:](v12, "convertRect:fromLayer:", layer, x, y, width, height);
      x = v13;
      y = v14;
      width = v15;
      height = v16;

    }
  }
  v17 = x;
  v18 = y;
  v19 = width;
  v20 = height;
  result.size.height = v20;
  result.size.width = v19;
  result.origin.y = v18;
  result.origin.x = v17;
  return result;
}

- (BOOL)_ignoresLayerTransformForSafeAreaInsets
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 23) & 1;
}

- (void)_accessibilitySetResolvedInterfaceStyle:(unint64_t)a3
{
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xF3FFFFFF | ((a3 & 3) << 26);
}

- (id)nsli_layoutAnchorForAttribute:(int64_t)a3
{
  id result;

  switch(a3)
  {
    case 1:
      result = -[UIView leftAnchor](self, "leftAnchor");
      break;
    case 2:
      result = -[UIView rightAnchor](self, "rightAnchor");
      break;
    case 3:
      result = -[UIView topAnchor](self, "topAnchor");
      break;
    case 4:
      result = -[UIView bottomAnchor](self, "bottomAnchor");
      break;
    case 5:
      result = -[UIView leadingAnchor](self, "leadingAnchor");
      break;
    case 6:
      result = -[UIView trailingAnchor](self, "trailingAnchor");
      break;
    case 7:
      result = -[UIView widthAnchor](self, "widthAnchor");
      break;
    case 8:
      result = -[UIView heightAnchor](self, "heightAnchor");
      break;
    case 9:
      result = -[UIView centerXAnchor](self, "centerXAnchor");
      break;
    case 10:
      result = -[UIView centerYAnchor](self, "centerYAnchor");
      break;
    case 11:
      result = -[UIView lastBaselineAnchor](self, "lastBaselineAnchor");
      break;
    case 12:
      result = -[UIView firstBaselineAnchor](self, "firstBaselineAnchor");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

- (void)_resizeWithOldSuperviewSize:(CGSize)a3
{
  double height;
  double width;
  _QWORD *v6;
  char v7;
  double v8;
  uint64_t v9;
  uint64_t viewFlags;
  int v11;
  double v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  CGFloat v22;
  void *v23;
  void *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(void *, UIViewAutoresizing, void *, void *);
  CGRect *v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  void *v36;
  _QWORD v37[8];
  CGAffineTransform v38;
  CGAffineTransform v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[6];
  CGRect v56;

  height = a3.height;
  width = a3.width;
  *(_QWORD *)&self->_viewFlags |= 0x4000000000000000uLL;
  v6 = -[UIView superview](self, "superview");
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) == 0
    || -[UIView _usesAutoresizingConstraints]((uint64_t)self) && !-[UIView _autoresizingConstraints](self)
    || v6 && (v6[13] & 0x1000000000000000) == 0
    || (*(_QWORD *)&self->_viewFlags & 0x100000000000000) != 0)
  {
    v7 = 1;
  }
  else
  {
    -[UIView _applyISEngineLayoutValuesToBoundsOnly:](self, "_applyISEngineLayoutValuesToBoundsOnly:", 0);
    v7 = 0;
  }
  objc_msgSend(v6, "bounds");
  viewFlags = (uint64_t)self->_viewFlags;
  v9 = *((_QWORD *)&self->_viewFlags + 1);
  v11 = *((_DWORD *)&self->_viewFlags + 4);
  if (width != v12 || height != v8)
  {
    if ((viewFlags & 0x400000000000000) == 0)
      goto LABEL_17;
    v14 = v7 ^ 1;
    if ((viewFlags & 0x120000000000000) != 0)
      v14 = 1;
    if ((v14 & 1) == 0)
    {
LABEL_17:
      v55[0] = 0;
      v55[1] = v55;
      v55[2] = 0x3010000000;
      v55[3] = &unk_18685B0AF;
      *(double *)&v55[4] = width;
      *(double *)&v55[5] = height;
      v52[0] = 0;
      v52[1] = v52;
      v52[2] = 0x3010000000;
      v53 = 0;
      v54 = 0;
      v52[3] = &unk_18685B0AF;
      -[UIView bounds](-[UIView superview](self, "superview"), "bounds");
      v53 = v15;
      v54 = v16;
      v46 = 0;
      v47 = (double *)&v46;
      v48 = 0x4010000000;
      v49 = &unk_18685B0AF;
      v50 = 0u;
      v51 = 0u;
      -[UIView frame](self, "frame");
      *(_QWORD *)&v50 = v17;
      *((_QWORD *)&v50 + 1) = v18;
      *(_QWORD *)&v51 = v19;
      *((_QWORD *)&v51 + 1) = v20;
      v40 = 0;
      v41 = (double *)&v40;
      v42 = 0x4010000000;
      v43 = &unk_18685B0AF;
      v21 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
      v44 = *MEMORY[0x1E0C9D648];
      v45 = v21;
      -[UIView _currentScreenScale](self, "_currentScreenScale");
      memset(&v39, 0, sizeof(v39));
      CGAffineTransformMakeScale(&v39, v22, v22);
      objc_getAssociatedObject(self, &_applyAutoresizingMaskWithOldSuperviewSize__errorAssociationKey);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23;
      if (v23)
      {
        objc_msgSend(v23, "rectValue");
        v25 = v41;
        *((_QWORD *)v41 + 4) = v26;
        *((_QWORD *)v25 + 5) = v27;
        *((_QWORD *)v25 + 6) = v28;
        *((_QWORD *)v25 + 7) = v29;
      }
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 3221225472;
      v37[2] = __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke;
      v37[3] = &unk_1E16EB618;
      v37[4] = v55;
      v37[5] = v52;
      v37[6] = &v46;
      v37[7] = &v40;
      v38 = v39;
      v30 = (void (**)(void *, UIViewAutoresizing, void *, void *))_Block_copy(v37);
      v30[2](v30, -[UIView autoresizingMask](self, "autoresizingMask") & 7, &__block_literal_global_1973, &__block_literal_global_1975);
      v30[2](v30, (-[UIView autoresizingMask](self, "autoresizingMask") >> 3) & 7, &__block_literal_global_1976, &__block_literal_global_1977);
      v31 = (CGRect *)v47;
      -[UIView frame](self, "frame");
      v56.origin.x = v32;
      v56.origin.y = v33;
      v56.size.width = v34;
      v56.size.height = v35;
      if (!CGRectEqualToRect(v31[1], v56))
        -[UIView setFrame:](self, "setFrame:", v47[4], v47[5], v47[6], v47[7]);
      if (fabs(v41[4]) >= 2.22044605e-16
        || fabs(v41[5]) >= 2.22044605e-16
        || fabs(v41[6]) >= 2.22044605e-16
        || fabs(v41[7]) >= 2.22044605e-16)
      {
        objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRect:");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_setAssociatedObject(self, &_applyAutoresizingMaskWithOldSuperviewSize__errorAssociationKey, v36, (void *)1);

      }
      else
      {
        objc_setAssociatedObject(self, &_applyAutoresizingMaskWithOldSuperviewSize__errorAssociationKey, 0, 0);
      }

      _Block_object_dispose(&v40, 8);
      _Block_object_dispose(&v46, 8);
      _Block_object_dispose(v52, 8);
      _Block_object_dispose(v55, 8);
      viewFlags = (uint64_t)self->_viewFlags;
      v9 = *((_QWORD *)&self->_viewFlags + 1);
      v11 = *((_DWORD *)&self->_viewFlags + 4);
    }
  }
  *(_QWORD *)&self->_viewFlags = viewFlags & 0xBFFFFFFFFFFFFFFFLL;
  *((_QWORD *)&self->_viewFlags + 1) = v9;
  *((_DWORD *)&self->_viewFlags + 4) = v11;
}

- (UIViewAutoresizing)autoresizingMask
{
  return (*(_QWORD *)&self->_viewFlags >> 18) & 0x3FLL;
}

void __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t (**v7)(id, uint64_t);
  id v8;
  uint64_t (**v9)(_QWORD, _QWORD);
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  NSObject *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  __int128 v31;
  uint64_t v32;
  double v33;
  double v34;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v39;
  double v40;
  double v41;
  NSObject *v42;
  CGAffineTransform v43;
  CGAffineTransform buf;
  CGRect v45;
  NSRect v46;
  CGRect v47;
  CGRect v48;

  v7 = a3;
  v8 = a4;
  v9 = (uint64_t (**)(_QWORD, _QWORD))v8;
  if ((a2 & 0xFFFFFFFB) != 0)
  {
    v10 = *(double *)(*((uint64_t (**)(id, uint64_t))v8 + 2))(v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
    v11 = *(double *)v9[2](v9, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32);
    v12 = *(double *)v7[2](v7, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32);
    v13 = v12 + *(double *)v7[2](v7, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32);
    v14 = *(double *)v9[2](v9, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48);
    v15 = v14 + *(double *)v9[2](v9, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
    switch(a2)
    {
      case 1:
        v13 = v11 - (v10 - v13);
        break;
      case 2:
        v18 = v10 - v15;
        goto LABEL_13;
      case 3:
        v19 = 0.5;
        if (fabs(v13 + v15) >= 2.22044605e-16)
          v19 = v13 / (v13 + v15);
        v20 = v10 - (v13 + v15);
        v13 = (v11 - v20) * v19;
        v18 = v20 + v13;
LABEL_13:
        v21 = v11 - v18;
        goto LABEL_26;
      case 4:
        break;
      case 5:
        v22 = fabs(v13);
        v23 = vabdd_f64(v10, v15);
        v24 = 1.0;
        if (v10 - v15 <= 1.0)
          v24 = 0.5;
        v25 = v13 / (v10 - v15);
        if (v22 < 2.22044605e-16 || v23 < 2.22044605e-16)
          v25 = v24;
        v13 = (v11 - v15) * v25;
        break;
      case 6:
        v27 = 1.0;
        if (fabs(v15) >= 2.22044605e-16)
        {
          v27 = v15 / (v10 - v13);
          if (vabdd_f64(v10, v13) < 2.22044605e-16)
            v27 = 0.0;
        }
        v21 = (v11 - v13) * v27;
LABEL_26:
        v15 = fmax(v21, 0.0);
        break;
      case 7:
        v28 = v13 / v10;
        v29 = fabs(v10) < 2.22044605e-16;
        v30 = 0.333333333;
        if (v29)
          v28 = 0.333333333;
        v13 = v11 * v28;
        if (!v29)
          v30 = v15 / v10;
        v15 = v11 * v30;
        break;
      default:
        if (os_variant_has_internal_diagnostics())
        {
          __UIFaultDebugAssertLog();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
          {
            LOWORD(buf.a) = 0;
            _os_log_fault_impl(&dword_185066000, v42, OS_LOG_TYPE_FAULT, "Unexpected autoresize mask during view resizing", (uint8_t *)&buf, 2u);
          }

        }
        else
        {
          v16 = _UIInternalPreference_SoftAssertConvertView_block_invoke___s_category;
          if (!_UIInternalPreference_SoftAssertConvertView_block_invoke___s_category)
          {
            v16 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v16, (unint64_t *)&_UIInternalPreference_SoftAssertConvertView_block_invoke___s_category);
          }
          v17 = *(NSObject **)(v16 + 8);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.a) = 0;
            _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Unexpected autoresize mask during view resizing", (uint8_t *)&buf, 2u);
          }
        }
        break;
    }
    if (dyld_program_sdk_at_least())
    {
      v31 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)&buf.a = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&buf.c = v31;
      *(_OWORD *)&buf.tx = *(_OWORD *)(a1 + 96);
      *(_QWORD *)&v31 = 0;
      v32 = 0;
      v33 = v13;
      v34 = v15;
      v45 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v31 - 8), &buf);
      v46 = NSIntegralRectWithOptions(v45, 0x30CuLL);
      x = v46.origin.x;
      y = v46.origin.y;
      width = v46.size.width;
      height = v46.size.height;
      *(_OWORD *)&v46.origin.y = *(_OWORD *)(a1 + 80);
      *(_OWORD *)&buf.a = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&buf.c = *(_OWORD *)&v46.origin.y;
      *(_OWORD *)&buf.tx = *(_OWORD *)(a1 + 96);
      CGAffineTransformInvert(&v43, &buf);
      v47.origin.x = x;
      v47.origin.y = y;
      v47.size.width = width;
      v47.size.height = height;
      v48 = CGRectApplyAffineTransform(v47, &v43);
      v39 = v48.origin.x;
      v40 = v48.size.width;
      *(CGFloat *)v7[2](v7, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v48.origin.x;
    }
    else
    {
      v39 = floor(v13);
      *(double *)v7[2](v7, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v39;
      v40 = floor(v15);
    }
    *(double *)v9[2](v9, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48) = v40;
    if (fabs(v13) == INFINITY)
      v41 = 0.0;
    else
      v41 = v13 - v39;
    *(double *)v7[2](v7, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32) = v41;
    *(double *)v9[2](v9, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48) = v15 - v40;
  }

}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

- (void)_applyISEngineLayoutValuesToBoundsOnly:(BOOL)a3
{
  UIView *v5;
  UIView *v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  _BOOL8 v19;
  BOOL v20;
  uint64_t viewFlags;
  uint64_t v22;
  uint64_t v23;
  int v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  uint64_t v29;
  double v30;
  double MidY;
  CGFloat width;
  CGFloat height;
  double v34;
  double v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat MidX;
  double v39;
  double v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CGFloat v49;
  CGFloat v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints")
    || !-[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine"))
  {
    v5 = self;
  }
  else
  {
    -[UIView superview](self, "superview");
    v5 = (UIView *)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;
  -[UIView _layoutEngineCreateIfNecessary](v5, "_layoutEngineCreateIfNecessary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    -[UIView _layoutEngineCreateIfNecessary](-[UIView superview](v6, "superview"), "_layoutEngineCreateIfNecessary");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
      goto LABEL_47;
  }
  v51.size = 0u;
  objc_msgSend(v7, "delegate", 0, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (dyld_program_sdk_at_least())
  {

LABEL_11:
    if (self)
      -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, &v49, &v51.origin.x, v7, 0);
    v10 = 1;
    goto LABEL_15;
  }
  if (v8)
  {
    v9 = objc_msgSend(v8, "_forceLayoutEngineSolutionInRationalEdges");

    if (v9)
      goto LABEL_11;
  }
  -[UIView _nsis_origin:bounds:inEngine:](self, "_nsis_origin:bounds:inEngine:", &v49, &v51, v7);
  v10 = 0;
LABEL_15:
  *(_QWORD *)&self->_viewFlags |= 0x200000000000000uLL;
  -[UIView bounds](self, "bounds");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v51.origin.x = v11;
  v51.origin.y = v13;
  v19 = -[UIView _safeAreaInsetsFrozen](self, "_safeAreaInsetsFrozen");
  v54.origin.x = v12;
  v54.origin.y = v14;
  v54.size.width = v16;
  v54.size.height = v18;
  v20 = CGRectEqualToRect(v51, v54);
  viewFlags = (uint64_t)self->_viewFlags;
  if (v20)
  {
    if ((viewFlags & 0x20000000000000) != 0)
    {
      if (-[UIView _unconditionallyWantsSetBoundsFromISEngineLayout](self, "_unconditionallyWantsSetBoundsFromISEngineLayout"))
      {
        v22 = (uint64_t)self->_viewFlags;
        if ((v22 & 0x2000000000000000) == 0)
        {
          v23 = *((_QWORD *)&self->_viewFlags + 1);
          v24 = *((_DWORD *)&self->_viewFlags + 4);
          *(_QWORD *)&self->_viewFlags = v22 | 0x2000000000000000;
          *((_QWORD *)&self->_viewFlags + 1) = v23;
          *((_DWORD *)&self->_viewFlags + 4) = v24;
          -[UIView setBounds:](self, "setBounds:", *(_OWORD *)&v51.origin, *(_OWORD *)&v51.size);
        }
      }
    }
  }
  else if ((viewFlags & 0x20000000000000) != 0)
  {
    -[UIView _setSafeAreaInsetsFrozen:](self, "_setSafeAreaInsetsFrozen:", 1);
    -[UIView setBounds:](self, "setBounds:", *(_OWORD *)&v51.origin, *(_OWORD *)&v51.size);
    -[UIView bounds](self, "bounds");
    v55.origin.x = v25;
    v55.origin.y = v26;
    v55.size.width = v27;
    v55.size.height = v28;
    if (!CGRectEqualToRect(v51, v55))
    {
      if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
        -[UIView _constraints_frameDidChange]((uint64_t)self);
      if ((*(_QWORD *)&self->_viewFlags & 0x100000000000000) == 0)
      {
        if (v10)
          -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, &v49, 0, v7, 0);
        else
          -[UIView _nsis_origin:bounds:inEngine:](self, "_nsis_origin:bounds:inEngine:", &v49, 0, v7);
      }
    }
  }
  v29 = (uint64_t)self->_viewFlags;
  *(_QWORD *)&self->_viewFlags = v29 & 0xDF7FFFFFFFFFFFFFLL | 0x80000000000000;
  if ((~v29 & 0x20080000000000) == 0)
    -[UIView _resetLayoutEngineHostConstraints](self);
  if ((v10 & 1) != 0)
  {
    v30 = v49;
    MidY = v50;
  }
  else
  {
    -[UIView frame](self, "frame");
    width = v52.size.width;
    height = v52.size.height;
    v34 = v18;
    v35 = v16;
    v37 = v49;
    v36 = v50;
    v52.origin.x = v49;
    v52.origin.y = v50;
    MidX = CGRectGetMidX(v52);
    v53.origin.x = v37;
    v53.origin.y = v36;
    v16 = v35;
    v18 = v34;
    v30 = MidX;
    v53.size.width = width;
    v53.size.height = height;
    MidY = CGRectGetMidY(v53);
  }
  if (kdebug_is_enabled())
  {
    -[UIView center](self, "center");
    if (v30 == v40 && MidY == v39)
    {
      v56.origin.x = v12;
      v56.origin.y = v14;
      v56.size.width = v16;
      v56.size.height = v18;
      if (CGRectEqualToRect(v51, v56))
      {
        -[UIView description](self, "description");
        v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v41, "UTF8String");
        kdebug_trace_string();

        -[UIView superview](self, "superview");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "description");
        v43 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        objc_msgSend(v43, "UTF8String");
        kdebug_trace_string();

        -[UIView superview](self, "superview");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        kdebug_trace();

      }
    }
  }
  if (!a3)
  {
    -[UIView center](self, "center");
    if ((v30 != v46 || MidY != v45) && (*(_QWORD *)&self->_viewFlags & 0x20000000000000) != 0)
    {
      -[UIView _setSafeAreaInsetsFrozen:](self, "_setSafeAreaInsetsFrozen:", 1);
      -[UIView setCenter:](self, "setCenter:", v30, MidY);
      -[UIView center](self, "center");
      if (v30 != v48 || MidY != v47)
      {
        if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
          -[UIView _constraints_frameDidChange]((uint64_t)self);
      }
    }
  }
  -[UIView _setSafeAreaInsetsFrozen:](self, "_setSafeAreaInsetsFrozen:", v19);
  *(_QWORD *)&self->_viewFlags &= ~0x200000000000000uLL;

LABEL_47:
}

- (void)_setSafeAreaInsetsFrozen:(BOOL)a3 updateForUnfreeze:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t v7;
  uint64_t v8;

  v4 = a4;
  v5 = a3;
  if (-[UIView _safeAreaInsetsFrozen](self, "_safeAreaInsetsFrozen") != a3)
  {
    v7 = 0x2000000000000000;
    if (!v5)
      v7 = 0;
    *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xDFFFFFFFFFFFFFFFLL | v7;
    if (v4 && !v5)
    {
      v8 = *(_QWORD *)((char *)&self->_viewFlags + 20);
      if ((v8 & 0x20000000000) != 0)
        *(_QWORD *)((char *)&self->_viewFlags + 20) = v8 | 0x80000000000;
      -[UIView _updateSafeAreaInsets](self, "_updateSafeAreaInsets");
    }
  }
}

- (void)_setSafeAreaInsetsFrozen:(BOOL)a3
{
  -[UIView _setSafeAreaInsetsFrozen:updateForUnfreeze:](self, "_setSafeAreaInsetsFrozen:updateForUnfreeze:", a3, 1);
}

- (void)_startObservingVariablesOnlyToSupportTAMICChange:(BOOL)a3
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  NSMutableArray *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t m;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = -[UIView _uili_existingBaseFrameVariables](self, "_uili_existingBaseFrameVariables");
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v39, v46, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v40 != v8)
          objc_enumerationMutation(v5);
        _UILayoutItemSetUpVariableObservation(self, *(void **)(*((_QWORD *)&v39 + 1) + 8 * i), 1);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v39, v46, 16);
    }
    while (v7);
  }
  if (!a3)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v10 = -[UIView _uili_existingObservationEligibleLayoutVariables](self, "_uili_existingObservationEligibleLayoutVariables");
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v36;
      do
      {
        for (j = 0; j != v12; ++j)
        {
          if (*(_QWORD *)v36 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * j);
          if ((objc_msgSend(v5, "containsObject:", v15) & 1) == 0)
            _UILayoutItemSetUpVariableObservation(self, v15, 0);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v45, 16);
      }
      while (v12);
    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v16 = -[UIView _mutableLayoutGuides](self, "_mutableLayoutGuides");
    v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v31, v44, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v32;
      do
      {
        for (k = 0; k != v18; ++k)
        {
          if (*(_QWORD *)v32 != v19)
            objc_enumerationMutation(v16);
          v21 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * k);
          v27 = 0u;
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          v22 = (void *)objc_msgSend(v21, "_uili_existingObservationEligibleLayoutVariables", 0);
          v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v27, v43, 16);
          if (v23)
          {
            v24 = v23;
            v25 = *(_QWORD *)v28;
            do
            {
              for (m = 0; m != v24; ++m)
              {
                if (*(_QWORD *)v28 != v25)
                  objc_enumerationMutation(v22);
                _UILayoutItemSetUpVariableObservation(v21, *(void **)(*((_QWORD *)&v27 + 1) + 8 * m), 0);
              }
              v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v27, v43, 16);
            }
            while (v24);
          }
        }
        v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v31, v44, 16);
      }
      while (v18);
    }
  }
}

- (NSArray)layoutGuides
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  -[UIView _mutableLayoutGuides](self, "_mutableLayoutGuides");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");
  v4 = (void *)v3;
  v5 = (void *)MEMORY[0x1E0C9AA60];
  if (v3)
    v5 = (void *)v3;
  v6 = v5;

  return (NSArray *)v6;
}

- (NSMutableArray)_mutableLayoutGuides
{
  return (NSMutableArray *)objc_getAssociatedObject(self, &_UIViewLayoutGuidesAssocObjectKey);
}

- (void)nsis_valueOfVariable:(id)a3 didChangeInEngine:(id)a4
{
  id v7;
  _BOOL4 v8;
  UIView *v9;
  NSISEngine *v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 v13;
  UIView *v14;
  UIView *v15;

  if (((_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_UIKitEngineTracking, (uint64_t)CFSTR("UIKitEngineTracking")) & 1) != 0|| byte_1ECD769CC)&& objc_msgSend(a4, "_UIKitEngineTrackingOn"))
  {
    objc_msgSend(a4, "pivotCount");
    objc_msgSend(a4, "variableChangeCount");
    objc_msgSend(a4, "_UIKitRowCount");
    kdebug_trace();
    objc_msgSend(a4, "_setUIKitEngineTrackingOn:", 0);
  }
  v7 = -[UIView _boundsWidthVariable](self, "_boundsWidthVariable");
  if (v7 == a3 || -[UIView _boundsHeightVariable](self, "_boundsHeightVariable") == a3)
    *(_QWORD *)&self->_viewFlags &= ~0x80000000000000uLL;
  v8 = -[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine");
  v9 = self;
  if (v8)
    v9 = -[UIView superview](self, "superview");
  v10 = -[UIView _layoutEngine](v9, "_layoutEngine");
  v11 = -[NSISEngine delegate](v10, "delegate");
  v12 = (_QWORD *)v11;
  if (v11)
  {
    if ((*(_QWORD *)(v11 + 112) & 0x1000) != 0)
      return;
    v13 = v10 == a4;
    if (v7 == a3 && v10 == a4)
    {
      if (-[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass"))
        -[UIView _setNeedsUpdateConstraintsNeedingLayout:](self, "_setNeedsUpdateConstraintsNeedingLayout:", (v12[14] & 0x24) == 0);
      v13 = 1;
    }
  }
  else
  {
    v13 = v10 == a4;
  }
  v14 = -[UIView superview](self, "superview");
  if (v13)
  {
    v15 = v14;
    if (v14)
    {
      if (~*(_QWORD *)&v14->_viewFlags & 0x8000000000000000 | ~*((_DWORD *)&v14->_viewFlags + 2) & 2)
      {
        if ((dyld_program_sdk_at_least() & 1) != 0
          || v12 && objc_msgSend(v12, "_forceLayoutEngineSolutionInRationalEdges"))
        {
          if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints")
            || -[UIView _layoutEngine](v15, "_layoutEngine") != a4)
          {
            return;
          }
          objc_msgSend(+[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger"), "willSendSetNeedsLayoutToView:becauseOfChangeInVariable:inLayoutEngine:", v15, a3, a4);
        }
        -[UIView setNeedsLayout](v15, "setNeedsLayout");
      }
    }
  }
}

- (int)nsis_orientationHintForVariable:(id)a3
{
  int has_internal_diagnostics;
  UIView *v6;
  unint64_t v7;
  NSObject *v8;
  int result;
  uint64_t v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  UIView *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v6 = (UIView *)objc_msgSend(a3, "delegate");
  if (has_internal_diagnostics)
  {
    if (v6 != self)
    {
      v11 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        v16 = 138412802;
        v17 = self;
        v18 = 2112;
        v19 = a3;
        v20 = 2112;
        v21 = objc_msgSend(a3, "delegate");
        _os_log_fault_impl(&dword_185066000, v11, OS_LOG_TYPE_FAULT, "%@ got asked for the orientationHint of a variable its not the owner of:%@, which is owned by:%@", (uint8_t *)&v16, 0x20u);
      }
    }
  }
  else if (v6 != self)
  {
    v12 = qword_1ECD791A0;
    if (!qword_1ECD791A0)
    {
      v12 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v12, (unint64_t *)&qword_1ECD791A0);
    }
    v13 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = 138412802;
      v17 = self;
      v18 = 2112;
      v19 = a3;
      v20 = 2112;
      v21 = objc_msgSend(a3, "delegate");
      _os_log_impl(&dword_185066000, v13, OS_LOG_TYPE_ERROR, "%@ got asked for the orientationHint of a variable its not the owner of:%@, which is owned by:%@", (uint8_t *)&v16, 0x20u);
    }
  }
  if (-[UIView _boundsWidthVariable](self, "_boundsWidthVariable") == a3
    || -[UIView _minXVariable](self, "_minXVariable") == a3)
  {
    return 0;
  }
  if (-[UIView _boundsHeightVariable](self, "_boundsHeightVariable") == a3
    || -[UIView _minYVariable](self, "_minYVariable") == a3)
  {
    return 1;
  }
  if (-[UIView _contentWidthVariable](self, "_contentWidthVariable") == a3
    || -[UIView _contentXOffsetVariable](self, "_contentXOffsetVariable") == a3)
  {
    return 0;
  }
  if (-[UIView _contentHeightVariable](self, "_contentHeightVariable") == a3
    || -[UIView _contentYOffsetVariable](self, "_contentYOffsetVariable") == a3)
  {
    return 1;
  }
  if (os_variant_has_internal_diagnostics())
  {
    v14 = __UIFaultDebugAssertLog();
    result = os_log_type_enabled(v14, OS_LOG_TYPE_FAULT);
    if (result)
    {
      v15 = objc_msgSend(a3, "delegate");
      v16 = 138412802;
      v17 = self;
      v18 = 2112;
      v19 = a3;
      v20 = 2112;
      v21 = v15;
      _os_log_fault_impl(&dword_185066000, v14, OS_LOG_TYPE_FAULT, "%@ got asked for the orientationHint of a variable it doesn't know about:%@, which is owned by:%@", (uint8_t *)&v16, 0x20u);
      return 0;
    }
  }
  else
  {
    v7 = qword_1ECD791A8;
    if (!qword_1ECD791A8)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&qword_1ECD791A8);
    }
    v8 = *(NSObject **)(v7 + 8);
    result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v10 = objc_msgSend(a3, "delegate");
      v16 = 138412802;
      v17 = self;
      v18 = 2112;
      v19 = a3;
      v20 = 2112;
      v21 = v10;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "%@ got asked for the orientationHint of a variable it doesn't know about:%@, which is owned by:%@", (uint8_t *)&v16, 0x20u);
      return 0;
    }
  }
  return result;
}

- (id)_uili_existingBaseFrameVariables
{
  void *v3;

  if (!-[UIView _minXVariable](self, "_minXVariable")
    && !-[UIView _minYVariable](self, "_minYVariable")
    && !-[UIView _boundsWidthVariable](self, "_boundsWidthVariable")
    && !-[UIView _boundsHeightVariable](self, "_boundsHeightVariable"))
  {
    return 0;
  }
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (-[UIView _minXVariable](self, "_minXVariable"))
    objc_msgSend(v3, "addObject:", -[UIView _minXVariable](self, "_minXVariable"));
  if (-[UIView _minYVariable](self, "_minYVariable"))
    objc_msgSend(v3, "addObject:", -[UIView _minYVariable](self, "_minYVariable"));
  if (-[UIView _boundsWidthVariable](self, "_boundsWidthVariable"))
    objc_msgSend(v3, "addObject:", -[UIView _boundsWidthVariable](self, "_boundsWidthVariable"));
  if (-[UIView _boundsHeightVariable](self, "_boundsHeightVariable"))
    objc_msgSend(v3, "addObject:", -[UIView _boundsHeightVariable](self, "_boundsHeightVariable"));
  return v3;
}

- (void)_handleSizeConstraintsAsAppropriate
{
  if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
  {
    if (-[UIView _usesAutoresizingConstraints]((uint64_t)self))
      -[UIView _updateAutoresizingConstraints](self);
  }
  else
  {
    -[UIView _updateContentSizeConstraints](self);
  }
}

- (void)_invalidateIntrinsicContentSizeNeedingLayout:(BOOL)a3
{
  _BOOL8 v3;
  int v5;
  char v6;
  int v7;

  v3 = a3;
  if (!-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
  {
    *(_QWORD *)&self->_viewFlags &= ~0x400000000000uLL;
    v5 = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
    if ((v5 & 1) == 0 && -[UIView _wantsAutolayout](self, "_wantsAutolayout"))
      -[UIView _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel](self, "_invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel");
    if ((*((_QWORD *)&self->_viewFlags + 1) & 4) == 0)
    {
      if ((*(_QWORD *)&self->_viewFlags & 0x100000000000) != 0)
        v6 = 0;
      else
        v6 = v5;
      if ((v6 & 1) == 0)
      {
        v7 = v5 ^ 1;
        -[UIView _setNeedsUpdateConstraintsNeedingLayout:](self, "_setNeedsUpdateConstraintsNeedingLayout:", v7 & v3);
        if ((v7 & 1) == 0 && (*(_QWORD *)&self->_viewFlags & 0x20) != 0)
          objc_msgSend((id)-[NSISEngine delegate](-[UIView _layoutEngine](-[UIView superview](self, "superview"), "_layoutEngine"), "delegate"), "_scheduleUpdateConstraintsPassAsEngineHostNeedingLayout:", v3);
      }
    }
  }
  -[UIView _didInvalidateIntrinsicContentSize](self, "_didInvalidateIntrinsicContentSize");
  -[UIView _intrinsicContentSizeInvalidatedForChildView:](-[UIView superview](self, "superview"), "_intrinsicContentSizeInvalidatedForChildView:", self);
}

- (void)_invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD v5[6];

  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1000) == 0)
  {
    v3 = -[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate");
    if (v3)
    {
      v4 = (_QWORD *)v3;
      if ((*(_QWORD *)(v3 + 112) & 0x1000) == 0)
      {
        if ((*(_QWORD *)(v3 + 104) & 0x20000000000000) != 0
          && -[UIView _usesLayoutEngineHostingConstraints](v3))
        {
          objc_msgSend(v4, "_invalidateIntrinsicContentSizeNeedingLayout:", 0);
        }
        if ((v4[14] & 0x800) == 0)
        {
          v5[0] = MEMORY[0x1E0C809B0];
          v5[1] = 3221225472;
          v5[2] = __109__UIView_UIConstraintBasedLayout_EngineDelegate___invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel__block_invoke;
          v5[3] = &unk_1E16E9B60;
          v5[4] = v4;
          v5[5] = self;
          _UIViewTopDownSubtreeTraversal((uint64_t)v4, v5, 0);
          v4[14] |= 0x800uLL;
        }
      }
    }
  }
}

- (void)_updateConstraintsIfNeededCollectingViews:(id)a3 forSecondPass:(BOOL)a4
{
  _BOOL8 v4;
  uint64_t v7;
  double v8;
  uint64_t viewFlags;
  uint64_t v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t k;
  _QWORD v26[2];
  id (*v27)(uint64_t, uint64_t);
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;
  CGRect v46;

  v4 = a4;
  v45 = *MEMORY[0x1E0C80C00];
  if (!a4 && (*((_QWORD *)&self->_viewFlags + 1) & 0x1000) == 0)
  {
    if (dyld_program_sdk_at_least())
    {
      if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
      {
        if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
        {
          v7 = objc_msgSend((id)objc_msgSend(-[UIView _previousFittingSizeInfo](self, "_previousFittingSizeInfo"), "allKeys"), "objectAtIndexedSubscript:", 0);
          if (v7)
          {
            v8 = *(double *)(v7 + 24);
            -[UIView bounds](self, "bounds");
            if (v8 != CGRectGetWidth(v46))
              -[UIView _recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:](self, "_recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:", 0);
          }
        }
      }
    }
  }
  viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x200000000000) == 0)
  {
    v10 = *((_QWORD *)&self->_viewFlags + 1);
    v11 = *((_DWORD *)&self->_viewFlags + 4);
    *(_QWORD *)&self->_viewFlags = viewFlags | 0x200000000000;
    *((_QWORD *)&self->_viewFlags + 1) = v10;
    *((_DWORD *)&self->_viewFlags + 4) = v11;
    v12 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    if (v4
      && (*(_QWORD *)&self->_viewFlags & 0x20100000000000) == 0x20000000000000
      && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    {
      -[UIView _resetLayoutEngineHostConstraintsForAxis:collectingViews:](self, "_resetLayoutEngineHostConstraintsForAxis:collectingViews:", 0, v12);
    }
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v39 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * i), "_setInSecondConstraintsPass:", 1);
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
      }
      while (v14);
    }
    v17 = -[UIView _allSubviews](self, "_allSubviews");
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v35;
      do
      {
        for (j = 0; j != v19; ++j)
        {
          if (*(_QWORD *)v35 != v20)
            objc_enumerationMutation(v17);
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * j), "_recursiveUpdateConstraintsIfNeededCollectingViews:forSecondPass:", a3, v4);
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
      }
      while (v19);
    }
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v22 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v31;
      do
      {
        for (k = 0; k != v23; ++k)
        {
          if (*(_QWORD *)v31 != v24)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * k), "_setInSecondConstraintsPass:", 0);
        }
        v23 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
      }
      while (v23);
    }

    viewFlags = (uint64_t)self->_viewFlags;
  }
  if ((viewFlags & 0x100000000000) == 0)
  {
    if ((viewFlags & 0x20000000000000) != 0
      && !v4
      && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    {
      -[UIView _relaxLayoutEngineHostConstraints](self);
    }
    -[UIView _sendUpdateConstraintsIfNecessaryForSecondPass:](self, "_sendUpdateConstraintsIfNecessaryForSecondPass:", v4);
    if (!v4)
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v27 = __91__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke;
      v28 = &unk_1E16E9A78;
      v29 = a3;
      if (-[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass"))
        objc_msgSend(__91__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke((uint64_t)v26, (uint64_t)CFSTR("_UIViewsNeedingSecondPass")), "addObject:", self);
      if (-[UIView _wantsBaselineUpdatingFollowingConstraintsPass](self, "_wantsBaselineUpdatingFollowingConstraintsPass"))
      {
        objc_msgSend(__91__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke((uint64_t)v26, (uint64_t)CFSTR("_UIViewsNeedingBaselineUpdate")), "addObject:", self);
      }
      if ((*(_QWORD *)&self->_viewFlags & 0x20000000000000) != 0)
      {
        if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
          objc_msgSend(v27((uint64_t)v26, (uint64_t)CFSTR("_UIViewsPotentialTAMIC_NOEngineHosts")), "addObject:", self);
      }
    }
  }
}

- (uint64_t)_usesAutoresizingConstraints
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    result = objc_msgSend((id)result, "translatesAutoresizingMaskIntoConstraints");
    if ((_DWORD)result)
    {
      if ((v1[13] & 0x400000000000000) != 0)
      {
        if ((objc_msgSend((id)objc_msgSend(v1, "superview"), "_wantsAutolayout") & 1) != 0)
          return 1;
        else
          return objc_msgSend(v1, "_hostsLayoutEngine") ^ 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

- (BOOL)translatesAutoresizingMaskIntoConstraints
{
  return (*(_QWORD *)&self->_viewFlags & 0x20000000000000) == 0;
}

- (void)_recursiveUpdateConstraintsIfNeededCollectingViews:(id)a3 forSecondPass:(BOOL)a4
{
  _BOOL8 v4;
  NSISEngine *v7;
  _QWORD v8[6];
  BOOL v9;

  v4 = a4;
  if (!-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    goto LABEL_6;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __100__UIView_AdditionalLayoutSupport___recursiveUpdateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke;
  v8[3] = &unk_1E16CC1D8;
  v8[4] = self;
  v8[5] = a3;
  v9 = v4;
  if (!self)
    return;
  v7 = -[UIView _layoutEngine](self, "_layoutEngine");
  if (!v7)
  {
LABEL_6:
    -[UIView _updateConstraintsIfNeededCollectingViews:forSecondPass:](self, "_updateConstraintsIfNeededCollectingViews:forSecondPass:", a3, v4);
    return;
  }
  -[NSISEngine withAutomaticOptimizationDisabled:](v7, "withAutomaticOptimizationDisabled:", v8);
}

- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass
{
  return 0;
}

- (void)_sendUpdateConstraintsIfNecessaryForSecondPass:(BOOL)a3
{
  UIViewController *v5;
  char *v6;
  void *v7;
  int v8;
  char *v9;
  uint64_t viewFlags;
  uint64_t v11;
  _BYTE __dst[352];
  _BYTE v13[352];
  _OWORD __src[22];

  if ((*(_QWORD *)&self->_viewFlags & 0x100000000000) == 0
    || -[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass"))
  {
    if (!a3 && -[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass"))
      -[UIView _resetToBeginningOfDoublePass](self, "_resetToBeginningOfDoublePass");
    v5 = self->_viewDelegate;
    *((_QWORD *)&self->_viewFlags + 1) |= 4uLL;
    os_variant_has_internal_diagnostics();
    v6 = +[UITraitCollection _currentTraitCollectionIfExists]();
    +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", -[UIView traitCollection](self, "traitCollection"));
    v7 = (void *)_UISetCurrentFallbackEnvironment(self);
    memset(__src, 0, sizeof(__src));
    _UIBeginTrackingTraitUsage(self, v5, __src);
    v8 = _UIObservationTrackingEnabled();
    if (v5)
    {
      if (v8)
        -[UIViewController _updateViewConstraintsWithObservationTracking](v5, "_updateViewConstraintsWithObservationTracking");
      else
        -[UIViewController updateViewConstraints](v5, "updateViewConstraints");
    }
    else if (v8)
    {
      -[UIView _updateConstraintsWithObservationTracking](self, "_updateConstraintsWithObservationTracking");
    }
    else
    {
      -[UIView updateConstraints](self, "updateConstraints");
    }
    memcpy(__dst, __src, sizeof(__dst));
    v9 = (char *)GetTraitCollectionTSD() + 16;
    memcpy(v13, v9, sizeof(v13));
    memcpy(v9, __dst, 0x160uLL);
    -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)self, (uint64_t)&v13[136], -[UIView methodForSelector:](self, "methodForSelector:", sel_updateConstraints), sel__setNeedsUpdateConstraints);
    -[UIViewController _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)v5, (uint64_t)&v13[312], -[UIViewController methodForSelector:](v5, "methodForSelector:", sel_updateViewConstraints), sel__invalidateViewConstraints);
    _UITraitUsageTrackingResultDestroy((uint64_t)v13);
    _UIRestorePreviousFallbackEnvironment(v7);
    +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v6);
    if ((*((_QWORD *)&self->_viewFlags + 1) & 0x2000) == 0
      && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
      && !-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"))
    {
      -[UIView _updateLayoutEngineHostConstraints](self, "_updateLayoutEngineHostConstraints");
    }
    viewFlags = (uint64_t)self->_viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) &= ~4uLL;
    if ((viewFlags & 0x100000000000) == 0)
    {
      v11 = *MEMORY[0x1E0C99768];
      if (v5)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v11, CFSTR("The layout constraints still need update after sending -updateViewConstraints to %@.\n%@ or one of its superclasses may have overridden -updateViewConstraints without calling super or sending -updateConstraints to the view. Or, something may have dirtied layout constraints in the middle of updating them.  Both are programming errors."), v5, objc_opt_class());
      else
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v11, CFSTR("The layout constraints still need update after sending -updateConstraints to %@.\n%@ or one of its superclasses may have overridden -updateConstraints without calling super. Or, something may have dirtied layout constraints in the middle of updating them.  Both are programming errors."), self, objc_opt_class());
    }
  }
}

- (void)_updateSystemConstraints
{
  uint64_t v3;
  uint64_t viewFlags;
  int v5;

  -[UIView _applyPendingTraitStorageConstraints](self, "_applyPendingTraitStorageConstraints");
  -[UIView _handleDoubleUpdateConstraintsIfNecessary](self, "_handleDoubleUpdateConstraintsIfNecessary");
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x2000) == 0)
    -[UIView _handleLayoutEngineHostingConstraintsIfNecessary](self, "_handleLayoutEngineHostingConstraintsIfNecessary");
  -[UIView _handleLayoutArrangementConstraintsIfNecessary](self, "_handleLayoutArrangementConstraintsIfNecessary");
  v3 = *((_QWORD *)&self->_viewFlags + 1);
  if ((v3 & 0x2000) != 0)
  {
    viewFlags = (uint64_t)self->_viewFlags;
  }
  else
  {
    -[UIView _handleSizeConstraintsAsAppropriate](self, "_handleSizeConstraintsAsAppropriate");
    viewFlags = (uint64_t)self->_viewFlags;
    v3 = *((_QWORD *)&self->_viewFlags + 1);
  }
  v5 = *((_DWORD *)&self->_viewFlags + 4);
  *(_QWORD *)&self->_viewFlags = viewFlags | 0x100000000000;
  *((_QWORD *)&self->_viewFlags + 1) = v3;
  *((_DWORD *)&self->_viewFlags + 4) = v5;
}

- (void)_handleLayoutArrangementConstraintsIfNecessary
{
  NSMutableArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = -[UIView _mutableLayoutArrangements](self, "_mutableLayoutArrangements");
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "_updateArrangementConstraints");
      }
      while (v4 != v6);
      v4 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }
}

- (void)_applyPendingTraitStorageConstraints
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  void *v4;
  id v5;

  p_viewFlags = &self->_viewFlags;
  if ((*((_BYTE *)&self->_viewFlags + 22) & 0x10) != 0)
  {
    objc_getAssociatedObject(self, &unk_1EDDCA605);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_getAssociatedObject(self, &unk_1EDDCA606);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(self, &unk_1EDDCA605, 0, (void *)1);
    objc_setAssociatedObject(self, &unk_1EDDCA606, 0, (void *)1);
    *(_QWORD *)((char *)p_viewFlags + 20) &= ~0x100000uLL;
    -[UIView _applyTraitStorageConstraintsByRemoving:adding:](self, (uint64_t)v4, v5);

  }
}

- (void)_handleDoubleUpdateConstraintsIfNecessary
{
  int v3;
  UIView *v4;
  double v5;
  double v6;

  if (-[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass")
    && -[UIView _hasLayoutEngine](self, "_hasLayoutEngine"))
  {
    if ((*(_QWORD *)&self->_viewFlags & 0xC000000000000) != 0)
    {
      v3 = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
      v4 = self;
      if (v3)
        v4 = -[UIView superview](self, "superview");
      -[UIView _prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:](self, "_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:", -[UIView _nsis_compatibleBoundsInEngine:](self, -[UIView _layoutEngine](v4, "_layoutEngine")));
      -[UIView _preferredMaxLayoutWidth](self, "_preferredMaxLayoutWidth");
      if (v5 <= 0.0)
      {
        -[UIView _setMultilineContextWidth:](self, "_setMultilineContextWidth:", -1.0);
        return;
      }
      objc_msgSend((id)objc_msgSend((id)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate"), "_engineHostingWidthConstraint"), "constant");
      if (v6 <= 0.0)
        v6 = -1.0;
      -[UIView _setMultilineContextWidth:](self, "_setMultilineContextWidth:", v6);
    }
    else
    {
      -[UIView _prepareForFirstIntrinsicContentSizeCalculation](self, "_prepareForFirstIntrinsicContentSizeCalculation");
    }
    *(_QWORD *)&self->_viewFlags &= ~0x400000000000uLL;
  }
}

- (void)_handleLayoutEngineHostingConstraintsIfNecessary
{
  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    -[UIView _updateLayoutEngineHostConstraints](self, "_updateLayoutEngineHostConstraints");
}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

- (BOOL)_wantsAutolayout
{
  return (*(_QWORD *)&self->_viewFlags >> 58) & 1;
}

- (BOOL)_unconditionallyWantsSetBoundsFromISEngineLayout
{
  return dyld_program_sdk_at_least();
}

- (id)_previousFittingSizeInfo
{
  return objc_getAssociatedObject(self, &_UIViewFittingSizeInfo);
}

- (BOOL)_shouldNotifyGeometryObserversForBaselineChanges
{
  _BOOL8 v2;

  if ((*((_DWORD *)&self->_viewFlags + 4) & 1) != 0)
  {
    LODWORD(v2) = -[UIView _hasFontInfoForVerticalBaselineSpacing](self, "_hasFontInfoForVerticalBaselineSpacing");
    if (v2)
    {
      if ((*((_DWORD *)&self->_viewFlags + 4) & 0x3CLL) != 0)
        LOBYTE(v2) = 1;
      else
        return *((_QWORD *)&self->_viewFlags + 1) >> 63;
    }
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

uint64_t __100__UIView_AdditionalLayoutSupport___recursiveUpdateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateConstraintsIfNeededCollectingViews:forSecondPass:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

- (BOOL)_hasLayoutEngine
{
  return -[UIView _layoutEngine](self, "_layoutEngine") != 0;
}

- (void)_setAutoresizingConstraints:(_QWORD *)a1
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  int has_internal_diagnostics;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  NSObject *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v4 = a1[13] & 0x420000000000000;
  if (os_variant_has_internal_diagnostics())
  {
    if (v4 == 0x400000000000000)
    {
LABEL_4:
      v5 = (void *)objc_msgSend(a1, "superview");
      if (v5)
      {
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v6 = (void *)-[UIView _autoresizingConstraints](a1);
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, buf, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v25;
          do
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v25 != v9)
                objc_enumerationMutation(v6);
              -[UIView _layoutEngine_willRemoveLayoutConstraint:](v5, *(void **)(*((_QWORD *)&v24 + 1) + 8 * i));
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, buf, 16);
          }
          while (v8);
        }
      }
      if (objc_msgSend(a2, "count", (_QWORD)v24))
        objc_msgSend(v5, "_layoutEngineCreateIfNecessary");
      objc_msgSend(a1, "_setInternalConstraints:", a2);
      if (v5)
      {
        has_internal_diagnostics = os_variant_has_internal_diagnostics();
        v12 = a1[13];
        if (has_internal_diagnostics)
        {
          if ((v12 & 0x400000000000000) == 0)
          {
            v21 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_185066000, v21, OS_LOG_TYPE_FAULT, "Don't add autoresizing constraints for views that don't want autolayout", buf, 2u);
            }
          }
        }
        else if ((v12 & 0x400000000000000) == 0)
        {
          v22 = qword_1ECD79160;
          if (!qword_1ECD79160)
          {
            v22 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v22, (unint64_t *)&qword_1ECD79160);
          }
          v23 = *(NSObject **)(v22 + 8);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_185066000, v23, OS_LOG_TYPE_ERROR, "Don't add autoresizing constraints for views that don't want autolayout", buf, 2u);
          }
        }
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v13 = (void *)-[UIView _autoresizingConstraints](a1);
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, buf, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v25;
          do
          {
            for (j = 0; j != v15; ++j)
            {
              if (*(_QWORD *)v25 != v16)
                objc_enumerationMutation(v13);
              -[UIView _layoutEngine_didAddLayoutConstraint:roundingAdjustment:mutuallyExclusiveConstraints:](v5, *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * j), 0, 0.0);
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, buf, 16);
          }
          while (v15);
        }
      }
      return;
    }
    v18 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v29 = a1;
      _os_log_fault_impl(&dword_185066000, v18, OS_LOG_TYPE_FAULT, "UIKit bug: Setting autoresizing constraints when autoresizing is off for %@", buf, 0xCu);
    }
  }
  else
  {
    if (v4 == 0x400000000000000)
      goto LABEL_4;
    v19 = qword_1ECD79158;
    if (!qword_1ECD79158)
    {
      v19 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v19, (unint64_t *)&qword_1ECD79158);
    }
    v20 = *(NSObject **)(v19 + 8);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v29 = a1;
      _os_log_impl(&dword_185066000, v20, OS_LOG_TYPE_ERROR, "UIKit bug: Setting autoresizing constraints when autoresizing is off for %@", buf, 0xCu);
    }
  }
}

- (uint64_t)_autoresizingConstraints
{
  uint64_t v2;
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1[13] & 0x420000000000000;
    if (os_variant_has_internal_diagnostics())
    {
      if (v2 == 0x400000000000000)
        return objc_msgSend(a1, "_internalConstraints");
      v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        v7 = 138412290;
        v8 = a1;
        _os_log_fault_impl(&dword_185066000, v4, OS_LOG_TYPE_FAULT, "UIKit bug: Retrieving autoresizing constraints when autoresizing is off for %@", (uint8_t *)&v7, 0xCu);
      }
    }
    else
    {
      if (v2 == 0x400000000000000)
        return objc_msgSend(a1, "_internalConstraints");
      v5 = _autoresizingConstraints___s_category;
      if (!_autoresizingConstraints___s_category)
      {
        v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&_autoresizingConstraints___s_category);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = 138412290;
        v8 = a1;
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "UIKit bug: Retrieving autoresizing constraints when autoresizing is off for %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  return 0;
}

- (double)_nsis_compatibleBoundsInEngine:(void *)a1
{
  __int128 v3;
  void *v5;
  __int128 v7;
  __int128 v8;

  if (a1)
  {
    v3 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    v7 = *MEMORY[0x1E0C9D648];
    v8 = v3;
    if (a2)
    {
      v5 = (void *)objc_msgSend(a2, "delegate");
      if ((dyld_program_sdk_at_least() & 1) != 0
        || v5 && objc_msgSend(v5, "_forceLayoutEngineSolutionInRationalEdges"))
      {
        -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](a1, 0, (double *)&v7, a2, 0);
      }
      else
      {
        objc_msgSend(a1, "_nsis_origin:bounds:inEngine:", 0, &v7, a2);
      }
    }
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  return *(double *)&v7;
}

id __91__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = (id)objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
  if (!v4)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v4, a2);

  }
  return v4;
}

- (void)_resetToBeginningOfDoublePass
{
  *(_QWORD *)&self->_viewFlags &= 0xFFF3FFFFFFFFFFFFLL;
}

- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(CGRect)a3
{
  double v4;

  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  -[UIView _setStoredLayoutEngineWidth:](self, v4);
  *(_QWORD *)&self->_viewFlags &= ~0x4000000000000uLL;
}

- (void)_prepareForFirstIntrinsicContentSizeCalculation
{
  -[UIView _setStoredLayoutEngineWidth:](self, 0.0);
  *(_QWORD *)&self->_viewFlags |= 0x4000000000000uLL;
}

- (void)_setStoredLayoutEngineWidth:(_QWORD *)object
{
  unint64_t v4;

  if (object)
  {
    if (a2 == 0.0 || !objc_msgSend(object, "_axesForDerivingIntrinsicContentSizeFromLayoutSize"))
    {
      if ((object[13] & 0x2000000000000) == 0)
        return;
      objc_setAssociatedObject(object, &_UIViewLayoutEngineWidthStorageKey, 0, (void *)1);
      v4 = object[13] & 0xFFFDFFFFFFFFFFFFLL;
    }
    else
    {
      objc_setAssociatedObject(object, &_UIViewLayoutEngineWidthStorageKey, (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2), (void *)1);
      v4 = object[13] | 0x2000000000000;
    }
    object[13] = v4;
  }
}

- (_QWORD)_updateAutoresizingConstraints
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;

  if (result)
  {
    v1 = result;
    if ((result[14] & 0x1000) == 0)
    {
      result = (_QWORD *)-[UIView _autoresizingConstraints](result);
      if (!result)
      {
        v2 = objc_msgSend(v1, "superview");
        v3 = (_QWORD *)v2;
        if (v2)
        {
          v4 = *(_QWORD *)(v2 + 112);
          v5 = (v4 >> 1) & 1;
          *(_QWORD *)(v2 + 112) = v4 | 2;
        }
        else
        {
          LOBYTE(v5) = 0;
        }
        v6 = -[UIView _constraintsEquivalentToAutoresizingMask](v1);
        -[UIView _setAutoresizingConstraints:](v1, v6);
        result = (_QWORD *)objc_msgSend(v6, "count");
        if (result)
          result = (_QWORD *)objc_msgSend(v3, "_setWantsAutolayout");
        if (v3)
          v3[14] = v3[14] & 0xFFFFFFFFFFFFFFFDLL | (2 * (v5 & 1));
      }
    }
  }
  return result;
}

- (id)_engineHostingWidthConstraint
{
  void *v3;
  void *v4;
  unint64_t v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[8];
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    return 0;
  v3 = (void *)objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "firstObject");
  v4 = v3;
  if (!v3
    || (objc_msgSend((id)objc_msgSend(v3, "identifier"), "isEqualToString:", CFSTR("UIView-Encapsulated-Layout-Width")) & 1) != 0)
  {
    return v4;
  }
  if (os_variant_has_internal_diagnostics())
  {
    v13 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_185066000, v13, OS_LOG_TYPE_FAULT, "Internal UIKit Bug: did not find engine host width constraint where expected", buf, 2u);
    }
  }
  else
  {
    v5 = _engineHostingWidthConstraint___s_category;
    if (!_engineHostingWidthConstraint___s_category)
    {
      v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&_engineHostingWidthConstraint___s_category);
    }
    v6 = *(NSObject **)(v5 + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Internal UIKit Bug: did not find engine host width constraint where expected", buf, 2u);
    }
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = -[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints", 0);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = *(_QWORD *)v15;
LABEL_11:
  v11 = 0;
  while (1)
  {
    if (*(_QWORD *)v15 != v10)
      objc_enumerationMutation(v7);
    v4 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v11);
    if ((objc_msgSend((id)objc_msgSend(v4, "identifier"), "isEqualToString:", CFSTR("UIView-Encapsulated-Layout-Width")) & 1) != 0)return v4;
    if (v9 == ++v11)
    {
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
      v4 = 0;
      if (v9)
        goto LABEL_11;
      return v4;
    }
  }
}

- (void)_setMultilineContextWidth:(double)a3
{
  objc_setAssociatedObject(self, &_UIViewMultilineContextWidth, (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3), (void *)1);
}

- (void)_applyTraitStorageConstraintsByRemoving:(void *)a3 adding:
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a1)
  {
    objc_msgSend(a1, "removeConstraints:", a2);
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (-[UIView _isViewHierarchyPreparedForConstraint:]((uint64_t)a1, v12))
            objc_msgSend(v6, "addObject:", v12, (_QWORD)v13);
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v9);
    }

    objc_msgSend(a1, "addConstraints:", v6);
  }

}

+ (id)_defaultUIViewActionForLayer:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;

  v6 = a3;
  v7 = a4;
  if (objc_msgSend(a1, "_isInAnimationBlockWithAnimationsEnabled"))
  {
    objc_msgSend((id)__currentViewAnimationState, "actionForLayer:forKey:forView:", v6, v7, objc_msgSend(v6, "unsafeUnretainedDelegate"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(a1, "_shouldTrackActionWithAnimator:", v8))
      v9 = +[UIViewPropertyAnimator _trackNonAdditiveAnimationWithAnimator:forLayer:forKey:](UIViewPropertyAnimator, "_trackNonAdditiveAnimationWithAnimator:forLayer:forKey:", v8, v6, v7);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)actionForLayer:(id)a3 forKey:(id)a4
{
  UIViewBlockBasedCAAction *v7;
  UIViewBlockBasedCAAction *v8;
  void *v10;
  void *v11;
  UIViewBlockBasedCAAction *v12;
  _QWORD v13[5];
  _QWORD v14[5];

  if (objc_msgSend(a4, "isEqualToString:", CFSTR("presentationModifiers")))
    return (id)*MEMORY[0x1E0C9B0D0];
  if (pthread_main_np() != 1)
  {
    -[UIView _raiseExceptionForBackgroundThreadLayerPropertyModification](self, "_raiseExceptionForBackgroundThreadLayerPropertyModification");
    return (id)*MEMORY[0x1E0C9B0D0];
  }
  if (self->_viewBackingAux && self->_layer == a3 && _UIViewBackingObservesChanges((uint64_t)a4))
    -[UIView _backing_willChangeValueForKeyPath:]((uint64_t)self, (uint64_t)a4);
  if (-[UIView animationInfoCreateIfNecessary:](self, 0)
    && objc_msgSend(a4, "isEqualToString:", *MEMORY[0x1E0CD3068]))
  {
    v7 = [UIViewBlockBasedCAAction alloc];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __45__UIView_UIKitManual__actionForLayer_forKey___block_invoke;
    v14[3] = &unk_1E16B41B8;
    v14[4] = self;
    v8 = -[UIViewBlockBasedCAAction initWithEmptyBlock:](v7, "initWithEmptyBlock:", v14);
    return v8;
  }
  if (!-[UIView _shouldAnimatePropertyWithKey:](self, "_shouldAnimatePropertyWithKey:", a4))
    return (id)*MEMORY[0x1E0C9B0D0];
  if ((objc_msgSend((id)objc_opt_class(), "_isInAnimationBlockWithAnimationsEnabled") & 1) == 0)
  {
    if (__currentViewAnimationState)
    {
      v11 = (void *)objc_msgSend((id)__currentViewAnimationState, "_outerPropertyAnimator:", 1);
      if (objc_msgSend(v11, "_originalToValueForKey:inLayer:", a4, a3))
      {
        v12 = [UIViewBlockBasedCAAction alloc];
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 3221225472;
        v13[2] = __45__UIView_UIKitManual__actionForLayer_forKey___block_invoke_2;
        v13[3] = &unk_1E16EC2B0;
        v13[4] = v11;
        v8 = -[UIViewBlockBasedCAAction initWithActionBlock:](v12, "initWithActionBlock:", v13);
        return v8;
      }
    }
    return (id)*MEMORY[0x1E0C9B0D0];
  }
  v10 = (void *)objc_msgSend((id)objc_opt_class(), "_defaultUIViewActionForLayer:forKey:", a3, a4);
  if (v10)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (+[UIView _isAnimationTracking](UIView, "_isAnimationTracking"))
        objc_msgSend((id)__currentViewAnimationState, "_trackAnimation:withAnimationKey:forKeyPath:inLayer:", v10, a4, a4, a3);
    }
  }
  if (v10)
    return v10;
  else
    return (id)*MEMORY[0x1E0C9B0D0];
}

- (BOOL)_shouldAnimatePropertyWithKey:(id)a3
{
  id v4;
  char v5;
  BOOL v6;

  v4 = a3;
  objc_opt_self();
  if (byte_1EDDCA60C != 1 || (objc_msgSend(v4, "isEqualToString:", CFSTR("contents")) & 1) == 0)
  {
    if (__currentViewAnimationState)
    {
      v5 = objc_msgSend((id)__currentViewAnimationState, "shouldAnimatePropertyWithKey:", v4);
LABEL_8:
      v6 = v5;
      goto LABEL_9;
    }
    if ((-[UIView _backing__shouldAnimatePropertyWithKey:]((uint64_t)self, (uint64_t)v4) & 1) == 0)
    {
      v5 = _CASupportsAnimationForKey(v4);
      goto LABEL_8;
    }
  }
  v6 = 1;
LABEL_9:

  return v6;
}

+ (BOOL)_shouldTrackActionWithAnimator:(id)a3
{
  id v4;
  char isKindOfClass;

  v4 = a3;
  if (objc_msgSend(a1, "_shouldTrackAnimationsWithAnimator"))
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

+ (BOOL)_shouldTrackAnimationsWithAnimator
{
  _BOOL4 v2;
  BOOL v3;
  char v4;
  BOOL result;
  id *v6;
  id *v7;
  id WeakRetained;
  id *v9;

  v2 = +[UIViewPropertyAnimator _trackingAnimationsCurrentlyEnabled](UIViewPropertyAnimator, "_trackingAnimationsCurrentlyEnabled");
  v3 = +[UIView _isAnimationTracking](UIView, "_isAnimationTracking");
  v4 = objc_msgSend((id)__currentViewAnimationState, "isInProcess");
  result = 0;
  if (v2 && !v3)
  {
    v6 = (id *)(id)__currentViewAnimationState;
    if (v6)
    {
      v7 = v6;
      do
      {
        WeakRetained = objc_loadWeakRetained(v7 + 34);
        if (WeakRetained)
          break;
        v9 = (id *)v7[1];

        v7 = v9;
      }
      while (v9);

    }
    else
    {
      WeakRetained = 0;
    }
    if (WeakRetained)
      return 0;
    else
      return v4 ^ 1;
  }
  return result;
}

+ (BOOL)_isAnimationTracking
{
  return qword_1EDDCA648 != 0;
}

- (uint64_t)_backing__shouldAnimatePropertyWithKey:(uint64_t)result
{
  uint64_t v2;
  void *v3;

  if (result)
  {
    v2 = *(_QWORD *)(result + 176);
    if (v2)
      v3 = *(void **)(v2 + 40);
    else
      v3 = 0;
    return objc_msgSend(v3, "_shouldAnimatePropertyWithKey:", a2);
  }
  return result;
}

- (CGSize)sizeThatFits:(CGSize)size
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGSize result;

  -[UIView bounds](self, "bounds", size.width, size.height);
  v4 = v3;
  v6 = v5;
  result.height = v6;
  result.width = v4;
  return result;
}

- (id)_basicAnimationWithKeyPath:(id)a3
{
  return (id)objc_msgSend((id)__currentViewAnimationState, "_defaultAnimationForKey:", a3);
}

- (void)_removeAllRetargetableAnimationsIfDetatchedFromContext
{
  void *v2;
  _QWORD v3[5];

  if (a1)
  {
    objc_opt_self();
    if (_os_feature_enabled_impl())
    {
      objc_msgSend(a1, "__swift_removeAllRetargetableAnimationsIfDetatchedFromContext");
    }
    else
    {
      +[UIViewInProcessAnimationManager sharedManager](UIViewInProcessAnimationManager, "sharedManager");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3[0] = MEMORY[0x1E0C809B0];
      v3[1] = 3221225472;
      v3[2] = __94__UIView_InProcessAnimations_Internal___removeAllRetargetableAnimationsIfDetatchedFromContext__block_invoke;
      v3[3] = &unk_1E16B1B28;
      v3[4] = a1;
      objc_msgSend(v2, "_performWhenInProcessAnimationsTransactionCommits:", v3);

    }
  }
}

void __45__UIView_UIKitManual__actionForLayer_forKey___block_invoke(uint64_t a1)
{
  -[UIView _removeAllRetargetableAnimationsIfDetatchedFromContext](*(void **)(a1 + 32));
}

- (id)_initialValueForLayer:(id)a3 keyPath:(id)a4 usePresentationValue:(BOOL)a5
{
  _BOOL4 v5;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v5 = a5;
  v7 = a3;
  v8 = a4;
  if (v5 && (objc_msgSend(v7, "hasBeenCommitted") & 1) != 0)
  {
    objc_msgSend(v7, "presentationLayer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "valueForKeyPath:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
      goto LABEL_9;
  }
  else
  {
    objc_msgSend(v7, "valueForKeyPath:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      goto LABEL_9;
  }
  if (objc_msgSend(CFSTR("backgroundColor"), "isEqualToString:", v8))
  {
    +[UIColor clearColor](UIColor, "clearColor");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v11, "CGColor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CD27A8], "defaultValueForKey:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_9:

  return v10;
}

- (UIEdgeInsets)_rawLayoutMargins
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_rawLayoutMargins.top;
  left = self->_rawLayoutMargins.left;
  bottom = self->_rawLayoutMargins.bottom;
  right = self->_rawLayoutMargins.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (void)_backing_addPrivateSubview:(uint64_t)a3 positioned:(uint64_t)a4 relativeTo:
{
  id v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8 = (id)objc_msgSend(a2, "superview");
    objc_msgSend(a2, "layer");
    v9 = objc_claimAutoreleasedReturnValue();
    -[UIView _backing_wrapLayerInIntermediate](a1);
    v10 = *(_QWORD **)(a1 + 176);
    if (v10)
      v10 = (_QWORD *)v10[1];
    v11 = v10;
    v12 = v11;
    v24 = v8;
    v25 = (void *)v9;
    switch(a3)
    {
      case -3:
        objc_msgSend(v11, "insertSublayer:below:", v9, a4);
        break;
      case -2:
        objc_msgSend(v11, "insertSublayer:above:", v9, a4);
        break;
      case -1:
        objc_msgSend(v11, "addSublayer:", v9);
        break;
      default:
        objc_msgSend(v11, "insertSublayer:atIndex:", v9, a3);
        break;
    }
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    +[UIView _defaultKeyPathsToSyncWithPrivateSubviews]();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v30 != v16)
            objc_enumerationMutation(v13);
          v18 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i);
          objc_msgSend(*(id *)(a1 + 168), "valueForKeyPath:", v18, v24);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a2, "_privateSubview_setValue:forObservedLayerKeyPath:", v19, v18);

        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v15);
    }

    a2[13] |= 0x8000000uLL;
    *(_QWORD *)((char *)a2 + 124) |= 0x1000000000uLL;
    v20 = *(_QWORD *)(a1 + 176);
    if (v20)
      v21 = *(void **)(v20 + 24);
    else
      v21 = 0;
    v22 = v24;
    objc_msgSend(v21, "addObject:", a2, v24);
    -[UIContentUnavailableImageProperties _setTintColor:](*(_QWORD *)(a1 + 176), 0);
    if (v22 != (void *)a1)
      -[UIView _postMovedFromSuperview:](a2, v22);
    objc_msgSend(a2, "_updateCombinedInsetsIfNecessary");
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __75__UIView__UIViewBacking___backing_addPrivateSubview_positioned_relativeTo___block_invoke;
    v26[3] = &unk_1E16B1B50;
    v23 = v12;
    v27 = v23;
    v28 = a2;
    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v26);
    if (objc_msgSend(v23, "needsLayout"))
      objc_msgSend(*(id *)(a1 + 168), "setNeedsLayout");

  }
}

- (void)setTintColor:(UIColor *)tintColor
{
  UIColor *v4;
  UIColor *v5;
  UIColor *v6;
  UIColor *v7;
  BOOL v8;
  UIColor *v9;

  v4 = tintColor;
  if (v4)
  {
    +[UIColor tintColor](UIColor, "tintColor");
    v5 = (UIColor *)objc_claimAutoreleasedReturnValue();

    if (v5 == v4)
    {

      v4 = 0;
    }
  }
  _UIViewGetInteractionTintColorBypassingOverride(self);
  v6 = (UIColor *)(id)objc_claimAutoreleasedReturnValue();
  v7 = v4;
  v9 = v7;
  if (v6 == v7)
  {

  }
  else
  {
    if (v7 && v6)
    {
      v8 = -[UIColor isEqual:](v6, "isEqual:", v7);

      if (v8)
        goto LABEL_13;
    }
    else
    {

    }
    _UIViewSetInteractionTintColor(self, v9);
    -[UIView _dispatchTintColorVisitorWithReasons:](self, 1);
    if (qword_1EDDCA8A0 != -1)
      dispatch_once(&qword_1EDDCA8A0, &__block_literal_global_3359);
  }
LABEL_13:

}

- (void)_dispatchTintColorVisitorWithReasons:(void *)a1
{
  _UITintColorVisitor *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;
  CGRect v17;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = -[_UITintColorVisitor initWithNotificationReasons:]([_UITintColorVisitor alloc], "initWithNotificationReasons:", a2);
    objc_opt_self();
    byte_1EDDCA60C = 1;
    objc_msgSend(a1, "_receiveVisitor:", v3);
    if (qword_1EDDCA678)
    {
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v4 = (id)objc_msgSend((id)qword_1EDDCA678, "copy");
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v12;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v12 != v7)
              objc_enumerationMutation(v4);
            v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
            objc_msgSend(v9, "bounds", (_QWORD)v11);
            if (!CGRectIsEmpty(v17))
              objc_msgSend(v9, "forceDisplayIfNeeded");
          }
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        }
        while (v6);
      }

      v10 = (void *)qword_1EDDCA678;
      qword_1EDDCA678 = 0;

    }
    objc_opt_self();
    byte_1EDDCA60C = 0;

  }
}

- (void)_receiveVisitor:(id)a3
{
  +[_UIViewVisitor _startTraversalOfVisitor:withView:](_UIViewVisitor, "_startTraversalOfVisitor:withView:", a3, self);
}

- (void)setSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  UISemanticContentAttribute v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = semanticContentAttribute & 7;
  if ((unint64_t)semanticContentAttribute >= 8)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        v11 = 134217984;
        v12 = semanticContentAttribute;
        _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Attempted to set invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", (uint8_t *)&v11, 0xCu);
      }

    }
    else
    {
      v8 = qword_1EDDCA738;
      if (!qword_1EDDCA738)
      {
        v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&qword_1EDDCA738);
      }
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = 134217984;
        v12 = semanticContentAttribute;
        _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Attempted to set invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", (uint8_t *)&v11, 0xCu);
      }
    }
  }
  v5 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  if (((v5 >> 14) & 7) != v4)
  {
    *(_QWORD *)((char *)&self->_viewFlags + 20) = v5 & 0xFFFFFFFFFFFE3FFFLL | ((unint64_t)(v4 & 7) << 14);
    v6 = ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 19) & 1;
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFF7FFFF | ((-[UIView effectiveUserInterfaceLayoutDirection](self, "effectiveUserInterfaceLayoutDirection") == UIUserInterfaceLayoutDirectionRightToLeft) << 19);
    -[UIView _updateDirectionalConstraintsIfNeededWasFlipped:]((uint64_t)self, v6);
    if (qword_1EDDCA730 != -1)
      dispatch_once(&qword_1EDDCA730, &__block_literal_global_1032_0);
    if (!byte_1EDDCA616)
      _UIViewInvalidateTraitCollectionAndSchedulePropagation((uint64_t)self, 1);
  }
}

void __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t v29;

  v4 = *(void **)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 80);
  v6 = *(void **)(a1 + 48);
  v7 = a2;
  v8 = v6;
  v9 = v3;
  v10 = v4;
  v11 = objc_msgSend(v7, "count");
  if (v11 == objc_msgSend(v7, "capacity"))
  {

    v7 = 0;
  }
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0CD2808]), "initWithKeyPath:initialValue:initialVelocity:additive:preferredFrameRateRangeMaximum:group:", v8, v10, v9, 0, v5, v7);

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  v15 = *(void **)(a1 + 56);
  v16 = MEMORY[0x1E0C809B0];
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_3;
  v26[3] = &unk_1E16C0EA8;
  v17 = v15;
  v18 = *(_QWORD *)(a1 + 72);
  v27 = v17;
  v29 = v18;
  v28 = *(id *)(a1 + 48);
  objc_msgSend(v17, "performWithLock:", v26);
  if (pthread_main_np() == 1)
  {
    objc_msgSend(*(id *)(a1 + 64), "layer");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "addPresentationModifier:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));

  }
  else
  {
    v22[0] = v16;
    v22[1] = 3221225472;
    v22[2] = __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_4;
    v22[3] = &unk_1E16BDBB0;
    v23 = *(id *)(a1 + 56);
    v20 = *(id *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 72);
    v24 = v20;
    v25 = v21;
    UIViewInProcessAnimationManagerDispatchAsyncOntoMainBeforeTickExit((uint64_t)v22);

  }
}

- (void)_setOverrideTintColor:(id)a3
{
  id v4;
  id v5;
  void *v6;
  char v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  char v12;
  id v13;

  v13 = a3;
  if (v13 || (*(_QWORD *)&self->_viewFlags & 0x200) != 0)
  {
    -[UIView _overrideTintColor](self, "_overrideTintColor");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v5 = v13;
    v6 = v5;
    if (v4 == v5)
    {

    }
    else
    {
      if (v5 && v4)
      {
        v7 = objc_msgSend(v4, "isEqual:", v5);

        if ((v7 & 1) != 0)
          goto LABEL_21;
      }
      else
      {

      }
      -[UIView __tintColor](self);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_setAssociatedObject(self, &unk_1EDDCA60B, v6, (void *)1);
      *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFFFFFFFDFFLL | ((unint64_t)(v13 != 0) << 9);
      v9 = v8;
      v10 = v6;
      v11 = v10;
      if (v9 != v10)
      {
        if (v6 && v9)
        {
          v12 = objc_msgSend(v9, "isEqual:", v10);

          if ((v12 & 1) != 0)
          {
LABEL_19:
            v6 = v9;
            goto LABEL_20;
          }
        }
        else
        {

        }
        -[UIView _dispatchTintColorVisitorWithReasons:](self, 1);
        if (qword_1EDDCA8A0 != -1)
          dispatch_once(&qword_1EDDCA8A0, &__block_literal_global_3359);
        goto LABEL_19;
      }

      v6 = v11;
    }
LABEL_20:

  }
LABEL_21:

}

- (void)_privateSubview_setValue:(id)a3 forObservedLayerKeyPath:(id)a4
{
  -[CALayer setValue:forKeyPath:](self->_layer, "setValue:forKeyPath:", a3, a4);
}

- (id)_accessibilityHigherContrastTintColorForColor:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;

  v4 = a3;
  v5 = -[UIView __accessibilityUndimmedTintColorHighContrastVariantStorageKey](self);
  if (v5 == &UIAccessibilityDarkOnLightToken)
  {
    +[UIColor _accessibilityDarkenedColorForColor:](UIColor, "_accessibilityDarkenedColorForColor:", v4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else if (v5 == &UIAccessibilityLightOnDarkToken)
  {
    +[UIColor _accessibilityLightenedColorForColor:](UIColor, "_accessibilityLightenedColorForColor:", v4);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = v4;
  }
  v7 = v6;

  return v7;
}

- (void)forceDisplayIfNeeded
{
  -[CALayer displayIfNeeded](self->_layer, "displayIfNeeded");
}

void __38__UIView_Geometry__hitTest_withEvent___block_invoke(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  BOOL v7;
  void *v8;
  id obj;

  obj = objc_loadWeakRetained(&_UIWindowCurrentWindowServerHitTestWindow);
  objc_msgSend(a2, "convertPoint:fromView:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(a2, "_hitTest:withEvent:windowServerHitTestWindow:", *(_QWORD *)(a1 + 40), obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeWeak(&_UIWindowCurrentWindowServerHitTestWindow, obj);
  if (*(_BYTE *)(a1 + 72))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (!v6)
      goto LABEL_11;
  }
  else
  {
    objc_msgSend(v6, "_window");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
      _UIViewLogForNotInHierarchyViewHitTestResult(*(void **)(a1 + 32), a2, v6);
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v6);
  *a3 = 1;
LABEL_11:

}

- (CGPoint)convertPoint:(CGPoint)point fromView:(UIView *)view
{
  UIView *v4;
  double y;
  double x;
  void *v8;
  CALayer *layer;
  CALayer *v10;
  CALayer *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGPoint result;

  v4 = view;
  y = point.y;
  x = point.x;
  if (view || (v4 = (UIView *)-[UIView window](self, "window")) != 0)
  {
    -[UIView _window](self, "_window");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _window](v4, "_window");

    if (v4 != self)
    {
      layer = self->_layer;
      v10 = v4->_layer;
      v11 = layer;
      -[CALayer convertPoint:fromLayer:](v11, "convertPoint:fromLayer:", v10, x, y);
      x = v12;
      y = v13;

    }
  }
  v14 = x;
  v15 = y;
  result.y = v15;
  result.x = v14;
  return result;
}

- (id)_hitTest:(CGPoint)a3 withEvent:(id)a4 windowServerHitTestWindow:(id)a5
{
  double y;
  double x;
  id v9;
  void *v10;

  y = a3.y;
  x = a3.x;
  v9 = a4;
  objc_storeWeak(&_UIWindowCurrentWindowServerHitTestWindow, a5);
  -[UIView hitTest:withEvent:](self, "hitTest:withEvent:", v9, x, y);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id __231__UIView_Internal____animateUsingSpringWithDampingRatio_response_interactive_initialDampingRatio_initialResponse_dampingRatioSmoothing_responseSmoothing_targetSmoothing_projectionDeceleration_retargetImpulse_animations_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  double v18;
  void *v19;
  float v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  BOOL v31;
  int v32;
  __int16 v33;
  double v34;
  double v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  objc_msgSend(v9, "composer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = v10;
  else
    v12 = (id)objc_opt_new();
  v13 = v12;

  v28 = *(_OWORD *)(a1 + 48);
  v14 = 0.0;
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if (!v15)
  {
    v19 = *(void **)(a1 + 40);
    v18 = 0.0;
    if (!v16)
      goto LABEL_7;
    goto LABEL_6;
  }
  objc_msgSend(*(id *)(a1 + 32), "floatValue");
  v18 = v17;
  v19 = *(void **)(a1 + 40);
  if (v19)
  {
LABEL_6:
    objc_msgSend(v19, "floatValue", v28);
    v14 = v20;
  }
LABEL_7:
  v21 = *(_QWORD *)(a1 + 96);
  v29 = v28;
  v30 = v15 != 0;
  v31 = v16 != 0;
  v32 = 0;
  v33 = 0;
  v34 = v18;
  v35 = v14;
  v22 = *(_OWORD *)(a1 + 80);
  v36 = *(_OWORD *)(a1 + 64);
  v37 = v22;
  v38 = v21;
  +[UIViewSpringAnimationDescription descriptionWithSpringAnimationParameters:](UIViewSpringAnimationDescription, "descriptionWithSpringAnimationParameters:", &v29);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "animation");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "composeAnimation:withNewAnimationDescription:interactive:currentValue:targetValue:", v24, v23, *(unsigned __int8 *)(a1 + 104), v8, v7);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  +[_UIViewAnimationWithComposerWrapper instanceWithAnimation:composer:](_UIViewAnimationWithComposerWrapper, "instanceWithAnimation:composer:", v25, v13);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

id __94__UIView_Internal___animateUsingSpringWithTension_friction_interactive_animations_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  objc_msgSend(v9, "composer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = v10;
  else
    v12 = (id)objc_opt_new();
  v13 = v12;

  +[UIViewSpringAnimationDescription descriptionWithTension:friction:](UIViewSpringAnimationDescription, "descriptionWithTension:friction:", *(double *)(a1 + 32), *(double *)(a1 + 40));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "animation");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "composeAnimation:withNewAnimationDescription:interactive:currentValue:targetValue:", v15, v14, *(unsigned __int8 *)(a1 + 48), v8, v7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  +[_UIViewAnimationWithComposerWrapper instanceWithAnimation:composer:](_UIViewAnimationWithComposerWrapper, "instanceWithAnimation:composer:", v16, v13);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

- (id)_velocityForKey:(uint64_t)a3 target:
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;

  v5 = a2;
  if (a1)
  {
    objc_opt_self();
    if (_os_feature_enabled_impl())
    {
      objc_msgSend(a1, "__swift_velocityForKey:target:", v5, a3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(a1[5], "animatablePropertyForKey:createIfNecessary:", v5, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "velocityTarget:", a3);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (v8)
      {
        v10 = v8;
      }
      else
      {
        +[UIInterpolatedValue interpolatedWrapperForZeroForKey:](UIInterpolatedValue, "interpolatedWrapperForZeroForKey:", v5);
        v10 = (id)objc_claimAutoreleasedReturnValue();
      }
      v11 = v10;

      objc_msgSend(v11, "getValue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)stopSettingPresentationValueForKey:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v4 = a3;
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    -[UIView __swift_stopSettingPresentationValueForKey:](self, "__swift_stopSettingPresentationValueForKey:", v4);
  }
  else
  {
    -[UIView animationInfoCreateIfNecessary:](self, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    v12 = &v11;
    v13 = 0x3032000000;
    v14 = __Block_byref_object_copy__238;
    v15 = __Block_byref_object_dispose__238;
    v16 = 0;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __75__UIView_InProcessAnimations_Internal__stopSettingPresentationValueForKey___block_invoke;
    v7[3] = &unk_1E16B9698;
    v10 = &v11;
    v6 = v5;
    v8 = v6;
    v9 = v4;
    objc_msgSend(v6, "performWithLock:", v7);
    -[UIView _removePresentationModifier:withInfo:](self, (void *)v12[5], v6);

    _Block_object_dispose(&v11, 8);
  }

}

id __57__UIView_Internal___performWithoutRetargetingAnimations___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  objc_msgSend(v8, "composer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
    v11 = v9;
  else
    v11 = (id)objc_opt_new();
  v12 = v11;

  objc_msgSend(v8, "animation");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "composeAnimation:withNewAnimationDescription:interactive:currentValue:targetValue:", v13, 0, 0, v7, v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  +[_UIViewAnimationWithComposerWrapper instanceWithAnimation:composer:](_UIViewAnimationWithComposerWrapper, "instanceWithAnimation:composer:", v14, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id __79__UIView_Internal___animateUsingSpringBehavior_tracking_animations_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _OWORD v27[5];

  v7 = a2;
  v8 = a4;
  v9 = a3;
  objc_msgSend(v7, "composer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = v10;
  else
    v12 = (id)objc_opt_new();
  v13 = v12;

  if (*(_BYTE *)(a1 + 40))
    v14 = 1;
  else
    v14 = 2;
  objc_msgSend(v7, "composer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(v7, "composer");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isActive");

    if ((v17 & 1) != 0)
    {
      v18 = 1;
    }
    else
    {
      objc_msgSend(v7, "animation");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19 != 0;

      v18 = (2 * v20);
    }
  }
  else
  {
    v18 = 0;
  }
  v21 = *(void **)(a1 + 32);
  if (v21)
    objc_msgSend(v21, "parametersForTransitionFromState:toState:", v18, v14);
  else
    memset(v27, 0, sizeof(v27));
  +[UIViewSpringAnimationDescription descriptionWithSpringAnimationParameters:](UIViewSpringAnimationDescription, "descriptionWithSpringAnimationParameters:", v27);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "animation");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "composeAnimation:withNewAnimationDescription:interactive:currentValue:targetValue:", v23, v22, *(unsigned __int8 *)(a1 + 40), v9, v8);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  +[_UIViewAnimationWithComposerWrapper instanceWithAnimation:composer:](_UIViewAnimationWithComposerWrapper, "instanceWithAnimation:composer:", v24, v13);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  return v25;
}

uint64_t __74__UIView_InProcessAnimations_Internal____removeAllRetargetableAnimations___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "stopSettingPresentationValueForKey:", *(_QWORD *)(a1 + 40));
}

void __94__UIView_InProcessAnimations_Internal___removeAllRetargetableAnimationsIfDetatchedFromContext__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  objc_msgSend(*(id *)(a1 + 32), "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "context");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = (void *)objc_opt_class();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __94__UIView_InProcessAnimations_Internal___removeAllRetargetableAnimationsIfDetatchedFromContext__block_invoke_2;
    v5[3] = &unk_1E16B1B28;
    v5[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v4, "_performWithoutRetargetingAnimations:", v5);
  }
}

+ (void)_animateUsingSpringWithTension:(double)a3 friction:(double)a4 interactive:(BOOL)a5 animations:(id)a6 completion:(id)a7
{
  _BOOL8 v8;
  id v11;
  id v12;
  _QWORD v13[6];
  BOOL v14;

  v8 = a5;
  v11 = a7;
  v12 = a6;
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    +[UIView __swift_animateUsingSpringWithTension:friction:interactive:animations:completion:](UIView, "__swift_animateUsingSpringWithTension:friction:interactive:animations:completion:", v8, v12, v11, a3, a4);
  }
  else
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __94__UIView_Internal___animateUsingSpringWithTension_friction_interactive_animations_completion___block_invoke;
    v13[3] = &__block_descriptor_49_e132____UIViewAnimationWithComposerWrapper_32__0___UIViewAnimationWithComposerWrapper_8___UIVectorOperatable__16___UIVectorOperatable__24l;
    *(double *)&v13[4] = a3;
    *(double *)&v13[5] = a4;
    v14 = v8;
    +[UIView _animateWithAnimationAndComposerGetter:animations:completion:](UIView, "_animateWithAnimationAndComposerGetter:animations:completion:", v13, v12, v11);
  }

}

+ (void)__animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 interactive:(double)a5 initialDampingRatio:(double)a6 initialResponse:(double)a7 dampingRatioSmoothing:(uint64_t)a8 responseSmoothing:(uint64_t)a9 targetSmoothing:(void *)a10 projectionDeceleration:(void *)a11 retargetImpulse:(void *)a12 animations:(void *)a13 completion:
{
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char v38;

  v24 = a10;
  v25 = a11;
  v26 = a13;
  v27 = a12;
  objc_opt_self();
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    +[UIView __swift_animateUsingSpringWithDampingRatio:response:interactive:initialDampingRatio:initialResponse:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:retargetImpulse:animations:completion:](UIView, "__swift_animateUsingSpringWithDampingRatio:response:interactive:initialDampingRatio:initialResponse:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:retargetImpulse:animations:completion:", a9, v24, v25, v27, v26, a1, a2, a3, a4, a5, a6, a7);

  }
  else
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __231__UIView_Internal____animateUsingSpringWithDampingRatio_response_interactive_initialDampingRatio_initialResponse_dampingRatioSmoothing_responseSmoothing_targetSmoothing_projectionDeceleration_retargetImpulse_animations_completion___block_invoke;
    v28[3] = &unk_1E16EBA80;
    v31 = a1;
    v32 = a2;
    v29 = v24;
    v30 = v25;
    v33 = a3;
    v34 = a4;
    v35 = a5;
    v36 = a6;
    v37 = a7;
    v38 = a9;
    +[UIView _animateWithAnimationAndComposerGetter:animations:completion:](UIView, "_animateWithAnimationAndComposerGetter:animations:completion:", v28, v27, v26);

    v27 = v29;
  }

}

- (void)_removeAllRetargetableAnimations:(BOOL)a3
{
  int v5;
  void *v6;
  _QWORD v7[5];
  BOOL v8;
  _QWORD v9[5];
  BOOL v10;

  objc_opt_self();
  v5 = _os_feature_enabled_impl();
  v6 = (void *)objc_opt_class();
  if (v5)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __53__UIView_Internal___removeAllRetargetableAnimations___block_invoke;
    v9[3] = &unk_1E16B1B78;
    v9[4] = self;
    v10 = a3;
    objc_msgSend(v6, "__swift_performWithoutRetargetingAnimations:", v9);
  }
  else
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __53__UIView_Internal___removeAllRetargetableAnimations___block_invoke_2;
    v7[3] = &unk_1E16B1B78;
    v7[4] = self;
    v8 = a3;
    objc_msgSend(v6, "_performWithoutRetargetingAnimations:", v7);
  }
}

+ (void)_animateUsingSpringBehavior:(id)a3 tracking:(BOOL)a4 animations:(id)a5 completion:(id)a6
{
  _BOOL8 v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  BOOL v14;

  v8 = a4;
  v9 = a3;
  v10 = a6;
  v11 = a5;
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    +[UIView __swift_animateUsingSpringBehavior:tracking:animations:completion:](UIView, "__swift_animateUsingSpringBehavior:tracking:animations:completion:", v9, v8, v11, v10);

  }
  else
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __79__UIView_Internal___animateUsingSpringBehavior_tracking_animations_completion___block_invoke;
    v12[3] = &unk_1E16EBA58;
    v14 = v8;
    v13 = v9;
    +[UIView _animateWithAnimationAndComposerGetter:animations:completion:](UIView, "_animateWithAnimationAndComposerGetter:animations:completion:", v12, v11, v10);

    v11 = v13;
  }

}

+ (void)_animateWithAnimationAndComposerGetter:(id)a3 animations:(id)a4 completion:(id)a5
{
  objc_msgSend(a1, "_animateWithAnimationAndComposerGetter:animations:completion:animationStateSetup:", a3, a4, a5, 0);
}

+ (void)_performWithoutRetargetingAnimations:(id)a3
{
  id v3;

  v3 = a3;
  objc_opt_self();
  if (_os_feature_enabled_impl())
    +[UIView __swift_performWithoutRetargetingAnimations:](UIView, "__swift_performWithoutRetargetingAnimations:", v3);
  else
    +[UIView _animateWithAnimationAndComposerGetter:animations:completion:animationStateSetup:](UIView, "_animateWithAnimationAndComposerGetter:animations:completion:animationStateSetup:", &__block_literal_global_2613, v3, 0, &__block_literal_global_2614);

}

- (void)solutionDidChangeInEngine:(id)a3
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;

  p_viewFlags = &self->_viewFlags;
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1100) == 0)
  {
    objc_msgSend(+[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger", a3), "willSendSetNeedsLayoutToLayerOfView:", self);
    objc_msgSend(-[UIView _backing_outermostLayer](self), "setNeedsLayout");
    *((_QWORD *)p_viewFlags + 1) |= 0x100uLL;
  }
}

+ (void)_animateWithAnimationAndComposerGetter:(id)a3 animations:(id)a4 completion:(id)a5 animationStateSetup:(id)a6
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD *v24;
  _QWORD aBlock[4];
  id v26;
  _QWORD *v27;
  _QWORD v28[5];
  id v29;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInMethod:object:file:lineNumber:description:", a2, a1, CFSTR("UIView.m"), 19373, CFSTR("Should never be called when Swift C2 is enabled."));

  }
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x3032000000;
  v28[3] = __Block_byref_object_copy__238;
  v28[4] = __Block_byref_object_dispose__238;
  v15 = MEMORY[0x1E0C809B0];
  v29 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __101__UIView_Internal___animateWithAnimationAndComposerGetter_animations_completion_animationStateSetup___block_invoke;
  aBlock[3] = &unk_1E16EBB08;
  v27 = v28;
  v16 = v13;
  v26 = v16;
  v17 = _Block_copy(aBlock);
  v21[0] = v15;
  v21[1] = 3221225472;
  v21[2] = __101__UIView_Internal___animateWithAnimationAndComposerGetter_animations_completion_animationStateSetup___block_invoke_2617;
  v21[3] = &unk_1E16EBB30;
  v24 = v28;
  v18 = v11;
  v22 = v18;
  v19 = v14;
  v23 = v19;
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, 10752, 0, v12, 0, v21, 0.0, 0.0, v17);

  _Block_object_dispose(v28, 8);
}

void __101__UIView_Internal___animateWithAnimationAndComposerGetter_animations_completion_animationStateSetup___block_invoke(uint64_t a1, uint64_t a2)
{
  int has_internal_diagnostics;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (has_internal_diagnostics)
  {
    if (!v5)
    {
      __UIFaultDebugAssertLog();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "Missing animationState when completing C2 animation", buf, 2u);
      }

    }
  }
  else if (!v5)
  {
    v8 = kFixedAnimationDuration_block_invoke_4___s_category;
    if (!kFixedAnimationDuration_block_invoke_4___s_category)
    {
      v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v8, (unint64_t *)&kFixedAnimationDuration_block_invoke_4___s_category);
    }
    v9 = *(NSObject **)(v8 + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Missing animationState when completing C2 animation", v10, 2u);
    }
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, a2, objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "retargeted"));
}

- (void)insertSubview:(UIView *)view atIndex:(NSInteger)index
{
  if (view)
  {
    if ((index & 0x8000000000000000) == 0)
      -[UIView _addSubview:positioned:relativeTo:](self, "_addSubview:positioned:relativeTo:");
  }
}

uint64_t __57__UIView_Internal___performWithoutRetargetingAnimations___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setType:", 2);
}

+ (void)_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 updateReason:(unsigned int)a4 animations:(id)a5
{
  float preferred;
  float maximum;
  float minimum;
  char *v9;
  _DWORD *v10;
  _QWORD *v11;
  int v12;
  void (**v13)(_QWORD);
  uint64_t v14;
  int v15;
  CAFrameRateRange v16;

  preferred = a3.preferred;
  maximum = a3.maximum;
  minimum = a3.minimum;
  v13 = (void (**)(_QWORD))a5;
  if (!a4)
  {
    v16.minimum = minimum;
    v16.maximum = maximum;
    v16.preferred = preferred;
    if (!CAFrameRateRangeIsEqualToRange(v16, *MEMORY[0x1E0CD23C0]))
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("reason parameter of +[UIView _modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:] must be non-zero unless preferredFrameRateRange is CAFrameRateRangeDefault."));
  }
  v9 = (char *)(id)__currentViewAnimationState;
  v10 = v9;
  if (v9)
  {
    v11 = v9 + 64;
    v14 = *((_QWORD *)v9 + 8);
    v12 = *((_DWORD *)v9 + 19);
    v15 = *((_DWORD *)v9 + 18);
    *((float *)v9 + 16) = minimum;
    *((float *)v9 + 17) = maximum;
    *((float *)v9 + 18) = preferred;
    *((_DWORD *)v9 + 19) = a4;
    if (v13)
      v13[2](v13);
    *v11 = v14;
    v10[18] = v15;
    v10[19] = v12;
  }
  else if (v13)
  {
    ((void (*)(void))v13[2])();
  }

}

uint64_t __53__UIView_Internal___removeAllRetargetableAnimations___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__swift_removeAllRetargetableAnimations:", *(unsigned __int8 *)(a1 + 40));
}

void __57__UIView_Internal___collectedViewPropertiesByPerforming___block_invoke(uint64_t a1)
{
  +[UIViewAnimationState pushViewAnimationState:context:](UIViewPropertyCollectingAnimationState, "pushViewAnimationState:context:", 0, 0);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)__currentViewAnimationState);
}

double __133__UIView_Internal___animateUsingSpringWithDuration_delay_options_mass_stiffness_damping_initialVelocity_animations_start_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  double result;

  +[UIViewAnimationState pushViewAnimationState:context:](UIViewSpringAnimationState, "pushViewAnimationState:context:", 0, 0);
  v2 = __currentViewAnimationState;
  *(_QWORD *)(__currentViewAnimationState + 280) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 288) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 296) = *(_QWORD *)(a1 + 48);
  result = *(double *)(a1 + 56);
  *(double *)(v2 + 304) = result;
  return result;
}

void __94__UIView_InProcessAnimations_Internal___removeAllRetargetableAnimationsIfDetatchedFromContext__block_invoke_2(uint64_t a1)
{
  -[UIView __removeAllRetargetableAnimations:](*(id **)(a1 + 32), 0);
}

+ (void)_recenterMotionEffects
{
  objc_msgSend((id)_motionEffectEngine, "resetMotionAnalysis");
}

uint64_t __101__UIView_UIViewKeyframeAnimations__animateKeyframesWithDuration_delay_options_animations_completion___block_invoke()
{
  return +[UIViewAnimationState pushViewAnimationState:context:](UIViewKeyframeAnimationState, "pushViewAnimationState:context:", 0, 0);
}

uint64_t __138__UIView_UIViewAnimationWithBlocks__animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion___block_invoke(double *a1)
{
  +[UIViewAnimationState pushViewAnimationState:context:](UIViewSpringAnimationState, "pushViewAnimationState:context:", 0, 0);
  return objc_msgSend((id)__currentViewAnimationState, "generateSpringPropertiesForDuration:damping:velocity:", a1[4], a1[5], a1[6]);
}

- (void)invalidateIntrinsicContentSize
{
  -[UIView _invalidateIntrinsicContentSizeNeedingLayout:](self, "_invalidateIntrinsicContentSizeNeedingLayout:", 1);
}

- (void)setOpaque:(BOOL)opaque
{
  _BOOL4 v3;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t viewFlags;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t hasOpaque;

  v3 = opaque;
  p_viewFlags = &self->_viewFlags;
  viewFlags = (uint64_t)self->_viewFlags;
  if (((viewFlags & 0x400) == 0) == opaque)
  {
    v7 = *((_QWORD *)&self->_viewFlags + 1);
    v8 = *((_DWORD *)&self->_viewFlags + 4);
  }
  else
  {
    if (((((viewFlags & 0x400) == 0) ^ -[CALayer isOpaque](self->_layer, "isOpaque")) & 1) != 0)
      return;
    viewFlags = (uint64_t)self->_viewFlags;
    v7 = *((_QWORD *)&self->_viewFlags + 1);
    v8 = *((_DWORD *)&self->_viewFlags + 4);
  }
  v9 = 1024;
  if (!v3)
    v9 = 0;
  *(_QWORD *)p_viewFlags = viewFlags & 0xFFFFFFFFFFFFFBFFLL | v9;
  *((_QWORD *)p_viewFlags + 1) = v7;
  *((_DWORD *)p_viewFlags + 4) = v8;
  if (-[UIView _backgroundCGColor](self, "_backgroundCGColor"))
    hasOpaque = -[UIView _hasOpaqueBackground]((uint64_t)self);
  else
    hasOpaque = (*(_QWORD *)&self->_viewFlags >> 10) & 1;
  -[CALayer setOpaque:](self->_layer, "setOpaque:", hasOpaque);
}

+ (void)performWithoutAnimation:(void *)actionsWithoutAnimation
{
  void (**v3)(_QWORD);
  _BOOL8 v4;

  v3 = actionsWithoutAnimation;
  v4 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
  +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
  v3[2](v3);

  +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", v4);
}

+ (BOOL)areAnimationsEnabled
{
  return __animate;
}

+ (void)setAnimationsEnabled:(BOOL)enabled
{
  if (pthread_main_np() == 1)
  {
    __animate = enabled;
  }
  else if (setAnimationsEnabled__once != -1)
  {
    dispatch_once(&setAnimationsEnabled__once, &__block_literal_global_2333);
  }
}

- (void)_backing_traitCollectionDidChange:(void *)result
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (!result)
    return result;
  v3 = (uint64_t)result;
  objc_msgSend(result, "traitCollection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "_userInterfaceRenderingMode");
  if (v5 == objc_msgSend(a2, "_userInterfaceRenderingMode"))
  {
    v6 = objc_msgSend(v4, "_vibrancy");
    v7 = objc_msgSend(a2, "_vibrancy");

    if (v6 == v7)
      goto LABEL_7;
  }
  else
  {

  }
  -[UIView _updateAutomaticCaptureGroupIfNecessary](v3);
LABEL_7:
  v8 = *(_QWORD *)(v3 + 176);
  if (v8)
    v9 = *(void **)(v8 + 40);
  else
    v9 = 0;
  return (void *)objc_msgSend(v9, "traitCollectionDidChange:", a2);
}

uint64_t __75__UIView__UIViewBacking___backing_addPrivateSubview_positioned_relativeTo___block_invoke(uint64_t a1)
{
  double MidX;
  double MidY;
  double v4;
  double v5;
  double v6;
  double v7;
  double Width;
  CGRect v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  objc_msgSend(*(id *)(a1 + 32), "bounds");
  MidX = CGRectGetMidX(v10);
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  MidY = CGRectGetMidY(v11);
  objc_msgSend(*(id *)(a1 + 40), "bounds");
  v5 = v4;
  objc_msgSend(*(id *)(a1 + 40), "bounds");
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  Width = CGRectGetWidth(v12);
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  return objc_msgSend(*(id *)(a1 + 40), "_privateSubview_updateGeometryWithCenter:bounds:", MidX, MidY, v5, v7, Width, CGRectGetHeight(v13));
}

void __44__UIView_Animation___stopAnimationWithUUID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "presentationLayer");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "valueForKeyPath:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKeyPath:", v3, *(_QWORD *)(a1 + 40));

}

uint64_t __114__UIView_Animation___updateModelValuesForAnimationWithUUID_useInitialValues_animatable_stateBlock_animationBlock___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setValue:forKeyPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (void)_invalidateBaselineConstraints
{
  void *v3;
  id v4;
  _QWORD v5[6];
  _QWORD v6[7];

  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    -[UIView _layoutEngine](self, "_layoutEngine");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForConstantChangeForSelectedAttributes_block_invoke;
      v5[3] = &unk_1E16E9928;
      v5[4] = self;
      v5[5] = _UILayoutAttributeIsBaselineAttribute;
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables_block_invoke;
      v6[3] = &unk_1E16E9900;
      v6[4] = self;
      v6[5] = v5;
      v6[6] = &__block_literal_global_94_2;
      v4 = v3;
      -[UIView _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:](self, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", v6);
      v3 = v4;
    }

  }
}

- (void)_resetLayoutEngineHostConstraints
{
  void *v1;
  void *v2;
  _QWORD v3[5];

  if (result)
  {
    v1 = result;
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __68__UIView_UIConstraintBasedLayout___resetLayoutEngineHostConstraints__block_invoke;
    v3[3] = &unk_1E16B41B8;
    v3[4] = result;
    v2 = (void *)objc_msgSend(result, "_layoutEngine");
    if (v2)
    {
      return (void *)objc_msgSend(v2, "withAutomaticOptimizationDisabled:", v3);
    }
    else
    {
      objc_msgSend(v1, "_resetLayoutEngineHostConstraintsForAxis:collectingViews:", 0, 0);
      return (void *)objc_msgSend(v1, "_resetLayoutEngineHostConstraintsForAxis:collectingViews:", 1, 0);
    }
  }
  return result;
}

- (void)_updateConstraintsIfNeededWithViewForVariableChangeNotifications:(id)a3
{
  void *v5;
  uint64_t v6;
  NSISEngine *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSISEngine *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSISEngine *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  void *v30;
  _QWORD v31[5];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[5];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[6];
  _QWORD v42[6];
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 3);
  v6 = MEMORY[0x1E0C809B0];
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke;
  v42[3] = &unk_1E16C3CF0;
  v42[4] = self;
  v42[5] = v5;
  -[UIView _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:](self, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", v42);
  if ((*(_QWORD *)&self->_viewFlags & 0x200000000000) == 0)
  {
    v41[0] = v6;
    v41[1] = 3221225472;
    v41[2] = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_3;
    v41[3] = &unk_1E16C3CF0;
    v41[4] = self;
    v41[5] = v5;
    v7 = -[UIView _layoutEngine](self, "_layoutEngine");
    if (v7)
      -[NSISEngine withAutomaticOptimizationDisabled:](v7, "withAutomaticOptimizationDisabled:", v41);
    else
      -[UIView _updateConstraintsIfNeededCollectingViews:forSecondPass:](self, "_updateConstraintsIfNeededCollectingViews:forSecondPass:", v5, 0);
  }
  v8 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("_UIViewsNeedingSecondPass"));
  if (objc_msgSend(v8, "count"))
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v38 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
          objc_msgSend(v13, "_setNeedsUpdateConstraintsNeedingLayout:", 0);
          objc_msgSend(v13, "_setInSecondConstraintsPass:", 1);
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
      }
      while (v10);
    }
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_4;
    v36[3] = &unk_1E16B41B8;
    v36[4] = self;
    if (self)
    {
      v14 = -[UIView _layoutEngine](self, "_layoutEngine");
      if (v14)
        -[NSISEngine withAutomaticOptimizationDisabled:](v14, "withAutomaticOptimizationDisabled:", v36);
      else
        -[UIView _updateConstraintsIfNeededCollectingViews:forSecondPass:](self, "_updateConstraintsIfNeededCollectingViews:forSecondPass:", 0, 1);
    }
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v15 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v33 != v17)
            objc_enumerationMutation(v8);
          v19 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * j);
          objc_msgSend(v19, "_setInSecondConstraintsPass:", 0);
          -[UIView _notifyArrangementsOfChangeInItem:withSelector:](v19, v19, (uint64_t)sel__didEvaluateMultilineHeightForView_);
        }
        v16 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
      }
      while (v16);
    }
  }
  v20 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("_UIViewsNeedingBaselineUpdate"));
  v21 = objc_msgSend(v20, "count");
  v22 = MEMORY[0x1E0C809B0];
  if (v21)
  {
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_5;
    v31[3] = &unk_1E16B41B8;
    v31[4] = v20;
    if (self)
    {
      v23 = -[UIView _layoutEngine](self, "_layoutEngine");
      if (v23)
        -[NSISEngine withAutomaticOptimizationDisabled:](v23, "withAutomaticOptimizationDisabled:", v31);
      else
        __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_5((uint64_t)v31);
    }
  }
  v24 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("_UIViewsPotentialTAMIC_NOEngineHosts"));
  if (objc_msgSend(v24, "count"))
  {
    v26 = v22;
    v27 = 3221225472;
    v28 = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_6;
    v29 = &unk_1E16B41B8;
    v30 = v24;
    if (self)
    {
      v25 = -[UIView _layoutEngineCreateIfNecessary](self, "_layoutEngineCreateIfNecessary", v26, v27, v28, v29, v30);
      if (v25)
        objc_msgSend(v25, "withAutomaticOptimizationDisabled:", &v26);
      else
        __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_6((uint64_t)&v26);
    }
  }

  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)a3))
    -[NSISEngine _UIKitPerformPendingChangeNotifications](objc_msgSend(a3, "_layoutEngine"));
}

void *__57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  void *v18;
  int8x16_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "_stopObservingVariablesOnlyToSupportTAMICChange:", 0);
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v2 = *(void **)(a1 + 48);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v22 != v5)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * i), "_removeFromEngine:", *(_QWORD *)(a1 + 32));
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      }
      while (v4);
    }
    v7 = (void *)objc_msgSend(*(id *)(a1 + 32), "delegate");
    if (v7 == *(void **)(a1 + 40))
    {
      objc_msgSend(v7, "_setViewsJostledDuringUpdateConstraintsPass:", 0);
      objc_msgSend(*(id *)(a1 + 32), "setDelegate:", 0);
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "_setLayoutEngine:", *(_QWORD *)(a1 + 56));
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 56), "delegate"), "_createJostledViewsIfNecessary");
  v8 = *(_QWORD **)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v8, "_clearLayoutVariableObservationsOnlyToSupportTAMICChange:", 0);
  else
    v8[14] |= 0x400uLL;
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 40), "_startObservingVariablesOnlyToSupportTAMICChange:", 0);
    v9 = objc_msgSend(*(id *)(a1 + 56), "delegate");
    if (v9)
    {
      v10 = v9;
      if (objc_msgSend(*(id *)(a1 + 40), "_isUnsatisfiableConstraintsLoggingSuspended"))
      {
        *(_WORD *)(v10 + 132) += *(_WORD *)(*(_QWORD *)(a1 + 40) + 132);
        *(_WORD *)(*(_QWORD *)(a1 + 40) + 132) = 0;
        objc_msgSend(*(id *)(a1 + 40), "_mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor:", v10);
      }
    }
  }
  v14 = MEMORY[0x1E0C809B0];
  v15 = 3221225472;
  v16 = __57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke_2;
  v17 = &unk_1E16C70A0;
  v12 = *(_QWORD *)(a1 + 32);
  result = *(void **)(a1 + 40);
  v18 = result;
  v19 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
  v20 = v12;
  if (result)
  {
    v13 = (void *)objc_msgSend(result, "_layoutEngine", v14, v15, v16, v17, v18, *(_OWORD *)&v19, v20);
    if (v13)
      return (void *)objc_msgSend(v13, "withAutomaticOptimizationDisabled:", &v14);
    else
      return (void *)__57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke_2((uint64_t)&v14);
  }
  return result;
}

- (void)_updateTraitsIfNeededWithBehavior:(uint64_t)a1
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  if (a1)
  {
    v4 = *(id *)(a1 + 96);
    v5 = v4;
    if (v4)
      -[UIViewController _updateTraitsIfNecessarySchedulingPropagation:]((uint64_t)v4, 0);
    if (os_variant_has_internal_diagnostics())
    {
      if (a2 == 3)
      {
        __UIFaultDebugAssertLog();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "This method should never be called with this behavior", buf, 2u);
        }

      }
    }
    else if (a2 == 3)
    {
      v8 = _updateTraitsIfNeededWithBehavior____s_category;
      if (!_updateTraitsIfNeededWithBehavior____s_category)
      {
        v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&_updateTraitsIfNeededWithBehavior____s_category);
      }
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "This method should never be called with this behavior", v10, 2u);
      }
    }
    if (a2 == 2 || (*(_QWORD *)(a1 + 112) & 0x800000000000) != 0)
    {
      objc_msgSend((id)a1, "_lastNotifiedTraitCollection");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView _updateTraitCollectionAndProcessChangesWithBehavior:previousCollection:]((void *)a1, a2, v6);

    }
  }
}

- (void)_updateTraitCollectionAndProcessChangesWithBehavior:(void *)a3 previousCollection:
{
  id v6;

  if (a1)
  {
    if (qword_1EDDCA898 != -1)
      dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
    if (byte_1EDDCA61D)
      -[UIView _updateCachedTraitCollectionIfNeeded]((uint64_t)a1);
    objc_msgSend(a1, "traitCollection");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[UIView _processChangesFromOldTraits:toCurrentTraits:withBehavior:](a1, a3, v6, a2);

  }
}

- (void)_processChangesFromOldTraits:(void *)a3 toCurrentTraits:(uint64_t)a4 withBehavior:
{
  id v7;
  id v8;
  _QWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    _UICreateTraitCollectionChangeDescription((uint64_t)v7, v8, (uint64_t)&v15);
    v9[1] = 3221225472;
    v10 = v15;
    v11 = v16;
    v12 = v17;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[2] = __68__UIView__processChangesFromOldTraits_toCurrentTraits_withBehavior___block_invoke;
    v9[3] = &unk_1E16EB390;
    v9[4] = a1;
    v13 = v18;
    v14 = a4;
    objc_msgSend(a1, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", v9);
    if ((_QWORD)v16)

  }
}

- (void)_wrappedProcessTraitChanges:(uint64_t)a3 withBehavior:
{
  uint64_t v5;
  BOOL v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int has_internal_diagnostics;
  int v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  void *v33;
  int v34;
  _QWORD *v36;
  NSObject *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  void *v41;
  char v42;
  _QWORD *v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = a3 == 3 || (v5 & 0x800000000000) != 0;
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 2 && (v5 & 0x800000000000) == 0)
    return;
  v7 = (void *)MEMORY[0x186DC9484]();
  *(_QWORD *)(a1 + 112) &= 0xFFFE7FFFFFFFFFFFLL;
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  v8 = byte_1EDDCA61D;
  if ((v5 & 0x800000000000) != 0
    && byte_1EDDCA61D
    && (!*(_BYTE *)(a2 + 56) || (*(_QWORD *)(a1 + 112) & 0x2000000000000) != 0))
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    objc_msgSend((id)a1, "_allSubviews");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v50;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v50 != v12)
            objc_enumerationMutation(v9);
          _UIViewInvalidateTraitCollectionAndSchedulePropagation(*(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * i), 0);
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
      }
      while (v11);
    }

  }
  if (*(_BYTE *)(a2 + 56))
    v14 = (*(_DWORD *)(a1 + 124) >> 18) & 1;
  else
    v14 = 1;
  v15 = !v6;
  if (!v14)
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    objc_msgSend((id)a1, "_setLastNotifiedTraitCollection:", *(_QWORD *)(a2 + 8));
    objc_msgSend((id)a1, "_traitCollectionDidChangeInternal:", a2);
  }
  if (a3 == 2)
  {
    -[_UITraitChangeRegistry updateAuxiliaryChildrenTraitsIfNeeded](*(_QWORD *)(a1 + 56));
    if (_UIPresentationControllersInheritTraitsFromViewHierarchy())
    {
      objc_msgSend((id)a1, "_presentationControllerToNotifyOnLayoutSubviews");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = v17;
      if (v17)
        objc_msgSend(v17, "_updateAuxiliaryChildTraitEnvironmentsIfNeeded");

    }
  }
  else if (a3 == 1)
  {
    if (v14)
    {
      v16 = (void *)a1;
      goto LABEL_80;
    }
    goto LABEL_81;
  }
  v40 = v14;
  v41 = v7;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = (_QWORD *)a1;
  objc_msgSend((id)a1, "_allSubviews");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v45, v57, 16);
  if (!v20)
    goto LABEL_79;
  v22 = v20;
  v23 = *(_QWORD *)v46;
  *(_QWORD *)&v21 = 138412290;
  v39 = v21;
  do
  {
    v24 = 0;
    do
    {
      if (*(_QWORD *)v46 != v23)
        objc_enumerationMutation(v19);
      v25 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * v24);
      if (!v8)
      {
        -[UIView __viewDelegate](*(id **)(*((_QWORD *)&v45 + 1) + 8 * v24));
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        if (v32)
          goto LABEL_73;
        goto LABEL_57;
      }
      if (!v25 || (*(_QWORD *)(v25 + 112) & 0x30000) == 0)
      {
        -[UIView __viewDelegate](*(id **)(*((_QWORD *)&v45 + 1) + 8 * v24));
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = (void *)v26;
        if (v26)
          -[UIViewController _updateTraitsIfNecessarySchedulingPropagation:](v26, 0);
        if (a3 != 2 && (*(_QWORD *)(v25 + 112) & 0x800000000000) == 0)
        {
          has_internal_diagnostics = os_variant_has_internal_diagnostics();
          v29 = *(_DWORD *)(v25 + 120);
          if (!has_internal_diagnostics)
          {
            if ((v29 & 0x80) == 0)
            {
              v30 = qword_1EDDCA6F0;
              if (!qword_1EDDCA6F0)
              {
                v30 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                atomic_store(v30, (unint64_t *)&qword_1EDDCA6F0);
              }
              v31 = *(NSObject **)(v30 + 8);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v39;
                *(_QWORD *)&buf[4] = v25;
                _os_log_impl(&dword_185066000, v31, OS_LOG_TYPE_ERROR, "UIKit internal inconsistency: subview doesn't need trait propagation but cached trait collection is not valid: %@", buf, 0xCu);
              }
            }
            goto LABEL_72;
          }
          if ((v29 & 0x80) == 0)
          {
            __UIFaultDebugAssertLog();
            v37 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = v39;
              *(_QWORD *)&buf[4] = v25;
              _os_log_fault_impl(&dword_185066000, v37, OS_LOG_TYPE_FAULT, "UIKit internal inconsistency: subview doesn't need trait propagation but cached trait collection is not valid: %@", buf, 0xCu);
            }
            goto LABEL_71;
          }
          goto LABEL_72;
        }
        -[UIView _updateCachedTraitCollectionIfNeeded](v25);

LABEL_57:
        objc_msgSend((id)v25, "_lastNotifiedTraitCollection", v39);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = *(void **)a2;
        v34 = dyld_program_sdk_at_least();
        if (v33 != v27 || v34 == 0)
        {
          if (v34)
          {
LABEL_69:
            objc_msgSend((id)v25, "traitCollection");
            v37 = objc_claimAutoreleasedReturnValue();
            v55 = 0u;
            v56 = 0u;
            *(_OWORD *)buf = 0u;
            v54 = 0u;
            _UICreateTraitCollectionChangeDescription((uint64_t)v27, v37, (uint64_t)buf);
            -[UIView _wrappedProcessTraitChanges:withBehavior:](v25, buf, a3);
            if ((_QWORD)v54)

LABEL_71:
LABEL_72:

            goto LABEL_73;
          }
        }
        else
        {
          if (*(_QWORD *)(v25 + 96))
            goto LABEL_69;
          if ((v43[14] & 0x2000000000000) != 0)
            goto LABEL_69;
          if ((*(_QWORD *)(v25 + 104) & 0x8000000000) != 0)
            goto LABEL_69;
          if ((*(_DWORD *)(v25 + 120) & 0x100) != 0)
          {
            objc_getAssociatedObject((id)v25, &_UIViewTraitOverridesKey);
            v36 = (_QWORD *)objc_claimAutoreleasedReturnValue();
            v42 = -[_UITraitOverrides _isEmpty](v36);

            if ((v42 & 1) == 0)
              goto LABEL_69;
          }
        }
        -[UIView _wrappedProcessTraitChanges:withBehavior:](v25, a2, a3);
        goto LABEL_72;
      }
LABEL_73:
      ++v24;
    }
    while (v22 != v24);
    v38 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v45, v57, 16);
    v22 = v38;
  }
  while (v38);
LABEL_79:

  v16 = v43;
  v7 = v41;
  if (v40)
LABEL_80:
    objc_msgSend(v16, "_traitCollectionDidChangeOnSubtreeInternal:", a2, v39);
LABEL_81:
  objc_autoreleasePoolPop(v7);
}

- (void)_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:(id)a3
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  NSObject *v15;
  unint64_t v16;
  NSObject *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  UIView *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = -[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate");
  if (!v5)
  {
    (*((void (**)(id))a3 + 2))(a3);
    return;
  }
  ++*(_WORD *)(v5 + 132);
  (*((void (**)(id))a3 + 2))(a3);
  v6 = -[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate");
  if (os_variant_has_internal_diagnostics())
  {
    if (v6)
      goto LABEL_4;
    v15 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v27 = self;
      _os_log_fault_impl(&dword_185066000, v15, OS_LOG_TYPE_FAULT, "Unexpected disappearance of layout engine while unsatisfiable constraints logging was suspended. self = %@", buf, 0xCu);
    }
  }
  else
  {
    if (v6)
    {
LABEL_4:
      if (!*(_WORD *)(v6 + 132))
      {
        if (os_variant_has_internal_diagnostics())
        {
          v20 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412290;
            v27 = (UIView *)v6;
            _os_log_fault_impl(&dword_185066000, v20, OS_LOG_TYPE_FAULT, "Trying to decrement _unsatisfiableConstraintsLoggingSuspensionCount when it's already 0. We lost count one way or another, or else we had a stack recursion. self = %@", buf, 0xCu);
          }
        }
        else
        {
          v18 = qword_1ECD79190;
          if (!qword_1ECD79190)
          {
            v18 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
            atomic_store(v18, (unint64_t *)&qword_1ECD79190);
          }
          v19 = *(NSObject **)(v18 + 8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v27 = (UIView *)v6;
            _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "Trying to decrement _unsatisfiableConstraintsLoggingSuspensionCount when it's already 0. We lost count one way or another, or else we had a stack recursion. self = %@", buf, 0xCu);
          }
        }
      }
      if (*(_WORD *)(v6 + 132))
        --*(_WORD *)(v6 + 132);
      if ((objc_msgSend((id)v6, "_isUnsatisfiableConstraintsLoggingSuspended") & 1) == 0)
      {
        if ((*(_QWORD *)(v6 + 112) & 0x10) != 0 && (void *)v6 == -[UIView _outermostLayoutEngineDelegateView](self))
          *(_QWORD *)(v6 + 112) &= ~0x10uLL;
        v7 = (void *)objc_msgSend((id)objc_msgSend((id)v6, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 0), "allObjects");
        if (objc_msgSend(v7, "count"))
        {
          v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v22;
            do
            {
              for (i = 0; i != v10; ++i)
              {
                if (*(_QWORD *)v22 != v11)
                  objc_enumerationMutation(v7);
                v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
                if (objc_msgSend(v13, "isActive"))
                  objc_msgSend(v8, "addObject:", v13);
              }
              v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
            }
            while (v10);
          }
          if (objc_msgSend(v8, "count"))
          {
            p_viewFlags = &self->_viewFlags;
            *((_QWORD *)p_viewFlags + 1) |= 8uLL;
            objc_msgSend(MEMORY[0x1E0D156E0], "deactivateConstraints:", v8);
            objc_msgSend(MEMORY[0x1E0D156E0], "activateConstraints:", v8);
            *((_QWORD *)p_viewFlags + 1) &= ~8uLL;
          }

        }
        objc_msgSend((id)v6, "_clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended");
      }
      return;
    }
    v16 = qword_1ECD79198;
    if (!qword_1ECD79198)
    {
      v16 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v16, (unint64_t *)&qword_1ECD79198);
    }
    v17 = *(NSObject **)(v16 + 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v27 = self;
      _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, "Unexpected disappearance of layout engine while unsatisfiable constraints logging was suspended. self = %@", buf, 0xCu);
    }
  }
}

- (BOOL)_isUnsatisfiableConstraintsLoggingSuspended
{
  return self->_unsatisfiableConstraintsLoggingSuspensionCount != 0;
}

void __68__UIView__processChangesFromOldTraits_toCurrentTraits_withBehavior___block_invoke(uint64_t a1)
{
  -[UIView _wrappedProcessTraitChanges:withBehavior:](*(_QWORD *)(a1 + 32), a1 + 40, *(_QWORD *)(a1 + 104));
}

- (id)_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:(BOOL)a3
{
  _BOOL4 v3;
  id AssociatedObject;
  BOOL v6;

  v3 = a3;
  AssociatedObject = objc_getAssociatedObject(self, &__constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedKey);
  if (AssociatedObject)
    v6 = 1;
  else
    v6 = !v3;
  if (!v6)
  {
    AssociatedObject = objc_alloc_init(MEMORY[0x1E0C99E20]);
    objc_setAssociatedObject(self, &__constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedKey, AssociatedObject, (void *)1);

  }
  return AssociatedObject;
}

- (void)_clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended
{
  objc_setAssociatedObject(self, &__constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedKey, 0, (void *)1);
}

- (void)_setLayoutEngine:(id)a3
{
  NSISEngine *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = (NSISEngine *)a3;
  if (self->_layoutEngine != v5)
  {
    objc_storeStrong((id *)&self->_layoutEngine, a3);
    if (self->_layoutEngine)
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      -[UIView layoutGuides](self, "layoutGuides", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v12;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v12 != v9)
              objc_enumerationMutation(v6);
            objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "_invalidateLayoutFrame");
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        }
        while (v8);
      }

    }
  }

}

- (void)_createJostledViewsIfNecessary
{
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x20) != 0
    && !-[UIView _viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:](self, "_viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:", 1))
  {
    -[UIView _setViewsJostledDuringUpdateConstraintsPass:](self, "_setViewsJostledDuringUpdateConstraintsPass:", objc_msgSend(MEMORY[0x1E0C99E20], "set"));
  }
}

- (void)_traitCollectionDidChangeInternal:(const _UITraitCollectionChangeDescription *)a3
{
  unsigned int v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  unint64_t v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  id var0;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  UIView *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  if (byte_1EDDCA61D)
  {
    -[UIView _invalidateAppearanceIfNeeded](self);
    v5 = *((_DWORD *)&self->_viewFlags + 4);
  }
  else
  {
    v5 = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFF7F;
    *((_DWORD *)&self->_viewFlags + 4) = v5;
  }
  if ((v5 & 0x40) != 0 && _UIShouldApplyTraitStorageRecordsForTraitChanges((uint64_t)&a3->var2))
    -[NSObject _applyTraitStorageRecordsForTraitCollection:](self, "_applyTraitStorageRecordsForTraitCollection:", a3->var1);
  if (a3->var4.var0 && (*(_QWORD *)&self->_viewFlags & 0x20) != 0)
    -[UIView invalidateIntrinsicContentSize](self, "invalidateIntrinsicContentSize");
  if (a3->var4.var1)
  {
    if (-[UIView _canDrawContent](self, "_canDrawContent"))
    {
      -[UIView _setNeedsContentsFormatUpdate](self, "_setNeedsContentsFormatUpdate");
      if (dyld_program_sdk_at_least())
        -[UIView setNeedsDisplay](self, "setNeedsDisplay");
    }
  }
  v6 = ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 19) & 1;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFF7FFFF | ((-[UIView effectiveUserInterfaceLayoutDirection](self, "effectiveUserInterfaceLayoutDirection") == UIUserInterfaceLayoutDirectionRightToLeft) << 19);
  -[UIView _updateDirectionalConstraintsIfNeededWasFlipped:]((uint64_t)self, v6);
  if (self->_readableContentGuide)
  {
    objc_msgSend(a3->var0, "preferredContentSizeCategory");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a3->var1, "preferredContentSizeCategory");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v7, "isEqualToString:", v8) & 1) == 0)
      -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);

  }
  os_variant_has_internal_diagnostics();
  +[UITraitCollection _currentTraitCollectionIfExists]();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView traitCollection](self, "traitCollection");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v10);

  v31 = (void *)_UISetCurrentFallbackEnvironment(self);
  v11 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  if ((v11 & 0x40000) == 0)
  {
    if (!objc_msgSend(a3->var1, "hasDifferentColorAppearanceComparedToTraitCollection:", a3->var0))
      goto LABEL_27;
    v11 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  }
  *(_QWORD *)((char *)&self->_viewFlags + 20) = v11 & 0xFFFFFFFFFFFBFFFFLL;
  if (!_UITraitUsageTrackingEnabled() || (dyld_program_sdk_at_least() & 1) == 0)
    -[UIView _effectiveThemeTraitCollectionDidChangeInternal:](self, 1);
  -[UIView _dynamicUserInterfaceTraitDidChange](self, "_dynamicUserInterfaceTraitDidChange");
LABEL_27:
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  -[UIView interactions](self, "interactions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v32, v46, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v33 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v17, "_viewTraitCollectionDidChange:", a3->var0);
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v32, v46, 16);
    }
    while (v14);
  }

  -[UIView _backing_traitCollectionDidChange:](self, a3->var0);
  if (a3->var0)
    -[_UITraitChangeRegistry traitsDidChange:forTraitEnvironment:withPreviousTraitCollection:]((uint64_t)self->_traitChangeRegistry, (uint64_t *)&a3->var2, self, a3->var0);
  objc_opt_self();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = _UIShouldLogTraitCollectionChangeForInstanceAndMethod(v18, (uint64_t)self, (uint64_t)sel_traitCollectionDidChange_);

  if (v19)
  {
    v22 = qword_1EDDCA6E8;
    if (!qword_1EDDCA6E8)
    {
      v22 = __UILogCategoryGetNode("TraitCollectionChange", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v22, (unint64_t *)&qword_1EDDCA6E8);
    }
    v23 = *(NSObject **)(v22 + 8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = v23;
      NSStringFromSelector(sel_traitCollectionDidChange_);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      var0 = a3->var0;
      -[UIView traitCollection](self, "traitCollection");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      +[UITraitCollection _descriptionForChangeFromTraitCollection:toTraitCollection:](UITraitCollection, "_descriptionForChangeFromTraitCollection:toTraitCollection:", var0, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = a3->var0;
      -[UIView traitCollection](self, "traitCollection");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413314;
      v37 = v25;
      v38 = 2112;
      v39 = self;
      v40 = 2112;
      v41 = v28;
      v42 = 2112;
      v43 = v29;
      v44 = 2112;
      v45 = v30;
      _os_log_impl(&dword_185066000, v24, OS_LOG_TYPE_ERROR, "Sending -%@ to %@\n\t► trait changes: %@\n\t► previous: %@\n\t► current: %@", buf, 0x34u);

    }
  }
  -[UIView traitCollectionDidChange:](self, "traitCollectionDidChange:", a3->var0);
  _UIRestorePreviousFallbackEnvironment(v31);
  +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v9);
  if (_UIPresentationControllersInheritTraitsFromViewHierarchy())
  {
    -[UIView _presentationControllerToNotifyOnLayoutSubviews](self, "_presentationControllerToNotifyOnLayoutSubviews");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v20;
    if (v20)
      objc_msgSend(v20, "_updateTraitsIfNecessaryInitiatingPropagation:", 0);

  }
}

- (void)_invalidateAppearanceIfNeeded
{
  void *v2;
  _BOOL4 v3;

  if (a1
    && +[_UITraitBasedAppearance _hasAnyCustomizations](_UITraitBasedAppearance, "_hasAnyCustomizations"))
  {
    objc_msgSend(a1, "traitCollection");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = +[_UITraitBasedAppearance _hasCustomizationsForTraitCollection:class:guideClass:](_UITraitBasedAppearance, "_hasCustomizationsForTraitCollection:class:guideClass:", v2, objc_opt_class(), objc_msgSend(a1, "_appearanceGuideClass"));

    if (v3)
      objc_msgSend(a1, "_invalidateAppearance");
  }
}

- (void)_updateDirectionalConstraintsIfNeededWasFlipped:(uint64_t)a1
{
  int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  _QWORD v15[7];

  if (a1)
  {
    v4 = *(_DWORD *)(a1 + 120);
    v5 = v4 & 0x80000;
    if ((v4 & 0x400) != 0 && ((((*(_QWORD *)&v4 & 0x80000) == 0) ^ a2) & 1) == 0)
    {
      v6 = *(_QWORD *)(a1 + 328);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v6;
      objc_msgSend((id)a1, "_updateInferredLayoutMargins");
      objc_msgSend((id)a1, "_updateLayoutMarginsGuideConstraintsIfNecessary");
      v5 = *(_DWORD *)(a1 + 120) & 0x80000;
    }
    if ((((v5 == 0) ^ a2) & 1) == 0)
    {
      objc_msgSend((id)a1, "_allSubviews");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "count");

      if (v8)
      {
        objc_msgSend((id)a1, "_layoutEngine");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = MEMORY[0x1E0C809B0];
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 3221225472;
        v12[2] = __58__UIView__updateDirectionalConstraintsIfNeededWasFlipped___block_invoke_2;
        v12[3] = &unk_1E16EB548;
        v11 = v9;
        v13 = v11;
        v14 = a1;
        v15[0] = v10;
        v15[1] = 3221225472;
        v15[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables_block_invoke;
        v15[3] = &unk_1E16E9900;
        v15[4] = a1;
        v15[5] = &__block_literal_global_1043_0;
        v15[6] = v12;
        objc_msgSend((id)a1, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", v15);
        if ((*(_QWORD *)(a1 + 104) & 0x800000000000000) == 0)
          objc_msgSend((id)a1, "setNeedsLayout");

      }
    }
  }
}

- (void)_traitCollectionDidChangeOnSubtreeInternal:(const _UITraitCollectionChangeDescription *)a3
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  if (objc_msgSend(a3->var1, "hasDifferentColorAppearanceComparedToTraitCollection:", a3->var0))
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!self)
      {
        __UIFaultDebugAssertLog();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_185066000, v7, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", buf, 2u);
        }

      }
    }
    else if (!self)
    {
      v8 = _traitCollectionDidChangeOnSubtreeInternal____s_category;
      if (!_traitCollectionDidChangeOnSubtreeInternal____s_category)
      {
        v8 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v8, (unint64_t *)&_traitCollectionDidChangeOnSubtreeInternal____s_category);
      }
      v9 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_185066000, v9, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", v10, 2u);
      }
    }
    +[UITraitCollection _currentTraitCollectionIfExists]();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView traitCollection](self, "traitCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v5);

    v6 = (void *)_UISetCurrentFallbackEnvironment(self);
    if (self)
    {
      if (-[UIView _definesDynamicTintColor](self, "_definesDynamicTintColor"))
        -[UIView _dispatchTintColorVisitorWithReasons:](self, 1);
    }
    _UIRestorePreviousFallbackEnvironment(v6);
    +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v4);

  }
}

- (BOOL)_definesDynamicTintColor
{
  void *v2;
  char v3;

  _UIViewGetInteractionTintColor(self);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_isDynamic");

  return v3;
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke(uint64_t result)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = MEMORY[0x1E0C809B0];
  v5 = 3221225472;
  v6 = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_2;
  v7 = &unk_1E16C3CF0;
  v1 = *(void **)(result + 32);
  v2 = *(_QWORD *)(result + 40);
  v8 = v1;
  v9 = v2;
  if (v1)
  {
    v3 = (void *)objc_msgSend(v1, "_layoutEngine", v4, v5, v6, v7, v8, v9);
    if (v3)
      return objc_msgSend(v3, "withAutomaticOptimizationDisabled:", &v4);
    else
      return objc_msgSend(v1, "_updateConstraintsIfNeededCollectingViews:forSecondPass:", v2, 0);
  }
  return result;
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateConstraintsIfNeededCollectingViews:forSecondPass:", *(_QWORD *)(a1 + 40), 0);
}

- (BOOL)nsli_removeConstraint:(id)a3
{
  NSArray *v5;
  NSArray *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = -[UIView _constraintsExceptingSubviewAutoresizingConstraints](self, "_constraintsExceptingSubviewAutoresizingConstraints");
  if (v5)
  {
    v6 = v5;
    v7 = -[NSArray indexOfObject:](v5, "indexOfObject:", a3);
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      LOBYTE(v5) = 0;
    }
    else
    {
      v8 = v7;
      -[UIView _layoutEngine_willRemoveLayoutConstraint:](self, a3);
      -[NSArray removeObjectAtIndex:](v6, "removeObjectAtIndex:", v8);
      LOBYTE(v5) = 1;
    }
  }
  return (char)v5;
}

- (void)_layoutEngine_willRemoveLayoutConstraint:(void *)result
{
  uint64_t v3;

  if (result)
  {
    v3 = objc_msgSend(result, "_layoutEngine");
    if (objc_msgSend(a2, "container"))
    {
      if (v3)
        objc_msgSend(a2, "_removeFromEngine:", v3);
      _UIOldConstraintsSupportUpdateDependentViewsForConstraint(a2, 0);
    }
    return (void *)objc_msgSend(a2, "setContainer:", 0);
  }
  return result;
}

- (void)_clearLayoutVariableObservationsOnlyToSupportTAMICChange:(BOOL)a3
{
  NSMutableArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[UIView _uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:](self, "_uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:");
  if (!a3)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v5 = -[UIView _mutableLayoutGuides](self, "_mutableLayoutGuides", 0);
    v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "_uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:", 0);
        }
        while (v7 != v9);
        v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v7);
    }
  }
}

- (void)_uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:(BOOL)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v4 = -[UIView _uili_existingBaseFrameVariables](self, "_uili_existingBaseFrameVariables", 0);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          -[NSMapTable removeObjectForKey:](-[UIView _stashedLayoutVariableObservations](self, "_stashedLayoutVariableObservations"), "removeObjectForKey:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++));
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }
  }
  else
  {
    -[NSMapTable removeAllObjects](-[UIView _stashedLayoutVariableObservations](self, "_stashedLayoutVariableObservations"), "removeAllObjects");
  }
}

- (NSMapTable)_stashedLayoutVariableObservations
{
  return self->_stashedLayoutVariableObservations;
}

- (void)_stopObservingVariablesOnlyToSupportTAMICChange:(BOOL)a3
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSMutableArray *obj;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = -[UIView _uili_existingBaseFrameVariables](self, "_uili_existingBaseFrameVariables");
  v6 = -[UIView _uili_observableLayoutEngineForBaseFrameVariables:](self, "_uili_observableLayoutEngineForBaseFrameVariables:", 1);
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v44;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v44 != v9)
          objc_enumerationMutation(v5);
        v11 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v10);
        if (qword_1ECD790C0 != -1)
          dispatch_once(&qword_1ECD790C0, &__block_literal_global_629);
        if (_MergedGlobals_64)
          objc_msgSend(v6, "stopObservingChangesForVariable:", v11);
        else
          objc_msgSend(v6, "removeObservableForVariable:", v11);
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v43, v50, 16);
    }
    while (v8);
  }
  if (!a3)
  {
    v12 = -[UIView _uili_observableLayoutEngineForBaseFrameVariables:](self, "_uili_observableLayoutEngineForBaseFrameVariables:", 0);
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v13 = -[UIView _uili_existingObservationEligibleLayoutVariables](self, "_uili_existingObservationEligibleLayoutVariables");
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v40;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v40 != v16)
            objc_enumerationMutation(v13);
          v18 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * v17);
          if ((objc_msgSend(v5, "containsObject:", v18) & 1) == 0)
          {
            if (qword_1ECD790C0 != -1)
              dispatch_once(&qword_1ECD790C0, &__block_literal_global_629);
            if (_MergedGlobals_64)
              objc_msgSend(v12, "stopObservingChangesForVariable:", v18);
            else
              objc_msgSend(v12, "removeObservableForVariable:", v18);
          }
          ++v17;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, v49, 16);
      }
      while (v15);
    }
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    obj = -[UIView _mutableLayoutGuides](self, "_mutableLayoutGuides");
    v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v35, v48, 16);
    if (v19)
    {
      v20 = v19;
      v30 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v36 != v30)
            objc_enumerationMutation(obj);
          v22 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
          v31 = 0u;
          v32 = 0u;
          v33 = 0u;
          v34 = 0u;
          v23 = (void *)objc_msgSend(v22, "_uili_existingObservationEligibleLayoutVariables");
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v31, v47, 16);
          if (v24)
          {
            v25 = v24;
            v26 = *(_QWORD *)v32;
            do
            {
              v27 = 0;
              do
              {
                if (*(_QWORD *)v32 != v26)
                  objc_enumerationMutation(v23);
                v28 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v27);
                if (qword_1ECD790C0 != -1)
                  dispatch_once(&qword_1ECD790C0, &__block_literal_global_629);
                if (_MergedGlobals_64)
                  objc_msgSend(v12, "stopObservingChangesForVariable:", v28);
                else
                  objc_msgSend(v12, "removeObservableForVariable:", v28);
                ++v27;
              }
              while (v25 != v27);
              v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v31, v47, 16);
            }
            while (v25);
          }
        }
        v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v35, v48, 16);
      }
      while (v20);
    }
  }
}

void __77__UIView_InProcessAnimations_Internal___removePresentationModifier_withInfo___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "owningView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v4 = v2;
    objc_msgSend(v2, "layer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removePresentationModifier:", *(_QWORD *)(a1 + 40));

    v2 = v4;
  }

}

- (void)addLayoutGuide:(UILayoutGuide *)layoutGuide
{
  UILayoutGuide *v4;
  UIView *v5;
  void *v6;
  void *v7;
  void *v8;
  UILayoutGuide *v9;

  v4 = layoutGuide;
  if (v4)
  {
    v9 = v4;
    -[UILayoutGuide owningView](v4, "owningView");
    v5 = (UIView *)objc_claimAutoreleasedReturnValue();

    v4 = v9;
    if (v5 != self)
    {
      if (-[UILayoutGuide _isLockedToOwningView](v9, "_isLockedToOwningView"))
      {
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("You may not change the owning view of a system-vended UILayoutGuide"));
      }
      else
      {
        -[UILayoutGuide owningView](v9, "owningView");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        -[UILayoutGuide _setAllowOwningViewSetting:](v9, "_setAllowOwningViewSetting:", 1);
        -[UILayoutGuide setOwningView:](v9, "setOwningView:", self);
        -[UIView _mutableLayoutGuidesCreateIfNecessary](self);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addObject:", v9);

        objc_msgSend(v6, "_mutableLayoutGuides");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "removeObject:", v9);

        if (qword_1EDDCA840 != -1)
          dispatch_once(&qword_1EDDCA840, &__block_literal_global_3324);
        if ((objc_opt_isKindOfClass() & 1) != 0)
          *((_DWORD *)&self->_viewFlags + 4) |= 0x8000u;

      }
      v4 = v9;
    }
  }

}

- (id)_mutableLayoutGuidesCreateIfNecessary
{
  id v2;

  if (a1)
  {
    objc_msgSend(a1, "_mutableLayoutGuides");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_setAssociatedObject(a1, &_UIViewLayoutGuidesAssocObjectKey, v2, (void *)1);
    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (void)_setInSecondConstraintsPass:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x8000000000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFF7FFFFFFFFFFFFLL | v3;
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateConstraintsIfNeededCollectingViews:forSecondPass:", 0, 1);
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateConstraintsIfNeededCollectingViews:forSecondPass:", *(_QWORD *)(a1 + 40), 0);
}

- (void)_mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor:(id)a3
{
  void *v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  int v9;
  UIView *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_variant_has_internal_diagnostics())
  {
    if (a3)
      goto LABEL_3;
    v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      v9 = 138412290;
      v10 = self;
      _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Unexpected nil ancestor for merging broken constraints information. self = %@", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    if (a3)
    {
LABEL_3:
      if (self)
        v5 = (void *)objc_msgSend(-[UIView _constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:](self, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 0), "allObjects");
      else
        v5 = 0;
      if (objc_msgSend(v5, "count"))
        objc_msgSend((id)objc_msgSend(a3, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 1), "addObjectsFromArray:", v5);
      goto LABEL_7;
    }
    v7 = _mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor____s_category;
    if (!_mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor____s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&_mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor____s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = self;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Unexpected nil ancestor for merging broken constraints information. self = %@", (uint8_t *)&v9, 0xCu);
    }
  }
LABEL_7:
  -[UIView _clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended](self, "_clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended");
}

- (id)_hoverStyleStorage
{
  if (a1)
  {
    objc_getAssociatedObject(a1, &_UIHoverStyleStorageKey);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (void)_setOverrideUserInterfaceRenderingMode:(int64_t)a3
{
  void *v4;
  id v5;

  -[UIView _internalTraitOverrides](self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a3)
    objc_msgSend(v4, "_setNSIntegerValue:forTraitToken:", a3, 0x1E1A996C0);
  else
    objc_msgSend(v4, "_removeTraitToken:", 0x1E1A996C0);

}

- (id)_internalTraitOverrides
{
  _QWORD *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(a1, "traitOverrides");
    v1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    -[_UITraitOverrides _overridesAppliedBefore](v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (id)traitOverrides
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  void *v4;

  p_viewFlags = &self->_viewFlags;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) != 0)
  {
    objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = -[_UITraitOverrides initWithDelegate:]([_UITraitOverrides alloc], self);
    objc_setAssociatedObject(self, &_UIViewTraitOverridesKey, v4, (void *)1);
    *((_DWORD *)p_viewFlags + 4) |= 0x100u;
  }
  return v4;
}

- (void)setTransform3D:(CATransform3D *)transform3D
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CATransform3D v13;
  CATransform3D a;
  CATransform3D v15;

  memset(&v15, 0, sizeof(v15));
  -[UIView _backing_transform3D]((uint64_t)self, &v15);
  v5 = *(_OWORD *)&transform3D->m33;
  *(_OWORD *)&a.m31 = *(_OWORD *)&transform3D->m31;
  *(_OWORD *)&a.m33 = v5;
  v6 = *(_OWORD *)&transform3D->m43;
  *(_OWORD *)&a.m41 = *(_OWORD *)&transform3D->m41;
  *(_OWORD *)&a.m43 = v6;
  v7 = *(_OWORD *)&transform3D->m13;
  *(_OWORD *)&a.m11 = *(_OWORD *)&transform3D->m11;
  *(_OWORD *)&a.m13 = v7;
  v8 = *(_OWORD *)&transform3D->m23;
  *(_OWORD *)&a.m21 = *(_OWORD *)&transform3D->m21;
  *(_OWORD *)&a.m23 = v8;
  -[UIView _backing_setTransform3D:]((uint64_t)self, (__int128 *)&a);
  v9 = *(_OWORD *)&transform3D->m33;
  *(_OWORD *)&a.m31 = *(_OWORD *)&transform3D->m31;
  *(_OWORD *)&a.m33 = v9;
  v10 = *(_OWORD *)&transform3D->m43;
  *(_OWORD *)&a.m41 = *(_OWORD *)&transform3D->m41;
  *(_OWORD *)&a.m43 = v10;
  v11 = *(_OWORD *)&transform3D->m13;
  *(_OWORD *)&a.m11 = *(_OWORD *)&transform3D->m11;
  *(_OWORD *)&a.m13 = v11;
  v12 = *(_OWORD *)&transform3D->m23;
  *(_OWORD *)&a.m21 = *(_OWORD *)&transform3D->m21;
  *(_OWORD *)&a.m23 = v12;
  v13 = v15;
  if (!CATransform3DEqualToTransform(&a, &v13))
  {
    a = v15;
    -[UIView _didChangeTransformFromPreviousTransform:]((uint64_t)self, &a);
  }
}

- (void)_didChangeTransformFromPreviousTransform:(uint64_t)a1
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  int v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  CGAffineTransform v56;
  _QWORD v57[4];
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  CATransform3D v68;
  CATransform3D v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend((id)a1, "_layoutEngine");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (dyld_program_sdk_at_least())
    {

      goto LABEL_46;
    }
    if (v5)
    {
      v6 = objc_msgSend(v5, "_forceLayoutEngineSolutionInRationalEdges");

      if ((v6 & 1) != 0)
        goto LABEL_46;
    }
    else
    {

    }
    if ((*(_QWORD *)(a1 + 104) & 0x400000000000000) == 0 || (objc_msgSend((id)a1, "_hostsLayoutEngine") & 1) != 0)
    {
LABEL_46:
      v27 = *(_DWORD *)(a1 + 120);
      if ((v27 & 0x800000) != 0)
      {
        v28 = *(_QWORD *)(a1 + 112);
        if ((v28 & 0x1000000) == 0)
          goto LABEL_53;
      }
      else
      {
        -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary]((_QWORD *)a1);
        v28 = *(_QWORD *)(a1 + 112);
        v27 = *(_DWORD *)(a1 + 120);
        if ((v28 & 0x1000000) == 0)
        {
LABEL_53:
          if (v27 & 0x3C | v28 & 0x8000000000000000)
          {
            v40 = 1024;
            v34 = a2[5];
            v49 = a2[4];
            v50 = v34;
            v35 = a2[7];
            v51 = a2[6];
            v52 = v35;
            v36 = a2[1];
            v45 = *a2;
            v46 = v36;
            v37 = a2[3];
            v47 = a2[2];
            v41 = 0u;
            v42 = 0u;
            v43 = 0u;
            v44 = 0u;
            v48 = v37;
            v55 = 0;
            v54 = 0u;
            v53 = 0u;
            -[UIView _notifyGeometryObserversWithChangeInfo:](a1, &v40);
          }
          return;
        }
      }
      memset(&v69, 0, sizeof(v69));
      -[UIView _backing_transform3D](a1, &v69);
      v68 = v69;
      if (MEMORY[0x186DC5824](&v68))
      {
        v68 = v69;
        CATransform3DGetAffineTransform(&v56, &v68);
        objc_msgSend((id)a1, "_backdropMaskViewForGrayscaleTint");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_OWORD *)&v68.m11 = *(_OWORD *)&v56.a;
        *(_OWORD *)&v68.m13 = *(_OWORD *)&v56.c;
        *(_OWORD *)&v68.m21 = *(_OWORD *)&v56.tx;
        objc_msgSend(v29, "setTransform:", &v68);

        objc_msgSend((id)a1, "_backdropMaskViewForColorTint");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_OWORD *)&v68.m11 = *(_OWORD *)&v56.a;
        *(_OWORD *)&v68.m13 = *(_OWORD *)&v56.c;
        *(_OWORD *)&v68.m21 = *(_OWORD *)&v56.tx;
        objc_msgSend(v30, "setTransform:", &v68);

        -[UIView _backdropMaskViewForColorBurnTint]((void *)a1);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_OWORD *)&v68.m11 = *(_OWORD *)&v56.a;
        *(_OWORD *)&v68.m13 = *(_OWORD *)&v56.c;
        *(_OWORD *)&v68.m21 = *(_OWORD *)&v56.tx;
        objc_msgSend(v31, "setTransform:", &v68);

        -[UIView _backdropMaskViewForDarkeningTint]((void *)a1);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_OWORD *)&v68.m11 = *(_OWORD *)&v56.a;
        *(_OWORD *)&v68.m13 = *(_OWORD *)&v56.c;
        *(_OWORD *)&v68.m21 = *(_OWORD *)&v56.tx;
        objc_msgSend(v32, "setTransform:", &v68);

        objc_msgSend((id)a1, "_backdropMaskViewForFilters");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_OWORD *)&v68.m11 = *(_OWORD *)&v56.a;
        *(_OWORD *)&v68.m13 = *(_OWORD *)&v56.c;
        *(_OWORD *)&v68.m21 = *(_OWORD *)&v56.tx;
        objc_msgSend(v33, "setTransform:", &v68);

      }
      v28 = *(_QWORD *)(a1 + 112);
      v27 = *(_DWORD *)(a1 + 120);
      goto LABEL_53;
    }
    objc_msgSend((id)a1, "_layoutEngine");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "delegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (dyld_program_sdk_at_least())
    {

    }
    else
    {
      if (!v8)
      {
LABEL_16:

        goto LABEL_17;
      }
      v9 = objc_msgSend(v8, "_forceLayoutEngineSolutionInRationalEdges");

      if (!v9)
      {
LABEL_17:
        objc_msgSend((id)a1, "invalidateIntrinsicContentSize");
        -[UIView _invalidateAutoresizingConstraints](a1);
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        objc_msgSend((id)a1, "_allSubviews");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v64, &v69, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v65;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v65 != v13)
                objc_enumerationMutation(v10);
              -[UIView _invalidateAutoresizingConstraints](*(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * i));
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v64, &v69, 16);
          }
          while (v12);
        }

        if (v7)
        {
          v38 = v7;
          v39 = a2;
          v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v16 = (id)a1;
          do
          {
            objc_msgSend(v16, "_constraintsExceptingSubviewAutoresizingConstraints", v38, v39);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = 0u;
            v61 = 0u;
            v62 = 0u;
            v63 = 0u;
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v60, &v68, 16);
            if (v18)
            {
              v19 = v18;
              v20 = *(_QWORD *)v61;
              do
              {
                for (j = 0; j != v19; ++j)
                {
                  if (*(_QWORD *)v61 != v20)
                    objc_enumerationMutation(v17);
                  v22 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * j);
                  objc_msgSend(v22, "firstItem");
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v22, "secondItem");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend((id)a1, "isDescendantOfView:", v23)
                    && (objc_msgSend(v24, "isDescendantOfView:", a1) & 1) != 0
                    || objc_msgSend((id)a1, "isDescendantOfView:", v24)
                    && objc_msgSend(v23, "isDescendantOfView:", a1))
                  {
                    objc_msgSend(v15, "addObject:", v22);
                  }

                }
                v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v60, &v68, 16);
              }
              while (v19);
            }

            v16 = (id)objc_msgSend(v16, "superview");
          }
          while (v16);
          v7 = v38;
          a2 = v39;
          if (objc_msgSend(v15, "count"))
          {
            v57[0] = MEMORY[0x1E0C809B0];
            v57[1] = 3221225472;
            v57[2] = __51__UIView__reestablishConstraintsForTransformChange__block_invoke;
            v57[3] = &unk_1E16B1B50;
            v58 = v15;
            v25 = v38;
            v59 = v25;
            v26 = (void *)objc_msgSend((id)a1, "_layoutEngineCreateIfNecessary");
            if (v26)
            {
              objc_msgSend(v26, "withAutomaticOptimizationDisabled:", v57);
              v25 = v59;
            }
            else
            {
              __51__UIView__reestablishConstraintsForTransformChange__block_invoke((uint64_t)v57);
            }

          }
        }

        goto LABEL_46;
      }
    }
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", sel__reestablishConstraintsForTransformChange, a1, CFSTR("UIView.m"), 9713, CFSTR("Legacy code path is unexpectedly exercised."));
    goto LABEL_16;
  }
}

- (void)_backing_setTransform3D:(uint64_t)a1
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  id v8;
  void *v9;
  _OWORD v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (a1)
  {
    v3 = a2[5];
    v15 = a2[4];
    v16 = v3;
    v4 = a2[7];
    v17 = a2[6];
    v18 = v4;
    v5 = a2[1];
    v11 = *a2;
    v12 = v5;
    v6 = a2[3];
    v13 = a2[2];
    v14 = v6;
    v7 = *(_QWORD *)(a1 + 176);
    if (!v7 || (v8 = *(id *)(v7 + 8), (v9 = v8) == 0))
    {
      v9 = 0;
      v8 = *(id *)(a1 + 168);
    }
    v10[4] = v15;
    v10[5] = v16;
    v10[6] = v17;
    v10[7] = v18;
    v10[0] = v11;
    v10[1] = v12;
    v10[2] = v13;
    v10[3] = v14;
    objc_msgSend(v8, "setTransform:", v10);

  }
}

- (id)_registerForTraitTokenChanges:(id)a3 withHandler:(id)a4
{
  id v6;
  id v7;
  _UITraitChangeRegistry *traitChangeRegistry;
  _UITraitChangeRegistry *v9;
  _UITraitChangeRegistry *v10;
  void *v11;

  v6 = a3;
  v7 = a4;
  traitChangeRegistry = self->_traitChangeRegistry;
  if (!traitChangeRegistry)
  {
    v9 = objc_alloc_init(_UITraitChangeRegistry);
    v10 = self->_traitChangeRegistry;
    self->_traitChangeRegistry = v9;

    traitChangeRegistry = self->_traitChangeRegistry;
  }
  -[_UITraitChangeRegistry registerForTraitTokenChanges:withHandler:]((uint64_t)traitChangeRegistry, v6, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (UIHoverStyle)hoverStyle
{
  return (UIHoverStyle *)-[UIView _hoverStyleStorage](self);
}

- (void)_accumulateViewConstraintsIntoArray:(id)a3
{
  NSArray *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = -[UIView _constraintsExceptingSubviewAutoresizingConstraints](self, "_constraintsExceptingSubviewAutoresizingConstraints");
  if (v5)
    objc_msgSend(a3, "addObjectsFromArray:", v5);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v6 = -[UIView _allSubviews](self, "_allSubviews", 0);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (-[UIView _usesAutoresizingConstraints]((uint64_t)v11))
          objc_msgSend(a3, "addObjectsFromArray:", -[UIView _autoresizingConstraints](v11));
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }
}

- (NSArray)_constraintsExceptingSubviewAutoresizingConstraints
{
  return &self->_constraintsExceptingSubviewAutoresizingConstraints->super;
}

uint64_t __69__UIView_UIConstraintBasedLayout___constraints_viewGeometryDidChange__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_containerGeometryDidChange");
}

uint64_t __110__UIView_UIConstraintBasedLayout___populateEngineWithConstraintsForViewSubtree_forComputingFittingSizeOfView___block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2);
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 != objc_msgSend(*(id *)(a1 + 48), "_layoutEngine"))
    {
      if (a2)
      {
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "firstItem"), "_referenceView"), "_setActiveSizeToFitLayoutEngine:", *(_QWORD *)(a1 + 40));
        v6 = *(_QWORD *)(a1 + 40);
        v7 = (void *)objc_msgSend((id)objc_msgSend(a2, "secondItem"), "_referenceView");
      }
      else
      {
        objc_msgSend(0, "_setActiveSizeToFitLayoutEngine:", *(_QWORD *)(a1 + 40));
        v7 = 0;
        v6 = *(_QWORD *)(a1 + 40);
      }
      objc_msgSend(v7, "_setActiveSizeToFitLayoutEngine:", v6);
    }
    return objc_msgSend(a2, "_addToEngine:", *(_QWORD *)(a1 + 40));
  }
  return result;
}

- (BOOL)_hasBaseline
{
  UIView *v3;
  UIView *v4;
  BOOL v5;
  double v6;
  double v7;

  -[UIView viewForLastBaselineLayout](self, "viewForLastBaselineLayout");
  v3 = (UIView *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 == self)
  {
    if ((*((_QWORD *)&self->_viewFlags + 1) & 0x4000000000000) != 0)
    {
      -[UIView _baselineOffsetsAtSize:](self, "_baselineOffsetsAtSize:", *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
      v5 = v7 != 2.22507386e-308 || v6 != 2.22507386e-308;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = -[UIView _hasBaseline](v3, "_hasBaseline");
  }

  return v5;
}

- (id)_deepestViewForBaselineLayoutUsingFirstBaseline:(id)a1
{
  id i;
  id v4;
  void *v5;

  i = a1;
  if (a1)
  {
    if ((a2 & 1) != 0)
      objc_msgSend(a1, "viewForFirstBaselineLayout");
    else
      objc_msgSend(a1, "viewForLastBaselineLayout");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    for (i = i; i != v4; i)
    {
      v5 = i;
      i = v4;

      if ((a2 & 1) != 0)
        objc_msgSend(i, "viewForFirstBaselineLayout");
      else
        objc_msgSend(i, "viewForLastBaselineLayout");
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  return i;
}

- (UIView)viewForLastBaselineLayout
{
  UIView *v3;
  _QWORD block[5];

  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x800) == 0)
    return self;
  v3 = -[UIView viewForBaselineLayout](self, "viewForBaselineLayout");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __60__UIView_AdditionalLayoutSupport__viewForLastBaselineLayout__block_invoke;
  block[3] = &unk_1E16B41B8;
  block[4] = self;
  if (viewForLastBaselineLayout_once != -1)
    dispatch_once(&viewForLastBaselineLayout_once, block);
  return v3;
}

- (double)_baselineOffsetFromNearestEdgeForLayoutAttribute:(int64_t)a3
{
  double result;

  if ((a3 - 11) > 1)
    return 0.0;
  if (a3 == 12)
    -[UIView _firstBaselineOffsetFromTop](self, "_firstBaselineOffsetFromTop");
  else
    -[UIView _baselineOffsetFromBottom](self, "_baselineOffsetFromBottom");
  return result;
}

- (void)_baselineViewForConstraint:(int)a3 forFirstItem:(_QWORD *)a4 withOffset:
{
  void *v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = a1;
  if (a1)
  {
    if (objc_msgSend(a1, "_recordBaselineLoweringInfo"))
    {
      v8 = -[NSLayoutConstraint _baselineLoweringInfoForFirstItem:](a2, a3);
      objc_msgSend(v8, "baselineOffset");
      v10 = v9;
      v4 = (void *)objc_msgSend(v8, "baselineView");
    }
    else
    {
      if (a3)
        v11 = objc_msgSend(a2, "firstAttribute");
      else
        v11 = objc_msgSend(a2, "secondAttribute");
      v12 = v11;
      v10 = 0;
      if ((v11 - 11) <= 1)
      {
        v13 = (void *)objc_msgSend(v4, "_viewForLoweringBaselineLayoutAttribute:", v11);
        v4 = v13;
        if (v12 == 12)
          objc_msgSend(v13, "_firstBaselineOffsetFromTop");
        else
          objc_msgSend(v13, "_baselineOffsetFromBottom");
        v10 = v14;
      }
    }
    if (a4)
      *a4 = v10;
  }
  return v4;
}

- (void)_removeLayoutArrangement:(void *)a1
{
  id v3;
  id v4;

  if (a1)
  {
    if (a2)
    {
      v3 = a2;
      objc_msgSend(a1, "_mutableLayoutArrangements");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "removeObject:", v3);

    }
  }
}

- (void)_addLayoutArrangement:(_DWORD *)a1
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  if (a1 && v3)
  {
    v5 = v3;
    -[UIView _mutableLayoutArrangementsCreateIfNecessary](a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "containsObject:", v5) & 1) == 0)
      objc_msgSend(v4, "addObject:", v5);

    v3 = v5;
  }

}

- (id)_mutableLayoutArrangementsCreateIfNecessary
{
  id v2;

  if (a1)
  {
    objc_msgSend(a1, "_mutableLayoutArrangements");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    if (!v2)
    {
      a1[30] |= 0x2000u;
      v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_setAssociatedObject(a1, &_UIViewLayoutArrangementsAssocObjectKey, v2, (void *)1);
    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (id)_viewForLoweringBaselineLayoutAttribute:(int)a3
{
  unsigned int v6;
  UIView *v7;
  UIView *v8;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  UIView *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3 - 11;
  if (os_variant_has_internal_diagnostics())
  {
    if (v6 < 2)
    {
LABEL_3:
      if (dyld_program_sdk_at_least())
      {
        v7 = (UIView *)-[UIView _deepestViewForBaselineLayoutUsingFirstBaseline:](self, a3 == 12);
      }
      else if (a3 == 12)
      {
        v7 = -[UIView viewForFirstBaselineLayout](self, "viewForFirstBaselineLayout");
      }
      else
      {
        v7 = -[UIView viewForLastBaselineLayout](self, "viewForLastBaselineLayout");
      }
      goto LABEL_8;
    }
    v10 = __UIFaultDebugAssertLog();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_FAULT);
    v7 = self;
    if (v11)
    {
      if (a3 > 0x25)
        v12 = 0;
      else
        v12 = qword_1E16E9C00[a3];
      v17 = 138412546;
      v18 = self;
      v19 = 2112;
      v20 = v12;
      _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Unexpected request for baseline view for nonbaseline attribute. Returning self. self = %@, attribute requested: %@", (uint8_t *)&v17, 0x16u);
      goto LABEL_25;
    }
  }
  else
  {
    if (v6 < 2)
      goto LABEL_3;
    v13 = _viewForLoweringBaselineLayoutAttribute____s_category;
    if (!_viewForLoweringBaselineLayoutAttribute____s_category)
    {
      v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&_viewForLoweringBaselineLayoutAttribute____s_category);
    }
    v14 = *(NSObject **)(v13 + 8);
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    v7 = self;
    if (v15)
    {
      if (a3 > 0x25)
        v16 = 0;
      else
        v16 = qword_1E16E9C00[a3];
      v17 = 138412546;
      v18 = self;
      v19 = 2112;
      v20 = v16;
      _os_log_impl(&dword_185066000, v14, OS_LOG_TYPE_ERROR, "Unexpected request for baseline view for nonbaseline attribute. Returning self. self = %@, attribute requested: %@", (uint8_t *)&v17, 0x16u);
LABEL_25:
      v7 = self;
    }
  }
LABEL_8:
  if (v7)
    v8 = v7;
  else
    v8 = self;
  if (!-[UIView isDescendantOfView:](v8, "isDescendantOfView:", self))
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 5048, CFSTR("The return values of -viewForFirstBaselineLayout and -viewForLastBaselineLayout must be in the receiver's subtree."));
  return v8;
}

- (void)setNeedsUpdateConstraints
{
  -[UIView _setWantsAutolayout](self, "_setWantsAutolayout");
  -[UIView _setNeedsUpdateConstraints](self, "_setNeedsUpdateConstraints");
}

- (void)_incrementHiddenManagedByLayoutArrangementCount
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  int v3;

  p_viewFlags = &self->_viewFlags;
  if (-[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewHiddenManagementCount", 1, (*((_DWORD *)&self->_viewFlags + 4) >> 14) & 1))v3 = 0x4000;
  else
    v3 = 0;
  *((_DWORD *)p_viewFlags + 4) = *((_DWORD *)p_viewFlags + 4) & 0xFFFFBFFF | v3;
}

- (void)_addGestureRecognizer:(int)a3 atEnd:
{
  id v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = a2;
  if (a1)
  {
    v14 = v5;
    objc_msgSend(v5, "view");
    v6 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    if (v6 != (_QWORD *)a1)
    {
      if ((*(_QWORD *)(a1 + 104) & 0x1000) == 0)
      {
        v7 = (void *)objc_msgSend(*(id *)(a1 + 88), "mutableCopy");
        v8 = v7;
        if (v7)
          v9 = v7;
        else
          v9 = (id)objc_opt_new();
        v10 = v9;

        if (a3)
          v11 = objc_msgSend(v10, "count");
        else
          v11 = 0;
        objc_msgSend(v10, "insertObject:atIndex:", v14, v11);
        v12 = objc_msgSend(v10, "copy");
        v13 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v12;

        _UIGestureRecognizerRegisterInContainer((uint64_t)v14, (id)a1);
      }
      -[UIView _removeGestureRecognizer:](v6, v14);
    }

    v5 = v14;
  }

}

- (void)_decrementHiddenManagedByLayoutArrangementCount
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  int v3;

  p_viewFlags = &self->_viewFlags;
  if (-[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewHiddenManagementCount", -1, (*((_DWORD *)&self->_viewFlags + 4) >> 14) & 1))v3 = 0x4000;
  else
    v3 = 0;
  *((_DWORD *)p_viewFlags + 4) = *((_DWORD *)p_viewFlags + 4) & 0xFFFFBFFF | v3;
}

- (void)_generateContentSizeConstraints
{
  double v2;
  double v3;
  double v4;
  double v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v23[5];
  _BYTE __dst[352];
  _BYTE v25[352];
  _BYTE __src[352];

  if (!a1)
    return 0;
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage(a1, 0, __src);
  objc_msgSend(a1, "intrinsicContentSize");
  v3 = v2;
  v5 = v4;
  memcpy(__dst, __src, sizeof(__dst));
  v6 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v25, v6, sizeof(v25));
  memcpy(v6, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)a1, (uint64_t)&v25[136], objc_msgSend(a1, "methodForSelector:", sel_intrinsicContentSize), sel_invalidateIntrinsicContentSize);
  _UITraitUsageTrackingResultDestroy((uint64_t)v25);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __66__UIView_UIConstraintBasedLayout___generateContentSizeConstraints__block_invoke;
  v23[3] = &unk_1E16E99B8;
  v23[4] = a1;
  __66__UIView_UIConstraintBasedLayout___generateContentSizeConstraints__block_invoke((uint64_t)v23, v3);
  v8 = v7;
  __66__UIView_UIConstraintBasedLayout___generateContentSizeConstraints__block_invoke((uint64_t)v23, v5);
  v10 = v9;
  objc_msgSend(a1, "_contentHuggingPriorities");
  v12 = v11;
  v14 = v13;
  objc_msgSend(a1, "_contentCompressionResistancePriorities");
  v16 = v15;
  v18 = v17;
  v19 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (v8 != -1.0 && (v12 != 0.0 || v16 != 0.0))
  {
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D156B8]), "initWithLayoutItem:value:huggingPriority:compressionResistancePriority:orientation:", a1, 0, v8, v12, v16);
    objc_msgSend(v19, "addObject:", v20);

  }
  if (v10 != -1.0 && (v14 != 0.0 || v18 != 0.0))
  {
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D156B8]), "initWithLayoutItem:value:huggingPriority:compressionResistancePriority:orientation:", a1, 1, v10, v14, v18);
    objc_msgSend(v19, "addObject:", v21);

  }
  return v19;
}

void __66__UIView_UIConstraintBasedLayout___generateContentSizeConstraints__block_invoke(uint64_t a1, double a2)
{
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  double v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (fabs(a2) == INFINITY)
  {
    v4 = a2 > 0.0;
    v5 = qword_1ECD79168;
    if (!qword_1ECD79168)
    {
      v5 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v5, (unint64_t *)&qword_1ECD79168);
    }
    v6 = qword_1866852E0[v4];
    v7 = *(NSObject **)(v5 + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = 138412802;
      v10 = v8;
      v11 = 2048;
      v12 = a2;
      v13 = 2048;
      v14 = v6;
      _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "%@ returned %g for an intrinsicContentSize dimension. Using %g instead.", (uint8_t *)&v9, 0x20u);
    }
  }
}

- (CGSize)_contentHuggingPriorities
{
  id AssociatedObject;
  double v4;
  double v5;
  double v6;
  CGSize result;

  if (!self)
  {
    v5 = 0.0;
    v6 = 0.0;
LABEL_10:
    v4 = v6;
    goto LABEL_12;
  }
  AssociatedObject = objc_getAssociatedObject(self, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey);
  if (!AssociatedObject)
  {
    if (-[UIView _contentHuggingDefault_isUsuallyFixedWidth](self, "_contentHuggingDefault_isUsuallyFixedWidth"))
      v6 = 750.0;
    else
      v6 = 250.0;
    if (-[UIView _contentHuggingDefault_isUsuallyFixedHeight](self, "_contentHuggingDefault_isUsuallyFixedHeight"))
      v5 = 750.0;
    else
      v5 = 250.0;
    goto LABEL_10;
  }
  objc_msgSend(AssociatedObject, "sizeValue");
LABEL_12:
  result.height = v5;
  result.width = v4;
  return result;
}

- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth
{
  return 0;
}

- (void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis
{
  double v7;
  double v8;
  double v9;
  double v10;

  -[UIView _contentCompressionResistancePriorities](self, "_contentCompressionResistancePriorities");
  v9 = v8;
  v10 = priority;
  if (axis)
  {
    if (v9 == v10)
      return;
    goto LABEL_3;
  }
  if (v7 != v10)
LABEL_3:
    -[UIView _setContentCompressionResistancePriorities:](self, "_setContentCompressionResistancePriorities:");
}

- (UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis
{
  double v4;
  double v5;

  -[UIView _contentCompressionResistancePriorities](self, "_contentCompressionResistancePriorities");
  if (axis)
    return v5;
  return v4;
}

- (CGSize)_contentCompressionResistancePriorities
{
  id AssociatedObject;
  double v3;
  double v4;
  CGSize result;

  if (!self)
  {
    v3 = 0.0;
    goto LABEL_5;
  }
  AssociatedObject = objc_getAssociatedObject(self, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey);
  if (!AssociatedObject)
  {
    v3 = 750.0;
LABEL_5:
    v4 = v3;
    goto LABEL_7;
  }
  objc_msgSend(AssociatedObject, "sizeValue");
LABEL_7:
  result.height = v4;
  result.width = v3;
  return result;
}

- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight
{
  return 0;
}

- (CGSize)intrinsicContentSize
{
  unint64_t v3;
  char v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BOOL4 v12;
  double v13;
  _BOOL4 v14;
  _BOOL4 v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGSize result;

  v3 = -[UIView _axesForDerivingIntrinsicContentSizeFromLayoutSize](self, "_axesForDerivingIntrinsicContentSizeFromLayoutSize");
  if (v3)
  {
    v4 = v3;
    -[UIView _preferredMaxLayoutWidth](self, "_preferredMaxLayoutWidth");
    if (v5 <= 0.0)
      v5 = 3.40282347e38;
    -[UIView _layoutSizeThatFits:fixedAxes:](self, "_layoutSizeThatFits:fixedAxes:", 0, v5);
    v8 = -1.0;
    if ((v4 & 1) == 0)
      v6 = -1.0;
    if ((v4 & 2) != 0)
      v8 = v7;
  }
  else
  {
    -[UIView _intrinsicSizeWithinSize:](self, "_intrinsicSizeWithinSize:", 3.40282347e38, 3.40282347e38);
    v11 = *MEMORY[0x1E0D15688];
    if (v9 == 0.0)
      v12 = *MEMORY[0x1E0D15688] > 0.0;
    else
      v12 = fabs(v9) < *MEMORY[0x1E0D15688];
    if (v9 == 3.40282347e38)
      v12 = 1;
    v8 = -1.0;
    if (v12)
      v13 = -1.0;
    else
      v13 = v9;
    v14 = v11 > 0.0;
    v15 = fabs(v10) < v11;
    if (v10 != 0.0)
      v14 = v15;
    if (v10 == 3.40282347e38)
      v14 = 1;
    if (v14)
      v16 = -1.0;
    else
      v16 = v10;
    v17 = v13 == -1.0 && v16 == -1.0;
    v6 = -1.0;
    if (!v17)
    {
      -[UIView alignmentRectInsets](self, "alignmentRectInsets", -1.0);
      v20 = v19;
      v23 = v21 + v22;
      if (v13 == -1.0)
        v23 = 0.0;
      v6 = v13 - v23;
      v24 = v20 + v18;
      if (v16 == -1.0)
        v25 = 0.0;
      else
        v25 = v24;
      v8 = v16 - v25;
    }
  }
  v26 = v8;
  result.height = v26;
  result.width = v6;
  return result;
}

- (CGSize)_intrinsicSizeWithinSize:(CGSize)a3
{
  double height;
  double width;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t v7;
  uint64_t viewFlags;
  double v9;
  double v10;
  int v11;
  double v12;
  NSLayoutConstraint *v13;
  NSLayoutConstraint *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  double v21;
  CGSize result;

  height = a3.height;
  width = a3.width;
  p_viewFlags = &self->_viewFlags;
  v7 = *((_QWORD *)&self->_viewFlags + 1) & 0x8000;
  if (dyld_program_sdk_at_least())
  {
    viewFlags = *(_QWORD *)p_viewFlags;
  }
  else
  {
    v9 = -1.0;
    v10 = -1.0;
    if (v7)
      goto LABEL_30;
    viewFlags = (uint64_t)self->_viewFlags;
    v7 = *((_QWORD *)&self->_viewFlags + 1) & 0x1000;
  }
  v9 = -1.0;
  if ((viewFlags & 0x20000000000000) != 0
    && !v7
    && -[UIView _hostsLayoutEngineAllowsTAMIC_NO](self, "_hostsLayoutEngineAllowsTAMIC_NO"))
  {
    v11 = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
    v10 = -1.0;
    if (v11)
    {
      -[UIView _preferredMaxLayoutWidth](self, "_preferredMaxLayoutWidth");
      v13 = 0;
      if (width >= v12)
        width = v12;
      if (width > 0.0 && width < 2777777.0)
      {
        v13 = -[NSLayoutDimension constraintLessThanOrEqualToConstant:](-[UIView widthAnchor](self, "widthAnchor"), "constraintLessThanOrEqualToConstant:", width);
        -[NSLayoutConstraint setIdentifier:](v13, "setIdentifier:", CFSTR("UI-temp-max-width-intrinsicContentSize"));
        -[NSLayoutConstraint setActive:](v13, "setActive:", 1);
      }
      v14 = 0;
      if (height > 0.0 && height < 2777777.0)
      {
        v14 = -[NSLayoutDimension constraintLessThanOrEqualToConstant:](-[UIView heightAnchor](self, "heightAnchor"), "constraintLessThanOrEqualToConstant:", height);
        -[NSLayoutConstraint setIdentifier:](v14, "setIdentifier:", CFSTR("UI-temp-max-height-intrinsicContentSize"));
        -[NSLayoutConstraint setActive:](v14, "setActive:", 1);
      }
      *((_QWORD *)&self->_viewFlags + 1) |= 0x8000uLL;
      -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
      v16 = v15;
      v18 = v17;
      *((_QWORD *)&self->_viewFlags + 1) &= ~0x8000uLL;
      -[NSLayoutConstraint setActive:](v13, "setActive:", 0);
      -[NSLayoutConstraint setActive:](v14, "setActive:", 0);
      v19 = v16 >= 2777777.0 || v16 == 0.0;
      v10 = -1.0;
      if (v19)
        v9 = -1.0;
      else
        v9 = v16;
      if (v18 < 2777777.0 && v18 != 0.0)
        v10 = v18;
    }
  }
  else
  {
    v10 = -1.0;
  }
LABEL_30:
  v21 = v9;
  result.height = v10;
  result.width = v21;
  return result;
}

- (void)setTranslatesAutoresizingMaskIntoConstraints:(BOOL)translatesAutoresizingMaskIntoConstraints
{
  _BOOL4 v3;
  NSMutableArray *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  NSMutableArray *v18;
  void *v19;

  if (((*(_QWORD *)&self->_viewFlags >> 53) & 1) == translatesAutoresizingMaskIntoConstraints)
  {
    v3 = translatesAutoresizingMaskIntoConstraints;
    if (!translatesAutoresizingMaskIntoConstraints
      && !-[UIView _hostsLayoutEngineAllowsTAMIC_NO](self, "_hostsLayoutEngineAllowsTAMIC_NO"))
    {
      -[UIView _setHostsLayoutEngine:](self, "_setHostsLayoutEngine:", 0);
    }
    if (qword_1ECD790D0 != -1)
      dispatch_once(&qword_1ECD790D0, &__block_literal_global_36_4);
    if (byte_1ECD790B1 && (*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0)
    {
      v5 = -[UIView _internalConstraints](self, "_internalConstraints");
      v6 = (void *)objc_msgSend((id)-[NSMutableArray lastObject](v5, "lastObject"), "container");
      if (v6)
      {
        v7 = v6;
        v8 = (void *)objc_msgSend(v6, "_referenceView");
        v14 = MEMORY[0x1E0C809B0];
        v15 = 3221225472;
        v16 = __80__UIView_AdditionalLayoutSupport__setTranslatesAutoresizingMaskIntoConstraints___block_invoke;
        v17 = &unk_1E16C3CF0;
        v18 = v5;
        v19 = v7;
        if (v8)
        {
          v9 = (void *)objc_msgSend(v8, "_layoutEngine", v14, v15, v16, v17, v18, v19);
          if (v9)
            objc_msgSend(v9, "withAutomaticOptimizationDisabled:", &v14);
          else
            __80__UIView_AdditionalLayoutSupport__setTranslatesAutoresizingMaskIntoConstraints___block_invoke((uint64_t)&v14);
        }
      }
      if (v3)
        -[UIView _setContentSizeConstraints:](self, 0);
      else
        -[UIView _setAutoresizingConstraints:](self, 0);
      -[UIView _setNeedsUpdateConstraints](self, "_setNeedsUpdateConstraints", v14, v15, v16, v17, v18, v19);
    }
    if (v3)
    {
      -[UIView _stopObservingVariablesOnlyToSupportTAMICChange:](self, "_stopObservingVariablesOnlyToSupportTAMICChange:", 1);
      -[UIView _clearLayoutVariableObservationsOnlyToSupportTAMICChange:](self, "_clearLayoutVariableObservationsOnlyToSupportTAMICChange:", 1);
      v10 = -1;
      v11 = 0xFFDFFFFFFFFFFFFFLL;
    }
    else
    {
      *(_QWORD *)&self->_viewFlags |= 0x20000000000000uLL;
      -[UIView _startObservingVariablesOnlyToSupportTAMICChange:](self, "_startObservingVariablesOnlyToSupportTAMICChange:", 1);
      v10 = -513;
      v11 = -1;
    }
    v12 = *((_DWORD *)&self->_viewFlags + 4);
    v13 = *((_QWORD *)&self->_viewFlags + 1) & v10;
    *(_QWORD *)&self->_viewFlags &= v11;
    *((_QWORD *)&self->_viewFlags + 1) = v13;
    *((_DWORD *)&self->_viewFlags + 4) = v12;
  }
}

- (BOOL)_hostsLayoutEngineAllowsTAMIC_NO
{
  int CanHostLayoutEngine;

  CanHostLayoutEngine = _UINonTAMICViewCanHostLayoutEngine();
  if (CanHostLayoutEngine)
  {
    if (-[UIView __viewDelegate]((id *)&self->super.super.isa))
      LOBYTE(CanHostLayoutEngine) = objc_msgSend(-[UIView __viewDelegate]((id *)&self->super.super.isa), "_viewHostsLayoutEngineAllowsTAMIC_NO");
    else
      LOBYTE(CanHostLayoutEngine) = 1;
  }
  return CanHostLayoutEngine;
}

- (void)_setHostsLayoutEngine:(BOOL)a3
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t viewFlags;
  uint64_t v7;
  int v8;

  if (((((*(_QWORD *)&self->_viewFlags & 0x80000000000) == 0) ^ a3) & 1) == 0)
  {
    if (a3)
    {
      if (!-[UIView _hostsLayoutEngineAllowsTAMIC_NO](self, "_hostsLayoutEngineAllowsTAMIC_NO")
        && !-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
      {
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 4030, CFSTR("Must translate autoresizing mask into constraints to have _setHostsLayoutEngine:YES."));
      }
      *(_QWORD *)&self->_viewFlags |= 0x80000000000uLL;
      if (-[UIView _layoutEngine](self, "_layoutEngine"))
        -[UIView _initializeHostedLayoutEngine](self, "_initializeHostedLayoutEngine");
    }
    else
    {
      -[UIView _invalidateLayoutEngineHostConstraints](self, "_invalidateLayoutEngineHostConstraints");
      if (!-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
        -[UIView _invalidateIntrinsicContentSizeNeedingLayout:](self, "_invalidateIntrinsicContentSizeNeedingLayout:", 0);
      -[UIView _discardLayoutEngine:](self, "_discardLayoutEngine:", -[UIView _layoutEngine](self, "_layoutEngine"));
      p_viewFlags = &self->_viewFlags;
      viewFlags = (uint64_t)self->_viewFlags;
      if ((viewFlags & 0x800000000000000) != 0)
      {
        -[UIView _setWantsAutolayout](self, "_setWantsAutolayout");
        viewFlags = *(_QWORD *)p_viewFlags;
      }
      v7 = *((_QWORD *)&self->_viewFlags + 1);
      v8 = *((_DWORD *)&self->_viewFlags + 4);
      *(_QWORD *)p_viewFlags = viewFlags & 0xFFFFF7FFFFFFFFFFLL;
      *((_QWORD *)&self->_viewFlags + 1) = v7;
      *((_DWORD *)&self->_viewFlags + 4) = v8;
      -[UIView _switchToLayoutEngine:](self, "_switchToLayoutEngine:", -[UIView _layoutEngine](-[UIView superview](self, "superview"), "_layoutEngine"));
    }
    -[UIView _setNeedsUpdateConstraints](self, "_setNeedsUpdateConstraints");
  }
}

- (void)_setContentHuggingPriorities:(CGSize)a3
{
  void *v4;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSize:", a3.width, a3.height);
  if (self)
    objc_setAssociatedObject(self, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey, v4, (void *)1);
  if (-[NSMutableArray count](-[UIView _internalConstraints](self, "_internalConstraints"), "count"))
    -[UIView invalidateIntrinsicContentSize](self, "invalidateIntrinsicContentSize");
}

- (void)_setContentCompressionResistancePriorities:(CGSize)a3
{
  void *v4;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSize:", a3.width, a3.height);
  if (self)
    objc_setAssociatedObject(self, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey, v4, (void *)1);
  if (-[NSMutableArray count](-[UIView _internalConstraints](self, "_internalConstraints"), "count"))
    -[UIView invalidateIntrinsicContentSize](self, "invalidateIntrinsicContentSize");
}

- (void)_invalidateLayoutEngineHostConstraints
{
  id v3;

  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    v3 = -[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints");
    if (v3)
    {
      -[UIView removeConstraints:](self, "removeConstraints:", v3);
      -[UIView _setLayoutEngineHostConstraints:](self, 0);
      -[UIView setNeedsUpdateConstraints](self, "setNeedsUpdateConstraints");
    }
  }
}

uint64_t __80__UIView_AdditionalLayoutSupport__setTranslatesAutoresizingMaskIntoConstraints___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(void **)(a1 + 32);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "nsli_removeConstraint:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

+ (BOOL)_isInRetargetableAnimationBlock
{
  int v2;

  v2 = objc_msgSend(a1, "_isInAnimationBlock");
  if (v2)
    LOBYTE(v2) = objc_msgSend((id)__currentViewAnimationState, "isInProcess");
  return v2;
}

+ (BOOL)_isInAnimationBlockWithAnimationsEnabled
{
  int v3;

  v3 = objc_msgSend(a1, "_isInAnimationBlock");
  if (v3)
    LOBYTE(v3) = objc_msgSend(a1, "areAnimationsEnabled");
  return v3;
}

+ (BOOL)_isInAnimationBlock
{
  return __currentViewAnimationState != 0;
}

- (BOOL)deliversTouchesForGesturesToSuperview
{
  return (*(_QWORD *)&self->_viewFlags >> 33) & 1;
}

- (void)drawLayer:(id)a3 inContext:(CGContext *)a4
{
  id v6;
  int v7;
  CGColorSpace *v8;
  CGColor *AssociatedObject;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  double x;
  double y;
  double width;
  double height;
  void *v18;
  void *v19;
  void *v20;
  char *v21;
  int *ContextStack;
  _BYTE v23[352];
  _BYTE __dst[352];
  _OWORD __src[22];
  _QWORD v26[5];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  CGRect ClipBoundingBox;

  v6 = a3;
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v7 = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewDebugSignposts, (uint64_t)CFSTR("UIViewDebugSignposts"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __47__UIView_CALayerDelegate__drawLayer_inContext___block_invoke;
  v26[3] = &unk_1E16E7148;
  v26[4] = self;
  -[UIView bounds](self, "bounds", _UIScopedSignpostIntervalInit((uint64_t)&v27, (byte_1ECD75E44 != 0) & ~v7, (uint64_t)v26));
  v8 = (CGColorSpace *)qword_1EDDCA6A8;
  CGContextSetFillColorSpace(a4, (CGColorSpaceRef)qword_1EDDCA6A8);
  CGContextSetStrokeColorSpace(a4, v8);
  UIGraphicsPushContext(a4);
  if ((*(_QWORD *)&self->_viewFlags & 0x40) != 0)
  {
    AssociatedObject = (CGColor *)objc_getAssociatedObject(self, &unk_1EDDCA608);
    if (CGColorGetAlpha(AssociatedObject) != 0.0
      || (objc_msgSend(v6, "isOpaque") & 1) != 0
      || (objc_msgSend(v6, "clearsContext") & 1) == 0)
    {
      CGContextSaveGState(a4);
      UISetColor(AssociatedObject);
      -[UIView bounds](self, "bounds");
      UIRectFillUsingOperation(1, v10, v11, v12, v13);
      CGContextRestoreGState(a4);
    }
  }
  if (-[UIView _canDrawContent](self, "_canDrawContent"))
  {
    ClipBoundingBox = CGContextGetClipBoundingBox(a4);
    x = ClipBoundingBox.origin.x;
    y = ClipBoundingBox.origin.y;
    width = ClipBoundingBox.size.width;
    height = ClipBoundingBox.size.height;
    *(_QWORD *)&v28 = v28 | 2;
    os_variant_has_internal_diagnostics();
    +[UITraitCollection _currentTraitCollectionIfExists]();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView traitCollection](self, "traitCollection");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v19);

    v20 = (void *)_UISetCurrentFallbackEnvironment(self);
    memset(__src, 0, sizeof(__src));
    _UIBeginTrackingTraitUsage(self, 0, __src);
    if (_UIObservationTrackingEnabled())
      -[UIView _drawRectWithObservationTracking:](self, "_drawRectWithObservationTracking:", x, y, width, height);
    else
      -[UIView drawRect:](self, "drawRect:", x, y, width, height);
    memcpy(v23, __src, sizeof(v23));
    v21 = (char *)GetTraitCollectionTSD() + 16;
    memcpy(__dst, v21, sizeof(__dst));
    memcpy(v21, v23, 0x160uLL);
    -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)self, (uint64_t)&__dst[136], -[UIView methodForSelector:](self, "methodForSelector:", sel_drawRect_), sel_setNeedsDisplay);
    _UITraitUsageTrackingResultDestroy((uint64_t)__dst);
    _UIRestorePreviousFallbackEnvironment(v20);
    +[UITraitCollection setCurrentTraitCollection:](UITraitCollection, "setCurrentTraitCollection:", v18);

  }
  ContextStack = (int *)GetContextStack(0);
  PopContextFromStack(ContextStack);
  if ((_DWORD)v27)
    kdebug_trace();

}

- (CGRect)_largestInscribedRectInBoundingPathWithCenter:(CGPoint)a3 aspectRatio:(double)a4
{
  double y;
  double x;
  void *v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double width;
  double height;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  CGRect v37;
  CGRect result;

  y = a3.y;
  x = a3.x;
  v36 = 0;
  -[UIView _effectiveBoundingPathAndBoundingPathView:](self, "_effectiveBoundingPathAndBoundingPathView:", &v36);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v36;
  -[UIView bounds](self, "bounds");
  -[UIView convertRect:toView:](self, "convertRect:toView:", v9);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  -[UIView convertPoint:toView:](self, "convertPoint:toView:", v9, x, y);
  objc_msgSend(v8, "_largestInscribedRectInBoundingPathAndRect:withCenter:aspectRatio:", v11, v13, v15, v17, v18, v19, a4);
  v20 = v37.origin.x;
  v21 = v37.origin.y;
  width = v37.size.width;
  height = v37.size.height;
  if (CGRectIsNull(v37))
  {
    v24 = *MEMORY[0x1E0C9D628];
    v25 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v26 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v27 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v9, v20, v21, width, height);
    v24 = v28;
    v25 = v29;
    v26 = v30;
    v27 = v31;
  }

  v32 = v24;
  v33 = v25;
  v34 = v26;
  v35 = v27;
  result.size.height = v35;
  result.size.width = v34;
  result.origin.y = v33;
  result.origin.x = v32;
  return result;
}

- (CGRect)_rectTuckedAgainstBoundingPathEdge:(unint64_t)a3 withSize:(double)a4 cornerRadii:(UIRectCornerRadii)a5 minimumPadding:(double)a6
{
  double topRight;
  double bottomRight;
  double bottomLeft;
  double topLeft;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  id v21;
  double x;
  double y;
  double width;
  double height;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  id v39;
  CGRect v40;
  CGRect result;

  topRight = a5.topRight;
  bottomRight = a5.bottomRight;
  bottomLeft = a5.bottomLeft;
  topLeft = a5.topLeft;
  if (a6 < 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 21568, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("minimumPadding >= 0.0"));

  }
  if (a3 == 4 || a3 == 1)
  {
    if (topLeft >= topRight)
      v15 = topLeft;
    else
      v15 = topRight;
    if (bottomLeft >= bottomRight)
      v16 = bottomLeft;
    else
      v16 = bottomRight;
    if (v15 + v16 > a4)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 21570, CFSTR("Rect size %.1f is too small to fit corner radii: {%.1f, %.1f, %.1f, %.1f}"), *(_QWORD *)&a4, *(_QWORD *)&topLeft, *(_QWORD *)&bottomLeft, *(_QWORD *)&bottomRight, *(_QWORD *)&topRight);
LABEL_25:

    }
  }
  else
  {
    if (topLeft >= bottomLeft)
      v18 = topLeft;
    else
      v18 = bottomLeft;
    if (topRight >= bottomRight)
      v19 = topRight;
    else
      v19 = bottomRight;
    if (v18 + v19 > a4)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 21572, CFSTR("Rect size %.1f is too small to fit corner radii: {%.1f, %.1f, %.1f, %.1f}"), *(_QWORD *)&a4, *(_QWORD *)&topLeft, *(_QWORD *)&bottomLeft, *(_QWORD *)&bottomRight, *(_QWORD *)&topRight);
      goto LABEL_25;
    }
  }
  v39 = 0;
  -[UIView _effectiveBoundingPathAndBoundingPathView:](self, "_effectiveBoundingPathAndBoundingPathView:", &v39);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v39;
  -[UIView bounds](self, "bounds");
  -[UIView convertRect:toView:](self, "convertRect:toView:", v21);
  objc_msgSend(v20, "_rectTuckedAgainstEdge:ofBoundingPathAndRect:withSize:cornerRadii:minimumPadding:", a3, *(_QWORD *)&topLeft, *(_QWORD *)&bottomLeft, *(_QWORD *)&bottomRight, *(_QWORD *)&topRight, *(_QWORD *)&a6);
  x = v40.origin.x;
  y = v40.origin.y;
  width = v40.size.width;
  height = v40.size.height;
  if (CGRectIsNull(v40))
  {
    v26 = *MEMORY[0x1E0C9D628];
    v27 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v28 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v29 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v21, x, y, width, height);
    v26 = v30;
    v27 = v31;
    v28 = v32;
    v29 = v33;
  }

  v34 = v26;
  v35 = v27;
  v36 = v28;
  v37 = v29;
  result.size.height = v37;
  result.size.width = v36;
  result.origin.y = v35;
  result.origin.x = v34;
  return result;
}

- (id)_effectiveBoundingPathAndBoundingPathView:(id *)a3
{
  UIView *v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  UIView *v9;
  uint64_t v10;
  _UIRectangularBoundingPath *v11;
  _UIRectangularBoundingPath *v12;
  _UIRectangularBoundingPath *v13;

  v5 = (UIView *)-[UIView window](self, "window");
  if (!v5)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v7 = 0;
    if (!self)
      goto LABEL_16;
    v5 = self;
    if ((isKindOfClass & 1) == 0)
      goto LABEL_16;
  }
  if (-[UIView _isHostedInAnotherProcess](v5, "_isHostedInAnotherProcess"))
  {
    -[UIView _boundingPath](v5, "_boundingPath");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
      goto LABEL_16;
  }
  -[UIView _boundingPath](self, "_boundingPath");
  v8 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v8;
  v9 = self;
  if (self && !v8)
  {
    v9 = self;
    do
    {
      v9 = (UIView *)-[UIView superview](v9, "superview");
      -[UIView _boundingPathForSubtree](v9, "_boundingPathForSubtree");
      v10 = objc_claimAutoreleasedReturnValue();
      v7 = (void *)v10;
    }
    while (v9 && !v10);
  }
  if (v7 && objc_msgSend(v7, "validateForCoordinateSpace"))
  {
    if (a3)
      *a3 = objc_retainAutorelease(v9);
    v11 = v7;
    v7 = v11;
  }
  else
  {
LABEL_16:
    if (a3)
      *a3 = objc_retainAutorelease(self);
    v12 = [_UIRectangularBoundingPath alloc];
    -[UIView bounds](self, "bounds");
    v11 = -[_UIRectangularBoundingPath initWithCoordinateSpace:boundingRect:](v12, "initWithCoordinateSpace:boundingRect:", self);
  }
  v13 = v11;

  return v13;
}

- (_UIBoundingPath)_boundingPath
{
  return (_UIBoundingPath *)objc_getAssociatedObject(self, &_UIViewBoundingPathKey);
}

- (CGRect)convertRect:(CGRect)a3 toCoordinateSpace:(id)a4
{
  double height;
  double width;
  double y;
  double x;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (a4 && a4 != self)
  {
    objc_opt_self();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[UIView _window](self, "_window");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a4, "_window");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11 == v12)
      {
        -[UIView convertRect:toView:](self, "convertRect:toView:", a4, x, y, width, height);
LABEL_10:
        x = v13;
        y = v14;
        width = v15;
        height = v16;
        goto LABEL_11;
      }
    }
    else
    {

    }
    v17 = -[UIView _window](self, "_window");
    if (v17)
    {
      v18 = v17;
      -[UIView convertRect:toView:](self, "convertRect:toView:", v17, x, y, width, height);
      objc_msgSend(v18, "convertRect:toCoordinateSpace:", a4);
    }
    else
    {
      -[CALayer convertRect:toLayer:](self->_layer, "convertRect:toLayer:", 0, x, y, width, height);
    }
    goto LABEL_10;
  }
LABEL_11:
  v19 = x;
  v20 = y;
  v21 = width;
  v22 = height;
  result.size.height = v22;
  result.size.width = v21;
  result.origin.y = v20;
  result.origin.x = v19;
  return result;
}

- (void)_setBoundingPath:(id)a3
{
  objc_setAssociatedObject(self, &_UIViewBoundingPathKey, a3, (void *)1);
}

- (void)sizeToFit
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGAffineTransform v19;

  -[UIView transform](self, "transform");
  if (CGAffineTransformIsIdentity(&v19))
  {
    -[UIView frame](self, "frame");
    v4 = v3;
    v6 = v5;
    -[UIView sizeThatFits:](self, "sizeThatFits:", v7, v8);
    -[UIView setFrame:](self, "setFrame:", v4, v6, v9, v10);
  }
  else
  {
    -[UIView bounds](self, "bounds");
    v12 = v11;
    v14 = v13;
    -[UIView sizeThatFits:](self, "sizeThatFits:", v15, v16);
    -[UIView setBounds:](self, "setBounds:", v12, v14, v17, v18);
  }
}

- (NSDirectionalEdgeInsets)directionalLayoutMargins
{
  double v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  NSDirectionalEdgeInsets result;

  v3 = -[UIView _resolvedInferredLayoutMargins]((uint64_t)self);
  v7 = *((_DWORD *)&self->_viewFlags + 4);
  if ((v7 & 0x80000) != 0)
    v8 = v6;
  else
    v8 = v4;
  if ((*(_QWORD *)&v7 & 0x80000) != 0)
    v6 = v4;
  v9 = v8;
  result.trailing = v6;
  result.bottom = v5;
  result.leading = v9;
  result.top = v3;
  return result;
}

- (void)_eagerlyUpdateSafeAreaInsetsToDescendant:(id)a1
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "isDescendantOfView:", a1))
  {
    v5 = v4;
    if (v5 == a1)
    {
      v7 = 0;
    }
    else
    {
      v6 = v5;
      v7 = 0;
      do
      {
        if (!v7)
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(v7, "insertObject:atIndex:", v6, 0);
        objc_msgSend(v6, "superview");
        v8 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v8;
      }
      while ((id)v8 != a1);
    }

    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v15;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v15 != v12)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v13++), "_updateSafeAreaInsets", (_QWORD)v14);
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v11);
    }

  }
}

- (void)updateTraitsIfNeeded
{
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  if (byte_1EDDCA61D)
    -[UIView _updateTraitsIfNeededWithBehavior:]((uint64_t)self, 2);
}

+ (void)conditionallyAnimate:(BOOL)a3 withAnimation:(id)a4 layout:(id)a5 completion:(id)a6
{
  _BOOL4 v8;
  void (**v9)(_QWORD);
  void (**v10)(id, uint64_t);
  void (**v11)(id, void (**)(_QWORD), id);

  v8 = a3;
  v11 = (void (**)(id, void (**)(_QWORD), id))a4;
  v9 = (void (**)(_QWORD))a5;
  v10 = (void (**)(id, uint64_t))a6;
  if (v8)
  {
    v11[2](v11, v9, v10);
  }
  else
  {
    if (v9)
      v9[2](v9);
    if (v10)
      v10[2](v10, 1);
  }

}

- (BOOL)isHiddenOrHasHiddenAncestor
{
  CALayer *v2;
  BOOL v3;
  BOOL v4;
  CALayer *v5;

  v2 = self->_layer;
  v3 = -[CALayer isHidden](v2, "isHidden");
  v4 = v3;
  if (!v2 || v3)
  {
    v5 = v2;
  }
  else
  {
    do
    {
      -[CALayer superlayer](v2, "superlayer");
      v5 = (CALayer *)objc_claimAutoreleasedReturnValue();

      v4 = v5 != 0;
      if (!v5)
        break;
      v2 = v5;
    }
    while (!-[CALayer isHidden](v5, "isHidden"));
  }

  return v4;
}

- (void)_is_setNeedsLayout
{
  *(_QWORD *)&self->_viewFlags &= ~0x40000000000000uLL;
}

- (void)_setContentStretchInPixels:(CGRect)a3 forContentSize:(CGSize)a4 shouldTile:(BOOL)a5
{
  _BOOL4 v5;
  double width;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v14;
  _QWORD *v15;

  v5 = a5;
  width = a3.size.width;
  v8 = 1.0;
  v9 = a3.origin.x == 0.0 && a3.size.width == a4.width;
  v10 = 1.0;
  if (!v9)
  {
    v11 = fmax(width + -1.0, 0.0);
    if (a5)
    {
      v12 = width;
    }
    else
    {
      a3.origin.x = a3.origin.x + 0.5;
      v12 = v11;
    }
    a3.origin.x = a3.origin.x / a4.width;
    if (v12 <= 1.0 && !a5)
    {
      a3.origin.x = a3.origin.x + -0.01 / a4.width;
      v12 = 0.02;
    }
    v10 = v12 / a4.width;
  }
  if (a3.origin.y != 0.0 || a3.size.height != a4.height)
  {
    v14 = fmax(a3.size.height + -1.0, 0.0);
    if (!a5)
    {
      a3.origin.y = a3.origin.y + 0.5;
      a3.size.height = v14;
    }
    a3.origin.y = a3.origin.y / a4.height;
    if (a3.size.height <= 1.0 && !a5)
    {
      a3.origin.y = a3.origin.y + -0.01 / a4.height;
      a3.size.height = 0.02;
    }
    v8 = a3.size.height / a4.height;
  }
  -[CALayer setContentsCenter:](self->_layer, "setContentsCenter:", a3.origin.x, a3.origin.y, v10, v8);
  v15 = (_QWORD *)MEMORY[0x1E0CD29F0];
  if (!v5)
    v15 = (_QWORD *)MEMORY[0x1E0CD29F8];
  -[CALayer setContentsScaling:](self->_layer, "setContentsScaling:", *v15);
}

- (void)addInteraction:(id)interaction
{
  id v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v5 = interaction;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 19826, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("interaction"));

  }
  objc_getAssociatedObject(self, &_UIViewInteractionsKey);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*((_BYTE *)&self->_viewFlags + 20) & 0x40) == 0)
  {
    v7 = (void *)objc_opt_new();

    objc_setAssociatedObject(self, &_UIViewInteractionsKey, v7, (void *)1);
    *(_QWORD *)((char *)&self->_viewFlags + 20) |= 0x40uLL;
    v6 = v7;
  }
  v12 = v5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
    v8 = -[UIView isSpringLoaded](self, "isSpringLoaded") ^ 1;
  else
    v8 = 1;
  if ((*((_BYTE *)&self->_viewFlags + 20) & 0x40) == 0)
  {

    if (!v8)
      goto LABEL_16;
    goto LABEL_15;
  }
  objc_getAssociatedObject(self, &_UIViewInteractionsKey);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "indexOfObjectIdenticalTo:", v12) != 0x7FFFFFFFFFFFFFFFLL)
    LOBYTE(v8) = 0;

  if ((v8 & 1) != 0)
  {
LABEL_15:
    objc_msgSend(v12, "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeInteraction:", v12);

    objc_msgSend(v6, "addObject:", v12);
    _setInteractionView(v12, self);
  }
LABEL_16:

}

- (void)addGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer
{
  -[UIView _addGestureRecognizer:atEnd:]((uint64_t)self, gestureRecognizer, 1);
}

- (void)dealloc
{
  void *v4;
  CALayer *layerRetained;
  int *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  id v15;
  _UIViewBackingAux *viewBackingAux;
  _UIViewBackingAux *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  NSArray *gestureRecognizers;
  CALayer *layer;
  CALayer *v26;
  CALayer *v27;
  CALayer *v28;
  NSMutableArray *internalConstraints;
  NSISVariable *boundsWidthVariable;
  NSISVariable *boundsHeightVariable;
  NSISVariable *minXVariable;
  NSISVariable *minYVariable;
  NSMutableArray *constraintsExceptingSubviewAutoresizingConstraints;
  void *v35;
  objc_class *v36;
  objc_super v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!self || (*(_QWORD *)&self->_viewFlags & 0x1000) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = (objc_class *)objc_opt_class();
    objc_msgSend(v35, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 5080, CFSTR("Application circumvented Objective-C runtime dealloc initiation for <%s> object."), class_getName(v36));

  }
  v4 = (void *)MEMORY[0x186DC9484]();
  if ((*((_BYTE *)&self->_viewFlags + 20) & 0x10) != 0)
    +[UIWindow _unregisterChargedView:](UIWindow, "_unregisterChargedView:", self);
  *(_QWORD *)&self->_viewFlags |= 0x2000uLL;
  if (!self->_layerRetained)
    self->_layer = 0;
  -[UIView _layoutConstraintCleanup]((id *)&self->super.super.isa);
  -[UIView _setMaskView:](self, "_setMaskView:", 0);
  layerRetained = self->_layerRetained;
  v6 = &OBJC_IVAR____UIViewFittingSizeTargetInfo__verticalPriority;
  if (layerRetained)
  {
    -[CALayer sublayers](layerRetained, "sublayers");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "copy");

    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v43;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v43 != v12)
            objc_enumerationMutation(v9);
          v14 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * i), "unsafeUnretainedDelegate");
          if (v14)
          {
            v15 = v14;
            if (_IsKindOfUIView((uint64_t)v14))
              v14 = v15;
            else
              v14 = 0;
          }
          objc_msgSend(v14, "removeFromSuperview");
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
      }
      while (v11);
    }

    -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");
    viewBackingAux = self->_viewBackingAux;
    if (viewBackingAux)
      viewBackingAux = (_UIViewBackingAux *)viewBackingAux->_privateSubviews;
    v17 = viewBackingAux;
    v18 = (void *)-[_UIViewBackingAux copy](v17, "copy");

    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v19 = v18;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v39;
      do
      {
        for (j = 0; j != v21; ++j)
        {
          if (*(_QWORD *)v39 != v22)
            objc_enumerationMutation(v19);
          -[UIView _backing_removePrivateSubview:]((uint64_t)self, *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * j));
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
      }
      while (v21);
    }

    v6 = &OBJC_IVAR____UIViewFittingSizeTargetInfo__verticalPriority;
  }
  -[UIView _removeAllGestureRecognizers]((uint64_t)self);
  gestureRecognizers = self->_gestureRecognizers;
  self->_gestureRecognizers = 0;

  self->_window = 0;
  objc_msgSend((id)_motionEffectEngine, "_unregisterAllMotionEffectsForView:", self);
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x2000000000) != 0)
    +[UIDynamicAnimator _clearReferenceViewFromAnimators:](UIDynamicAnimator, "_clearReferenceViewFromAnimators:", self);
  layer = self->_layer;
  if (layer)
  {
    -[CALayer setUnsafeUnretainedDelegate:](self->_layer, "setUnsafeUnretainedDelegate:", 0);
    if ((dyld_program_sdk_at_least() & 1) == 0)
      -[CALayer setDelegate:](layer, "setDelegate:", 0);
    v26 = (CALayer *)-[UIView _backing_outermostLayer](self);
    if (layer != v26)
    {
      v27 = v26;
      -[CALayer setUnsafeUnretainedDelegate:](v26, "setUnsafeUnretainedDelegate:", 0);
      if ((dyld_program_sdk_at_least() & 1) == 0)
        -[CALayer setDelegate:](v27, "setDelegate:", 0);
    }
    objc_setAssociatedObject(layer, &unk_1EDDCA61C, 0, (void *)1);
  }
  self->_layer = 0;
  v28 = self->_layerRetained;
  self->_layerRetained = 0;

  -[UIBackgroundConfiguration _setCustomView:](*(uint64_t *)((char *)&self->super.super.isa + v6[640]), 0);
  -[NSObject _accessibilityFinalize](self, "_accessibilityFinalize");
  internalConstraints = self->_internalConstraints;
  self->_internalConstraints = 0;

  -[NSISVariable setDelegate:](self->_boundsWidthVariable, "setDelegate:", 0);
  boundsWidthVariable = self->_boundsWidthVariable;
  self->_boundsWidthVariable = 0;

  -[NSISVariable setDelegate:](self->_boundsHeightVariable, "setDelegate:", 0);
  boundsHeightVariable = self->_boundsHeightVariable;
  self->_boundsHeightVariable = 0;

  -[NSISVariable setDelegate:](self->_minXVariable, "setDelegate:", 0);
  minXVariable = self->_minXVariable;
  self->_minXVariable = 0;

  -[NSISVariable setDelegate:](self->_minYVariable, "setDelegate:", 0);
  minYVariable = self->_minYVariable;
  self->_minYVariable = 0;

  constraintsExceptingSubviewAutoresizingConstraints = self->_constraintsExceptingSubviewAutoresizingConstraints;
  self->_constraintsExceptingSubviewAutoresizingConstraints = 0;

  objc_autoreleasePoolPop(v4);
  v37.receiver = self;
  v37.super_class = (Class)UIView;
  -[UIResponder dealloc](&v37, sel_dealloc);
}

- (void)removeFromSuperview
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  UIView *v4;
  void *v5;
  id v6;
  id v7;

  p_viewFlags = &self->_viewFlags;
  if ((*((_BYTE *)&self->_viewFlags + 24) & 0x10) != 0)
  {
    -[UIView superview](self, "superview");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    -[UIView _backing_removePrivateSubview:]((uint64_t)v7, (uint64_t)self);
  }
  else
  {
    v4 = objc_retainAutorelease(self);
    -[UIView window](v4, "window");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_subtreeMonitorsForView:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)((char *)p_viewFlags + 20) |= 0x800000000000uLL;
    __UIViewWillBeRemovedFromSuperview((uint64_t)v4, v5);
    if ((*((_BYTE *)p_viewFlags + 25) & 0x80) != 0)
    {
      v6 = -[UIView superview](v4, "superview");
      *(_QWORD *)p_viewFlags &= ~0x8000000uLL;
      -[UIView _backing_removeFromSuperview]((uint64_t)v4);
      -[UIResponder _clearOverrideNextResponder](v4, "_clearOverrideNextResponder");
      -[UIResponder _clearRestorableResponderStatus](v4, "_clearRestorableResponderStatus");
      _UIViewVisitorEntertainAscendingTrackingVisitors(v6, (uint64_t)v4, (uint64_t)v7, (uint64_t)v6);
      _UIViewVisitorEntertainDescendingTrackingVisitors(v6, (uint64_t)v4, (uint64_t)v7, (uint64_t)v6);
      _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(v4, &__block_literal_global_970);
      __UIViewWasRemovedFromSuperview(v4, v6, v5);
      +[UIFocusRingManager removeRingFromFocusItem:](UIFocusRingManager, "removeRingFromFocusItem:", v4);
    }

  }
}

- (void)_backing_removeFromSuperview
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (!v2 || (v3 = *(id *)(v2 + 8), (v4 = v3) == 0))
    {
      v4 = 0;
      v3 = *(id *)(a1 + 168);
    }
    v5 = v4;
    objc_msgSend(v3, "removeFromSuperlayer");

  }
}

- (void)_layoutConstraintCleanup
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    objc_msgSend(a1, "_mutableLayoutGuides");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v19 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          objc_msgSend(v7, "_setLockedToOwningView:", 0);
          objc_msgSend(v7, "_owningViewIsDeallocating");
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      }
      while (v4);
    }

    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v8 = a1[3];
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v15;
      do
      {
        for (j = 0; j != v10; ++j)
        {
          if (*(_QWORD *)v15 != v11)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * j), "setContainer:", 0, (_QWORD)v14);
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
      }
      while (v10);
    }

    objc_msgSend(a1, "_layoutEngine");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "_discardLayoutEngine:", v13);

  }
}

- (void)_discardLayoutEngine:(id)a3
{
  if (a3)
    discardEngineRecursive(self, a3);
}

- (void)_setMaskView:(id)a3
{
  _UIViewMaskViewWrapper *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  uint64_t v23;
  void *v24;
  char *v25;

  v25 = (char *)a3;
  objc_getAssociatedObject(self, &_UIMaskViewKey);
  v5 = (_UIViewMaskViewWrapper *)objc_claimAutoreleasedReturnValue();
  -[_UIViewMaskViewWrapper maskView](v5, "maskView");
  v6 = objc_claimAutoreleasedReturnValue();
  if ((char *)v6 != v25)
  {
    v7 = *((_QWORD *)&self->_viewFlags + 1);
    if ((v7 & 0x400000) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 8522, CFSTR("Attempted to set a new mask before the view's previous mask had been applied. View: %@"), self);

      v7 = *((_QWORD *)&self->_viewFlags + 1);
    }
    v8 = *((_DWORD *)&self->_viewFlags + 4);
    *(_QWORD *)&self->_viewFlags = self->_viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) = v7 | 0x400000;
    *((_DWORD *)&self->_viewFlags + 4) = v8;
    if (v6)
    {
      -[UIView _outermostLayer](self, "_outermostLayer");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "mask");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = (id)objc_msgSend(v10, "unsafeUnretainedDelegate");

      if (v11)
      {
        v12 = _IsKindOfUIView((uint64_t)v11) ? v11 : 0;
        if ((id)v6 == v12)
        {
          objc_msgSend((id)v6, "removeFromSuperview");
          objc_msgSend((id)v6, "_setOverrideVibrancyTrait:", -1);
          objc_msgSend((id)v6, "_setOverrideUserInterfaceRenderingMode:", 0);
          objc_msgSend((id)v6, "_window");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13)
          {
            -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:]((_QWORD *)v6, 0);
            objc_msgSend((id)v6, "_didMoveFromWindow:toWindow:", v13, 0);
          }
          *(_QWORD *)(v6 + 124) = *(_QWORD *)(v6 + 124) & 0xFFFEFFDFFFFFFFFFLL | 0x2000000000;

        }
      }
    }
    v14 = v25;
    if (v25)
    {
      objc_msgSend(v25, "_setOverrideVibrancyTrait:", 0);
      objc_msgSend(v25, "_setOverrideUserInterfaceRenderingMode:", 1);
      *(_QWORD *)(v25 + 124) &= ~0x2000000000uLL;
      -[UIView addSubview:](self, "addSubview:");
      -[UIView _outermostLayer](self, "_outermostLayer");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "layer");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setMask:", v16);

      if (self->_viewBackingAux)
      {
        *(_QWORD *)(v25 + 124) |= 0x1000000000000uLL;
        objc_msgSend(v25, "layer");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "frame");
        -[UIView _backing_setFrame:]((uint64_t)v25, v18, v19, v20, v21);

      }
      v22 = dyld_program_sdk_at_least();
      v14 = v25;
      if (v22)
      {
        -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");
        v14 = v25;
      }
    }
    if (!v5)
    {
      v5 = objc_alloc_init(_UIViewMaskViewWrapper);
      objc_setAssociatedObject(self, &_UIMaskViewKey, v5, (void *)1);
      v14 = v25;
    }
    v23 = v14 != 0;
    -[_UIViewMaskViewWrapper setMaskView:](v5, "setMaskView:", v14);
    *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFF9FFFFFLL | (v23 << 21);
  }

}

- (id)registerForTraitChanges:(id)a3 withAction:(SEL)a4
{
  void *v6;
  void *v7;

  +[UITraitCollection _traitTokensIncludingPlaceholdersForTraits:]((uint64_t)UITraitCollection, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _registerForTraitTokenChanges:withTarget:action:](self, "_registerForTraitTokenChanges:withTarget:action:", v6, self, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_registerForTraitTokenChanges:(id)a3 withTarget:(id)a4 action:(SEL)a5
{
  id v8;
  UIView *v9;
  _UITraitChangeRegistry *traitChangeRegistry;
  _UITraitChangeRegistry *v11;
  _UITraitChangeRegistry *v12;
  void *v13;

  v8 = a3;
  v9 = (UIView *)a4;
  traitChangeRegistry = self->_traitChangeRegistry;
  if (!traitChangeRegistry)
  {
    v11 = objc_alloc_init(_UITraitChangeRegistry);
    v12 = self->_traitChangeRegistry;
    self->_traitChangeRegistry = v11;

    traitChangeRegistry = self->_traitChangeRegistry;
  }
  -[_UITraitChangeRegistry registerForTraitTokenChanges:withTarget:action:targetIsSender:]((uint64_t)traitChangeRegistry, v8, v9, a5, v9 == self);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

- (void)_constraints_subviewWillChangeSuperview:(id)a3
{
  -[UIView _invalidateAutoresizingConstraints]((uint64_t)a3);
  if ((dyld_program_sdk_at_least() & 1) == 0
    && objc_msgSend(a3, "_preWhitetailUsesAutoresizingConstraints")
    && objc_msgSend(a3, "_hostsLayoutEngine"))
  {
    if (-[UIView __viewDelegate]((id *)a3))
      objc_msgSend(a3, "_setNeedsUpdateConstraintsNeedingLayout:", 0);
  }
}

- (void)_willRemoveSubviewWantingAutolayout:(_QWORD *)a1
{
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((a1[13] & 0x1000) == 0)
  {
    objc_msgSend(a1, "_allSubviews");
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (v9 != v3 && (v9[13] & 0x400000000000000) != 0)
          {

            goto LABEL_15;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }

    a1[13] &= ~0x800000000000000uLL;
LABEL_15:

  }
}

- (UIView)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
  double y;
  double x;
  UIEvent *v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  char v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  _QWORD v30[5];
  _QWORD v31[5];
  UIEvent *v32;
  uint64_t *v33;
  double v34;
  double v35;
  BOOL v36;
  uint64_t v37;
  id *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;

  y = point.y;
  x = point.x;
  v7 = event;
  v37 = 0;
  v38 = (id *)&v37;
  v39 = 0x3032000000;
  v40 = __Block_byref_object_copy__238;
  v41 = __Block_byref_object_dispose__238;
  v42 = 0;
  v8 = UIApp;
  -[UIView _window](self, "_window");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v8) = objc_msgSend((id)v8, "_didEatCurrentTouchForWindow:", v9);

  if ((v8 & 1) == 0)
  {
    v10 = _UIViewAnimationDelegateAllowsUserInteraction(self);
    v11 = _UIViewEatsTouchesAndAnimationDelegateAllowsInteraction(self, v10);
    v12 = v11;
    if (v11 && (_UIViewIgnoresTouchEvents(self, 1) & 1) == 0)
    {
      -[UIView layer](self, "layer");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "presentationLayer");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView layer](self, "layer");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "convertPoint:fromLayer:", v19, x, y);
      v21 = v20;
      v23 = v22;

      -[UIView layer](self, "layer");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "presentationLayer");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v19) = objc_msgSend(v25, "containsPoint:", v21, v23);

      if ((_DWORD)v19)
      {
        objc_storeStrong(v38 + 5, self);
        v26 = (void *)UIApp;
        -[UIView _window](self, "_window");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "_eatCurrentTouchForWindow:", v27);

      }
    }
    else if ((_UIViewIgnoresTouchEvents(self, v12) & 1) == 0
           && -[UIView pointInside:withEvent:](self, "pointInside:withEvent:", v7, x, y))
    {
      -[UIView _window](self, "_window");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13 != 0;

      objc_storeStrong(v38 + 5, self);
      v15 = MEMORY[0x1E0C809B0];
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __38__UIView_Geometry__hitTest_withEvent___block_invoke;
      v31[3] = &unk_1E16EB5D0;
      v34 = x;
      v35 = y;
      v31[4] = self;
      v36 = v14;
      v32 = v7;
      v33 = &v37;
      -[UIView _allSubviews](self, "_allSubviews");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v30[0] = v15;
      v30[1] = 3221225472;
      v30[2] = __38__UIView_Geometry__hitTest_withEvent___block_invoke_2;
      v30[3] = &__block_descriptor_40_e15_v32__0_8Q16_B24lu32l8;
      v30[4] = v31;
      objc_msgSend(v16, "enumerateObjectsWithOptions:usingBlock:", 2, v30);

    }
  }
  v28 = v38[5];
  _Block_object_dispose(&v37, 8);

  return (UIView *)v28;
}

- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event
{
  double y;
  double x;
  UIEvent *v7;
  CALayer *v8;
  UIView *v9;
  void *v10;
  void *v11;
  id *v12;
  void *v13;
  void *v14;
  CALayer *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, void *, uint64_t, _BYTE *);
  void *v41;
  id *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  CGPoint v48;

  y = point.y;
  x = point.x;
  v7 = event;
  v8 = self->_layer;
  if (_UIViewIsAnimating(self))
  {
    v9 = self;
    v44 = 0;
    v45 = &v44;
    v46 = 0x2020000000;
    v47 = 0;
    -[UIView layer](v9, "layer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "animationKeys");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = MEMORY[0x1E0C809B0];
    v39 = 3221225472;
    v40 = ___UIViewAnimationDelegateAllowsPresentationHitTesting_block_invoke;
    v41 = &unk_1E16CB2A0;
    v12 = v9;
    v42 = v12;
    v43 = &v44;
    objc_msgSend(v11, "enumerateObjectsUsingBlock:", &v38);

    LODWORD(v10) = *((unsigned __int8 *)v45 + 24);
    _Block_object_dispose(&v44, 8);

    if ((_DWORD)v10)
    {
      objc_msgSend(v12[21], "presentationLayer", v38, v39, v40, v41);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        v15 = v13;

        -[CALayer convertPoint:fromLayer:](v15, "convertPoint:fromLayer:", v12[21], x, y);
        x = v16;
        y = v17;
        v8 = v15;
      }

    }
  }
  -[CALayer bounds](v8, "bounds", v38, v39, v40, v41);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  -[UIView hitTestInsets](self, "hitTestInsets");
  v29 = v28;
  v30 = 0;
  v32 = v23 - (v27 + v31);
  if (v32 > 0.0)
  {
    v33 = v25 - (v26 + v29);
    if (v33 > 0.0)
    {
      v34 = v19 + v27;
      v35 = v21 + v26;
      v36 = v34;
      v48.x = x;
      v48.y = y;
      v30 = CGRectContainsPoint(*(CGRect *)(&v32 - 2), v48);
    }
  }

  return v30;
}

- (UIEdgeInsets)hitTestInsets
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  UIEdgeInsets result;

  -[UIView hitTestDirectionalInsets](self, "hitTestDirectionalInsets");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = -[UIView _shouldReverseLayoutDirection](self, "_shouldReverseLayoutDirection");
  if (v11)
    v12 = v6;
  else
    v12 = v10;
  if (v11)
    v13 = v10;
  else
    v13 = v6;
  v14 = v4;
  v15 = v8;
  result.right = v12;
  result.bottom = v15;
  result.left = v13;
  result.top = v14;
  return result;
}

- (NSDirectionalEdgeInsets)hitTestDirectionalInsets
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  NSDirectionalEdgeInsets result;

  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  if ((*((_BYTE *)&self->_viewFlags + 20) & 0x80) != 0)
  {
    objc_getAssociatedObject(self, &_UIViewHitTestDirectionalInsetsKey);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "directionalEdgeInsetsValue");
    v2 = v7;
    v3 = v8;
    v4 = v9;
    v5 = v10;

  }
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  result.trailing = v14;
  result.bottom = v13;
  result.leading = v12;
  result.top = v11;
  return result;
}

+ (id)_collectedViewPropertiesByPerforming:(uint64_t)a1
{
  id v2;
  void *v3;
  void *v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v2 = a2;
  v3 = (void *)objc_opt_self();
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__238;
  v11 = __Block_byref_object_dispose__238;
  v12 = 0;
  v6[1] = 3221225472;
  v6[2] = __57__UIView_Internal___collectedViewPropertiesByPerforming___block_invoke;
  v6[3] = &unk_1E16B14C0;
  v6[4] = &v7;
  v6[0] = MEMORY[0x1E0C809B0];
  objc_msgSend(v3, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, 2560, 0, v2, 0, v6, 0.0, 0.0, 0);
  objc_msgSend((id)v8[5], "capturedProperties");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _Block_object_dispose(&v7, 8);

  return v4;
}

- (id)_contentSizeCategoryLimitedTraitCollection:(void *)a1
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      objc_msgSend(v3, "preferredContentSizeCategory");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView _limitedContentSizeCategoryWithBaseValue:](a1, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6 != v5)
      {
        objc_msgSend(v4, "_traitCollectionByReplacingObject:forTraitToken:", v6, 0x1E1A99540);
        v7 = objc_claimAutoreleasedReturnValue();

        v4 = (id)v7;
      }

    }
    v4 = v4;
    v8 = v4;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (void)removeGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer
{
  UIView *v4;
  UIGestureRecognizer *v5;

  v5 = gestureRecognizer;
  -[UIGestureRecognizer view](v5, "view");
  v4 = (UIView *)objc_claimAutoreleasedReturnValue();

  if (v4 == self)
    -[UIView _removeGestureRecognizer:](self, v5);

}

- (BOOL)_associatedViewControllerForwardsAppearanceCallbacks:(id)a3 performHierarchyCheck:(BOOL)a4 isRoot:(BOOL)a5
{
  _BOOL4 v6;
  id v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  int v16;
  void *v17;
  id v18;

  v6 = a4;
  v8 = a3;
  -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
  v9 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "parentViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, sel_allowsWeakReference);

  if (v11)
  {
    objc_msgSend(v8, "parentViewController");
    v12 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = 0;
  }
  if (!(v9 | v12))
  {
    -[UIView _window](self, "_window");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_rootPresentationController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "presentedViewController");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    LOBYTE(v16) = v15 == v8;

LABEL_21:
    goto LABEL_22;
  }
  if ((objc_msgSend((id)v9, "_forwardAppearanceMethods") & 1) != 0
    || objc_msgSend((id)v12, "_forwardAppearanceMethods"))
  {
    if (v6 && v12 && v9 != v12)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("UIViewControllerHierarchyInconsistency"), CFSTR("child view controller:%@ should have parent view controller:%@ but actual parent is:%@"), v8, v9, v12);
    }
    else if (!v12)
    {
      LOBYTE(v16) = 0;
      goto LABEL_22;
    }
    if (v9)
      v17 = (void *)v9;
    else
      v17 = (void *)v12;
    v18 = v17;
    v13 = v18;
    if (!a5
      && (objc_msgSend(v18, "_appearState") == 1 || objc_msgSend(v13, "_appearState") == 3))
    {
      LOBYTE(v16) = 1;
    }
    else
    {
      v16 = objc_msgSend(v13, "_forwardAppearanceMethods") ^ 1;
    }
    goto LABEL_21;
  }
  if (v12)
    LOBYTE(v16) = 1;
  else
    LOBYTE(v16) = objc_msgSend(v8, "_forwardAppearanceMethods");
LABEL_22:

  return v16;
}

- (BOOL)_usesMinimumSafeAreas
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  unint64_t v3;
  void *v5;
  double y;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  void *v45;
  void *v46;
  int v47;
  void *v48;
  double v50;
  $1DC6EB69857CC9E7E7608875A7943F0A *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  p_viewFlags = &self->_viewFlags;
  v3 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  if ((v3 & 0x10000000000) == 0)
  {
    -[UIView _screen](self, "_screen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v56.origin.x = _UIScreenNativeDisplayExclusionRectForType(objc_msgSend(v5, "_screenType"));
    y = v56.origin.y;
    if (!CGRectIsNull(v56) && y > 0.0)
    {
      -[UIView window](self, "window");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "interfaceOrientation") == 1)
      {
        -[UIView safeAreaInsets](self, "safeAreaInsets");
        v9 = v8;
        -[UIView window](self, "window");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_sceneSafeAreaInsetsIncludingStatusBar:", 0);
        if (!v10 || v12 == 0.0 && v11 == 0.0 && v14 == 0.0 && v13 == 0.0)
        {

        }
        else
        {
          v52 = v11;
          v54 = v9;
          -[UIView _currentScreenScale](self, "_currentScreenScale");
          v17 = v16;
          if (v16 <= 0.0)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v51 = p_viewFlags;
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "handleFailureInMethod:object:file:lineNumber:description:", sel__edgesSafeAreaInsetsAreEffectivelySceneSafeAreaInsets, self, CFSTR("UIView.m"), 21896, CFSTR("Invalid screen scale: %f"), *(_QWORD *)&v17);

            p_viewFlags = v51;
          }
          v50 = v17;
          -[UIView bounds](self, "bounds");
          v19 = v18;
          v21 = v20;
          v23 = v22;
          v25 = v24;
          if (objc_msgSend(v10, "_isHostedInAnotherProcess"))
          {
            -[UIView convertRect:toView:](self, "convertRect:toView:", v10, v19, v21, v23, v25);
            v27 = v26;
            v29 = v28;
            v31 = v30;
            v33 = v32;
            objc_msgSend(v10, "bounds");
          }
          else
          {
            v27 = __UIViewConvertRectInViewToSceneSpace(self, v10, v19, v21, v23, v25);
            v29 = v38;
            v31 = v39;
            v33 = v40;
            objc_msgSend(v10, "_sceneBounds");
          }
          v41 = v35;
          v42 = v34;
          v43 = v36;
          v44 = v37;
          CGRectGetMinX(*(CGRect *)&v34);
          v57.origin.x = v27;
          v57.origin.y = v29;
          v57.size.width = v31;
          v57.size.height = v33;
          CGRectGetMinX(v57);
          v58.origin.x = v42;
          v58.origin.y = v41;
          v58.size.width = v43;
          v58.size.height = v44;
          CGRectGetMaxX(v58);
          v59.origin.x = v27;
          v59.origin.y = v29;
          v59.size.width = v31;
          v59.size.height = v33;
          CGRectGetMaxX(v59);
          v60.origin.x = v42;
          v60.origin.y = v41;
          v60.size.width = v43;
          v60.size.height = v44;
          v53 = v52 + CGRectGetMinY(v60);
          v61.origin.x = v27;
          v61.origin.y = v29;
          v61.size.width = v31;
          v61.size.height = v33;
          v55 = vabdd_f64(v53, v54 + CGRectGetMinY(v61));
          v62.origin.x = v42;
          v62.origin.y = v41;
          v62.size.width = v43;
          v62.size.height = v44;
          CGRectGetMaxY(v62);
          v63.origin.x = v27;
          v63.origin.y = v29;
          v63.size.width = v31;
          v63.size.height = v33;
          CGRectGetMaxY(v63);

          if (v55 < 1.0 / v50)
          {
            -[UIView window](self, "window", 1.0 / v50, v55);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "windowScene");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = objc_msgSend(v46, "_usesMinimumSafeAreaInsets");

            if (v47)
            {
              v3 = *(_QWORD *)((char *)p_viewFlags + 20) | 0x8000000000;
              goto LABEL_14;
            }
LABEL_13:
            v3 = *(_QWORD *)((char *)p_viewFlags + 20) & 0xFFFFFF7FFFFFFFFFLL;
LABEL_14:
            *(_QWORD *)((char *)p_viewFlags + 20) = v3 | 0x10000000000;
            return (v3 >> 39) & 1;
          }
        }
      }

    }
    goto LABEL_13;
  }
  return (v3 >> 39) & 1;
}

- (UIEdgeInsets)_minimumSafeAreaInsets
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  void *v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  double top;
  double left;
  double bottom;
  double right;
  id v67;
  UIEdgeInsets result;

  p_viewFlags = &self->_viewFlags;
  v4 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  if ((v4 & 0x20000000000) == 0)
  {
    v4 |= 0xA0000000000uLL;
    *(_QWORD *)((char *)&self->_viewFlags + 20) = v4;
  }
  if ((v4 & 0x80000000000) != 0)
  {
    v5 = -[UIView superview](self, "superview");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "_minimumSafeAreaInsets");
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;
      objc_msgSend(v6, "bounds");
      v16 = v15;
      v18 = v17;
      v20 = v19;
      v22 = v21;
      -[UIView _frameIgnoringLayerTransform](self, "_frameIgnoringLayerTransform");
      self->_minimumSafeAreaInsets.top = _UIEdgeInsetsPropagatedToChildRectIncludingOutsetOnEdges(15, v8, v10, v12, v14, v16, v18, v20, v22, v23, v24, v25, v26);
      self->_minimumSafeAreaInsets.left = v27;
      self->_minimumSafeAreaInsets.bottom = v28;
      self->_minimumSafeAreaInsets.right = v29;
    }
    else if ((*(_QWORD *)p_viewFlags & 0x1000) != 0)
    {
      *(_QWORD *)((char *)p_viewFlags + 20) |= 0x40000000000uLL;
      -[UIView safeAreaInsets](self, "safeAreaInsets");
      self->_minimumSafeAreaInsets.top = v46;
      self->_minimumSafeAreaInsets.left = v47;
      self->_minimumSafeAreaInsets.bottom = v48;
      self->_minimumSafeAreaInsets.right = v49;
    }
    else
    {
      v67 = 0;
      -[UIView _effectiveBoundingPathAndBoundingPathView:](self, "_effectiveBoundingPathAndBoundingPathView:", &v67);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = v67;
      -[UIView bounds](self, "bounds");
      -[UIView convertRect:toView:](self, "convertRect:toView:", v31);
      objc_msgSend(v30, "_centerEdgeInsetsOfBoundingPathAndRect:");
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v39 = v38;
      v40 = fabs(v36);
      v41 = fabs(v35);
      v42 = fabs(v38);
      if (fabs(v32) == INFINITY || v40 == INFINITY || v41 == INFINITY || v42 == INFINITY)
      {
        *(_QWORD *)((char *)p_viewFlags + 20) |= 0x40000000000uLL;
        -[UIView safeAreaInsets](self, "safeAreaInsets", INFINITY, v40, v41, v42);
      }
      else
      {
        *(_QWORD *)((char *)p_viewFlags + 20) &= ~0x40000000000uLL;
        -[UIView safeAreaInsets](self, "safeAreaInsets", INFINITY, v40, v41, v42);
        v51 = v50;
        v53 = v52;
        v55 = v54;
        v57 = v56;
        -[UIView _currentScreenScale](self, "_currentScreenScale");
        v59 = UIEdgeInsetsAverage(15, v33, v35, v37, v39, v51, v53, v55, v57, v58);
      }
      self->_minimumSafeAreaInsets.top = v59;
      self->_minimumSafeAreaInsets.left = v60;
      self->_minimumSafeAreaInsets.bottom = v61;
      self->_minimumSafeAreaInsets.right = v62;

    }
    *(_QWORD *)((char *)p_viewFlags + 20) &= ~0x80000000000uLL;
  }
  top = self->_minimumSafeAreaInsets.top;
  left = self->_minimumSafeAreaInsets.left;
  bottom = self->_minimumSafeAreaInsets.bottom;
  right = self->_minimumSafeAreaInsets.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (void)setContentMode:(UIViewContentMode)contentMode
{
  _QWORD *v5;
  _BOOL8 v6;

  switch(contentMode)
  {
    case UIViewContentModeScaleAspectFit:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F90];
      goto LABEL_14;
    case UIViewContentModeScaleAspectFill:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F98];
      goto LABEL_14;
    case UIViewContentModeRedraw:
      goto LABEL_15;
    case UIViewContentModeCenter:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F78];
      goto LABEL_14;
    case UIViewContentModeTop:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F60];
      goto LABEL_14;
    case UIViewContentModeBottom:
      v5 = (_QWORD *)MEMORY[0x1E0CD2FA8];
      goto LABEL_14;
    case UIViewContentModeLeft:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F80];
      goto LABEL_14;
    case UIViewContentModeRight:
      v5 = (_QWORD *)MEMORY[0x1E0CD2FA0];
      goto LABEL_14;
    case UIViewContentModeTopLeft:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F68];
      goto LABEL_14;
    case UIViewContentModeTopRight:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F70];
      goto LABEL_14;
    case UIViewContentModeBottomLeft:
      v5 = (_QWORD *)MEMORY[0x1E0CD2FB0];
      goto LABEL_14;
    case UIViewContentModeBottomRight:
      v5 = (_QWORD *)MEMORY[0x1E0CD2FB8];
      goto LABEL_14;
    default:
      v5 = (_QWORD *)MEMORY[0x1E0CD2F88];
LABEL_14:
      -[CALayer setContentsGravity:](self->_layer, "setContentsGravity:", *v5);
LABEL_15:
      v6 = contentMode == UIViewContentModeRedraw;
      -[CALayer setNeedsDisplayOnBoundsChange:](self->_layer, "setNeedsDisplayOnBoundsChange:", v6);
      *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)v6 << 37);
      return;
  }
}

- (void)setClipsToBounds:(BOOL)clipsToBounds
{
  if (self)
    -[CALayer setMasksToBounds:](self->_layer, "setMasksToBounds:", clipsToBounds);
}

+ (void)_performSystemAppearanceModifications:(id)a3
{
  void (**v3)(void);
  char v4;
  char v5;

  v3 = (void (**)(void))a3;
  v4 = __isObjectTaggingEnabled;
  v5 = __isSettingUpSystemAppearanceProxyModifications;
  __isObjectTaggingEnabled = 1;
  __isSettingUpSystemAppearanceProxyModifications = 1;
  v3[2]();

  if ((v4 & 1) == 0)
    __isObjectTaggingEnabled = 0;
  if ((v5 & 1) == 0)
    __isSettingUpSystemAppearanceProxyModifications = 0;
}

- (void)setContentsPosition:(int)a3
{
  _QWORD *v3;

  if (a3 > 0xA)
    v3 = (_QWORD *)MEMORY[0x1E0CD2F88];
  else
    v3 = (_QWORD *)qword_1E16EC030[a3];
  -[CALayer setContentsGravity:](self->_layer, "setContentsGravity:", *v3);
}

- (void)_setContinuousCornerRadius:(double)a3
{
  id v4;

  -[UIView layer](self, "layer");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setCornerCurve:", *MEMORY[0x1E0CD2A68]);
  objc_msgSend(v4, "setCornerRadius:", a3);

}

- (BOOL)nsli_canHostIndependentVariableAnchor
{
  return 1;
}

- (BOOL)_shouldSkipObservingBoundingPathChangesForScreen:(_BOOL8)a1
{
  id v3;
  void *v4;
  unint64_t v5;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = objc_msgSend(v3, "_screenType");
    a1 = v5 != -1 && _UIScreenCornerRadiusForType(v5) == 0.0;
  }

  return a1;
}

- (BOOL)_flipsHorizontalAxis
{
  void *v2;
  char v3;

  -[UIView layer](self, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "flipsHorizontalAxis");

  return v3;
}

- (void)_setHiddenForReuse:(BOOL)a3
{
  -[UIView _setHidden:forReason:]((uint64_t)self, a3, 1uLL);
}

- (BOOL)_isHiddenForReuse
{
  if (self)
    return (*((_QWORD *)&self->_viewFlags + 1) >> 16) & 1;
  return (char)self;
}

- (id)_subviewAtIndex:(void *)a1
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  if (a1)
  {
    objc_msgSend((id)objc_msgSend(a1, "layer"), "sublayers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "count") <= a2)
    {
      v6 = 0;
    }
    else
    {
      objc_msgSend(v3, "objectAtIndex:", a2);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (id)objc_msgSend(v4, "unsafeUnretainedDelegate");
      v6 = v5;
      if (v5 && !_IsKindOfUIView((uint64_t)v5))
        v6 = 0;

    }
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

- (UIView)init
{
  return -[UIView initWithFrame:](self, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
}

- (void)_ensureViewsAreInstalledInRelativeOrder:(id *)a3 viewCount:(int64_t)a4 insertionStartIndex:(int64_t)a5
{
  int64_t v6;
  char v9;
  id v10;
  void *v11;
  CALayer *v12;
  CALayer *layer;

  if (a4 >= 1)
  {
    v6 = a4;
    v9 = 0;
    do
    {
      v10 = *a3;
      if (*a3)
      {
        -[UIView _backing_outermostLayer](*a3);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "superlayer");
        v12 = (CALayer *)objc_claimAutoreleasedReturnValue();
        layer = self->_layer;

        if (v12 == layer)
        {
          -[CALayer insertSublayer:atIndex:](self->_layer, "insertSublayer:atIndex:", v11, a5);
          v9 = 1;
        }
        else
        {
          -[UIView insertSubview:atIndex:](self, "insertSubview:atIndex:", v10, a5);
        }
        ++a5;

      }
      ++a3;
      --v6;
    }
    while (v6);
    if ((v9 & 1) != 0)
      -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");
  }
}

- (void)_backing_insertSubview:(uint64_t)a3 atIndex:
{
  void *v4;
  id v5;

  if (a1)
  {
    v4 = *(void **)(a1 + 168);
    -[UIView _backing_outermostLayer](a2);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "insertSublayer:atIndex:", v5, a3);

  }
}

- (void)_setMonitorsSubtree:(BOOL)a3
{
  uint64_t viewFlags;
  _BOOL4 v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  id v10;

  viewFlags = (uint64_t)self->_viewFlags;
  if (((((viewFlags & 0x40000000000) == 0) ^ a3) & 1) == 0)
  {
    v4 = a3;
    v6 = *((_QWORD *)&self->_viewFlags + 1);
    v7 = *((_DWORD *)&self->_viewFlags + 4);
    v8 = 0x40000000000;
    if (!a3)
      v8 = 0;
    *(_QWORD *)&self->_viewFlags = viewFlags & 0xFFFFFBFFFFFFFFFFLL | v8;
    *((_QWORD *)&self->_viewFlags + 1) = v6;
    *((_DWORD *)&self->_viewFlags + 4) = v7;
    -[UIView window](self, "window");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v4)
      objc_msgSend(v9, "_registerSubtreeMonitor:", self);
    else
      objc_msgSend(v9, "_unregisterSubtreeMonitor:", self);

  }
}

- (uint64_t)_hasDeferredAnimationForKey:(uint64_t)a1
{
  id v3;
  BOOL v4;

  v3 = a2;
  if (a1)
  {
    if (__animate)
      v4 = __currentViewAnimationState == 0;
    else
      v4 = 1;
    if (v4)
      a1 = 0;
    else
      a1 = objc_msgSend((id)__currentViewAnimationState, "_hasDeferredAnimationForView:key:", a1, v3);
  }

  return a1;
}

- (id)_nilBackgroundColor
{
  return 0;
}

- (BOOL)_lightStyleRenderConfig
{
  void *v2;
  char v3;

  -[UIView _inheritedRenderConfig](self, "_inheritedRenderConfig");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "lightKeyboard");

  return v3;
}

- (UIKBRenderConfig)_inheritedRenderConfig
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  UIView *v12;
  void *v13;
  char v14;
  int64_t v15;
  void *v16;
  void *v17;

  -[UIView keyboardSceneDelegate](self, "keyboardSceneDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "restorableRenderConfig");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v3, "restorableRenderConfig");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[UIView superview](self, "superview");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[UIView superview](self, "superview");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "_inheritedRenderConfig");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      +[UIKeyboardImpl activeInstance](UIKeyboardImpl, "activeInstance");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v8;
      if (v8)
      {
        objc_msgSend(v8, "textInputTraits");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "keyboardAppearance");

        objc_msgSend(v7, "delegateAsResponder");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        +[UITextInputTraits traitEnvironmentFromTraits:](UITextInputTraits, "traitEnvironmentFromTraits:", v11);
        v12 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (!v12)
          v12 = self;
        objc_msgSend(v7, "delegateAsResponder");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "_isDisplayingWritingToolsSessionInUCB");

        if ((v14 & 1) != 0)
          v15 = 13;
        else
          v15 = +[UITextInputTraits configuredAppearanceForAppearance:withTraitEnvironment:](UITextInputTraits, "configuredAppearanceForAppearance:withTraitEnvironment:", v10, v12);
        +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "currentInputMode");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        +[UIKBRenderConfig configForAppearance:inputMode:traitEnvironment:](UIKBRenderConfig, "configForAppearance:inputMode:traitEnvironment:", v15, v17, v12);
        v5 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        -[UIView traitCollection](self, "traitCollection");
        v12 = (UIView *)objc_claimAutoreleasedReturnValue();
        if (-[UIView userInterfaceStyle](v12, "userInterfaceStyle") == 2)
          +[UIKBRenderConfig darkConfig](UIKBRenderConfig, "darkConfig");
        else
          +[UIKBRenderConfig defaultConfig](UIKBRenderConfig, "defaultConfig");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
      }

    }
  }

  return (UIKBRenderConfig *)v5;
}

- (UIKeyboardSceneDelegate)keyboardSceneDelegate
{
  void *v2;
  void *v3;
  void *v4;

  -[UIView window](self, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "windowScene");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "keyboardSceneDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (UIKeyboardSceneDelegate *)v4;
}

- (CGRect)convertRect:(CGRect)rect toView:(UIView *)view
{
  UIView *v4;
  double height;
  double width;
  double y;
  double x;
  void *v10;
  CALayer *layer;
  CALayer *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect result;

  v4 = view;
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if (view || (v4 = (UIView *)-[UIView window](self, "window")) != 0)
  {
    -[UIView _window](self, "_window");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _window](v4, "_window");

    if (v4 != self)
    {
      layer = v4->_layer;
      v12 = self->_layer;
      -[CALayer convertRect:toLayer:](v12, "convertRect:toLayer:", layer, x, y, width, height);
      x = v13;
      y = v14;
      width = v15;
      height = v16;

    }
  }
  v17 = x;
  v18 = y;
  v19 = width;
  v20 = height;
  result.size.height = v20;
  result.size.width = v19;
  result.origin.y = v18;
  result.origin.x = v17;
  return result;
}

- (CGPoint)convertPoint:(CGPoint)a3 fromCoordinateSpace:(id)a4
{
  double v4;
  double v5;
  CGPoint result;

  -[UIView convertRect:fromCoordinateSpace:](self, "convertRect:fromCoordinateSpace:", a4, a3.x, a3.y, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
  result.y = v5;
  result.x = v4;
  return result;
}

- (void)_setFocusInteractionEnabled:(BOOL)a3
{
  int v3;

  if (a3)
    v3 = 0;
  else
    v3 = 0x40000;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFBFFFF | v3;
}

- (_QWORD)_populateEngineWithConstraintsForViewSubtree:(_QWORD *)a3 forComputingFittingSizeOfView:
{
  _QWORD *v5;
  void *ContentSize;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[7];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v5 = result;
  if (a3 != result)
    goto LABEL_3;
  if (objc_msgSend(result, "translatesAutoresizingMaskIntoConstraints"))
  {
    ContentSize = -[UIView _generateContentSizeConstraints](v5);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v7 = objc_msgSend(ContentSize, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v23 != v9)
            objc_enumerationMutation(ContentSize);
          objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i), "_addToEngine:", a2);
        }
        v8 = objc_msgSend(ContentSize, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      }
      while (v8);
    }
    goto LABEL_15;
  }
  if ((-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v5) & 1) == 0)
  {
LABEL_3:
    if ((objc_msgSend(v5, "_needsDoubleUpdateConstraintsPass") & 1) == 0)
      -[UIView _updateContentSizeConstraints](v5);
  }
LABEL_15:
  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v5))
    v11 = objc_msgSend(v5, "_layoutEngineHostConstraints");
  else
    v11 = 0;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __110__UIView_UIConstraintBasedLayout___populateEngineWithConstraintsForViewSubtree_forComputingFittingSizeOfView___block_invoke;
  v21[3] = &unk_1E16E99E0;
  v21[4] = v11;
  v21[5] = a2;
  v21[6] = v5;
  _UIViewEnumerateConstraints(v5, (uint64_t)v21);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = (void *)objc_msgSend(v5, "_allSubviews", 0);
  result = (_QWORD *)objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v26, 16);
  if (result)
  {
    v13 = result;
    v14 = *(_QWORD *)v18;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v18 != v14)
          objc_enumerationMutation(v12);
        v16 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v15);
        if ((-[UIView _usesLayoutEngineHostingConstraints](v16) & 1) == 0)
          -[UIView _populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:](v16, a2, a3);
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      result = (_QWORD *)objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v26, 16);
      v13 = result;
    }
    while (result);
  }
  return result;
}

- (void)_updateLayoutEngineHostConstraints
{
  NSLayoutConstraint *v3;
  NSLayoutConstraint *v4;
  void *v5;
  void *v6;
  _QWORD v7[2];
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1000) == 0)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0
      || -[UIView _forceLayoutEngineSolutionInRationalEdges](self, "_forceLayoutEngineSolutionInRationalEdges"))
    {
      if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
        && !-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"))
      {
        v3 = -[NSLayoutDimension constraintEqualToConstant:](-[UIView widthAnchor](self, "widthAnchor"), "constraintEqualToConstant:", 0.0);
        -[NSLayoutConstraint setIdentifier:](v3, "setIdentifier:", CFSTR("UIView-Encapsulated-Layout-Width"));
        -[UIView _priorityForEngineHostConstraints](self, "_priorityForEngineHostConstraints");
        -[NSLayoutConstraint setPriority:](v3, "setPriority:");
        v4 = -[NSLayoutDimension constraintEqualToConstant:](-[UIView heightAnchor](self, "heightAnchor"), "constraintEqualToConstant:", 0.0);
        -[NSLayoutConstraint setIdentifier:](v4, "setIdentifier:", CFSTR("UIView-Encapsulated-Layout-Height"));
        -[UIView _priorityForEngineHostConstraints](self, "_priorityForEngineHostConstraints");
        -[NSLayoutConstraint setPriority:](v4, "setPriority:");
        v5 = (void *)objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", self, 32, 0, 0.0);
        objc_msgSend(v5, "setIdentifier:", CFSTR("UIView-Encapsulated-Layout-Left"));
        v6 = (void *)objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", self, 33, 0, 0.0);
        objc_msgSend(v6, "setIdentifier:", CFSTR("UIView-Encapsulated-Layout-Top"));
        v8[0] = v3;
        v8[1] = v4;
        v8[2] = v5;
        v8[3] = v6;
        -[UIView _setLayoutEngineHostConstraints:](self, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 4));
        *((_QWORD *)&self->_viewFlags + 1) |= 0x80uLL;
        v7[0] = v5;
        v7[1] = v6;
        objc_msgSend(MEMORY[0x1E0D156E0], "activateConstraints:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 2));
        *((_QWORD *)&self->_viewFlags + 1) &= ~0x80uLL;
        if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
          -[UIView _resetLayoutEngineHostConstraints](self);
      }
      else if (dyld_program_sdk_at_least()
             && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
      {
        if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
          -[UIView _resetLayoutEngineHostConstraints](self);
      }
    }
    else
    {
      -[UIView _oldUpdateLayoutEngineHostConstraints](self, "_oldUpdateLayoutEngineHostConstraints");
    }
  }
}

- (NSLayoutDimension)widthAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutDimension *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewWidthAnchorKey, v3, 7);
}

- (NSLayoutDimension)heightAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutDimension *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewHeightAnchorKey, v3, 8);
}

- (UILayoutGuide)layoutMarginsGuide
{
  UILayoutGuide *layoutMarginsGuide;
  UILayoutGuide *v4;
  UILayoutGuide *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  UILayoutGuide *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  layoutMarginsGuide = self->_layoutMarginsGuide;
  if (!layoutMarginsGuide)
  {
    v4 = objc_alloc_init(UILayoutGuide);
    v5 = self->_layoutMarginsGuide;
    self->_layoutMarginsGuide = v4;

    if (dyld_program_sdk_at_least())
      -[UILayoutGuide _setAllowsNegativeDimensions:](self->_layoutMarginsGuide, "_setAllowsNegativeDimensions:", 1);
    -[UIView addLayoutGuide:](self, "addLayoutGuide:", self->_layoutMarginsGuide);
    -[UILayoutGuide _setLockedToOwningView:](self->_layoutMarginsGuide, "_setLockedToOwningView:", 1);
    -[UILayoutGuide setIdentifier:](self->_layoutMarginsGuide, "setIdentifier:", CFSTR("UIViewLayoutMarginsGuide"));
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", self->_layoutMarginsGuide, 3, 0, self, 3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", self->_layoutMarginsGuide, 1, 0, self, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", self, 4, 0, self->_layoutMarginsGuide, 4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", self, 2, 0, self->_layoutMarginsGuide, 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setIdentifier:", CFSTR("UIView-topMargin-guide-constraint"));
    objc_msgSend(v7, "setIdentifier:", CFSTR("UIView-leftMargin-guide-constraint"));
    objc_msgSend(v8, "setIdentifier:", CFSTR("UIView-bottomMargin-guide-constraint"));
    objc_msgSend(v9, "setIdentifier:", CFSTR("UIView-rightMargin-guide-constraint"));
    v10 = self->_layoutMarginsGuide;
    v15[0] = v6;
    v15[1] = v7;
    v15[2] = v8;
    v15[3] = v9;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILayoutGuide _setSystemConstraints:](v10, "_setSystemConstraints:", v11);

    -[UIView _updateLayoutMarginsGuideConstraintsIfNecessary](self, "_updateLayoutMarginsGuideConstraintsIfNecessary");
    v12 = (void *)MEMORY[0x1E0D156E0];
    -[UILayoutGuide _systemConstraints](self->_layoutMarginsGuide, "_systemConstraints");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "activateConstraints:", v13);

    layoutMarginsGuide = self->_layoutMarginsGuide;
  }
  return layoutMarginsGuide;
}

- (float)_priorityForEngineHostConstraints
{
  return 1000.0;
}

- (CGSize)_calculatedSystemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5 hasIntentionallyCollapsedHeight:(BOOL *)a6
{
  double height;
  double width;
  int v12;
  int has_internal_diagnostics;
  uint64_t v14;
  id v15;
  double v16;
  void *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  double v34;
  __int128 v35;
  double v36;
  double v37;
  NSObject *v38;
  unint64_t v39;
  NSObject *v40;
  uint64_t viewFlags;
  void *v43;
  int v44;
  _QWORD v45[9];
  __int128 v46;
  __int128 v47;
  _QWORD v48[6];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[5];
  _QWORD v56[6];
  _QWORD v57[14];
  float v58;
  float v59;
  char v60;
  _QWORD v61[3];
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  void (*v67)(uint64_t);
  uint64_t v68;
  uint8_t buf[8];
  uint8_t *v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  void (*v73)(uint64_t);
  uint64_t v74;
  _QWORD v75[5];
  _QWORD v76[5];
  _BYTE v77[128];
  uint64_t v78;
  CGSize result;

  height = a3.height;
  width = a3.width;
  v78 = *MEMORY[0x1E0C80C00];
  memset(v76, 0, sizeof(v76));
  v12 = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_UIViewDebugSignposts, (uint64_t)CFSTR("UIViewDebugSignposts"));
  v75[0] = MEMORY[0x1E0C809B0];
  v75[1] = 3221225472;
  v75[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke;
  v75[3] = &unk_1E16E9A08;
  v75[4] = self;
  -[UIView superview](self, "superview", _UIScopedSignpostIntervalInit((uint64_t)v76, (byte_1ECD75E44 != 0) & ~v12, (uint64_t)v75));
  kdebug_trace();
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v14 = *((_QWORD *)&self->_viewFlags + 1);
  if (has_internal_diagnostics)
  {
    if ((v14 & 0x1000) != 0)
    {
      v38 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v38, OS_LOG_TYPE_FAULT, "Internal UIKit bug: Should never re-enter -_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", buf, 2u);
      }
    }
  }
  else if ((v14 & 0x1000) != 0)
  {
    v39 = _calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight____s_category;
    if (!_calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight____s_category)
    {
      v39 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v39, (unint64_t *)&_calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight____s_category);
    }
    v40 = *(NSObject **)(v39 + 8);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v40, OS_LOG_TYPE_ERROR, "Internal UIKit bug: Should never re-enter -_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", buf, 2u);
    }
  }
  *((_QWORD *)&self->_viewFlags + 1) |= 0x1000uLL;
  if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints")
    && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    v15 = -[UIView _layoutEngineCreateIfNecessary](self, "_layoutEngineCreateIfNecessary");
    v44 = 1;
  }
  else
  {
    v15 = objc_alloc_init(MEMORY[0x1E0D156C8]);
    if (dyld_program_sdk_at_least())
      objc_msgSend(v15, "setShouldIntegralize:", 0);
    objc_msgSend(v15, "setEngineScalingCoefficients:", -[UIView _preferredLayoutEngineToUserScalingCoefficients](self));
    if (dyld_program_sdk_at_least())
      objc_msgSend(v15, "setDelegate:", self);
    v44 = 0;
  }
  v16 = fmin(width, 2777777.0);
  v17 = (void *)MEMORY[0x1E0C99D20];
  v18 = objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:constant:", self, 7, 0, v16);
  v19 = fmin(height, 2777777.0);
  v20 = objc_msgSend(v17, "arrayWithObjects:", v18, objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:constant:", self, 8, 0, v19), 0);
  v21 = 0;
  v22 = 0;
  *(_QWORD *)buf = 0;
  v70 = buf;
  v71 = 0x3052000000;
  v72 = __Block_byref_object_copy__230;
  v73 = __Block_byref_object_dispose__230;
  v74 = 0;
  v63 = 0;
  v64 = &v63;
  v65 = 0x3052000000;
  v66 = __Block_byref_object_copy__230;
  v67 = __Block_byref_object_dispose__230;
  v68 = 0;
  if (v44)
  {
    v21 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  }
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x2020000000;
  v62 = 0;
  viewFlags = (uint64_t)self->_viewFlags;
  v23 = v21;
  v24 = MEMORY[0x1E0C809B0];
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_228;
  v57[3] = &unk_1E16E9A30;
  v57[4] = v20;
  v57[5] = self;
  v58 = a4;
  v59 = a5;
  v60 = v44;
  v43 = v23;
  v57[6] = v23;
  v57[7] = v15;
  v57[8] = v22;
  v57[9] = &v63;
  v25 = v22;
  v57[10] = buf;
  v57[11] = a2;
  *(double *)&v57[12] = v16;
  *(double *)&v57[13] = v19;
  objc_msgSend(v15, "withAutomaticOptimizationDisabled:", v57);
  v56[0] = v24;
  v56[1] = 3221225472;
  v56[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_2;
  v56[3] = &unk_1E16C3E80;
  v56[4] = v15;
  v56[5] = buf;
  objc_msgSend(v15, "withAutomaticOptimizationDisabled:", v56);
  v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v55[0] = v24;
  v55[1] = 3221225472;
  v55[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_3;
  v55[3] = &unk_1E16D5310;
  v55[4] = v26;
  _UIViewTopDownSubtreeTraversal((uint64_t)self, v55, 0);
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, v77, 16);
  if (v27)
  {
    v28 = *(_QWORD *)v52;
    do
    {
      for (i = 0; i != v27; ++i)
      {
        if (*(_QWORD *)v52 != v28)
          objc_enumerationMutation(v26);
        v30 = *(_QWORD **)(*((_QWORD *)&v51 + 1) + 8 * i);
        v31 = v30 + 13;
        v30[14] |= 4uLL;
        objc_msgSend(v30, "_updateBaselineInformationDependentOnBounds");
        v31[1] &= ~4uLL;
      }
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, v77, 16);
    }
    while (v27);
  }

  v32 = MEMORY[0x1E0C809B0];
  v49 = 0u;
  v50 = 0u;
  v33 = (void *)objc_msgSend(v15, "delegate");
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v33 && objc_msgSend(v33, "_forceLayoutEngineSolutionInRationalEdges"))
  {
    -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, 0, (double *)&v49, v15, 0);
    if (a5 == 50.0 && a6 && v19 == 0.0 && *((double *)&v50 + 1) == 0.0)
    {
      objc_msgSend((id)v64[5], "setConstant:", 5.0);
      if (v15 != -[UIView _layoutEngine](self, "_layoutEngine"))
      {
        v48[0] = v32;
        v48[1] = 3221225472;
        v48[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_4;
        v48[3] = &unk_1E16C3E80;
        v48[4] = v15;
        v48[5] = &v63;
        objc_msgSend(v15, "withAutomaticOptimizationDisabled:", v48);
      }
      v46 = 0u;
      v47 = 0u;
      -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, 0, (double *)&v46, v15, 0);
      *a6 = *((double *)&v47 + 1) == 0.0;
    }
  }
  else
  {
    -[UIView _nsis_origin:bounds:inEngine:](self, "_nsis_origin:bounds:inEngine:", 0, &v49, v15);
  }
  if (v44)
  {
    v45[0] = v32;
    v45[1] = 3221225472;
    v45[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_5;
    v45[3] = &unk_1E16D5338;
    v45[4] = v25;
    v45[5] = v15;
    v45[7] = self;
    v45[8] = v61;
    v45[6] = v43;
    objc_msgSend(v15, "withAutomaticOptimizationDisabled:", v45);

    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v15);
  }
  else
  {

  }
  if ((viewFlags & 0x300000000000) == 0x300000000000)
  {
    _UIViewTopDownSubtreeTraversal((uint64_t)self, &__block_literal_global_236_1, 0);
    if (v44)
    {
      if (!objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count"))
        -[UIView _setNeedsUpdateConstraints](self, "_setNeedsUpdateConstraints");
    }
  }
  if (*(double *)&v50 >= 2777777.0)
    *(double *)&v50 = width;
  v34 = *((double *)&v50 + 1);
  if (*((double *)&v50 + 1) >= 2777777.0)
    *((double *)&v50 + 1) = height;
  *((_QWORD *)&self->_viewFlags + 1) &= ~0x1000uLL;
  -[UIView superview](self, "superview", v34);
  kdebug_trace();
  v35 = v50;
  _Block_object_dispose(v61, 8);
  _Block_object_dispose(&v63, 8);
  _Block_object_dispose(buf, 8);
  if (LODWORD(v76[0]))
    kdebug_trace();
  v37 = *((double *)&v35 + 1);
  v36 = *(double *)&v35;
  result.height = v37;
  result.width = v36;
  return result;
}

- (void)_initializeHostedLayoutEngine
{
  double v3;
  double v4;
  double v5;
  void *v6;
  id v7;

  if ((*(_QWORD *)&self->_viewFlags & 0x80000000000) == 0)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 3996, CFSTR("hostsAutolayoutEngine must be on"));
  v3 = -[UIView _preferredLayoutEngineToUserScalingCoefficients](self);
  v5 = v4;
  if ((*(_QWORD *)&self->_viewFlags & 0x80000000000) == 0)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSISEngine *UICreateEngineToHost(UIView *, CGSize)"), CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 3986, CFSTR("View should host autolayout engine"));
  }
  v7 = objc_alloc_init(MEMORY[0x1E0D156C8]);
  if ((dyld_program_sdk_at_least() & 1) != 0
    || -[UIView _forceLayoutEngineSolutionInRationalEdges](self, "_forceLayoutEngineSolutionInRationalEdges"))
  {
    objc_msgSend(v7, "setShouldIntegralize:", 0);
  }
  objc_msgSend(v7, "setDelegate:", self);
  objc_msgSend(v7, "setEngineScalingCoefficients:", v3, v5);
  -[UIView _switchToLayoutEngine:](self, "_switchToLayoutEngine:", v7);

}

- (void)_setLayoutEngineHostConstraints:(void *)a1
{
  if (a1)
  {
    if ((-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)a1) & 1) == 0)
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__setLayoutEngineHostConstraints_, a1, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 1426, CFSTR("Setting engine host constraints without hosting an engine"));
    objc_setAssociatedObject(a1, sel__layoutEngineHostConstraints, a2, (void *)1);
  }
}

- (void)_setOverrideVibrancyTrait:(int64_t)a3
{
  void *v4;
  id v5;

  -[UIView _internalTraitOverrides](self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a3 == -1)
    objc_msgSend(v4, "_removeTraitToken:", 0x1E1A996A8);
  else
    objc_msgSend(v4, "_setNSIntegerValue:forTraitToken:", a3, 0x1E1A996A8);

}

- (double)_contentMargin
{
  void *v3;
  void *v4;
  double v5;
  double v6;

  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
    -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (!v3)
    {
      v6 = 0.0;
      goto LABEL_7;
    }
    objc_msgSend(v3, "_contentMarginForView:", self);
  }
  else
  {
    -[UIView traitCollection](self, "traitCollection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIViewController _slimHorizontalContentMarginForTraitCollection:](UIViewController, "_slimHorizontalContentMarginForTraitCollection:", v4);
  }
  v6 = v5;
LABEL_7:

  return v6;
}

- (void)_setRawLayoutMargins:(UIEdgeInsets)a3
{
  UIEdgeInsets *p_rawLayoutMargins;
  void *v8;

  p_rawLayoutMargins = &self->_rawLayoutMargins;
  if (a3.left != self->_rawLayoutMargins.left
    || a3.top != self->_rawLayoutMargins.top
    || a3.right != self->_rawLayoutMargins.right
    || a3.bottom != self->_rawLayoutMargins.bottom)
  {
    p_rawLayoutMargins->top = a3.top;
    self->_rawLayoutMargins.left = a3.left;
    self->_rawLayoutMargins.bottom = a3.bottom;
    self->_rawLayoutMargins.right = a3.right;
    +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "didUpdateLayoutMargins:ofView:", self, p_rawLayoutMargins->top, p_rawLayoutMargins->left, p_rawLayoutMargins->bottom, p_rawLayoutMargins->right);

    -[UIView _updateInferredLayoutMargins](self, "_updateInferredLayoutMargins");
  }
}

- (void)setDirectionalLayoutMargins:(NSDirectionalEdgeInsets)directionalLayoutMargins
{
  int v3;
  double trailing;

  v3 = *((_DWORD *)&self->_viewFlags + 4);
  *((_DWORD *)&self->_viewFlags + 4) = v3 | 0x400;
  if ((*(_QWORD *)&v3 & 0x80000) != 0)
    trailing = directionalLayoutMargins.trailing;
  else
    trailing = directionalLayoutMargins.leading;
  if ((*(_QWORD *)&v3 & 0x80000) != 0)
    directionalLayoutMargins.trailing = directionalLayoutMargins.leading;
  -[UIView _setRawLayoutMargins:](self, "_setRawLayoutMargins:", directionalLayoutMargins.top, trailing, directionalLayoutMargins.bottom, directionalLayoutMargins.trailing);
}

- (BOOL)insetsLayoutMarginsFromSafeArea
{
  return -[UIView edgesInsettingLayoutMarginsFromSafeArea](self, "edgesInsettingLayoutMarginsFromSafeArea") != 0;
}

- (unint64_t)edgesInsettingLayoutMarginsFromSafeArea
{
  __int128 v2;

  *((_QWORD *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_viewFlags + 1);
  return (v2 >> 57) & 0xF;
}

- (void)setAutoresizesSubviews:(BOOL)autoresizesSubviews
{
  uint64_t v3;

  v3 = 0x20000;
  if (autoresizesSubviews)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFFFFFDFFFFLL | v3;
}

- (id)_createIfNeededAnchorForAssocObjectKey:(objc_class *)a3 class:(uint64_t)a4 withAttribute:
{
  void *v8;

  if (a1)
  {
    objc_getAssociatedObject(a1, a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      v8 = (void *)objc_msgSend([a3 alloc], "initWithItem:attribute:", a1, a4);
      objc_setAssociatedObject(a1, a2, v8, (void *)1);
      if (dyld_program_sdk_at_least())
      {
        if ((_UILayoutAnchorsDeferTrippingWantsAutolayoutFlagUntilUsed() & 1) == 0
          && (!_UIEngineHostingViewsShouldGuardWantsAutolayoutFlagPropagation()
           || (objc_msgSend(a1, "_hostsLayoutEngine") & 1) == 0))
        {
          objc_msgSend(a1, "_setWantsAutolayout");
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

- (NSLayoutXAxisAnchor)leadingAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewLeadingAnchorKey, v3, 5);
}

- (NSLayoutXAxisAnchor)trailingAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewTrailingAnchorKey, v3, 6);
}

- (NSLayoutYAxisAnchor)centerYAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewCenterYAnchorKey, v3, 10);
}

- (NSLayoutYAxisAnchor)bottomAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewBottomAnchorKey, v3, 4);
}

- (NSLayoutYAxisAnchor)lastBaselineAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewLastBaselineAnchorKey, v3, 11);
}

- (NSLayoutYAxisAnchor)topAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewTopAnchorKey, v3, 3);
}

- (NSLayoutXAxisAnchor)centerXAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewCenterXAnchorKey, v3, 9);
}

- (void)_backing_addSubview:(uint64_t)a1
{
  void *v2;
  id v3;

  if (a1)
  {
    v2 = *(void **)(a1 + 168);
    -[UIView _backing_outermostLayer](a2);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addSublayer:", v3);

  }
}

- (void)_setDrawsAsBackdropOverlayWithBlendMode:(int64_t)a3
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFF9FFFFFFFFLL | ((unint64_t)(a3 & 3) << 33);
  switch(a3)
  {
    case 0:
      v4 = *MEMORY[0x1E0CD2E70];
      -[UIView layer](self, "layer");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setCompositingFilter:", v4);
      goto LABEL_10;
    case 1:
      v5 = (uint64_t *)MEMORY[0x1E0CD2E98];
      goto LABEL_9;
    case 2:
      v5 = (uint64_t *)MEMORY[0x1E0CD2EA0];
      goto LABEL_9;
    case 3:
      goto LABEL_5;
    default:
      if (a3 == 100)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CD2BC0];
      }
      else
      {
        if (a3 != 101)
          return;
LABEL_5:
        v5 = (uint64_t *)MEMORY[0x1E0CD2BD0];
      }
LABEL_9:
      v6 = *v5;
      -[UIView layer](self, "layer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setCompositingFilter:", v6);

      -[UIView superview](self, "superview");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "layer");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setAllowsGroupBlending:", 0);

LABEL_10:
      return;
  }
}

- (BOOL)_allowAssistanceInSubtree
{
  return 1;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->__overrideReparentingContainer, 0);
  objc_storeStrong((id *)&self->__alignmentRectOriginCache, 0);
  objc_storeStrong((id *)&self->__lastNotifiedTraitCollection, 0);
  objc_storeStrong((id *)&self->_readableContentGuide, 0);
  objc_storeStrong((id *)&self->_keyboardLayoutGuide, 0);
  objc_storeStrong((id *)&self->_safeAreaLayoutGuide, 0);
  objc_storeStrong((id *)&self->_internalConstraints, 0);
  objc_storeStrong((id *)&self->_stashedLayoutVariableObservations, 0);
  objc_storeStrong((id *)&self->_layoutEngine, 0);
  objc_storeStrong((id *)&self->_layoutMarginsGuide, 0);
  objc_storeStrong((id *)&self->_boundsHeightVariable, 0);
  objc_storeStrong((id *)&self->_boundsWidthVariable, 0);
  objc_storeStrong((id *)&self->_minYVariable, 0);
  objc_storeStrong((id *)&self->_minXVariable, 0);
  objc_storeStrong((id *)&self->_viewBackingAux, 0);
  objc_storeStrong((id *)&self->_gestureRecognizers, 0);
  objc_storeStrong((id *)&self->_subviewCache, 0);
  objc_storeStrong((id *)&self->_layerRetained, 0);
  objc_storeStrong((id *)&self->_traitChangeRegistry, 0);
  objc_storeStrong(&self->_swiftAnimationInfo, 0);
  objc_storeStrong((id *)&self->_animationInfo, 0);
  objc_storeStrong((id *)&self->_cachedTraitCollection, 0);
  objc_storeStrong((id *)&self->_constraintsExceptingSubviewAutoresizingConstraints, 0);
}

- (BOOL)_ola_shouldUseImprovedMultilineTextDisambiguation
{
  int v3;

  v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
      LOBYTE(v3) = 1;
    else
      LOBYTE(v3) = !-[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine");
  }
  return v3;
}

- (double)_calculatedIntrinsicHeight
{
  double v2;
  void *v4;
  double v5;
  double v6;

  if ((*(_QWORD *)&self->_viewFlags & 0x20) != 0)
  {
    -[UIView _currentContentSizeHeightConstraint]((uint64_t)self);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "constant");
    v6 = v5;

    return v6;
  }
  else
  {
    -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
    return v2;
  }
}

- (uint64_t)_currentContentSizeHeightConstraint
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  if (result)
  {
    v1 = (_QWORD *)result;
    result = 0;
    v3 = 0;
    if ((v1[13] & 0x20000000000000) != 0)
    {
      result = objc_msgSend(-[UIView _contentSizeConstraints](v1), "count");
      if (result)
      {
        if ((v1[13] & 0x400000000000) != 0)
        {
          v2 = -[UIView _contentSizeConstraints](v1);
          extractContentSizeConstraints((uint64_t)v1, v2, 0, &v3);
          return v3;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t __74__UIView_UIConstraintBasedLayout___autoresizingConstraints_frameDidChange__block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "_constantsForHorizontalAutoresizingConstraints::", &v6, (char *)&v6 + 8);
  objc_msgSend(*(id *)(a1 + 32), "_constantsForVerticalAutoresizingConstraints::", &v7, (char *)&v7 + 8);
  result = objc_msgSend(*(id *)(a1 + 40), "count");
  if (result == 4)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (void *)objc_msgSend(*(id *)(a1 + 40), "objectAtIndex:", v3);
      objc_msgSend(v5, "setConstant:", *((double *)&v6 + v3));
      result = objc_msgSend(v5, "_loweredConstantIsRounded");
      v4 |= result;
      ++v3;
    }
    while (v3 != 4);
    if ((v4 & 1) != 0)
      return objc_msgSend(*(id *)(a1 + 32), "setNeedsLayout");
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  return result;
}

- (void)_constantsForVerticalAutoresizingConstraints:(double *)a3 :(double *)a4
{
  UIView *v7;
  void *v8;
  CGRect v9;
  _OWORD v10[2];

  v7 = -[UIView superview](self, "superview");
  v8 = -[UIView _effectiveAutoresizingMask](self);
  memset(v10, 0, sizeof(v10));
  memset(&v9, 0, sizeof(v9));
  -[UIView _calculateSubviewAlignmentFrame:superviewAlignmentBounds:forAutoresizingMask:preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:](self, "_calculateSubviewAlignmentFrame:superviewAlignmentBounds:forAutoresizingMask:preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:", &v9, v10, v8, 0);
  if (v7)
    __asm { BR              X10 }
  *a3 = CGRectGetMinY(v9);
  *a4 = CGRectGetHeight(v9);
}

- (void)_constantsForHorizontalAutoresizingConstraints:(double *)a3 :(double *)a4
{
  UIView *v7;
  void *v8;
  CGRect v9;
  _OWORD v10[2];

  v7 = -[UIView superview](self, "superview");
  v8 = -[UIView _effectiveAutoresizingMask](self);
  memset(v10, 0, sizeof(v10));
  memset(&v9, 0, sizeof(v9));
  -[UIView _calculateSubviewAlignmentFrame:superviewAlignmentBounds:forAutoresizingMask:preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:](self, "_calculateSubviewAlignmentFrame:superviewAlignmentBounds:forAutoresizingMask:preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:", &v9, v10, v8, 0);
  if (v7)
    __asm { BR              X10 }
  *a3 = CGRectGetMinX(v9);
  *a4 = CGRectGetWidth(v9);
}

- (_QWORD)_constraintsEquivalentToAutoresizingMask
{
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (result)
  {
    v1 = result;
    v2 = -[UIView _effectiveAutoresizingMask](result);
    v1[37] = v2;
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(v1, "superview");
      v7 = 0u;
      v8 = 0u;
      v5 = 0u;
      v6 = 0u;
      objc_msgSend(v1, "_calculateSubviewAlignmentFrame:superviewAlignmentBounds:forAutoresizingMask:preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:", &v5, &v7, v3, dyld_program_sdk_at_least() ^ 1);
      if (dyld_program_sdk_at_least())
        return (_QWORD *)objc_msgSend(MEMORY[0x1E0D156B0], "constraintsWithAutoresizingMask:subitem:frame:superitem:bounds:", v3, v1, v4, v5, v6, v7, v8);
      else
        return (_QWORD *)objc_msgSend(MEMORY[0x1E0D156B0], "oldUIConstraintsWithAutoresizingMask:subitem:frame:superitem:bounds:", v3, v1, v4, v5, v6, v7, v8);
    }
    else
    {
      return (_QWORD *)objc_msgSend(MEMORY[0x1E0C99D20], "array");
    }
  }
  return result;
}

- (NSString)description
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  int v11;
  double v12;
  char v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  NSInteger v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  CALayer *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<%@: %p; "), objc_opt_class(), self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _UIViewDescriptionAppendBaseClass(self, v3);
  _UIViewDescriptionAppendFrame(self, v3);
  _UIViewDescriptionAppendTransform(self, v3);
  v4 = v3;
  -[UIView layer](self, "layer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "anchorPoint");
  v7 = v6;
  v9 = v8;

  if (v7 != 0.5 || v9 != 0.5)
    objc_msgSend(v4, "appendFormat:", CFSTR("anchorPoint = (%g, %g); "), *(_QWORD *)&v7, *(_QWORD *)&v9);

  _UIViewDescriptionAppendTextIfApplicable(self, v4);
  if (-[UIView clipsToBounds](self, "clipsToBounds"))
    objc_msgSend(v4, "appendFormat:", CFSTR("clipsToBounds = YES; "));
  -[UIView layer](self, "layer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isFrozen");

  if (v11)
    objc_msgSend(v4, "appendFormat:", CFSTR("layer.frozen = YES; "));
  -[UIView alpha](self, "alpha");
  if (v12 != 1.0)
    objc_msgSend(v4, "appendFormat:", CFSTR("alpha = %g; "), *(_QWORD *)&v12);
  if (-[UIView isHidden](self, "isHidden"))
    objc_msgSend(v4, "appendFormat:", CFSTR("hidden = YES; "));
  if (!-[UIView isOpaque](self, "isOpaque"))
    objc_msgSend(v4, "appendFormat:", CFSTR("opaque = NO; "));
  if (-[UIView autoresizingMask](self, "autoresizingMask"))
  {
    if (!self)
    {
      v17 = 0;
LABEL_33:
      objc_msgSend(v4, "appendString:", v17);

      goto LABEL_34;
    }
    v13 = -[UIView autoresizingMask](self, "autoresizingMask");
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if ((v13 & 1) != 0)
    {
      objc_msgSend(v14, "appendString:", CFSTR("LM+"));
      if ((v13 & 2) == 0)
      {
LABEL_18:
        if ((v13 & 4) == 0)
          goto LABEL_19;
        goto LABEL_27;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_18;
    }
    objc_msgSend(v15, "appendString:", CFSTR("W+"));
    if ((v13 & 4) == 0)
    {
LABEL_19:
      if ((v13 & 8) == 0)
        goto LABEL_20;
      goto LABEL_28;
    }
LABEL_27:
    objc_msgSend(v15, "appendString:", CFSTR("RM+"));
    if ((v13 & 8) == 0)
    {
LABEL_20:
      if ((v13 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_29;
    }
LABEL_28:
    objc_msgSend(v15, "appendString:", CFSTR("TM+"));
    if ((v13 & 0x10) == 0)
    {
LABEL_21:
      if ((v13 & 0x20) == 0)
      {
LABEL_23:
        v16 = objc_msgSend(v15, "length");
        if (v16)
          objc_msgSend(v15, "deleteCharactersInRange:", v16 - 1, 1);
        else
          objc_msgSend(v15, "appendString:", CFSTR("none"));
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("autoresize = %@; "), v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_33;
      }
LABEL_22:
      objc_msgSend(v15, "appendString:", CFSTR("BM+"));
      goto LABEL_23;
    }
LABEL_29:
    objc_msgSend(v15, "appendString:", CFSTR("H+"));
    if ((v13 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_34:
  if (!-[UIView autoresizesSubviews](self, "autoresizesSubviews"))
    objc_msgSend(v4, "appendFormat:", CFSTR("autoresizesSubviews = NO; "));
  if (!-[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled"))
    objc_msgSend(v4, "appendFormat:", CFSTR("userInteractionEnabled = NO; "));
  -[UIView _interactionTintColor](self, "_interactionTintColor");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    -[UIView _interactionTintColor](self, "_interactionTintColor");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "appendFormat:", CFSTR("tintColor = %@; "), v19);

  }
  if ((*((_BYTE *)&self->_viewFlags + 20) & 8) != 0)
  {
    v20 = -[UIView tag](self, "tag");
    if (v20)
      objc_msgSend(v4, "appendFormat:", CFSTR("tag = %ld; "), v20);
  }
  if (-[UIView isFocused](self, "isFocused"))
    objc_msgSend(v4, "appendFormat:", CFSTR("focused = YES; "));
  if (-[NSArray count](self->_gestureRecognizers, "count"))
    objc_msgSend(v4, "appendFormat:", CFSTR("gestureRecognizers = <NSArray: %p>; "), self->_gestureRecognizers);
  -[CALayer animationKeys](self->_layer, "animationKeys");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21;
  if (v21 && objc_msgSend(v21, "count"))
  {
    objc_msgSend(v4, "appendString:", CFSTR("animations = {"));
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = v22;
    v23 = v22;
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v39;
      do
      {
        v27 = 0;
        do
        {
          v28 = v4;
          if (*(_QWORD *)v39 != v26)
            objc_enumerationMutation(v23);
          v29 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * v27);
          v30 = self->_layer;
          -[CALayer animationForKey:](v30, "animationForKey:", v29);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = v29;
          v4 = v28;
          objc_msgSend(v28, "appendFormat:", CFSTR(" %@=%@;"), v36, v31);

          ++v27;
        }
        while (v25 != v27);
        v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      }
      while (v25);
    }

    objc_msgSend(v4, "appendString:", CFSTR(" }; "));
    v22 = v37;
  }
  -[UIView backgroundColor](self, "backgroundColor");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (v32)
  {
    -[UIView backgroundColor](self, "backgroundColor");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "appendFormat:", CFSTR("backgroundColor = %@; "), v33);

  }
  -[CALayer description](self->_layer, "description");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "appendFormat:", CFSTR("layer = %@>"), v34);

  return (NSString *)v4;
}

- (void)_effectiveAutoresizingMask
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, "translatesAutoresizingMaskIntoConstraints"))
    {
      result = (void *)objc_msgSend(v1, "superview");
      if (result)
      {
        if ((objc_msgSend(v1, "_isManuallyResizedBySuperview") & 1) != 0)
          v2 = 36;
        else
          v2 = objc_msgSend(v1, "autoresizingMask");
        v3 = v2 | 4;
        if ((v2 & 7) != 0)
          v3 = v2;
        if ((v3 & 0x38) != 0)
          return (void *)v3;
        else
          return (void *)(v3 | 0x20);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (BOOL)_isManuallyResizedBySuperview
{
  objc_class *v2;
  objc_class *v3;
  IMP MethodImplementation;
  IMP v5;
  BOOL v6;

  if (!-[UIView autoresizesSubviews](-[UIView superview](self, "superview"), "autoresizesSubviews"))
    return 1;
  v2 = (objc_class *)objc_opt_class();
  v3 = (objc_class *)objc_opt_class();
  MethodImplementation = class_getMethodImplementation(v2, sel_resizeSubviewsWithOldSize_);
  v5 = class_getMethodImplementation(v3, sel_resizeSubviewsWithOldSize_);
  if (MethodImplementation)
    v6 = v5 == 0;
  else
    v6 = 1;
  return !v6 && MethodImplementation != v5;
}

- (BOOL)autoresizesSubviews
{
  return (*(_QWORD *)&self->_viewFlags & 0x20000) == 0;
}

- (BOOL)clipsToBounds
{
  if (self)
    LOBYTE(self) = -[CALayer masksToBounds](self->_layer, "masksToBounds");
  return (char)self;
}

- (id)_backgroundColor
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t v4;
  void *v5;
  void *v6;
  CGColor *v7;
  CGColor *v8;
  CGColor *AssociatedObject;

  p_viewFlags = &self->_viewFlags;
  if ((*((_BYTE *)&self->_viewFlags + 22) & 2) != 0)
  {
    objc_getAssociatedObject(self, &unk_1EDDCA620);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if ((*(_QWORD *)p_viewFlags & 0x80) == 0
      || (objc_getAssociatedObject(self, &unk_1EDDCA621), (v4 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      v8 = -[UIView _backgroundCGColor](self, "_backgroundCGColor");
      if (!v8)
        return v8;
      goto LABEL_13;
    }
    v5 = (void *)v4;
    +[UIColor _systemColorWithName:](UIColor, "_systemColorWithName:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v7 = -[UIView _backgroundCGColor](self, "_backgroundCGColor");
  v8 = v7;
  if (!v6)
  {
    if (!v7)
      return v8;
LABEL_13:
    +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", v8);
    v8 = (CGColor *)objc_claimAutoreleasedReturnValue();
    return v8;
  }
  if (v7
    && ((*((_BYTE *)p_viewFlags + 22) & 2) != 0
      ? (AssociatedObject = (CGColor *)objc_getAssociatedObject(self, &unk_1EDDCA61F))
      : (AssociatedObject = (CGColor *)objc_msgSend(objc_retainAutorelease(v6), "CGColor")),
        !CGColorEqualToColor(AssociatedObject, v8)))
  {
    +[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", v8);
    v8 = (CGColor *)objc_claimAutoreleasedReturnValue();

    _UIViewSetBackgroundColorSystemColorName(self, 0);
    if ((*((_BYTE *)p_viewFlags + 22) & 2) != 0)
    {
      objc_setAssociatedObject(self, &unk_1EDDCA620, 0, (void *)1);
      objc_setAssociatedObject(self, &unk_1EDDCA61F, 0, (void *)1);
    }
  }
  else
  {
    v8 = (CGColor *)v6;
  }
  return v8;
}

- (void)_calculateSubviewAlignmentFrame:(CGRect *)a3 superviewAlignmentBounds:(CGRect *)a4 forAutoresizingMask:(unint64_t)a5 preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:(BOOL)a6
{
  _BOOL4 v6;
  UIView *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64_t v27;
  double v28;
  double v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int v32;
  double v33;
  _BOOL4 v34;
  _BOOL4 v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64_t v49;

  v6 = a6;
  v10 = -[UIView superview](self, "superview", a3, a4, a5);
  -[UIView bounds](v10, "bounds");
  v12 = v11;
  v14 = v13;
  -[UIView _alignmentRectForBounds:](v10, "_alignmentRectForBounds:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  v20 = v15;
  v21 = v18;
  v22 = v19;
  if (v6)
  {
    *(CGRect *)(&v16 - 1) = CGRectOffset(*(CGRect *)&v15, v12, v14);
    v20 = v23;
    v21 = v24;
    v22 = v25;
  }
  -[UIView _alignmentFrame](self, "_alignmentFrame", v16, v17);
  v30 = (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v31 = ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v28 >= 0.0)
  {
    v31 = 0;
    v30 = 0;
  }
  v32 = (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v30;
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v32 = 1;
  v33 = 0.0;
  if (v32 | v31)
    v28 = 0.0;
  v34 = (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  v35 = v29 < 0.0 && ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v29 >= 0.0)
    v34 = 0;
  v36 = (*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v34;
  if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
    v36 = 1;
  if (v36 | v35)
    v29 = 0.0;
  if (v22 >= 0.0)
    v37 = v22;
  else
    v37 = 0.0;
  if (v21 >= 0.0)
    v33 = v21;
  if (v20 <= 2777777.0)
    v38 = v20;
  else
    v38 = 2777777.0;
  v39 = fmax(v38, -2777777.0);
  if (v37 > 2777777.0)
    v37 = 2777777.0;
  v40 = fmax(v37, -2777777.0);
  if (v28 > 2777777.0)
    v28 = 2777777.0;
  v41 = fmax(v28, -2777777.0);
  if (v29 > 2777777.0)
    v29 = 2777777.0;
  a4->origin.x = v39;
  v42.f64[0] = v49;
  v42.f64[1] = v33;
  v43 = (float64x2_t)vdupq_n_s64(0x4145315880000000uLL);
  v44 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v42, v43), (int8x16_t)v43, (int8x16_t)v42);
  v45 = (float64x2_t)vdupq_n_s64(0xC145315880000000);
  *(float64x2_t *)&a4->origin.y = vmaxnmq_f64(v44, v45);
  a4->size.height = v40;
  v26.f64[1] = v27;
  v46 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v47 = vabsq_f64(v26);
  v48 = (float64x2_t)vandq_s8((int8x16_t)v26, vorrq_s8((int8x16_t)vcgtq_f64(v46, v47), (int8x16_t)vcgtq_f64(v47, v46)));
  a3->origin = (CGPoint)vmaxnmq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v48, v43), (int8x16_t)v43, (int8x16_t)v48), v45);
  a3->size.width = v41;
  a3->size.height = fmax(v29, -2777777.0);
}

- (CGRect)_alignmentRectForBounds:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView alignmentRectInsets](self, "alignmentRectInsets");
  v8 = y + v7;
  v11 = width - (v9 + v10);
  v13 = height - (v7 + v12);
  v14 = x + v9;
  v15 = v8;
  v16 = v11;
  result.size.height = v13;
  result.size.width = v16;
  result.origin.y = v15;
  result.origin.x = v14;
  return result;
}

- (CGRect)_alignmentFrame
{
  void *v3;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat x;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGRect v16;
  CGRect v17;
  CGRect result;

  v3 = (void *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate");
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v3 && (objc_msgSend(v3, "_forceLayoutEngineSolutionInRationalEdges") & 1) != 0)
  {
    -[UIView center](self, "center");
    objc_msgSend(-[UIView _backing_outermostLayer](self), "anchorPoint");
    -[UIView alignmentRectInsets](self, "alignmentRectInsets");
    -[UIView bounds](self, "bounds");
    -[UIView _alignmentRectForBounds:](self, "_alignmentRectForBounds:");
    y = v16.origin.y;
    width = v16.size.width;
    height = v16.size.height;
    CGRectGetWidth(v16);
    UIRoundToViewScale(self);
    x = v17.origin.x;
    v17.origin.y = y;
    v17.size.width = width;
    v17.size.height = height;
    CGRectGetHeight(v17);
    UIRoundToViewScale(self);
    v9 = v8;
  }
  else
  {
    -[UIView frame](self, "frame");
    -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
    x = v10;
    width = v11;
    height = v12;
  }
  v13 = x;
  v14 = width;
  v15 = height;
  result.size.height = v15;
  result.size.width = v14;
  result.origin.y = v9;
  result.origin.x = v13;
  return result;
}

- (BOOL)_shouldAppendTextInViewDescription
{
  return 1;
}

- (CATransform3D)transform3D
{
  CATransform3D *result;

  result = (CATransform3D *)self->_layer;
  if (result)
    return (CATransform3D *)-[CATransform3D transform](result, "transform");
  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m43 = 0u;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = 0u;
  *(_OWORD *)&retstr->m21 = 0u;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m11 = 0u;
  *(_OWORD *)&retstr->m13 = 0u;
  return result;
}

uint64_t __68__UIView_UIConstraintBasedLayout___resetLayoutEngineHostConstraints__block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_resetLayoutEngineHostConstraintsForAxis:collectingViews:", 0, 0);
  return objc_msgSend(*(id *)(a1 + 32), "_resetLayoutEngineHostConstraintsForAxis:collectingViews:", 1, 0);
}

- (double)_firstBaselineOffsetFromTop
{
  double v3;
  double v4;
  double result;

  if (!dyld_program_sdk_at_least())
    return 0.0;
  -[UIView frame](self, "frame");
  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
  -[UIView _baselineOffsetsAtSize:](self, "_baselineOffsetsAtSize:", v3, v4);
  if (result == 2.22507386e-308)
    return 0.0;
  return result;
}

- (double)_baselineOffsetFromBottom
{
  double v3;
  double v4;
  double v5;
  double result;

  if (!dyld_program_sdk_at_least())
    return 0.0;
  -[UIView frame](self, "frame");
  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
  -[UIView _baselineOffsetsAtSize:](self, "_baselineOffsetsAtSize:", v3, v4);
  result = v5;
  if (v5 == 2.22507386e-308)
    return 0.0;
  return result;
}

- (void)_resetLayoutEngineHostConstraintsForAxis:(int64_t)a3 collectingViews:(id)a4
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  id v8;
  double v9;
  uint64_t v10;
  double Height;
  double v15;
  void *v16;
  double v17;
  uint64_t v18;

  p_viewFlags = &self->_viewFlags;
  if ((*((_BYTE *)&self->_viewFlags + 22) & 0x10) == 0 || (dyld_program_sdk_at_least() & 1) == 0)
  {
    v8 = -[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints");
    if (objc_msgSend(v8, "count") == 4)
    {
      if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
        -[UIView bounds](self, "bounds");
      else
        v9 = -[UIView _nsis_compatibleBoundsInEngine:](self, -[UIView _layoutEngine](-[UIView superview](self, "superview"), "_layoutEngine"));
      -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:", v9);
      if (a3)
        Height = CGRectGetHeight(*(CGRect *)&v10);
      else
        Height = CGRectGetWidth(*(CGRect *)&v10);
      v15 = Height;
      *((_QWORD *)p_viewFlags + 1) |= 0x80uLL;
      v16 = (void *)objc_msgSend(v8, "objectAtIndexedSubscript:", a3);
      objc_msgSend(v16, "constant");
      if (v17 != v15 || (objc_msgSend(v16, "isActive") & 1) == 0)
      {
        objc_msgSend(v16, "setConstant:", v15);
        objc_msgSend(v16, "setActive:", 1);
        if (!a3)
        {
          v18 = *(_QWORD *)p_viewFlags;
          if ((*(_QWORD *)p_viewFlags & 0x1000000000000) != 0)
          {
            -[UIView _recalculateStrictDescendantNeedsDoubleUpdateConstraints](self, "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
            v18 = *(_QWORD *)p_viewFlags;
          }
          if ((v18 & 0x800000000000) != 0)
            -[UIView _recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:](self, "_recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:", a4);
        }
      }
      *((_QWORD *)p_viewFlags + 1) &= ~0x80uLL;
    }
  }
}

- (CGRect)alignmentRectForFrame:(CGRect)frame
{
  double height;
  double width;
  double y;
  double x;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  height = frame.size.height;
  width = frame.size.width;
  y = frame.origin.y;
  x = frame.origin.x;
  -[UIView alignmentRectInsets](self, "alignmentRectInsets");
  v8 = y + v7;
  v11 = width - (v9 + v10);
  v13 = height - (v7 + v12);
  v14 = x + v9;
  v15 = v8;
  v16 = v11;
  result.size.height = v13;
  result.size.width = v16;
  result.origin.y = v15;
  result.origin.x = v14;
  return result;
}

- (id)_layoutEngineHostConstraints
{
  if ((-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self) & 1) == 0)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 1432, CFSTR("Retrieving engine host constraints without hosting an engine"));
  return objc_getAssociatedObject(self, sel__layoutEngineHostConstraints);
}

- (void)_recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = -[UIView _allSubviews](self, "_allSubviews", 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v9, "_needsDoubleUpdateConstraintsPass"))
        {
          if ((objc_msgSend(v9, "_inSecondConstraintsPass") & 1) == 0)
            objc_msgSend(a3, "addObject:", v9);
          objc_msgSend(v9, "_invalidateIntrinsicContentSizeNeedingLayout:", 0);
        }
        else if (v9)
        {
          v10 = v9[13];
          if ((v10 & 0x1000000000000) != 0)
          {
            objc_msgSend(v9, "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
            v10 = v9[13];
          }
          if ((v10 & 0x800000000000) != 0)
            objc_msgSend(v9, "_recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:", a3);
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }
}

- (BOOL)_inSecondConstraintsPass
{
  return (*(_QWORD *)&self->_viewFlags >> 51) & 1;
}

- ($F24F406B2B787EFB06265DBA3D28CBD5)_baselineOffsetsAtSize:(CGSize)a3
{
  double height;
  double width;
  UIView *v6;
  UIView *v7;
  UIView *v8;
  UIView *v9;
  double v10;
  double v11;
  void *v12;
  NSLayoutConstraint *v13;
  double v14;
  NSLayoutConstraint *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _QWORD v28[8];
  uint64_t v29;
  CGRect *v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  CGRect *v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  $F24F406B2B787EFB06265DBA3D28CBD5 result;

  height = a3.height;
  width = a3.width;
  if (!-[UIView _wantsConstraintBasedLayout](self, "_wantsConstraintBasedLayout"))
    goto LABEL_16;
  v6 = -[UIView viewForFirstBaselineLayout](self, "viewForFirstBaselineLayout");
  v7 = self;
  if (v6)
  {
    v7 = self;
    if (v6 != self)
    {
      v7 = v6;
      while (!-[UIView _wantsAutolayout](v7, "_wantsAutolayout"))
      {
        v7 = -[UIView superview](v7, "superview");
        if (v7 == self)
        {
          v7 = self;
          break;
        }
      }
    }
  }
  v8 = -[UIView viewForLastBaselineLayout](self, "viewForLastBaselineLayout");
  v9 = self;
  if (v8)
  {
    v9 = self;
    if (v8 != self)
    {
      v9 = v8;
      while (!-[UIView _wantsAutolayout](v9, "_wantsAutolayout"))
      {
        v9 = -[UIView superview](v9, "superview");
        if (v9 == self)
        {
          v9 = self;
          break;
        }
      }
    }
  }
  if (v7 == self && v9 == self)
  {
LABEL_16:
    v10 = 2.22507386e-308;
    v11 = 2.22507386e-308;
  }
  else
  {
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2);
    if (width < 50000.0)
    {
      v13 = -[NSLayoutDimension constraintEqualToConstant:](-[UIView widthAnchor](self, "widthAnchor"), "constraintEqualToConstant:", width);
      LODWORD(v14) = 1144586240;
      -[NSLayoutConstraint setPriority:](v13, "setPriority:", v14);
      objc_msgSend(v12, "addObject:", v13);
    }
    if (height < 50000.0)
    {
      v15 = -[NSLayoutDimension constraintEqualToConstant:](-[UIView widthAnchor](self, "widthAnchor"), "constraintEqualToConstant:", height);
      LODWORD(v16) = 1144586240;
      -[NSLayoutConstraint setPriority:](v15, "setPriority:", v16);
      objc_msgSend(v12, "addObject:", v15);
    }
    v35 = 0;
    v36 = (CGRect *)&v35;
    v37 = 0x4010000000;
    v38 = &unk_18685B0AF;
    v39 = 0u;
    v40 = 0u;
    v29 = 0;
    v30 = (CGRect *)&v29;
    v31 = 0x4010000000;
    v32 = &unk_18685B0AF;
    v33 = 0u;
    v34 = 0u;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __68__UIView__UIConstraintBasedLayoutEmbedding___baselineOffsetsAtSize___block_invoke;
    v28[3] = &unk_1E16D5298;
    v28[4] = v7;
    v28[5] = v9;
    v28[6] = &v35;
    v28[7] = &v29;
    -[UIView _measureViewWithSize:temporaryConstraints:suspendingSystemConstraints:withOptimizedEngineBlock:](self, "_measureViewWithSize:temporaryConstraints:suspendingSystemConstraints:withOptimizedEngineBlock:", v12, 1, v28, width, height);
    -[UIView alignmentRectInsets](self, "alignmentRectInsets");
    v18 = v17;
    v20 = v19;
    if (v7 == self)
    {
      v23 = 2.22507386e-308;
      v21 = 2.22507386e-308;
    }
    else
    {
      -[UIView _baselineOffsetsAtSize:](v7, "_baselineOffsetsAtSize:", v36[1].size.width, v36[1].size.height);
      v23 = v22;
    }
    if (v9 == v7)
      v24 = v21;
    else
      v24 = 2.22507386e-308;
    if (v9 != v7 && v9 != self)
    {
      -[UIView _baselineOffsetsAtSize:](v9, "_baselineOffsetsAtSize:", v30[1].size.width, v30[1].size.height);
      v24 = v25;
    }
    v10 = 2.22507386e-308;
    if (v23 != 2.22507386e-308)
      v10 = v23 + CGRectGetMinY(v36[1]) - v18;
    v11 = 2.22507386e-308;
    if (v24 != 2.22507386e-308)
      v11 = v24 + height - CGRectGetMaxY(v30[1]) - v20;
    _Block_object_dispose(&v29, 8);
    _Block_object_dispose(&v35, 8);
  }
  v26 = v10;
  v27 = v11;
  result.var1 = v27;
  result.var0 = v26;
  return result;
}

- (BOOL)_wantsConstraintBasedLayout
{
  if ((*(_QWORD *)&self->_viewFlags & 0xC00000000000000) != 0)
    return 1;
  else
    return objc_msgSend((id)objc_opt_class(), "requiresConstraintBasedLayout");
}

- (CGSize)convertSize:(CGSize)a3 fromView:(id)a4
{
  UIView *v4;
  double height;
  double width;
  CALayer *layer;
  CALayer *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CALayer *v14;
  CALayer *v15;
  double v16;
  double v17;
  CALayer *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGSize result;

  v4 = (UIView *)a4;
  height = a3.height;
  width = a3.width;
  if (!a4)
    v4 = (UIView *)-[UIView window](self, "window");
  if (v4 && v4 != self)
  {
    layer = v4->_layer;
    v9 = self->_layer;
    -[CALayer convertPoint:fromLayer:](v9, "convertPoint:fromLayer:", layer, width, height);
    v11 = v10;
    v13 = v12;

    v14 = self->_layer;
    v15 = v4->_layer;
    v16 = *MEMORY[0x1E0C9D538];
    v17 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v18 = v14;
    -[CALayer convertPoint:fromLayer:](v18, "convertPoint:fromLayer:", v15, v16, v17);
    v20 = v19;
    v22 = v21;

    width = vabdd_f64(v11, v20);
    height = vabdd_f64(v13, v22);
  }
  v23 = width;
  v24 = height;
  result.height = v24;
  result.width = v23;
  return result;
}

- (void)setNeedsDisplayInRect:(CGRect)rect
{
  double height;
  double width;
  double y;
  double x;

  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  if ((*(_QWORD *)&self->_viewFlags & 0x11000000) == 0x1000000 || -[UIView _canDrawContent](self, "_canDrawContent"))
  {
    -[CALayer setNeedsDisplayInRect:](self->_layer, "setNeedsDisplayInRect:", x, y, width, height);
    UIViewDidSetNeedsDisplay(self);
  }
}

- (void)setLargeContentTitle:(NSString *)largeContentTitle
{
  NSString *v4;
  id v5;

  v4 = largeContentTitle;
  -[UIView _largeContentStoredPropertiesCreatingIfNecessary:](self, "_largeContentStoredPropertiesCreatingIfNecessary:", 1);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setLargeContentTitle:", v4);

}

- (void)setShowsLargeContentViewer:(BOOL)showsLargeContentViewer
{
  _BOOL8 v3;
  id v4;

  v3 = showsLargeContentViewer;
  -[UIView _largeContentStoredPropertiesCreatingIfNecessary:](self, "_largeContentStoredPropertiesCreatingIfNecessary:", 1);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setShowsLargeContentViewer:", v3);

}

- (id)_largeContentStoredPropertiesCreatingIfNecessary:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  BOOL v6;

  v3 = a3;
  objc_getAssociatedObject(self, &_LargeContentStoredPropertiesKey);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    v6 = 1;
  else
    v6 = !v3;
  if (!v6)
  {
    v5 = (void *)objc_opt_new();
    -[UIView _setLargeContentStoredProperties:](self, "_setLargeContentStoredProperties:", v5);
  }
  return v5;
}

- (void)_setLargeContentStoredProperties:(id)a3
{
  objc_setAssociatedObject(self, &_LargeContentStoredPropertiesKey, a3, (void *)1);
}

- (void)_setInAnimatedLayout:(BOOL)a3
{
  *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFFFFFFFELL | a3;
}

- (void)bringSubviewToFront:(UIView *)view
{
  UIView *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;
  void *v11;
  UIView *v12;

  v4 = view;
  if (v4)
  {
    v12 = v4;
    -[CALayer sublayers](self->_layer, "sublayers");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");
    -[UIView _backing_outermostLayer](v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v5, "indexOfObject:", v7);

    if (v8 != 0x7FFFFFFFFFFFFFFFLL && v8 != v6 - 1)
    {
      v10 = (void *)objc_msgSend(v5, "mutableCopy");
      -[UIView _backing_outermostLayer](v12);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObject:", v11);

      objc_msgSend(v10, "removeObjectAtIndex:", v8);
      -[CALayer setSublayers:](self->_layer, "setSublayers:", v10);
      -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
      -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");

    }
    v4 = v12;
  }

}

- (void)addSubview:(UIView *)view
{
  -[UIView _addSubview:positioned:relativeTo:](self, "_addSubview:positioned:relativeTo:", view, -1, 0);
}

- (uint64_t)_invalidateAutoresizingConstraints
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    result = -[UIView _usesAutoresizingConstraints](result);
    if ((_DWORD)result)
    {
      -[UIView _setAutoresizingConstraints:](v1, 0);
      return objc_msgSend(v1, "_setNeedsUpdateConstraints");
    }
  }
  return result;
}

- (void)setAutoresizingMask:(UIViewAutoresizing)autoresizingMask
{
  unint64_t viewFlags;
  uint64_t v4;
  int v5;

  viewFlags = (unint64_t)self->_viewFlags;
  if (((viewFlags >> 18) & 0x3F) != autoresizingMask)
  {
    v4 = *((_QWORD *)&self->_viewFlags + 1);
    v5 = *((_DWORD *)&self->_viewFlags + 4);
    *(_QWORD *)&self->_viewFlags = viewFlags & 0xFFFFFFFFFF03FFFFLL | ((autoresizingMask & 0x3F) << 18);
    *((_QWORD *)&self->_viewFlags + 1) = v4;
    *((_DWORD *)&self->_viewFlags + 4) = v5;
    -[UIView _invalidateAutoresizingConstraints]((uint64_t)self);
  }
}

- (void)_setShouldAdaptToMaterials:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x2000000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFDFFFFFFFFFLL | v3;
}

- (void)setAllowsGroupOpacity:(BOOL)a3
{
  _BOOL8 v3;
  id v4;

  v3 = a3;
  -[UIView layer](self, "layer");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setAllowsGroupOpacity:", v3);

}

- (void)setAllowsGroupBlending:(BOOL)a3
{
  _BOOL8 v3;
  id v4;

  v3 = a3;
  -[UIView layer](self, "layer");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setAllowsGroupBlending:", v3);

}

- (int64_t)_currentUserInterfaceIdiom
{
  void *v3;
  void *v4;
  void *v5;
  int64_t v6;

  -[UIView window](self, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_window");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v3, "screen");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_userInterfaceIdiom");

  return v6;
}

- (void)_setIdleModeLayoutAttributes:(id)a3
{
  objc_setAssociatedObject(self, sel__idleModeLayoutAttributes, a3, (void *)1);
}

- (BOOL)nsli_isRTL
{
  return -[UIView effectiveUserInterfaceLayoutDirection](self, "effectiveUserInterfaceLayoutDirection") == UIUserInterfaceLayoutDirectionRightToLeft;
}

+ (void)_animateWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 factory:(id)a6 animations:(id)a7 completion:(id)a8
{
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, a5, a6, a7, 0, 0, a3, a4, a8);
}

- (BOOL)_hasLayoutArrangements
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 13) & 1;
}

- (void)removeLayoutGuide:(UILayoutGuide *)layoutGuide
{
  UILayoutGuide *v4;
  UILayoutGuide *v5;
  UIView *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = layoutGuide;
  v5 = v4;
  if (v4)
  {
    -[UILayoutGuide owningView](v4, "owningView");
    v6 = (UIView *)objc_claimAutoreleasedReturnValue();

    if (v6 == self)
    {
      if (-[UILayoutGuide _isLockedToOwningView](v5, "_isLockedToOwningView"))
      {
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("You may not remove a system-vended UILayoutGuide from its owning view."));
      }
      else
      {
        -[UIView _mutableLayoutGuides](self, "_mutableLayoutGuides");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[UILayoutGuide _setAllowOwningViewSetting:](v5, "_setAllowOwningViewSetting:", 1);
        -[UILayoutGuide setOwningView:](v5, "setOwningView:", 0);
        -[UIView _layoutEngine](self, "_layoutEngine");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        -[UILayoutGuide _uili_existingObservationEligibleLayoutVariables](v5, "_uili_existingObservationEligibleLayoutVariables", 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v16;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v16 != v12)
                objc_enumerationMutation(v9);
              v14 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v13);
              if (_UIViewAutoLayoutShouldAbandonKVO2())
                objc_msgSend(v8, "stopObservingChangesForVariable:", v14);
              else
                objc_msgSend(v8, "removeObservableForVariable:", v14);
              ++v13;
            }
            while (v11 != v13);
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
          }
          while (v11);
        }

        objc_msgSend(v7, "removeObject:", v5);
      }
    }
  }

}

- (id)_disabledColor
{
  void *v2;
  void *v3;

  -[UIView _inheritedInteractionTintColor](self, "_inheritedInteractionTintColor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIColor _disabledColorForColor:]((uint64_t)UIColor, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)_kb_description
{
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<%@: %p; "), objc_opt_class(), self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _UIViewDescriptionAppendBaseClass(self, v3);
  _UIViewDescriptionAppendFrame(self, v3);
  if (-[UIView isHidden](self, "isHidden"))
    objc_msgSend(v3, "appendFormat:", CFSTR("hidden = YES; "));
  if (!-[UIView isOpaque](self, "isOpaque"))
    objc_msgSend(v3, "appendFormat:", CFSTR("opaque = NO; "));
  if (!-[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled"))
    objc_msgSend(v3, "appendFormat:", CFSTR("userInteractionEnabled = NO; "));
  objc_msgSend(v3, "appendString:", CFSTR(">"));
  return v3;
}

- (BOOL)needsUpdateConstraints
{
  return (*(_QWORD *)&self->_viewFlags & 0x100000000000) == 0;
}

- (CGSize)_systemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5 hasIntentionallyCollapsedHeight:(BOOL *)a6
{
  double height;
  double width;
  UIView *v13;
  int has_internal_diagnostics;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _UIViewFittingSizeTargetInfo *v18;
  UIView *v19;
  UIView *v20;
  NSISEngine *v21;
  double v22;
  double v23;
  NSISEngine *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _BOOL8 v31;
  double v32;
  double v33;
  uint64_t viewFlags;
  uint64_t v35;
  int v36;
  double v37;
  double v38;
  NSObject *v39;
  unint64_t v40;
  NSObject *v41;
  objc_super v42;
  uint64_t v43;
  CGSize result;

  height = a3.height;
  width = a3.width;
  v43 = *MEMORY[0x1E0C80C00];
  if ((-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self) & 1) == 0)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 3210, CFSTR("Improper use of internal layout method with view that does not want auto layout"));
  v13 = -[UIView superview](self, "superview");
  if (!-[UIView _forwardsSystemLayoutFittingSizeToContentView:](v13, "_forwardsSystemLayoutFittingSizeToContentView:", self))v13 = self;
  if ((*((_QWORD *)&v13->_viewFlags + 1) & 4) == 0)
  {
    has_internal_diagnostics = os_variant_has_internal_diagnostics();
    v15 = *((_QWORD *)&self->_viewFlags + 1);
    if (has_internal_diagnostics)
    {
      if ((v15 & 0x2000) != 0)
      {
        v39 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
        {
          LODWORD(v42.receiver) = 138412290;
          *(id *)((char *)&v42.receiver + 4) = NSStringFromSelector(a2);
          _os_log_fault_impl(&dword_185066000, v39, OS_LOG_TYPE_FAULT, "Internal UIKit problem. Unexpected re-entrance in %@", (uint8_t *)&v42, 0xCu);
        }
      }
    }
    else if ((v15 & 0x2000) != 0)
    {
      v40 = qword_1ECD79178;
      if (!qword_1ECD79178)
      {
        v40 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v40, (unint64_t *)&qword_1ECD79178);
      }
      v41 = *(NSObject **)(v40 + 8);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v42.receiver) = 138412290;
        *(id *)((char *)&v42.receiver + 4) = NSStringFromSelector(a2);
        _os_log_impl(&dword_185066000, v41, OS_LOG_TYPE_ERROR, "Internal UIKit problem. Unexpected re-entrance in %@", (uint8_t *)&v42, 0xCu);
      }
    }
    *((_QWORD *)&self->_viewFlags + 1) = (*((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFFFFDFFFLL | (((*(_QWORD *)&self->_viewFlags >> 53) & 1) << 13)) ^ 0x2000;
    -[UIView _updateConstraintsIfNeededWithViewForVariableChangeNotifications:](v13, "_updateConstraintsIfNeededWithViewForVariableChangeNotifications:", self);
    *((_QWORD *)&self->_viewFlags + 1) &= ~0x2000uLL;
  }
  v16 = -[UIView _previousFittingSizeInfo](self, "_previousFittingSizeInfo");
  v17 = objc_msgSend((id)objc_msgSend(v16, "allKeys"), "objectAtIndexedSubscript:", 0);
  v18 = [_UIViewFittingSizeTargetInfo alloc];
  if (v18)
  {
    v42.receiver = v18;
    v42.super_class = (Class)_UIViewFittingSizeTargetInfo;
    v19 = -[UIView init](&v42, sel_init);
    v20 = v19;
    if (v19)
    {
      *(double *)&v19->_constraintsExceptingSubviewAutoresizingConstraints = width;
      *(double *)&v19->_cachedTraitCollection = height;
      *((float *)&v19->super._responderFlags + 1) = a4;
      *(float *)&v19->super.__layeringSceneIdentity = a5;
    }
  }
  else
  {
    v20 = 0;
  }
  v21 = -[UIView _layoutEngine](self, "_layoutEngine");
  v24 = v21;
  if (v16 && v21)
  {
    if ((*((_QWORD *)&self->_viewFlags + 1) & 0x400) == 0
      && (-[UIView isEqualToTargetInfo:](v20, "isEqualToTargetInfo:", v17) & 1) != 0)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "objectForKey:", v17), "objectForKey:", CFSTR("layoutSize")), "CGSizeValue");
      v26 = v25;
      v28 = v27;
      if (a6)
        *a6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "objectForKey:", v17), "objectForKey:", CFSTR("intentionallyCollapsedHeight")), "BOOLValue");
      goto LABEL_35;
    }
    *(float *)&v22 = a4;
    *(float *)&v23 = a5;
    -[UIView _calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:](self, "_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", a6, width, height, v22, v23);
    v26 = v32;
    v28 = v33;
    if (!a6)
      goto LABEL_22;
  }
  else
  {
    *(float *)&v22 = a4;
    *(float *)&v23 = a5;
    -[UIView _calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:](self, "_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", a6, width, height, v22, v23);
    v26 = v29;
    v28 = v30;
    if (!v24)
      goto LABEL_35;
    if (!a6)
    {
LABEL_22:
      v31 = 1;
      goto LABEL_23;
    }
  }
  v31 = *a6;
LABEL_23:
  -[UIView _setPreviousFittingSizeInfo:](self, "_setPreviousFittingSizeInfo:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", _layoutSizeInfo(v31), v20));
  *((_QWORD *)&self->_viewFlags + 1) &= ~0x400uLL;
  -[UIView _resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:](self, "_resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:", v24);
  if (dyld_program_sdk_at_least()
    && -[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints")
    && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    viewFlags = (uint64_t)self->_viewFlags;
    if ((viewFlags & 0x1000000000000) != 0)
    {
      -[UIView _recalculateStrictDescendantNeedsDoubleUpdateConstraints](self, "_recalculateStrictDescendantNeedsDoubleUpdateConstraints");
      viewFlags = (uint64_t)self->_viewFlags;
    }
    v35 = *((_QWORD *)&self->_viewFlags + 1);
    v36 = *((_DWORD *)&self->_viewFlags + 4);
    if ((viewFlags & 0x800000000000) != 0)
    {
      *(_QWORD *)&self->_viewFlags = viewFlags & 0xFFFFDFFFFFFFFFFFLL;
      *((_QWORD *)&self->_viewFlags + 1) = v35;
      *((_DWORD *)&self->_viewFlags + 4) = v36;
      if ((viewFlags & 0x400000000000000) != 0)
        goto LABEL_34;
      if (qword_1ECD791C8 != -1)
        dispatch_once(&qword_1ECD791C8, &__block_literal_global_736);
      if (!byte_1ECD790BA)
LABEL_34:
        -[UIView _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:](self, "_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:", 0);
      else
        -[UIView setNeedsLayout](self, "setNeedsLayout");
    }
  }
LABEL_35:

  if ((*((_QWORD *)&self->_viewFlags + 1) & 4) == 0
    && (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
     && !objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count")
     || -[UIView _usesAutoresizingConstraints]((uint64_t)self)
     && !objc_msgSend((id)-[UIView _autoresizingConstraints](self), "count")))
  {
    -[UIView _setNeedsUpdateConstraints](self, "_setNeedsUpdateConstraints");
  }
  v37 = v26;
  v38 = v28;
  result.height = v38;
  result.width = v37;
  return result;
}

- (BOOL)_forwardsSystemLayoutFittingSizeToContentView:(id)a3
{
  return 0;
}

- (void)_resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:(id)a3
{
  uint64_t v3;

  v3 = objc_msgSend(a3, "delegate");
  if (v3)
    *(_QWORD *)(v3 + 112) &= ~0x800uLL;
}

- (void)_setPreviousFittingSizeInfo:(id)a3
{
  objc_setAssociatedObject(self, &_UIViewFittingSizeInfo, a3, (void *)1);
}

uint64_t __49__UIView__dispatchMotionEffectsVisitorWithDelta___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "_setCountOfMotionEffectsInSubtree:", *(_QWORD *)(a1 + 32) + objc_msgSend(v3, "_countOfMotionEffectsInSubtree"));

  return 1;
}

- (void)_setCountOfMotionEffectsInSubtree:(unint64_t)a3
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_UIViewCountOfMotionEffectsInSubtreeAssocObjectKey, v4, (void *)1);

}

- (BOOL)_subviewPreventsSkipLayout:(id)a3
{
  return objc_msgSend(a3, "translatesAutoresizingMaskIntoConstraints");
}

- (CGPoint)convertPoint:(CGPoint)point toView:(UIView *)view
{
  UIView *v4;
  double y;
  double x;
  void *v8;
  CALayer *layer;
  CALayer *v10;
  CALayer *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGPoint result;

  v4 = view;
  y = point.y;
  x = point.x;
  if (view || (v4 = (UIView *)-[UIView window](self, "window")) != 0)
  {
    -[UIView _window](self, "_window");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _window](v4, "_window");

    if (v4 != self)
    {
      layer = self->_layer;
      v10 = v4->_layer;
      v11 = layer;
      -[CALayer convertPoint:toLayer:](v11, "convertPoint:toLayer:", v10, x, y);
      x = v12;
      y = v13;

    }
  }
  v14 = x;
  v15 = y;
  result.y = v15;
  result.x = v14;
  return result;
}

- (void)setLayoutMargins:(UIEdgeInsets)layoutMargins
{
  *((_DWORD *)&self->_viewFlags + 4) &= ~0x400u;
  -[UIView _setRawLayoutMargins:](self, "_setRawLayoutMargins:", layoutMargins.top, layoutMargins.left, layoutMargins.bottom, layoutMargins.right);
}

- (void)_setSpringLoaded:(void *)a3 interactionInitializer:
{
  id v5;
  void *v6;
  void *v7;
  void (**v8)(void);

  v8 = a3;
  if (a1)
  {
    v5 = a1;
    v6 = v5;
    if (a2)
    {
      if ((objc_msgSend(v5, "isSpringLoaded") & 1) == 0)
      {
        v8[2]();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addInteraction:", v7);

      }
    }
    else
    {
      -[UIView _removeSpringLoadedInteractions](v5);
    }

  }
}

- (void)_removeSpringLoadedInteractions
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(a1, "interactions");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithBlock:", &__block_literal_global_1051);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "filteredArrayUsingPredicate:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(a1, "removeInteraction:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v9++), (_QWORD)v10);
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v7);
    }

  }
}

- (void)setHitTestDirectionalInsets:(NSDirectionalEdgeInsets)a3
{
  id v4;

  if (a3.leading == 0.0 && a3.top == 0.0 && a3.trailing == 0.0 && a3.bottom == 0.0)
  {
    if ((*((_BYTE *)&self->_viewFlags + 20) & 0x80) != 0)
    {
      objc_setAssociatedObject(self, &_UIViewHitTestDirectionalInsetsKey, 0, (void *)1);
      *(_QWORD *)((char *)&self->_viewFlags + 20) &= ~0x80uLL;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithDirectionalEdgeInsets:", a3.top);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(self, &_UIViewHitTestDirectionalInsetsKey, v4, (void *)1);
    *(_QWORD *)((char *)&self->_viewFlags + 20) |= 0x80uLL;

  }
}

- (void)setHitTestInsets:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  _BOOL4 v8;
  double v9;
  double v10;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  v8 = -[UIView _shouldReverseLayoutDirection](self, "_shouldReverseLayoutDirection");
  if (v8)
    v9 = right;
  else
    v9 = left;
  if (v8)
    v10 = left;
  else
    v10 = right;
  -[UIView setHitTestDirectionalInsets:](self, "setHitTestDirectionalInsets:", top, v9, bottom, v10);
}

- (void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis
{
  double v7;
  double v8;
  double v9;
  double v10;

  -[UIView _contentHuggingPriorities](self, "_contentHuggingPriorities");
  v9 = v8;
  v10 = priority;
  if (axis)
  {
    if (v9 == v10)
      return;
    goto LABEL_3;
  }
  if (v7 != v10)
LABEL_3:
    -[UIView _setContentHuggingPriorities:](self, "_setContentHuggingPriorities:");
}

- (UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis
{
  double v4;
  double v5;

  -[UIView _contentHuggingPriorities](self, "_contentHuggingPriorities");
  if (axis)
    return v5;
  return v4;
}

- (id)engine:(id)a3 markerForConstraintToBreakAmongConstraints:(id)a4
{
  unint64_t v5;
  void *v6;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v5 = objc_msgSend(a4, "count", a3);
  if (v5 > 1)
  {
    v8 = v5;
    v6 = (void *)objc_msgSend(a4, "objectAtIndex:", 0);
    v9 = 1;
    while (1)
    {
      v10 = (void *)objc_msgSend(a4, "objectAtIndex:", v9);
      v11 = 0;
      while (1)
      {
        v12 = off_1E16E9B80[v11];
        v13 = ((uint64_t (*)(void *))v12)(v6);
        v14 = ((uint64_t (*)(void *))v12)(v10);
        v15 = v13 < v14 ? -1 : v13 != v14;
        if (v15)
          break;
        if (++v11 == 8)
        {
          if (v6)
          {
            v16 = (void *)objc_msgSend((id)objc_msgSend(v6, "firstItem"), "_referenceView");
            if (v10)
              goto LABEL_13;
LABEL_25:
            v17 = 0;
          }
          else
          {
            v16 = 0;
            if (!v10)
              goto LABEL_25;
LABEL_13:
            v17 = (void *)objc_msgSend((id)objc_msgSend(v10, "firstItem"), "_referenceView");
          }
          v15 = CompareViewHierarchyPosition(v16, v17);
          break;
        }
      }
      if (v15)
        goto LABEL_20;
      if (v6)
      {
        v18 = (void *)objc_msgSend((id)objc_msgSend(v6, "secondItem"), "_referenceView");
        if (!v10)
          goto LABEL_27;
      }
      else
      {
        v18 = 0;
        if (!v10)
        {
LABEL_27:
          v19 = 0;
          goto LABEL_19;
        }
      }
      v19 = (void *)objc_msgSend((id)objc_msgSend(v10, "secondItem"), "_referenceView");
LABEL_19:
      v15 = CompareViewHierarchyPosition(v18, v19);
LABEL_20:
      if (v15 == -1)
        v6 = v10;
      if (++v9 == v8)
        return (id)objc_msgSend(v6, "_markerAndPositiveExtraVar");
    }
  }
  v6 = (void *)objc_msgSend(a4, "lastObject");
  return (id)objc_msgSend(v6, "_markerAndPositiveExtraVar");
}

+ (void)_performBlockDelayingTriggeringResponderEvents:(void *)a3 forScene:
{
  id v4;
  void (**v5)(_QWORD);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v4 = a3;
  v5 = a2;
  objc_opt_self();
  objc_msgSend(v4, "keyboardSceneDelegate");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)UIApp, "keyWindow");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "firstResponder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "setAutomaticAppearanceInternalEnabled:", 0);
  objc_opt_self();
  ++__disablePromoteDescendantToFirstResponderCount;
  v5[2](v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_self();
  if (__disablePromoteDescendantToFirstResponderCount)
    --__disablePromoteDescendantToFirstResponderCount;
  objc_msgSend(v13, "setAutomaticAppearanceInternalEnabled:", 1);
  objc_msgSend((id)UIApp, "keyWindow");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "firstResponder");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8
    || __disablePromoteDescendantToFirstResponderCount
    || (objc_msgSend(v8, "_promoteSelfOrDescendantToFirstResponderIfNecessary"),
        objc_msgSend((id)UIApp, "keyWindow"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v11, "firstResponder"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v12,
        v11,
        v10 == v12))
  {
    if (v7 != v10 && (objc_msgSend(v13, "_isPreservedRestorableResponder:", v10) & 1) == 0)
      objc_msgSend(v13, "_reloadInputViewsForResponder:", v10);
  }

}

- (void)insertSubview:(UIView *)view belowSubview:(UIView *)siblingSubview
{
  -[UIView _addSubview:positioned:relativeTo:](self, "_addSubview:positioned:relativeTo:", view, -3, siblingSubview);
}

- (void)__setViewDelegate:(_QWORD *)a1
{
  id v3;
  void *v4;
  id v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  void *v12;
  int v13;
  id v14;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v14 = v3;
    if (v3)
    {
      v5 = (id)a1[12];
      if (v5)
        v6 = v5 == v3;
      else
        v6 = 1;
      if (!v6)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("A view can only be associated with at most one view controller at a time! View %@ is associated with %@. Clear this association before associating this view with %@."), a1, v5, v3);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("UIViewControllerHierarchyInconsistency"), CFSTR("%@"), v7);

        v4 = v14;
      }
    }
    a1[12] = v4;
    -[UIView _updateAutogeneratedNameForLayerIfNeeded]((uint64_t)a1);
    v8 = objc_msgSend(a1, "methodForSelector:", sel_layoutSubviews);
    if (v8 != qword_1EDDCA7A8)
    {
      v9 = 0;
      v10 = (_QWORD *)((char *)a1 + 124);
      v11 = *(_QWORD *)((char *)a1 + 124);
      v4 = v14;
LABEL_15:
      *v10 = v9 | v11 & 0xFFFFFFFFBFFFFFFFLL;
      goto LABEL_16;
    }
    v12 = (void *)a1[12];
    if (v12)
    {
      v13 = objc_msgSend(v12, "_allowsSkippingLayout");
      v10 = (_QWORD *)((char *)a1 + 124);
      v11 = *(_QWORD *)((char *)a1 + 124);
      v4 = v14;
      if (!v13)
      {
        v9 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      v10 = (_QWORD *)((char *)a1 + 124);
      v11 = *(_QWORD *)((char *)a1 + 124);
      v4 = v14;
    }
    v9 = 0x40000000;
    goto LABEL_15;
  }
LABEL_16:

}

- (void)setHoverStyle:(UIHoverStyle *)hoverStyle
{
  UIHoverStyle *v5;
  UIView *v6;

  v5 = hoverStyle;
  v6 = self;
  UIView.hoverStyle.setter((char *)hoverStyle);

}

- (void)_setHoverStyleStorage:(void *)a1
{
  if (a1)
    objc_setAssociatedObject(a1, &_UIHoverStyleStorageKey, value, (void *)1);
}

- (void)insertSubview:(id)a3 above:(id)a4
{
  -[UIView _addSubview:positioned:relativeTo:](self, "_addSubview:positioned:relativeTo:", a3, -2, a4);
}

+ (BOOL)_addCompletion:(id)a3
{
  BOOL result;

  result = __currentViewAnimationState;
  if (__currentViewAnimationState)
    return objc_msgSend((id)__currentViewAnimationState, "_addCompletion:", a3);
  return result;
}

- (void)_mt_setCaptureGroupName:(uint64_t *)a1
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1[22];
    v5 = v4 ? *(void **)(v4 + 48) : 0;
    if ((objc_msgSend(v5, "isEqualToString:", a2) & 1) == 0)
    {
      -[_UICollectionLayoutItemSolver setSolveResult:](a1[22], a2);
      v6 = a1[22];
      if (v6)
      {
        v7 = *(void **)(v6 + 40);
        if (v7)
        {
          v8 = *(id *)(v6 + 48);
          objc_msgSend(v7, "_setCaptureGroupName:", v8);

        }
      }
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      objc_msgSend(a1, "subviews", 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v15;
        do
        {
          v13 = 0;
          do
          {
            if (*(_QWORD *)v15 != v12)
              objc_enumerationMutation(v9);
            -[UIView _updateCaptureGroupRecursively](*(void **)(*((_QWORD *)&v14 + 1) + 8 * v13++));
          }
          while (v11 != v13);
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        }
        while (v11);
      }

    }
  }
}

- (void)_updateCaptureGroupRecursively
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    -[UIView _updateAutomaticCaptureGroupIfNecessary]();
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    objc_msgSend(a1, "subviews", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v2);
          -[UIView _updateCaptureGroupRecursively](*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v4);
    }

  }
}

- (void)_setBackgroundMergeBehavior:(int64_t)a3
{
  unint64_t v3;

  v3 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  if (((v3 >> 45) & 3) != a3)
  {
    *(_QWORD *)((char *)&self->_viewFlags + 20) = v3 & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(a3 & 3) << 45);
    -[UIView _updateCaptureGroupRecursively](self);
  }
}

- (void)_observeScrollViewDidScroll:(id)a3
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;

  if (self && (*((_QWORD *)&self->_viewFlags + 1) & 0x1000000) != 0 && !-[UIView isHidden](self, "isHidden", a3))
  {
    -[UIView _anyBackdropMaskView](self);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    -[UIView bounds](self, "bounds");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
    objc_msgSend(v21, "superview");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView convertRect:toView:](self, "convertRect:toView:", v12, v5, v7, v9, v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    -[UIView _setFrameForBackdropMaskViews:convertFrame:](self, 0, v14, v16, v18, v20);
  }
}

- (id)nsli_description
{
  id result;

  result = -[UIView _layoutDescriptionIfDifferentFromDefault](self, "_layoutDescriptionIfDifferentFromDefault");
  if (!result)
    return -[UIView _defaultLayoutDescription](self, "_defaultLayoutDescription");
  return result;
}

- (id)_layoutDescriptionIfDifferentFromDefault
{
  return (id)_truncatedDebuggingDescriptionForLayout(-[UIView _layoutDebuggingIdentifier](self, "_layoutDebuggingIdentifier"));
}

- (id)_defaultLayoutDescription
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = (id)-[UIView reuseIdentifier](self, "reuseIdentifier");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  if (!objc_msgSend(v3, "length") && os_variant_has_internal_diagnostics())
  {
    if (qword_1ECD79140 != -1)
      dispatch_once(&qword_1ECD79140, &__block_literal_global_62_0);
    if (byte_1ECD790B8)
      v3 = -[UIView _layoutDebuggingTitle](self, "_layoutDebuggingTitle");
  }
  v4 = (void *)_truncatedDebuggingDescriptionForLayout(v3);
  v5 = objc_msgSend(v4, "length");
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = objc_opt_class();
  if (v5)
    return (id)objc_msgSend(v6, "stringWithFormat:", CFSTR("%@:%p'%@'"), v7, self, v4);
  else
    return (id)objc_msgSend(v6, "stringWithFormat:", CFSTR("%@:%p"), v7, self, v9);
}

- (id)_layoutDebuggingTitle
{
  void *v3;

  if ((objc_opt_respondsToSelector() & 1) == 0)
    return 0;
  v3 = (void *)-[UIView title](self, "title");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v3;
  else
    return 0;
}

- (NSString)_layoutDebuggingIdentifier
{
  if ((*((_BYTE *)&self->_viewFlags + 21) & 1) != 0)
    objc_getAssociatedObject(self, &_UIViewLayoutDebuggingIdentifierKey);
  else
    -[NSObject accessibilityIdentifier](self, "accessibilityIdentifier");
  return (NSString *)(id)objc_claimAutoreleasedReturnValue();
}

- (_UIFocusSystemSceneComponent)_focusSystemSceneComponent
{
  return (_UIFocusSystemSceneComponent *)+[_UIFocusSystemSceneComponent sceneComponentForEnvironment:](_UIFocusSystemSceneComponent, "sceneComponentForEnvironment:", self);
}

- (BOOL)_shouldAnimatePropertyAdditivelyWithKey:(id)a3
{
  id v4;
  void *v5;
  char isAdditivelyAnimatableKeyForLayer;

  v4 = a3;
  -[UIView layer](self, "layer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  isAdditivelyAnimatableKeyForLayer = _isAdditivelyAnimatableKeyForLayer(v4, v5);

  return isAdditivelyAnimatableKeyForLayer;
}

- (BOOL)_applyKeyPathsAndRelativeValues:(id)a3 forMotionEffect:(id)a4
{
  return 0;
}

- (int64_t)_keyboardOrientation
{
  void *v2;
  void *v3;
  uint64_t v4;
  int64_t v5;

  -[UIView _window](self, "_window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "rootViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "shouldAutorotate") && (objc_opt_respondsToSelector() & 1) != 0)
    v4 = objc_msgSend(v3, "keyboardOrientation");
  else
    v4 = +[UIKeyboardSceneDelegate interfaceOrientation](UIKeyboardSceneDelegate, "interfaceOrientation");
  v5 = v4;

  return v5;
}

- (BOOL)_shouldApplyExclusiveTouch
{
  return -[UIView isExclusiveTouch](self, "isExclusiveTouch")
      || -[UIView _isInExclusiveTouchSubviewTree](self, "_isInExclusiveTouchSubviewTree");
}

- (BOOL)isExclusiveTouch
{
  return (*(_QWORD *)&self->_viewFlags >> 30) & 1;
}

- (BOOL)_isInExclusiveTouchSubviewTree
{
  UIView *v2;

  if (self)
  {
    v2 = self;
    while (!-[UIView _appliesExclusiveTouchToSubviewTree](v2, "_appliesExclusiveTouchToSubviewTree")
         || !-[UIView isExclusiveTouch](v2, "isExclusiveTouch"))
    {
      self = (UIView *)-[UIView superview](v2, "superview");
      v2 = self;
      if (!self)
        return (char)self;
    }
    LOBYTE(self) = 1;
  }
  return (char)self;
}

- (BOOL)_appliesExclusiveTouchToSubviewTree
{
  return 0;
}

- (void)_notifyGeometryObserversWithChangeInfo:(uint64_t)a1
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1 && (objc_msgSend((id)a1, "_disableGeometryObserverNotification") & 1) == 0)
  {
    v4 = *(_DWORD *)(a1 + 120) & 0x3CLL;
    if ((*(_QWORD *)(a1 + 112) & 0x8000000000000000) != 0)
    {
      objc_getAssociatedObject((id)a1, &_UIGeometryObserversKey);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v6 = (void *)objc_msgSend(v5, "copy", 0);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v13;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v13 != v9)
              objc_enumerationMutation(v6);
            v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
            objc_msgSend(v11, "_geometryChanged:forAncestor:", a2, a1);
            if (_IsKindOfUIView((uint64_t)v11))
              -[UIView _notifyBoundingPathChangeObserversWithChangeInfo:forAncestor:](v11, a2, a1);
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        }
        while (v8);
      }

    }
    if (v4)
    {
      objc_msgSend((id)a1, "_geometryChanged:forAncestor:", a2, 0);
      -[UIView _notifyBoundingPathChangeObserversWithChangeInfo:forAncestor:]((void *)a1, a2, 0);
    }
  }
}

- (void)_notifyBoundingPathChangeObserversWithChangeInfo:(uint64_t)a3 forAncestor:
{
  void *v6;
  void *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1 && *a2 != 128)
  {
    objc_getAssociatedObject(a1, &_UIBoundingPathChangeObserversKey);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = !a3 && (unint64_t)(*a2 == 4);
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v14;
        do
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v14 != v11)
              objc_enumerationMutation(v7);
            objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v12++), "_boundingPathMayHaveChangedForView:relativeToBoundsOriginOnly:", a1, v8);
          }
          while (v10 != v12);
          v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        }
        while (v10);
      }
    }

  }
}

- (BOOL)_disableGeometryObserverNotification
{
  return 0;
}

- (void)updateFocusIfNeeded
{
  id v2;

  -[UIView _focusSystem](self, "_focusSystem");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateFocusIfNeeded");

}

- (void)_backing_insertSubview:(_QWORD *)a3 aboveSubview:
{
  void *v4;
  void *v5;
  id v6;

  if (a1)
  {
    v4 = *(void **)(a1 + 168);
    -[UIView _backing_outermostLayer](a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[UIView _backing_outermostLayer](a3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "insertSublayer:above:", v6, v5);

  }
}

- (double)_touchSloppinessFactor
{
  void *v2;
  void *v3;
  double v4;
  double v5;

  -[UIView window](self, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "_touchSloppinessFactor");
    v5 = v4;
  }
  else
  {
    v5 = 1.0;
  }

  return v5;
}

- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority
{
  double height;
  double width;
  double v10;
  double v11;
  double v12;
  double v13;
  CGSize result;

  height = targetSize.height;
  width = targetSize.width;
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self))
  {
    *(UILayoutPriority *)&v10 = horizontalFittingPriority;
    *(UILayoutPriority *)&v11 = verticalFittingPriority;
    -[UIView _systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:](self, "_systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", 0, width, height, v10, v11);
  }
  else
  {
    -[UIView sizeThatFits:](self, "sizeThatFits:", width, height);
  }
  result.height = v13;
  result.width = v12;
  return result;
}

- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGSize result;

  LODWORD(v3) = 1112014848;
  LODWORD(v4) = 1112014848;
  -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:](self, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", targetSize.width, targetSize.height, v3, v4);
  result.height = v6;
  result.width = v5;
  return result;
}

- (void)setEdgesPreservingSuperviewLayoutMargins:(unint64_t)a3
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  unint64_t v4;
  uint64_t v5;

  p_viewFlags = &self->_viewFlags;
  v4 = *((_QWORD *)&self->_viewFlags + 1);
  if ((((v4 >> 53) ^ a3) & 0xF) != 0)
  {
    v5 = *(_QWORD *)p_viewFlags;
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4);
    *(_QWORD *)p_viewFlags = v5;
    *((_QWORD *)&self->_viewFlags + 1) = v4 & 0xFE1FFFFFFFFFFFFFLL | ((a3 & 0xF) << 53);
    -[UIView _updateInferredLayoutMargins](self, "_updateInferredLayoutMargins");
  }
}

- (void)setEdgesInsettingLayoutMarginsFromSafeArea:(unint64_t)a3
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  unint64_t v4;
  uint64_t v5;

  p_viewFlags = &self->_viewFlags;
  v4 = *((_QWORD *)&self->_viewFlags + 1);
  if ((((v4 >> 57) ^ a3) & 0xF) != 0)
  {
    v5 = *(_QWORD *)p_viewFlags;
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4);
    *(_QWORD *)p_viewFlags = v5;
    *((_QWORD *)&self->_viewFlags + 1) = v4 & 0xE1FFFFFFFFFFFFFFLL | ((a3 & 0xF) << 57);
    -[UIView _updateInferredLayoutMargins](self, "_updateInferredLayoutMargins");
  }
}

- (void)_updateNeedsDisplayOnBoundsChange
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, "_canDrawContent"))
      v2 = (*((_QWORD *)v1 + 13) >> 37) & 1;
    else
      v2 = (*((_QWORD *)v1 + 13) & 0x2000040) == 64;
    return (void *)objc_msgSend(*((id *)v1 + 21), "setNeedsDisplayOnBoundsChange:", v2);
  }
  return result;
}

- (void)setNeedsDisplayOnBoundsChange:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x2000000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFDFFFFFFFFFLL | v3;
  -[UIView _updateNeedsDisplayOnBoundsChange](self);
}

- (void)_setAppearanceIsInvalid:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x20000000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFDFFFFFFFFFFLL | v3;
}

- (_DWORD)_traitOverridesIfExist
{
  if (a1)
  {
    if ((a1[30] & 0x100) == 0)
      return 0;
    objc_getAssociatedObject(a1, &_UIViewTraitOverridesKey);
    a1 = (_DWORD *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (void)_invalidateTraitCollectionAndSchedulePropagationForSubviews
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (qword_1EDDCA898 != -1)
      dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
    if (byte_1EDDCA61D)
    {
      v9 = 0u;
      v10 = 0u;
      v7 = 0u;
      v8 = 0u;
      objc_msgSend(a1, "_allSubviews", 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v8;
        do
        {
          for (i = 0; i != v4; ++i)
          {
            if (*(_QWORD *)v8 != v5)
              objc_enumerationMutation(v2);
            _UIViewInvalidateTraitCollectionAndSchedulePropagation(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i), 1);
          }
          v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        }
        while (v4);
      }

    }
  }
}

- (id)_velocityForKey:(id)a3
{
  return -[UIView _velocityForKey:target:]((id *)&self->super.super.isa, a3, 0);
}

- (BOOL)_isInTransitionBlock
{
  return __currentViewAnimationState && *(_QWORD *)(__currentViewAnimationState + 112) == (_QWORD)self;
}

- (double)_widthForButtonBarItemLayout
{
  double result;

  -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
  return result;
}

- (void)_hasSpringLoadedInteractions
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    objc_msgSend(result, "interactions");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "indexOfObjectPassingTest:", &__block_literal_global_1054_1);

    return (void *)(v2 != 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

- (id)registerForTraitChanges:(id)a3 withHandler:(id)a4
{
  id v6;
  void *v7;
  void *v8;

  v6 = a4;
  +[UITraitCollection _traitTokensIncludingPlaceholdersForTraits:]((uint64_t)UITraitCollection, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _registerForTraitTokenChanges:withHandler:](self, "_registerForTraitTokenChanges:withHandler:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)_removeGeometryChangeObserver:(_QWORD *)a1
{
  id v3;
  NSMapTable *v4;
  void *v5;
  uint64_t v6;
  void *key;

  v3 = a2;
  if (a1 && (a1[14] & 0x8000000000000000) != 0)
  {
    key = v3;
    objc_getAssociatedObject(a1, &_UIGeometryObserversKey);
    v4 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "superview");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _removeGeometryChangeObserver:](v5, key);

    v6 = (uint64_t)NSMapGet(v4, key);
    if (v6 < 2)
      NSMapRemove(v4, key);
    else
      NSMapInsert(v4, key, (const void *)(v6 - 1));
    if (!-[NSMapTable count](v4, "count"))
    {
      objc_setAssociatedObject(a1, &_UIGeometryObserversKey, 0, (void *)1);
      a1[14] &= ~0x8000000000000000;
    }

    v3 = key;
  }

}

- (void)_clearBecomeFirstResponderWhenCapableOnSubtree
{
  if (a1)
    return (void *)objc_msgSend(a1, "_makeSubtreePerformSelector:withObject:", sel__clearBecomeFirstResponderWhenCapable, 0);
  return a1;
}

- (CGSize)_layoutSizeThatFits:(CGSize)a3 fixedAxes:(unint64_t)a4
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGSize result;

  -[UIView frameForAlignmentRect:](self, "frameForAlignmentRect:", a4, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), a3.width, a3.height);
  v6 = v5;
  v8 = v7;
  -[UIView sizeThatFits:](self, "sizeThatFits:", v9, v10);
  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:", v6, v8, v11, v12);
  v14 = v13;
  v16 = v15;
  result.height = v16;
  result.width = v14;
  return result;
}

- (CGRect)frameForAlignmentRect:(CGRect)alignmentRect
{
  double height;
  double width;
  double y;
  double x;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  height = alignmentRect.size.height;
  width = alignmentRect.size.width;
  y = alignmentRect.origin.y;
  x = alignmentRect.origin.x;
  -[UIView alignmentRectInsets](self, "alignmentRectInsets");
  v9 = -v8;
  v11 = y - v10;
  v13 = width - (-v7 - v12);
  v14 = height - (v9 - v10);
  v15 = x - v12;
  v16 = v11;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v16;
  result.origin.x = v15;
  return result;
}

- (uint64_t)_needsDoubleUpdateConstraintsPassMayHaveChangedFrom:(uint64_t)result
{
  void *v3;
  uint64_t v4;
  int v5;

  if (result)
  {
    v3 = (void *)result;
    if (!objc_msgSend((id)result, "_needsDoubleUpdateConstraintsPass") || (a2 & 1) != 0)
    {
      result = objc_msgSend(v3, "_needsDoubleUpdateConstraintsPass");
      if ((result & 1) == 0)
      {
        if (a2)
        {
          objc_msgSend(v3, "_resetToBeginningOfDoublePass");
          for (result = objc_msgSend(v3, "superview"); result; result = objc_msgSend((id)result, "superview"))
          {
            if ((*(_QWORD *)(result + 104) & 0x1000000000000) != 0)
              break;
            v4 = *(_QWORD *)(result + 112);
            v5 = *(_DWORD *)(result + 120);
            *(_QWORD *)(result + 104) |= 0x1000000000000uLL;
            *(_QWORD *)(result + 112) = v4;
            *(_DWORD *)(result + 120) = v5;
          }
        }
      }
    }
    else
    {
      return -[UIView _informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass]((uint64_t)v3);
    }
  }
  return result;
}

- (uint64_t)_informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass
{
  uint64_t v1;
  int v2;

  if (result)
  {
    for (result = objc_msgSend((id)result, "superview"); result; result = objc_msgSend((id)result, "superview"))
    {
      if ((*(_QWORD *)(result + 104) & 0x1800000000000) == 0x800000000000)
        break;
      v1 = *(_QWORD *)(result + 112);
      v2 = *(_DWORD *)(result + 120);
      *(_QWORD *)(result + 104) = *(_QWORD *)(result + 104) & 0xFFFE7FFFFFFFFFFFLL | 0x800000000000;
      *(_QWORD *)(result + 112) = v1;
      *(_DWORD *)(result + 120) = v2;
    }
  }
  return result;
}

- (BOOL)_is_needsLayout
{
  return (*(_QWORD *)&self->_viewFlags & 0x40000000000000) == 0;
}

- (void)removeInteraction:(id)interaction
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = interaction;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 19846, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("interaction"));

    v5 = 0;
  }
  if ((*((_BYTE *)&self->_viewFlags + 20) & 0x40) != 0)
  {
    v9 = v5;
    objc_getAssociatedObject(self, &_UIViewInteractionsKey);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "indexOfObjectIdenticalTo:", v9);
    if (v7 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v6, "removeObjectAtIndex:", v7);
      _setInteractionView(v9, 0);
    }

    v5 = v9;
  }

}

- (void)setAccessibilityIgnoresInvertColors:(BOOL)accessibilityIgnoresInvertColors
{
  int v3;

  if (accessibilityIgnoresInvertColors)
    v3 = 0x400000;
  else
    v3 = 0;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFBFFFFF | v3;
}

- (void)updateConstraintsIfNeeded
{
  -[UIView _updateConstraintsIfNeededWithViewForVariableChangeNotifications:](self, "_updateConstraintsIfNeededWithViewForVariableChangeNotifications:", self);
}

- (void)setLayoutMarginsFollowReadableWidth:(BOOL)a3
{
  _BOOL4 v3;
  BOOL v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id location;

  v3 = a3;
  v5 = -[UIView layoutMarginsFollowReadableWidth](self, "layoutMarginsFollowReadableWidth");
  if (v3)
  {
    if (v5)
      return;
    objc_initWeak(&location, self);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = UIApp;
    objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __46__UIView_setLayoutMarginsFollowReadableWidth___block_invoke;
    v13 = &unk_1E16B22E0;
    objc_copyWeak(&v14, &location);
    objc_msgSend(v6, "addObserverForName:object:queue:usingBlock:", CFSTR("UIContentSizeCategoryDidChangeNotification"), v7, v8, &v10);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _setContentSizeNotificationToken:](self, "_setContentSizeNotificationToken:", v9, v10, v11, v12, v13);

    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);
  }
  else
  {
    if (!v5)
      return;
    -[UIView _setContentSizeNotificationToken:](self, "_setContentSizeNotificationToken:", 0);
  }
  if (self)
    -[UIView _updateInferredLayoutMargins](self, "_updateInferredLayoutMargins");
}

- (void)_setContentSizeNotificationToken:(id)a3
{
  id v4;
  void *v5;
  id value;

  value = a3;
  -[UIView _contentSizeNotificationToken](self, "_contentSizeNotificationToken");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4 != value)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "removeObserver:", v4);

    }
    objc_setAssociatedObject(self, &_UIViewContentSizeNotificationTokenKey, value, (void *)1);
    *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFEFFFLL | ((unint64_t)(value != 0) << 12);
  }

}

- (id)_contentSizeNotificationToken
{
  if ((*((_BYTE *)&self->_viewFlags + 21) & 0x10) == 0)
    return 0;
  objc_getAssociatedObject(self, &_UIViewContentSizeNotificationTokenKey);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)setInsetsLayoutMarginsFromSafeArea:(BOOL)insetsLayoutMarginsFromSafeArea
{
  uint64_t v3;

  if (insetsLayoutMarginsFromSafeArea)
    v3 = 15;
  else
    v3 = 0;
  -[UIView setEdgesInsettingLayoutMarginsFromSafeArea:](self, "setEdgesInsettingLayoutMarginsFromSafeArea:", v3);
}

- (void)layerWillDraw:(id)a3
{
  id v4;
  unint64_t v5;
  id v6;
  id v7;

  v7 = a3;
  if (-[UIView _needsContentsFormatUpdate](self, "_needsContentsFormatUpdate"))
  {
    if (self)
    {
      -[UIView _wantsDeepDrawing](self, "_wantsDeepDrawing");
      os_variant_has_internal_diagnostics();
      if ((*(_QWORD *)((char *)&self->_viewFlags + 20) & 7) != 4)
        *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFFF8 | 4;
      v4 = v7;
      if (v4)
      {
        v5 = *(_QWORD *)((char *)&self->_viewFlags + 20) & 7;
        if (v5 <= 4)
          objc_msgSend(v4, "setContentsFormat:", **((_QWORD **)&unk_1E16EC088 + v5));
      }
    }
    else
    {
      v6 = v7;
    }

    -[UIView _setNeedsContentsFormatUpdate:](self, "_setNeedsContentsFormatUpdate:", 0);
  }

}

- (BOOL)_needsContentsFormatUpdate
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 21) & 1;
}

- (BOOL)_wantsDeepDrawing
{
  void *v3;
  uint64_t v4;
  void *v5;

  -[UIView traitCollection](self, "traitCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "displayGamut");

  if (v4 == -1)
  {
    -[UIView _screen](self, "_screen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "gamut");

  }
  return -[UIView wantsDeepColorDrawing](self, "wantsDeepColorDrawing")
      && (unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFFDLL
      && -[UIView _canDrawContent](self, "_canDrawContent");
}

- (BOOL)wantsDeepColorDrawing
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 29) & 1;
}

uint64_t __41__UIView__removeSpringLoadedInteractions__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (CGRect)_frameIgnoringLayerTransform
{
  CALayer *layer;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CATransform3D v20;
  CATransform3D v21;
  CGRect result;

  memset(&v21, 0, sizeof(v21));
  layer = self->_layer;
  if (layer)
    -[CALayer transform](layer, "transform");
  else
    memset(&v21, 0, sizeof(v21));
  v20 = v21;
  if (CATransform3DIsIdentity(&v20))
  {
    -[UIView frame](self, "frame");
    v7 = v6;
    v9 = v8;
  }
  else
  {
    -[UIView bounds](self, "bounds");
    v7 = v10;
    v9 = v11;
    -[UIView center](self, "center");
    v13 = v12;
    v15 = v14;
    -[CALayer anchorPoint](self->_layer, "anchorPoint");
    v4 = v13 - v7 * v16;
    v5 = v15 - v9 * v17;
  }
  v18 = v7;
  v19 = v9;
  result.size.height = v19;
  result.size.width = v18;
  result.origin.y = v5;
  result.origin.x = v4;
  return result;
}

- (void)_setFrameIgnoringLayerTransform:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  CALayer *layer;
  double v9;
  double v10;
  double v11;
  double v12;
  double MinX;
  double v14;
  double MinY;
  CATransform3D v16;
  CATransform3D v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  memset(&v17, 0, sizeof(v17));
  layer = self->_layer;
  if (layer)
    -[CALayer transform](layer, "transform");
  else
    memset(&v17, 0, sizeof(v17));
  v16 = v17;
  if (CATransform3DIsIdentity(&v16))
  {
    -[UIView setFrame:](self, "setFrame:", x, y, width, height);
  }
  else
  {
    -[CALayer anchorPoint](self->_layer, "anchorPoint");
    v10 = v9;
    v12 = v11;
    v18.origin.x = x;
    v18.origin.y = y;
    v18.size.width = width;
    v18.size.height = height;
    MinX = CGRectGetMinX(v18);
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = width;
    v19.size.height = height;
    v14 = MinX + v10 * CGRectGetWidth(v19);
    v20.origin.x = x;
    v20.origin.y = y;
    v20.size.width = width;
    v20.size.height = height;
    MinY = CGRectGetMinY(v20);
    v21.origin.x = x;
    v21.origin.y = y;
    v21.size.width = width;
    v21.size.height = height;
    -[UIView setCenter:](self, "setCenter:", v14, MinY + v12 * CGRectGetHeight(v21));
    -[UIView bounds](self, "bounds");
    -[UIView setBounds:](self, "setBounds:");
  }
}

- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
{
  return 1;
}

- (uint64_t)_areAccessibilityButtonShapesEnabled
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    result = _AXSButtonShapesEnabled();
    if ((_DWORD)result)
      return objc_msgSend((id)objc_msgSend(v1, "_screen"), "_userInterfaceIdiom") != 3;
  }
  return result;
}

- (void)setMinimumContentSizeCategory:(UIContentSizeCategory)minimumContentSizeCategory
{
  NSString *v4;
  _BOOL4 v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  id value;

  v4 = minimumContentSizeCategory;
  if (-[NSString length](v4, "length"))
  {
    v5 = -[NSString isEqualToString:](v4, "isEqualToString:", CFSTR("_UICTContentSizeCategoryUnspecified"));

    if (!v5)
      goto LABEL_6;
  }
  else
  {

  }
  v4 = 0;
LABEL_6:
  -[UIView _maximumContentSizeCategory](self, "_maximumContentSizeCategory");
  v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v4 && v6 && UIContentSizeCategoryCompareToCategory(v6, v4) == NSOrderedAscending)
  {
    v8 = v7;

    v4 = v8;
  }
  -[UIView _minimumContentSizeCategory](self, "_minimumContentSizeCategory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  value = v4;
  v10 = v9;
  if (value == v10)
  {

  }
  else
  {
    v11 = v10;
    if (value && v10)
    {
      v12 = objc_msgSend(value, "isEqual:", v10);

      if ((v12 & 1) != 0)
        goto LABEL_18;
    }
    else
    {

    }
    objc_setAssociatedObject(self, &_MergedGlobals_954, value, (void *)3);
    *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFF7FFFFFFFFFLL | ((unint64_t)(((unint64_t)value | (unint64_t)v7) != 0) << 39);
    -[UIView _contentSizeCategoryLimitsDidChange](self, "_contentSizeCategoryLimitsDidChange");
  }
LABEL_18:

}

- (void)setMaximumContentSizeCategory:(UIContentSizeCategory)maximumContentSizeCategory
{
  unint64_t v4;
  _BOOL4 v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  void *v9;
  unint64_t v10;
  id v11;
  void *v12;
  char v13;
  int v14;
  void *v15;
  NSString *v16;
  char v17;
  NSString *v18;
  NSString *value;

  v4 = maximumContentSizeCategory;
  if (objc_msgSend((id)v4, "length"))
  {
    v5 = objc_msgSend((id)v4, "isEqualToString:", CFSTR("_UICTContentSizeCategoryUnspecified"));

    if (!v5)
      goto LABEL_6;
  }
  else
  {

  }
  v4 = 0;
LABEL_6:
  -[UIView _minimumContentSizeCategory](self, "_minimumContentSizeCategory");
  v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v4 && v6 && UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)v4, v6) == NSOrderedAscending)
  {
    v8 = (NSString *)(id)v4;

    v7 = v8;
  }
  -[UIView _minimumContentSizeCategory](self, "_minimumContentSizeCategory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v7;
  v11 = v9;
  if ((id)v10 == v11)
  {

    goto LABEL_16;
  }
  v12 = v11;
  if (v10 && v11)
  {
    v13 = objc_msgSend((id)v10, "isEqual:", v11);

    if ((v13 & 1) == 0)
      goto LABEL_18;
LABEL_16:
    v14 = 0;
    goto LABEL_19;
  }

LABEL_18:
  objc_setAssociatedObject(self, &_MergedGlobals_954, (id)v10, (void *)3);
  v14 = 1;
LABEL_19:
  -[UIView _maximumContentSizeCategory](self, "_maximumContentSizeCategory");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  value = (NSString *)(id)v4;
  v16 = v15;
  if (value == v16)
  {

    goto LABEL_25;
  }
  if (v4 && v16)
  {
    v17 = -[NSString isEqual:](value, "isEqual:", v16);

    v18 = value;
    if ((v17 & 1) == 0)
      goto LABEL_28;
LABEL_25:
    if (!v14)
      goto LABEL_30;
    goto LABEL_29;
  }

  v18 = value;
LABEL_28:
  objc_setAssociatedObject(self, &unk_1ECD7CC58, v18, (void *)3);
LABEL_29:
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFF7FFFFFFFFFLL | ((unint64_t)((v4 | v10) != 0) << 39);
  -[UIView _contentSizeCategoryLimitsDidChange](self, "_contentSizeCategoryLimitsDidChange", v18);
LABEL_30:

}

- (UIContentSizeCategory)minimumContentSizeCategory
{
  if ((*(_QWORD *)&self->_viewFlags & 0x8000000000) == 0)
    return (UIContentSizeCategory)0;
  objc_getAssociatedObject(self, &_MergedGlobals_954);
  return (UIContentSizeCategory)(id)objc_claimAutoreleasedReturnValue();
}

- (id)_limitedContentSizeCategoryWithBaseValue:(void *)a1
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = v3;
    objc_msgSend(a1, "_minimumContentSizeCategory");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "_maximumContentSizeCategory");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6
      && UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)v6, (UIContentSizeCategory)v5) == NSOrderedDescending)
    {
      v8 = v6;

      v5 = v8;
    }
    if (v7
      && UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)v7, (UIContentSizeCategory)v5) == NSOrderedAscending)
    {
      v9 = v7;

      v5 = v9;
    }
    v10 = v5;

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (UIContentSizeCategory)maximumContentSizeCategory
{
  if ((*(_QWORD *)&self->_viewFlags & 0x8000000000) == 0)
    return (UIContentSizeCategory)0;
  objc_getAssociatedObject(self, &unk_1ECD7CC58);
  return (UIContentSizeCategory)(id)objc_claimAutoreleasedReturnValue();
}

- (void)_invalidateTraitCollectionAsRoot
{
  void *v2;
  id v3;
  id v4;
  char v5;
  id v6;

  if (a1)
  {
    _UIViewInvalidateTraitCollectionAndSchedulePropagation(a1, 1);
    if (qword_1EDDCA898 != -1)
      dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
    if (!byte_1EDDCA61D)
    {
      objc_msgSend((id)a1, "traitCollection");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)a1, "_lastNotifiedTraitCollection");
      v3 = (id)objc_claimAutoreleasedReturnValue();
      v4 = v2;
      v6 = v4;
      if (v3 != v4)
      {
        if (v4 && v3)
        {
          v5 = objc_msgSend(v3, "isEqual:", v4);

          if ((v5 & 1) != 0)
            goto LABEL_16;
        }
        else
        {

        }
        *(_QWORD *)(a1 + 112) |= 0x1000000000000uLL;
        if (!*(_WORD *)(a1 + 220) || (dyld_program_sdk_at_least() & 1) == 0)
          objc_msgSend((id)a1, "setNeedsLayout");
        goto LABEL_16;
      }

LABEL_16:
    }
  }
}

+ (void)_createTransformerWithInputAnimatableProperties:(id)a3 presentationValueChangedCallback:(id)a4
{
  id v6;
  id v7;

  v7 = a3;
  v6 = a4;
  objc_opt_self();
  if (_os_feature_enabled_impl())
    objc_msgSend(a1, "__swift_createTransformerWithInputAnimatableProperties:presentationValueChangedCallback:", v7, v6);
  else

}

+ (void)_createTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5
{
  id v8;
  id v9;
  id v10;

  v10 = a3;
  v8 = a4;
  v9 = a5;
  objc_opt_self();
  if (_os_feature_enabled_impl())
    objc_msgSend(a1, "__swift_createTransformerWithInputAnimatableProperties:modelValueSetter:presentationValueSetter:", v10, v8, v9);
  else

}

- (CGSize)convertSize:(CGSize)a3 toView:(id)a4
{
  UIView *v4;
  double height;
  double width;
  CALayer *layer;
  CALayer *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CALayer *v14;
  CALayer *v15;
  double v16;
  double v17;
  CALayer *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGSize result;

  v4 = (UIView *)a4;
  height = a3.height;
  width = a3.width;
  if (!a4)
    v4 = (UIView *)-[UIView window](self, "window");
  if (v4 && v4 != self)
  {
    layer = v4->_layer;
    v9 = self->_layer;
    -[CALayer convertPoint:toLayer:](v9, "convertPoint:toLayer:", layer, width, height);
    v11 = v10;
    v13 = v12;

    v14 = self->_layer;
    v15 = v4->_layer;
    v16 = *MEMORY[0x1E0C9D538];
    v17 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v18 = v14;
    -[CALayer convertPoint:toLayer:](v18, "convertPoint:toLayer:", v15, v16, v17);
    v20 = v19;
    v22 = v21;

    width = vabdd_f64(v11, v20);
    height = vabdd_f64(v13, v22);
  }
  v23 = width;
  v24 = height;
  result.height = v24;
  result.width = v23;
  return result;
}

+ (void)_endSuspendingMotionEffectsForReason:(id)a3
{
  if (_motionEffectEngine)
    objc_msgSend((id)_motionEffectEngine, "endSuspendingForReason:", a3);
  else
    objc_msgSend((id)qword_1EDDCA700, "removeObject:", a3);
}

- (void)setTag:(NSInteger)tag
{
  _setTagForView(self, tag);
}

- (_UIViewInternalDraggingSourceDelegate)_draggingSourceDelegate
{
  void *v2;
  void *v3;

  objc_getAssociatedObject(self, &_UIViewDraggingSourceDelegateStorageKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (_UIViewInternalDraggingSourceDelegate *)v3;
}

uint64_t __38__UIView__hasSpringLoadedInteractions__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (_QWORD)_recursiveCollectTemporaryInternalConstraintsWithEngine:(uint64_t)a3 ignoreAutoresizingMaskConstraints:(uint64_t)a4 returningConstraintsForViewsNeedingSecondPass:(double)a5 currentTargetWidth:
{
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v9 = result;
    if ((result[13] & 0x800000000000000) != 0)
    {
      if (!objc_msgSend(result, "_hostsLayoutEngine")
        || (result = (_QWORD *)objc_msgSend(v9, "_layoutEngine"), result == a2))
      {
        v10 = (void *)objc_msgSend(v9, "_allSubviews");
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        result = (_QWORD *)objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (result)
        {
          v11 = result;
          v12 = *(_QWORD *)v15;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v15 != v12)
                objc_enumerationMutation(v10);
              if ((~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v13) + 104) & 0x420000000000000) == 0)
                -[UIView _recursiveCollectTemporaryInternalConstraintsWithEngine:ignoreAutoresizingMaskConstraints:returningConstraintsForViewsNeedingSecondPass:currentTargetWidth:](a5);
              v13 = (_QWORD *)((char *)v13 + 1);
            }
            while (v11 != v13);
            result = (_QWORD *)objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
            v11 = result;
          }
          while (result);
        }
      }
    }
    if ((v9[13] & 0x400000000000000) != 0)
      return (_QWORD *)objc_msgSend(v9, "_makeTemporaryInternalConstraintsWithEngine:ignoreAutoresizingMaskConstraints:returningConstraintsForViewsNeedingSecondPass:currentTargetWidth:", a2, a3, a4, a5);
  }
  return result;
}

- (void)_makeTemporaryInternalConstraintsWithEngine:(id)a3 ignoreAutoresizingMaskConstraints:(BOOL)a4 returningConstraintsForViewsNeedingSecondPass:(id *)a5 currentTargetWidth:(double)a6
{
  NSISEngine *v11;
  _BOOL4 v12;
  NSMutableArray *v13;
  NSMutableArray *v14;
  UIView *v15;
  uint64_t viewFlags;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  double v24;
  void *ContentSize;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v11 = -[UIView _layoutEngine](self, "_layoutEngine");
  v12 = -[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass");
  v13 = -[UIView _internalConstraints](self, "_internalConstraints");
  v14 = v13;
  if (!v12 && v13)
    return;
  v15 = -[UIView _containerForContentSizeConstraints](self, "_containerForContentSizeConstraints");
  viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x20000000000000) != 0 && v15 == self)
  {
    if (!v12)
      goto LABEL_25;
    -[UIView _prepareForFirstIntrinsicContentSizeCalculation](self, "_prepareForFirstIntrinsicContentSizeCalculation");
    v17 = *a5;
    if (!*a5)
    {
      v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 0, 0, 0);
      *a5 = v17;
    }
    if (v11 == a3)
    {
      -[UIView _multilineContextWidth](self, "_multilineContextWidth");
      if (v24 == a6)
        goto LABEL_25;
      -[UIView removeConstraints:](self, "removeConstraints:", v14);
      -[UIView _setContentSizeConstraints:](self, 0);
    }
    else
    {
      if (!v14)
        goto LABEL_25;
      objc_msgSend(v17, "setObject:forKey:", v14, self);
    }
    -[UIView _prepareForFirstIntrinsicContentSizeCalculation](self, "_prepareForFirstIntrinsicContentSizeCalculation");
LABEL_25:
    if (!-[UIView _contentSizeConstraints](self))
    {
      ContentSize = -[UIView _generateContentSizeConstraints](self);
      v26 = ContentSize;
      v27 = v11 != a3 || v12;
      if ((v27 & 1) != 0)
      {
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v28 = objc_msgSend(ContentSize, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
        if (v28)
        {
          v29 = v28;
          v30 = *(_QWORD *)v38;
          do
          {
            for (i = 0; i != v29; ++i)
            {
              if (*(_QWORD *)v38 != v30)
                objc_enumerationMutation(v26);
              v32 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
              objc_msgSend(v32, "setContainer:", self);
              objc_msgSend(v32, "_addToEngine:", a3);
            }
            v29 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
          }
          while (v29);
        }
        if (v12)
          objc_msgSend(*a5, "setObject:forKey:", v26, self);
      }
      else
      {
        -[UIView addConstraints:](self, "addConstraints:", ContentSize);
        -[UIView _setContentSizeConstraints:](self, (uint64_t)v26);
      }
    }
    return;
  }
  if ((viewFlags & 0x20000000000000) == 0 && !a4)
  {
    v18 = -[UIView _constraintsEquivalentToAutoresizingMask](self);
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v34;
      do
      {
        for (j = 0; j != v20; ++j)
        {
          if (*(_QWORD *)v34 != v21)
            objc_enumerationMutation(v18);
          v23 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * j);
          objc_msgSend(v23, "setContainer:", -[UIView superview](self, "superview"));
          objc_msgSend(v23, "_addToEngine:", a3);
        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
      }
      while (v20);
    }
    if (-[UIView _layoutEngine](-[UIView superview](self, "superview"), "_layoutEngine") == a3)
      -[UIView _setAutoresizingConstraints:](self, v18);
  }
}

- (void)removeConstraints:(NSArray *)constraints
{
  NSISEngine *v6;
  _QWORD v7[6];

  if (constraints)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 1309, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[constraints isKindOfClass:[NSArray class]]"));
    if (-[NSArray count](constraints, "count"))
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __53__UIView_UIConstraintBasedLayout__removeConstraints___block_invoke;
      v7[3] = &unk_1E16C3CF0;
      v7[4] = constraints;
      v7[5] = self;
      if (self)
      {
        v6 = -[UIView _layoutEngine](self, "_layoutEngine");
        if (v6)
          -[NSISEngine withAutomaticOptimizationDisabled:](v6, "withAutomaticOptimizationDisabled:", v7);
        else
          __53__UIView_UIConstraintBasedLayout__removeConstraints___block_invoke((uint64_t)v7);
      }
    }
  }
}

uint64_t __53__UIView_UIConstraintBasedLayout__removeConstraints___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(void **)(a1 + 32);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "removeConstraint:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

- (void)removeConstraint:(NSLayoutConstraint *)constraint
{
  if (self && constraint)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__removeConstraint_, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 1285, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[constraint isKindOfClass:[NSLayoutConstraint class]]"));
    -[UIView nsli_removeConstraint:](self, "nsli_removeConstraint:", constraint);
  }
}

- (double)_multilineContextWidth
{
  double result;

  objc_msgSend(objc_getAssociatedObject(self, &_UIViewMultilineContextWidth), "doubleValue");
  return result;
}

- (void)insertSubview:(UIView *)view aboveSubview:(UIView *)siblingSubview
{
  -[UIView _addSubview:positioned:relativeTo:](self, "_addSubview:positioned:relativeTo:", view, -2, siblingSubview);
}

+ (void)initialize
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((id)objc_opt_class() == a1)
  {
    _class_setCustomDeallocInitiation();
    qword_1EDDCA6A8 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  }
  else
  {
    objc_opt_self();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "instanceMethodForSelector:", sel_traitCollection);
    v4 = dyld_image_header_containing_address();
    objc_msgSend(a1, "instanceMethodForSelector:", sel_traitCollection);
    v5 = dyld_image_header_containing_address();

    if (v4 != v5)
    {
      v6 = qword_1EDDCA6A0;
      if (!qword_1EDDCA6A0)
      {
        v6 = __UILogCategoryGetNode("TraitCollection", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v6, (unint64_t *)&qword_1EDDCA6A0);
      }
      v7 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = v7;
        NSStringFromClass((Class)a1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = 138412290;
        v11 = v9;
        _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Class %@ overrides the -traitCollection getter, which is not supported. If you're trying to override traits, you must use the appropriate API.", (uint8_t *)&v10, 0xCu);

      }
    }
  }
}

+ (void)_animateUsingDefaultTimingWithOptions:(unint64_t)a3 animations:(id)a4 completion:(id)a5
{
  objc_msgSend(a1, "_animateUsingDefaultDampedSpringWithDelay:initialSpringVelocity:options:animations:completion:", a3, a4, a5, 0.0, 0.0);
}

+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, options, 0, animations, 0, 0, duration, delay, completion);
}

+ (id)_currentAnimationAttributes
{
  _UIViewAnimationAttributes *v2;
  _UIViewAnimationAttributes *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char isKindOfClass;
  uint64_t v13;
  double v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  if (__currentViewAnimationState)
  {
    v2 = objc_alloc_init(_UIViewAnimationAttributes);
    v3 = v2;
    v4 = __currentViewAnimationState;
    v2->_duration = *(double *)(__currentViewAnimationState + 40);
    v2->_delay = *(double *)(v4 + 48);
    v5 = (*(_QWORD *)(v4 + 88) << 16) | (2 * *(unsigned __int8 *)(v4 + 234));
    if (*(float *)(v4 + 96) == 3.4028e38)
      v5 |= 8uLL;
    v6 = *(char *)(v4 + 172);
    if (v6 < 0)
      v5 |= 0x2000uLL;
    v7 = 2 * v6;
    v8 = (v6 >> 4) & 1;
    v9 = *(double *)(v4 + 56);
    if (v9 == 0.0)
      v10 = 0;
    else
      v10 = ((uint64_t)(240.0 / round(1.0 / v9)) << 24) - 0x1000000;
    v2->_options = v5 | v7 & 0x14 | v8 | (unint64_t)v10;
    v11 = *(_QWORD *)(v4 + 64);
    v2->_preferredFrameRateRange.preferred = *(float *)(v4 + 72);
    *(_QWORD *)&v2->_preferredFrameRateRange.minimum = v11;
    v2->_updateReason = *(_DWORD *)(v4 + 76);
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v13 = __currentViewAnimationState;
    if ((isKindOfClass & 1) != 0)
    {
      v3->_springDamping = *(double *)(__currentViewAnimationState + 296);
      v14 = *(double *)(v13 + 304);
      v3->_hasSpringAttributes = 1;
      v3->_springVelocity = v14;
      v3->_springMass = *(double *)(v13 + 280);
      v3->_springStiffness = *(double *)(v13 + 288);
    }
    objc_msgSend(*(id *)(v13 + 192), "_basicAnimationForView:withKeyPath:", 0, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3->_hasSpringAttributes = 1;
      v16 = v15;
      objc_msgSend(v16, "damping");
      v3->_springDamping = v17;
      objc_msgSend(v16, "initialVelocity");
      v3->_springVelocity = v18;
      objc_msgSend(v16, "mass");
      v3->_springMass = v19;
      objc_msgSend(v16, "stiffness");
      v21 = v20;

      v3->_springStiffness = v21;
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (id)_containingScrollView
{
  void *v2;
  void *v3;

  -[UIView superview](self, "superview");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  __scrollViewAncestorOfView(v2, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (double)_directionalReadableContentInsets
{
  double result;

  if (!a1)
    return 0.0;
  objc_msgSend(a1, "directionalLayoutMargins", _UIViewHorizontalReadableContentInsetsForView(a1));
  return result;
}

- (void)setMultipleTouchEnabled:(BOOL)multipleTouchEnabled
{
  uint64_t v3;

  v3 = 0x20000000;
  if (!multipleTouchEnabled)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFFDFFFFFFFLL | v3;
}

+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 dampingRatioSmoothing:(double)a6 responseSmoothing:(double)a7 targetSmoothing:(double)a8 projectionDeceleration:(double)a9 animations:(id)a10 completion:(id)a11
{
  +[UIView __animateUsingSpringWithDampingRatio:response:interactive:initialDampingRatio:initialResponse:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:retargetImpulse:animations:completion:](a3, a4, a6, a7, a8, a9, 0.0, (uint64_t)a1, a5, 0, 0, a10, a11);
}

- (void)unregisterForTraitChanges:(id)a3
{
  -[_UITraitChangeRegistry unregisterForTraitChanges:]((uint64_t)self->_traitChangeRegistry, a3);
}

- (void)_promoteSelfOrDescendantToFirstResponderIfNecessary
{
  UIView *v3;
  UIView *v4;

  -[UIView _findFirstSubviewWantingToBecomeFirstResponder]((uint64_t)self);
  v3 = (UIView *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    if ((*(_QWORD *)&self->_viewFlags & 0x800) == 0)
      return;
    v3 = self;
  }
  v4 = v3;
  -[UIView _makeSubtreePerformSelector:withObject:](self, "_makeSubtreePerformSelector:withObject:", sel__clearBecomeFirstResponderWhenCapable, 0);
  -[UIView deferredBecomeFirstResponder](v4, "deferredBecomeFirstResponder");

}

- (id)_initWithLayer:(id)a3
{
  UIView *v4;
  id v5;
  UIView *v6;

  v4 = self;
  v5 = a3;
  objc_msgSend(v5, "removeFromSuperlayer");
  _UIViewSetLayer((uint64_t)v4, v5);

  -[CALayer frame](v4->_layer, "frame");
  v6 = -[UIView initWithFrame:](v4, "initWithFrame:");

  if (v6 != v4)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("A layer's self pointer changed across initWithFrame:, which is not a supported behavior for _initWithLayer:"));
  return v6;
}

- (NSLayoutYAxisAnchor)firstBaselineAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewFirstBaselineAnchorKey, v3, 12);
}

- (NSLayoutXAxisAnchor)rightAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewRightAnchorKey, v3, 2);
}

- (NSLayoutXAxisAnchor)leftAnchor
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewLeftAnchorKey, v3, 1);
}

- (UILayoutGuide)safeAreaLayoutGuide
{
  UILayoutGuide *safeAreaLayoutGuide;
  UILayoutGuide *v4;
  UILayoutGuide *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  safeAreaLayoutGuide = self->_safeAreaLayoutGuide;
  if (!safeAreaLayoutGuide)
  {
    v4 = objc_alloc_init(UILayoutGuide);
    v5 = self->_safeAreaLayoutGuide;
    self->_safeAreaLayoutGuide = v4;

    -[UIView addLayoutGuide:](self, "addLayoutGuide:", self->_safeAreaLayoutGuide);
    -[UILayoutGuide _setLockedToOwningView:](self->_safeAreaLayoutGuide, "_setLockedToOwningView:", 1);
    -[UILayoutGuide _setAllowsNegativeDimensions:](self->_safeAreaLayoutGuide, "_setAllowsNegativeDimensions:", 1);
    -[UILayoutGuide _setShouldBeArchived:](self->_safeAreaLayoutGuide, "_setShouldBeArchived:", 1);
    -[UILayoutGuide setIdentifier:](self->_safeAreaLayoutGuide, "setIdentifier:", CFSTR("UIViewSafeAreaLayoutGuide"));
    -[UIView _frameLayoutItem](self, "_frameLayoutItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILayoutGuide topAnchor](self->_safeAreaLayoutGuide, "topAnchor");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "topAnchor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "constraintEqualToAnchor:constant:", v8, 0.0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    -[UILayoutGuide leftAnchor](self->_safeAreaLayoutGuide, "leftAnchor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "leftAnchor");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "constraintEqualToAnchor:constant:", v11, 0.0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "bottomAnchor");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILayoutGuide bottomAnchor](self->_safeAreaLayoutGuide, "bottomAnchor");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "constraintEqualToAnchor:constant:", v14, 0.0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "rightAnchor");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILayoutGuide rightAnchor](self->_safeAreaLayoutGuide, "rightAnchor");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "constraintEqualToAnchor:constant:", v17, 0.0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "setIdentifier:", CFSTR("UIViewSafeAreaLayoutGuide-top"));
    objc_msgSend(v12, "setIdentifier:", CFSTR("UIViewSafeAreaLayoutGuide-left"));
    objc_msgSend(v15, "setIdentifier:", CFSTR("UIViewSafeAreaLayoutGuide-bottom"));
    objc_msgSend(v18, "setIdentifier:", CFSTR("UIViewSafeAreaLayoutGuide-right"));
    v21[0] = v9;
    v21[1] = v12;
    v21[2] = v15;
    v21[3] = v18;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 4);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILayoutGuide _setSystemConstraints:](self->_safeAreaLayoutGuide, "_setSystemConstraints:", v19);
    -[UIView _updateSafeAreaLayoutGuideConstraintsIfNecessary]((id *)&self->super.super.isa);
    objc_msgSend(MEMORY[0x1E0D156E0], "activateConstraints:", v19);

    safeAreaLayoutGuide = self->_safeAreaLayoutGuide;
  }
  return safeAreaLayoutGuide;
}

- (void)_updateSafeAreaLayoutGuideConstraintsIfNecessary
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  if (a1)
  {
    if (a1[33])
    {
      objc_msgSend(a1, "safeAreaInsets");
      v3 = v2;
      v5 = v4;
      v7 = v6;
      v9 = v8;
      objc_msgSend(a1[33], "_systemConstraints");
      v14 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectAtIndexedSubscript:", 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setConstant:", v3);

      objc_msgSend(v14, "objectAtIndexedSubscript:", 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setConstant:", v5);

      objc_msgSend(v14, "objectAtIndexedSubscript:", 2);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setConstant:", v7);

      objc_msgSend(v14, "objectAtIndexedSubscript:", 3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setConstant:", v9);

    }
  }
}

- (void)setNeedsFocusUpdate
{
  id v3;

  -[UIView _focusSystem](self, "_focusSystem");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "requestFocusUpdateToEnvironment:", self);

}

+ (double)_currentAnimationDuration
{
  int v3;
  double result;
  uint64_t v5;

  if (dyld_program_sdk_at_least())
  {
    v3 = objc_msgSend(a1, "_isInAnimationBlockWithAnimationsEnabled");
    result = 0.0;
    if (!v3)
      return result;
    v5 = __currentViewAnimationState;
    return *(double *)(v5 + 40);
  }
  v5 = __currentViewAnimationState;
  if (__currentViewAnimationState)
    return *(double *)(v5 + 40);
  return 0.0;
}

- (BOOL)containsView:(id)a3
{
  return -[UIView _containsView:]((uint64_t)self, (uint64_t)a3);
}

+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void *)animations completion:(void *)completion
{
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, 0, 0, animations, 0, 0, duration, 0.0, completion);
}

- (void)_invalidateAppearanceForSubviewsOfClass:(Class)a3
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[UIView _invalidateAppearance](self, "_invalidateAppearance");
  -[UIView _allSubviews](self, "_allSubviews");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "_invalidateAppearanceForSubviewsOfClass:", a3);
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

- (void)_invalidateAppearance
{
  *(_QWORD *)&self->_viewFlags |= 0x20000000000uLL;
  if (!self->_imminentLayoutSubviewsCount)
    goto LABEL_5;
  if (qword_1EDDCA898 != -1)
    dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
  if (!byte_1EDDCA61D)
LABEL_5:
    -[UIView setNeedsLayout](self, "setNeedsLayout");
}

- (void)_collectKeyViews:(id)a3 visibilityTest:(id)a4 passingTest:(id)a5
{
  id v8;
  unsigned int (**v9)(id, void *);
  id v10;
  unsigned int (**v11)(_QWORD, _QWORD);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (unsigned int (**)(id, void *))a4;
  v10 = a5;
  v11 = (unsigned int (**)(_QWORD, _QWORD))v10;
  if (v9 && v10)
  {
    if (-[UIResponder _requiresKeyboardWhenFirstResponder](self, "_requiresKeyboardWhenFirstResponder"))
    {
      if (((unsigned int (**)(_QWORD, UIView *))v11)[2](v11, self))
        objc_msgSend(v8, "addObject:", self);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      -[UIView _allSubviews](self, "_allSubviews", 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v19 != v15)
              objc_enumerationMutation(v12);
            v17 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
            if (v9[2](v9, v17))
              objc_msgSend(v17, "_collectKeyViews:visibilityTest:passingTest:", v8, v9, v11);
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v14);
      }

    }
  }

}

uint64_t __37__UIView_Internal___collectKeyViews___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isHidden") ^ 1;
}

- (id)_rootInputWindowController
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[UIView window](self, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "rootViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[UIView window](self, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "rootViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t __37__UIView_Internal___collectKeyViews___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_shouldCollectAsKeyView");
}

- (void)setOverrideUserInterfaceStyle:(UIUserInterfaceStyle)overrideUserInterfaceStyle
{
  id v4;

  if (overrideUserInterfaceStyle)
  {
    -[UIView traitOverrides](self, "traitOverrides");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setUserInterfaceStyle:", overrideUserInterfaceStyle);
  }
  else
  {
    if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) == 0)
      return;
    objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_removeTraitToken:", 0x1E1A994B0);
  }

}

- (void)_setRenderConfig:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[UIView subviews](self, "subviews", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "_setRenderConfig:", v4);
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

- (BOOL)isFirstResponder
{
  return (*(_QWORD *)&self->_viewFlags >> 15) & 1;
}

- (double)_continuousCornerRadius
{
  void *v2;
  double v3;
  double v4;

  -[UIView layer](self, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cornerRadius");
  v4 = v3;

  return v4;
}

+ (void)_animateUsingDefaultDampedSpringWithDelay:(double)a3 initialSpringVelocity:(double)a4 options:(unint64_t)a5 animations:(id)a6 completion:(id)a7
{
  id v10;
  void *v11;
  id v12;

  v10 = a7;
  v12 = a6;
  v11 = (void *)objc_opt_self();
  _UILoadDefaultSpringParameters();
  _durationOfSpringAnimation(*(double *)&_UIViewDefaultSpringMass, *(double *)&_UIViewDefaultSpringStiffness, *(double *)&_UIViewDefaultSpringDamping, a4);
  objc_msgSend(v11, "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", a5, v12, v10);

}

+ (void)_animateUsingSpringWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 mass:(double)a6 stiffness:(double)a7 damping:(double)a8 initialVelocity:(double)a9 animations:(id)a10 completion:(id)a11
{
  id v19;
  id v20;
  void *v21;
  _QWORD v22[8];

  v19 = a11;
  v20 = a10;
  v21 = (void *)objc_opt_self();
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __133__UIView_Internal___animateUsingSpringWithDuration_delay_options_mass_stiffness_damping_initialVelocity_animations_start_completion___block_invoke;
  v22[3] = &__block_descriptor_64_e5_v8__0l;
  *(double *)&v22[4] = a6;
  *(double *)&v22[5] = a7;
  *(double *)&v22[6] = a8;
  *(double *)&v22[7] = a9;
  objc_msgSend(v21, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, a5, 0, v20, 0, v22, a3, a4, v19);

}

+ (id)_startAnimationTracking
{
  byte_1EDDCA602 = 1;
  return (id)objc_msgSend(a1, "_enableAnimationTracking");
}

+ (void)_finishAnimationTracking
{
  id v2;
  int v3;
  void *v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (id)qword_1EDDCA648;
  v3 = byte_1EDDCA602;
  v4 = (void *)qword_1EDDCA648;
  qword_1EDDCA648 = 0;

  byte_1EDDCA602 = 0;
  if (v3 == 1 && v2 != 0)
  {
    objc_msgSend((id)qword_1EDDCA650, "objectForKeyedSubscript:", v2);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v12;
      while (2)
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v12 != v9)
            objc_enumerationMutation(v6);
          if (objc_msgSend(*(id *)(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v10) + 176), "count", (_QWORD)v11))
          {

            goto LABEL_15;
          }
          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v8)
          continue;
        break;
      }
    }

    +[UIView _disableAnimationTracking:](UIView, "_disableAnimationTracking:", v2);
LABEL_15:

  }
}

+ (id)_enableAnimationTracking
{
  return (id)objc_msgSend(a1, "_enableAnimationTracking:", 0);
}

+ (id)_enableAnimationTracking:(BOOL)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (qword_1EDDCA648)
    {
      v3 = (id)qword_1EDDCA648;
      return v3;
    }
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)&qword_1EDDCA648, v3);
  }
  v4 = (void *)qword_1EDDCA650;
  if (!qword_1EDDCA650)
  {
    v5 = objc_opt_new();
    v6 = (void *)qword_1EDDCA650;
    qword_1EDDCA650 = v5;

    v4 = (void *)qword_1EDDCA650;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v7, v3);

  return v3;
}

+ (void)_disableAnimationTracking:(id)a3 clearTrackedAnimations:(BOOL)a4
{
  _BOOL4 v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v4 = a4;
  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!v4)
  {
    objc_msgSend((id)qword_1EDDCA650, "removeObjectForKey:", v5);
    if (!v5)
      goto LABEL_16;
    goto LABEL_14;
  }
  objc_msgSend((id)qword_1EDDCA650, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "_removeAnimationStateFromTrackingMap:", 0);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }
  if (qword_1EDDCA650)
    objc_msgSend((id)qword_1EDDCA650, "removeObjectForKey:", v5);

  if (v5)
  {
LABEL_14:
    if (objc_msgSend((id)qword_1EDDCA648, "isEqual:", v5))
    {
      v11 = (void *)qword_1EDDCA648;
      qword_1EDDCA648 = 0;

    }
  }
LABEL_16:
  if (!objc_msgSend((id)qword_1EDDCA650, "count"))
  {
    v12 = (void *)qword_1EDDCA650;
    qword_1EDDCA650 = 0;

  }
}

+ (void)_disableAnimationTracking:(id)a3
{
  objc_msgSend(a1, "_disableAnimationTracking:clearTrackedAnimations:", a3, 1);
}

+ (id)_currentViewAnimationState
{
  return (id)__currentViewAnimationState;
}

+ (void)mapTrackedAnimations:(void *)a3 withBlock:
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a2;
  objc_opt_self();
  mapTrackedAnimations((uint64_t)v5, v4);

}

- (void)_convertToAutolayoutSizingIfNecessary
{
  double v3;
  double v4;
  id v5;

  if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
  {
    -[UIView bounds](self, "bounds");
    v4 = v3;
    -[UIView setTranslatesAutoresizingMaskIntoConstraints:](self, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    if ((-[UIView autoresizingMask](self, "autoresizingMask") & 0x10) == 0)
    {
      objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", self, 8, 0, 0, 0, 0.0, v4);
      v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setIdentifier:", CFSTR("_UIKBAutolayoutHeightConstraint"));
      -[UIView addConstraint:](self, "addConstraint:", v5);

    }
  }
}

- (CGRect)_nsis_bounds
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  v2 = -[UIView _nsis_compatibleBoundsInEngine:](self, -[UIView _layoutEngineCreateIfNecessary](self, "_layoutEngineCreateIfNecessary"));
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

+ (void)_performInitializationForIdiomIfNeccessary:(uint64_t)a1
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_opt_self();
  if (a2 != -1 && !_UIViewDidAlreadyInitializeIdiom[a2])
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v3 = (id)_UIViewClassesRegisteredForIdiomInitialization;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v7++), "_initializeForIdiom:", a2, (_QWORD)v8);
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v5);
    }

    _UIViewDidAlreadyInitializeIdiom[a2] = 1;
  }
}

- (BOOL)becomeFirstResponder
{
  void *v3;
  objc_super v5;

  -[UIView window](self, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {

  }
  else if (-[UIView _supportsBecomeFirstResponderWhenPossible](self, "_supportsBecomeFirstResponderWhenPossible"))
  {
    return -[UIView _becomeFirstResponderWhenPossible](self, "_becomeFirstResponderWhenPossible");
  }
  v5.receiver = self;
  v5.super_class = (Class)UIView;
  return -[UIResponder becomeFirstResponder](&v5, sel_becomeFirstResponder);
}

- (double)_applyDirectionalRelativePosition:(double)a3 toRect:(double)a4
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double MinX;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double MaxX;

  if (!a1)
    return 0.0;
  switch(*((_QWORD *)a2 + 4))
  {
    case 1:
      CGRectGetMinY(*(CGRect *)a2);
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      v10 = *((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)a2 + 2);
      v12 = *((_QWORD *)a2 + 3);
      if ((*(_DWORD *)(a1 + 120) & 0x80000) == 0)
      {
        MinX = CGRectGetMinX(*(CGRect *)&v9);
        goto LABEL_11;
      }
      MaxX = CGRectGetMaxX(*(CGRect *)&v9);
      goto LABEL_14;
    case 4:
      CGRectGetMaxY(*(CGRect *)a2);
      break;
    case 8:
      v15 = *(_QWORD *)a2;
      v16 = *((_QWORD *)a2 + 1);
      v17 = *((_QWORD *)a2 + 2);
      v18 = *((_QWORD *)a2 + 3);
      if ((*(_DWORD *)(a1 + 120) & 0x80000) != 0)
      {
        MaxX = CGRectGetMinX(*(CGRect *)&v15);
LABEL_14:
        a3 = MaxX - a2[5] - a5;
      }
      else
      {
        MinX = CGRectGetMaxX(*(CGRect *)&v15);
LABEL_11:
        a3 = MinX + a2[5];
      }
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", sel__applyDirectionalRelativePosition_toRect_, a1, CFSTR("UIView_DirectionalManualLayout.m"), 38, CFSTR("Invalid referenceEdge value in _UIDirectionalRelativePosition: %ld"), *((_QWORD *)a2 + 4));

      break;
  }
  return a3;
}

- (id)nsli_constraintWithAnchor:(id)a3 relatedBy:(int64_t)a4 toAnchor:(id)a5 withSystemSpacingMultipliedBy:(double)a6
{
  if (objc_msgSend(a3, "_anchorType") == 2 && objc_msgSend(a5, "_anchorType") == 2)
    return +[_UISystemBaselineConstraint constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:](_UISystemBaselineConstraint, "constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:", a3, a4, a5, a6);
  else
    return (id)objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithAnchor:relatedBy:toAnchor:multiplier:constant:", a3, a4, a5, 1.0, a6 * 8.0);
}

- (id)_scroller
{
  id v2;
  void *v3;

  v2 = -[UIView superview](self, "superview");
  if (v2)
  {
    v3 = v2;
    while (!objc_msgSend(v3, "__isKindOfUIScrollView")
         || (objc_msgSend(v3, "_forwardsToParentScroller") & 1) != 0)
    {
      v2 = (id)objc_msgSend(v3, "superview");
      v3 = v2;
      if (!v2)
        return v2;
    }
    v2 = v3;
  }
  return v2;
}

+ (BOOL)_motionEffectsSupported
{
  return +[_UIMotionEffectEngine _motionEffectsSupported](_UIMotionEffectEngine, "_motionEffectsSupported");
}

- (void)_objc_initiateDealloc
{
  *(_QWORD *)&self->_viewFlags |= 0x1000uLL;
  if (pthread_main_np())
  {
    -[UIView dealloc](self, "dealloc");
  }
  else
  {
    if (!self->_layerRetained)
      self->_layer = 0;
    dispatch_async_f(MEMORY[0x1E0C80D38], self, MEMORY[0x1E0DE7980]);
  }
}

+ (void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void *)animations
{
  void (**v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);

  v7 = animations;
  v10 = v7;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("animations parameter of +[UIView addKeyframeWithStartTime:duration:animations:] must be non-nil"));
    v7 = 0;
  }
  if (__currentViewAnimationState && (v8 = objc_opt_class(), v9 = objc_opt_class(), v7 = v10, v8 == v9))
    objc_msgSend((id)__currentViewAnimationState, "addKeyframeWithRelativeStartTime:relativeDuration:animations:", v10, frameStartTime, frameDuration);
  else
    v7[2](v7);

}

- (BOOL)_containedInAbsoluteResponderChain
{
  void *v3;
  char v4;

  if (self && (*((_QWORD *)&self->_viewFlags + 1) & 0x30000) != 0)
    return 0;
  -[UIView nextResponder](self, "nextResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_containedInAbsoluteResponderChain");

  return v4;
}

- (void)_setAllowsHighContrastForBackgroundColor:(BOOL)a3
{
  uint64_t v3;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  if (((((v3 & 0x80000) == 0) ^ a3) & 1) == 0)
  {
    v5 = 0x80000;
    if (!a3)
      v5 = 0;
    *(_QWORD *)((char *)&self->_viewFlags + 20) = v3 & 0xFFFFFFFFFFF7FFFFLL | v5;
    -[UIView _backgroundColor](self, "_backgroundColor");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[UIView _setBackgroundColor:](self, "_setBackgroundColor:", v6);

  }
}

- (CGSize)size
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGSize result;

  -[UIView frame](self, "frame");
  v3 = v2;
  v5 = v4;
  result.height = v5;
  result.width = v3;
  return result;
}

- (void)setLargeContentImage:(UIImage *)largeContentImage
{
  UIImage *v4;
  id v5;

  v4 = largeContentImage;
  -[UIView _largeContentStoredPropertiesCreatingIfNecessary:](self, "_largeContentStoredPropertiesCreatingIfNecessary:", 1);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setLargeContentImage:", v4);

}

- (BOOL)_shouldDelayTouchForSystemGestures:(id)a3
{
  return (*((_QWORD *)&self->_viewFlags + 1) >> 30) & 1;
}

+ (id)_currentAnimationSettings
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  id v28;
  void *v29;

  if (__currentViewAnimationState)
  {
    WeakRetained = objc_loadWeakRetained((id *)(__currentViewAnimationState + 272));
    objc_msgSend(*(id *)(__currentViewAnimationState + 192), "_basicAnimationForView:withKeyPath:", 0, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "timingParameters");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "springTimingParameters");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(WeakRetained, "timingParameters");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "springTimingParameters");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v7, "mass");
      v9 = v8;
      objc_msgSend(v7, "stiffness");
      v11 = v10;
      objc_msgSend(v7, "damping");
      v13 = v12;
      objc_msgSend(v7, "initialVelocity");
      v15 = v14;

    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v9 = *(double *)(__currentViewAnimationState + 280);
        v11 = *(double *)(__currentViewAnimationState + 288);
        v13 = *(double *)(__currentViewAnimationState + 296);
        v15 = *(double *)(__currentViewAnimationState + 304);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v26 = *(_QWORD *)(__currentViewAnimationState + 88);
          if (v26 == 6)
          {
            v28 = *(id *)(__currentViewAnimationState + 200);
          }
          else
          {
            if (v26 == 7)
            {
              _UILoadDefaultSpringParameters();
              v9 = *(double *)&_UIViewDefaultSpringMass;
              v11 = *(double *)&_UIViewDefaultSpringStiffness;
              v13 = *(double *)&_UIViewDefaultSpringDamping;
              v15 = 0.0;
              goto LABEL_12;
            }
            _UIGetAnimationCurveSpline(v26, v17, v18, v19, v20);
            v28 = (id)objc_claimAutoreleasedReturnValue();
          }
          v29 = v28;
          objc_msgSend(MEMORY[0x1E0D017B0], "settingsWithDuration:delay:timingFunction:", v28, *(double *)(__currentViewAnimationState + 40), *(double *)(__currentViewAnimationState + 48));
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_13;
        }
        v21 = v3;
        objc_msgSend(v21, "mass");
        v9 = v22;
        objc_msgSend(v21, "stiffness");
        v11 = v23;
        objc_msgSend(v21, "damping");
        v13 = v24;
        objc_msgSend(v21, "initialVelocity");
        v15 = v25;

      }
    }
LABEL_12:
    objc_msgSend(MEMORY[0x1E0D01870], "settingsWithMass:stiffness:damping:epsilon:initialVelocity:", v9, v11, v13, 0.001, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:

    return v16;
  }
  v16 = 0;
  return v16;
}

- (id)registerForTraitChanges:(id)a3 withTarget:(id)a4 action:(SEL)a5
{
  id v8;
  void *v9;
  void *v10;

  v8 = a4;
  +[UITraitCollection _traitTokensIncludingPlaceholdersForTraits:]((uint64_t)UITraitCollection, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _registerForTraitTokenChanges:withTarget:action:](self, "_registerForTraitTokenChanges:withTarget:action:", v9, v8, a5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (uint64_t)_constraints_frameDidChange
{
  _QWORD *v1;
  _BOOL4 v2;

  if (result)
  {
    v1 = (_QWORD *)result;
    result = objc_msgSend((id)result, "superview");
    v2 = result && (*(_QWORD *)(result + 104) & 0x100000000000000) == 0;
    if ((v1[13] & 0x100000000000000) == 0 || v2)
    {
      result = -[UIView _usesAutoresizingConstraints]((uint64_t)v1);
      if ((_DWORD)result)
        result = objc_msgSend(v1, "_autoresizingConstraints_frameDidChange");
      if ((v1[13] & 0x100000000000000) == 0)
      {
        result = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v1);
        if ((_DWORD)result)
        {
          objc_msgSend(v1, "_engineHostConstraints_frameDidChange");
          result = dyld_program_sdk_at_least();
          if ((result & 1) == 0)
          {
            result = objc_msgSend(v1, "translatesAutoresizingMaskIntoConstraints");
            if ((_DWORD)result)
              return objc_msgSend(v1, "_setNeedsUpdateConstraintsNeedingLayout:", 0);
          }
        }
      }
    }
  }
  return result;
}

- (void)_engineHostConstraints_frameDidChange
{
  if ((dyld_program_sdk_at_least() & 1) != 0
    || self && -[UIView _forceLayoutEngineSolutionInRationalEdges](self, "_forceLayoutEngineSolutionInRationalEdges"))
  {
    if (objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count") == 4)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0
        && (*((_QWORD *)&self->_viewFlags + 1) & 0x800000000000) != 0
        && self->_viewDelegate)
      {
        -[UIView _relaxLayoutEngineHostConstraints](self);
        -[UIView setNeedsLayout](self, "setNeedsLayout");
      }
      else
      {
        -[UIView _resetLayoutEngineHostConstraints](self);
      }
    }
    else
    {
      -[UIView _invalidateEngineHostConstraints]((uint64_t)self);
    }
  }
  else
  {
    -[UIView _oldEngineHostConstraints_frameDidChange](self, "_oldEngineHostConstraints_frameDidChange");
  }
}

- (uint64_t)_invalidateEngineHostConstraints
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    result = -[UIView _usesLayoutEngineHostingConstraints](result);
    if ((_DWORD)result)
    {
      result = objc_msgSend(v1, "_layoutEngineHostConstraints");
      if (result)
      {
        objc_msgSend(v1, "removeConstraints:", result);
        -[UIView _setLayoutEngineHostConstraints:](v1, 0);
        return objc_msgSend(v1, "setNeedsUpdateConstraints");
      }
    }
  }
  return result;
}

- (void)_autoresizingConstraints_frameDidChange
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  BOOL v7;
  UIView *v8;
  UIView *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  _QWORD v15[7];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;

  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x4000) == 0)
  {
    v3 = (void *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate");
    if (((dyld_program_sdk_at_least() & 1) != 0
       || v3 && objc_msgSend(v3, "_forceLayoutEngineSolutionInRationalEdges"))
      && (*(_QWORD *)&self->_viewFlags & 0x800000000000000) != 0
      && -[CALayer needsLayoutOnGeometryChange](-[UIView layer](self, "layer"), "needsLayoutOnGeometryChange"))
    {
      -[UIView setNeedsLayout](self, "setNeedsLayout");
    }
    v4 = -[UIView _effectiveAutoresizingMask](self);
    if (v4)
    {
      v5 = v4;
      v16 = 0;
      v17 = &v16;
      v18 = 0x2020000000;
      v19 = 0;
      v6 = dyld_program_sdk_at_least();
      v7 = 0;
      if (v6)
        v7 = v5 != (void *)self->__autoresizingMaskForPreviousAutoresizingLayoutConstraints;
      v19 = v7;
      if (!*((_BYTE *)v17 + 24)
        && (*(_QWORD *)&self->_viewFlags & 0x4000000000000000) != 0
        && !-[UIView _isManuallyResizedBySuperview](self, "_isManuallyResizedBySuperview"))
      {
        goto LABEL_29;
      }
      v8 = -[UIView superview](self, "superview");
      v9 = v8;
      if (v8)
      {
        v10 = *((_QWORD *)&v8->_viewFlags + 1);
        v11 = (v10 >> 1) & 1;
        *((_QWORD *)&v8->_viewFlags + 1) = v10 | 2;
      }
      else
      {
        LOBYTE(v11) = 0;
      }
      v12 = -[UIView _autoresizingConstraints](self);
      if (v12 && -[UIView _layoutEngine](self, "_layoutEngine"))
      {
        v13 = v17 + 3;
        if (!*((_BYTE *)v17 + 24)
          && (v5 & 7 & ((v5 & 7) - 1)) == 0
          && (v5 & 0x38 & ((v5 & 0x38) - 1)) == 0)
        {
          v15[0] = MEMORY[0x1E0C809B0];
          v15[1] = 3221225472;
          v15[2] = __74__UIView_UIConstraintBasedLayout___autoresizingConstraints_frameDidChange__block_invoke;
          v15[3] = &unk_1E16CC3B0;
          v15[4] = self;
          v15[5] = v12;
          v15[6] = &v16;
          -[UIView _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:](self, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", v15);
          if (!*((_BYTE *)v17 + 24))
          {
LABEL_27:
            if (v9)
              *((_QWORD *)&v9->_viewFlags + 1) = *((_QWORD *)&v9->_viewFlags + 1) & 0xFFFFFFFFFFFFFFFDLL | (2 * (v11 & 1));
LABEL_29:
            _Block_object_dispose(&v16, 8);
            return;
          }
LABEL_26:
          -[UIView _invalidateAutoresizingConstraints]((uint64_t)self);
          goto LABEL_27;
        }
      }
      else
      {
        v14 = v17;
        *((_BYTE *)v17 + 24) = 1;
        v13 = v14 + 3;
      }
      *v13 = 1;
      goto LABEL_26;
    }
  }
}

- (void)_relaxLayoutEngineHostConstraints
{
  void *v1;
  void *v2;
  _QWORD v3[5];

  if (result)
  {
    v1 = result;
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __68__UIView_UIConstraintBasedLayout___relaxLayoutEngineHostConstraints__block_invoke;
    v3[3] = &unk_1E16B41B8;
    v3[4] = result;
    v2 = (void *)objc_msgSend(result, "_layoutEngine");
    if (v2)
    {
      return (void *)objc_msgSend(v2, "withAutomaticOptimizationDisabled:", v3);
    }
    else
    {
      objc_msgSend(v1, "_relaxLayoutEngineHostConstraintsForAxis:", 0);
      return (void *)objc_msgSend(v1, "_relaxLayoutEngineHostConstraintsForAxis:", 1);
    }
  }
  return result;
}

- (void)_setCornerRadius:(double)a3
{
  id v4;

  -[UIView layer](self, "layer");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setCornerRadius:", a3);

}

- (void)sendSubviewToBack:(UIView *)view
{
  UIView *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  BOOL v8;
  void *v9;
  void *v10;
  UIView *v11;

  v4 = view;
  if (v4)
  {
    v11 = v4;
    -[CALayer sublayers](self->_layer, "sublayers");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _backing_outermostLayer](v11);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v5, "indexOfObject:", v6);

    if (v7)
      v8 = v7 == 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = (void *)objc_msgSend(v5, "mutableCopy");
      -[UIView _backing_outermostLayer](v11);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "insertObject:atIndex:", v10, 0);

      objc_msgSend(v9, "removeObjectAtIndex:", v7 + 1);
      -[CALayer setSublayers:](self->_layer, "setSublayers:", v9);
      -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
      -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");

    }
    v4 = v11;
  }

}

- (BOOL)isEnabled
{
  return (*(_QWORD *)&self->_viewFlags & 2) == 0;
}

+ (void)modifyAnimationsWithRepeatCount:(CGFloat)count autoreverses:(BOOL)autoreverses animations:(void *)animations
{
  _BOOL4 v5;
  id v7;
  void *v8;
  id *v9;
  id WeakRetained;
  id *v11;
  void *v12;
  id *v13;
  int v14;
  uint64_t v15;
  float v16;
  char v17;
  char v18;
  void (**v19)(void);

  v5 = autoreverses;
  v19 = animations;
  v7 = (id)__currentViewAnimationState;
  v8 = v7;
  if (!v7)
    goto LABEL_8;
  v9 = (id *)v7;
  WeakRetained = 0;
  v11 = v9;
  while (1)
  {
    v12 = WeakRetained;
    WeakRetained = objc_loadWeakRetained(v11 + 34);

    if (WeakRetained)
    {
      if ((objc_msgSend(WeakRetained, "isInterruptible") & 1) != 0)
        break;
    }
    v13 = (id *)v11[1];

    v11 = v13;
    if (!v13)
    {
      v11 = (id *)WeakRetained;
      WeakRetained = 0;
      break;
    }
  }

  if (!WeakRetained)
  {
    v14 = *((_DWORD *)v9 + 24);
    v15 = *((unsigned __int8 *)v9 + 172);
    v16 = count;
    *((float *)v9 + 24) = v16;
    if (v5)
      v17 = 8;
    else
      v17 = 0;
    v18 = v15 & 0xF7;
    *((_BYTE *)v9 + 172) = v15 & 0xF7 | v17;
    if (v19)
    {
      v19[2]();
      v18 = *((_BYTE *)v9 + 172) & 0xF7;
    }
    *((_DWORD *)v9 + 24) = v14;
    *((_BYTE *)v9 + 172) = v18 | v15 & 8;
  }
  else
  {
LABEL_8:
    if (v19)
      v19[2]();
  }

}

+ (void)_setAnimationAttributes:(id)a3 skipDelegateAssignment:(BOOL)a4
{
  if (__currentViewAnimationState)
    objc_msgSend((id)__currentViewAnimationState, "setAnimationAttributes:skipDelegateAssignment:", a3, a4);
}

+ (void)_setAnimationAttributes:(id)a3
{
  +[UIView _setAnimationAttributes:skipDelegateAssignment:](UIView, "_setAnimationAttributes:skipDelegateAssignment:", a3, 0);
}

- (id)_deferredAnimationForKey:(id)a3
{
  return -[UIView _deferredAnimationForKey:ignoringKeyFrames:](self, "_deferredAnimationForKey:ignoringKeyFrames:", a3, 0);
}

- (id)_previousKeyResponder
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t i;
  void *v7;
  void *v8;
  char v9;
  void *v10;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _rootForKeyResponderCycle](self, "_rootForKeyResponderCycle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_collectKeyViews:", v3);

  objc_msgSend(v3, "sortUsingSelector:", sel__topToBottomLeftToRightViewCompare_);
  -[UIResponder firstResponder](self, "firstResponder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  i = objc_msgSend(v3, "indexOfObject:", v5);

  if (i == 0x7FFFFFFFFFFFFFFFLL)
  {
    -[UIResponder firstResponder](self, "firstResponder");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i < (unint64_t)objc_msgSend(v3, "count"); ++i)
    {
      objc_msgSend(v3, "objectAtIndex:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "_containsResponder:", v7);

      if ((v9 & 1) != 0)
        break;
    }

  }
  if (i == objc_msgSend(v3, "count"))
  {
    v10 = 0;
  }
  else
  {
    if (i <= 0)
      i = objc_msgSend(v3, "count");
    objc_msgSend(v3, "objectAtIndex:", i - 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

- (id)_nextKeyResponder
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t i;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  unint64_t v12;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _rootForKeyResponderCycle](self, "_rootForKeyResponderCycle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_collectKeyViews:", v3);

  objc_msgSend(v3, "sortUsingSelector:", sel__topToBottomLeftToRightViewCompare_);
  -[UIResponder firstResponder](self, "firstResponder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {

  }
  else if (objc_msgSend(v3, "count"))
  {
    v12 = 0;
    goto LABEL_13;
  }
  -[UIResponder firstResponder](self, "firstResponder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  i = objc_msgSend(v3, "indexOfObject:", v6);

  if (i == 0x7FFFFFFFFFFFFFFFLL)
  {
    -[UIResponder firstResponder](self, "firstResponder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i < objc_msgSend(v3, "count"); ++i)
    {
      objc_msgSend(v3, "objectAtIndex:", i);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "_containsResponder:", v8);

      if ((v10 & 1) != 0)
        break;
    }

  }
  if (i != objc_msgSend(v3, "count"))
  {
    v12 = (i + 1) % objc_msgSend(v3, "count");
LABEL_13:
    objc_msgSend(v3, "objectAtIndex:", v12);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  v11 = 0;
LABEL_14:

  return v11;
}

- (id)_rootForKeyResponderCycle
{
  UIView *v3;
  void *v4;
  void *v5;
  UIView *v6;

  if (-[UIView _isRootForKeyResponderCycle](self, "_isRootForKeyResponderCycle"))
  {
    v3 = self;
  }
  else
  {
    -[UIView _rootForKeyResponderCycle](-[UIView superview](self, "superview"), "_rootForKeyResponderCycle");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      v6 = v4;
    }
    else
    {
      -[UIView window](self, "window");
      v6 = (UIView *)objc_claimAutoreleasedReturnValue();
    }
    v3 = v6;

  }
  return v3;
}

- (BOOL)_isRootForKeyResponderCycle
{
  return (*(_QWORD *)&self->_viewFlags >> 31) & 1;
}

- (void)_collectKeyViews:(id)a3
{
  -[UIView _collectKeyViews:visibilityTest:passingTest:](self, "_collectKeyViews:visibilityTest:passingTest:", a3, &__block_literal_global_2581, &__block_literal_global_2582);
}

- (void)_setFirstResponder:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  objc_super v22;

  v4 = a3;
  v22.receiver = self;
  v22.super_class = (Class)UIView;
  -[UIResponder _setFirstResponder:](&v22, sel__setFirstResponder_, v4);
  v5 = v4;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = 128;
  v21 = v5;
  -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v6);

}

+ (void)_setIsResponderAncestorOfFirstResponder:(void *)a3 startingAtFirstResponder:
{
  void *v4;
  id v5;
  id v6;

  v6 = a3;
  objc_opt_self();
  if (v6)
  {
    v4 = v6;
    do
    {
      if (_IsKindOfUIView((uint64_t)v4))
      {
        objc_msgSend(v4, "_setIsAncestorOfFirstResponder:", a2);
        v5 = (id)objc_msgSend(v4, "superview");
      }
      else
      {
        v5 = (id)objc_msgSend(v4, "nextResponder");
      }
      v4 = v5;
    }
    while (v5);
  }

}

- (void)_setIsAncestorOfFirstResponder:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x10000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFFFFFEFFFFLL | v3;
}

- (void)_clearBecomeFirstResponderWhenCapable
{
  *(_QWORD *)&self->_viewFlags &= ~0x800uLL;
}

+ (void)transitionWithView:(UIView *)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", view, options, 0, animations, 0, 0, duration, 0.0, completion);
}

- (void)_removeAllAnimations:(BOOL)a3
{
  _BOOL4 v3;
  UIView *v4;
  CALayer *v5;
  CALayer *layer;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v3 = a3;
  v4 = self;
  v20 = *MEMORY[0x1E0C80C00];
  if (!-[UIView _ignoreRemoveAllAnimations](self, "_ignoreRemoveAllAnimations"))
  {
    v5 = (CALayer *)-[UIView _backing_outermostLayer](v4);
    layer = v4->_layer;
    -[CALayer removeAllAnimations](v5, "removeAllAnimations");
    if (layer != v5)
      -[CALayer removeAllAnimations](layer, "removeAllAnimations");
    if (v3)
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      -[UIView _allSubviews](v4, "_allSubviews", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v8)
      {
        v9 = v8;
        v10 = 0;
        v11 = *(_QWORD *)v16;
        do
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(_QWORD *)v16 != v11)
              objc_enumerationMutation(v7);
            v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
            objc_msgSend(v13, "_removeAllAnimations:", 1);
            if (v10 & 1 | ((__shouldTrackForAnimationRestoration & 1) == 0))
              v10 |= __shouldTrackForAnimationRestoration;
            else
              v10 = objc_msgSend(v13, "_wantsAnimationRestoration");
          }
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        }
        while (v9);

        if (v4 != 0 && (v10 & 1) != 0)
        {
          do
          {
            v14 = *(_QWORD *)((char *)&v4->_viewFlags + 20);
            if ((v14 & 0x200000000) != 0)
              break;
            *(_QWORD *)((char *)&v4->_viewFlags + 20) = v14 | 0x200000000;
            if ((v14 & 0x400000000) != 0)
              break;
            v4 = (UIView *)-[UIView superview](v4, "superview");
          }
          while (v4);
        }
      }
      else
      {

      }
    }
  }
}

- (BOOL)_ignoreRemoveAllAnimations
{
  return 0;
}

+ (id)appearance
{
  return +[_UIAppearance _appearanceForClass:withContainerList:](_UIAppearance, "_appearanceForClass:withContainerList:", a1, 0);
}

+ (id)appearanceWhenContainedInInstancesOfClasses:(id)a3
{
  void *v4;
  void *v5;

  _UIInternalContainerClassArrayForContainerClassArray(a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "_appearanceWhenContainedIn:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

+ (id)_appearanceWhenContainedIn:(id)a3
{
  return +[_UIAppearance _appearanceForClass:withContainerList:](_UIAppearance, "_appearanceForClass:withContainerList:", a1, a3);
}

+ (id)appearanceMatchingProperties:(id)a3 whenContainedInInstancesOfClasses:(id)a4
{
  id v6;
  void *v7;
  void *v8;

  v6 = a3;
  _UIInternalContainerClassArrayForContainerClassArray(a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIPropertyBasedAppearance _appearanceMatchingProperties:forClass:withContainerList:](_UIPropertyBasedAppearance, "_appearanceMatchingProperties:forClass:withContainerList:", v6, a1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (void)_addBoundingPathChangeObserver:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSMapTable *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  NSMapTable *tablea;
  NSMapTable *table;

  v4 = a3;
  objc_getAssociatedObject(self, &_UIBoundingPathChangeObserversKey);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = v5;
    tablea = (NSMapTable *)objc_msgSend(v5, "copy");

    v7 = tablea;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 517, 1282);
    v7 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
  }
  table = v7;
  objc_setAssociatedObject(self, &_UIBoundingPathChangeObserversKey, v7, (void *)1);
  v8 = -[NSMapTable count](table, "count");
  v9 = (char *)NSMapGet(table, v4);
  NSMapInsert(table, v4, v9 + 1);

  v10 = -[NSMapTable count](table, "count");
  if (!v8 && v10)
  {
    -[UIView _registerForGeometryChanges](self, "_registerForGeometryChanges");
    -[UIView window](self, "window");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _addBoundingPathRotationNotificationsForWindow:](self, v11);

  }
}

- (void)_addBoundingPathRotationNotificationsForWindow:(void *)a1
{
  id v3;
  void *v4;
  _UIViewWindowRotationNotificationObserver *v5;
  id v6;
  id *v7;
  id *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  objc_super v14;

  v3 = a2;
  if (a1 && v3)
  {
    v13 = v3;
    objc_getAssociatedObject(a1, &_UIBoundingPathWindowRotationObserverKey);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", sel__addBoundingPathRotationNotificationsForWindow_, a1, CFSTR("UIView.m"), 21841, CFSTR("Attempted to register for bounding path window rotation notifications while already registered."));

    }
    v5 = [_UIViewWindowRotationNotificationObserver alloc];
    v6 = a1;
    if (v5
      && (v14.receiver = v5,
          v14.super_class = (Class)_UIViewWindowRotationNotificationObserver,
          (v7 = (id *)objc_msgSendSuper2(&v14, sel_init)) != 0))
    {
      v8 = v7;
      objc_storeWeak(v7 + 1, v6);

      v9 = v13;
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObserver:selector:name:object:", v8, sel_windowWillAnimateRotation_, CFSTR("UIWindowWillAnimateRotationNotification"), v9);

    }
    else
    {

      v11 = v13;
      v8 = 0;
    }

    objc_setAssociatedObject(v6, &_UIBoundingPathWindowRotationObserverKey, v8, (void *)1);
    v3 = v13;
  }

}

- (void)_registerForGeometryChanges
{
  int has_internal_diagnostics;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  int v9;
  UIView *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v4 = *((_DWORD *)&self->_viewFlags + 4) & 0x3C;
  if (has_internal_diagnostics)
  {
    if (v4 == 60)
    {
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        v9 = 138412290;
        v10 = self;
        _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "Attempted to register for geometry changes on a view more times than the maximum supported. View: %@", (uint8_t *)&v9, 0xCu);
      }

    }
  }
  else if (v4 == 60)
  {
    v7 = _registerForGeometryChanges___s_category;
    if (!_registerForGeometryChanges___s_category)
    {
      v7 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v7, (unint64_t *)&_registerForGeometryChanges___s_category);
    }
    v8 = *(NSObject **)(v7 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 138412290;
      v10 = self;
      _os_log_impl(&dword_185066000, v8, OS_LOG_TYPE_ERROR, "Attempted to register for geometry changes on a view more times than the maximum supported. View: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  if ((~*((_DWORD *)&self->_viewFlags + 4) & 0x3CLL) != 0)
  {
    -[UIView superview](self, "superview");
    v5 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    -[UIView _addGeometryChangeObserver:](v5, self);

    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFFC3 | (4
                                                                                          * (((*((_DWORD *)&self->_viewFlags
                                                                                               + 4) >> 2)
                                                                                            + 1) & 0xF));
  }
}

- (void)_addGeometryChangeObserver:(_QWORD *)a1
{
  id v3;
  NSMapTable *v4;
  char *v5;
  void *v6;
  void *key;

  v3 = a2;
  if (a1)
  {
    key = v3;
    if ((a1[14] & 0x8000000000000000) != 0)
    {
      objc_getAssociatedObject(a1, &_UIGeometryObserversKey);
      v4 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithKeyOptions:valueOptions:", 517, 1282);
      v4 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
      objc_setAssociatedObject(a1, &_UIGeometryObserversKey, v4, (void *)1);
      a1[14] |= 0x8000000000000000;
    }
    v5 = (char *)NSMapGet(v4, key);
    NSMapInsert(v4, key, v5 + 1);
    objc_msgSend(a1, "superview");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _addGeometryChangeObserver:](v6, key);

    v3 = key;
  }

}

+ (void)_performWithState:(id)a3 trackingIdentifier:(id)a4 duration:(double)a5 delay:(double)a6 animations:(id)a7
{
  id v12;
  id v13;
  id v14;
  char v15;
  void (**v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;

  v24 = a3;
  v12 = a4;
  v13 = (id)__currentViewAnimationState;
  v14 = (id)qword_1EDDCA648;
  v15 = byte_1EDDCA602;
  objc_storeStrong((id *)&qword_1EDDCA648, a4);
  v16 = (void (**)(_QWORD))a7;
  objc_msgSend(v24, "_prepareForViewAnimationAfterPush");
  objc_storeStrong((id *)&__currentViewAnimationState, a3);
  v17 = *((_QWORD *)v24 + 5);
  if (a5 >= 0.0)
    *((double *)v24 + 5) = a5;
  v18 = *((_QWORD *)v24 + 6);
  if (a6 >= 0.0)
    *((double *)v24 + 6) = a6;
  v16[2](v16);

  objc_msgSend(v24, "pop");
  v19 = v24;
  if (!*((_DWORD *)v24 + 42) && (*((_BYTE *)v24 + 173) & 1) == 0)
  {
    objc_msgSend(v24, "sendDelegateAnimationDidStop:finished:", 0, 1);
    v19 = v24;
  }
  if (a5 != 0.0)
    v19[5] = v17;
  if (a6 != 0.0)
    v19[6] = v18;
  v20 = (void *)qword_1EDDCA648;
  qword_1EDDCA648 = (uint64_t)v14;
  v21 = v14;

  v22 = (void *)__currentViewAnimationState;
  __currentViewAnimationState = (uint64_t)v13;
  v23 = v13;

  byte_1EDDCA602 = v15;
}

+ (void)modifyTrackedAnimations:(char)a3 removeOnCompletion:(void *)a4 animationFactory:(void *)a5 block:
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  char v16;

  v8 = a4;
  v9 = a5;
  v10 = a2;
  objc_opt_self();
  v11 = v8;
  v12 = v9;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __modifyTrackedAnimationsWithFactory_block_invoke;
  v13[3] = &unk_1E16EBFB0;
  v14 = v11;
  v15 = v12;
  v16 = a3;
  mapTrackedAnimations((uint64_t)v10, v13);

}

- (void)setAnchorPoint:(CGPoint)anchorPoint
{
  double y;
  double x;
  double v6;
  double v7;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  y = anchorPoint.y;
  x = anchorPoint.x;
  -[UIView anchorPoint](self, "anchorPoint");
  if (v6 != x || v7 != y)
  {
    v9 = v6;
    v10 = v7;
    +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "willSendSetAnchorPoint:toLayerOfView:", self, x, y);

    -[UIView _backing_setAnchorPoint:]((uint64_t)self, x, y);
    -[UIView _invalidateAutoresizingConstraints]((uint64_t)self);
    if (self)
    {
      if (*((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((_QWORD *)&self->_viewFlags + 1) & 0x8000000000000000)
      {
        v28 = 0;
        v27 = 0u;
        v26 = 0u;
        v25 = 0u;
        v24 = 0u;
        v23 = 0u;
        v22 = 0u;
        v21 = 0u;
        v20 = 0u;
        v19 = 0u;
        v18 = 0u;
        v15 = 0u;
        v14 = 0u;
        v13 = 0u;
        v12 = 512;
        v16 = v9;
        v17 = v10;
        -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v12);
      }
    }
  }
}

- (void)_backing_setAnchorPoint:(double)a3
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 176);
    if (!v6 || (v7 = *(id *)(v6 + 8), (v8 = v7) == 0))
    {
      v8 = 0;
      v7 = *(id *)(a1 + 168);
    }
    v9 = v8;
    objc_msgSend(v7, "setAnchorPoint:", a2, a3);

  }
}

- (double)_backing_anchorPoint
{
  uint64_t v2;
  id v3;
  void *v4;
  double v5;
  double v6;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2 || (v3 = *(id *)(v2 + 8), (v4 = v3) == 0))
  {
    v4 = 0;
    v3 = *(id *)(a1 + 168);
  }
  objc_msgSend(v3, "anchorPoint");
  v6 = v5;

  return v6;
}

- (void)_backing_removePrivateSubview:(uint64_t)a1
{
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD *v8;

  if (a1)
  {
    *(_QWORD *)(a2 + 124) &= ~0x1000000000uLL;
    objc_msgSend((id)a2, "removeFromSuperview");
    v4 = *(_QWORD **)(a1 + 176);
    if (v4)
      v4 = (_QWORD *)v4[3];
    v8 = v4;
    objc_msgSend(v8, "removeObject:", a2);
    if (!objc_msgSend(v8, "count"))
    {

      -[_UICollectionCompositionalLayoutSolverOptions setLayoutAttributesClass:](*(_QWORD *)(a1 + 176), 0);
      v8 = 0;
    }
    -[UIContentUnavailableImageProperties _setTintColor:](*(_QWORD *)(a1 + 176), 0);
    -[UIView _backing_unwrapIfPossible](a1);
    v5 = *(_QWORD *)(a1 + 176);
    if (v5)
    {
      v6 = *(id *)(v5 + 8);
      v7 = v6;
      if (v6)
      {
        if (objc_msgSend(v6, "needsLayout"))
          objc_msgSend(*(id *)(a1 + 168), "setNeedsLayout");
      }
    }
    else
    {
      v7 = 0;
    }

  }
}

- (void)_backing_unwrapIfPossible
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  _QWORD *v17;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 176);
    if (v2)
      v2 = (_QWORD *)v2[3];
    v17 = v2;
    if (objc_msgSend(v17, "count"))
      goto LABEL_17;
    v3 = *(_QWORD **)(a1 + 176);
    if (v3)
      v3 = (_QWORD *)v3[1];
    v4 = v3;
    objc_msgSend(v4, "filters");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count"))
    {
LABEL_16:

LABEL_17:
      return;
    }
    v6 = *(_QWORD **)(a1 + 176);
    if (v6)
      v6 = (_QWORD *)v6[5];
    v7 = v6;
    objc_msgSend(v7, "contentEffects");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "count"))
    {
LABEL_15:

      goto LABEL_16;
    }
    v9 = *(_QWORD **)(a1 + 176);
    if (v9)
      v9 = (_QWORD *)v9[5];
    v10 = v9;
    if ((objc_msgSend(v10, "_hasDeferredAnimations") & 1) != 0)
    {

      goto LABEL_15;
    }
    v11 = *(_QWORD *)(a1 + 176);
    if (v11)
      v12 = *(void **)(v11 + 40);
    else
      v12 = 0;
    v13 = objc_msgSend(v12, "reentrantCount");

    if (!v13)
    {
      v14 = *(_QWORD *)(a1 + 176);
      if (v14)
        v15 = *(void **)(v14 + 8);
      else
        v15 = 0;
      v16 = objc_msgSend(v15, "needsLayout");
      -[UIView _backing_unwrapLayer](a1);
      if (v16)
        objc_msgSend(*(id *)(a1 + 168), "setNeedsLayout");
    }
  }
}

- (void)_backing_unwrapLayer
{
  _BOOL8 v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  _OWORD v22[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  if (*(_QWORD *)(a1 + 176))
  {
    v2 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
    v3 = *(_QWORD **)(a1 + 176);
    if (v3)
      v3 = (_QWORD *)v3[1];
    v4 = v3;
    objc_msgSend(v4, "superlayer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(id *)(a1 + 168);
    objc_msgSend(v6, "removeFromSuperlayer");
    objc_msgSend(v5, "insertSublayer:below:", v6, v4);
    objc_msgSend(v4, "anchorPoint");
    objc_msgSend(v6, "setAnchorPoint:");
    objc_msgSend(v4, "position");
    objc_msgSend(v6, "setPosition:");
    objc_msgSend(v6, "bounds");
    v8 = v7;
    objc_msgSend(v6, "bounds");
    v10 = v9;
    objc_msgSend(v4, "bounds");
    v12 = v11;
    objc_msgSend(v4, "bounds");
    objc_msgSend(v6, "setBounds:", v8, v10, v12);
    if (v4)
    {
      objc_msgSend(v4, "transform");
    }
    else
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
    }
    v22[4] = v27;
    v22[5] = v28;
    v22[6] = v29;
    v22[7] = v30;
    v22[0] = v23;
    v22[1] = v24;
    v22[2] = v25;
    v22[3] = v26;
    objc_msgSend(v6, "setTransform:", v22);
    objc_msgSend(v6, "setHidden:", objc_msgSend(v4, "isHidden"));
    objc_msgSend(v4, "opacity");
    objc_msgSend(v6, "setOpacity:");
    objc_msgSend(v6, "setAllowsHitTesting:", objc_msgSend(v4, "allowsHitTesting"));
    objc_msgSend(v6, "setHitTestsAsOpaque:", objc_msgSend(v4, "hitTestsAsOpaque"));
    -[UIView _safeMaskView]((void *)a1);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v13)
    {
      *(_QWORD *)(v13 + 124) &= ~0x1000000000000uLL;
      v15 = -[UIView _intermediateLayerMaskFrameOrigin]((void *)v13);
      v17 = v16;
      objc_msgSend(v14, "frame");
      v19 = v18;
      objc_msgSend(v14, "frame");
      objc_msgSend(v14, "setFrame:", v15, v17, v19);
      objc_msgSend(v14, "layer");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setMask:", v20);

    }
    objc_msgSend(v4, "removeFromSuperlayer");
    v21 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;

    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", v2);
    -[UIView _delegateOutermostLayerDidChange]((char *)a1);

  }
}

- (void)_backing_insertSubview:(_QWORD *)a3 belowSubview:
{
  void *v4;
  void *v5;
  id v6;

  if (a1)
  {
    v4 = *(void **)(a1 + 168);
    -[UIView _backing_outermostLayer](a2);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[UIView _backing_outermostLayer](a3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "insertSublayer:below:", v6, v5);

  }
}

- (void)_backing_wrapLayerInIntermediate
{
  _UIViewBackingAux *v2;
  void *v3;
  _BOOL8 v4;
  _UIMultiLayer *v5;
  double v6;
  double v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;
  double MidX;
  void *v13;
  __int128 v14;
  double v15;
  void *v16;
  id v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  _OWORD v29[3];
  _OWORD v30[8];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[16];
  CGRect v40;
  CGRect v41;

  if (!*(_QWORD *)(a1 + 176))
  {
    v2 = objc_alloc_init(_UIViewBackingAux);
    v3 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v2;

    if (objc_msgSend((id)a1, "__isKindOfUIWindow"))
    {
      if (os_variant_has_internal_diagnostics())
      {
        __UIFaultDebugAssertLog();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_185066000, v28, OS_LOG_TYPE_FAULT, "UIWindow can not become multi-layered. The behavior is undefined.", buf, 2u);
        }

      }
      else
      {
        v26 = _backing_wrapLayerInIntermediate___s_category;
        if (!_backing_wrapLayerInIntermediate___s_category)
        {
          v26 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v26, (unint64_t *)&_backing_wrapLayerInIntermediate___s_category);
        }
        v27 = *(NSObject **)(v26 + 8);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_185066000, v27, OS_LOG_TYPE_ERROR, "UIWindow can not become multi-layered. The behavior is undefined.", buf, 2u);
        }
      }
    }
    v4 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
    v5 = objc_alloc_init(_UIMultiLayer);
    objc_msgSend(*(id *)(a1 + 168), "anchorPoint");
    -[_UIMultiLayer setAnchorPoint:](v5, "setAnchorPoint:");
    objc_msgSend(*(id *)(a1 + 168), "position");
    -[_UIMultiLayer setPosition:](v5, "setPosition:");
    objc_msgSend(*(id *)(a1 + 168), "bounds");
    v7 = v6;
    objc_msgSend(*(id *)(a1 + 168), "bounds");
    -[_UIMultiLayer setBounds:](v5, "setBounds:", 0.0, 0.0, v7);
    v8 = *(void **)(a1 + 168);
    if (v8)
    {
      objc_msgSend(v8, "transform");
    }
    else
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
    }
    v30[4] = v35;
    v30[5] = v36;
    v30[6] = v37;
    v30[7] = v38;
    v30[0] = v31;
    v30[1] = v32;
    v30[2] = v33;
    v30[3] = v34;
    -[_UIMultiLayer setTransform:](v5, "setTransform:", v30);
    -[_UIMultiLayer setHidden:](v5, "setHidden:", objc_msgSend(*(id *)(a1 + 168), "isHidden"));
    objc_msgSend(*(id *)(a1 + 168), "opacity");
    -[_UIMultiLayer setOpacity:](v5, "setOpacity:");
    -[_UIMultiLayer setAllowsHitTesting:](v5, "setAllowsHitTesting:", objc_msgSend(*(id *)(a1 + 168), "allowsHitTesting"));
    -[_UIMultiLayer setHitTestsAsOpaque:](v5, "setHitTestsAsOpaque:", objc_msgSend(*(id *)(a1 + 168), "hitTestsAsOpaque"));
    -[UIView _safeMaskView]((void *)a1);
    v9 = (char *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      objc_msgSend(v9, "layer");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIMultiLayer setMask:](v5, "setMask:", v11);

      *(_QWORD *)(v10 + 124) |= 0x1000000000000uLL;
      objc_msgSend(*(id *)(a1 + 168), "bounds");
      -[UIView _setIntermediateLayerMaskFrameOrigin:](v10);
    }
    objc_msgSend(*(id *)(a1 + 168), "setAnchorPoint:", 0.5, 0.5);
    -[_UIMultiLayer bounds](v5, "bounds");
    MidX = CGRectGetMidX(v40);
    -[_UIMultiLayer bounds](v5, "bounds");
    objc_msgSend(*(id *)(a1 + 168), "setPosition:", MidX, CGRectGetMidY(v41));
    v13 = *(void **)(a1 + 168);
    v14 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    v29[0] = *MEMORY[0x1E0C9BAA8];
    v29[1] = v14;
    v29[2] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    objc_msgSend(v13, "setAffineTransform:", v29);
    objc_msgSend(*(id *)(a1 + 168), "setHidden:", 0);
    LODWORD(v15) = 1.0;
    objc_msgSend(*(id *)(a1 + 168), "setOpacity:", v15);
    objc_msgSend(*(id *)(a1 + 168), "superlayer");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(id *)(a1 + 168);
    if (v16)
    {
      objc_msgSend(v16, "sublayers");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "containsObject:", *(_QWORD *)(a1 + 168));

      if (v19)
      {
        objc_msgSend(v16, "replaceSublayer:with:", *(_QWORD *)(a1 + 168), v5);
      }
      else
      {
        objc_msgSend(v16, "mask");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(a1 + 168);

        if (v20 == v21)
        {
          objc_msgSend(v16, "setMask:", v5);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "handleFailureInMethod:object:file:lineNumber:description:", sel__backing_wrapLayerInIntermediate, a1, CFSTR("_UIViewBacking.m"), 335, CFSTR("Layer has a superlayer but is neither a sublayer nor a mask"));

        }
      }
    }
    if (*(_QWORD *)(a1 + 64))
      -[UIBackgroundConfiguration _setCustomView:](*(_QWORD *)(a1 + 176), v5);
    -[_UIMultiLayer addSublayer:](v5, "addSublayer:", v17);
    -[_UIMultiLayer setDelegate:](v5, "setDelegate:", a1);
    v23 = objc_msgSend(*(id *)(a1 + 168), "needsLayout");
    v24 = *(_QWORD *)(a1 + 176);
    if (v24)
      *(_QWORD *)(v24 + 8) = v5;
    if (v23)
      -[_UIMultiLayer setNeedsLayout](v5, "setNeedsLayout");
    v25 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    -[_UICollectionCompositionalLayoutSolverOptions setLayoutAttributesClass:](*(_QWORD *)(a1 + 176), v25);

    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", v4);
    -[UIView _delegateOutermostLayerDidChange]((char *)a1);

  }
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "keyEnumerator", 0), "allObjects");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        -[UIView _finishTemporaryInternalConstraints:withEngine:](*(void **)(*((_QWORD *)&v7 + 1) + 8 * v6), (void *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6)), *(void **)(a1 + 32));
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

- (void)_finishTemporaryInternalConstraints:(void *)a3 withEngine:
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *ContentSize;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = result;
    objc_msgSend(result, "_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:", -[UIView _nsis_compatibleBoundsInEngine:](result, a3));
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v23 != v8)
            objc_enumerationMutation(a2);
          objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i), "_removeFromEngine:", a3);
        }
        v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      }
      while (v7);
    }
    ContentSize = -[UIView _generateContentSizeConstraints](v5);
    v11 = objc_msgSend(v5, "_layoutEngine");
    v12 = (void *)objc_msgSend(v5, "_containerForContentSizeConstraints");
    v13 = v12;
    if ((void *)v11 == a3)
    {
      objc_msgSend(v12, "addConstraints:", ContentSize);
      return -[UIView _setContentSizeConstraints:](v5, (uint64_t)ContentSize);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      result = (void *)objc_msgSend(ContentSize, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      if (result)
      {
        v14 = result;
        v15 = *(_QWORD *)v19;
        do
        {
          v16 = 0;
          do
          {
            if (*(_QWORD *)v19 != v15)
              objc_enumerationMutation(ContentSize);
            v17 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v16);
            objc_msgSend(v17, "setContainer:", v13);
            objc_msgSend(v17, "_addToEngine:", a3);
            v16 = (char *)v16 + 1;
          }
          while (v14 != v16);
          result = (void *)objc_msgSend(ContentSize, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          v14 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

- (void)addConstraints:(NSArray *)constraints
{
  id v6;
  _QWORD v7[6];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 1265, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[constraints isKindOfClass:[NSArray class]]"));
  if (-[NSArray count](constraints, "count"))
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __50__UIView_UIConstraintBasedLayout__addConstraints___block_invoke;
    v7[3] = &unk_1E16C3CF0;
    v7[4] = constraints;
    v7[5] = self;
    if (self)
    {
      v6 = -[UIView _layoutEngineCreateIfNecessary](self, "_layoutEngineCreateIfNecessary");
      if (v6)
        objc_msgSend(v6, "withAutomaticOptimizationDisabled:", v7);
      else
        __50__UIView_UIConstraintBasedLayout__addConstraints___block_invoke((uint64_t)v7);
    }
  }
}

uint64_t __50__UIView_UIConstraintBasedLayout__addConstraints___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(void **)(a1 + 32);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "addConstraint:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

- (void)addConstraint:(NSLayoutConstraint *)constraint
{
  if (self)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__addConstraint_, self, CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 1140, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[constraint isKindOfClass:[NSLayoutConstraint class]]"));
    -[UIView nsli_addConstraint:](self, "nsli_addConstraint:", constraint);
  }
}

- (double)_preferredMaxLayoutWidth
{
  double result;
  CGRect v4;

  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
    && -[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass")
    && (*(_QWORD *)&self->_viewFlags & 0x4000000000000) == 0)
  {
    -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:", -[UIView _nsis_compatibleBoundsInEngine:](self, -[UIView _layoutEngine](-[UIView superview](self, "superview"), "_layoutEngine")));
    return CGRectGetWidth(v4);
  }
  else if (-[UIView _axesForDerivingIntrinsicContentSizeFromLayoutSize](self, "_axesForDerivingIntrinsicContentSizeFromLayoutSize")&& (*(_QWORD *)&self->_viewFlags & 0x6000000000000) == 0x2000000000000)
  {
    objc_msgSend(objc_getAssociatedObject(self, &_UIViewLayoutEngineWidthStorageKey), "doubleValue");
  }
  else
  {
    return 0.0;
  }
  return result;
}

uint64_t __31__UIView_UIViewRTL___enableRTL__block_invoke()
{
  uint64_t result;

  if (_enableRTL_result && (objc_msgSend((id)UIApp, "_shouldOptOutOfRTL") & 1) == 0)
    result = dyld_program_sdk_at_least();
  else
    result = 0;
  _enableRTL_result = result;
  return result;
}

- (BOOL)_safeAreaWidthExceedsReadableWidth
{
  double v3;
  double v4;
  double v5;
  double v6;

  -[UIView safeAreaInsets](self, "safeAreaInsets");
  return _UIViewSafeAreaWidthExceedsReadableWidth(self, v3, v4, v5, v6);
}

- (CGVector)_scaleFromLayerTransforms
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v22;
  double v23;
  double v24;
  CGVector result;

  -[UIView bounds](self, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[UIView window](self, "window");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "screen");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(v12, "coordinateSpace");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView coordinateSpace](self, "coordinateSpace");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "convertRect:fromCoordinateSpace:", v14, v4, v6, v8, v10);
    v16 = v15;
    v18 = v17;

    if (v16 == 0.0 || v8 == 0.0)
      v20 = 1.0;
    else
      v20 = v16 / v8;
    if (v18 == 0.0 || v10 == 0.0)
      v22 = 1.0;
    else
      v22 = v18 / v10;
  }
  else
  {
    v22 = 1.0;
    v20 = 1.0;
  }

  v23 = v20;
  v24 = v22;
  result.dy = v24;
  result.dx = v23;
  return result;
}

- (void)_noteTraitsDidChangeRecursively
{
  _UIViewInvalidateTraitCollectionAndSchedulePropagation((uint64_t)self, 0);
  -[UIView _updateTraitsIfNeededWithBehavior:]((uint64_t)self, 0);
}

- (double)_cornerRadius
{
  void *v2;
  double v3;
  double v4;

  -[UIView layer](self, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cornerRadius");
  v4 = v3;

  return v4;
}

void __26__UIView_addMotionEffect___block_invoke()
{
  _UIMotionEffectsVisitor *v0;

  v0 = -[_UIViewVisitor initWithTraversalDirection:]([_UIMotionEffectsVisitor alloc], "initWithTraversalDirection:", 1);
  +[UIView _addHierarchyTrackingVisitor:](UIView, "_addHierarchyTrackingVisitor:", v0);

}

+ (void)_addHierarchyTrackingVisitor:(id)a3
{
  +[_UIViewVisitor _addHierarchyTrackingVisitor:](_UIViewVisitor, "_addHierarchyTrackingVisitor:", a3);
}

- (void)_accessibilitySetInterfaceStyleIntent:(unint64_t)a3
{
  unint64_t v5;
  uint64_t v6;
  _UIAccessibilityInterfaceStyleVisitor *v7;

  if (_UIViewInstallAccessibilityInterfaceStyleIntentVisitor_onceToken != -1)
    dispatch_once(&_UIViewInstallAccessibilityInterfaceStyleIntentVisitor_onceToken, &__block_literal_global_3360);
  v5 = *((unsigned int *)&self->_viewFlags + 4);
  if (((v5 >> 24) & 3) != a3)
  {
    v6 = *((_QWORD *)&self->_viewFlags + 1);
    *(_QWORD *)&self->_viewFlags = self->_viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) = v6;
    *((_DWORD *)&self->_viewFlags + 4) = v5 & 0xFCFFFFFF | ((a3 & 3) << 24);
    v7 = -[_UIViewVisitor initWithTraversalDirection:]([_UIAccessibilityInterfaceStyleVisitor alloc], "initWithTraversalDirection:", 2);
    -[UIView _receiveVisitor:](self, "_receiveVisitor:", v7);

  }
}

- (UIView)initWithCoder:(NSCoder *)coder
{
  NSCoder *v4;
  UIView *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  objc_class *v27;
  void *v28;
  UIView *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  _BOOL4 v47;
  double v48;
  float v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  CALayer *layer;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t j;
  void *v66;
  int has_internal_diagnostics;
  uint64_t v68;
  void *v69;
  void *v70;
  unint64_t v71;
  NSObject *v72;
  void *v73;
  NSObject *v74;
  UIView *v75;
  $1DC6EB69857CC9E7E7608875A7943F0A *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  char v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _BOOL4 v92;
  int v93;
  void *v94;
  void *v95;
  unint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  unint64_t v101;
  NSObject *v102;
  NSObject *v103;
  void *v104;
  void *v105;
  void *v106;
  $1DC6EB69857CC9E7E7608875A7943F0A *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  objc_super v116[3];
  objc_super v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[128];
  uint8_t v123[128];
  uint8_t buf[4];
  unint64_t v125;
  __int16 v126;
  UIView *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v4 = coder;
  v117.receiver = self;
  v117.super_class = (Class)UIView;
  v5 = -[UIView init](&v117, sel_init);

  if (!v5)
    goto LABEL_117;
  if (!+[UIWindow shouldRestrictViewsForSplashboard](UIWindow, "shouldRestrictViewsForSplashboard"))
    goto LABEL_12;
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  +[UIWindow restrictedSplashboardClasses](UIWindow, "restrictedSplashboardClasses");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v118, buf, 16);
  if (!v7)
    goto LABEL_11;
  v8 = v7;
  v9 = *(_QWORD *)v119;
LABEL_5:
  v10 = 0;
  while (1)
  {
    if (*(_QWORD *)v119 != v9)
      objc_enumerationMutation(v6);
    NSClassFromString(*(NSString **)(*((_QWORD *)&v118 + 1) + 8 * v10));
    if ((objc_opt_isKindOfClass() & 1) != 0)
      break;
    if (v8 == ++v10)
    {
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v118, buf, 16);
      if (!v8)
      {
LABEL_11:

LABEL_12:
        p_viewFlags = &v5->_viewFlags;
        *(_QWORD *)&v5->_viewFlags |= 0x4000000uLL;
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIFrame")))
        {
          -[NSCoder decodeCGRectForKey:](v4, "decodeCGRectForKey:", CFSTR("UIFrame"));
          UIViewCommonInitWithFrame(v5, v12, v13, v14, v15);
        }
        else
        {
          -[NSCoder decodeCGRectForKey:](v4, "decodeCGRectForKey:", CFSTR("UIBounds"));
          v17 = v16;
          v19 = v18;
          v21 = v20;
          v23 = v22;
          -[NSCoder decodeCGPointForKey:](v4, "decodeCGPointForKey:", CFSTR("UICenter"));
          UIViewCommonInitWithFrame(v5, v24 - v21 * 0.5, v25 - v23 * 0.5, v21, v23);
          if (v4)
            -[NSCoder decodeCGAffineTransformForKey:](v4, "decodeCGAffineTransformForKey:", CFSTR("UITransform"));
          else
            memset(v116, 0, sizeof(v116));
          -[UIView setTransform:](v5, "setTransform:", v116);
          if (v17 != *MEMORY[0x1E0C9D538] || v19 != *(double *)(MEMORY[0x1E0C9D538] + 8))
            -[UIView setBounds:](v5, "setBounds:", v17, v19, v21, v23);
        }
        -[UIView setWantsDeepColorDrawing:](v5, "setWantsDeepColorDrawing:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIDeepDrawRect")));
        -[NSCoder decodeDirectionalEdgeInsetsForKey:](v4, "decodeDirectionalEdgeInsetsForKey:", CFSTR("UIHitTestDirectionalInsets"));
        -[UIView setHitTestDirectionalInsets:](v5, "setHitTestDirectionalInsets:");
        -[UIView _tintColorArchivingKey](v5, "_tintColorArchivingKey");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        if (v31)
        {
          _UIViewSetInteractionTintColor(v5, v31);
          if (qword_1EDDCA8A0 != -1)
            dispatch_once(&qword_1EDDCA8A0, &__block_literal_global_3359);
        }
        v107 = &v5->_viewFlags;
        if (-[UIView _shouldDecodeSubviews](v5, "_shouldDecodeSubviews"))
        {
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UISubviews"));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
          if (v33)
          {
            v34 = v33;
            v35 = *(_QWORD *)v113;
            do
            {
              for (i = 0; i != v34; ++i)
              {
                if (*(_QWORD *)v113 != v35)
                  objc_enumerationMutation(v32);
                -[UIView addSubview:](v5, "addSubview:", *(_QWORD *)(*((_QWORD *)&v112 + 1) + 8 * i));
              }
              v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
            }
            while (v34);
          }

          p_viewFlags = &v5->_viewFlags;
        }
        -[UIView setOpaque:](v5, "setOpaque:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIOpaque")));
        -[UIView setHidden:](v5, "setHidden:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIHidden")));
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIBackgroundColor"));
        v37 = objc_claimAutoreleasedReturnValue();
        if (v37)
          -[UIView setBackgroundColor:](v5, "setBackgroundColor:", v37);
        _setTagForView(v5, -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UITag")));
        v38 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIUserInteractionDisabled"));
        v39 = 2;
        if (!v38)
          v39 = 0;
        *(_QWORD *)p_viewFlags = *(_QWORD *)p_viewFlags & 0xFFFFFFFFFFFFFFFDLL | v39;
        if (-[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIFocusInteractionDisabled")))
          v40 = 0x40000;
        else
          v40 = 0;
        *((_DWORD *)p_viewFlags + 4) = *((_DWORD *)p_viewFlags + 4) & 0xFFFBFFFF | v40;
        v41 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIMultipleTouchEnabled"));
        v42 = 0x20000000;
        if (!v41)
          v42 = 0;
        *(_QWORD *)p_viewFlags = *(_QWORD *)p_viewFlags & 0xFFFFFFFFDFFFFFFFLL | v42;
        v43 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIExclusiveTouch"));
        v44 = 0x40000000;
        if (!v43)
          v44 = 0;
        *(_QWORD *)p_viewFlags = *(_QWORD *)p_viewFlags & 0xFFFFFFFFBFFFFFFFLL | v44;
        v45 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIAutoresizeSubviews"));
        v46 = 0x20000;
        if (v45)
          v46 = 0;
        *(_QWORD *)p_viewFlags = *(_QWORD *)p_viewFlags & 0xFFFFFFFFFFFDFFFFLL | v46;
        *(_QWORD *)p_viewFlags = *(_QWORD *)p_viewFlags & 0xFFFFFFFFFF03FFFFLL | ((-[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UIAutoresizingMask")) & 0x3F) << 18);
        v47 = -[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIAlpha"));
        v48 = 1.0;
        if (v47)
        {
          -[NSCoder decodeFloatForKey:](v4, "decodeFloatForKey:", CFSTR("UIAlpha"), 1.0);
          v48 = v49;
        }
        -[UIView setAlpha:](v5, "setAlpha:", v48);
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIClearsContextBeforeDrawing")))
          v50 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIClearsContextBeforeDrawing"));
        else
          v50 = 1;
        -[UIView setClearsContextBeforeDrawing:](v5, "setClearsContextBeforeDrawing:", v50);
        -[UIView setContentMode:](v5, "setContentMode:", -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UIContentMode")));
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIContentStretch")))
        {
          -[NSCoder decodeCGRectForKey:](v4, "decodeCGRectForKey:", CFSTR("UIContentStretch"));
          layer = v5->_layer;
        }
        else
        {
          layer = v5->_layer;
          v51 = 0.0;
          v52 = 0.0;
          v53 = 1.0;
          v54 = 1.0;
        }
        -[CALayer setContentsCenter:](layer, "setContentsCenter:", v51, v52, v53, v54);
        -[UIView setClipsToBounds:](v5, "setClipsToBounds:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIClipsToBounds")));
        if (__invalidatesViewUponCreation)
          -[UIView setNeedsDisplay](v5, "setNeedsDisplay");
        *(_QWORD *)p_viewFlags &= ~0x4000000uLL;
        -[UIView setTranslatesAutoresizingMaskIntoConstraints:](v5, "setTranslatesAutoresizingMaskIntoConstraints:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIViewDoesNotTranslateAutoresizingMaskIntoConstraints")) ^ 1);
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIViewAutolayoutConstraints"));
        v56 = objc_claimAutoreleasedReturnValue();
        if (v56)
          -[UIView addConstraints:](v5, "addConstraints:", v56);
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewContentHuggingPriority")))
        {
          v57 = (void *)MEMORY[0x1E0CB3B18];
          -[NSCoder decodeSizeForKey:](v4, "decodeSizeForKey:", CFSTR("UIViewContentHuggingPriority"));
          objc_msgSend(v57, "valueWithSize:");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_setAssociatedObject(v5, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey, v58, (void *)1);

        }
        v104 = (void *)v56;
        v105 = (void *)v37;
        v106 = v31;
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewContentCompressionResistancePriority")))
        {
          v59 = (void *)MEMORY[0x1E0CB3B18];
          -[NSCoder decodeSizeForKey:](v4, "decodeSizeForKey:", CFSTR("UIViewContentCompressionResistancePriority"));
          objc_msgSend(v59, "valueWithSize:");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_setAssociatedObject(v5, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey, v60, (void *)1);

        }
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIViewLayoutGuides"));
        v108 = 0u;
        v109 = 0u;
        v110 = 0u;
        v111 = 0u;
        v61 = (id)objc_claimAutoreleasedReturnValue();
        v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v108, v122, 16);
        if (v62)
        {
          v63 = v62;
          v64 = *(_QWORD *)v109;
          do
          {
            for (j = 0; j != v63; ++j)
            {
              if (*(_QWORD *)v109 != v64)
                objc_enumerationMutation(v61);
              v66 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * j);
              has_internal_diagnostics = os_variant_has_internal_diagnostics();
              objc_msgSend(v66, "owningView");
              v68 = objc_claimAutoreleasedReturnValue();
              v69 = (void *)v68;
              if (has_internal_diagnostics)
              {
                if ((UIView *)v68 == v5)
                {
LABEL_79:

                  goto LABEL_80;
                }
                objc_msgSend(v66, "owningView");
                v73 = (void *)objc_claimAutoreleasedReturnValue();

                if (v73)
                {
                  __UIFaultDebugAssertLog();
                  v74 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v74, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    v125 = (unint64_t)v66;
                    v126 = 2112;
                    v127 = v5;
                    _os_log_fault_impl(&dword_185066000, v74, OS_LOG_TYPE_FAULT, "layoutGuide's owning view incorrectly decoded, layoutGuide = %@, self = %@", buf, 0x16u);
                  }

                }
              }
              else
              {
                if ((UIView *)v68 == v5)
                  goto LABEL_79;
                objc_msgSend(v66, "owningView");
                v70 = (void *)objc_claimAutoreleasedReturnValue();

                if (v70)
                {
                  v71 = qword_1EDDCA6B0;
                  if (!qword_1EDDCA6B0)
                  {
                    v71 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
                    atomic_store(v71, (unint64_t *)&qword_1EDDCA6B0);
                  }
                  v72 = *(NSObject **)(v71 + 8);
                  if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412546;
                    v125 = (unint64_t)v66;
                    v126 = 2112;
                    v127 = v5;
                    _os_log_impl(&dword_185066000, v72, OS_LOG_TYPE_ERROR, "layoutGuide's owning view incorrectly decoded, layoutGuide = %@, self = %@", buf, 0x16u);
                  }
                }
              }
LABEL_80:
              objc_msgSend(v66, "owningView");
              v75 = (UIView *)objc_claimAutoreleasedReturnValue();

              if (v75 == v5)
                -[UIView _finishDecodingLayoutGuideConnections:]((id *)&v5->super.super.isa, v66);
            }
            v63 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v108, v122, 16);
          }
          while (v63);
        }

        v76 = &v5->_viewFlags;
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewLayoutMargins")))
        {
          -[NSCoder decodeUIEdgeInsetsForKey:](v4, "decodeUIEdgeInsetsForKey:", CFSTR("UIViewLayoutMargins"));
          v78 = v77;
          v80 = v79;
          v82 = v81;
          v84 = v83;
          if (dyld_program_sdk_at_least())
          {
            -[UIView _setRawLayoutMargins:](v5, "_setRawLayoutMargins:", v78, v80, v82, v84);
          }
          else
          {
            v5->_rawLayoutMargins.top = v78;
            v5->_rawLayoutMargins.left = v80;
            v5->_rawLayoutMargins.bottom = v82;
            v5->_rawLayoutMargins.right = v84;
          }
        }
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewLayoutMarginsFollowReadableWidth")))
        {
          -[UIView setLayoutMarginsFollowReadableWidth:](v5, "setLayoutMarginsFollowReadableWidth:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIViewLayoutMarginsFollowReadableWidth")));
        }
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewPreservesSpecificSuperviewMargins")))
        {
          v85 = -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UIViewPreservesSpecificSuperviewMargins"));
          v86 = 0;
          v87 = 0;
          v88 = *((_DWORD *)&v5->_viewFlags + 4);
          v89 = *(_QWORD *)v107;
          v90 = (unint64_t)(v85 & 0xF) << 53;
          v91 = *((_QWORD *)&v5->_viewFlags + 1) & 0xFE1FFFFFFFFFFFFFLL;
          goto LABEL_97;
        }
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewPreservesSuperviewMargins")))
        {
          v92 = -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIViewPreservesSuperviewMargins"));
          v89 = 0;
          v88 = 0;
          if (v92)
            v91 = 0x1E0000000000000;
          else
            v91 = 0;
          v87 = *((_DWORD *)&v5->_viewFlags + 4);
          v86 = *(_QWORD *)v107;
          v90 = *((_QWORD *)&v5->_viewFlags + 1) & 0xFE1FFFFFFFFFFFFFLL;
LABEL_97:
          *(_QWORD *)v107 = v86 | v89;
          *((_QWORD *)&v5->_viewFlags + 1) = v90 | v91;
          *((_DWORD *)&v5->_viewFlags + 4) = v87 | v88;
        }
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewLayoutMarginsAreDirectional")))
        {
          if (-[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", CFSTR("UIViewLayoutMarginsAreDirectional")))
            v93 = 1024;
          else
            v93 = 0;
          *((_DWORD *)&v5->_viewFlags + 4) = *((_DWORD *)&v5->_viewFlags + 4) & 0xFFFFFBFF | v93;
        }
        if (-[NSCoder containsValueForKey:](v4, "containsValueForKey:", CFSTR("UIViewInsetsLayoutMarginsFromSafeArea")))
          *((_QWORD *)&v5->_viewFlags + 1) = *((_QWORD *)&v5->_viewFlags + 1) & 0xE1FFFFFFFFFFFFFFLL | ((-[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UIViewInsetsLayoutMarginsFromSafeArea")) & 0xF) << 57);
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", 0x1E172F620);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        if (v94)
          objc_setAssociatedObject(v5, &_UIAppearanceCustomizedSelectorsAssociationKey, v94, (void *)1);
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIRestorationIdentifier"));
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        if (v95)
          -[UIResponder setRestorationIdentifier:](v5, "setRestorationIdentifier:", v95);
        v96 = -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", CFSTR("UIViewSemanticContentAttribute"));
        if (v96 >= 8)
        {
          if (os_variant_has_internal_diagnostics())
          {
            __UIFaultDebugAssertLog();
            v103 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v103, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 134217984;
              v125 = v96;
              _os_log_fault_impl(&dword_185066000, v103, OS_LOG_TYPE_FAULT, "Decoded invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", buf, 0xCu);
            }

            v76 = &v5->_viewFlags;
          }
          else
          {
            v101 = qword_1EDDCA6B8;
            if (!qword_1EDDCA6B8)
            {
              v101 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
              atomic_store(v101, (unint64_t *)&qword_1EDDCA6B8);
            }
            v102 = *(NSObject **)(v101 + 8);
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134217984;
              v125 = v96;
              _os_log_impl(&dword_185066000, v102, OS_LOG_TYPE_ERROR, "Decoded invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", buf, 0xCu);
            }
          }
        }
        *(_QWORD *)((char *)v76 + 20) = *(_QWORD *)((char *)v76 + 20) & 0xFFFFFFFFFFFE3FFFLL | ((v96 & 7) << 14);
        if (dyld_program_sdk_at_least())
          *((_DWORD *)v76 + 4) = *((_DWORD *)v76 + 4) & 0xFFF7FFFF | ((+[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:](UIView, "userInterfaceLayoutDirectionForSemanticContentAttribute:", (*(_QWORD *)((char *)v76 + 20) >> 14) & 7) == UIUserInterfaceLayoutDirectionRightToLeft) << 19);
        if (_UIConstraintBasedLayoutEngageNonLazily())
          *(_QWORD *)v76 |= 0x400000000000000uLL;
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIViewPreviewingSegueTemplateStorage"));
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIView _setPreviewingSegueTemplateStorage:](v5, "_setPreviewingSegueTemplateStorage:", v97);

        -[UIView _decodeLargeContentViewerPropertiesWithCoder:](v5, "_decodeLargeContentViewerPropertiesWithCoder:", v4);
        -[NSCoder decodeObjectForKey:](v4, "decodeObjectForKey:", CFSTR("UIViewLocalOverrideTraitCollection"));
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        v99 = v98;
        if (v98)
          -[UIView setOverrideUserInterfaceStyle:](v5, "setOverrideUserInterfaceStyle:", objc_msgSend(v98, "userInterfaceStyle"));

LABEL_117:
        v29 = v5;
        goto LABEL_118;
      }
      goto LABEL_5;
    }
  }

  v26 = (void *)MEMORY[0x1E0C99DA0];
  v27 = (objc_class *)objc_opt_class();
  NSStringFromClass(v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "raise:format:", CFSTR("UIWindowRestrictedSplashboardViewException"), CFSTR("Using a WebKit view of class '%@' in a launch storyboard is not allowed."), v28);

  v29 = 0;
LABEL_118:

  return v29;
}

- (void)setWantsDeepColorDrawing:(BOOL)a3
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = *((_DWORD *)&self->_viewFlags + 4);
  if (((((v3 & 0x20000000) == 0) ^ a3) & 1) == 0)
  {
    v4 = *((_QWORD *)&self->_viewFlags + 1);
    v5 = v3 & 0xDFFFFFFF;
    if (a3)
      v6 = 0x20000000;
    else
      v6 = 0;
    *(_QWORD *)&self->_viewFlags = self->_viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) = v4;
    *((_DWORD *)&self->_viewFlags + 4) = v5 | v6;
    -[UIView _setNeedsContentsFormatUpdate](self, "_setNeedsContentsFormatUpdate");
  }
}

- (void)setClearsContextBeforeDrawing:(BOOL)clearsContextBeforeDrawing
{
  -[CALayer setClearsContext:](self->_layer, "setClearsContext:", clearsContextBeforeDrawing);
}

- (void)_decodeLargeContentViewerPropertiesWithCoder:(id)a3
{
  id v4;

  objc_msgSend(a3, "decodeObjectForKey:", CFSTR("UIViewLargeContentStoredProperties"));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[UIView _setLargeContentStoredProperties:](self, "_setLargeContentStoredProperties:", v4);

}

- (id)_tintColorArchivingKey
{
  return CFSTR("UITintColor");
}

- (void)_setPreviewingSegueTemplateStorage:(id)a3
{
  objc_setAssociatedObject(self, sel__previewingSegueTemplateStorage, a3, (void *)1);
}

- (BOOL)_shouldDecodeSubviews
{
  return 1;
}

- (void)_invalidateCalculatedSafeAreas
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 124);
    if ((v2 & 0xA0000000000) == 0x20000000000)
    {
      *(_QWORD *)(a1 + 124) = v2 | 0x80000000000;
      objc_msgSend((id)a1, "setNeedsLayout");
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      objc_msgSend((id)a1, "_allSubviews", 0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)v9;
        do
        {
          v7 = 0;
          do
          {
            if (*(_QWORD *)v9 != v6)
              objc_enumerationMutation(v3);
            -[UIView _invalidateCalculatedSafeAreas](*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v7++));
          }
          while (v5 != v7);
          v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        }
        while (v5);
      }

    }
  }
}

- (void)setFocusEffect:(UIFocusEffect *)focusEffect
{
  uint64_t v4;
  id v5;

  v4 = 0x8000000;
  if (!focusEffect)
    v4 = 0x4000000;
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFF3FFFFFFLL | v4;
  objc_setAssociatedObject(self, &FocusEffectKey, focusEffect, (void *)1);
  -[UIView _focusSystemSceneComponent](self, "_focusSystemSceneComponent");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_requestFocusEffectUpdateToEnvironment:", self);

}

void *__160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_5(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *result;
  void *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(void **)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * i), "_removeFromEngine:", *(_QWORD *)(a1 + 40));
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(void **)(a1 + 48);
  result = (void *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v11), "_addToEngine:", *(_QWORD *)(a1 + 40));
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      result = (void *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      v9 = result;
    }
    while (result);
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    return -[UIView _resetLayoutEngineHostConstraints](*(void **)(a1 + 56));
  return result;
}

- (BOOL)_isInLayoutSubviews
{
  return self->_layoutSubviewsCount != 0;
}

+ (void)_addOrPerformCompletion:(id)a3
{
  void (**v4)(id, uint64_t);

  v4 = (void (**)(id, uint64_t))a3;
  if ((objc_msgSend(a1, "_addCompletion:") & 1) == 0)
    v4[2](v4, 1);

}

- (void)_generateDeferredAnimations:(id)a3
{
  -[UIView _backing__generateDeferredAnimations:]((uint64_t)self, (uint64_t)a3);
}

- (uint64_t)_backing__generateDeferredAnimations:(uint64_t)result
{
  uint64_t v2;
  void *v3;

  if (result)
  {
    v2 = *(_QWORD *)(result + 176);
    if (v2)
      v3 = *(void **)(v2 + 40);
    else
      v3 = 0;
    return objc_msgSend(v3, "_generateDeferredAnimations:", a2);
  }
  return result;
}

+ (BOOL)_addCompletionWithPosition:(id)a3
{
  id v3;
  void *v4;
  char v5;
  _QWORD v7[4];
  id v8;

  v3 = a3;
  if (__currentViewAnimationState)
  {
    objc_msgSend((id)__currentViewAnimationState, "_outerPropertyAnimator:", 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __48__UIView_Animation___addCompletionWithPosition___block_invoke;
      v7[3] = &unk_1E16BDBD8;
      v8 = v3;
      objc_msgSend(v4, "addCompletion:", v7);

      v5 = 1;
    }
    else
    {
      v5 = objc_msgSend((id)__currentViewAnimationState, "_addCompletionWithPosition:", v3);
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_setPresentationControllerToNotifyOnLayoutSubviews:(id)a3
{
  id v4;

  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFDFFFLL | ((unint64_t)(a3 != 0) << 13);
  +[_UIWeakReference weakReferenceWrappingObject:](_UIWeakReference, "weakReferenceWrappingObject:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_UIViewPresentationControllerToNotifyOnLayoutSubviews, v4, (void *)1);

}

- (void)_setCanBeParentTraitEnvironment:(BOOL)a3
{
  int v3;

  if (a3)
    v3 = 0;
  else
    v3 = 0x100000;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFEFFFFF | v3;
}

- (void)_setDraggingSourceDelegate:(id)a3
{
  id v4;

  +[_UIWeakReference weakReferenceWrappingObject:](_UIWeakReference, "weakReferenceWrappingObject:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_UIViewDraggingSourceDelegateStorageKey, v4, (void *)1);

}

- (CGRect)convertRect:(CGRect)a3 fromCoordinateSpace:(id)a4
{
  double height;
  double width;
  double y;
  double x;
  void *v10;
  void *v11;
  void *v12;
  UIView *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (a4 && a4 != self)
  {
    objc_opt_self();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[UIView _window](self, "_window");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a4, "_window");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11 == v12)
      {
        v13 = self;
        v14 = x;
        v15 = y;
        v16 = width;
        v17 = height;
        v18 = a4;
        goto LABEL_9;
      }
    }
    else
    {

    }
    v19 = -[UIView _window](self, "_window");
    if (!v19)
    {
      -[CALayer convertRect:fromLayer:](self->_layer, "convertRect:fromLayer:", 0, x, y, width, height);
      goto LABEL_11;
    }
    v20 = v19;
    objc_msgSend(v19, "convertRect:fromCoordinateSpace:", a4, x, y, width, height);
    v13 = self;
    v18 = v20;
LABEL_9:
    -[UIView convertRect:fromView:](v13, "convertRect:fromView:", v18, v14, v15, v16, v17);
LABEL_11:
    x = v21;
    y = v22;
    width = v23;
    height = v24;
  }
  v25 = x;
  v26 = y;
  v27 = width;
  v28 = height;
  result.size.height = v28;
  result.size.width = v27;
  result.origin.y = v26;
  result.origin.x = v25;
  return result;
}

- (id)focusGuides
{
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x8000) != 0)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    -[UIView _mutableLayoutGuides](self, "_mutableLayoutGuides", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v9);
          if (qword_1EDDCA840 != -1)
            dispatch_once(&qword_1EDDCA840, &__block_literal_global_3324);
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend(v4, "addObject:", v10);
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v7);
    }

    v2 = (void *)objc_msgSend(v4, "copy");
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFF7FFF | ((objc_msgSend(v2, "count") != 0) << 15);

  }
  else
  {
    v2 = 0;
  }
  if (v2)
    v11 = v2;
  else
    v11 = (void *)MEMORY[0x1E0C9AA60];
  v12 = v11;

  return v12;
}

+ (void)_animateWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 animations:(id)a6 start:(id)a7 completion:(id)a8
{
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, a5, 0, a6, a7, 0, a3, a4, a8);
}

- (NSArray)motionEffects
{
  void *v2;

  objc_msgSend((id)_motionEffectEngine, "_motionEffectsForView:", self);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    if (dyld_program_sdk_at_least())
      return (NSArray *)MEMORY[0x1E0C9AA60];
    v2 = 0;
  }
  return (NSArray *)v2;
}

- (void)removeMotionEffect:(UIMotionEffect *)effect
{
  UIMotionEffect *v4;

  v4 = effect;
  if (objc_msgSend((id)_motionEffectEngine, "_motionEffect:belongsToView:"))
  {
    objc_msgSend((id)_motionEffectEngine, "endApplyingMotionEffect:toView:", v4, self);
    -[UIView _dispatchMotionEffectsVisitorWithDelta:](self, -1);
    if ((objc_msgSend((id)_motionEffectEngine, "_hasMotionEffectsForView:", self) & 1) == 0)
    {
      objc_msgSend((id)_motionEffectEngine, "endSuspendingMotionEffectsForView:", self);
      *((_QWORD *)&self->_viewFlags + 1) &= ~0x100000000uLL;
    }
  }

}

uint64_t __54__UIView__recursivelyReconsiderMotionEffectSuspension__block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if (-[UIView _isInHierarchyAllowingMotionEffects]((uint64_t)v2))
  {
    if (v2)
      objc_msgSend((id)_motionEffectEngine, "endSuspendingMotionEffectsForView:", v2);
  }
  else if (v2)
  {
    objc_msgSend((id)_motionEffectEngine, "beginSuspendingMotionEffectsForView:", v2);
  }

  return 1;
}

uint64_t __42__UIView__recursivelySuspendMotionEffects__block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
    objc_msgSend((id)_motionEffectEngine, "beginSuspendingMotionEffectsForView:", a2);
  return 1;
}

- (BOOL)_unapplyMotionEffect:(id)a3
{
  return 0;
}

- (void)addMotionEffect:(UIMotionEffect *)effect
{
  UIMotionEffect *v4;
  UIView *v5;
  _UIMotionEffectEngine *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  int AppBooleanValue;
  Boolean keyExistsAndHasValidFormat;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = effect;
  if (v4)
  {
    v5 = self;
    if (!_motionEffectEngine)
    {
      v6 = objc_alloc_init(_UIMotionEffectEngine);
      v7 = (void *)_motionEffectEngine;
      _motionEffectEngine = (uint64_t)v6;

      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v8 = (id)qword_1EDDCA700;
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v31;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v31 != v11)
              objc_enumerationMutation(v8);
            objc_msgSend((id)_motionEffectEngine, "beginSuspendingForReason:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i));
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        }
        while (v10);
      }

      objc_msgSend((id)qword_1EDDCA700, "removeAllObjects");
      v13 = (void *)qword_1EDDCA700;
      qword_1EDDCA700 = 0;

      if (os_variant_has_internal_diagnostics())
      {
        keyExistsAndHasValidFormat = 0;
        AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("EnableTetheredDisplayPortMode"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat)
        {
          if (AppBooleanValue
            && ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIMotionEffectsEnabledWhenMirroring, (uint64_t)CFSTR("UIMotionEffectsEnabledWhenMirroring"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| !byte_1EDDA8494))
          {
            objc_msgSend((id)_motionEffectEngine, "beginSuspendingForReason:", CFSTR("stevenote"));
          }
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIMotionEffectsEnabledWhenMirroring, (uint64_t)CFSTR("UIMotionEffectsEnabledWhenMirroring"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| !byte_1EDDA8494)
      {
        v15 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("UIScreenModeDidChangeNotification"), 0, 0, &__block_literal_global_3365);
        v16 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("UISceneWillConnectNotification"), 0, 0, &__block_literal_global_3365);
        v17 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("UISceneDidDisconnectNotification"), 0, 0, &__block_literal_global_3365);
        v18 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("UIScreenMirroredScreenDidChangeNotification"), 0, 0, &__block_literal_global_3365);
        _UIViewReconsiderMotionEffectSuspensionForScreenMirroring();
      }
      -[UIView window](v5, "window");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)UIApp;
      if (v19)
      {
        -[UIView window](v5, "window");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v20, "_sceneInterfaceOrientationFromWindow:", v21);

      }
      else
      {
        v22 = objc_msgSend((id)UIApp, "_defaultSceneInterfaceOrientationReturningUnknownForNilScene:", 0);
      }

      objc_msgSend((id)_motionEffectEngine, "_setTargetInterfaceOrientation:", v22);
      v23 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("UIWindowWillAnimateRotationNotification"), 0, 0, &__block_literal_global_3366);
      v24 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("UIApplicationWillEnterForegroundNotification"), 0, 0, &__block_literal_global_3367);
      v25 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("_UIApplicationWillAddDeactivationReasonNotification"), 0, 0, &__block_literal_global_3368);
      v26 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", CFSTR("_UIApplicationDidRemoveDeactivationReasonNotification"), 0, 0, &__block_literal_global_3372);
      v27 = (id)objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", 0x1E1756A00, 0, 0, &__block_literal_global_3373);

    }
    if ((*((_QWORD *)&v5->_viewFlags + 1) & 0x100000000) == 0)
    {
      if ((-[UIView _isInHierarchyAllowingMotionEffects]((uint64_t)v5) & 1) == 0)
        objc_msgSend((id)_motionEffectEngine, "beginSuspendingMotionEffectsForView:", v5);
      *((_QWORD *)&v5->_viewFlags + 1) |= 0x100000000uLL;
      if (qword_1EDDCA708 != -1)
        dispatch_once(&qword_1EDDCA708, &__block_literal_global_965_1);
    }
    objc_msgSend((id)_motionEffectEngine, "beginApplyingMotionEffect:toView:", v4, v5);
    -[UIView _dispatchMotionEffectsVisitorWithDelta:](v5, 1);
  }

}

- (void)_dispatchMotionEffectsVisitorWithDelta:(void *)a1
{
  void *v4;
  _UIViewBlockVisitor *v5;
  void *v6;
  _QWORD aBlock[5];

  if (a1)
  {
    if (!a2)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", sel__dispatchMotionEffectsVisitorWithDelta_, a1, CFSTR("UIView.m"), 9064, CFSTR("Delta should never be zero"));

    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __49__UIView__dispatchMotionEffectsVisitorWithDelta___block_invoke;
    aBlock[3] = &__block_descriptor_40_e16_B16__0__UIView_8l;
    aBlock[4] = a2;
    v4 = _Block_copy(aBlock);
    v5 = -[_UIViewBlockVisitor initWithTraversalDirection:visitorBlock:]([_UIViewBlockVisitor alloc], "initWithTraversalDirection:visitorBlock:", 1, v4);
    objc_msgSend(a1, "_receiveVisitor:", v5);

  }
}

- (UIUserInterfaceStyle)overrideUserInterfaceStyle
{
  UIUserInterfaceStyle v2;
  void *v3;

  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) == 0)
    return 0;
  objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "_containsTraitToken:", 0x1E1A994B0))
    v2 = objc_msgSend(v3, "userInterfaceStyle");
  else
    v2 = UIUserInterfaceStyleUnspecified;

  return v2;
}

- (BOOL)_isView
{
  return 1;
}

- (UITraitCollection)_localOverrideTraitCollection
{
  void *v2;
  id *v3;

  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) != 0)
  {
    objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
    v3 = (id *)objc_claimAutoreleasedReturnValue();
    -[UIBarButtonItemGroup _items](v3);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return (UITraitCollection *)v2;
}

uint64_t __48__UIView_UIViewRTL___legacyRTLPreferenceEnabled__block_invoke()
{
  uint64_t result;

  result = CFPreferencesGetAppBooleanValue(CFSTR("_UIEnableLegacyRTL"), CFSTR("com.apple.UIKit"), 0);
  byte_1EDDCA61B = (_DWORD)result != 0;
  return result;
}

- (_UIFocusPlatformBehavior)_focusBehavior
{
  void *v2;
  void *v3;

  -[UIView _focusSystem](self, "_focusSystem");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "behavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (_UIFocusPlatformBehavior *)v3;
}

- (void)_setTraitStorageConstraints:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  void *v23;
  void *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_alloc(MEMORY[0x1E0C99E60]);
  -[UIView constraints](self, "constraints");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithArray:", v6);

  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v4);
  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v10 = v7;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v31 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
        if ((objc_msgSend(v8, "containsObject:", v15) & 1) == 0)
          objc_msgSend(v9, "addObject:", v15);
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v12);
  }

  v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v17 = v8;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v27;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v27 != v20)
          objc_enumerationMutation(v17);
        v22 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * j);
        if ((objc_msgSend(v10, "containsObject:", v22, (_QWORD)v26) & 1) == 0)
          objc_msgSend(v16, "addObject:", v22);
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v19);
  }

  if (dyld_program_sdk_at_least())
  {
    objc_setAssociatedObject(self, &unk_1EDDCA605, v16, (void *)1);
    objc_setAssociatedObject(self, &unk_1EDDCA606, v9, (void *)1);
    *(_QWORD *)((char *)&self->_viewFlags + 20) |= 0x100000uLL;
    if (dyld_program_sdk_at_least())
    {
      v23 = (void *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate");
      if (objc_msgSend(v23, "__isKindOfUIView"))
        v24 = v23;
      else
        v24 = 0;
      v25 = v24;
      if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v25))
      {
        -[UIView _relaxLayoutEngineHostConstraints](v25);
        *(_QWORD *)(v25 + 124) |= 0x200000uLL;
        objc_msgSend(v25, "setNeedsLayout");
      }

    }
    -[UIView setNeedsUpdateConstraints](self, "setNeedsUpdateConstraints", (_QWORD)v26);
  }
  else
  {
    -[UIView _applyTraitStorageConstraintsByRemoving:adding:](self, (uint64_t)v9, v16);
  }

}

- (double)_findAutolayoutHeightConstraint
{
  void *v2;
  void *v3;
  double v4;
  double v5;

  FindHeightConstraint(self);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "constant");
    v5 = v4;
  }
  else
  {
    v5 = -1.0;
  }

  return v5;
}

- (NSArray)constraints
{
  NSArray *v2;

  v2 = (NSArray *)_UIViewConstraints(self);
  if (dyld_program_sdk_at_least())
    return -[NSArray sortedArrayUsingFunction:context:](-[NSArray sortedArrayUsingFunction:context:](v2, "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_314_1), "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_315_0);
  else
    return v2;
}

- (BOOL)nsli_defaultResolvedValue:(double *)a3 forSymbolicConstant:(id)a4 inConstraint:(id)a5 error:(id *)a6
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BOOL8 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  __CFString *v40;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __CFString *v47;
  objc_class *v48;
  NSString *v49;
  __CFString *v50;
  objc_class *v51;
  const __CFString *v52;
  uint64_t v53;
  objc_class *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  __CFString *v59;
  __CFString *v60;
  NSString *v61;
  uint64_t v62;
  void *v63;
  unsigned int v64;
  unsigned int v65;

  v9 = objc_msgSend(a4, "isEqualToString:", *MEMORY[0x1E0D156A8]);
  if ((v9 & 1) == 0 && !objc_msgSend(a4, "isEqualToString:", *MEMORY[0x1E0D15690]))
  {
    v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unkown symbolic constant: %@"), a4, v58, v60, v61, v62, v63);
    goto LABEL_84;
  }
  v10 = objc_msgSend(a5, "firstAttribute");
  v11 = objc_msgSend(a5, "secondAttribute");
  if (a5)
  {
    v12 = (void *)objc_msgSend((id)objc_msgSend(a5, "firstItem"), "_referenceView");
    v13 = (void *)objc_msgSend((id)objc_msgSend(a5, "secondItem"), "_referenceView");
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = objc_msgSend(a5, "firstItem");
  v15 = objc_msgSend(a5, "secondItem");
  if (v9)
  {
    if (!v12 || (v16 = 1.0, !v13))
    {
      v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ must involve two views"), a4, v58, v60, v61, v62, v63);
LABEL_84:
      v19 = 0.0;
      goto LABEL_85;
    }
  }
  else
  {
    objc_msgSend(a5, "symbolicConstantMultiplier");
    v16 = v18;
    v17 = 0;
    v19 = 8.0;
    if (!v12 || !v13)
    {
LABEL_85:
      if (!a3)
        goto LABEL_87;
      goto LABEL_86;
    }
  }
  v20 = EdgeForAttribute(v10);
  v21 = EdgeForAttribute(v11);
  if (v21 == 5)
    v22 = 6;
  else
    v22 = v21;
  v65 = v20;
  if (!v20 || !(_DWORD)v22)
  {
    if (v20 | v22)
    {
      v27 = 0;
      if (v10 && v11 <= 0x25)
        v27 = qword_1E16E9D88[(int)v11];
      v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Could not find relevant edge for attribute: %@"), v27, v58, v60, v61, v62, v63);
    }
    else
    {
      if (v10 > 0x25)
        v26 = 0;
      else
        v26 = qword_1E16E9D88[(int)v10];
      if (v11 > 0x25)
        v38 = 0;
      else
        v38 = qword_1E16E9D88[(int)v11];
      v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Could not find relevant edges for attributes: %@ and %@"), v26, v38, v60, v61, v62, v63);
    }
    goto LABEL_84;
  }
  v64 = v22;
  if (!v9
    || (v23 = objc_msgSend(v13, "superview"), v24 = objc_msgSend(v12, "superview"), v22 = v64, (void *)v23 != v12)
    && (void *)v24 != v13)
  {
LABEL_19:
    if ((v10 - 1) > 0xB)
      v25 = -1;
    else
      v25 = qword_186685200[(int)v10 - 1];
    if (v25 == v11)
    {
LABEL_31:
      if (v12 != (void *)v14 && v13 != (void *)v15)
      {
        +[UILayoutGuide _defaultSpacingBetweenGuidesForResolvingSymbolicConstant](UILayoutGuide, "_defaultSpacingBetweenGuidesForResolvingSymbolicConstant");
        goto LABEL_75;
      }
      if (v12 == (void *)v14)
      {
        v28 = v12;
        if (v13 == (void *)v15)
        {
          v29 = v65;
          v30 = v10;
          v31 = v13;
          v32 = v22;
          v45 = v11;
          goto LABEL_74;
        }
        v29 = v65;
        v30 = v10;
        v31 = 0;
        v32 = v22;
      }
      else
      {
        v28 = v13;
        v29 = v22;
        v30 = v11;
        v31 = 0;
        v32 = v65;
      }
      v45 = 0;
LABEL_74:
      objc_msgSend(v28, "_autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:", v29, v30, v31, v32, v45, v16);
LABEL_75:
      if (v19 < 0.0)
      {
        v46 = (void *)MEMORY[0x1E0CB3940];
        v47 = off_1E16E9D30[(int)v65 - 1];
        v48 = (objc_class *)objc_opt_class();
        v49 = NSStringFromClass(v48);
        v50 = off_1E16E9D58[(int)v64 - 1];
        v51 = (objc_class *)objc_opt_class();
        v60 = v50;
        v61 = NSStringFromClass(v51);
        v57 = v47;
        v59 = (__CFString *)v49;
        v52 = CFSTR("Aligning the %@ edge of a %@ with the %@ edge of a %@ is not recommended. Use an explicit constant for your constraint to override this.");
LABEL_77:
        v39 = v46;
LABEL_83:
        v17 = objc_msgSend(v39, "stringWithFormat:", v52, v57, v59, v60, v61, v62, v63);
        goto LABEL_84;
      }
      goto LABEL_93;
    }
    if (v10 <= 0x25
      && ((1 << v10) & 0x3F001FFE7FLL) != 0
      && v11 <= 0x25
      && ((1 << v11) & 0x3F001FFE7FLL) != 0)
    {
      if ((v9 & 1) != 0)
      {
        if (v10 == 12 && v11 == 3 || v10 == 4 && v11 == 11)
          goto LABEL_31;
      }
      else if (((1 << v11) & 0x2A00119D19) != 0)
      {
        if (!((v10 > 0x25) | (0x15FFEE62E6uLL >> v10) & 1))
          goto LABEL_31;
      }
      else if ((v10 > 0x25) | (0x15FFEE62E6uLL >> v10) & 1)
      {
        goto LABEL_31;
      }
    }
    v39 = (void *)MEMORY[0x1E0CB3940];
    if (v10 > 0x25)
      v40 = 0;
    else
      v40 = (__CFString *)qword_1E16E9D88[(int)v10];
    if (v11 > 0x25)
      v53 = 0;
    else
      v53 = qword_1E16E9D88[(int)v11];
    v62 = v53;
    v63 = v13;
    v60 = v40;
    v61 = (NSString *)v12;
    v57 = a4;
    v59 = (__CFString *)a4;
    v52 = CFSTR("%@ between sibling views must be between opposite attributes. Can't put %@ between %@ of %@ and %@ of %@");
    goto LABEL_83;
  }
  if (v10 != v11)
  {
    v42 = (void *)v24 != v13 || v13 != (void *)v15;
    v43 = v12 == (void *)v14 && v23 == (_QWORD)v12;
    if (v43 || !v42)
    {
      v44 = v10 > 0x25 ? 0 : qword_1E16E9D88[(int)v10];
      v56 = v11 >= 0x26 ? 0 : qword_1E16E9D88[(int)v11];
      v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Attributes must match for %@ between view and superview.\nmismatched attributes: %@"), a4, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ of %@, and %@ of %@"), v44, v12, v56, v13));
      v22 = v64;
      if (v17)
        goto LABEL_84;
    }
    goto LABEL_19;
  }
  if ((void *)v24 == v13)
  {
    v33 = v13 != (void *)v15;
    v34 = v12;
    v35 = v65;
    v36 = v10;
    v37 = v13;
  }
  else
  {
    v33 = v12 != (void *)v14;
    v34 = v13;
    v35 = v64;
    v36 = v10;
    v37 = v12;
  }
  objc_msgSend(v34, "_autolayoutSpacingAtEdge:forAttribute:inContainer:isGuide:", v35, v36, v37, v33);
  if (v19 < 0.0)
  {
    v46 = (void *)MEMORY[0x1E0CB3940];
    v55 = (objc_class *)objc_opt_class();
    v57 = NSStringFromClass(v55);
    v59 = off_1E16E9D30[(int)v65 - 1];
    v52 = CFSTR("Aligning a %@ at the %@ of its container is not recommended. Use an explicit constant for your constraint to override this.");
    goto LABEL_77;
  }
LABEL_93:
  v17 = 0;
  if (a3)
LABEL_86:
    *a3 = v19;
LABEL_87:
  if (v17)
    NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant(v17, v17);
  return 1;
}

- (double)_autolayoutSpacingAtEdge:(int)a3 forAttribute:(int64_t)a4 inContainer:(id)a5 isGuide:(BOOL)a6
{
  _BOOL8 v6;
  uint64_t v9;
  UIView *v11;
  double result;

  v6 = a6;
  if ((a4 - 11) > 1)
  {
    result = 20.0;
    if (a6)
      return 0.0;
  }
  else
  {
    v9 = *(_QWORD *)&a3;
    v11 = -[UIView _viewForLoweringBaselineLayoutAttribute:](self, "_viewForLoweringBaselineLayoutAttribute:", a4);
    if (v11 == self)
      return 20.0;
    else
      -[UIView _autolayoutSpacingAtEdge:forAttribute:inContainer:isGuide:](v11, "_autolayoutSpacingAtEdge:forAttribute:inContainer:isGuide:", v9, a4, a5, v6);
  }
  return result;
}

- (double)_autolayoutSpacingAtEdge:(int)a3 forAttribute:(int64_t)a4 nextToNeighbor:(id)a5 edge:(int)a6 attribute:(int64_t)a7 multiplier:(double)a8
{
  uint64_t v10;
  UIView *v11;
  uint64_t v13;
  UIView *v15;
  _BOOL4 v16;
  unsigned int v17;
  double v18;
  double v19;
  UIView *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double result;

  v10 = *(_QWORD *)&a6;
  v11 = (UIView *)a5;
  v13 = *(_QWORD *)&a3;
  if ((a7 - 11) <= 1)
    v11 = (UIView *)objc_msgSend(a5, "_viewForLoweringBaselineLayoutAttribute:", a7);
  v15 = self;
  if ((a4 - 13) >= 0xFFFFFFFE)
    v15 = -[UIView _viewForLoweringBaselineLayoutAttribute:](self, "_viewForLoweringBaselineLayoutAttribute:", a4);
  if (-[UIView _hasCustomAutolayoutNeighborSpacingForAttribute:](v11, "_hasCustomAutolayoutNeighborSpacingForAttribute:", a7))
  {
    v16 = -[UIView _hasCustomAutolayoutNeighborSpacingForAttribute:](v15, "_hasCustomAutolayoutNeighborSpacingForAttribute:", a4);
    if ((v13 - 5) >= 2)
      v17 = v13;
    else
      v17 = 4;
    if (v16)
      v13 = v13;
    else
      v13 = v17;
    -[UIView _autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:](v11, "_autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:", v10, a7, v15, v13, a4, a8);
    v19 = v18;
    v20 = v11;
    v21 = v10;
    v22 = v13;
LABEL_19:
    -[UIView _paddingForBaselineSpacingFromEdge:toNeighborEdge:](v20, "_paddingForBaselineSpacingFromEdge:toNeighborEdge:", v21, v22);
    return v19 + v24;
  }
  if ((a4 - 13) >= 0xFFFFFFFE && v15 != self)
  {
    if ((v10 - 5) >= 2)
      v10 = v10;
    else
      v10 = 4;
    -[UIView _autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:](v15, "_autolayoutSpacingAtEdge:forAttribute:nextToNeighbor:edge:attribute:multiplier:", v13, a4, v11, v10, a7, a8);
    v19 = v23;
    v20 = v15;
    v21 = v13;
    v22 = v10;
    goto LABEL_19;
  }
  -[UIView _defaultAutolayoutSpacing](self, "_defaultAutolayoutSpacing");
  UIRoundToViewScale(self);
  return result;
}

- (BOOL)_hasCustomAutolayoutNeighborSpacingForAttribute:(int64_t *)a3
{
  UIView *v5;

  if (((_DWORD)a3 - 11) > 1)
    return 0;
  v5 = -[UIView _viewForLoweringBaselineLayoutAttribute:](self, "_viewForLoweringBaselineLayoutAttribute:", a3);
  return v5 != self
      && -[UIView _hasCustomAutolayoutNeighborSpacingForAttribute:](v5, "_hasCustomAutolayoutNeighborSpacingForAttribute:", a3);
}

- (double)_defaultAutolayoutSpacing
{
  return 8.0;
}

- (BOOL)_hasFontInfoForVerticalBaselineSpacing
{
  return 0;
}

- (void)_setLargeContentViewerGestureManager:(id)a3
{
  objc_setAssociatedObject(self, &_LargeContentViewerGestureManagerKey, a3, (void *)1);
}

+ (void)_beginSuspendingMotionEffectsForReason:(id)a3
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a3;
  v7 = v3;
  if (_motionEffectEngine)
  {
    objc_msgSend((id)_motionEffectEngine, "beginSuspendingForReason:", v3);
  }
  else
  {
    v4 = (void *)qword_1EDDCA700;
    if (!qword_1EDDCA700)
    {
      v5 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v6 = (void *)qword_1EDDCA700;
      qword_1EDDCA700 = (uint64_t)v5;

      v3 = v7;
      v4 = (void *)qword_1EDDCA700;
    }
    objc_msgSend(v4, "addObject:", v3);
  }

}

- (void)setScalesLargeContentImage:(BOOL)scalesLargeContentImage
{
  _BOOL8 v3;
  id v4;

  v3 = scalesLargeContentImage;
  -[UIView _largeContentStoredPropertiesCreatingIfNecessary:](self, "_largeContentStoredPropertiesCreatingIfNecessary:", 1);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setScalesLargeContentImage:", v3);

}

- (void)setFocusGroupIdentifier:(NSString *)focusGroupIdentifier
{
  uint64_t v3;

  v3 = 0x1000000;
  if (!focusGroupIdentifier)
    v3 = 0x800000;
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFE7FFFFFLL | v3;
  objc_setAssociatedObject(self, &FocusGroupIdentifierKey_0, focusGroupIdentifier, (void *)1);
}

- (_QWORD)_backing_layers
{
  uint64_t v1;
  void *v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1[22];
    if (v1 && (v2 = *(void **)(v1 + 8)) != 0)
    {
      objc_msgSend(v2, "sublayers");
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4[0] = a1[21];
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
      a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    }
  }
  return a1;
}

uint64_t __68__UIView_Internal___registerClassForIdiomInitializationIfNeccessary__block_invoke()
{
  id v0;
  void *v1;
  uint64_t result;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v1 = (void *)_UIViewClassesRegisteredForIdiomInitialization;
  _UIViewClassesRegisteredForIdiomInitialization = (uint64_t)v0;

  result = +[UIView methodForSelector:](UIView, "methodForSelector:", sel__initializeForIdiom_);
  qword_1EDDCA798 = result;
  return result;
}

+ (id)_topMostView:(int)a3 reverse:
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  objc_opt_self();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(v5);
        v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        -[UIView _viewIndexPath](v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v13;
        if (!v9
          || ((v15 = objc_msgSend(v13, "compare:", v8, (_QWORD)v20), !a3) ? (v16 = v15) : (v16 = -v15), v16 == -1))
        {
          v17 = v14;

          v8 = v17;
          v9 = v12;
        }

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }

  v18 = v9;
  return v18;
}

- (id)_viewIndexPath
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (a1)
  {
    v2 = (id)objc_msgSend(a1, "superview");
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, "subviews");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "indexOfObject:", a1);

      -[UIView _viewIndexPath](v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "indexPathByAddingIndex:", v5);
      v7 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v7 = objc_alloc_init(MEMORY[0x1E0CB36B0]);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

- (void)_removeBoundingPathChangeObserver:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSMapTable *value;

  v4 = a3;
  objc_getAssociatedObject(self, &_UIBoundingPathChangeObserversKey);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  value = (NSMapTable *)objc_msgSend(v5, "copy");

  objc_setAssociatedObject(self, &_UIBoundingPathChangeObserversKey, value, (void *)1);
  v6 = -[NSMapTable count](value, "count");
  v7 = (uint64_t)NSMapGet(value, v4);
  if (v7 < 2)
    NSMapRemove(value, v4);
  else
    NSMapInsert(value, v4, (const void *)(v7 - 1));

  v8 = -[NSMapTable count](value, "count");
  if (v6 && !v8)
  {
    -[UIView _unregisterForGeometryChanges](self, "_unregisterForGeometryChanges");
    -[UIView _removeBoundingPathRotationNotificationsForWindow:](self, 0);
    objc_setAssociatedObject(self, &_UIBoundingPathChangeObserversKey, 0, (void *)1);
  }

}

- (void)_removeBoundingPathRotationNotificationsForWindow:(void *)a1
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  if (a1)
  {
    objc_getAssociatedObject(a1, &_UIBoundingPathWindowRotationObserverKey);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v4 = (void *)MEMORY[0x1E0CB37D0];
      v5 = v7;
      objc_msgSend(v4, "defaultCenter");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "removeObserver:name:object:", v3, CFSTR("UIWindowWillAnimateRotationNotification"), v5);

      objc_setAssociatedObject(a1, &_UIBoundingPathWindowRotationObserverKey, 0, (void *)1);
    }

  }
}

- (void)_unregisterForGeometryChanges
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  _QWORD *v4;

  p_viewFlags = &self->_viewFlags;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x3CLL) != 0)
  {
    -[UIView superview](self, "superview");
    v4 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    -[UIView _removeGeometryChangeObserver:](v4, self);

    *((_DWORD *)p_viewFlags + 4) = *((_DWORD *)p_viewFlags + 4) & 0xFFFFFFC3 | (4
                                                                              * (((*((_DWORD *)p_viewFlags + 4) >> 2) - 1) & 0xF));
  }
}

+ (id)_defaultKeyPathsToSyncWithPrivateSubviews
{
  objc_opt_self();
  if (qword_1ECD7E070 != -1)
    dispatch_once(&qword_1ECD7E070, &__block_literal_global_264);
  return (id)_MergedGlobals_1074;
}

- (BOOL)needsDisplay
{
  return -[CALayer needsDisplay](self->_layer, "needsDisplay");
}

- (void)setCompositingMode:(int64_t)a3
{
  id v4;

  if (a3)
  {
    _UICompositingFilterForMode(a3);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    -[CALayer setCompositingFilter:](self->_layer, "setCompositingFilter:", v4);

  }
  else
  {
    -[CALayer setCompositingFilter:](self->_layer, "setCompositingFilter:");
  }
}

- (void)engine:(id)a3 willBreakConstraint:(id)a4 dueToMutuallyExclusiveConstraints:(id)a5
{
  BOOL v8;
  int v9;
  _QWORD *p_isa;

  v8 = -[UIView _isUnsatisfiableConstraintsLoggingSuspended](self, "_isUnsatisfiableConstraintsLoggingSuspended", a3);
  v9 = dyld_program_sdk_at_least();
  if (v9)
    p_isa = &self->super.super.isa;
  else
    p_isa = 0;
  if (v9 && !v8)
    p_isa = -[UIView _outermostLayoutEngineDelegateView](self);
  if (v8 || p_isa && (p_isa[14] & 0x10) != 0)
  {
    if (!p_isa)
      p_isa = &self->super.super.isa;
    if (p_isa)
      objc_msgSend((id)objc_msgSend(p_isa, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 1), "addObject:", a4);
  }
  else
  {
    UIViewAlertForUnsatisfiableConstraints((uint64_t)a4, a5);
  }
  if (kdebug_is_enabled())
  {
    -[NSString UTF8String](-[UIView description](self, "description"), "UTF8String");
    kdebug_trace_string();
    objc_msgSend((id)objc_msgSend(a4, "description"), "UTF8String");
    kdebug_trace_string();
    kdebug_trace();
  }
}

- (void)_outermostLayoutEngineDelegateView
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  void *v6;
  char v7;

  if (!a1)
    return 0;
  v1 = (void *)objc_msgSend((id)objc_msgSend(a1, "_layoutEngine"), "delegate");
  if (!objc_msgSend(v1, "__isKindOfUIView"))
    v1 = 0;
  v2 = (void *)objc_msgSend(v1, "superview");
  if (v2)
  {
    v3 = (void *)objc_msgSend((id)objc_msgSend(v2, "_layoutEngine"), "delegate");
    v4 = objc_msgSend(v3, "__isKindOfUIView");
    if (v3 && v4 != 0)
    {
      do
      {
        v1 = v3;
        v6 = (void *)objc_msgSend(v3, "superview");
        if (!v6)
          break;
        v3 = (void *)objc_msgSend((id)objc_msgSend(v6, "_layoutEngine"), "delegate");
        v7 = objc_msgSend(v3, "__isKindOfUIView");
        if (!v3)
          break;
      }
      while ((v7 & 1) != 0);
    }
  }
  return v1;
}

uint64_t __58__UIView_UIDebugging___toolsDebugShouldDetectClippedViews__block_invoke()
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    result = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIDetectClippedViews, (uint64_t)CFSTR("UIDetectClippedViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    byte_1EDDCA618 = (byte_1ECD76AF4 != 0) & ~(_BYTE)result;
  }
  return result;
}

- (void)insertSubview:(id)a3 below:(id)a4
{
  -[UIView _addSubview:positioned:relativeTo:](self, "_addSubview:positioned:relativeTo:", a3, -3, a4);
}

- (void)setPreservesSuperviewLayoutMargins:(BOOL)preservesSuperviewLayoutMargins
{
  uint64_t v3;

  if (preservesSuperviewLayoutMargins)
    v3 = 15;
  else
    v3 = 0;
  -[UIView setEdgesPreservingSuperviewLayoutMargins:](self, "setEdgesPreservingSuperviewLayoutMargins:", v3);
}

- (void)_updateParallaxEffectWithAltitude:(double)a3 bias:(double)a4
{
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v15;
  _UIParallaxMotionEffect *v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[2];

  if (a1
    && +[_UIMotionEffectEngine _motionEffectsSupported](_UIMotionEffectEngine, "_motionEffectsSupported"))
  {
    objc_getAssociatedObject(a1, &unk_1EDDCA613);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    v10 = a3 * a2;
    v11 = a4 * a2;
    if (v8)
    {
      objc_msgSend(v8, "slideMagnitude");
      if (v13 == v10 && v12 == v11)
      {
LABEL_16:

        return;
      }
      objc_msgSend(a1, "_removeMotionEffect:", v9);
    }
    if (a2 == 0.0)
    {
      objc_setAssociatedObject(a1, &unk_1EDDCA613, 0, (void *)1);
    }
    else
    {
      *(double *)v19 = v10;
      *(double *)&v19[1] = v11;
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v19, "{UIOffset=dd}");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)qword_1EDDCA710, "objectForKey:", v15);
      v16 = (_UIParallaxMotionEffect *)objc_claimAutoreleasedReturnValue();
      if (!v16)
      {
        if (!qword_1EDDCA710)
        {
          v17 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 0, 517, 1);
          v18 = (void *)qword_1EDDCA710;
          qword_1EDDCA710 = v17;

        }
        v16 = objc_alloc_init(_UIParallaxMotionEffect);
        -[_UIParallaxMotionEffect setSlideMagnitude:](v16, "setSlideMagnitude:", v10, v11);
        objc_msgSend((id)qword_1EDDCA710, "setObject:forKey:", v16, v15);
      }
      objc_setAssociatedObject(a1, &unk_1EDDCA613, v16, (void *)1);
      objc_msgSend(a1, "_addMotionEffect:", v16);

    }
    goto LABEL_16;
  }
}

- (void)_setVisualAltitude:(double)a3
{
  uint64_t v5;
  int v6;
  void *v7;
  double v8;
  double v9;

  if (_shouldEnableUIKitParallaxEffects())
  {
    v5 = *((_QWORD *)&self->_viewFlags + 1);
    v6 = *((_DWORD *)&self->_viewFlags + 4);
    *(_QWORD *)&self->_viewFlags = self->_viewFlags;
    if (a3 == 0.0)
    {
      *((_QWORD *)&self->_viewFlags + 1) = v5 & 0xFFFFFFFFFF7FFFFFLL;
      *((_DWORD *)&self->_viewFlags + 4) = v6;
      objc_setAssociatedObject(self, &_visualAltitudeKey, 0, (void *)1);
    }
    else
    {
      *((_QWORD *)&self->_viewFlags + 1) = v5 | 0x800000;
      *((_DWORD *)&self->_viewFlags + 4) = v6;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_setAssociatedObject(self, &_visualAltitudeKey, v7, (void *)1);

    }
    -[UIView _visualAltitudeBias](self, "_visualAltitudeBias");
    -[UIView _updateParallaxEffectWithAltitude:bias:](self, a3, v8, v9);
  }
}

- (CGSize)_visualAltitudeBias
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGSize result;

  objc_getAssociatedObject(self, &_visualAltitudeBiasKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "CGSizeValue");
    v5 = v4;
    v7 = v6;
  }
  else
  {
    v5 = 1.0;
    v7 = 1.0;
  }

  v8 = v5;
  v9 = v7;
  result.height = v9;
  result.width = v8;
  return result;
}

- (double)_visualAltitude
{
  void *v3;
  double v4;
  double v5;

  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x800000) == 0)
    return 0.0;
  objc_getAssociatedObject(self, &_visualAltitudeKey);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleValue");
  v5 = v4;

  return v5;
}

- (double)_convertVisualAltitude:(double)a3 toView:(id)a4
{
  return _convertVisualAltitudeFromViewToView(self, a4, a3);
}

- (BOOL)_shouldEnclosedScrollViewFlashIndicators:(id)a3
{
  return 1;
}

+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void *)animations
{
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, 0, 0, animations, 0, 0, duration, 0.0, 0);
}

+ (void)_setAlongsideAnimations:(id)a3
{
  void *v3;
  void *v4;

  v3 = _Block_copy(a3);
  v4 = (void *)qword_1EDDCA658;
  qword_1EDDCA658 = (uint64_t)v3;

}

- (BOOL)_isEligibleForFocusInteraction
{
  void *v3;
  BOOL v4;

  if (-[UIView isHidden](self, "isHidden")
    || !-[UIView _isEligibleForFocusGivenAlpha](self, "_isEligibleForFocusGivenAlpha")
    || !-[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled")
    || !-[UIView _isFocusInteractionEnabled](self, "_isFocusInteractionEnabled"))
  {
    return 0;
  }
  -[UIView _window](self, "_window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

- (BOOL)_isFocusInteractionEnabled
{
  return (*((_DWORD *)&self->_viewFlags + 4) & 0x40000) == 0;
}

- (BOOL)_isEligibleForFocusGivenAlpha
{
  int v3;
  double v4;
  BOOL v5;

  v3 = dyld_program_sdk_at_least();
  -[UIView alpha](self, "alpha");
  v5 = fabs(v4) >= 2.22044605e-16;
  if (v3)
    return v4 >= 0.01;
  else
    return v5;
}

- (void)_setIgnoreBackdropViewsWhenHiding:(BOOL)a3
{
  uint64_t v3;

  v3 = 32;
  if (!a3)
    v3 = 0;
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFFDFLL | v3;
}

- (UILayoutGuide)readableContentGuide
{
  UILayoutGuide *readableContentGuide;
  UILayoutGuide *v4;
  UILayoutGuide *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  UILayoutGuide *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v19;
  _QWORD v20[7];

  v20[6] = *MEMORY[0x1E0C80C00];
  readableContentGuide = self->_readableContentGuide;
  if (!readableContentGuide)
  {
    v4 = objc_alloc_init(UILayoutGuide);
    v5 = self->_readableContentGuide;
    self->_readableContentGuide = v4;

    -[UIView addLayoutGuide:](self, "addLayoutGuide:", self->_readableContentGuide);
    -[UILayoutGuide _setLockedToOwningView:](self->_readableContentGuide, "_setLockedToOwningView:", 1);
    -[UILayoutGuide setIdentifier:](self->_readableContentGuide, "setIdentifier:", CFSTR("UIViewReadableContentGuide"));
    -[UIView layoutMarginsGuide](self, "layoutMarginsGuide");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", self->_readableContentGuide, 3, 0, v6, 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", self->_readableContentGuide, 5, 1, v6, 5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", v6, 4, 0, self->_readableContentGuide, 4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", v6, 6, 1, self->_readableContentGuide, 6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:toItem:attribute:", self->_readableContentGuide, 9, 0, v6, 9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:constant:", self->_readableContentGuide, 7, 0, _UIViewReadableWidthForView(self));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v13) = 1148837888;
    objc_msgSend(v12, "setPriority:", v13);
    v19 = v7;
    objc_msgSend(v7, "setIdentifier:", CFSTR("UIView-top-readableContentGuide-constraint"));
    objc_msgSend(v8, "setIdentifier:", CFSTR("UIView-leadingMargin-readableContentGuide-constraint"));
    objc_msgSend(v9, "setIdentifier:", CFSTR("UIView-bottom-readableContentGuide-constraint"));
    objc_msgSend(v10, "setIdentifier:", CFSTR("UIView-trailingMargin-readableContentGuide-constraint"));
    objc_msgSend(v11, "setIdentifier:", CFSTR("UIView-centerX-readableContentGuide-constraint"));
    objc_msgSend(v12, "setIdentifier:", CFSTR("UIView-width-readableContentGuide-constraint"));
    v14 = self->_readableContentGuide;
    v20[0] = v7;
    v20[1] = v8;
    v20[2] = v9;
    v20[3] = v10;
    v20[4] = v11;
    v20[5] = v12;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[UILayoutGuide _setSystemConstraints:](v14, "_setSystemConstraints:", v15);

    v16 = (void *)MEMORY[0x1E0D156E0];
    -[UILayoutGuide _systemConstraints](self->_readableContentGuide, "_systemConstraints");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "activateConstraints:", v17);

    readableContentGuide = self->_readableContentGuide;
  }
  return readableContentGuide;
}

- (UIKeyboardLayoutGuide)keyboardLayoutGuide
{
  UIKeyboardLayoutGuide *v3;
  UIKeyboardLayoutGuide *keyboardLayoutGuide;
  UIWindow *window;

  if (!self->_keyboardLayoutGuide)
  {
    v3 = objc_alloc_init(UIKeyboardLayoutGuide);
    keyboardLayoutGuide = self->_keyboardLayoutGuide;
    self->_keyboardLayoutGuide = v3;

    -[UIView addLayoutGuide:](self, "addLayoutGuide:", self->_keyboardLayoutGuide);
    -[UILayoutGuide _setLockedToOwningView:](self->_keyboardLayoutGuide, "_setLockedToOwningView:", 1);
    -[UILayoutGuide setIdentifier:](self->_keyboardLayoutGuide, "setIdentifier:", CFSTR("UIViewKeyboardLayoutGuide"));
    window = self->_window;
    if (window)
      -[UIView _constrainKeyboardGuideToWindowGuideIfNeeded:]((uint64_t)self, window);
  }
  return self->_keyboardLayoutGuide;
}

+ (double)_durationForRotationFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4 withBaseDuration:(double)a5
{
  int v6;
  unsigned int v7;
  double result;

  v6 = +[UIView _degreesToRotateFromInterfaceOrientation:toInterfaceOrientation:](UIView, "_degreesToRotateFromInterfaceOrientation:toInterfaceOrientation:", a3, a4);
  if (v6 >= 0)
    v7 = v6;
  else
    v7 = -v6;
  result = a5 + a5;
  if (v7 <= 0x5A)
    return a5;
  return result;
}

+ (int)_degreesToRotateFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (a4 == 2)
    v4 = 180;
  else
    v4 = 0;
  if (a4 == 4)
    v5 = -90;
  else
    v5 = v4;
  if (a4 == 3)
    v6 = 90;
  else
    v6 = v5;
  if (a4 == 1)
    v6 = 0;
  if (a3 == 2)
    v7 = -180;
  else
    v7 = 0;
  if (a3 == 4)
    v8 = 90;
  else
    v8 = v7;
  if (a3 == 3)
    v9 = -90;
  else
    v9 = v8;
  if (a3 == 1)
    v9 = 0;
  v10 = v9 + v6;
  v11 = v10 + 360;
  if (v10 >= -180)
    v11 = v10;
  if (v10 <= 180)
    return v11;
  else
    return v10 - 360;
}

- (void)_privateSubview_updateGeometryWithCenter:(CGPoint)a3 bounds:(CGRect)a4
{
  double height;
  double width;
  double y;
  double x;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  -[UIView setCenter:](self, "setCenter:", a3.x, a3.y);
  -[UIView setBounds:](self, "setBounds:", x, y, width, height);
}

- (void)setExclusiveTouch:(BOOL)exclusiveTouch
{
  uint64_t v3;

  v3 = 0x40000000;
  if (!exclusiveTouch)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFFBFFFFFFFLL | v3;
}

- (void)setDeliversTouchesForGesturesToSuperview:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x200000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFDFFFFFFFFLL | v3;
}

- (CGRect)_inscribedRectInBoundingPathByInsettingRect:(CGRect)a3 onEdges:(unint64_t)a4 withOptions:(unint64_t)a5
{
  double height;
  double width;
  double y;
  double x;
  void *v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  id v42;
  CGRect v43;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v42 = 0;
  -[UIView _effectiveBoundingPathAndBoundingPathView:](self, "_effectiveBoundingPathAndBoundingPathView:", &v42);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v42;
  -[UIView bounds](self, "bounds");
  -[UIView convertRect:toView:](self, "convertRect:toView:", v13);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  -[UIView convertRect:toView:](self, "convertRect:toView:", v13, x, y, width, height);
  objc_msgSend(v12, "_inscribedRectInBoundingPathAndRect:byInsettingRect:onEdges:withOptions:", a4, a5, v15, v17, v19, v21, v22, v23, v24, v25);
  v26 = v43.origin.x;
  v27 = v43.origin.y;
  v28 = v43.size.width;
  v29 = v43.size.height;
  if (CGRectIsNull(v43))
  {
    v30 = *MEMORY[0x1E0C9D628];
    v31 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v32 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v33 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v13, v26, v27, v28, v29);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    v33 = v37;
  }

  v38 = v30;
  v39 = v31;
  v40 = v32;
  v41 = v33;
  result.size.height = v41;
  result.size.width = v40;
  result.origin.y = v39;
  result.origin.x = v38;
  return result;
}

- (void)_collectKeyViews:(id)a3 visibilityTest:(id)a4 passingTest:(id)a5 subviewsTest:(id)a6
{
  id v10;
  unsigned int (**v11)(id, void *);
  unsigned int (**v12)(id, UIView *);
  unsigned int (**v13)(id, UIView *);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = (unsigned int (**)(id, void *))a4;
  v12 = (unsigned int (**)(id, UIView *))a5;
  v13 = (unsigned int (**)(id, UIView *))a6;
  if (v11 && v12)
  {
    if (v12[2](v12, self))
      objc_msgSend(v10, "addObject:", self);
    if (!v13 || v13[2](v13, self))
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      -[UIView _allSubviews](self, "_allSubviews", 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v21;
        do
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v21 != v17)
              objc_enumerationMutation(v14);
            v19 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
            if (v11[2](v11, v19))
              objc_msgSend(v19, "_collectKeyViews:visibilityTest:passingTest:subviewsTest:", v10, v11, v12, v13);
          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        }
        while (v16);
      }

    }
  }

}

- (void)_setTraitStorageList:(id)a3
{
  objc_super v3;

  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFFBF | ((a3 != 0) << 6);
  v3.receiver = self;
  v3.super_class = (Class)UIView;
  -[NSObject _setTraitStorageList:](&v3, sel__setTraitStorageList_);
}

- (void)setValue:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  objc_super v8;

  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v7, "isEqualToString:", CFSTR("contentsGravity")))
  {
    if ((setValue_forKey____warnOnce & 1) == 0)
    {
      NSLog(CFSTR("Warning: do not call -[UIView setValue:forKey:] with 'contentsGravity'. Temporary workaround in place."));
      setValue_forKey____warnOnce = 1;
    }
    -[CALayer setValue:forKey:](self->_layer, "setValue:forKey:", v6, v7);
  }
  else
  {
    v8.receiver = self;
    v8.super_class = (Class)UIView;
    -[UIView setValue:forKey:](&v8, sel_setValue_forKey_, v6, v7);
  }

}

- (id)_userActionDescription:(unsigned int)a3 maxLevel:
{
  void *v6;
  void *v7;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "layer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    _addUserActionDescription_0(v7, v6, 0, a2, a3);

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

- (UIView)initWithSize:(CGSize)a3
{
  return -[UIView initWithFrame:](self, "initWithFrame:", 0.0, 0.0, a3.width, a3.height);
}

- (BOOL)canPerformAction:(SEL)a3 withSender:(id)a4
{
  id v6;
  unsigned __int8 v7;
  BOOL v8;
  objc_super v10;

  v6 = a4;
  if (-[UIView _hasDefaultImplementationForStandardEditAction:](self, "_hasDefaultImplementationForStandardEditAction:", a3))
  {
    v7 = -[UIView _canPerformDefaultImplementationForStandardEditAction:](self, "_canPerformDefaultImplementationForStandardEditAction:", a3);
  }
  else
  {
    v10.receiver = self;
    v10.super_class = (Class)UIView;
    v7 = -[UIResponder canPerformAction:withSender:](&v10, sel_canPerformAction_withSender_, a3, v6);
  }
  v8 = v7;

  return v8;
}

- (BOOL)_isFindAction:(SEL)a3
{
  return sel_find_ == a3 || sel_findAndReplace_ == a3 || sel_findNext_ == a3 || sel_findPrevious_ == a3;
}

- (void)addAnimation:(id)a3 forKey:(id)a4
{
  -[CALayer addAnimation:forKey:](self->_layer, "addAnimation:forKey:", a3, a4);
}

- (void)setSize:(CGSize)a3
{
  double height;
  double width;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  height = a3.height;
  width = a3.width;
  -[UIView frame](self, "frame");
  v8 = v7;
  v10 = v9;
  if (v11 != width || v6 != height)
    -[UIView setNeedsDisplay](self, "setNeedsDisplay");
  -[UIView setFrame:](self, "setFrame:", v8, v10, width, height);
}

- (void)setTintAdjustmentMode:(UIViewTintAdjustmentMode)tintAdjustmentMode
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;

  p_viewFlags = &self->_viewFlags;
  *((_QWORD *)&v4 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(_QWORD *)&v4 = *((_QWORD *)&self->_viewFlags + 1);
  if (((v4 >> 35) & 3) != tintAdjustmentMode)
  {
    v5 = *(_QWORD *)p_viewFlags;
    v6 = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFE7FFFFFFFFLL | ((unint64_t)(tintAdjustmentMode & 3) << 35);
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4);
    *(_QWORD *)p_viewFlags = v5;
    *((_QWORD *)&self->_viewFlags + 1) = v6;
    -[UIView _dispatchTintColorVisitorWithReasons:](self, 2);
    if (qword_1EDDCA8A0 != -1)
      dispatch_once(&qword_1EDDCA8A0, &__block_literal_global_3359);
  }
}

- (void)_beginOcclusion:(id)a3
{
  id v4;
  UIViewTintAdjustmentMode v5;
  BOOL v6;
  void *v7;
  id v8;

  v4 = a3;
  if (self->_tintAdjustmentDimmingCount || (*((_QWORD *)&self->_viewFlags + 1) & 0x1800000000) != 0)
  {
    ++self->_tintAdjustmentDimmingCount;
  }
  else
  {
    v8 = v4;
    v5 = -[UIView tintAdjustmentMode](self, "tintAdjustmentMode");
    ++self->_tintAdjustmentDimmingCount;
    v6 = v5 == UIViewTintAdjustmentModeDimmed;
    v4 = v8;
    if (!v6)
    {
      -[UIView _dispatchTintColorVisitorWithReasons:](self, 2);
      +[_UIHDRUsageCoordinator sharedInstance]();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[_UIHDRUsageCoordinator enableHDRSuppression:inViewHierarchy:]((uint64_t)v7, 1, self);

      v4 = v8;
    }
  }

}

- (int64_t)compareTextEffectsOrdering:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int64_t v14;

  v4 = a3;
  -[UIView window](self, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIKeyboard activeKeyboard](UIKeyboard, "activeKeyboard");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "window");
  v7 = objc_claimAutoreleasedReturnValue();
  if (v5 == (void *)v7)
  {

  }
  else
  {
    v8 = (void *)v7;
    -[UIView window](self, "window");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "_isAlwaysKeyboardWindow");

    if (!v10)
    {
      v11 = -[UIView textEffectsVisibilityLevel](self, "textEffectsVisibilityLevel");
      v12 = objc_msgSend(v4, "textEffectsVisibilityLevel");
      goto LABEL_6;
    }
  }
  v11 = -[UIView textEffectsVisibilityLevelInKeyboardWindow](self, "textEffectsVisibilityLevelInKeyboardWindow");
  v12 = objc_msgSend(v4, "textEffectsVisibilityLevelInKeyboardWindow");
LABEL_6:
  v13 = -1;
  if (v11 >= v12)
    v13 = 1;
  if (v11 == v12)
    v14 = 0;
  else
    v14 = v13;

  return v14;
}

- (int)textEffectsVisibilityLevel
{
  return 0x7FFFFFFF;
}

- (void)_didChangeKeyplaneWithContext:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[UIView superview](self, "superview");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_didChangeKeyplaneWithContext:", v4);

}

+ (uint64_t)_materialSidebarsEnabled
{
  objc_opt_self();
  if (_materialSidebarsEnabled_onceToken != -1)
    dispatch_once(&_materialSidebarsEnabled_onceToken, &__block_literal_global_23_5);
  return _materialSidebarsEnabled_materialSidebarsEnabled;
}

- (void)mt_setCaptureGroupName:(id)a3
{
  _UIViewBackingAux *viewBackingAux;
  NSString *captureGroupName;

  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFEFFFFFFFFFFFLL | ((unint64_t)(objc_msgSend(a3, "length") != 0) << 44);
  viewBackingAux = self->_viewBackingAux;
  if (viewBackingAux)
    captureGroupName = viewBackingAux->_captureGroupName;
  else
    captureGroupName = 0;
  if (!-[NSString isEqualToString:](captureGroupName, "isEqualToString:", a3))
  {
    -[UIView _mt_setCaptureGroupName:]((uint64_t *)self, a3);
    -[UIView _updateCaptureGroupRecursively](self);
  }
}

- (BOOL)_isHasBaselinePropertyChangeable
{
  return 0;
}

- (int64_t)_topToBottomLeftToRightViewCompare:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int64_t v11;
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;

  v4 = a3;
  -[UIView bounds](self, "bounds");
  v6 = v5;
  objc_msgSend(v4, "bounds");
  -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
  if (v6 < v7)
  {
LABEL_5:
    v11 = -1;
    goto LABEL_6;
  }
  -[UIView bounds](self, "bounds");
  v9 = v8;
  objc_msgSend(v4, "bounds");
  -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
  if (v9 <= v10)
  {
    -[UIView bounds](self, "bounds");
    v13 = v12;
    objc_msgSend(v4, "bounds");
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
    if (v13 >= v14)
    {
      -[UIView bounds](self, "bounds");
      v17 = v16;
      objc_msgSend(v4, "bounds");
      -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
      v11 = v17 > v18;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  v11 = 1;
LABEL_6:

  return v11;
}

+ (id)_defaultUIViewAnimationForLayer:(id)a3 forKey:(id)a4
{
  id v6;
  id v7;
  void *v8;

  v6 = a3;
  v7 = a4;
  if (objc_msgSend(a1, "_isInAnimationBlockWithAnimationsEnabled"))
  {
    objc_msgSend((id)__currentViewAnimationState, "animationForLayer:forKey:forView:", v6, v7, objc_msgSend(v6, "unsafeUnretainedDelegate"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  int v19;
  int v20;
  void *v21;
  double v22;
  void *v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;
  CGRect v34;
  CGRect v35;

  v33 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_switchToLayoutEngine:", *(_QWORD *)(a1 + 40));
  v2 = dyld_program_sdk_at_least();
  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "translatesAutoresizingMaskIntoConstraints");
    v3 = *(_QWORD *)(a1 + 32);
    if ((v4 & 1) == 0 && (*(_QWORD *)(v3 + 104) & 0x800000000000000) != 0)
    {
      v5 = *(id *)(v3 + 96);

      if (!v5)
      {
LABEL_22:
        v12 = *MEMORY[0x1E0C9D648];
        v14 = *(double *)(MEMORY[0x1E0C9D648] + 8);
        v16 = *(double *)(MEMORY[0x1E0C9D648] + 16);
        v18 = *(double *)(MEMORY[0x1E0C9D648] + 24);
        v19 = 1112014848;
        goto LABEL_16;
      }
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      objc_msgSend(*(id *)(a1 + 48), "_allSubviews", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v29;
        while (2)
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v29 != v9)
              objc_enumerationMutation(v6);
            if (objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "_wantsAutolayout"))
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {

                goto LABEL_22;
              }
            }
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
          if (v8)
            continue;
          break;
        }
      }

      v3 = *(_QWORD *)(a1 + 32);
    }
  }
  objc_msgSend((id)v3, "bounds");
  objc_msgSend((id)v3, "alignmentRectForFrame:");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = 1148846080;
LABEL_16:
  v20 = v19;
  v34.origin.x = v12;
  v34.origin.y = v14;
  v34.size.width = v16;
  v34.size.height = v18;
  objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:constant:", *(_QWORD *)(a1 + 32), 7, 0, CGRectGetWidth(v34));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setIdentifier:", CFSTR("_UITemporaryLayoutWidth"));
  LODWORD(v22) = v20;
  objc_msgSend(v21, "setPriority:", v22);
  objc_msgSend(v21, "setContainer:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v21, "_addToEngine:", *(_QWORD *)(a1 + 40));
  v35.origin.x = v12;
  v35.origin.y = v14;
  v35.size.width = v16;
  v35.size.height = v18;
  objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:constant:", *(_QWORD *)(a1 + 32), 8, 0, CGRectGetHeight(v35));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setIdentifier:", CFSTR("_UITemporaryLayoutHeight"));
  LODWORD(v24) = v20;
  objc_msgSend(v23, "setPriority:", v24);
  objc_msgSend(v23, "setContainer:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v23, "_addToEngine:", *(_QWORD *)(a1 + 40));
  v25 = *(void **)(a1 + 32);
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v25 && objc_msgSend(v25, "_forceLayoutEngineSolutionInRationalEdges"))
  {
    objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", *(_QWORD *)(a1 + 32), 32, 0, 0.0);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setIdentifier:", CFSTR("_UITemporaryLayoutLeft"));
    objc_msgSend(v26, "setContainer:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v26, "_addToEngine:", *(_QWORD *)(a1 + 40));
    objc_msgSend(MEMORY[0x1E0D156B0], "constraintWithItem:attribute:relatedBy:constant:", *(_QWORD *)(a1 + 32), 33, 0, 0.0);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setIdentifier:", CFSTR("_UITemporaryLayoutTop"));
    objc_msgSend(v27, "setContainer:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v27, "_addToEngine:", *(_QWORD *)(a1 + 40));

  }
}

- (void)_setLayoutDebuggingIdentifier:(id)a3
{
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFEFFLL | ((unint64_t)(a3 != 0) << 8);
  objc_setAssociatedObject(self, &_UIViewLayoutDebuggingIdentifierKey, a3, (void *)1);
}

+ (void)disableAnimation
{
  __animate = 0;
}

void __75__UIView__shouldInvalidateTraitCollectionForSemanticContentAttributeChange__block_invoke()
{
  void *v0;
  void *v1;
  void *v2;

  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    _UIMainBundleIdentifier();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v0, "isEqualToString:", CFSTR("com.zhiliaoapp.musically")))
    {
      byte_1EDDCA616 = 1;
    }
    else
    {
      _UIMainBundleIdentifier();
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      byte_1EDDCA616 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.blued.international"));

    }
    if (!byte_1EDDCA616)
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "_bundleWithIdentifier:andLibraryName:", CFSTR("com.epic.MyChartFramework"), CFSTR("MyChart"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      byte_1EDDCA616 = v2 != 0;

    }
  }
}

- (NSString)debugDescription
{
  return (NSString *)+[UIView _descriptionWithoutTextRedactionForObject:](UIView, "_descriptionWithoutTextRedactionForObject:", self);
}

+ (void)enableAnimation
{
  __animate = 1;
}

void __50__UIView__UIViewBacking___materialSidebarsEnabled__block_invoke()
{
  void *v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "infoDictionary");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", CFSTR("UISplitViewControllerAutomaticMaterialsEnabled"));
  v2 = (id)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      _materialSidebarsEnabled_materialSidebarsEnabled = objc_msgSend(v2, "BOOLValue");
  }

}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_5(uint64_t a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = *(void **)(a1 + 32);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v9;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = *(_QWORD **)(*((_QWORD *)&v8 + 1) + 8 * v5);
        v7 = v6 + 13;
        v6[14] |= 4uLL;
        objc_msgSend(v6, "_updateBaselineInformationDependentOnBounds");
        v7[1] &= ~4uLL;
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

- (BOOL)endEditing:(BOOL)force
{
  UIView *v5;
  UIView *v6;
  void *v7;
  BOOL v8;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = self;
  }
  else
  {
    -[UIView window](self, "window");
    v5 = (UIView *)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;
  -[UIResponder firstResponder](v5, "firstResponder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    if (!-[UIResponder _containsResponder:](self, "_containsResponder:", v7)
      || !force && !objc_msgSend(v7, "canResignFirstResponder"))
    {
      v8 = 0;
      goto LABEL_11;
    }
    objc_msgSend(v7, "resignFirstResponder");
  }
  v8 = 1;
LABEL_11:

  return v8;
}

+ (void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  void *v12;
  uint64_t v13;
  UIViewKeyframeAnimationOptions v14;
  id v15;

  v15 = animations;
  v12 = completion;
  if (!v15)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("animations parameter of +[UIView animateKeyframesWithDuration:delay:options:animations:] must be non-nil"));
  v13 = objc_opt_class();
  if (v13 == objc_opt_class())
    v14 = options;
  else
    v14 = options | 0x200;
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, v14, 0, v15, 0, &__block_literal_global_2507, duration, delay, v12);

}

- (NSString)largeContentTitle
{
  void *v2;
  void *v3;

  -[UIView _largeContentStoredProperties](self, "_largeContentStoredProperties");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "largeContentTitle");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (id)_largeContentStoredProperties
{
  return -[UIView _largeContentStoredPropertiesCreatingIfNecessary:](self, "_largeContentStoredPropertiesCreatingIfNecessary:", 0);
}

- (void)_setLocalOverrideTraitCollection:(id)a3
{
  id v4;
  int v5;
  _QWORD *v6;
  void *v7;
  id v8;

  v4 = a3;
  v5 = *((_DWORD *)&self->_viewFlags + 4);
  if (v4 || (v5 & 0x100) != 0)
  {
    v8 = v4;
    if ((v5 & 0x100) != 0)
    {
      objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
      v6 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = -[_UITraitOverrides initWithDelegate:]([_UITraitOverrides alloc], self);
      objc_setAssociatedObject(self, &_UIViewTraitOverridesKey, v6, (void *)1);
      *((_DWORD *)&self->_viewFlags + 4) |= 0x100u;
    }
    -[_UITraitOverrides _overridesAppliedBefore](v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UITraitOverrides _replaceOverrideTraitCollection:]((uint64_t)v7, v8);

    v4 = v8;
  }

}

uint64_t __68__UIView_UIConstraintBasedLayout___relaxLayoutEngineHostConstraints__block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_relaxLayoutEngineHostConstraintsForAxis:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "_relaxLayoutEngineHostConstraintsForAxis:", 1);
}

- (void)_relaxLayoutEngineHostConstraintsForAxis:(int64_t)a3
{
  id v5;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;

  v5 = -[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints");
  if (objc_msgSend(v5, "count") == 4)
  {
    p_viewFlags = &self->_viewFlags;
    *((_QWORD *)p_viewFlags + 1) |= 0x80uLL;
    objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", a3), "setActive:", 0);
    *((_QWORD *)p_viewFlags + 1) &= ~0x80uLL;
  }
}

- (void)setInteractions:(NSArray *)interactions
{
  NSArray *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  NSArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = interactions;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 19863, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("interactions"));

  }
  if ((*((_BYTE *)&self->_viewFlags + 20) & 0x40) != 0)
  {
    objc_getAssociatedObject(self, &_UIViewInteractionsKey);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v6, "copy");

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v8 = v7;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v24 != v11)
            objc_enumerationMutation(v8);
          -[UIView removeInteraction:](self, "removeInteraction:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i));
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      }
      while (v10);
    }

  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v13 = v5;
  v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v20;
    do
    {
      for (j = 0; j != v15; ++j)
      {
        if (*(_QWORD *)v20 != v16)
          objc_enumerationMutation(v13);
        -[UIView addInteraction:](self, "addInteraction:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * j));
      }
      v15 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    }
    while (v15);
  }

}

+ (void)_finalizeStoppedAnimationWithUUID:(id)a3 reverseAnimation:(BOOL)a4 state:(id)a5 performCompletionsImmediately:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL8 v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id *v13;
  _QWORD *v14;
  id v15;
  _BOOL8 v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[4];
  id v30;
  _QWORD v31[4];
  id v32;
  BOOL v33;
  _BYTE v34[128];
  uint64_t v35;

  v6 = a6;
  v8 = a4;
  v35 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a5;
  if (v9)
  {
    v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v12 = v11;
    if (v10)
    {
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke;
      v31[3] = &unk_1E16EB7F0;
      v13 = &v32;
      v32 = v10;
      v33 = v8;
      v14 = v31;
      v15 = v9;
      v16 = v8;
      v17 = 1;
    }
    else
    {
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_3;
      v29[3] = &unk_1E16EB818;
      v13 = &v30;
      v30 = v11;
      v14 = v29;
      v15 = v9;
      v16 = v8;
      v17 = 0;
    }
    +[UIView _updateModelValuesForAnimationWithUUID:useInitialValues:animatable:stateBlock:animationBlock:](UIView, "_updateModelValuesForAnimationWithUUID:useInitialValues:animatable:stateBlock:animationBlock:", v15, v16, v17, v14, 0);

    +[UIView _disableAnimationTracking:](UIView, "_disableAnimationTracking:", v9);
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v18 = v12;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v26;
      v22 = v8 ^ 1;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v26 != v21)
            objc_enumerationMutation(v18);
          v24 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
          objc_msgSend(v24, "_animationDidStopWithNilAnimationFinished:", v22, (_QWORD)v25);
          if (v6)
            objc_msgSend(v24, "sendDelegateDidStopManually:", v22);
        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v25, v34, 16);
      }
      while (v20);
    }

  }
}

+ (void)_updateModelValuesForAnimationWithUUID:(id)a3 useInitialValues:(BOOL)a4 animatable:(BOOL)a5 stateBlock:(id)a6 animationBlock:(id)a7
{
  id v9;
  id v10;
  void (**v11)(id, void *, void *);
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id obj;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BOOL4 v34;
  void *v35;
  _BOOL4 v36;
  void *v37;
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v34 = a5;
  v36 = a4;
  v53 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a6;
  v11 = (void (**)(id, void *, void *))a7;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v35 = v9;
  objc_msgSend((id)qword_1EDDCA650, "objectForKey:", v9);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
  if (v31)
  {
    v29 = *(_QWORD *)v48;
    v30 = v10;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v48 != v29)
          objc_enumerationMutation(obj);
        v33 = v12;
        v13 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * v12);
        if (v36)
          objc_msgSend(v13, "_setFinishedPosition:", 1);
        objc_msgSend(v13, "_outerPropertyAnimator:", 1);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v32 = v13;
        objc_msgSend(v13, "_trackedAnimations");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (void *)objc_msgSend(v14, "copy");

        v38 = v15;
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v44;
          do
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_QWORD *)v44 != v18)
                objc_enumerationMutation(v38);
              v20 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
              objc_getAssociatedObject(v20, &unk_1EDDCA604);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_getAssociatedObject(v20, &unk_1EDDCA603);
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(v20, "keyPath");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                if ((objc_msgSend(v22, "hasPrefix:", CFSTR("UIPacingAnimationForAnimatorsKey")) & 1) == 0 && v23)
                {
                  _UIFromValueForAnimation(v20, v23, v21, v35);
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v37
                    || (objc_msgSend(v37, "_originalToValueForKey:inLayer:", v23, v21),
                        (v25 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
                  {
                    _UIToValueForAnimation(v20, v23, v21);
                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                  }
                  if (v36)
                    v26 = v24;
                  else
                    v26 = v25;
                  v27 = v26;
                  if (v34)
                  {
                    objc_msgSend(v21, "setValue:forKeyPath:", v27, v23);
                  }
                  else
                  {
                    v39[0] = MEMORY[0x1E0C809B0];
                    v39[1] = 3221225472;
                    v39[2] = __114__UIView_Animation___updateModelValuesForAnimationWithUUID_useInitialValues_animatable_stateBlock_animationBlock___block_invoke;
                    v39[3] = &unk_1E16B47A8;
                    v40 = v21;
                    v41 = v27;
                    v42 = v23;
                    +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v39);

                  }
                }

              }
              if (v11)
                v11[2](v11, v21, v22);

            }
            v17 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
          }
          while (v17);
        }

        v10 = v30;
        if (v30)
          (*((void (**)(id, void *))v30 + 2))(v30, v32);

        v12 = v33 + 1;
      }
      while (v33 + 1 != v31);
      v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
    }
    while (v31);
  }

}

uint64_t __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

+ (void)_stopAnimationWithUUID:(id)a3
{
  id v3;
  __objc2_class **v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  char *v16;
  __objc2_class **v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;
  id obj;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  _QWORD v33[4];
  _QWORD v34[2];
  id v35;
  id v36;
  _QWORD v37[4];
  id v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (v3)
  {
    v28 = v3;
    objc_msgSend((id)qword_1EDDCA650, "objectForKey:", v3);
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    if (v26)
    {
      v25 = *(_QWORD *)v45;
      v4 = off_1E167B000;
      v5 = (char *)&unk_1EDDCA603;
      v6 = 0x1E0CD2000uLL;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v45 != v25)
            objc_enumerationMutation(obj);
          v27 = v7;
          v8 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * v7);
          objc_msgSend(v8, "_setFinishedPosition:", 2);
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          objc_msgSend(v8, "_trackedAnimations");
          v31 = (id)objc_claimAutoreleasedReturnValue();
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
          if (v32)
          {
            v9 = *(_QWORD *)v41;
            v29 = *(_QWORD *)v41;
            v30 = v8;
            do
            {
              for (i = 0; i != v32; ++i)
              {
                if (*(_QWORD *)v41 != v9)
                  objc_enumerationMutation(v31);
                v11 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
                -[__objc2_class _getPropertyAnimationForState:](v4[382], "_getPropertyAnimationForState:", v8);
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                objc_getAssociatedObject(v11, v5 + 1);
                v13 = (void *)objc_claimAutoreleasedReturnValue();
                objc_getAssociatedObject(v11, v5);
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v13, "removeAnimationForKey:", v14);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v15 = v6;
                  v16 = v5;
                  v17 = v4;
                  objc_msgSend(v11, "keyPath");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v18)
                  {
                    if (v12)
                    {
                      objc_msgSend(v12, "_originalToValueForKey:inLayer:", v18, v13);
                      v19 = (void *)objc_claimAutoreleasedReturnValue();

                      if (!v19)
                      {
                        _UIToValueForAnimation(v11, v18, v13);
                        v20 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v12, "_setOriginalToValue:forKey:inLayer:", v20, v18, v13);

                      }
                    }
                    if (objc_msgSend(v13, "hasBeenCommitted"))
                    {
                      if (objc_msgSend(v18, "isEqualToString:", CFSTR("position")))
                      {
                        objc_msgSend(v13, "presentationLayer");
                        v21 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v21, "valueForKeyPath:", v18);
                        v22 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v22, "CGPointValue");

                      }
                      v37[0] = MEMORY[0x1E0C809B0];
                      v37[1] = 3221225472;
                      v37[2] = __44__UIView_Animation___stopAnimationWithUUID___block_invoke;
                      v37[3] = &unk_1E16B1B50;
                      v38 = v13;
                      v39 = v18;
                      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v37);

                      v23 = &v38;
                    }
                    else
                    {
                      v33[0] = MEMORY[0x1E0C809B0];
                      v33[1] = 3221225472;
                      v33[2] = __44__UIView_Animation___stopAnimationWithUUID___block_invoke_2;
                      v33[3] = &unk_1E16B51E8;
                      v34[0] = v13;
                      v34[1] = v11;
                      v35 = v18;
                      v36 = v28;
                      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v33);

                      v23 = (id *)v34;
                    }

                  }
                  v4 = v17;
                  v5 = v16;
                  v6 = v15;
                  v9 = v29;
                  v8 = v30;
                }

              }
              v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
            }
            while (v32);
          }

          objc_msgSend(v8, "_incrementDidEndCount");
          v7 = v27 + 1;
        }
        while (v27 + 1 != v26);
        v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
      }
      while (v26);
    }

    v3 = v28;
  }

}

- (void)_setDisableDictationTouchCancellation:(BOOL)a3
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_sDisableDictationTouchCancellation, v4, (void *)1);

}

- (UIView)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates
{
  _BOOL8 v3;

  v3 = afterUpdates;
  -[UIView bounds](self, "bounds");
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", v3);
}

- (CGRect)_visualAltitudeSensitiveBoundsWithInfiniteEdges:(unint64_t)a3
{
  char v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGRect result;

  v3 = a3;
  if (+[UIView _motionEffectsEnabled](UIView, "_motionEffectsEnabled"))
  {
    -[UIView _visualAltitude](self, "_visualAltitude");
    if (self)
    {
      v6 = v5;
      -[UIView bounds](self, "bounds");
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;
      -[UIView _visualAltitudeBias](self, "_visualAltitudeBias");
      v16 = v6 * v15;
      v18 = v6 * v17;
      if ((v3 & 2) != 0)
        v19 = v6 * v15;
      else
        v19 = -0.0;
      v20 = v12 + v19;
      if ((v3 & 2) != 0)
        v21 = v16;
      else
        v21 = 0.0;
      v22 = v8 - v21;
      if ((v3 & 8) == 0)
        v16 = -0.0;
      v23 = v16 + v20;
      if ((v3 & 1) != 0)
        v24 = v18;
      else
        v24 = -0.0;
      v25 = v14 + v24;
      if ((v3 & 1) != 0)
        v26 = v18;
      else
        v26 = 0.0;
      v27 = v10 - v26;
      if ((v3 & 4) == 0)
        v18 = -0.0;
      v28 = v18 + v25;
    }
    else
    {
      v28 = 0.0;
      v23 = 0.0;
      v27 = 0.0;
      v22 = 0.0;
    }
  }
  else
  {
    -[UIView bounds](self, "bounds");
  }
  result.size.height = v28;
  result.size.width = v23;
  result.origin.y = v27;
  result.origin.x = v22;
  return result;
}

+ (BOOL)_motionEffectsEnabled
{
  return +[_UIMotionEffectEngine _motionEffectsEnabled](_UIMotionEffectEngine, "_motionEffectsEnabled");
}

+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)dampingRatio initialSpringVelocity:(CGFloat)velocity options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  _QWORD v9[7];

  v9[1] = 3221225472;
  v9[2] = __138__UIView_UIViewAnimationWithBlocks__animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion___block_invoke;
  v9[3] = &__block_descriptor_56_e5_v8__0l;
  *(NSTimeInterval *)&v9[4] = duration;
  *(CGFloat *)&v9[5] = dampingRatio;
  *(CGFloat *)&v9[6] = velocity;
  v9[0] = MEMORY[0x1E0C809B0];
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, options, 0, animations, 0, v9, duration, delay, completion);
}

+ (id)_descriptionWithoutTextRedactionForObject:(id)a3
{
  id v3;
  char v4;
  void *v5;

  v3 = a3;
  if (pthread_main_np() == 1)
  {
    v4 = __shouldRedactTextInDescription;
    __shouldRedactTextInDescription = 1;
    objc_msgSend(v3, "description");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    __shouldRedactTextInDescription = v4;
  }
  else
  {
    objc_msgSend(v3, "description");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

uint64_t __67__UIView__UIViewBacking___defaultKeyPathsToSyncWithPrivateSubviews__block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v1 = (void *)_MergedGlobals_1074;
  _MergedGlobals_1074 = (uint64_t)v0;

  objc_msgSend((id)_MergedGlobals_1074, "addObject:", CFSTR("maskedCorners"));
  objc_msgSend((id)_MergedGlobals_1074, "addObject:", CFSTR("continuousCorners"));
  objc_msgSend((id)_MergedGlobals_1074, "addObject:", CFSTR("cornerRadius"));
  objc_msgSend((id)_MergedGlobals_1074, "addObject:", CFSTR("cornerCurve"));
  return objc_msgSend((id)_MergedGlobals_1074, "addObject:", CFSTR("masksToBounds"));
}

- (void)_setVisualAltitudeBias:(CGSize)a3
{
  double height;
  double width;
  void *v7;
  double v8;

  height = a3.height;
  width = a3.width;
  if (a3.width == 1.0 && a3.height == 1.0)
  {
    objc_setAssociatedObject(self, &_visualAltitudeBiasKey, 0, (void *)1);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGSize:", a3.width, a3.height);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(self, &_visualAltitudeBiasKey, v7, (void *)1);

  }
  -[UIView _visualAltitude](self, "_visualAltitude");
  -[UIView _updateParallaxEffectWithAltitude:bias:](self, v8, width, height);
}

+ (int64_t)_currentAnimationCurve
{
  if (objc_msgSend(a1, "_isInAnimationBlockWithAnimationsEnabled"))
    return *(_QWORD *)(__currentViewAnimationState + 88);
  else
    return 0;
}

- (BOOL)drawViewHierarchyInRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates
{
  _BOOL4 v4;
  double height;
  double width;
  double y;
  double x;
  _QWORD *ContextStack;
  CGContext *v11;
  int Type;
  CGColorSpace *ColorSpace;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t CurrentContextAuxInfo;
  _BOOL8 v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[2];
  _QWORD v25[3];
  _QWORD v26[4];

  v4 = afterUpdates;
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  v26[3] = *MEMORY[0x1E0C80C00];
  ContextStack = GetContextStack(0);
  if (*(int *)ContextStack < 1)
    v11 = 0;
  else
    v11 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  Type = CGContextGetType();
  switch(Type)
  {
    case 10:
      ColorSpace = (CGColorSpace *)CGMetalContextGetColorSpace();
      if (ColorSpace)
        goto LABEL_10;
      break;
    case 8:
      ColorSpace = (CGColorSpace *)CGIOSurfaceContextGetColorSpace();
      if (ColorSpace)
        goto LABEL_10;
      break;
    case 4:
      ColorSpace = CGBitmapContextGetColorSpace(v11);
      if (!ColorSpace)
        break;
LABEL_10:
      v14 = CGColorSpaceUsesExtendedRange(ColorSpace);
      goto LABEL_13;
    default:
      break;
  }
  v14 = -1;
LABEL_13:
  v25[0] = CFSTR("dst-size");
  *(double *)v24 = width;
  *(double *)&v24[1] = height;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v24, "{CGSize=dd}");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v15;
  v25[1] = CFSTR("dst-gamut");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v26[1] = v16;
  v25[2] = CFSTR("dst-opaque");
  v17 = (void *)MEMORY[0x1E0CB37E8];
  CurrentContextAuxInfo = GetCurrentContextAuxInfo(1);
  if (CurrentContextAuxInfo)
    v19 = *(_BYTE *)(CurrentContextAuxInfo + 8) != 0;
  else
    v19 = 0;
  objc_msgSend(v17, "numberWithBool:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v26[2] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 3);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  _UIRenderViewImageAfterCommit(self, v21, v4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
    objc_msgSend(v22, "drawInRect:", x, y, width, height);

  return v22 != 0;
}

- (void)_finishDecodingLayoutGuideConnections:(id *)a1
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  id v15;

  v4 = a2;
  if (a1)
  {
    v15 = v4;
    -[UIView _mutableLayoutGuidesCreateIfNecessary](a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "containsObject:", v15) & 1) == 0)
    {
      objc_msgSend(v5, "addObject:", v15);
      objc_msgSend(v15, "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("UIViewLayoutMarginsGuide"));

      if (v7)
      {
        objc_storeStrong(a1 + 28, a2);
        v8 = (void *)MEMORY[0x1E0D156E0];
        v9 = 28;
      }
      else
      {
        objc_msgSend(v15, "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("UIViewSafeAreaLayoutGuide"));

        if (v11)
        {
          objc_storeStrong(a1 + 33, a2);
          v8 = (void *)MEMORY[0x1E0D156E0];
          v9 = 33;
        }
        else
        {
          objc_msgSend(v15, "identifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("UIViewKeyboardLayoutGuide"));

          if (!v13)
            goto LABEL_11;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_11;
          objc_storeStrong(a1 + 34, a2);
          v8 = (void *)MEMORY[0x1E0D156E0];
          v9 = 34;
        }
      }
      objc_msgSend(a1[v9], "_systemConstraints");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "activateConstraints:", v14);

    }
LABEL_11:

    v4 = v15;
  }

}

- (UIView)resizableSnapshotViewFromRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates withCapInsets:(UIEdgeInsets)capInsets
{
  double right;
  double bottom;
  double left;
  double top;
  double height;
  double width;
  double y;
  double x;
  void *v13;
  void *v14;

  right = capInsets.right;
  bottom = capInsets.bottom;
  left = capInsets.left;
  top = capInsets.top;
  height = rect.size.height;
  width = rect.size.width;
  y = rect.origin.y;
  x = rect.origin.x;
  _UISnapshotViewRectAfterCommit(self, afterUpdates, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (left != 0.0 || top != 0.0 || right != 0.0 || bottom != 0.0)
    objc_msgSend(v13, "_setContentStretchInPixels:forContentSize:shouldTile:", 0, x + left, y + top, width - (left + right), height - (top + bottom), width, height);
  return (UIView *)v14;
}

- (void)setFrameOrigin:(CGPoint)a3
{
  double y;
  double x;

  y = a3.y;
  x = a3.x;
  -[UIView frame](self, "frame");
  -[UIView setFrame:](self, "setFrame:", x, y);
}

- (unint64_t)_clipCorners
{
  return -[UIView _clipCornersOfView:](self, "_clipCornersOfView:", 0);
}

- (unint64_t)_clipCornersOfView:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  double MaxY;
  void *v10;
  double v11;
  uint64_t v12;
  double MinY;
  void *v14;
  double v15;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v4 = a3;
  -[UIView superview](self, "superview");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    if (v5)
    {
      -[UIView superview](self, "superview");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "_clipCornersOfView:", v4);

    }
    else
    {
      v8 = -1;
    }
  }
  else
  {

    if (!v6)
    {
      v8 = -1;
      goto LABEL_13;
    }
    -[UIView frame](self, "frame");
    MaxY = CGRectGetMaxY(v17);
    -[UIView superview](self, "superview");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "bounds");
    v11 = CGRectGetMaxY(v18);

    if (MaxY == v11)
      v12 = 12;
    else
      v12 = 0;
    -[UIView frame](self, "frame");
    MinY = CGRectGetMinY(v19);
    -[UIView superview](self, "superview");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "bounds");
    v15 = CGRectGetMinY(v20);

    if (MinY == v15)
      v12 |= 3uLL;
    -[UIView superview](self, "superview");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "_clipCornersOfView:", 0) & v12;
  }

LABEL_13:
  return v8;
}

- (void)setCharge:(float)a3
{
  UIView *v4;
  double v5;
  float v6;
  float v7;
  void *v8;
  void *v9;
  void *v10;
  UIView *object;

  v4 = self;
  if (v4)
  {
    object = v4;
    *(float *)&v5 = _chargeForView(v4);
    v4 = object;
    if (*(float *)&v5 != a3)
    {
      v6 = fabsf(*(float *)&v5);
      v7 = fabsf(a3);
      if (v6 >= 2.2204e-16)
      {
        if (v7 < 2.2204e-16)
        {
          objc_setAssociatedObject(object, &_UIViewChargeAssocObjectKey, 0, (void *)1);
          -[UIView window](object, "window");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "_unregisterChargedView:", object);

          v4 = object;
          *(_QWORD *)((char *)&object->_viewFlags + 20) &= ~0x10uLL;
        }
      }
      else if (v7 >= 2.2204e-16)
      {
        *(float *)&v5 = a3;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_setAssociatedObject(object, &_UIViewChargeAssocObjectKey, v8, (void *)1);
        -[UIView window](object, "window");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "_registerChargedView:", object);

        *(_QWORD *)((char *)&object->_viewFlags + 20) |= 0x10uLL;
        v4 = object;
      }
    }
  }

}

- (BOOL)_supportsBecomeFirstResponderWhenPossible
{
  return 1;
}

- (void)_prepareDescendantsForWindowHostingSceneRemoval
{
  if (a1)
    return (void *)objc_msgSend(a1, "_makeSubtreePerformSelector:withObject:", sel__prepareForWindowHostingSceneRemoval, 0);
  return a1;
}

- (void)_prepareDescendantsForWindowDealloc
{
  if (a1)
    return (void *)objc_msgSend(a1, "_makeSubtreePerformSelector:withObject:", sel__prepareForWindowDealloc, 0);
  return a1;
}

- (void)_gatherKeyResponders:(id)a3 indexOfSelf:(unint64_t *)a4 visibilityTest:(id)a5 passingTest:(id)a6 subviewsTest:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unint64_t i;
  void *v20;
  void *v21;
  char v22;
  id v23;

  v23 = a3;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _rootForKeyResponderCycle](self, "_rootForKeyResponderCycle");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!-[UIView isDescendantOfView:](self, "isDescendantOfView:", v16))
  {
    -[UIView window](self, "window");
    v17 = objc_claimAutoreleasedReturnValue();

    v16 = (void *)v17;
  }
  objc_msgSend(v16, "_collectKeyViews:visibilityTest:passingTest:subviewsTest:", v15, v12, v13, v14);
  objc_msgSend(v15, "sortUsingSelector:", sel__topToBottomLeftToRightViewCompare_);
  objc_msgSend(v23, "setArray:", v15);
  -[UIResponder firstResponder](self, "firstResponder");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  i = objc_msgSend(v15, "indexOfObject:", v18);

  if (i == 0x7FFFFFFFFFFFFFFFLL)
  {
    -[UIResponder firstResponder](self, "firstResponder");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i < objc_msgSend(v15, "count"); ++i)
    {
      objc_msgSend(v15, "objectAtIndex:", i);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "_containsResponder:", v20);

      if ((v22 & 1) != 0)
        break;
    }

  }
  if (a4)
    *a4 = i;

}

- (BOOL)_becomeFirstResponderWhenPossible
{
  *(_QWORD *)&self->_viewFlags |= 0x800uLL;
  return 0;
}

- (Class)_intelligenceBaseClass
{
  sub_1851F9080(0, (unint64_t *)&qword_1EDD82CE0);
  return (Class)swift_getObjCClassFromMetadata();
}

- (CGRect)_intelligenceVisibleBounds
{
  UIView *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGRect result;

  v2 = self;
  -[UIView bounds](v2, sel_bounds);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[UIView safeAreaInsets](v2, sel_safeAreaInsets);
  v15 = UIRectInset(v4, v6, v8, v10, v11, v14, v13, v12);
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v22 = v15;
  v23 = v17;
  v24 = v19;
  v25 = v21;
  result.size.height = v25;
  result.size.width = v24;
  result.origin.y = v23;
  result.origin.x = v22;
  return result;
}

- (void)_intelligenceCollectContentIn:(CGRect)a3 collector:(id)a4
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  UIView *v11;
  uint64_t v12;

  v6 = sub_186507024();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DC16B0], v6);
  v10 = a4;
  v11 = self;
  sub_186506E2C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

}

- (void)_intelligenceCollectSubelementsIn:(CGRect)a3 using:(id)a4 transformToRoot:(id)a5
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *v11;
  id v12;
  UIView *v13;
  _QWORD v14[4];

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v11 = _Block_copy(a5);
  v14[2] = v11;
  v12 = a4;
  v13 = self;
  UIView._intelligenceCollectSubelements(in:using:transformToRoot:)((uint64_t)v12, (uint64_t)sub_1855B1064, (uint64_t)v14, x, y, width, height);
  _Block_release(v11);

}

- (void)_intelligenceCollectElementFor:(id)a3 in:(CGRect)a4 using:(id)a5 transformToRoot:(id)a6
{
  double height;
  double width;
  double y;
  double x;
  void *v13;
  id v14;
  void (*v15)(char *, char *, uint64_t);
  UIView *v16;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v13 = _Block_copy(a6);
  _Block_copy(v13);
  v14 = a3;
  v15 = (void (*)(char *, char *, uint64_t))a5;
  v16 = self;
  sub_1855B0744(v14, v15, v16, v13, x, y, width, height);
  _Block_release(v13);
  _Block_release(v13);

}

- (void)_intelligenceCollectRemoteContentIn:(CGRect)a3 remoteContextWrapper:(id)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  id v9;
  UIView *v10;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v9 = a4;
  v10 = self;
  UIView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)(x, y, width, height);

}

- (NSArray)_appIntentsAnnotationsDebugDescription
{
  UIView *v2;
  void *v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v2 = self;
  UIView._appIntentsIntelligenceProvider.getter(&v5);
  if (v6)
  {
    sub_1855B0F98(&v5, &v7);
    __swift_project_boxed_opaque_existential_0Tm(&v7, v8);
    sub_1865071EC();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
  }
  else
  {
    sub_18519F088((uint64_t)&v5, &qword_1EDD83110);
  }

  v3 = (void *)sub_18650763C();
  swift_bridgeObjectRelease();
  return (NSArray *)v3;
}

- (void)__swift_animatePropertyWithKey:(id)a3 currentValue:(double)a4 targetValue:(double)a5 newValueCallback:(id)a6
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UIView *v14;

  v9 = _Block_copy(a6);
  v10 = sub_1865074F8();
  v12 = v11;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v9;
  v14 = self;
  sub_1855D8E6C(v10, v12, (uint64_t)sub_1855A956C, v13, a4, a5);

  swift_bridgeObjectRelease();
  swift_release();
}

- (id)__swift_projectedTargetForKey:(id)a3 decelerationFactor:(double)a4
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UIView *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  void *v20;
  _QWORD v22[3];
  uint64_t v23;

  v6 = sub_1865074F8();
  v8 = v7;
  v9 = self;
  if (!sub_1856BC50C() || (v10 = sub_1856BC5B8(v6, v8), v12 = v11, swift_release(), !v10))
  {

    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  ObjectType = swift_getObjectType();
  sub_1855D929C(ObjectType, v12, (uint64_t)v22, a4);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v14 = v23;
  if (!v23)
  {
LABEL_6:
    v20 = 0;
    return v20;
  }
  v15 = __swift_project_boxed_opaque_existential_0Tm(v22, v23);
  v16 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v16 + 16))(v19, v17);
  v20 = (void *)sub_186507FB4();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v14);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
  return v20;
}

- (void)__swift_setPresentationValue:(id)a3 velocity:(id)a4 preferredFrameRateRangeMaximum:(int64_t)a5 immediate:(BOOL)a6 key:(id)a7
{
  id v12;
  UIView *v13;
  id v14;
  UIView *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  _OWORD v20[2];

  if (!a3)
  {
    memset(v20, 0, sizeof(v20));
    swift_unknownObjectRetain();
    v14 = a7;
    v15 = self;
    if (a4)
      goto LABEL_3;
LABEL_5:
    memset(v19, 0, sizeof(v19));
    goto LABEL_6;
  }
  swift_unknownObjectRetain();
  v12 = a7;
  v13 = self;
  swift_unknownObjectRetain();
  sub_186507B1C();
  swift_unknownObjectRelease();
  if (!a4)
    goto LABEL_5;
LABEL_3:
  sub_186507B1C();
  swift_unknownObjectRelease();
LABEL_6:
  v16 = sub_1865074F8();
  v18 = v17;

  sub_1855D9504((uint64_t)v20, (uint64_t)v19, a5, a6, v16, v18);
  swift_bridgeObjectRelease();
  sub_18519F088((uint64_t)v19, &qword_1ECD75B20);
  sub_18519F088((uint64_t)v20, &qword_1ECD75B20);
}

- (void)__swift_stopSettingPresentationValueForKey:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  UIView *v7;

  v4 = sub_1865074F8();
  v6 = v5;
  v7 = self;
  sub_1855D991C(v4, v6);

  swift_bridgeObjectRelease();
}

- (void)__swift_removeAllRetargetableAnimationsIfDetatchedFromContext
{
  uint64_t v2;
  UIView *v3;
  uint64_t v4;
  UIView *v5;

  v2 = qword_1EDD831E0;
  v3 = self;
  if (v2 != -1)
    swift_once();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  v5 = v3;
  sub_18577CED4((uint64_t)sub_1855DFC54, v4);

  swift_release();
}

+ (void)__swift_animateWithFrictionBounceAnimations:(id)a3 completion:(id)a4
{
  uint64_t v5;
  uint64_t (*v6)(char, char);
  uint64_t (*v7)(char, char);
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;

  v5 = (uint64_t)_Block_copy(a3);
  v6 = (uint64_t (*)(char, char))_Block_copy(a4);
  v7 = v6;
  if (v5)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v5;
    v9 = sub_1855E0294;
    if (v7)
      goto LABEL_3;
LABEL_6:
    v10 = 0;
    if (v5)
      goto LABEL_4;
LABEL_7:
    v11 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
    goto LABEL_8;
  }
  v9 = 0;
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_3:
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  v7 = sub_1855E02F0;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v9;
  *(_QWORD *)(v5 + 24) = v8;
  v11 = sub_1855A6A1C;
LABEL_8:
  swift_getObjCClassMetadata();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v5;
  sub_18518D708((uint64_t)v9);
  sub_1855D9F20(0, (uint64_t)sub_1855A6A1C, v12, (uint64_t)v7, v10, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_release();
  sub_18518D718((uint64_t)v7);
  sub_18518D718((uint64_t)v9);
}

+ (void)__swift_animateUsingSpringInteractive:(BOOL)a3 animations:(id)a4 completion:(id)a5
{
  void *v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v7 = _Block_copy(a4);
  v8 = (uint64_t (*)())_Block_copy(a5);
  v9 = v8;
  if (!v7)
  {
    v10 = 0;
    if (v8)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  v7 = sub_1855E0294;
  if (!v9)
    goto LABEL_5;
LABEL_3:
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v9;
  v9 = (uint64_t (*)())sub_1855E02F0;
LABEL_6:
  swift_getObjCClassMetadata();
  sub_1855DB028(a3, (uint64_t)v7, v10, v9, v11);
  sub_18518D718((uint64_t)v9);
  sub_18518D718((uint64_t)v7);
}

+ (void)__swift_animateUsingSpringWithTension:(double)a3 friction:(double)a4 interactive:(BOOL)a5 animations:(id)a6 completion:(id)a7
{
  uint64_t v11;
  uint64_t (*v12)(char, char);
  uint64_t (*v13)(char, char);
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;

  v11 = (uint64_t)_Block_copy(a6);
  v12 = (uint64_t (*)(char, char))_Block_copy(a7);
  v13 = v12;
  if (v11)
  {
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v11;
    v15 = sub_1855E0294;
    if (v13)
      goto LABEL_3;
LABEL_6:
    v16 = 0;
    if (v11)
      goto LABEL_4;
LABEL_7:
    v17 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
    goto LABEL_8;
  }
  v15 = 0;
  v14 = 0;
  if (!v12)
    goto LABEL_6;
LABEL_3:
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v13;
  v13 = sub_1855E02F0;
  if (!v11)
    goto LABEL_7;
LABEL_4:
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v15;
  *(_QWORD *)(v11 + 24) = v14;
  v17 = sub_1855A6A1C;
LABEL_8:
  swift_getObjCClassMetadata();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v11;
  sub_18518D708((uint64_t)v15);
  sub_1855DA1A0(a5, (uint64_t)sub_1855A6A1C, v18, (uint64_t)v13, v16, (uint64_t)signpost_c2_removePresentationModifier_end, 0, a3, a4);
  swift_release();
  sub_18518D718((uint64_t)v13);
  sub_18518D718((uint64_t)v15);
}

+ (void)__swift_animateUsingSpringBehavior:(id)a3 tracking:(BOOL)a4 animations:(id)a5 completion:(id)a6
{
  uint64_t v9;
  uint64_t (*v10)(char, char);
  uint64_t (*v11)(char, char);
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;

  v9 = (uint64_t)_Block_copy(a5);
  v10 = (uint64_t (*)(char, char))_Block_copy(a6);
  v11 = v10;
  if (v9)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    v13 = sub_1855E0294;
    if (v11)
      goto LABEL_3;
LABEL_6:
    v14 = 0;
    if (v9)
      goto LABEL_4;
LABEL_7:
    v15 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
    goto LABEL_8;
  }
  v13 = 0;
  v12 = 0;
  if (!v10)
    goto LABEL_6;
LABEL_3:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v11;
  v11 = sub_1855E02F0;
  if (!v9)
    goto LABEL_7;
LABEL_4:
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 24) = v12;
  v15 = sub_1855A6A1C;
LABEL_8:
  swift_getObjCClassMetadata();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v9;
  swift_unknownObjectRetain_n();
  sub_18518D708((uint64_t)v13);
  sub_1855DA434((uint64_t)a3, a4, a4, (uint64_t)sub_1855A6A1C, v16, (uint64_t)v11, v14, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_unknownObjectRelease();
  swift_release();
  sub_18518D718((uint64_t)v11);
  sub_18518D718((uint64_t)v13);
  swift_unknownObjectRelease();
}

+ (void)__swift_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 interactive:(BOOL)a5 initialDampingRatio:(id)a6 initialResponse:(id)a7 dampingRatioSmoothing:(double)a8 responseSmoothing:(double)a9 targetSmoothing:(double)a10 projectionDeceleration:(double)a11 retargetImpulse:(double)a12 animations:(id)a13 completion:(id)a14
{
  uint64_t v24;
  uint64_t (*v25)(char, char);
  uint64_t (*v26)(char, char);
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v36;
  _QWORD v37[10];

  v24 = (uint64_t)_Block_copy(a13);
  v25 = (uint64_t (*)(char, char))_Block_copy(a14);
  v26 = v25;
  if (v24)
  {
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v24;
    v28 = sub_1855E0294;
    if (v26)
      goto LABEL_3;
LABEL_6:
    v29 = 0;
    if (v24)
      goto LABEL_4;
LABEL_7:
    v30 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
    goto LABEL_8;
  }
  v28 = 0;
  v27 = 0;
  if (!v25)
    goto LABEL_6;
LABEL_3:
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v26;
  v26 = sub_1855E02F0;
  if (!v24)
    goto LABEL_7;
LABEL_4:
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v28;
  *(_QWORD *)(v24 + 24) = v27;
  v30 = sub_1855A6A1C;
LABEL_8:
  swift_getObjCClassMetadata();
  *(double *)v37 = a3;
  *(double *)&v37[1] = a4;
  v37[2] = a6;
  v37[3] = a7;
  *(double *)&v37[4] = a8;
  *(double *)&v37[5] = a9;
  *(double *)&v37[6] = a10;
  *(double *)&v37[7] = a11;
  *(double *)&v37[8] = a12;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v30;
  *(_QWORD *)(v31 + 24) = v24;
  v32 = a6;
  v33 = a7;
  v34 = v32;
  v36 = v33;
  sub_18518D708((uint64_t)v28);
  sub_1855DA714((uint64_t)v37, a5, (uint64_t)sub_1855A6A1C, v31, (uint64_t)v26, v29, (uint64_t)signpost_c2_removePresentationModifier_end, 0);

  swift_release();
  sub_18518D718((uint64_t)v26);
  sub_18518D718((uint64_t)v28);

}

+ (void)__swift_animateByRetargetingAnimations:(id)a3 completion:(id)a4
{
  uint64_t v5;
  uint64_t (*v6)(char, char);
  uint64_t (*v7)(char, char);
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;

  v5 = (uint64_t)_Block_copy(a3);
  v6 = (uint64_t (*)(char, char))_Block_copy(a4);
  v7 = v6;
  if (v5)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v5;
    v9 = sub_1855E0294;
    if (v7)
      goto LABEL_3;
LABEL_6:
    v10 = 0;
    if (v5)
      goto LABEL_4;
LABEL_7:
    v11 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
    goto LABEL_8;
  }
  v9 = 0;
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_3:
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  v7 = sub_1855DF914;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v9;
  *(_QWORD *)(v5 + 24) = v8;
  v11 = sub_1855A6A1C;
LABEL_8:
  swift_getObjCClassMetadata();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v5;
  sub_18518D708((uint64_t)v9);
  sub_1855DA9C8(0, (uint64_t)sub_1855A6A1C, v12, (uint64_t)v7, v10, (uint64_t)sub_1855DB7F4, 0);
  swift_release();
  sub_18518D718((uint64_t)v7);
  sub_18518D718((uint64_t)v9);
}

+ (void)__swift_performWithoutRetargetingAnimations:(id)a3
{
  void *v3;
  uint64_t v4;

  v3 = _Block_copy(a3);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_getObjCClassMetadata();
  sub_1855DAC48(0, (uint64_t)sub_1855E0294, v4, 0, 0, (uint64_t)sub_1855DB96C, 0);
  swift_release();
}

- (void)__swift_removeAllRetargetableAnimations:(BOOL)a3
{
  UIView *v4;

  v4 = self;
  sub_1855DBA08(a3);

}

- (void)__swift_setVelocity:(id)a3 key:(id)a4 target:(BOOL)a5
{
  id v8;
  UIView *v9;
  id v10;
  UIView *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (a3)
  {
    v8 = a4;
    v9 = self;
    swift_unknownObjectRetain();
    sub_186507B1C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
    v10 = a4;
    v11 = self;
  }
  v12 = sub_1865074F8();
  v14 = v13;

  sub_1855DC040((uint64_t)v15, v12, v14, a5);
  swift_bridgeObjectRelease();
  sub_18519F088((uint64_t)v15, &qword_1ECD75B20);
}

- (id)__swift_velocityForKey:(id)a3 target:(BOOL)a4
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UIView *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void *v16;
  __int128 v18;
  uint64_t v19;

  v6 = sub_1865074F8();
  v8 = v7;
  v9 = self;
  sub_1855DC414(v6, v8, a4, &v18);

  swift_bridgeObjectRelease();
  v10 = v19;
  if (!v19)
    return 0;
  v11 = __swift_project_boxed_opaque_existential_0Tm(&v18, v19);
  v12 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v12 + 16))(v15, v13);
  v16 = (void *)sub_186507FB4();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v18);
  return v16;
}

- (void)__swift_replaceInProcessAnimationForKey:(id)a3 behavior:(id)a4 interactive:(BOOL)a5
{
  _BOOL8 v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  UIView *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;

  v5 = a5;
  v8 = sub_1865074F8();
  v10 = v9;
  swift_unknownObjectRetain();
  v11 = self;
  if (sub_1856BC50C())
  {
    if (sub_1856BC5B8(v8, v10))
    {
      v13 = v12;
      ObjectType = swift_getObjectType();
      (*(void (**)(id, _BOOL8, uint64_t, uint64_t))(v13 + 184))(a4, v5, ObjectType, v13);

      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
}

+ (void)__swift_createTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5
{
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  v6 = _Block_copy(a4);
  v7 = _Block_copy(a5);
  sub_1851F9080(0, (unint64_t *)&qword_1ECD74C18);
  v8 = sub_186507654();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  v11 = objc_allocWithZone((Class)_s29AnimatablePropertyTransformerCMa());
  v12 = sub_1855BD924(v8, 0, (uint64_t)sub_1855E0294, v9, (uint64_t)sub_1855E0294, v10, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

}

+ (void)__swift_createUnsafeTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5
{
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  v6 = _Block_copy(a4);
  v7 = _Block_copy(a5);
  sub_1851F9080(0, (unint64_t *)&qword_1ECD74C18);
  v8 = sub_186507654();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v6;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v7;
  v11 = objc_allocWithZone((Class)_s29AnimatablePropertyTransformerCMa());
  v12 = sub_1855BD924(v8, 1, (uint64_t)sub_1855E0294, v9, (uint64_t)sub_1855E0294, v10, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

}

+ (void)__swift_createTransformerWithInputAnimatableProperties:(id)a3 presentationValueChangedCallback:(id)a4
{
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v10;

  v4 = _Block_copy(a4);
  sub_1851F9080(0, (unint64_t *)&qword_1ECD74C18);
  v5 = sub_186507654();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EDD83260);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 20) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = sub_1855E0294;
  v8[4] = v6;
  v9 = objc_allocWithZone((Class)_s29AnimatablePropertyTransformerCMa());
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = sub_1855BD924(v5, 0, (uint64_t)signpost_c2_removePresentationModifier_end, 0, (uint64_t)sub_1855DF834, (uint64_t)v8, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_release();

  swift_bridgeObjectRelease_n();
  swift_release();
}

+ (void)__swift_trackVelocity:(id)a3
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = _Block_copy(a3);
  if (v3)
  {
    v4 = v3;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    v6 = sub_1855A956C;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  swift_getObjCClassMetadata();
  sub_1855DCBE0((uint64_t)v6, v5);
  sub_18518D718((uint64_t)v6);
}

+ (BOOL)_hasInProcessProgressAnimator
{
  return off_1EDD81830 != 0;
}

+ (void)_performWithInProcessProgressAnimating:(id)a3 block:(id)a4
{
  void *v4;
  uint64_t v5;

  v4 = _Block_copy(a4);
  _Block_copy(v4);
  v5 = swift_unknownObjectRetain();
  sub_1856E82BC(v5, (uint64_t)v4);
  _Block_release(v4);
  _Block_release(v4);
  swift_unknownObjectRelease();
}

+ (void)_animateInProcessAlongsideTransition:(id)a3
{
  void (**v3)(_QWORD, double);

  v3 = (void (**)(_QWORD, double))_Block_copy(a3);
  sub_1856E8334(v3);
  _Block_release(v3);
}

+ (void)_animateInProcessKeyframesAlongsideTransitionWithOptions:(unint64_t)a3 animations:(id)a4
{
  void (**v5)(_QWORD);

  v5 = (void (**)(_QWORD))_Block_copy(a4);
  sub_1856E846C(a3, v5);
  _Block_release(v5);
}

+ (void)_animateKeyframeWithID:(id)a3 relativeStartTime:(double)a4 relativeDuration:(double)a5 animations:(id)a6
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = _Block_copy(a6);
  v9 = sub_1865074F8();
  v11 = v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v8;
  sub_1856E85C0(v9, v11, sub_1855A956C, v12, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
}

- (void)_updateConstraintsWithObservationTracking
{
  UIView *v2;

  v2 = self;
  sub_18572691C();

}

- (void)_layoutSubviewsWithObservationTracking
{
  UIView *v2;

  v2 = self;
  sub_185726DA8();

}

- (void)_drawRectWithObservationTracking:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  UIView *v7;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v7 = self;
  sub_185727230(x, y, width, height);

}

+ (id)_makeHybridPropertyAnimatorWithDuration:(double)a3 progressValue:(id)a4 progressValueReversed:(BOOL)a5 progressValueUpdateReason:(unsigned int)a6 springAnimationBehavior:(id)a7
{
  id v12;
  id v13;
  id v14;
  char *v15;

  v12 = objc_allocWithZone((Class)_s22HybridPropertyAnimatorCMa());
  v13 = a4;
  swift_unknownObjectRetain_n();
  v14 = v13;
  v15 = sub_18577802C(a4, a5, a6, (uint64_t)a7, a3);

  swift_unknownObjectRelease();
  return v15;
}

- (void)_applyShape:(id)a3
{
  id v4;
  UIView *v5;

  v4 = a3;
  v5 = self;
  sub_1857A1630((uint64_t)v4);

}

- (void)_applyResolvedShape:(id)a3
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  id v7;
  UIView *v8;
  CALayer *v9;
  _OWORD v10[6];
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];

  v4 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 80);
  v16 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 64);
  v17 = v4;
  v18[0] = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 96);
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 105);
  v5 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 16);
  v12 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value);
  v13 = v5;
  v6 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 48);
  v14 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 32);
  v15 = v6;
  v7 = a3;
  v8 = self;
  sub_1855B8DA4((uint64_t)&v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_185228314, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1855B8D98);
  v9 = -[UIView layer](v8, sel_layer);
  v10[4] = v16;
  v10[5] = v17;
  v11[0] = v18[0];
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v18 + 9);
  v10[0] = v12;
  v10[1] = v13;
  v10[2] = v14;
  v10[3] = v15;
  sub_1855BA594((uint64_t)v10);

  sub_1855B8DA4((uint64_t)&v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_185228168, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1855B8D8C);
}

- (UIShape)_outlineShape
{
  UIView *v2;
  CALayer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v23[7];
  char v24;

  v2 = self;
  v3 = -[UIView layer](v2, sel_layer);
  sub_1855BA434((uint64_t)v23);

  v4 = v23[0];
  v5 = v23[1];
  v6 = v23[2];
  v7 = v23[3];
  v8 = v23[4];
  v9 = v23[5];
  v10 = v23[6];
  v11 = v24;
  v12 = (char *)objc_msgSend(objc_allocWithZone((Class)UIShape), sel_init);
  v13 = &v12[OBJC_IVAR___UIShape_value];
  v14 = *(void **)&v12[OBJC_IVAR___UIShape_value];
  v15 = *(_QWORD *)&v12[OBJC_IVAR___UIShape_value + 8];
  v16 = *(_QWORD *)&v12[OBJC_IVAR___UIShape_value + 16];
  v17 = *(_QWORD *)&v12[OBJC_IVAR___UIShape_value + 24];
  v18 = *(_QWORD *)&v12[OBJC_IVAR___UIShape_value + 32];
  v19 = *(_QWORD *)&v12[OBJC_IVAR___UIShape_value + 40];
  v20 = *(_QWORD *)&v12[OBJC_IVAR___UIShape_value + 48];
  *(_QWORD *)v13 = v4;
  *((_QWORD *)v13 + 1) = v5;
  *((_QWORD *)v13 + 2) = v6;
  *((_QWORD *)v13 + 3) = v7;
  *((_QWORD *)v13 + 4) = v8;
  *((_QWORD *)v13 + 5) = v9;
  *((_QWORD *)v13 + 6) = v10;
  v21 = v13[56];
  v13[56] = v11;
  sub_185228168(v14, v15, v16, v17, v18, v19, v20, v21);

  return (UIShape *)v12;
}

- (UIResolvedShape)_resolvedOutlineShape
{
  UIResolvedShape *result;
  UIResolvedShape *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  UIView *v27;
  _QWORD v28[7];
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  _BYTE v38[64];
  __int128 v39;
  __int128 v40;
  _BYTE v41[25];

  v27 = self;
  result = (UIResolvedShape *)-[UIView _outermostLayer](v27, sel__outermostLayer);
  if (result)
  {
    v3 = result;
    sub_1855BA434((uint64_t)v28);
    v4 = v28[1];
    v26 = (void *)v28[0];
    v5 = v28[2];
    v6 = v28[3];
    v7 = v28[4];
    v8 = v28[5];
    v9 = v28[6];
    v10 = v29;
    -[UIResolvedShape bounds](v3, sel_bounds);
    v30 = 0;
    *(_QWORD *)v38 = 1;
    memset(&v38[8], 0, 48);
    v38[56] = 6;
    *(_QWORD *)&v39 = v11;
    *((_QWORD *)&v39 + 1) = v12;
    *(_QWORD *)&v40 = v13;
    *((_QWORD *)&v40 + 1) = v14;
    *(_QWORD *)v41 = 0;
    *(_QWORD *)&v41[8] = 0;
    *(_QWORD *)&v41[16] = -1;
    v41[24] = 0;
    UIShape.resolve(in:)();
    sub_185228168(v26, v4, v5, v6, v7, v8, v9, v10);

    v15 = (char *)objc_msgSend(objc_allocWithZone((Class)UIResolvedShape), sel_init);
    v16 = &v15[OBJC_IVAR___UIResolvedShape_value];
    v17 = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value];
    v18 = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value + 16];
    v19 = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value + 48];
    *(_OWORD *)&v38[32] = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value + 32];
    *(_OWORD *)&v38[48] = v19;
    *(_OWORD *)v38 = v17;
    *(_OWORD *)&v38[16] = v18;
    v20 = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value + 64];
    v21 = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value + 80];
    v22 = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value + 96];
    *(_OWORD *)&v41[9] = *(_OWORD *)&v15[OBJC_IVAR___UIResolvedShape_value + 105];
    v40 = v21;
    *(_OWORD *)v41 = v22;
    v39 = v20;
    v23 = v34;
    *((_OWORD *)v16 + 2) = v33;
    *((_OWORD *)v16 + 3) = v23;
    v24 = v32;
    *(_OWORD *)v16 = v31;
    *((_OWORD *)v16 + 1) = v24;
    *(_OWORD *)(v16 + 105) = *(_OWORD *)((char *)v37 + 9);
    v25 = v37[0];
    *((_OWORD *)v16 + 5) = v36;
    *((_OWORD *)v16 + 6) = v25;
    *((_OWORD *)v16 + 4) = v35;
    sub_1855B8DA4((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_185228168, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1855B8D8C);

    return (UIResolvedShape *)v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

- (id)_shapeInCoordinateSpace:(id)a3
{
  UIView *v5;
  char *v6;

  swift_unknownObjectRetain();
  v5 = self;
  v6 = sub_1857A1CD4((uint64_t)a3);
  swift_unknownObjectRelease();

  return v6;
}

- (BOOL)isAccessibilityElementByDefault
{
  return 0;
}

- (BOOL)isElementAccessibilityExposedToInterfaceBuilder
{
  return 1;
}

- (BOOL)accessibilityInvertFilterApplied
{
  NSArray *v2;

  v2 = -[CALayer filters](-[UIView layer](self, "layer"), "filters");
  if (v2)
    LOBYTE(v2) = -[NSArray indexOfObjectPassingTest:](v2, "indexOfObjectPassingTest:", &__block_literal_global_399) != 0x7FFFFFFFFFFFFFFFLL;
  return (char)v2;
}

- (BOOL)_ancestorHasInvertFilterApplied
{
  return (*((_QWORD *)&self->_viewFlags + 1) >> 46) & 1;
}

- (void)accessibilityUnapplyInvertFilter
{
  if (_AXSInvertColorsEnabled())
  {
    if (-[UIView accessibilityIgnoresInvertColors](self, "accessibilityIgnoresInvertColors"))
      UIAccessibilityUpdateInvertColorsFilters(-[UIView layer](self, "layer"), 0, 0);
    -[UIView accessibilityUnapplyInvertFilter](-[UIView superview](self, "superview"), "accessibilityUnapplyInvertFilter");
  }
}

- (id)_enclosingInterfaceActionRepresentationView
{
  objc_opt_class();
  return _enclosingViewOfClass(self);
}

- (id)_enclosingInterfaceActionGroupView
{
  objc_opt_class();
  return _enclosingViewOfClass(self);
}

- (id)_uis_outline
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;

  -[UIView frame](self, "frame");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[UIView _cornerRadius](self, "_cornerRadius");
  v12 = v11;
  -[UIView _cornerCurve](self, "_cornerCurve");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView layer](self, "layer");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UIShape shapeWithRoundedRect:cornerRadius:cornerCurve:cornerMask:](_UIShape, "shapeWithRoundedRect:cornerRadius:cornerCurve:cornerMask:", v13, objc_msgSend(v14, "maskedCorners"), v4, v6, v8, v10, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

- (BOOL)allowsGroupOpacity
{
  void *v2;
  char v3;

  -[UIView layer](self, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "allowsGroupOpacity");

  return v3;
}

- (BOOL)allowsGroupBlending
{
  void *v2;
  char v3;

  -[UIView layer](self, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "allowsGroupBlending");

  return v3;
}

- (NSString)appliedContentSizeCategoryLimitsDescription
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v43;
  void *v44;
  UIView *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;

  v44 = (void *)objc_opt_new();
  v45 = self;
  if (v45)
  {
    v3 = 1;
    v4 = v45;
    do
    {
      -[UIView _minimumContentSizeCategory](v45, "_minimumContentSizeCategory");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView _maximumContentSizeCategory](v45, "_maximumContentSizeCategory");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = (void *)MEMORY[0x1E0CB3940];
      v8 = objc_opt_class();
      v52 = v5;
      if (v5 && v6)
      {
        _CSCN(v5);
        v47 = v7;
        v9 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "superview");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "traitCollection");
        v46 = v3;
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "preferredContentSizeCategory");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        _CSCN(v43);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "traitCollection");
        v12 = v8;
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "preferredContentSizeCategory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        _CSCN(v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        _CSCN(v6);
        v16 = v6;
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = (void *)v9;
        objc_msgSend(v47, "stringWithFormat:", CFSTR("%2ld. <%@:%p>: %@ <= (%@->)%@ <= %@"), v46, v12, v4, v9, v11, v15, v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        v6 = v16;
        v19 = v50;

        v20 = v10;
        v3 = v46;

        v5 = v52;
      }
      else
      {
        if (v5)
        {
          _CSCN(v5);
          v48 = v7;
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "superview");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "traitCollection");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "preferredContentSizeCategory");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          _CSCN(v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "traitCollection");
          v23 = v8;
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "preferredContentSizeCategory");
          v25 = v6;
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          _CSCN(v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "stringWithFormat:", CFSTR("%2ld. <%@:%p>: %@ <= (%@->)%@ <= -"), v3, v23, v4, v53, v22, v27);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          v6 = v25;
          v5 = v52;

        }
        else
        {
          if (!v6)
          {
            objc_msgSend(v4, "traitCollection");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "preferredContentSizeCategory");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            _CSCN(v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "stringWithFormat:", CFSTR("%2ld. <%@:%p>: %@"), v3, v8, v4, v20);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_11;
          }
          objc_msgSend(v4, "superview");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "traitCollection");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "preferredContentSizeCategory");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          _CSCN(v49);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "traitCollection");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "preferredContentSizeCategory");
          v30 = v8;
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          _CSCN(v31);
          v32 = v6;
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          _CSCN(v32);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "stringWithFormat:", CFSTR("%2ld. <%@:%p>: - <= (%@->)%@ <= %@"), v3, v30, v4, v28, v33, v34);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          v6 = v32;
          v20 = v49;

          v5 = v52;
        }
        v19 = v51;
      }
LABEL_11:

      objc_msgSend(v44, "insertObject:atIndex:", v18, 0);
      objc_msgSend(v4, "superview");
      v35 = objc_claimAutoreleasedReturnValue();

      ++v3;
      v4 = (void *)v35;
    }
    while (v35);
  }
  v36 = (void *)MEMORY[0x1E0CB3940];
  -[UIView traitCollection](v45, "traitCollection");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "preferredContentSizeCategory");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  _CSCN(v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "stringWithFormat:", CFSTR("--> %@"), v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "addObject:", v40);

  objc_msgSend(v44, "componentsJoinedByString:", CFSTR("\n"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v41;
}

- (id)_visualRecursiveDescription
{
  void *v3;
  _UIASCIIArtFramesRenderer *v4;
  _UIASCIIArtFramesRenderer *v5;
  void *v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__28;
  v13 = __Block_byref_object_dispose__28;
  v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __65__UIView_VisualDescriptionAdditions___visualRecursiveDescription__block_invoke;
  v8[3] = &unk_1E16B8740;
  v8[4] = self;
  v8[5] = &v9;
  v3 = _Block_copy(v8);
  _UIViewTopDownSubtreeTraversal((uint64_t)self, v3, 0);
  v4 = [_UIASCIIArtFramesRenderer alloc];
  v5 = -[_UIASCIIArtFramesRenderer initWithFrames:](v4, "initWithFrames:", v10[5]);
  -[_UIASCIIArtFramesRenderer visualDescription](v5, "visualDescription");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  _Block_object_dispose(&v9, 8);
  return v6;
}

void __65__UIView_VisualDescriptionAdditions___visualRecursiveDescription__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  id v23;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "frame");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v4, "superview");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "convertRect:fromView:", v13, v6, v8, v10, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRect:", v15, v17, v19, v21);
  v23 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "addObject:", v23);

}

- (void)_setFlipsHorizontalAxis:(BOOL)a3
{
  _BOOL8 v3;
  id v5;

  v3 = a3;
  if (-[UIView _flipsHorizontalAxis](self, "_flipsHorizontalAxis") != a3)
  {
    -[UIView layer](self, "layer");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setFlipsHorizontalAxis:", v3);

  }
}

+ (id)_viewWithLayoutConstraints
{
  UIView *v2;
  UIView *v3;

  v2 = [UIView alloc];
  v3 = -[UIView initWithFrame:](v2, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
  -[UIView setTranslatesAutoresizingMaskIntoConstraints:](v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v3;
}

- (void)_constrainViewToSuperview
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  -[UIView superview](self, "superview");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIReferenceLibraryViewController.m"), 85, CFSTR("-[UIView(UIViewExtensions) _constrainViewToSuperview]: %p does not have a superview"), self);

  }
  _NSDictionaryOfVariableBindings(CFSTR("self"), self, 0);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D156E0], "constraintsWithVisualFormat:options:metrics:views:", CFSTR("H:|[self]|"), 0, 0, v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D156E0], "constraintsWithVisualFormat:options:metrics:views:", CFSTR("V:|[self]|"), 0, 0, v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView superview](self, "superview");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addConstraints:", v5);

  -[UIView superview](self, "superview");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addConstraints:", v6);

}

- (void)_setGhostPortal:(id)a3
{
  objc_setAssociatedObject(self, &_UIFlockerAssociatedGhostPortalKey, a3, 0);
}

- (id)_getGhostPortal
{
  return objc_getAssociatedObject(self, &_UIFlockerAssociatedGhostPortalKey);
}

- (void)_setSourceCenter:(CGPoint)a3
{
  void *v4;
  CGPoint v5;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v5, "{CGPoint=dd}");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_ItemViewSourceCenterKey, v4, (void *)3);

}

- (CGPoint)_getSourceCenter
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGPoint result;

  objc_getAssociatedObject(self, &_ItemViewSourceCenterKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "CGPointValue");
  v4 = v3;
  v6 = v5;

  v7 = v4;
  v8 = v6;
  result.y = v8;
  result.x = v7;
  return result;
}

- (BOOL)_beginDragWithInteractionTouches:(id)a3
{
  return -[UIView _beginDragWithTouches:orInitialCentroid:accessibilityEndpoint:](self, "_beginDragWithTouches:orInitialCentroid:accessibilityEndpoint:", a3, 0, *MEMORY[0x1E0CD2538], *(double *)(MEMORY[0x1E0CD2538] + 8), *(double *)(MEMORY[0x1E0CD2538] + 16));
}

- (BOOL)_beginDragWithTouches:(id)a3 orInitialCentroid:(CAPoint3D)a4 accessibilityEndpoint:(id)a5
{
  double z;
  double y;
  double x;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  const char *v30;
  unint64_t v31;
  NSObject *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  void *v61;
  BOOL v62;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  CGAffineTransform transform;
  _BYTE v77[128];
  CGAffineTransformComponents buf;
  uint64_t v79;

  z = a4.z;
  y = a4.y;
  x = a4.x;
  v79 = *MEMORY[0x1E0C80C00];
  v70 = a3;
  v71 = a5;
  -[UIView _draggingSourceDelegate](self, "_draggingSourceDelegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("view's draggingSourceDelegate must be non-nil"));
  if (_UIShouldEnforceOpenInRulesInAccountBasedApp())
  {
    v12 = objc_msgSend(v11, "_dataOwnerOfDragFromView:", self);
    v13 = qword_1ECD774D0;
    if (!qword_1ECD774D0)
    {
      v13 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v13, (unint64_t *)&qword_1ECD774D0);
    }
    v14 = *(NSObject **)(v13 + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = v14;
      _UIDataOwnerDescription(v12);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf.scale.width) = 138412290;
      *(_QWORD *)((char *)&buf.scale.width + 4) = v16;
      _os_log_impl(&dword_185066000, v15, OS_LOG_TYPE_DEFAULT, "Drag data owner: %@", (uint8_t *)&buf, 0xCu);

    }
  }
  else
  {
    v12 = 0;
  }
  objc_msgSend(v11, "_itemsToDragFromView:", self);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (!v17 || !objc_msgSend(v17, "count"))
  {
    v26 = qword_1ECD774D8;
    if (!qword_1ECD774D8)
    {
      v26 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v26, (unint64_t *)&qword_1ECD774D8);
    }
    v27 = *(NSObject **)(v26 + 8);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_59;
    v28 = v27;
    NSStringFromSelector(a2);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.scale.width) = 138412546;
    *(_QWORD *)((char *)&buf.scale.width + 4) = self;
    WORD2(buf.scale.height) = 2112;
    *(_QWORD *)((char *)&buf.scale.height + 6) = v29;
    v30 = "UIView %@ %@: items are nil or empty, drag is failing";
LABEL_20:
    _os_log_impl(&dword_185066000, v28, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&buf, 0x16u);

LABEL_59:
    objc_msgSend(v11, "_viewFailedToDrag:", self);
    v62 = 0;
    v24 = v18;
    goto LABEL_60;
  }
  if (v71)
    goto LABEL_12;
  if (!objc_msgSend(v70, "count"))
  {
    v44 = qword_1ECD774E0;
    if (!qword_1ECD774E0)
    {
      v44 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v44, (unint64_t *)&qword_1ECD774E0);
    }
    v45 = *(NSObject **)(v44 + 8);
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      goto LABEL_59;
    v28 = v45;
    NSStringFromSelector(a2);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.scale.width) = 138412546;
    *(_QWORD *)((char *)&buf.scale.width + 4) = self;
    WORD2(buf.scale.height) = 2112;
    *(_QWORD *)((char *)&buf.scale.height + 6) = v29;
    v30 = "UIView %@ %@: can't begin a drag with no touches";
    goto LABEL_20;
  }
  if ((unint64_t)objc_msgSend(v70, "count") >= 3)
  {
    v31 = qword_1ECD774E8;
    if (!qword_1ECD774E8)
    {
      v31 = __UILogCategoryGetNode("Dragging", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v31, (unint64_t *)&qword_1ECD774E8);
    }
    v32 = *(NSObject **)(v31 + 8);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      goto LABEL_59;
    v28 = v32;
    NSStringFromSelector(a2);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.scale.width) = 138412546;
    *(_QWORD *)((char *)&buf.scale.width + 4) = self;
    WORD2(buf.scale.height) = 2112;
    *(_QWORD *)((char *)&buf.scale.height + 6) = v29;
    v30 = "UIView %@ %@: can't begin a drag with more than 2 touches";
    goto LABEL_20;
  }
LABEL_12:
  objc_msgSend(v11, "_requiredContextIDsForDragSessionInView:", self);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)v19;
  v21 = (void *)MEMORY[0x1E0C9AA60];
  if (v19)
    v21 = (void *)v19;
  v22 = v21;

  objc_msgSend(v18, "reverseObjectEnumerator");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "allObjects");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v71)
  {
    +[UIDraggingBeginningSessionConfiguration configurationWithItems:dataOwner:initialCentroidInSourceWindow:requiredContextIds:sourceView:accessibilityEndpoint:](UIDraggingBeginningSessionConfiguration, "configurationWithItems:dataOwner:initialCentroidInSourceWindow:requiredContextIds:sourceView:accessibilityEndpoint:", v24, v12, v22, self, v71, x, y, z);
    v25 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend(v70, "count") == 1)
    {
      objc_msgSend(v70, "anyObject");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v33, "_originatesFromPointerEvent");

      if (v34)
      {
        objc_msgSend(v70, "anyObject");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        +[UIDraggingBeginningSessionConfiguration configurationWithItems:dataOwner:pointerTouch:requiredContextIds:sourceView:](UIDraggingBeginningSessionConfiguration, "configurationWithItems:dataOwner:pointerTouch:requiredContextIds:sourceView:", v24, v12, v35, v22, self);
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_32;
      }
    }
    +[UIDraggingBeginningSessionConfiguration configurationWithItems:dataOwner:touches:requiredContextIds:sourceView:](UIDraggingBeginningSessionConfiguration, "configurationWithItems:dataOwner:touches:requiredContextIds:sourceView:", v24, v12, v70, v22, self);
    v25 = objc_claimAutoreleasedReturnValue();
  }
  v36 = (void *)v25;
LABEL_32:
  objc_msgSend(v11, "_viewDragSessionProperties:", self);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "setSupportsSystemDrag:", objc_msgSend(v37, "_supportsSystemDrag"));
  objc_msgSend(v36, "setSessionIsRestrictedToSourceApplication:", objc_msgSend(v11, "_viewRestrictsDragToSourceApp:", self));
  objc_msgSend(v36, "setAvoidsKeyboardSuppression:", objc_msgSend(v37, "_avoidsKeyboardSuppression"));
  objc_msgSend(v36, "setResizable:", objc_msgSend(v37, "_resizable"));
  objc_msgSend(v36, "setRotatable:", objc_msgSend(v37, "_rotatable"));
  objc_msgSend(v37, "_minimumResizableSize");
  objc_msgSend(v36, "setMinimumResizableSize:");
  objc_msgSend(v37, "_maximumResizableSize");
  objc_msgSend(v36, "setMaximumResizableSize:");
  objc_msgSend(v36, "setWantsElasticEffects:", objc_msgSend(v37, "_wantsElasticEffects"));
  if (objc_msgSend(v24, "count") == 1)
  {
    objc_msgSend(v24, "objectAtIndexedSubscript:", 0);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "_targetedLiftPreview");
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v37, "_rotatable"))
    {
      objc_msgSend(v39, "_dragPreviewProvider");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "_duiPreview");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "originalRotation");
      objc_msgSend(v36, "setOriginalRotation:");

    }
    if (objc_msgSend(v37, "_resizable"))
    {
      memset(&buf, 0, sizeof(buf));
      objc_msgSend(v39, "target");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = v42;
      if (v42)
        objc_msgSend(v42, "transform");
      else
        memset(&transform, 0, sizeof(transform));
      CGAffineTransformDecompose(&buf, &transform);

      objc_msgSend(v36, "setOriginalScale:", buf.scale.width, buf.scale.height);
    }

  }
  -[UIView _screen](self, "_screen");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "_dragManager");
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v47, "beginDragWithSessionConfiguration:", v36);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v36, "initiatedWithPointer"))
  {
    v68 = v47;
    v69 = v48;
    objc_msgSend(v70, "anyObject");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "window");
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    v51 = (void *)UIApp;
    objc_msgSend((id)UIApp, "_touchesEventForWindow:", v50);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "_cancelTouchesOrPresses:withEvent:", v70, v52);

    v67 = v50;
    objc_msgSend(v50, "screen");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "displayIdentity");
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    if (v54)
    {
      v64 = v54;
      v65 = v22;
      v66 = v11;
      v55 = (void *)objc_opt_new();
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v56 = v70;
      v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
      if (v57)
      {
        v58 = v57;
        v59 = *(_QWORD *)v73;
        do
        {
          for (i = 0; i != v58; ++i)
          {
            if (*(_QWORD *)v73 != v59)
              objc_enumerationMutation(v56);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(*(id *)(*((_QWORD *)&v72 + 1) + 8 * i), "_touchIdentifier"));
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "addObject:", v61);

          }
          v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v72, v77, 16);
        }
        while (v58);
      }

      v54 = v64;
      +[_UISystemGestureManager _cancelTouchesWithIdentifiers:forDisplayWithIdentity:](_UISystemGestureManager, "_cancelTouchesWithIdentifiers:forDisplayWithIdentity:", v55, v64);

      v11 = v66;
      v22 = v65;
    }

    v47 = v68;
    v48 = v69;
  }

  if (!v48)
  {
    v18 = v24;
    goto LABEL_59;
  }
  objc_msgSend(v11, "_view:willBeginDraggingWithSession:", self, v48);

  v62 = 1;
LABEL_60:

  return v62;
}

- (BOOL)_accessibilityCanDrag
{
  _BOOL4 v3;
  void *v4;
  char v5;

  v3 = -[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled");
  if (v3)
  {
    -[UIView _draggingSourceDelegate](self, "_draggingSourceDelegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "_canDragFromView:", self);

    LOBYTE(v3) = v5;
  }
  return v3;
}

- (void)_accessibilityBeginDragAtPoint:(CGPoint)a3 endpoint:(id)a4 completion:(id)a5
{
  -[UIView _accessibilityBeginDragAtPoint3D:endpoint:completion:](self, "_accessibilityBeginDragAtPoint3D:endpoint:completion:", a4, a5, a3.x, a3.y, 0.0);
}

- (void)_accessibilityBeginDragAtPoint3D:(CAPoint3D)a3 endpoint:(id)a4 completion:(id)a5
{
  double z;
  double y;
  double x;
  id v10;
  id v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  id v23;
  _QWORD v24[5];
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  z = a3.z;
  y = a3.y;
  x = a3.x;
  v35 = *MEMORY[0x1E0C80C00];
  v10 = a4;
  v11 = a5;
  v12 = -[UIView _accessibilityCanDrag](self, "_accessibilityCanDrag");
  if (v10 && v12)
  {
    -[UIView convertPoint:toView:](self, "convertPoint:toView:", 0, x, y);
    v14 = v13;
    v16 = v15;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    -[UIView interactions](self, "interactions");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v31;
      while (2)
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v31 != v20)
            objc_enumerationMutation(v17);
          v22 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v24[0] = MEMORY[0x1E0C809B0];
            v24[1] = 3221225472;
            v24[2] = __75__UIView_UIDragging___accessibilityBeginDragAtPoint3D_endpoint_completion___block_invoke;
            v24[3] = &unk_1E16C4480;
            v24[4] = self;
            v27 = v14;
            v28 = v16;
            v29 = 0;
            v25 = v10;
            v26 = v11;
            v23 = v22;
            objc_msgSend(v23, "_accessibilityPrepareForDragAtPoint:completion:", v24, x, y, z);

            goto LABEL_15;
          }
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        if (v19)
          continue;
        break;
      }
    }
LABEL_15:

  }
  else if (v11)
  {
    (*((void (**)(id, _QWORD))v11 + 2))(v11, 0);
  }

}

uint64_t __75__UIView_UIDragging___accessibilityBeginDragAtPoint3D_endpoint_completion___block_invoke(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t (*v6)(void);

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_beginDragWithTouches:orInitialCentroid:accessibilityEndpoint:", v4, *(_QWORD *)(a1 + 40), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));

    result = *(_QWORD *)(a1 + 48);
    if (!result)
      return result;
    v6 = *(uint64_t (**)(void))(result + 16);
  }
  else
  {
    result = *(_QWORD *)(a1 + 48);
    if (!result)
      return result;
    v6 = *(uint64_t (**)(void))(result + 16);
  }
  return v6();
}

- (id)_accessibilityDragInteractionsForAddingItems
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_opt_new();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[UIView interactions](self, "interactions", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v10 = v9;
          if (objc_msgSend(v10, "_accessibilityCanAddItemsToDragSession"))
            objc_msgSend(v3, "addObject:", v10);

        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  return v3;
}

- (BOOL)_accessibilityCanAddItemsToDragSession
{
  void *v3;
  BOOL v4;

  if (!-[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled"))
    return 0;
  -[UIView _accessibilityDragInteractionsForAddingItems](self, "_accessibilityDragInteractionsForAddingItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count") != 0;

  return v4;
}

- (BOOL)_accessibilityAddItemsToDragSessionAtPoint3D:(CAPoint3D)a3
{
  double z;
  double y;
  double x;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  z = a3.z;
  y = a3.y;
  x = a3.x;
  v17 = *MEMORY[0x1E0C80C00];
  if (-[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled"))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    -[UIView _accessibilityDragInteractionsForAddingItems](self, "_accessibilityDragInteractionsForAddingItems", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v13 != v9)
            objc_enumerationMutation(v7);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "_accessibilityAddItemsToDragSessionAtPoint:", x, y, z) & 1) != 0)
          {
            LOBYTE(v8) = 1;
            goto LABEL_13;
          }
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_13:

  }
  else
  {
    LOBYTE(v8) = 0;
  }
  return v8;
}

- (BOOL)_accessibilityAddItemsToDragSessionAtPoint:(CGPoint)a3
{
  return -[UIView _accessibilityAddItemsToDragSessionAtPoint3D:](self, "_accessibilityAddItemsToDragSessionAtPoint3D:", a3.x, a3.y, 0.0);
}

- (BOOL)_accessibilityCanDrop
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (-[UIView isUserInteractionEnabled](self, "isUserInteractionEnabled"))
  {
    _UIDragEventPasteConfigurationForOwner(self);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      LOBYTE(v4) = 1;
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v10 = 0u;
      -[UIView interactions](self, "interactions", 0, 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v4)
      {
        v6 = *(_QWORD *)v10;
        while (2)
        {
          for (i = 0; i != v4; ++i)
          {
            if (*(_QWORD *)v10 != v6)
              objc_enumerationMutation(v5);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              LOBYTE(v4) = 1;
              goto LABEL_15;
            }
          }
          v4 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
          if (v4)
            continue;
          break;
        }
      }
LABEL_15:

    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (id)_findInteractionIfExists
{
  void *v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[UIView interactions](self, "interactions", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v3 = v6;
          goto LABEL_11;
        }
      }
      v3 = (id)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

- (BOOL)_canPerformDefaultImplementationForStandardEditAction:(SEL)a3
{
  void *v4;
  BOOL v5;

  if (!-[UIView _isFindAction:](self, "_isFindAction:", a3))
    return 0;
  -[UIView _findInteractionIfExists](self, "_findInteractionIfExists");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 != 0;

  return v5;
}

- (void)find:(id)a3
{
  id v3;

  -[UIView _findInteractionIfExists](self, "_findInteractionIfExists", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "presentFindNavigatorShowingReplace:", 0);

}

- (void)findAndReplace:(id)a3
{
  id v3;

  -[UIView _findInteractionIfExists](self, "_findInteractionIfExists", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "presentFindNavigatorShowingReplace:", 1);

}

- (void)findNext:(id)a3
{
  id v3;

  -[UIView _findInteractionIfExists](self, "_findInteractionIfExists", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "findNext");

}

- (void)findPrevious:(id)a3
{
  id v3;

  -[UIView _findInteractionIfExists](self, "_findInteractionIfExists", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "findPrevious");

}

- (void)_setIntermediateLayerMaskFrameOrigin:(void *)a1
{
  id v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPoint:");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(a1, &_UIIntermediateLayerMaskFrameOrigin, v2, (void *)1);

  }
}

- (double)_intermediateLayerMaskFrameOrigin
{
  void *v1;
  double v2;
  double v3;

  if (!a1)
    return 0.0;
  objc_getAssociatedObject(a1, &_UIIntermediateLayerMaskFrameOrigin);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "pointValue");
  v3 = v2;

  return v3;
}

- (void)_delegateOutermostLayerDidChange
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((a1[128] & 0x40) != 0)
  {
    -[UIView _multiLayerDelegatesTableCreateIfNecessary:](a1, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v8;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "_outermostLayerDidChange:", a1);
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v4);
    }

  }
}

- (id)_backing_clientLayer
{
  if (a1)
    a1 = (id *)a1[21];
  return a1;
}

- (void)_backing_willChangeValueForKeyPath:(uint64_t)a1
{
  void *v4;
  uint64_t v5;
  _QWORD v6[6];

  if (a1)
  {
    +[_UIViewBackingObserver sharedObserver](_UIViewBackingObserver, "sharedObserver");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 168);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __61__UIView__UIViewBacking___backing_willChangeValueForKeyPath___block_invoke;
    v6[3] = &unk_1E16B1B50;
    v6[4] = a1;
    v6[5] = a2;
    objc_msgSend(v4, "observe:forKeyPath:once:", v5, a2, v6);

  }
}

void __61__UIView__UIViewBacking___backing_willChangeValueForKeyPath___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 168), "valueForKeyPath:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[UIView _backing_layers](*(_QWORD **)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v7);
        if (v8 != *(void **)(*(_QWORD *)(a1 + 32) + 168))
        {
          v9 = (id)objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v7), "unsafeUnretainedDelegate", (_QWORD)v13);
          if (v9 && (v10 = v9, (_IsKindOfUIView((uint64_t)v9) & 1) != 0))
          {
            v11 = *(_QWORD *)(a1 + 40);
            v12 = v10;
            objc_msgSend(v12, "_privateSubview_setValue:forObservedLayerKeyPath:", v2, v11);

          }
          else
          {
            objc_msgSend(v8, "setValue:forKeyPath:", v2, *(_QWORD *)(a1 + 40));
          }
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

}

- (id)_multiLayerDelegatesTableCreateIfNecessary:(char *)object
{
  void *v3;
  void *v4;

  if (!object)
    goto LABEL_7;
  if ((object[128] & 0x40) != 0)
  {
    objc_getAssociatedObject(object, &_UIViewMultiLayerDelegateTable);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
      return v3;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInMethod:object:file:lineNumber:description:", sel__multiLayerDelegatesTableCreateIfNecessary_, object, CFSTR("_UIViewBacking.m"), 514, CFSTR("Multi layer delegate table missing."));

LABEL_7:
    v3 = 0;
    return v3;
  }
  if (!a2)
    goto LABEL_7;
  objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(object, &_UIViewMultiLayerDelegateTable, v3, (void *)0x301);
  *(_QWORD *)(object + 124) |= 0x4000000000uLL;
  return v3;
}

- (void)_registerMultiLayerDelegate:(char *)a1
{
  id v3;

  if (a1)
  {
    -[UIView _multiLayerDelegatesTableCreateIfNecessary:](a1, 1);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", a2);

  }
}

- (void)_removeMultiLayerDelegate:(uint64_t)a1
{
  id v4;

  if (a1)
  {
    -[UIView _multiLayerDelegatesTableCreateIfNecessary:]((char *)a1, 0);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeObject:", a2);
    if (!objc_msgSend(v4, "count"))
    {
      objc_setAssociatedObject((id)a1, &_UIViewMultiLayerDelegateTable, 0, (void *)0x301);
      *(_QWORD *)(a1 + 124) &= ~0x4000000000uLL;
    }

  }
}

- (void)_insertPrivateSubview:(id)a3 belowLayer:(id)a4
{
  if (self)
    -[UIView _backing_addPrivateSubview:positioned:relativeTo:]((uint64_t)self, a3, -3, (uint64_t)a4);
}

- (void)_insertPrivateSubview:(id)a3 aboveLayer:(id)a4
{
  if (self)
    -[UIView _backing_addPrivateSubview:positioned:relativeTo:]((uint64_t)self, a3, -2, (uint64_t)a4);
}

- (id)_effectHost
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = a1[22];
  if (v2 && *(_QWORD *)(v2 + 40))
    goto LABEL_8;
  v3 = -[UIVisualEffectBackingHost initForView:]([UIVisualEffectBackingHost alloc], "initForView:", a1);
  v4 = a1[22];
  if (v4)
    objc_storeStrong((id *)(v4 + 40), v3);

  objc_msgSend(a1, "mt_captureGroupName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = a1[22];
  v7 = v6 ? *(void **)(v6 + 40) : 0;
  objc_msgSend(v7, "_setCaptureGroupName:", v5);

  v2 = a1[22];
  if (v2)
LABEL_8:
    v8 = *(void **)(v2 + 40);
  else
    v8 = 0;
  return v8;
}

- (_QWORD)_backing__initialValueForKey:(_QWORD *)a1
{
  uint64_t v2;
  void *v3;

  if (a1)
  {
    v2 = a1[22];
    if (v2)
      v3 = *(void **)(v2 + 40);
    else
      v3 = 0;
    objc_msgSend(v3, "_initialValueForKey:", a2);
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (NSString)mt_captureGroupName
{
  _UIViewBackingAux *viewBackingAux;
  NSString *v4;
  void *v5;
  objc_class *v6;
  void *v7;

  viewBackingAux = self->_viewBackingAux;
  if (!viewBackingAux || (v4 = viewBackingAux->_captureGroupName) == 0)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    v6 = (objc_class *)objc_opt_class();
    NSStringFromClass(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("<%p: %@>"), self, v7);
    v4 = (NSString *)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

- (BOOL)_hasBackgroundMaterial
{
  _UIViewBackingAux *viewBackingAux;
  UIVisualEffectBackingHost *v4;
  UIVisualEffectBackingHost *v5;
  _UIViewBackingAux *v6;
  UIVisualEffectBackingHost *effectHost;
  void *v8;
  BOOL v9;

  viewBackingAux = self->_viewBackingAux;
  if (!viewBackingAux)
    return 0;
  v4 = viewBackingAux->_effectHost;
  if (!v4)
    return 0;
  v5 = v4;
  v6 = self->_viewBackingAux;
  if (v6)
    effectHost = v6->_effectHost;
  else
    effectHost = 0;
  -[UIVisualEffectBackingHost backgroundEffects](effectHost, "backgroundEffects");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "count") != 0;

  return v9;
}

- (void)mt_setVisualEffect:(id)a3
{
  unint64_t viewBackingAux;
  void *v6;
  id v7;

  if (self)
  {
    viewBackingAux = (unint64_t)self->_viewBackingAux;
    if (viewBackingAux)
      viewBackingAux = *(_QWORD *)(viewBackingAux + 40);
    if ((unint64_t)a3 | viewBackingAux)
    {
      -[UIView _backing_wrapLayerInIntermediate]((uint64_t)self);
      -[UIView _backing_outermostLayer](self);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setAllowsGroupBlending:", 0);

      -[UIView _effectHost](self);
      v7 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setVisualEffect:", a3);

    }
  }
}

- (UIVisualEffect)mt_visualEffect
{
  _UIViewBackingAux *viewBackingAux;
  UIVisualEffectBackingHost *effectHost;

  if (self)
  {
    viewBackingAux = self->_viewBackingAux;
    if (viewBackingAux)
      effectHost = viewBackingAux->_effectHost;
    else
      effectHost = 0;
    -[UIVisualEffectBackingHost visualEffect](effectHost, "visualEffect");
    self = (UIView *)objc_claimAutoreleasedReturnValue();
  }
  return (UIVisualEffect *)self;
}

- (NSArray)mt_contentEffects
{
  _UIViewBackingAux *viewBackingAux;
  UIVisualEffectBackingHost *effectHost;

  if (self)
  {
    viewBackingAux = self->_viewBackingAux;
    if (viewBackingAux)
      effectHost = viewBackingAux->_effectHost;
    else
      effectHost = 0;
    -[UIVisualEffectBackingHost contentEffects](effectHost, "contentEffects");
    self = (UIView *)objc_claimAutoreleasedReturnValue();
  }
  return (NSArray *)self;
}

- (NSArray)mt_backgroundEffects
{
  _UIViewBackingAux *viewBackingAux;
  UIVisualEffectBackingHost *effectHost;

  if (self)
  {
    viewBackingAux = self->_viewBackingAux;
    if (viewBackingAux)
      effectHost = viewBackingAux->_effectHost;
    else
      effectHost = 0;
    -[UIVisualEffectBackingHost backgroundEffects](effectHost, "backgroundEffects");
    self = (UIView *)objc_claimAutoreleasedReturnValue();
  }
  return (NSArray *)self;
}

- (void)mt_addPrivateSubview:(id)a3
{
  if (self)
    -[UIView _backing_addPrivateSubview:positioned:relativeTo:]((uint64_t)self, a3, -1, 0);
}

- (int64_t)_overrideUserInterfaceRenderingMode
{
  void *v3;
  int v4;
  void *v5;
  int64_t v6;

  -[UIView _internalTraitOverrides](self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_containsTraitToken:", 0x1E1A996C0);

  if (!v4)
    return 0;
  -[UIView _internalTraitOverrides](self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_valueForNSIntegerTraitToken:", 0x1E1A996C0);

  return v6;
}

- (BOOL)_shouldAdaptToMaterials
{
  return (*((unsigned __int8 *)&self->_viewFlags + 24) >> 5) & 1;
}

- (int64_t)_backgroundMergeBehavior
{
  return (*(_QWORD *)((char *)&self->_viewFlags + 20) >> 45) & 3;
}

- (CGRect)_accessoryViewFrame
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGRect result;

  -[UIView superview](self, "superview");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_accessoryViewFrame");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = v4;
  v12 = v6;
  v13 = v8;
  v14 = v10;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

- (void)_setAccessoryViewFrame:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  id v7;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView superview](self, "superview");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_setAccessoryViewFrame:", x, y, width, height);

}

- (void)_removeAutolayoutSizingConstraints
{
  void *v3;
  void *v4;

  FindHeightConstraint(self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;
    -[UIView removeConstraint:](self, "removeConstraint:", v3);
    -[UIView setTranslatesAutoresizingMaskIntoConstraints:](self, "setTranslatesAutoresizingMaskIntoConstraints:", 1);
    v3 = v4;
  }

}

- (BOOL)_hasAutolayoutHeightConstraint
{
  void *v2;
  BOOL v3;

  FindHeightConstraint(self);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (void)reduceWidth:(double)a3
{
  double v5;

  -[UIView size](self, "size");
  -[UIView setSize:](self, "setSize:", v5 - a3);
  -[UIView setNeedsDisplay](self, "setNeedsDisplay");
}

- (BOOL)_isKnownUISearchBarComponentContainer
{
  return 0;
}

__n128 __68__UIView__UIConstraintBasedLayoutEmbedding___baselineOffsetsAtSize___block_invoke(uint64_t a1, void *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __n128 result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = -[UIView _nsis_layoutRectFromHostingViewInEngine:](*(void **)(a1 + 32), a2);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(double *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 48) = v7;
  *(_QWORD *)(v5 + 56) = v8;
  v9 = *(void **)(a1 + 40);
  if (*(void **)(a1 + 32) == v9)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    result = *(__n128 *)(v16 + 32);
    v17 = *(_OWORD *)(v16 + 48);
    *(__n128 *)(v15 + 32) = result;
    *(_OWORD *)(v15 + 48) = v17;
  }
  else
  {
    result.n128_f64[0] = -[UIView _nsis_layoutRectFromHostingViewInEngine:](v9, a2);
    v11 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8);
    v11[4] = result.n128_u64[0];
    v11[5] = v12;
    v11[6] = v13;
    v11[7] = v14;
  }
  return result;
}

- (void)_measureViewWithSize:(CGSize)a3 temporaryConstraints:(id)a4 suspendingSystemConstraints:(BOOL)a5 withOptimizedEngineBlock:(id)a6
{
  CGFloat height;
  CGFloat width;
  int has_internal_diagnostics;
  BOOL v14;
  int v15;
  uint64_t v16;
  id v17;
  id v18;
  int v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void (**v25)(id, id);
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  unint64_t v34;
  NSObject *v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t viewFlags;
  _BYTE v39[6];
  int v40;
  UIView *v41;
  _QWORD v42[9];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[5];
  _QWORD v48[6];
  _QWORD v49[12];
  char v50;
  BOOL v51;
  _QWORD v52[3];
  char v53;
  uint8_t v54[128];
  _BYTE buf[24];
  void (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;

  height = a3.height;
  width = a3.width;
  v59 = *MEMORY[0x1E0C80C00];
  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  v14 = -[UIView _wantsConstraintBasedLayout](self, "_wantsConstraintBasedLayout");
  if (has_internal_diagnostics)
  {
    if (!v14)
    {
      v32 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = NSStringFromSelector(a2);
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = self;
        _os_log_fault_impl(&dword_185066000, v32, OS_LOG_TYPE_FAULT, "Internal UIKit bug: %@ called an a view that does not want autolayout; %@",
          buf,
          0x16u);
      }
    }
  }
  else if (!v14)
  {
    v34 = _MergedGlobals_23_3;
    if (!_MergedGlobals_23_3)
    {
      v34 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v34, (unint64_t *)&_MergedGlobals_23_3);
    }
    v35 = *(NSObject **)(v34 + 8);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = NSStringFromSelector(a2);
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = self;
      _os_log_impl(&dword_185066000, v35, OS_LOG_TYPE_ERROR, "Internal UIKit bug: %@ called an a view that does not want autolayout; %@",
        buf,
        0x16u);
    }
  }
  v15 = os_variant_has_internal_diagnostics();
  v16 = *((_QWORD *)&self->_viewFlags + 1);
  if (v15)
  {
    if ((v16 & 0x1000) != 0)
    {
      v33 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_185066000, v33, OS_LOG_TYPE_FAULT, "Internal UIKit bug: Should never re-enter -_system_layoutSizeThatFits:fixedAxes:", buf, 2u);
      }
    }
  }
  else if ((v16 & 0x1000) != 0)
  {
    v36 = qword_1ECD7B798;
    if (!qword_1ECD7B798)
    {
      v36 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v36, (unint64_t *)&qword_1ECD7B798);
    }
    v37 = *(NSObject **)(v36 + 8);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_185066000, v37, OS_LOG_TYPE_ERROR, "Internal UIKit bug: Should never re-enter -_system_layoutSizeThatFits:fixedAxes:", buf, 2u);
    }
  }
  *((_QWORD *)&self->_viewFlags + 1) |= 0x1000uLL;
  v41 = self;
  if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints")
    && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    v17 = -[UIView _layoutEngineCreateIfNecessary](self, "_layoutEngineCreateIfNecessary");
    v18 = a4;
    v19 = 1;
  }
  else
  {
    v17 = objc_alloc_init(MEMORY[0x1E0D156C8]);
    if (dyld_program_sdk_at_least())
      objc_msgSend(v17, "setShouldIntegralize:", 0);
    objc_msgSend(v17, "setEngineScalingCoefficients:", -[UIView _preferredLayoutEngineToUserScalingCoefficients](self));
    if (dyld_program_sdk_at_least())
      objc_msgSend(v17, "setDelegate:", self);
    v18 = a4;
    v19 = 0;
  }
  v20 = 0;
  v21 = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3052000000;
  v56 = __Block_byref_object_copy__125;
  v57 = __Block_byref_object_dispose__125;
  v58 = 0;
  if (v19)
  {
    v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v21 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  }
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x2020000000;
  v53 = 0;
  viewFlags = (uint64_t)v41->_viewFlags;
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke;
  v49[3] = &unk_1E16D52E8;
  v40 = v19;
  v50 = v19;
  v49[4] = v41;
  v49[5] = v18;
  v51 = a5;
  v49[6] = v20;
  v49[7] = v17;
  v49[8] = v21;
  v49[9] = buf;
  v22 = MEMORY[0x1E0C809B0];
  *(CGFloat *)&v49[10] = width;
  *(CGFloat *)&v49[11] = height;
  objc_msgSend(v17, "withAutomaticOptimizationDisabled:", v49, viewFlags);
  v48[0] = v22;
  v48[1] = 3221225472;
  v48[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_2;
  v48[3] = &unk_1E16C3E80;
  v48[4] = v17;
  v48[5] = buf;
  objc_msgSend(v17, "withAutomaticOptimizationDisabled:", v48);
  v23 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v47[0] = v22;
  v47[1] = 3221225472;
  v47[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_3;
  v47[3] = &unk_1E16D5310;
  v47[4] = v23;
  _UIViewTopDownSubtreeTraversal((uint64_t)v41, v47, 0);
  v24 = v20;
  v25 = (void (**)(id, id))a6;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
  if (v26)
  {
    v27 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v44 != v27)
          objc_enumerationMutation(v23);
        v29 = *(_QWORD **)(*((_QWORD *)&v43 + 1) + 8 * i);
        v30 = v29 + 13;
        v29[14] |= 4uLL;
        objc_msgSend(v29, "_updateBaselineInformationDependentOnBounds");
        v30[1] &= ~4uLL;
      }
      v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
    }
    while (v26);
  }

  v31 = MEMORY[0x1E0C809B0];
  v25[2](v25, v17);
  if (v40)
  {
    v42[0] = v31;
    v42[1] = 3221225472;
    v42[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_4;
    v42[3] = &unk_1E16D5338;
    v42[4] = v21;
    v42[5] = v17;
    v42[7] = v41;
    v42[8] = v52;
    v42[6] = v24;
    objc_msgSend(v17, "withAutomaticOptimizationDisabled:", v42);

    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v17);
  }
  else
  {

  }
  if ((*(_QWORD *)v39 & 0x300000000000) == 0x300000000000)
  {
    _UIViewTopDownSubtreeTraversal((uint64_t)v41, &__block_literal_global_333, 0);
    if (v40)
    {
      if (!objc_msgSend(-[UIView _layoutEngineHostConstraints](v41, "_layoutEngineHostConstraints"), "count"))
        -[UIView _setNeedsUpdateConstraints](v41, "_setNeedsUpdateConstraints");
    }
  }
  *((_QWORD *)&v41->_viewFlags + 1) &= ~0x1000uLL;
  _Block_object_dispose(v52, 8);
  _Block_object_dispose(buf, 8);
}

_QWORD *__140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  BOOL v12;
  void *v13;
  float v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v4 = (void *)objc_msgSend(v3, "_layoutEngineHostConstraints");
    v5 = objc_msgSend(v4, "count");
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v6 = *(void **)(a1 + 40);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v29 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          if (*(_BYTE *)(a1 + 97))
            v12 = v5 == 0;
          else
            v12 = 1;
          if (v12 || objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "relation"))
            goto LABEL_15;
          v13 = (void *)objc_msgSend(v4, "objectAtIndexedSubscript:", objc_msgSend(v11, "firstAttribute") != 7);
          objc_msgSend(v11, "priority");
          if (v14 == 1000.0)
          {
            objc_msgSend(v13, "constant");
            v16 = v15;
            objc_msgSend(v11, "constant");
            if (v16 == v17)
              continue;
          }
          objc_msgSend(*(id *)(a1 + 48), "addObject:", v13);
          objc_msgSend(v13, "_removeFromEngine:", *(_QWORD *)(a1 + 56));
LABEL_15:
          objc_msgSend(*(id *)(a1 + 64), "addObject:", v11);
          objc_msgSend(v11, "_addToEngine:", *(_QWORD *)(a1 + 56));
          continue;
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v8);
    }
  }
  else
  {
    -[UIView _populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:](v3, *(_QWORD *)(a1 + 56), v3);
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v18 = *(void **)(a1 + 40);
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v25;
      do
      {
        for (j = 0; j != v20; ++j)
        {
          if (*(_QWORD *)v25 != v21)
            objc_enumerationMutation(v18);
          objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * j), "_addToEngine:", *(_QWORD *)(a1 + 56));
        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      }
      while (v20);
    }
  }
  return -[UIView _recursiveCollectTemporaryInternalConstraintsWithEngine:ignoreAutoresizingMaskConstraints:returningConstraintsForViewsNeedingSecondPass:currentTargetWidth:](*(_QWORD **)(a1 + 32), *(_QWORD **)(a1 + 56), 1, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40, *(double *)(a1 + 80));
}

uint64_t __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "keyEnumerator", 0), "allObjects");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        -[UIView _finishTemporaryInternalConstraints:withEngine:](*(void **)(*((_QWORD *)&v7 + 1) + 8 * v6), (void *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6)), *(void **)(a1 + 32));
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_3(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t result;

  result = objc_msgSend(a2, "_wantsBaselineUpdatingFollowingConstraintsPass");
  if ((_DWORD)result)
    result = objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  if ((a2[13] & 0x800000000000000) == 0)
    *a3 = 1;
  return result;
}

void *__140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *result;
  void *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(void **)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * i), "_removeFromEngine:", *(_QWORD *)(a1 + 40));
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(void **)(a1 + 48);
  result = (void *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v11), "_addToEngine:", *(_QWORD *)(a1 + 40));
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      result = (void *)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      v9 = result;
    }
    while (result);
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    return -[UIView _resetLayoutEngineHostConstraints](*(void **)(a1 + 56));
  return result;
}

void __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_5(uint64_t a1, uint64_t a2, BOOL *a3)
{
  *a3 = (*(_QWORD *)(a2 + 104) & 0x200000000000) != 0;
  *(_QWORD *)(a2 + 104) |= 0x100000000000uLL;
}

- (id)_preferredHoverShape
{
  return 0;
}

- (id)_preferredHoverEffect
{
  return 0;
}

- (BOOL)_providesCustomPointerInteraction
{
  return 0;
}

- (BOOL)_providesCustomRemoteHoverInteraction
{
  return 0;
}

- (BOOL)_canBeReusedInPickerView
{
  return 0;
}

- (_UITouchForceObservable)_touchForceObservable
{
  _UITouchForceObservable *v3;

  objc_getAssociatedObject(self, &_UITouchForceObservableAssociationKey);
  v3 = (_UITouchForceObservable *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v3 = -[_UITouchForceObservable initWithView:]([_UITouchForceObservable alloc], "initWithView:", self);
    objc_setAssociatedObject(self, &_UITouchForceObservableAssociationKey, v3, (void *)1);
  }
  return v3;
}

- (void)_registerForHDRAnimations
{
  id v3;

  +[_UIHDRUsageCoordinator sharedInstance]();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIHDRUsageCoordinator registerForAndApplyHDRAnimationToView:]((uint64_t)v3, self);

}

- (id)_appendSnapshotDisplaySystemIdentifierToOptionsIfNeeded:(void *)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    objc_msgSend(a1, "_window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_windowHostingScene");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "renderingEnvironment");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "systemDisplayIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v8 = *MEMORY[0x1E0CD30B8];
      objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CD30B8]);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v9)
      {
        v13 = v8;
        v14[0] = v7;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "bs_dictionaryByAddingEntriesFromDictionary:", v10);
        v11 = objc_claimAutoreleasedReturnValue();

        v3 = (id)v11;
      }
    }
    v3 = v3;

    a1 = v3;
  }

  return a1;
}

- (UIDropInteraction)_dynamicDropInteraction
{
  void *v2;
  void *v3;

  objc_getAssociatedObject(self, &_UIViewDynamicDropInteractionKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dropInteraction");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (UIDropInteraction *)v3;
}

- (void)_setDynamicDropInteraction:(id)a3
{
  id v4;
  _UIDropInteractionWeakWrapper *value;

  if (a3)
  {
    v4 = a3;
    value = -[_UIDropInteractionWeakWrapper initWithDropInteraction:]([_UIDropInteractionWeakWrapper alloc], "initWithDropInteraction:", v4);

  }
  else
  {
    value = 0;
  }
  objc_setAssociatedObject(self, &_UIViewDynamicDropInteractionKey, value, (void *)1);

}

- (void)_ui_addToView:(id)a3 atIndex:(int64_t)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  if ((a4 & 0x8000000000000000) == 0)
  {
    objc_msgSend(v8, "insertSubview:atIndex:", self, a4);
LABEL_5:
    v7 = v8;
    goto LABEL_6;
  }
  -[UIView superview](self, "superview");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  v7 = v8;
  if (v6 != v8)
  {
    objc_msgSend(v8, "addSubview:", self);
    goto LABEL_5;
  }
LABEL_6:

}

- (void)_ui_addSubLayoutItem:(id)a3
{
  objc_msgSend(a3, "_ui_addToView:atIndex:", self, -1);
}

- (void)_ui_insertSubLayoutItem:(id)a3 atIndex:(int64_t)a4
{
  objc_msgSend(a3, "_ui_addToView:atIndex:", self, a4);
}

+ (void)sticker_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 updateReason:(unsigned int)a4 animations:(id)a5
{
  +[UIView _modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:](UIView, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", *(_QWORD *)&a4, a5, *(double *)&a3.minimum, *(double *)&a3.maximum, *(double *)&a3.preferred);
}

- (void)_willBeginBeingDisplayedInPointerContentEffect
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  -[UIView subviews](self, "subviews", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "_willBeginBeingDisplayedInPointerContentEffect");
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)_didStopBeingDisplayedInPointerContentEffect
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  -[UIView subviews](self, "subviews", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "_didStopBeingDisplayedInPointerContentEffect");
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)_uimorphingView_setInitialAlpha:(double)a3
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_UIMorphingAssociatedInitialAlphaKey, v4, (void *)3);

}

- (double)_uimorphingView_getInitialAlpha
{
  void *v2;
  double v3;
  double v4;

  objc_getAssociatedObject(self, &_UIMorphingAssociatedInitialAlphaKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "doubleValue");
  v4 = v3;

  return v4;
}

- (CGRect)_convertViewPointToSceneSpaceForKeyboard:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  id *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView _window](self, "_window");
  v8 = (id *)objc_claimAutoreleasedReturnValue();
  -[UIWindow _fbsScene](v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[UIView _window](self, "_window");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "screen");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "fixedCoordinateSpace");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v12, x, y, width, height);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

  }
  else
  {
    -[UIView layer](self, "layer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "convertRect:toLayer:", 0, x, y, width, height);
    v14 = v21;
    v16 = v22;
    v18 = v23;
    v20 = v24;
  }

  v25 = v14;
  v26 = v16;
  v27 = v18;
  v28 = v20;
  result.size.height = v28;
  result.size.width = v27;
  result.origin.y = v26;
  result.origin.x = v25;
  return result;
}

- (BOOL)showsLargeContentViewer
{
  void *v2;
  char v3;

  -[UIView _largeContentStoredProperties](self, "_largeContentStoredProperties");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "showsLargeContentViewer");

  return v3;
}

- (UIImage)largeContentImage
{
  void *v2;
  void *v3;

  -[UIView _largeContentStoredProperties](self, "_largeContentStoredProperties");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "largeContentImage");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (UIImage *)v3;
}

- (UIEdgeInsets)largeContentImageInsets
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  UIEdgeInsets result;

  -[UIView _largeContentStoredProperties](self, "_largeContentStoredProperties");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "largeContentImageInsets");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
  }
  else
  {
    v11 = 0.0;
    v9 = 0.0;
    v7 = 0.0;
    v5 = 0.0;
  }

  v12 = v5;
  v13 = v7;
  v14 = v9;
  v15 = v11;
  result.right = v15;
  result.bottom = v14;
  result.left = v13;
  result.top = v12;
  return result;
}

- (void)setLargeContentImageInsets:(UIEdgeInsets)largeContentImageInsets
{
  double right;
  double bottom;
  double left;
  double top;
  id v7;

  right = largeContentImageInsets.right;
  bottom = largeContentImageInsets.bottom;
  left = largeContentImageInsets.left;
  top = largeContentImageInsets.top;
  -[UIView _largeContentStoredPropertiesCreatingIfNecessary:](self, "_largeContentStoredPropertiesCreatingIfNecessary:", 1);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setLargeContentImageInsets:", top, left, bottom, right);

}

- (BOOL)scalesLargeContentImage
{
  void *v2;
  char v3;

  -[UIView _largeContentStoredProperties](self, "_largeContentStoredProperties");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "scalesLargeContentImage");

  return v3;
}

- (UIAccessibilityHUDItem)accessibilityHUDRepresentation
{
  return 0;
}

- (id)_largeContentViewerItemAtPoint:(CGPoint)a3
{
  double y;
  double x;
  double v6;
  void *v7;
  id v8;
  _QWORD v10[8];
  uint64_t v11;
  id *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  y = a3.y;
  x = a3.x;
  v11 = 0;
  v12 = (id *)&v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__215;
  v15 = __Block_byref_object_dispose__215;
  v16 = 0;
  if (!-[UIView isHidden](self, "isHidden"))
  {
    -[UIView alpha](self, "alpha");
    if (v6 >= 0.01)
    {
      if (-[UIView pointInside:withEvent:](self, "pointInside:withEvent:", 0, x, y))
      {
        if (-[UIView showsLargeContentViewer](self, "showsLargeContentViewer"))
          objc_storeStrong(v12 + 5, self);
        -[UIView subviews](self, "subviews");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 3221225472;
        v10[2] = __70__UIView_UILargeContentViewerPrivate___largeContentViewerItemAtPoint___block_invoke;
        v10[3] = &unk_1E16E7C38;
        *(double *)&v10[6] = x;
        *(double *)&v10[7] = y;
        v10[4] = self;
        v10[5] = &v11;
        objc_msgSend(v7, "enumerateObjectsWithOptions:usingBlock:", 2, v10);

      }
    }
  }
  v8 = v12[5];
  _Block_object_dispose(&v11, 8);

  return v8;
}

void __70__UIView_UILargeContentViewerPrivate___largeContentViewerItemAtPoint___block_invoke(double *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  double v7;
  double v8;
  id v9;
  void *v10;
  id obj;

  v6 = *((_QWORD *)a1 + 4);
  v7 = a1[6];
  v8 = a1[7];
  v9 = a2;
  objc_msgSend(v9, "convertPoint:fromView:", v6, v7, v8);
  objc_msgSend(v9, "_largeContentViewerItemAtPoint:");
  obj = (id)objc_claimAutoreleasedReturnValue();

  v10 = obj;
  if (obj)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 40), obj);
    v10 = obj;
    *a4 = 1;
  }

}

- (void)_encodeLargeContentViewerPropertiesWithCoder:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[UIView _largeContentStoredProperties](self, "_largeContentStoredProperties");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v5, CFSTR("UIViewLargeContentStoredProperties"));

}

- (id)_largeContentViewerGestureManager
{
  return objc_getAssociatedObject(self, &_LargeContentViewerGestureManagerKey);
}

+ (void)_setAllowsUnsupportedMacIdiomBehavior:(BOOL)a3
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "Allowing all unsupported behaviors in all idioms is unsupported.", buf, 2u);
    }

  }
  else
  {
    v3 = _setAllowsUnsupportedMacIdiomBehavior____s_category;
    if (!_setAllowsUnsupportedMacIdiomBehavior____s_category)
    {
      v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v3, (unint64_t *)&_setAllowsUnsupportedMacIdiomBehavior____s_category);
    }
    v4 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_185066000, v4, OS_LOG_TYPE_ERROR, "Allowing all unsupported behaviors in all idioms is unsupported.", v6, 2u);
    }
  }
}

+ (BOOL)_allowsUnsupportedMacIdiomBehavior
{
  return 0;
}

- (void)_throwForUnsupportedNonMacIdiomBehaviorWithReason:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  NSObject *v10;
  id v11;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UIView traitCollection](self, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (v6 != 5
    && (objc_msgSend((id)objc_opt_class(), "_allowsUnsupportedMacIdiomBehavior") & 1) == 0
    && !+[UIView _allowsUnsupportedMacIdiomBehavior](UIView, "_allowsUnsupportedMacIdiomBehavior"))
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "bundleIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "hasPrefix:", CFSTR("com.apple."));

    if (!v9)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("_UICatalystUnsupportedMacIdiomBehavior"), v4, 0);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v11);
    }
    _UICatalystFaultLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      v12 = 138543362;
      v13 = v4;
      _os_log_fault_impl(&dword_185066000, v10, OS_LOG_TYPE_FAULT, "Unsupported iOS or Mac Catalyst iPad Idiom behavior encountered: %{public}@", (uint8_t *)&v12, 0xCu);
    }

  }
}

- (id)_representationOfHierarchyForXcode
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[UIView _hierarchyRepresentation](self, "_hierarchyRepresentation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView layer](self, "layer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)CAEncodeLayerTree();

  if (v5)
  {
    objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("layerData"));

  }
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_hierarchyRepresentation
{
  void *v3;
  void *v4;
  objc_class *v5;
  void *v6;
  void *v7;
  objc_class *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;
  CGRect v32;

  v31 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 10);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v4, CFSTR("address"));

  v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v6, CFSTR("class"));

  -[UIView layer](self, "layer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (objc_class *)objc_opt_class();
  NSStringFromClass(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v9, CFSTR("layerClass"));

  -[UIView description](self, "description");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v10, CFSTR("description"));

  -[UIView frame](self, "frame");
  NSStringFromCGRect(v32);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v11, CFSTR("frame"));

  -[UIView layer](self, "layer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "superlayer");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "sublayers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView layer](self, "layer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v14, "indexOfObject:", v15);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v17, CFSTR("layerIndex"));

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  -[UIView subviews](self, "subviews", 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v27;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v27 != v22)
          objc_enumerationMutation(v19);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v23), "_hierarchyRepresentation");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "addObject:", v24);

        ++v23;
      }
      while (v21 != v23);
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v21);
  }

  objc_msgSend(v3, "setObject:forKey:", v18, CFSTR("subviews"));
  return v3;
}

+ (void)_enableToolsDebugColorViewBounds:(BOOL)a3
{
  BOOL v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (__toolsDebugColorViewBounds)
    v3 = a3;
  else
    v3 = 1;
  __toolsDebugColorViewBounds = a3;
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 0, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if (!v3)
          _UIViewRecursivelyRemoveDebugColorBoundsViews(*(void **)(*((_QWORD *)&v10 + 1) + 8 * v8));
        _UIViewRecursivelySetNeedsLayout(v9);
        objc_msgSend(v9, "layoutIfNeeded");
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
}

+ (void)_enableToolsDebugAlignmentRects:(BOOL)a3
{
  BOOL v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (__toolsDebugAlignmentRects)
    v3 = a3;
  else
    v3 = 1;
  __toolsDebugAlignmentRects = a3;
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 0, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (v9)
          v10 = v3;
        else
          v10 = 1;
        if ((v10 & 1) == 0)
          _UIViewRecursivelyRemoveDebugAlignmentViews(*(void **)(*((_QWORD *)&v11 + 1) + 8 * i));
        _UIViewRecursivelySetNeedsLayout(v9);
        objc_msgSend(v9, "layoutIfNeeded");
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
}

- (id)_colorViewBoundsOverlayCreateIfNecessary:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _UIDebugColorBoundsView *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v3 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[UIView subviews](self, "subviews", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v15;
LABEL_3:
    v10 = 0;
    v11 = v8;
    while (1)
    {
      if (*(_QWORD *)v15 != v9)
        objc_enumerationMutation(v5);
      v8 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * v10);

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      ++v10;
      v11 = v8;
      if (v7 == v10)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          goto LABEL_3;

        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v8 = 0;
  }

  if (!v8 && v3 && (*((_QWORD *)&self->_viewFlags + 1) & 0x8000000000000) == 0)
  {
    v12 = -[_UIDebugColorBoundsView initWithView:]([_UIDebugColorBoundsView alloc], "initWithView:", self);
    -[UIView addSubview:](self, "addSubview:", v12);
    *((_QWORD *)&self->_viewFlags + 1) |= 0x8000000000000uLL;

  }
  return v8;
}

- (BOOL)_allowsLinkPreviewInteractionInViewServices
{
  void *v2;
  char v3;

  -[UIView window](self, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "_allowsLinkPreviewInteractionInViewServices");

  return v3;
}

+ (uint64_t)_uip_transitionEnabled
{
  objc_opt_self();
  if (qword_1ECD82218 != -1)
    dispatch_once(&qword_1ECD82218, &__block_literal_global_620);
  return _MergedGlobals_1300;
}

uint64_t __50__UIView_FluidTransitions___uip_transitionEnabled__block_invoke()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
    result = _os_feature_enabled_impl();
  _MergedGlobals_1300 = result;
  return result;
}

+ (BOOL)_isOnFluidParallaxDenyList
{
  if (_isOnFluidParallaxDenyList_onceToken != -1)
    dispatch_once(&_isOnFluidParallaxDenyList_onceToken, &__block_literal_global_3_22);
  return 0;
}

void __54__UIView_FluidTransitions___isOnFluidParallaxDenyList__block_invoke()
{
  void *v0;
  id v1;

  _UIKitUserDefaults();
  v1 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "BOOLForKey:", CFSTR("UIForceFluidParallaxEnabled")) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "BOOLForKey:", CFSTR("UIForceFluidParallaxEnabled"));

  }
}

+ (uint64_t)_interruptibleParallaxTransitionsEnabled
{
  objc_opt_self();
  if (qword_1ECD82220 != -1)
    dispatch_once(&qword_1ECD82220, &__block_literal_global_5_14);
  return byte_1ECD82211;
}

uint64_t __68__UIView_FluidTransitions___interruptibleParallaxTransitionsEnabled__block_invoke()
{
  uint64_t result;

  if (+[UIView _isOnFluidParallaxDenyList](UIView, "_isOnFluidParallaxDenyList"))
  {
    result = 0;
  }
  else
  {
    result = dyld_program_sdk_at_least();
    if ((_DWORD)result)
      result = _os_feature_enabled_impl();
  }
  byte_1ECD82211 = result;
  return result;
}

+ (uint64_t)_fluidZoomTransitionsEnabled
{
  objc_opt_self();
  if (qword_1ECD82228 != -1)
    dispatch_once(&qword_1ECD82228, &__block_literal_global_8_8);
  return byte_1ECD82212;
}

uint64_t __56__UIView_FluidTransitions___fluidZoomTransitionsEnabled__block_invoke()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  if ((_DWORD)result)
    result = _os_feature_enabled_impl();
  byte_1ECD82212 = result;
  return result;
}

+ (uint64_t)_fluidParallaxTransitionsEnabled
{
  objc_opt_self();
  if (qword_1ECD82230 != -1)
    dispatch_once(&qword_1ECD82230, &__block_literal_global_10_7);
  return byte_1ECD82213;
}

uint64_t __60__UIView_FluidTransitions___fluidParallaxTransitionsEnabled__block_invoke()
{
  uint64_t result;

  if (+[UIView _isOnFluidParallaxDenyList](UIView, "_isOnFluidParallaxDenyList"))
  {
    result = 0;
  }
  else
  {
    result = dyld_program_sdk_at_least();
    if ((_DWORD)result)
      result = _os_feature_enabled_impl();
  }
  byte_1ECD82213 = result;
  return result;
}

+ (uint64_t)_uip_fluidPresentationTransitionsEnabled
{
  objc_opt_self();
  return fluidPresentationTransitionsEnabled;
}

+ (void)_performWithFluidPresentationTransitionsEnabled:(id)a3
{
  char v3;

  v3 = fluidPresentationTransitionsEnabled;
  fluidPresentationTransitionsEnabled = 1;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  fluidPresentationTransitionsEnabled = v3;
}

- (double)_proportionalFillLengthForOrderedArrangement:(id)a3 relevantParentAxis:(int64_t)a4
{
  void *v6;
  BOOL v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  CGFloat Width;
  double v31;
  double v32;
  double v33;
  double v34;
  CGRect v36;

  objc_msgSend(a3, "canvas");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass");
  v8 = -1.0;
  v9 = -1.0;
  if (!v7)
    -[UIView intrinsicContentSize](self, "intrinsicContentSize", -1.0, -1.0);
  if (a4)
    v10 = v9;
  else
    v10 = v8;
  if (v10 == -1.0)
  {
    if (-[UIView _needsDoubleUpdateConstraintsPass](self, "_needsDoubleUpdateConstraintsPass")
      || a4 == 1 && !objc_msgSend(v6, "alignment"))
    {
      v11 = *MEMORY[0x1E0C9D648];
      v12 = *(double *)(MEMORY[0x1E0C9D648] + 8);
      v13 = *(double *)(MEMORY[0x1E0C9D648] + 16);
      v14 = *(double *)(MEMORY[0x1E0C9D648] + 24);
      if ((objc_msgSend(v6, "translatesAutoresizingMaskIntoConstraints") & 1) == 0)
      {
        objc_msgSend(v6, "_layoutEngine");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v6, "_nsis_bounds");
          v11 = v16;
          v12 = v17;
          v13 = v18;
          v14 = v19;
        }
      }
      v20 = *MEMORY[0x1E0C9D820];
      v21 = *(double *)(MEMORY[0x1E0C9D820] + 8);
      if (*MEMORY[0x1E0C9D820] == v13 && v21 == v14)
      {
        objc_msgSend(v6, "bounds", v20, v21);
        v11 = v20;
        v12 = v21;
        v13 = v23;
        v14 = v24;
      }
      if (objc_msgSend(v6, "isLayoutMarginsRelativeArrangement", v20, v21))
      {
        objc_msgSend(v6, "layoutMargins");
        v11 = v11 + v25;
        v12 = v12 + v26;
        v13 = v13 - (v25 + v27);
        v14 = v14 - (v26 + v28);
      }
      -[UIView _layoutEngine](self, "_layoutEngine");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v29);

      v36.origin.x = v11;
      v36.origin.y = v12;
      v36.size.width = v13;
      v36.size.height = v14;
      Width = CGRectGetWidth(v36);
      LODWORD(v31) = 1148846080;
      LODWORD(v32) = 1112014848;
      -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:](self, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v31, v32);
    }
    else
    {
      -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
    }
    if (a4)
      v10 = v34;
    else
      v10 = v33;
  }

  return v10;
}

- (void)_nsis_origin:(CGPoint *)a3 bounds:(CGRect *)a4 inEngine:(id)a5
{
  id v9;
  void *v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  NSObject *v25;
  double *v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  void *v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  double v36;
  void *v37;
  int v38;
  void *v39;
  int v40;
  double v41;
  double v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat x;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  double MinX;
  double MinY;
  void *v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  NSObject *v68;
  double v69;
  NSObject *v70;
  unint64_t v71;
  NSObject *v72;
  void *v73;
  CGFloat v74;
  CGFloat y;
  double v76;
  CGFloat v77;
  double rect;
  CGFloat recta;
  CGFloat rect_8;
  CGFloat rect_16;
  double rect_24;
  double v83;
  double v84;
  CGFloat height;
  double v86;
  CGFloat width;
  CGAffineTransform v88;
  CGPoint v89;
  CGAffineTransform buf;
  uint64_t v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;

  v91 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  objc_msgSend(v9, "delegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (dyld_program_sdk_at_least())
  {

LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 55, CFSTR("Error in compatibility flow"));
    goto LABEL_7;
  }
  if (v10)
  {
    v11 = objc_msgSend(v10, "_forceLayoutEngineSolutionInRationalEdges");

    if (!v11)
      goto LABEL_8;
    goto LABEL_6;
  }
LABEL_7:

LABEL_8:
  if (os_variant_has_internal_diagnostics())
  {
    if (!v9)
    {
      __UIFaultDebugAssertLog();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf.a) = 138412290;
        *(_QWORD *)((char *)&buf.a + 4) = self;
        _os_log_fault_impl(&dword_185066000, v68, OS_LOG_TYPE_FAULT, "Attempting to get auto layout values with nil engine. Affected view: %@", (uint8_t *)&buf, 0xCu);
      }

    }
  }
  else if (!v9)
  {
    v71 = _MergedGlobals_1304;
    if (!_MergedGlobals_1304)
    {
      v71 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v71, (unint64_t *)&_MergedGlobals_1304);
    }
    v72 = *(NSObject **)(v71 + 8);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.a) = 138412290;
      *(_QWORD *)((char *)&buf.a + 4) = self;
      _os_log_impl(&dword_185066000, v72, OS_LOG_TYPE_ERROR, "Attempting to get auto layout values with nil engine. Affected view: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  -[UIView alignmentRectInsets](self, "alignmentRectInsets");
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v86 = v18;
  objc_msgSend(v9, "engineScalingCoefficients");
  v20 = v19;
  v22 = v21;
  if (os_variant_has_internal_diagnostics())
  {
    if (v20 <= 0.0 || fabs(v20) == INFINITY || v22 <= 0.0 || (v69 = fabs(v22), v69 >= INFINITY) && v69 <= INFINITY)
    {
      __UIFaultDebugAssertLog();
      v70 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf.a) = 134218240;
        *(double *)((char *)&buf.a + 4) = v20;
        WORD2(buf.b) = 2048;
        *(double *)((char *)&buf.b + 6) = v22;
        _os_log_fault_impl(&dword_185066000, v70, OS_LOG_TYPE_FAULT, "Non-positive or non-finite engine scaling coefficients {%f, %f}. This probably means someone forgot to set the engine scaling coefficients on the engine.", (uint8_t *)&buf, 0x16u);
      }

    }
  }
  else if (v20 <= 0.0 || fabs(v20) == INFINITY || v22 <= 0.0 || (v23 = fabs(v22), v23 >= INFINITY) && v23 <= INFINITY)
  {
    v24 = qword_1ECD82288;
    if (!qword_1ECD82288)
    {
      v24 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v24, (unint64_t *)&qword_1ECD82288);
    }
    v25 = *(NSObject **)(v24 + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.a) = 134218240;
      *(double *)((char *)&buf.a + 4) = v20;
      WORD2(buf.b) = 2048;
      *(double *)((char *)&buf.b + 6) = v22;
      _os_log_impl(&dword_185066000, v25, OS_LOG_TYPE_ERROR, "Non-positive or non-finite engine scaling coefficients {%f, %f}. This probably means someone forgot to set the engine scaling coefficients on the engine.", (uint8_t *)&buf, 0x16u);
    }
  }
  v26 = (double *)MEMORY[0x1E0C9D538];
  v89 = (CGPoint)*MEMORY[0x1E0C9D538];
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    -[UIView bounds](self, "bounds");
    v28 = v27;
    v30 = v29;
    -[UIView _boundsWidthVariable](self, "_boundsWidthVariable");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "valueForVariable:", v31);
    v84 = v15;
    v33 = v32;
    -[UIView _boundsHeightVariable](self, "_boundsHeightVariable");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "valueForVariable:", v34);
    v36 = v35;

    v76 = v22 * round(v36);
    rect = v20 * round(v33);
    if (a4)
    {
      a4->origin.x = v28;
      a4->origin.y = v30;
      a4->size.width = v86 + v84 + rect;
      a4->size.height = v17 + v13 + v76;
    }
    rect_24 = v17 + v13 + v76;
    v83 = v86 + v84 + rect;
    rect_8 = v30;
    rect_16 = v28;
    memset(&buf, 0, sizeof(buf));
    -[UIView transform](self, "transform");
    if (a3)
    {
      -[UIView _minXVariable](self, "_minXVariable");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v9, "hasValue:forVariable:", &v89, v37);

      -[UIView _minYVariable](self, "_minYVariable");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = objc_msgSend(v9, "hasValue:forVariable:", &v89.y, v39);

      if ((v38 & 1) != 0 || v40)
      {
        if ((v84 != 0.0 || v13 != 0.0 || v86 != 0.0 || v17 != 0.0)
          && fabs(vaddvq_f64(vmulq_f64(*(float64x2_t *)&buf.a, *(float64x2_t *)&buf.c))) >= 0.00001)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v73, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 81, CFSTR("Auto layout doesn't support nonzero alignment insets on views with bounds transforms that don't preserve rectangles. The problem is in this view: %@"), self);

        }
        v41 = -v84;
        v42 = -v13;
        if (*v26 != -v84 || v26[1] != v42)
        {
          v88 = buf;
          if (!CGAffineTransformIsIdentity(&v88))
          {
            v92.origin.x = 0.0;
            v92.origin.y = 0.0;
            v92.size.width = rect;
            v92.size.height = v76;
            v43 = v84 - CGRectGetMidX(v92);
            v93.origin.x = 0.0;
            v93.origin.y = 0.0;
            v93.size.width = rect;
            v93.size.height = v76;
            v44 = v13 - CGRectGetMidY(v93);
            v94.origin.x = -v84;
            v94.origin.y = -v13;
            v94.size.height = rect_24;
            v94.size.width = v86 + v84 + rect;
            v95 = CGRectOffset(v94, v43, v44);
            v88 = buf;
            v96 = CGRectApplyAffineTransform(v95, &v88);
            x = v96.origin.x;
            v74 = v96.origin.x;
            y = v96.origin.y;
            v46 = v96.origin.y;
            height = v96.size.height;
            width = v96.size.width;
            v96.origin.x = 0.0;
            v96.origin.y = 0.0;
            v96.size.width = rect;
            v96.size.height = v76;
            v97 = CGRectOffset(v96, v43, v44);
            v88 = buf;
            v98 = CGRectApplyAffineTransform(v97, &v88);
            v47 = v98.origin.x;
            v77 = v98.size.height;
            recta = v98.origin.x;
            v48 = v98.origin.y;
            v49 = v98.size.width;
            v98.origin.x = x;
            v98.origin.y = v46;
            v98.size.width = width;
            v98.size.height = height;
            MinX = CGRectGetMinX(v98);
            v99.origin.x = v47;
            v99.origin.y = v48;
            v99.size.width = v49;
            v99.size.height = v77;
            v41 = MinX - CGRectGetMinX(v99);
            v100.origin.x = v74;
            v100.origin.y = y;
            v100.size.width = width;
            v100.size.height = height;
            MinY = CGRectGetMinY(v100);
            v101.origin.x = recta;
            v101.origin.y = v48;
            v101.size.width = v49;
            v101.size.height = v77;
            v42 = MinY - CGRectGetMinY(v101);
          }
        }
        -[UIView superview](self, "superview");
        v52 = (void *)objc_claimAutoreleasedReturnValue();

        if (v52)
        {
          -[UIView superview](self, "superview");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "alignmentRectInsets");
          v55 = v54;
          v57 = v56;
          v59 = v58;
          v61 = v60;

          if (v61 == 0.0 && v57 == 0.0 && v55 == 0.0)
          {
            if (v59 != 0.0)
            {
              v42 = v42 + v55;
              v41 = v41 + v57;
            }
          }
          else
          {
            v41 = v41 + v57;
            v42 = v42 + v55;
          }
        }
      }
      else
      {
        v41 = -v84;
        v42 = -v13;
      }
      if (v38)
      {
        v62 = v20 * v89.x;
      }
      else
      {
        -[UIView center](self, "center");
        v41 = v63;
        v88 = buf;
        v102.origin.x = rect_16;
        v102.origin.y = rect_8;
        v102.size.height = rect_24;
        v102.size.width = v83;
        v103 = CGRectApplyAffineTransform(v102, &v88);
        v62 = CGRectGetWidth(v103) * -0.5;
      }
      v64 = v41 + v62;
      v89.x = v64;
      if (v40)
      {
        v65 = v42 + v22 * v89.y;
      }
      else
      {
        -[UIView center](self, "center");
        v67 = v66;
        v88 = buf;
        v104.origin.x = rect_16;
        v104.origin.y = rect_8;
        v104.size.height = rect_24;
        v104.size.width = v83;
        v105 = CGRectApplyAffineTransform(v104, &v88);
        v65 = v67 + CGRectGetHeight(v105) * -0.5;
        v64 = v89.x;
      }
      v89.x = round(2.0 / v20 * v64) / (2.0 / v20);
      v89.y = round(2.0 / v22 * v65) / (2.0 / v22);
      *a3 = v89;
    }
  }
  else
  {
    memset(&buf, 0, sizeof(buf));
    -[UIView transform](self, "transform");
  }

}

- (id)_scrollViewWantingUpdateInConstraint:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  int v8;
  id v9;
  id v10;

  v3 = a3;
  objc_msgSend(v3, "firstItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "secondItem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 != v5
    && (objc_msgSend(v4, "_supportsContentDimensionVariables")
     && (v6 = objc_msgSend(v5, "isDescendantOfView:", v4), v7 = v4, (v6 & 1) != 0)
     || objc_msgSend(v5, "_supportsContentDimensionVariables")
     && (v8 = objc_msgSend(v4, "isDescendantOfView:", v5), v7 = v5, v8)))
  {
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = v9;

  return v10;
}

- (BOOL)_old_nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6
{
  id v10;
  id v11;
  UIView *v12;
  void *v13;
  void *v14;
  void *v15;
  UIView *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  const __CFString *v24;
  BOOL v25;
  double v26;
  double v27;
  double v28;
  int v29;
  int v30;
  UIView *v31;
  UIView *v32;
  uint64_t v33;
  double v34;
  double v35;
  UIView *v36;
  UIView *v37;
  uint64_t v38;
  double v39;
  UIView *v40;
  UIView *v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  UIView *v45;
  UIView *v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  void *v53;
  int v55;
  id v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  UIView *v60;
  __int16 v61;
  const __CFString *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v10 = a4;
  v11 = a6;
  objc_msgSend(v11, "container");
  v12 = (UIView *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "engine");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 && !-[UIView isDescendantOfView:](self, "isDescendantOfView:", v12))
  {
    v17 = _old_nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint____s_category;
    if (!_old_nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint____s_category)
    {
      v17 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v17, (unint64_t *)&_old_nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint____s_category);
    }
    v18 = *(NSObject **)(v17 + 8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = v18;
      v20 = (void *)-[UIView performSelector:](v12, "performSelector:", sel_recursiveDescription);
      v21 = v20;
      -[UIView superview](self, "superview");
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = (void *)v22;
      v55 = 138413058;
      v24 = CFSTR("NO SUPERVIEW");
      v56 = v11;
      if (v22)
        v24 = (const __CFString *)v22;
      v57 = 2112;
      v58 = v20;
      v59 = 2112;
      v60 = self;
      v61 = 2112;
      v62 = v24;
      _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "View hierarchy unprepared for constraint.\n\tConstraint: %@\n\tContainer hierarchy: \n%@\n\tView not found in container hierarchy: %@\n\tThat view's superview: %@", (uint8_t *)&v55, 0x2Au);

    }
    v25 = 0;
  }
  else
  {
    -[UIView _scrollViewWantingUpdateInConstraint:](self, "_scrollViewWantingUpdateInConstraint:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
      objc_msgSend(v14, "_setUseContentDimensionVariablesForConstraintLowering:", 1);
    if (v12)
      v16 = v12;
    else
      v16 = self;
    -[UIView nsli_engineToUserScalingCoefficients](v16, "nsli_engineToUserScalingCoefficients");
    if (a3 > 0x25 || (v28 = v27, ((1 << a3) & 0x2A00119D19) == 0))
      v28 = v26;
    if (a3 == 102)
      v29 = 8;
    else
      v29 = a3;
    if (a3 == 101)
      v30 = 7;
    else
      v30 = v29;
    if ((a3 - 11) >= 2)
    {
      v31 = self;
    }
    else
    {
      -[UIView _viewForBaselineLayout](self, "_viewForBaselineLayout");
      v31 = (UIView *)objc_claimAutoreleasedReturnValue();
    }
    v32 = v31;
    v33 = objc_msgSend((id)UIApp, "userInterfaceLayoutDirection");
    v34 = v28 * a5;
    switch(v30)
    {
      case 1:
      case 32:
        goto LABEL_27;
      case 2:
      case 36:
        goto LABEL_36;
      case 3:
      case 33:
        goto LABEL_44;
      case 4:
      case 37:
        goto LABEL_41;
      case 5:
        if (v33 != 1)
          goto LABEL_27;
        v34 = -v34;
LABEL_36:
        v35 = 1.0 / v28;
        v36 = self;
        v37 = v12;
        v38 = 0;
        goto LABEL_42;
      case 6:
        if (v33 != 1)
          goto LABEL_36;
        v34 = -v34;
LABEL_27:
        v35 = 1.0 / v28;
        v36 = self;
        v37 = v12;
        v38 = 0;
        goto LABEL_45;
      case 7:
        v44 = a3 == 101;
        v45 = self;
        v46 = v12;
        v47 = 0;
        goto LABEL_39;
      case 8:
        v44 = a3 == 102;
        v45 = self;
        v46 = v12;
        v47 = 1;
LABEL_39:
        -[UIView _dimensionExpressionInContainer:vertical:useContentVariables:engine:](v45, "_dimensionExpressionInContainer:vertical:useContentVariables:engine:", v46, v47, v44, v13);
        v43 = objc_claimAutoreleasedReturnValue();
        goto LABEL_47;
      case 9:
      case 34:
        v39 = 1.0 / v28;
        v40 = self;
        v41 = v12;
        v42 = 0;
        goto LABEL_30;
      case 10:
      case 35:
        v39 = 1.0 / v28;
        v40 = self;
        v41 = v12;
        v42 = 1;
LABEL_30:
        -[UIView _centerExpressionInContainer:vertical:contentInsetScale:engine:](v40, "_centerExpressionInContainer:vertical:contentInsetScale:engine:", v41, v42, v13, v39);
        v43 = objc_claimAutoreleasedReturnValue();
        goto LABEL_47;
      case 11:
        -[UIView _baselineOffsetFromBottom](v32, "_baselineOffsetFromBottom");
        -[UIView convertSize:fromView:](v12, "convertSize:fromView:", self, 1.0, v48);
        objc_msgSend(v10, "incrementConstant:", -(a5 * v49));
LABEL_41:
        v35 = 1.0 / v28;
        v36 = v32;
        v37 = v12;
        v38 = 1;
LABEL_42:
        v50 = 1;
        goto LABEL_46;
      case 12:
        -[UIView _firstBaselineOffsetFromTop](v32, "_firstBaselineOffsetFromTop");
        -[UIView convertSize:fromView:](v12, "convertSize:fromView:", self, 1.0, v51);
        objc_msgSend(v10, "incrementConstant:", v52 * a5);
LABEL_44:
        v35 = 1.0 / v28;
        v36 = self;
        v37 = v12;
        v38 = 1;
LABEL_45:
        v50 = 0;
LABEL_46:
        -[UIView _edgeExpressionInContainer:vertical:max:contentInsetScale:engine:](v36, "_edgeExpressionInContainer:vertical:max:contentInsetScale:engine:", v37, v38, v50, v13, v35);
        v43 = objc_claimAutoreleasedReturnValue();
LABEL_47:
        v53 = (void *)v43;
        objc_msgSend(v10, "addExpression:times:", v43, v34);

        break;
      default:
        break;
    }
    if (v15)
      objc_msgSend(v15, "_setUseContentDimensionVariablesForConstraintLowering:", 0);

    v25 = 1;
  }

  return v25;
}

- (void)_addCenterExpressionToExpression:(id)a3 isVertical:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  double *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  _OWORD v15[2];

  v4 = a4;
  v6 = a3;
  memset(v15, 0, sizeof(v15));
  v14 = 0u;
  -[UIView transform](self, "transform");
  if (v4)
  {
    -[UIView nsli_minYVariable](self, "nsli_minYVariable");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addVariable:coefficient:", v7, 1.0);

    if (fabs(*((double *)v15 + 1)) >= 0.00001)
    {
      -[UIView nsli_boundsHeightVariable](self, "nsli_boundsHeightVariable");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addVariable:coefficient:", v8, fabs(*((double *)v15 + 1)) * 0.5);

    }
    if (fabs(*((double *)&v14 + 1)) >= 0.00001)
    {
      v9 = (double *)&v14 + 1;
      -[UIView nsli_boundsWidthVariable](self, "nsli_boundsWidthVariable");
      v10 = objc_claimAutoreleasedReturnValue();
LABEL_10:
      v13 = (void *)v10;
      objc_msgSend(v6, "addVariable:coefficient:", v10, fabs(*v9) * 0.5);

    }
  }
  else
  {
    -[UIView nsli_minXVariable](self, "nsli_minXVariable");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addVariable:coefficient:", v11, 1.0);

    if (fabs(*(double *)&v14) >= 0.00001)
    {
      -[UIView nsli_boundsWidthVariable](self, "nsli_boundsWidthVariable");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addVariable:coefficient:", v12, fabs(*(double *)&v14) * 0.5);

    }
    if (fabs(*(double *)v15) >= 0.00001)
    {
      v9 = (double *)v15;
      -[UIView nsli_boundsHeightVariable](self, "nsli_boundsHeightVariable");
      v10 = objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
  }

}

- (id)_lowerExpressionOneLevelWithCurrentXExpression:(id)a3 YExpression:(id)a4 vertical:(BOOL)a5 container:(id)a6 engine:(id)a7
{
  _BOOL8 v9;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;
  _BOOL4 v19;
  id v20;
  id v21;
  void *v22;
  double a;
  double d;
  double v25;
  id v26;
  void *v27;
  double v28;
  void *v30;
  void *v31;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v34;

  v9 = a5;
  v13 = a3;
  v14 = a4;
  v15 = a7;
  v16 = a6;
  -[UIView superview](self, "superview");
  v17 = (id)objc_claimAutoreleasedReturnValue();

  if (v17 == v16)
  {
    if (v9)
      v22 = v14;
    else
      v22 = v13;
    v20 = v22;
  }
  else
  {
    memset(&v34, 0, sizeof(v34));
    if (v17)
      objc_msgSend(v17, "transform");
    t1 = v34;
    v18 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&t2.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&t2.c = v18;
    *(_OWORD *)&t2.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    v19 = CGAffineTransformEqualToTransform(&t1, &t2);
    v20 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D156D0]), "initWithEngine:", v15);
    objc_msgSend(v17, "_addCenterExpressionToExpression:isVertical:", v20, v9);
    if (v19)
    {
      if (v9)
        v21 = v14;
      else
        v21 = v13;
      objc_msgSend(v20, "addExpression:times:", v21, 1.0);
      if (v9)
        objc_msgSend(v17, "nsli_boundsHeightVariable");
      else
        objc_msgSend(v17, "nsli_boundsWidthVariable");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = -0.5;
    }
    else
    {
      a = v34.a;
      d = v34.d;
      if (fabs(v34.a * v34.c + v34.b * v34.d) >= 0.00001)
      {
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIView superview](self, "superview");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 295, CFSTR("Autolayout doesn't support crossing bounds transforms that don't preserve rectangles. The problem is in this view: %@"), v31);

        d = v34.d;
        a = v34.a;
      }
      if (v9)
        v25 = d;
      else
        v25 = a;
      if (v9)
        v26 = v14;
      else
        v26 = v13;
      objc_msgSend(v20, "addExpression:times:", v26, v25);
      if (v9)
      {
        objc_msgSend(v17, "nsli_boundsHeightVariable");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = d * -0.5;
      }
      else
      {
        objc_msgSend(v17, "nsli_boundsWidthVariable");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = a * -0.5;
      }
    }
    objc_msgSend(v20, "addVariable:coefficient:", v27, v28);

  }
  return v20;
}

- (id)_centerExpressionInContainer:(id)a3 vertical:(BOOL)a4 contentInsetScale:(double)a5 engine:(id)a6
{
  _BOOL4 v8;
  UIView *v10;
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  UIView *v20;
  UIView *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  void *v31;
  id v32;
  __int128 v34;
  __int128 v35;

  v8 = a4;
  v10 = (UIView *)a3;
  v11 = a6;
  if (self == v10)
  {
    -[UIView bounds](self, "bounds");
    v15 = v14;
    v17 = v16;
    v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D156D0]), "initWithEngine:", v11);
    if (v8)
    {
      -[UIView nsli_boundsHeightVariable](self, "nsli_boundsHeightVariable");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addVariable:coefficient:", v18, 0.5);

      objc_msgSend(v12, "incrementConstant:", v17);
      v13 = v12;
      v12 = 0;
    }
    else
    {
      -[UIView nsli_boundsWidthVariable](self, "nsli_boundsWidthVariable");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addVariable:coefficient:", v19, 0.5);

      objc_msgSend(v12, "incrementConstant:", v15);
      v13 = 0;
    }
  }
  else
  {
    v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D156D0]), "initWithEngine:", v11);
    v13 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D156D0]), "initWithEngine:", v11);
    -[UIView _addCenterExpressionToExpression:isVertical:](self, "_addCenterExpressionToExpression:isVertical:", v12, 0);
    -[UIView _addCenterExpressionToExpression:isVertical:](self, "_addCenterExpressionToExpression:isVertical:", v13, 1);
  }
  v20 = self;
  v21 = v20;
  if (v10 && v20 != v10)
  {
    v22 = v20;
    do
    {
      v23 = v13;
      v35 = 0u;
      v24 = v12;
      v34 = 0u;
      if (v22)
        objc_msgSend(v22, "transform", (unsigned __int128)0, (unsigned __int128)0);
      objc_msgSend(v12, "incrementConstant:", 0.0, v34, v35);
      objc_msgSend(v23, "incrementConstant:", 0.0);
      objc_msgSend(v22, "_lowerExpressionOneLevelWithCurrentXExpression:YExpression:vertical:container:engine:", v12, v23, 0, v10, v11);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "_lowerExpressionOneLevelWithCurrentXExpression:YExpression:vertical:container:engine:", v24, v23, 1, v10, v11);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v25;

      v13 = v26;
      if ((objc_msgSend(v22, "_useContentDimensionVariablesForConstraintLowering") & 1) == 0
        && !-[UIView translatesAutoresizingMaskIntoConstraints](v21, "translatesAutoresizingMaskIntoConstraints")
        && (objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v22, "contentInset");
        v28 = v27;
        objc_msgSend(v12, "incrementConstant:", v29 * a5);
        objc_msgSend(v13, "incrementConstant:", v28 * a5);
      }
      objc_msgSend(v22, "superview");
      v30 = objc_claimAutoreleasedReturnValue();

      v22 = (void *)v30;
    }
    while ((UIView *)v30 != v10);
    v21 = v10;
  }
  if (v8)
    v31 = v13;
  else
    v31 = v12;
  v32 = v31;

  return v32;
}

- (id)_edgeExpressionInContainer:(id)a3 vertical:(BOOL)a4 max:(BOOL)a5 contentInsetScale:(double)a6 engine:(id)a7
{
  _BOOL4 v9;
  UIView *v12;
  id v13;
  void *v14;
  UIView *v15;
  UIView *v16;
  UIView *v17;
  double v18;
  BOOL v19;
  uint64_t v20;
  double v21;
  _BOOL4 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  void *v28;
  double v29;
  double v30;
  uint64_t v31;
  void *v32;
  double v33;
  double v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  UIView *v39;
  _BOOL4 v40;
  uint64_t v41;
  char v42;
  double v43;
  void *v44;
  void *v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  SEL v54;
  _BOOL4 v55;
  float64x2_t v56;
  float64x2_t v57;
  __int128 v58;

  v55 = a5;
  v9 = a4;
  v12 = (UIView *)a3;
  v13 = a7;
  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D156D0]), "initWithEngine:", v13);
  v15 = self;
  v16 = v15;
  if (!v12 || v15 == v12)
  {
    v39 = v15;
    goto LABEL_63;
  }
  v54 = a2;
  v17 = v15;
  do
  {
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    if (v17)
    {
      -[UIView transform](v17, "transform");
      v18 = v56.f64[1];
    }
    else
    {
      v18 = 0.0;
    }
    v19 = fabs(v18) < 0.00001 && fabs(v57.f64[0]) < 0.00001 && fabs(v56.f64[0] * v57.f64[1]) >= 0.00001;
    if (v17 != v16 && !v19)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "handleFailureInMethod:object:file:lineNumber:description:", v54, v16, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 390, CFSTR("Autolayout doesn't support crossing rotational bounds transforms with edge layout constraints, such as right, left, top, bottom. The offending view is: %@"), v17);

    }
    if (v17 == v16 && fabs(vaddvq_f64(vmulq_f64(v56, v57))) >= 0.00001)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", v54, v16, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 391, CFSTR("Autolayout doesn't support transforms that don't preserve rectangles. The offending view is: %@"), v16);

    }
    if (v9)
      v20 = 5;
    else
      v20 = 4;
    v21 = v56.f64[v20];
    v22 = -[UIView _useContentDimensionVariablesForConstraintLowering](v17, "_useContentDimensionVariablesForConstraintLowering");
    if (v17 != v16)
    {
      if (v9)
      {
        v24 = v57.f64[1];
        v23 = v57.f64[0];
      }
      else
      {
        v24 = v56.f64[1];
        v23 = v56.f64[0];
      }
      objc_msgSend(v14, "scaleBy:", sqrt(v23 * v23 + v24 * v24));
      if (!v22
        && !-[UIView translatesAutoresizingMaskIntoConstraints](v16, "translatesAutoresizingMaskIntoConstraints")
        && (objc_opt_respondsToSelector() & 1) != 0)
      {
        -[UIView contentInset](v17, "contentInset");
        if (!v9)
          v25 = v26;
        objc_msgSend(v14, "incrementConstant:", v25 * a6);
      }
      goto LABEL_57;
    }
    if (fabs(v56.f64[0]) < 0.00001)
    {
      if (fabs(v56.f64[1]) < 0.00001 || !v55)
        goto LABEL_57;
LABEL_46:
      if (v22)
      {
        if (v9)
          -[UIView nsli_contentWidthVariable](v16, "nsli_contentWidthVariable");
        else
          -[UIView nsli_contentHeightVariable](v16, "nsli_contentHeightVariable");
      }
      else if (v9)
      {
        -[UIView nsli_boundsWidthVariable](v16, "nsli_boundsWidthVariable");
      }
      else
      {
        -[UIView nsli_boundsHeightVariable](v16, "nsli_boundsHeightVariable");
      }
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = (void *)v31;
      v33 = fabs(v56.f64[1]);
      v34 = fabs(v57.f64[0]);
      if (!v9)
        v33 = v34;
      objc_msgSend(v14, "addVariable:coefficient:", v31, v33);

      goto LABEL_57;
    }
    if (v55)
    {
      if (v22)
      {
        if (v9)
          -[UIView nsli_contentHeightVariable](v16, "nsli_contentHeightVariable");
        else
          -[UIView nsli_contentWidthVariable](v16, "nsli_contentWidthVariable");
      }
      else if (v9)
      {
        -[UIView nsli_boundsHeightVariable](v16, "nsli_boundsHeightVariable");
      }
      else
      {
        -[UIView nsli_boundsWidthVariable](v16, "nsli_boundsWidthVariable");
      }
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = (void *)v27;
      v29 = fabs(v57.f64[1]);
      v30 = fabs(v56.f64[0]);
      if (!v9)
        v29 = v30;
      objc_msgSend(v14, "addVariable:coefficient:", v27, v29);

      if (fabs(v56.f64[1]) >= 0.00001)
        goto LABEL_46;
    }
LABEL_57:
    if (v9)
      -[UIView nsli_minYVariable](v17, "nsli_minYVariable");
    else
      -[UIView nsli_minXVariable](v17, "nsli_minXVariable");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addVariable:coefficient:", v35, 1.0);

    objc_msgSend(v14, "incrementConstant:", v21);
    -[UIView superview](v17, "superview");
    v36 = objc_claimAutoreleasedReturnValue();

    v17 = (UIView *)v36;
  }
  while ((UIView *)v36 != v12);
  v39 = v12;
LABEL_63:
  v40 = -[UIView _supportsContentDimensionVariables](v12, "_supportsContentDimensionVariables");
  if (v16 != v12 || !v55)
  {
    v42 = v16 != v12 || v40;
    v43 = 0.0;
    if ((v42 & 1) != 0)
      goto LABEL_81;
    if (v9)
      goto LABEL_78;
    goto LABEL_80;
  }
  if (!v9)
  {
    if (v40)
    {
      -[UIView nsli_contentWidthVariable](v12, "nsli_contentWidthVariable");
      v41 = objc_claimAutoreleasedReturnValue();
LABEL_76:
      v44 = (void *)v41;
      objc_msgSend(v14, "addVariable:coefficient:", v41, 1.0);

      v43 = 0.0;
      goto LABEL_81;
    }
    -[UIView nsli_boundsWidthVariable](v12, "nsli_boundsWidthVariable");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addVariable:coefficient:", v49, 1.0);

LABEL_80:
    -[UIView bounds](v12, "bounds", v43);
    v51 = v50;
    -[UIView nsli_engineToUserScalingCoefficients](v12, "nsli_engineToUserScalingCoefficients");
    v43 = v51 / v52;
    goto LABEL_81;
  }
  if (v40)
  {
    -[UIView nsli_contentHeightVariable](v12, "nsli_contentHeightVariable");
    v41 = objc_claimAutoreleasedReturnValue();
    goto LABEL_76;
  }
  -[UIView nsli_boundsHeightVariable](v12, "nsli_boundsHeightVariable");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addVariable:coefficient:", v45, 1.0);

LABEL_78:
  -[UIView bounds](v12, "bounds", v43);
  v47 = v46;
  -[UIView nsli_engineToUserScalingCoefficients](v12, "nsli_engineToUserScalingCoefficients");
  v43 = v47 / v48;
LABEL_81:
  objc_msgSend(v14, "incrementConstant:", v43);

  return v14;
}

- (id)_dimensionExpressionInContainer:(id)a3 vertical:(BOOL)a4 useContentVariables:(BOOL)a5 engine:(id)a6
{
  _BOOL4 v7;
  _BOOL4 v8;
  UIView *v11;
  id v12;
  void *v13;
  float64x2_t v14;
  double v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  void *v21;
  double v22;
  double v23;
  uint64_t v24;
  UIView *v25;
  double *v26;
  BOOL v27;
  float64x2_t *v28;
  double v29;
  double v30;
  uint64_t v31;
  void *v32;
  void *v34;
  float64x2_t v35;
  float64x2_t v36;
  __int128 v37;
  float64x2_t v38;
  float64x2_t v39;
  __int128 v40;

  v7 = a5;
  v8 = a4;
  v11 = (UIView *)a3;
  v12 = a6;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D156D0]), "initWithEngine:", v12);
  v39 = 0u;
  v40 = 0u;
  v38 = 0u;
  if (self == v11)
  {
    v14 = *(float64x2_t *)(MEMORY[0x1E0C9BAA8] + 16);
    v38 = *(float64x2_t *)MEMORY[0x1E0C9BAA8];
    v39 = v14;
    v40 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  }
  else
  {
    -[UIView transform](self, "transform");
  }
  v15 = v38.f64[0];
  if (fabs(vaddvq_f64(vmulq_f64(v38, v39))) >= 0.00001)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 442, CFSTR("Autolayout doesn't support transforms that don't preserve rectangles. The offending view is: %@"), self);

    v15 = v38.f64[0];
  }
  if (fabs(v15) >= 0.00001)
  {
    if (v7)
    {
      if (v8)
        -[UIView nsli_contentHeightVariable](self, "nsli_contentHeightVariable");
      else
        -[UIView nsli_contentWidthVariable](self, "nsli_contentWidthVariable");
    }
    else if (v8)
    {
      -[UIView nsli_boundsHeightVariable](self, "nsli_boundsHeightVariable");
    }
    else
    {
      -[UIView nsli_boundsWidthVariable](self, "nsli_boundsWidthVariable");
    }
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)v16;
    v18 = fabs(v39.f64[1]);
    v19 = fabs(v38.f64[0]);
    if (!v8)
      v18 = v19;
    objc_msgSend(v13, "addVariable:coefficient:", v16, v18);

  }
  if (fabs(v38.f64[1]) >= 0.00001)
  {
    if (v7)
    {
      if (v8)
        -[UIView nsli_contentWidthVariable](self, "nsli_contentWidthVariable");
      else
        -[UIView nsli_contentHeightVariable](self, "nsli_contentHeightVariable");
    }
    else if (v8)
    {
      -[UIView nsli_boundsWidthVariable](self, "nsli_boundsWidthVariable");
    }
    else
    {
      -[UIView nsli_boundsHeightVariable](self, "nsli_boundsHeightVariable");
    }
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v20;
    v22 = fabs(v38.f64[1]);
    v23 = fabs(v39.f64[0]);
    if (!v8)
      v22 = v23;
    objc_msgSend(v13, "addVariable:coefficient:", v20, v22);

  }
  if (self != v11)
  {
    -[UIView superview](self, "superview");
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (UIView *)v24;
    if (v11 && (UIView *)v24 != v11)
    {
      v26 = (double *)MEMORY[0x1E0D15688];
      while (1)
      {
        if (v25)
        {
          -[UIView transform](v25, "transform");
        }
        else
        {
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
        }
        v38 = v35;
        v39 = v36;
        v40 = v37;
        v27 = fabs(v35.f64[1]) < 0.00001 && fabs(v39.f64[0]) < 0.00001 && fabs(v38.f64[0] * v39.f64[1]) >= 0.00001;
        if (v25 != self && !v27)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 460, CFSTR("Autolayout doesn't support crossing rotational bounds transforms with dimensional layout constraints, such as width and height. The offending view is: %@"), v25);

        }
        v28 = (float64x2_t *)&v39.f64[1];
        if (!v8)
          v28 = &v38;
        v29 = fabs(v28->f64[0]);
        if (v28->f64[0] != 0.0)
          break;
        v30 = *v26;
        if (*v26 <= 1.0)
          goto LABEL_48;
LABEL_49:
        -[UIView superview](v25, "superview");
        v31 = objc_claimAutoreleasedReturnValue();

        v25 = (UIView *)v31;
        if ((UIView *)v31 == v11)
        {
          v25 = v11;
          goto LABEL_53;
        }
      }
      v30 = fabs(v29 + -1.0);
      if (v30 < v29 * *v26)
        goto LABEL_49;
LABEL_48:
      objc_msgSend(v13, "scaleBy:", v29, v30);
      goto LABEL_49;
    }
LABEL_53:

  }
  return v13;
}

- (void)_oldUpdateLayoutEngineHostConstraints
{
  void *v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  id v9;

  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0
    && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    -[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      -[UIView _alignmentBounds](self, "_alignmentBounds");
      v5 = v4;
      objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:constant:", self, 7, 0, v6);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D156E0], "constraintWithItem:attribute:relatedBy:constant:", self, 8, 0, v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setIdentifier:", CFSTR("UIView-Encapsulated-Layout-Width"));
      objc_msgSend(v7, "setIdentifier:", CFSTR("UIView-Encapsulated-Layout-Height"));
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v9, v7, 0);
      -[UIView _setLayoutEngineHostConstraints:](self, v8);
      -[UIView addConstraints:](self, "addConstraints:", v8);

    }
  }
}

- (void)_oldEngineHostConstraints_frameDidChange
{
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  id v9;

  -[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "count") == 2)
  {
    -[UIView _alignmentBounds](self, "_alignmentBounds");
    v4 = v3;
    v6 = v5;
    objc_msgSend(v9, "objectAtIndex:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectAtIndex:", 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setConstant:", v4);
    objc_msgSend(v8, "setConstant:", v6);

  }
  else
  {
    -[UIView _invalidateEngineHostConstraints]((uint64_t)self);
  }

}

- (id)_viewForBaselineLayout
{
  UIView *v4;
  void *v6;

  -[UIView viewForBaselineLayout](self, "viewForBaselineLayout");
  v4 = (UIView *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    v4 = self;
  if (!-[UIView isDescendantOfView:](v4, "isDescendantOfView:", self))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("NSLayoutConstraint_OldUIKitAdditions.m"), 524, CFSTR("The return value of -viewForBaselineLayout must be in the receiver's subtree."));

  }
  return v4;
}

- (UIView)viewForBaselineLayout
{
  UIView *v3;

  if (!dyld_program_sdk_at_least() || (*((_DWORD *)&self->_viewFlags + 4) & 0x800) != 0)
  {
    v3 = self;
  }
  else
  {
    -[UIView viewForLastBaselineLayout](self, "viewForLastBaselineLayout");
    v3 = (UIView *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

+ (void)_setHostLayoutEngineOnlyTAMIC_YES
{
  __forceHostLayoutEngineOnlyTAMIC_YES = 1;
}

+ (void)_resetHostLayoutEngineOnlyTAMIC_YES
{
  __forceHostLayoutEngineOnlyTAMIC_YES = 0;
}

+ (BOOL)_hostLayoutEngineOnlyTAMIC_YES
{
  return __forceHostLayoutEngineOnlyTAMIC_YES;
}

- (void)_setDisableLayoutFlushingCount:(int64_t)a3
{
  objc_setAssociatedObject(self, &_UIViewDisableLayoutFlushingCount, (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3), (void *)1);
}

- (int64_t)_disableLayoutFlushingCount
{
  return objc_msgSend(objc_getAssociatedObject(self, &_UIViewDisableLayoutFlushingCount), "integerValue");
}

- (id)_descriptionForLayoutTrace
{
  void *v3;

  v3 = (void *)_truncatedDebuggingDescriptionForLayout(-[UIView _layoutDebuggingIdentifier](self, "_layoutDebuggingIdentifier"));
  if (v3)
    return (id)objc_msgSend(v3, "stringByAppendingString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(":%p"), self));
  else
    return -[UIView _defaultLayoutDescription](self, "_defaultLayoutDescription");
}

- (void)_rebuildLayoutFromScratch
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "_layoutEngine");
    if (v2)
    {
      v3 = v2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 || objc_msgSend(v1, "_hostsLayoutEngine"))
      {
        objc_msgSend(v1, "_discardLayoutEngine:", v3);
        objc_msgSend(v1, "_initializeLayoutEngine");
      }
      objc_msgSend(v1, "_setNeedsUpdateConstraints");
    }
    v4 = (void *)objc_msgSend(v1, "_allSubviews");
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    result = (void *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (result)
    {
      v5 = result;
      v6 = *(_QWORD *)v9;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v4);
          -[UIView _rebuildLayoutFromScratch](*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        result = (void *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        v5 = result;
      }
      while (result);
    }
  }
  return result;
}

- (void)_viewHierarchyUnpreparedForConstraint:(id)a3
{
  unint64_t v4;
  NSObject *v5;
  int v6;
  id v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = _viewHierarchyUnpreparedForConstraint____s_category;
  if (!_viewHierarchyUnpreparedForConstraint____s_category)
  {
    v4 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&_viewHierarchyUnpreparedForConstraint____s_category);
  }
  v5 = *(NSObject **)(v4 + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = 138412546;
    v7 = a3;
    v8 = 2080;
    v9 = "-[UIView(UIConstraintBasedLayout) _viewHierarchyUnpreparedForConstraint:]";
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "The view hierarchy is not prepared for the constraint: %@\n\tWhen added to a view, the constraint's items must be descendants of that view (or the view itself). This will crash if the constraint needs to be resolved before the view hierarchy is assembled. Break on %s to debug.", (uint8_t *)&v6, 0x16u);
  }
}

- (BOOL)_layoutEngine_isEngineMergingAllowedBetweenEngine:(id)a3 itemEngine:(id)a4 forConstraint:(id)a5 initialView:(id)a6
{
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v10 = -[UIView _window](self, "_window");
  v11 = (void *)objc_msgSend(a4, "delegate");
  if ((id)objc_msgSend(a3, "delegate") != v10)
  {
    if (os_variant_has_internal_diagnostics())
    {
      v17 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        v18 = 138412290;
        v19 = a5;
        _os_log_fault_impl(&dword_185066000, v17, OS_LOG_TYPE_FAULT, "UIKit issue: Window safe area aspect fit guide assertion guard preconditions not met for constraint: %@", (uint8_t *)&v18, 0xCu);
      }
    }
    else
    {
      v15 = _layoutEngine_isEngineMergingAllowedBetweenEngine_itemEngine_forConstraint_initialView____s_category;
      if (!_layoutEngine_isEngineMergingAllowedBetweenEngine_itemEngine_forConstraint_initialView____s_category)
      {
        v15 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v15, (unint64_t *)&_layoutEngine_isEngineMergingAllowedBetweenEngine_itemEngine_forConstraint_initialView____s_category);
      }
      v16 = *(NSObject **)(v15 + 8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v18 = 138412290;
        v19 = a5;
        _os_log_impl(&dword_185066000, v16, OS_LOG_TYPE_ERROR, "UIKit issue: Window safe area aspect fit guide assertion guard preconditions not met for constraint: %@", (uint8_t *)&v18, 0xCu);
      }
    }
    return 1;
  }
  v12 = (void *)objc_msgSend(v11, "_viewControllerForAncestor");
  if (!v12 && (id)objc_msgSend(a6, "_window") == v10 || v12 == (void *)objc_msgSend(v10, "rootViewController"))
    return 1;
  v13 = objc_msgSend(v12, "presentingViewController");
  if (v13 == objc_msgSend(v10, "rootViewController"))
    return objc_msgSend((id)objc_msgSend(v12, "presentationController"), "_isPresentedInFullScreen");
  else
    return 0;
}

- (BOOL)_uiib_tryToAddConstraint:(id)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:(id *)a5
{
  return -[UIView _tryToAddConstraint:roundingAdjustment:mutuallyExclusiveConstraints:]((uint64_t)self, a3, (uint64_t)a5, a4);
}

- (double)nsli_marginOffsetForAttribute:(int64_t)a3
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;

  -[UIView layoutMargins](self, "layoutMargins");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = objc_msgSend((id)UIApp, "userInterfaceLayoutDirection");
  switch(a3)
  {
    case 13:
      return v7;
    case 14:
      return -v11;
    case 15:
      return v5;
    case 16:
      return -v9;
    case 17:
      if (v12 == 1)
        return v11;
      return v7;
    case 18:
      if (v12 == 1)
        v13 = v7;
      else
        v13 = v11;
      goto LABEL_14;
    case 19:
      return round((v7 - v11) * 0.5);
    case 20:
      v13 = round((v9 - v5) * 0.5);
LABEL_14:
      v7 = -v13;
      break;
    default:
      v7 = 0.0;
      break;
  }
  return v7;
}

- (uint64_t)_usesLayoutEngineHostingConstraints
{
  int *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = &OBJC_IVAR____UIViewFittingSizeTargetInfo__verticalPriority;
    v2 = *(_QWORD *)(result + 104);
    if ((v2 & 0x80000000000) == 0)
      return 0;
    if ((v2 & 0x400000000000000) != 0)
    {
      return 1;
    }
    else
    {
      if (qword_1ECD791C8 != -1)
      {
        v3 = result;
        dispatch_once(&qword_1ECD791C8, &__block_literal_global_736);
        v1 = &OBJC_IVAR____UIViewFittingSizeTargetInfo__verticalPriority;
        result = v3;
      }
      if (!byte_1ECD790BA)
        return 0;
      return (*(_QWORD *)(result + v1[642]) >> 59) & 1;
    }
  }
  return result;
}

- (void)_disableLayoutFlushing
{
  *(_QWORD *)&self->_viewFlags |= 0x100000000000000uLL;
}

- (void)_enableLayoutFlushing
{
  UIView *v3;
  uint64_t v4;

  *(_QWORD *)&self->_viewFlags &= ~0x100000000000000uLL;
  -[UIView _setDisableLayoutFlushingCount:](self, "_setDisableLayoutFlushingCount:", 0);
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    v3 = -[UIView superview](self, "superview");
    v4 = -[NSISEngine delegate](-[UIView _layoutEngine](v3, "_layoutEngine"), "delegate");
    if (-[CALayer needsLayout](-[UIView layer](v3, "layer"), "needsLayout")
      || v4 && (~*(_QWORD *)(v4 + 104) & 0x300000000000) != 0)
    {
      -[UIView layoutIfNeeded](-[UIView superview](self, "superview"), "layoutIfNeeded");
    }
    else
    {
      -[UIView _applyISEngineLayoutValuesToBoundsOnly:](self, "_applyISEngineLayoutValuesToBoundsOnly:", 0);
    }
  }
}

- (void)_popDisableLayoutFlushing
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "_disableLayoutFlushingCount");
    if (v2 < 2)
    {
      objc_msgSend(v1, "_setDisableLayoutFlushingCount:", 0);
      return (void *)objc_msgSend(v1, "_enableLayoutFlushing");
    }
    else
    {
      return (void *)objc_msgSend(v1, "_setDisableLayoutFlushingCount:", v2 - 1);
    }
  }
  return result;
}

- (id)_alignmentDebuggingOverlayCreateIfNecessary:(BOOL)a3
{
  _BOOL4 v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _UIDebugAlignmentRectView *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _UIDebugAlignmentRectView *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v3 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v5 = -[UIView _allSubviews](self, "_allSubviews", 0);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v8)
        objc_enumerationMutation(v5);
      v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v9);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v10 = 0;
  }
  if (!v10 && v3 && (*((_QWORD *)&self->_viewFlags + 1) & 0x10000000000000) == 0)
  {
    v11 = [_UIDebugAlignmentRectView alloc];
    -[UIView bounds](self, "bounds");
    -[UIView _alignmentRectForBounds:](self, "_alignmentRectForBounds:");
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    -[UIView _baselineOffsetFromBottom](self, "_baselineOffsetFromBottom");
    v21 = -[_UIDebugAlignmentRectView initWithFrame:baselineOffset:](v11, "initWithFrame:baselineOffset:", v13, v15, v17, v19, v20);
    -[UIView addSubview:](self, "addSubview:", v21);

    *((_QWORD *)&self->_viewFlags + 1) |= 0x10000000000000uLL;
  }
  return v10;
}

- (id)_debuggableDescriptionForConstraintsAffectingAxis:(int64_t)a3
{
  const __CFString *v3;

  v3 = CFSTR("horizontal");
  if (a3 == 1)
    v3 = CFSTR("vertical");
  return (id)_debuggableDescriptionForConstraintsWithHeader(-[UIView constraintsAffectingLayoutForAxis:](self, "constraintsAffectingLayoutForAxis:", a3), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("constraints affecting %@ axis..."), v3));
}

- (id)_debuggableDescriptionForConstraintsAffectingHorizontalAxis
{
  return -[UIView _debuggableDescriptionForConstraintsAffectingAxis:](self, "_debuggableDescriptionForConstraintsAffectingAxis:", 0);
}

- (id)_debuggableDescriptionForConstraintsAffectingVerticalAxis
{
  return -[UIView _debuggableDescriptionForConstraintsAffectingAxis:](self, "_debuggableDescriptionForConstraintsAffectingAxis:", 1);
}

- (id)constraintsAffectingLayoutForAxis:(int64_t)a3 ofItem:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t m;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];
  _BYTE v55[128];
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(a4, "nsli_layoutEngine");
  if (!v6)
    return (id)objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v7 = v6;
  if (a3)
  {
    v8 = (void *)objc_msgSend(v6, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_minYVariable"));
    v9 = (void *)objc_msgSend(v7, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_boundsHeightVariable"));
    if (objc_msgSend(a4, "nsli_contentHeightVariable"))
      v10 = (void *)objc_msgSend(v7, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_contentHeightVariable"));
    else
      v10 = 0;
    v16 = (id)objc_msgSend(v8, "mutableCopy");
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v17 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v42 != v19)
            objc_enumerationMutation(v9);
          v21 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * i);
          if ((objc_msgSend(v16, "containsObject:", v21) & 1) == 0)
            objc_msgSend(v16, "addObject:", v21);
        }
        v18 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
      }
      while (v18);
    }
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v22 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v53, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v38;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v38 != v24)
            objc_enumerationMutation(v10);
          v26 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * j);
          if ((objc_msgSend(v16, "containsObject:", v26) & 1) == 0)
            objc_msgSend(v16, "addObject:", v26);
        }
        v23 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v53, 16);
      }
      while (v23);
    }
  }
  else
  {
    v12 = (void *)objc_msgSend(v6, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_minXVariable"));
    v13 = (void *)objc_msgSend(v7, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_boundsWidthVariable"));
    v14 = objc_msgSend(a4, "nsli_contentWidthVariable");
    if (v14)
      v15 = (void *)objc_msgSend(v7, "constraintsAffectingValueOfVariable:", v14);
    else
      v15 = 0;
    v16 = (id)objc_msgSend(v12, "mutableCopy");
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v27 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
    if (v27)
    {
      v28 = v27;
      v29 = *(_QWORD *)v50;
      do
      {
        for (k = 0; k != v28; ++k)
        {
          if (*(_QWORD *)v50 != v29)
            objc_enumerationMutation(v13);
          v31 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * k);
          if ((objc_msgSend(v16, "containsObject:", v31) & 1) == 0)
            objc_msgSend(v16, "addObject:", v31);
        }
        v28 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
      }
      while (v28);
    }
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v32 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v46;
      do
      {
        for (m = 0; m != v33; ++m)
        {
          if (*(_QWORD *)v46 != v34)
            objc_enumerationMutation(v15);
          v36 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * m);
          if ((objc_msgSend(v16, "containsObject:", v36) & 1) == 0)
            objc_msgSend(v16, "addObject:", v36);
        }
        v33 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
      }
      while (v33);
    }
  }
  return (id)objc_msgSend((id)objc_msgSend(v16, "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_314_1), "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_315_0);
}

- (NSArray)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis
{
  return (NSArray *)-[UIView constraintsAffectingLayoutForAxis:ofItem:](self, "constraintsAffectingLayoutForAxis:ofItem:", axis, self);
}

- (BOOL)hasAmbiguousLayout
{
  _BOOL4 v3;
  unint64_t v4;
  NSObject *v5;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = -[UIView _hasAmbiguousLayout](self, "_hasAmbiguousLayout");
  if (v3)
  {
    v4 = hasAmbiguousLayout___s_category_223;
    if (!hasAmbiguousLayout___s_category_223)
    {
      v4 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v4, (unint64_t *)&hasAmbiguousLayout___s_category_223);
    }
    v5 = *(NSObject **)(v4 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = -[UIView _autolayoutTraceRecursively:](self, "_autolayoutTraceRecursively:", 0);
      _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "View has an ambiguous layout. See \"Auto Layout Guide: Ambiguous Layouts\" for help debugging. Displaying synopsis from invoking -[UIView _autolayoutTrace] to provide additional detail.\n%@", (uint8_t *)&v7, 0xCu);
    }
  }
  return v3;
}

- (BOOL)_hasAmbiguousLayout
{
  return objc_msgSend(-[UIView _layoutVariablesWithAmbiguousValue](self, "_layoutVariablesWithAmbiguousValue"), "count") != 0;
}

- (id)_layoutVariablesWithAmbiguousValue
{
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0
    && !-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    return (id)_layoutVariablesWithAmbiguousValueForLayoutItem(self);
  }
  else
  {
    return (id)objc_msgSend(MEMORY[0x1E0C99D20], "array");
  }
}

- (void)exerciseAmbiguityInLayout
{
  NSISEngine *v3;
  id v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;
  CGRect v28;
  CGRect v29;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = -[UIView _layoutEngine](self, "_layoutEngine");
  v4 = -[UIView _layoutVariablesWithAmbiguousValue](self, "_layoutVariablesWithAmbiguousValue");
  -[UIView frame](self, "frame");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  v14 = v6;
  v15 = v8;
  v16 = v10;
  v17 = v12;
  if (v13)
  {
    v18 = v13;
    v19 = *(_QWORD *)v23;
    v14 = v6;
    v15 = v8;
    v16 = v10;
    v17 = v12;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v23 != v19)
          objc_enumerationMutation(v4);
        v21 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        if (-[NSISEngine hasValue:forVariable:](v3, "hasValue:forVariable:", 0, v21))
        {
          -[NSISEngine exerciseAmbiguityInVariable:](v3, "exerciseAmbiguityInVariable:", v21);
        }
        else if (v21 == -[UIView nsli_minXVariable](self, "nsli_minXVariable"))
        {
          v14 = (double)(arc4random() % 0xC9 - 100);
        }
        else if (v21 == -[UIView nsli_minYVariable](self, "nsli_minYVariable"))
        {
          v15 = (double)(arc4random() % 0xC9 - 100);
        }
        else if (v21 == -[UIView nsli_boundsWidthVariable](self, "nsli_boundsWidthVariable"))
        {
          v16 = fabs((double)(arc4random() % 0xC9 - 100));
        }
        else if (v21 == -[UIView nsli_boundsHeightVariable](self, "nsli_boundsHeightVariable"))
        {
          v17 = fabs((double)(arc4random() % 0xC9 - 100));
        }
      }
      v18 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v18);
  }
  v28.origin.x = v6;
  v28.origin.y = v8;
  v28.size.width = v10;
  v28.size.height = v12;
  v29.origin.x = v14;
  v29.origin.y = v15;
  v29.size.width = v16;
  v29.size.height = v17;
  if (CGRectEqualToRect(v28, v29))
    -[UIView layoutIfNeeded](-[UIView window](self, "window"), "layoutIfNeeded");
  else
    -[UIView setFrame:](self, "setFrame:", v14, v15, v16, v17);
}

- (id)_descendantWithAmbiguousLayout
{
  UIView *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v2 = self;
  v15 = *MEMORY[0x1E0C80C00];
  if (!-[UIView _hasAmbiguousLayout](self, "_hasAmbiguousLayout"))
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = -[UIView _allSubviews](v2, "_allSubviews", 0);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "_descendantWithAmbiguousLayout");
          if (v8)
            return v8;
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        v2 = 0;
        if (v5)
          continue;
        break;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  objc_class *v4;
  const char *Name;
  void *v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 88;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 89;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v6;
  result = objc_msgSend(v6, "superview");
  *(_QWORD *)(a2 + 72) = result;
  return result;
}

_QWORD *__160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_228(uint64_t a1)
{
  void *v2;
  double v3;
  void *v4;
  double v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  float v15;
  double v16;
  double v17;
  double v18;

  v2 = (void *)objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", 0);
  LODWORD(v3) = *(_DWORD *)(a1 + 112);
  objc_msgSend(v2, "setPriority:", v3);
  objc_msgSend(v2, "setIdentifier:", CFSTR("fittingSizeHTarget"));
  objc_msgSend(v2, "setContainer:", *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", 1);
  LODWORD(v5) = *(_DWORD *)(a1 + 116);
  objc_msgSend(v4, "setPriority:", v5);
  objc_msgSend(v4, "setIdentifier:", CFSTR("fittingSizeVTarget"));
  objc_msgSend(v4, "setContainer:", *(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) = v4;
  v6 = *(_QWORD **)(a1 + 40);
  if (*(_BYTE *)(a1 + 120))
  {
    v7 = (void *)objc_msgSend(v6, "_layoutEngineHostConstraints");
    v8 = objc_msgSend(v7, "count");
    if (v8)
    {
      v9 = v8;
      v10 = *(void **)(a1 + 40);
      if ((dyld_program_sdk_at_least() & 1) != 0
        || v10 && objc_msgSend(v10, "_forceLayoutEngineSolutionInRationalEdges"))
      {
        v11 = 4;
      }
      else
      {
        v11 = 2;
      }
      if (v9 != v11)
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 40), CFSTR("NSLayoutConstraint_UIKitAdditions.m"), 2911, CFSTR("Bogus anchoring constraints for the layout engine"));
      v12 = 0;
      v13 = 1;
      do
      {
        v14 = v13;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12), "priority");
        if (v15 != 1000.0
          || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12), "constant"),
              v17 = v16,
              objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v12), "constant"),
              v17 != v18))
        {
          objc_msgSend(*(id *)(a1 + 48), "addObject:", objc_msgSend(v7, "objectAtIndexedSubscript:", v12));
          objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v12), "_removeFromEngine:", *(_QWORD *)(a1 + 56));
          objc_msgSend(*(id *)(a1 + 64), "addObject:", objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12));
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12), "_addToEngine:", *(_QWORD *)(a1 + 56));
        }
        v13 = 0;
        v12 = 1;
      }
      while ((v14 & 1) != 0);
    }
    else
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0), "_addToEngine:", *(_QWORD *)(a1 + 56));
      objc_msgSend(*(id *)(a1 + 64), "addObject:", objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0));
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 1), "_addToEngine:", *(_QWORD *)(a1 + 56));
      objc_msgSend(*(id *)(a1 + 64), "addObject:", objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 1));
    }
  }
  else
  {
    -[UIView _populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:](v6, *(_QWORD *)(a1 + 56), *(_QWORD **)(a1 + 40));
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0), "_addToEngine:", *(_QWORD *)(a1 + 56));
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 1), "_addToEngine:", *(_QWORD *)(a1 + 56));
  }
  return -[UIView _recursiveCollectTemporaryInternalConstraintsWithEngine:ignoreAutoresizingMaskConstraints:returningConstraintsForViewsNeedingSecondPass:currentTargetWidth:](*(_QWORD **)(a1 + 40), *(_QWORD **)(a1 + 56), 1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40, *(double *)(a1 + 96));
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "_removeFromEngine:", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "_addToEngine:", *(_QWORD *)(a1 + 32));
}

- (uint64_t)_wantsAutolayoutOrIsGuardingForEngineHosting
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if ((*(_QWORD *)(result + 104) & 0x400000000000000) != 0)
    {
      return 1;
    }
    else
    {
      if (qword_1ECD791C8 != -1)
        dispatch_once(&qword_1ECD791C8, &__block_literal_global_736);
      if (byte_1ECD790BA)
        return -[UIView _usesLayoutEngineHostingConstraints](v1);
      else
        return 0;
    }
  }
  return result;
}

- (CGSize)_systemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5
{
  double height;
  double width;
  double v10;
  double v11;
  double v12;
  double v13;
  CGSize result;

  height = a3.height;
  width = a3.width;
  if (_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority__once != -1)
    dispatch_once(&_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority__once, &__block_literal_global_237_0);
  *(float *)&v10 = a4;
  *(float *)&v11 = a5;
  -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:](self, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", width, height, v10, v11);
  result.height = v13;
  result.width = v12;
  return result;
}

void __118__UIView_UIConstraintBasedLayout___systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority___block_invoke()
{
  unint64_t v0;
  NSObject *v1;
  uint8_t v2[16];

  v0 = UILayoutFittingExpandedSize_block_invoke_11___s_category;
  if (!UILayoutFittingExpandedSize_block_invoke_11___s_category)
  {
    v0 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v0, (unint64_t *)&UILayoutFittingExpandedSize_block_invoke_11___s_category);
  }
  v1 = *(NSObject **)(v0 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_185066000, v1, OS_LOG_TYPE_ERROR, "API is now available. Please use -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v2, 2u);
  }
}

- (BOOL)_layoutEngineRelativeAlignmentRectOriginIsValid
{
  return -[_UIViewLayoutEngineRelativeAlignmentRectOriginCache isValid](-[UIView _alignmentRectOriginCacheCreateIfNecessary:](self, 0), "isValid");
}

- (id)_recursiveConstraintsTraceAtLevel:(int64_t)a3
{
  void *v5;
  int64_t v6;
  uint64_t viewFlags;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  objc_class *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("\n"));
  if (a3 >= 1)
  {
    v6 = a3;
    do
    {
      objc_msgSend(v5, "appendString:", CFSTR("|   "));
      --v6;
    }
    while (v6);
  }
  viewFlags = (uint64_t)self->_viewFlags;
  v8 = CFSTR("-");
  if ((viewFlags & 0x400000000000000) == 0)
    v8 = &stru_1E16EDF20;
  if ((viewFlags & 0x100000000000) != 0)
    v9 = &stru_1E16EDF20;
  else
    v9 = v8;
  v10 = CFSTR("*");
  if ((viewFlags & 0x800000000000000) == 0)
    v10 = &stru_1E16EDF20;
  if ((viewFlags & 0x200000000000) != 0)
    v11 = &stru_1E16EDF20;
  else
    v11 = v10;
  v12 = (objc_class *)objc_opt_class();
  objc_msgSend(v5, "appendFormat:", CFSTR("%@%@<%@:%p>"), v9, v11, NSStringFromClass(v12), self);
  v13 = -[UIView _allSubviews](self, "_allSubviews");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v21;
    v17 = a3 + 1;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v21 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(v5, "appendString:", objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v18++), "_recursiveConstraintsTraceAtLevel:", v17));
      }
      while (v15 != v18);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v15);
  }
  return v5;
}

- (id)_rootView
{
  UIWindow *i;
  UIView *v4;

  i = -[UIView window](self, "window");
  if (!i)
  {
    v4 = -[UIView superview](self, "superview");
    for (i = (UIWindow *)self; v4; v4 = -[UIView superview](v4, "superview"))
      i = (UIWindow *)v4;
  }
  return i;
}

- (id)_constraintsValidityDescription
{
  return (id)objc_msgSend(-[UIView _rootView](self, "_rootView"), "_recursiveConstraintsTraceAtLevel:", 0);
}

- (id)_autolayoutTraceAtLevel:(int64_t)a3 recursively:(BOOL)a4
{
  unint64_t v6;
  void *v7;
  int64_t v8;
  int v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const __CFString *v37;
  id v38;
  char v39;
  const __CFString *v40;
  int64_t v41;
  NSArray *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t k;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i;
  _BOOL4 v58;
  int64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[128];
  _BYTE v73[128];
  _BYTE v74[128];
  uint64_t v75;
  CGRect v76;
  CGRect v77;

  v58 = a4;
  v75 = *MEMORY[0x1E0C80C00];
  v6 = 0x1E0CB3000uLL;
  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("\n"));
  if (a3 >= 1)
  {
    v8 = a3;
    do
    {
      objc_msgSend(v7, "appendString:", CFSTR("|   "));
      --v8;
    }
    while (v8);
  }
  v59 = a3;
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) == 0
    || (v9 = !-[UIView _hasAmbiguousLayout](self, "_hasAmbiguousLayout"), (v9 & 1) != 0))
  {
    v10 = 0;
    LOBYTE(v9) = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      LOBYTE(v9) = 0;
      v10 = 0;
    }
    else
    {
      v53 = -[UIView _layoutVariablesWithAmbiguousValue](self, "_layoutVariablesWithAmbiguousValue");
      v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v68, v74, 16);
      if (v54)
      {
        v55 = v54;
        v56 = *(_QWORD *)v69;
        do
        {
          for (i = 0; i != v55; ++i)
          {
            if (*(_QWORD *)v69 != v56)
              objc_enumerationMutation(v53);
            objc_msgSend(v10, "appendString:", objc_msgSend(*(id *)(*((_QWORD *)&v68 + 1) + 8 * i), "description"));
            objc_msgSend(v10, "appendString:", CFSTR(", "));
          }
          v55 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v68, v74, 16);
        }
        while (v55);
      }
      objc_msgSend(v10, "deleteCharactersInRange:", objc_msgSend(v10, "length") - 2, 2);
      v6 = 0x1E0CB3000;
    }
  }
  if (-[UIView _window](self, "_window") == self)
  {
    v11 = &stru_1E16EDF20;
  }
  else
  {
    v11 = &stru_1E16EDF20;
    if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
      && !objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count"))
    {
      v11 = CFSTR(", MISSING HOST CONSTRAINTS");
    }
  }
  v12 = (void *)objc_msgSend(*(id *)(v6 + 1952), "stringWithString:", &stru_1E16EDF20);
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    -[UIView frame](self, "frame");
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    -[UIView frame](self, "frame");
    -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
    v77.origin.x = v21;
    v77.origin.y = v22;
    v77.size.width = v23;
    v77.size.height = v24;
    v76.origin.x = v14;
    v76.origin.y = v16;
    v76.size.width = v18;
    v76.size.height = v20;
    if (!CGRectEqualToRect(v76, v77))
    {
      -[UIView frame](self, "frame");
      v26 = v25;
      v28 = v27;
      v30 = v29;
      v32 = v31;
      -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
      objc_msgSend(v12, "appendFormat:", CFSTR(" alignmentRect = (%g %g; %g %g)"), v33, v34, v35, v36);
      objc_msgSend(v12, "appendFormat:", CFSTR(" for frame = (%g %g; %g %g);"), v26, v28, v30, v32);
    }
  }
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0
    || (UIView *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate") == self)
  {
    if (-[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine") || -[UIView _window](self, "_window") == self)
    {
      v37 = CFSTR("•");
    }
    else if (-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints"))
    {
      v37 = CFSTR("+");
    }
    else
    {
      v37 = CFSTR("*");
    }
  }
  else
  {
    v37 = &stru_1E16EDF20;
  }
  v38 = -[UIView _descriptionForLayoutTrace](self, "_descriptionForLayoutTrace");
  if ((*(_QWORD *)&self->_viewFlags & 0x400000000000000) != 0)
    v39 = v9;
  else
    v39 = 1;
  if ((v39 & 1) != 0)
  {
    v40 = &stru_1E16EDF20;
    v41 = v59;
  }
  else
  {
    v41 = v59;
    if (v10)
      v40 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("- AMBIGUOUS LAYOUT for %@"), v10);
    else
      v40 = CFSTR(" - AMBIGUOUS LAYOUT");
  }
  objc_msgSend(v7, "appendFormat:", CFSTR("%@%@%@%@%@"), v37, v38, v40, v11, v12);
  if (v58)
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v42 = -[UIView layoutGuides](self, "layoutGuides");
    v43 = -[NSArray countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
    if (v43)
    {
      v44 = v43;
      v45 = *(_QWORD *)v65;
      do
      {
        for (j = 0; j != v44; ++j)
        {
          if (*(_QWORD *)v65 != v45)
            objc_enumerationMutation(v42);
          objc_msgSend(v7, "appendString:", objc_msgSend(*(id *)(*((_QWORD *)&v64 + 1) + 8 * j), "_autolayoutTraceAtLevel:recursively:", v41 + 1, 1));
        }
        v44 = -[NSArray countByEnumeratingWithState:objects:count:](v42, "countByEnumeratingWithState:objects:count:", &v64, v73, 16);
      }
      while (v44);
    }
    v47 = -[UIView _allSubviews](self, "_allSubviews");
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
    if (v48)
    {
      v49 = v48;
      v50 = *(_QWORD *)v61;
      do
      {
        for (k = 0; k != v49; ++k)
        {
          if (*(_QWORD *)v61 != v50)
            objc_enumerationMutation(v47);
          objc_msgSend(v7, "appendString:", objc_msgSend(*(id *)(*((_QWORD *)&v60 + 1) + 8 * k), "_autolayoutTraceAtLevel:recursively:", v41 + 1, 1));
        }
        v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
      }
      while (v49);
    }
  }
  return v7;
}

- (id)_autolayoutTraceRecursively:(BOOL)a3
{
  return (id)objc_msgSend(-[UIView _autolayoutTraceAtLevel:recursively:](self, "_autolayoutTraceAtLevel:recursively:", 0, a3), "stringByAppendingString:", CFSTR("\n\nLegend:\n\t* - is laid out with auto layout\n\t+ - is laid out manually, but is represented in the layout engine because translatesAutoresizingMaskIntoConstraints = YES\n\t• - layout engine host"));
}

- (id)_autolayoutTrace
{
  return (id)objc_msgSend(-[UIView _rootView](self, "_rootView"), "_autolayoutTraceRecursively:", 1);
}

- (id)_recursiveLayoutEngineDescription
{
  _BOOL4 v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = -[UIView _hostsLayoutEngine](self, "_hostsLayoutEngine");
  v4 = (void *)MEMORY[0x1E0CB3940];
  v5 = -[UIView _descriptionForLayoutTrace](self, "_descriptionForLayoutTrace");
  if (v3)
    v6 = objc_msgSend(v4, "stringWithFormat:", CFSTR("\nEngine for %@:\n%@"), v5, -[UIView _layoutEngine](self, "_layoutEngine"));
  else
    v6 = objc_msgSend(v4, "stringWithFormat:", CFSTR("\nNo engine for %@"), v5, v14);
  v7 = (void *)v6;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v8 = -[UIView _allSubviews](self, "_allSubviews");
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v7 = (void *)objc_msgSend(v7, "stringByAppendingString:", objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * i), "_recursiveLayoutEngineDescription"));
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }
  return v7;
}

- (CGRect)_boundsForAlignmentRect:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView alignmentRectInsets](self, "alignmentRectInsets");
  v10 = y - v9;
  v12 = height - (-v8 - v9);
  v13 = round(width - (-v7 - v11));
  v14 = round(v12);
  v15 = x - v11;
  v16 = v10;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v16;
  result.origin.x = v15;
  return result;
}

- (CGRect)_alignmentBounds
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  -[UIView bounds](self, "bounds");
  -[UIView _alignmentRectForBounds:](self, "_alignmentRectForBounds:");
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (BOOL)_useContentDimensionVariablesForConstraintLowering
{
  return 0;
}

- (CGSize)_nsis_contentSize
{
  double v2;
  double v3;
  CGSize result;

  v2 = *MEMORY[0x1E0C9D820];
  v3 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  result.height = v3;
  result.width = v2;
  return result;
}

- (BOOL)_forceLayoutEngineSolutionInRationalEdges
{
  return 0;
}

- (double)_nsis_layoutSizeInEngine:(void *)a1
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  if (!a1)
    return 0.0;
  objc_msgSend(a1, "_currentScreenScale");
  v5 = v4;
  v6 = 360.0 / v4;
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(a1, "nsli_boundsWidthVariable"));
  v8 = round(v7);
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(a1, "nsli_boundsHeightVariable"));
  return UISizeRoundToScale(round(v8 / v6) / v5, round(round(v9) / v6) / v5, v5);
}

- (double)_nsis_layoutRectFromHostingViewInEngine:(void *)a1
{
  void *v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGFloat MaxY;
  double v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  if (!a1)
    return 0.0;
  v3 = a1;
  objc_msgSend(a1, "_currentScreenScale");
  v5 = v4;
  v6 = 360.0 / v4;
  v7 = objc_msgSend(a2, "delegate");
  v9 = *MEMORY[0x1E0C9D538];
  v8 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_boundsWidthVariable"));
  v11 = round(v10);
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_boundsHeightVariable"));
  v13 = round(v12);
  if ((void *)v7 != v3)
  {
    do
    {
      objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_minXVariable"));
      v9 = v9 + round(v14);
      objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_minYVariable"));
      v8 = v8 + round(v15);
      v3 = (void *)objc_msgSend(v3, "superview");
    }
    while (v3 != (void *)v7);
  }
  v22.origin.x = v9;
  v22.origin.y = v8;
  v22.size.width = v11;
  v22.size.height = v13;
  v21 = round(CGRectGetMinX(v22) / v6) / v5;
  v23.origin.x = v9;
  v23.origin.y = v8;
  v23.size.width = v11;
  v23.size.height = v13;
  v16 = round(CGRectGetMinY(v23) / v6) / v5;
  v24.origin.x = v9;
  v24.origin.y = v8;
  v24.size.width = v11;
  v24.size.height = v13;
  v17 = round(CGRectGetMaxX(v24) / v6) / v5;
  v25.origin.x = v9;
  v25.origin.y = v8;
  v18 = v21;
  v25.size.width = v11;
  v25.size.height = v13;
  MaxY = CGRectGetMaxY(v25);
  UISizeRoundToScale(v17 - v21, round(MaxY / v6) / v5 - v16, v5);
  return v18;
}

- (CGPoint)_nsis_origin
{
  void *v3;
  NSISEngine *v4;
  float64x2_t v5;
  double v11;
  __int128 v12;
  float64x2_t v13;
  float64x2_t v14;
  float64_t v15;
  double v16;
  CGPoint result;

  v15 = 0.0;
  v16 = 0.0;
  v3 = (void *)objc_msgSend(-[UIView _layoutEngineCreateIfNecessary](self, "_layoutEngineCreateIfNecessary"), "delegate");
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v3 && objc_msgSend(v3, "_forceLayoutEngineSolutionInRationalEdges"))
  {
    v14 = 0uLL;
    v13 = 0u;
    v4 = -[UIView _layoutEngine](self, "_layoutEngine", 0, 0);
    v5 = 0uLL;
    if (self)
    {
      -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, v14.f64, (double *)&v12, v4, 0);
      __asm { FMOV            V2.2D, #-0.5 }
      v5 = vaddq_f64(v14, vmulq_f64(v13, _Q2));
    }
    v11 = v5.f64[1];
  }
  else
  {
    -[UIView _nsis_origin:bounds:inEngine:](self, "_nsis_origin:bounds:inEngine:", &v15, 0, -[UIView _layoutEngine](self, "_layoutEngine"));
    v5.f64[0] = v15;
    v11 = v16;
  }
  result.x = v5.f64[0];
  result.y = v11;
  return result;
}

- (BOOL)_preWhitetailUsesAutoresizingConstraints
{
  _BOOL8 v3;

  LODWORD(v3) = -[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints");
  if (v3)
    return (*(_QWORD *)&self->_viewFlags >> 58) & 1;
  return v3;
}

- (void)_withUnsatisfiableConstraintsLoggingSuspendedForFullSubtreeFromOutermostEngineDelegate:(void *)result
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (result)
  {
    v3 = -[UIView _outermostLayoutEngineDelegateView](result);
    if (!v3)
      return (void *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    v4 = v3;
    v5 = v3[14];
    if ((v5 & 0x10) != 0)
    {
      return (void *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    }
    else
    {
      v6 = *((_DWORD *)v3 + 30);
      v3[13] = v3[13];
      v3[14] = v5 | 0x10;
      *((_DWORD *)v3 + 30) = v6;
      result = (void *)objc_msgSend(v3, "_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:", a2);
      v4[14] &= ~0x10uLL;
    }
  }
  return result;
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_6(uint64_t a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = *(void **)(a1 + 32);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v5);
        if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v6))
        {
          if (objc_msgSend(v6, "superview"))
            -[UIView _resetLayoutEngineHostConstraints](v6);
        }
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

- (void)_addBoundsMatchingConstraintsForView:(id)a3
{
  void *v5;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v5 = (void *)MEMORY[0x1E0D156E0];
  v6[0] = objc_msgSend((id)objc_msgSend(a3, "topAnchor"), "constraintEqualToAnchor:", -[UIView topAnchor](self, "topAnchor"));
  v6[1] = objc_msgSend((id)objc_msgSend(a3, "leadingAnchor"), "constraintEqualToAnchor:", -[UIView leadingAnchor](self, "leadingAnchor"));
  v6[2] = objc_msgSend((id)objc_msgSend(a3, "bottomAnchor"), "constraintEqualToAnchor:", -[UIView bottomAnchor](self, "bottomAnchor"));
  v6[3] = objc_msgSend((id)objc_msgSend(a3, "trailingAnchor"), "constraintEqualToAnchor:", -[UIView trailingAnchor](self, "trailingAnchor"));
  objc_msgSend(v5, "activateConstraints:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4));
}

void __60__UIView_AdditionalLayoutSupport__viewForLastBaselineLayout__block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (dyld_program_sdk_at_least())
  {
    v2 = UILayoutFittingExpandedSize_block_invoke_12___s_category;
    if (!UILayoutFittingExpandedSize_block_invoke_12___s_category)
    {
      v2 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v2, (unint64_t *)&UILayoutFittingExpandedSize_block_invoke_12___s_category);
    }
    v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "className");
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "Sending -viewForBaselineLayout to a member of %@ in lieu of -viewForLastBaselineLayout. Please adopt the iOS 9 API.", (uint8_t *)&v5, 0xCu);
    }
  }
}

- (id)nsis_descriptionOfVariable:(id)a3
{
  UIView *v5;
  const __CFString *v6;
  uint64_t block;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  UIView *v12;

  v5 = (UIView *)objc_msgSend(a3, "delegate");
  if (-[UIView _boundsWidthVariable](v5, "_boundsWidthVariable") == a3)
  {
    v6 = CFSTR(".Width");
  }
  else if (-[UIView _boundsHeightVariable](v5, "_boundsHeightVariable") == a3)
  {
    v6 = CFSTR(".Height");
  }
  else if (-[UIView _minXVariable](v5, "_minXVariable") == a3)
  {
    v6 = CFSTR(".minX");
  }
  else if (-[UIView _minYVariable](v5, "_minYVariable") == a3)
  {
    v6 = CFSTR(".minY");
  }
  else
  {
    if (v5 != self)
      goto LABEL_6;
    if (-[UIView _contentWidthVariable](self, "_contentWidthVariable") == a3)
    {
      v6 = CFSTR(".contentWidth");
      return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
    }
    if (-[UIView _contentHeightVariable](self, "_contentHeightVariable") == a3)
    {
      v6 = CFSTR(".contentHeight");
      return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
    }
    if (-[UIView _contentXOffsetVariable](self, "_contentXOffsetVariable") == a3)
    {
      v6 = CFSTR(".contentXOffset");
      return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
    }
    if (-[UIView _contentYOffsetVariable](self, "_contentYOffsetVariable") == a3)
    {
      v6 = CFSTR(".contentYOffset");
    }
    else
    {
LABEL_6:
      block = MEMORY[0x1E0C809B0];
      v9 = 3221225472;
      v10 = __62__UIView_AdditionalLayoutSupport__nsis_descriptionOfVariable___block_invoke;
      v11 = &unk_1E16B41B8;
      v12 = v5;
      if (nsis_descriptionOfVariable__once != -1)
        dispatch_once(&nsis_descriptionOfVariable__once, &block);
      v6 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".<unknown var (bug!):%p>"), a3, block, v9, v10, v11, v12);
    }
  }
  return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
}

void __62__UIView_AdditionalLayoutSupport__nsis_descriptionOfVariable___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = UILayoutFittingExpandedSize_block_invoke_13___s_category;
  if (!UILayoutFittingExpandedSize_block_invoke_13___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&UILayoutFittingExpandedSize_block_invoke_13___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v4;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "%@ seems to be the delegate of an NSISVariable it doesn't know anything about. This is an internal UIKit bug.", (uint8_t *)&v5, 0xCu);
  }
}

- (BOOL)nsis_shouldIntegralizeVariable:(id)a3
{
  void *v3;

  v3 = (void *)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine", a3), "delegate");
  if ((dyld_program_sdk_at_least() & 1) != 0)
    return 0;
  if (v3)
    return objc_msgSend(v3, "_forceLayoutEngineSolutionInRationalEdges") ^ 1;
  return 1;
}

- (BOOL)nsis_valueOfVariableIsUserObservable:(id)a3
{
  return 1;
}

- (void)_uili_stashLayoutVariableObservation:(id)a3 forVariable:(id)a4
{
  objc_msgSend(-[UIView _stashedLayoutVariableObservationsCreateIfNecessary](self), "setObject:forKey:", a3, a4);
}

- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 container:(id)a6
{
  unint64_t v6;
  NSObject *v7;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = nsli_lowerAttribute_intoExpression_withCoefficient_container____s_category;
  if (!nsli_lowerAttribute_intoExpression_withCoefficient_container____s_category)
  {
    v6 = __UILogCategoryGetNode("LayoutConstraints", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v6, (unint64_t *)&nsli_lowerAttribute_intoExpression_withCoefficient_container____s_category);
  }
  v7 = *(NSObject **)(v6 + 8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v9 = 136315138;
    v10 = "-[UIView(AdditionalLayoutSupport) nsli_lowerAttribute:intoExpression:withCoefficient:container:]";
    _os_log_impl(&dword_185066000, v7, OS_LOG_TYPE_ERROR, "Unexpected call to %s", (uint8_t *)&v9, 0xCu);
  }
  return 0;
}

uint64_t __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  objc_class *v4;
  const char *Name;
  void *v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 200;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 201;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v6;
  result = objc_msgSend(v6, "superview");
  *(_QWORD *)(a2 + 72) = result;
  return result;
}

uint64_t __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke_443(uint64_t a1, void *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 48);
  v4 = v3 > 0x25;
  v5 = (1 << v3) & 0x2A00119D19;
  v6 = v4 || v5 == 0;
  v7 = *(void **)(a1 + 32);
  if (v6)
    v8 = objc_msgSend(a2, "nsli_contentXOffsetVariable");
  else
    v8 = objc_msgSend(a2, "nsli_contentYOffsetVariable");
  return objc_msgSend(v7, "addVariable:coefficient:", v8, -*(double *)(a1 + 40));
}

- (CGSize)nsli_convertSizeToEngineSpace:(CGSize)a3
{
  double height;
  double width;
  double v5;
  double v6;
  double v7;
  double v8;
  CGSize result;

  height = a3.height;
  width = a3.width;
  -[UIView nsli_engineToUserScalingCoefficients](self, "nsli_engineToUserScalingCoefficients");
  v6 = width / v5;
  v8 = height / v7;
  result.height = v8;
  result.width = v6;
  return result;
}

- (CGSize)nsli_convertSizeFromEngineSpace:(CGSize)a3
{
  double height;
  double width;
  double v5;
  double v6;
  double v7;
  double v8;
  CGSize result;

  height = a3.height;
  width = a3.width;
  -[UIView nsli_engineToUserScalingCoefficients](self, "nsli_engineToUserScalingCoefficients");
  v6 = width * v5;
  v8 = height * v7;
  result.height = v8;
  result.width = v6;
  return result;
}

- (BOOL)nsli_descriptionIncludesPointer
{
  return -[UIView _layoutDescriptionIfDifferentFromDefault](self, "_layoutDescriptionIfDifferentFromDefault") == 0;
}

- (BOOL)nsli_isFlipped
{
  return 1;
}

- (BOOL)nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:(id)a3
{
  return 0;
}

- (BOOL)nsli_isLegalConstraintItem
{
  return 1;
}

- (id)_dummyFittingSizeInfo
{
  double Width;
  float v3;
  _UIViewFittingSizeTargetInfo *v4;
  UIView *v5;
  UIView *v6;
  void *v7;
  objc_super v9;
  CGRect v10;

  -[UIView bounds](self, "bounds");
  Width = CGRectGetWidth(v10);
  if (Width == 0.0)
    v3 = 50.0;
  else
    v3 = 1000.0;
  v4 = [_UIViewFittingSizeTargetInfo alloc];
  if (v4
    && (v9.receiver = v4,
        v9.super_class = (Class)_UIViewFittingSizeTargetInfo,
        (v5 = -[UIView init](&v9, sel_init)) != 0))
  {
    v6 = v5;
    *(double *)&v5->_constraintsExceptingSubviewAutoresizingConstraints = Width;
    v5->_cachedTraitCollection = 0;
    *((float *)&v5->super._responderFlags + 1) = v3;
    LODWORD(v5->super.__layeringSceneIdentity) = 1112014848;
    *(_BYTE *)&v5->super._responderFlags = 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", _layoutSizeInfo(0), v6);

  return v7;
}

- (double)_paddingForBaselineSpacingFromEdge:(int)a3 toNeighborEdge:(int)a4
{
  return 0.0;
}

- (void)_ui_setObservationTrackingDictionary:(id)a3
{
  objc_super v3;

  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFFFFFFFFFELL | (a3 != 0);
  v3.receiver = self;
  v3.super_class = (Class)UIView;
  -[NSObject _ui_setObservationTrackingDictionary:](&v3, sel__ui_setObservationTrackingDictionary_, a3);
}

- (id)_ui_observationTrackingDictionary
{
  objc_super v3;

  if ((*(_QWORD *)&self->_viewFlags & 1) == 0)
    return 0;
  v3.receiver = self;
  v3.super_class = (Class)UIView;
  -[NSObject _ui_observationTrackingDictionary](&v3, sel__ui_observationTrackingDictionary);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)_setInternalAppIntentsIntelligenceProvider:(id)a3
{
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFDFFLL | ((unint64_t)(a3 != 0) << 9);
  objc_setAssociatedObject(self, &_UIViewAppIntentsIntelligenceProviderKey, a3, (void *)1);
}

- (id)_internalAppIntentsIntelligenceProvider
{
  if ((*((_BYTE *)&self->_viewFlags + 21) & 2) == 0)
    return 0;
  objc_getAssociatedObject(self, &_UIViewAppIntentsIntelligenceProviderKey);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)_setAppEntityIdentifier:(id)a3
{
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFBFFLL | ((unint64_t)(a3 != 0) << 10);
  objc_setAssociatedObject(self, &_UIViewAppEntityIdentifierKey, a3, (void *)3);
}

- (NSString)_appEntityIdentifier
{
  if ((*((_BYTE *)&self->_viewFlags + 21) & 4) == 0)
    return (NSString *)0;
  objc_getAssociatedObject(self, &_UIViewAppEntityIdentifierKey);
  return (NSString *)(id)objc_claimAutoreleasedReturnValue();
}

- (void)_setAppIntentIdentifier:(id)a3
{
  *(_QWORD *)((char *)&self->_viewFlags + 20) = *(_QWORD *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFF7FFLL | ((unint64_t)(a3 != 0) << 11);
  objc_setAssociatedObject(self, &_UIViewAppIntentIdentifierKey, a3, (void *)3);
}

- (NSString)_appIntentIdentifier
{
  if ((*((_BYTE *)&self->_viewFlags + 21) & 8) == 0)
    return (NSString *)0;
  objc_getAssociatedObject(self, &_UIViewAppIntentIdentifierKey);
  return (NSString *)(id)objc_claimAutoreleasedReturnValue();
}

- (NSISEngine)_activeSizeToFitLayoutEngine
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  objc_class *v7;
  void *v8;
  objc_class *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      goto LABEL_7;
    NSStringFromSelector(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (objc_class *)objc_opt_class();
    NSStringFromClass(v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138412546;
    v12 = v6;
    v13 = 2112;
    v14 = v8;
    _os_log_fault_impl(&dword_185066000, v5, OS_LOG_TYPE_FAULT, "%@ not supported on %@", (uint8_t *)&v11, 0x16u);
LABEL_6:

LABEL_7:
    return 0;
  }
  v3 = _activeSizeToFitLayoutEngine___s_category;
  if (!_activeSizeToFitLayoutEngine___s_category)
  {
    v3 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v3, (unint64_t *)&_activeSizeToFitLayoutEngine___s_category);
  }
  v4 = *(NSObject **)(v3 + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = v4;
    NSStringFromSelector(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138412546;
    v12 = v6;
    v13 = 2112;
    v14 = v8;
    _os_log_impl(&dword_185066000, v5, OS_LOG_TYPE_ERROR, "%@ not supported on %@", (uint8_t *)&v11, 0x16u);
    goto LABEL_6;
  }
  return 0;
}

- (BOOL)_isInternalDebugView
{
  return 0;
}

- (int64_t)_hiddenManagedByLayoutArrangementCount
{
  return -[UIView _hiddenManagementCountForKey:bitFlagValue:](self, "_UIViewHiddenManagementCount", (*((_DWORD *)&self->_viewFlags + 4) >> 14) & 1);
}

- (int64_t)_pendingHiddenCount
{
  return -[UIView _hiddenManagementCountForKey:bitFlagValue:](self, "_UIViewPendingHiddenCount", (*((_QWORD *)&self->_viewFlags + 1) >> 20) & 1);
}

- (void)_setHidden:(unint64_t)a3 forReason:
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  unint64_t v18;
  NSObject *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = a3 & 3;
    if (os_variant_has_internal_diagnostics())
    {
      if (a3 >= 4)
      {
        __UIFaultDebugAssertLog();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        {
          v20 = 134217984;
          v21 = a3;
          _os_log_fault_impl(&dword_185066000, v17, OS_LOG_TYPE_FAULT, "Attempted to hide a view for an invalid _UIViewHiddenReason, or the reason is too large to fit in _viewFlags.internallyHiddenForReason: %ld", (uint8_t *)&v20, 0xCu);
        }

      }
    }
    else if (a3 >= 4)
    {
      v18 = qword_1EDDCA680;
      if (!qword_1EDDCA680)
      {
        v18 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v18, (unint64_t *)&qword_1EDDCA680);
      }
      v19 = *(NSObject **)(v18 + 8);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = 134217984;
        v21 = a3;
        _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "Attempted to hide a view for an invalid _UIViewHiddenReason, or the reason is too large to fit in _viewFlags.internallyHiddenForReason: %ld", (uint8_t *)&v20, 0xCu);
      }
    }
    v7 = (uint64_t *)(a1 + 104);
    v8 = *(_QWORD *)(a1 + 112);
    if (((~WORD1(v8) & v6) == 0) != a2)
    {
      v9 = *v7;
      *((_QWORD *)&v10 + 1) = *(unsigned int *)(a1 + 120);
      *(_QWORD *)&v10 = *(_QWORD *)(a1 + 112);
      v11 = v8 & 0x30000;
      v12 = (v8 & 0x30000) != 0;
      v13 = (v6 ^ 3) & (v10 >> 16);
      v14 = BYTE2(v10) & 3 | a3 & 3;
      if (!a2)
        v14 = v13;
      v15 = v8 & 0xFFFFFFFFFFFCFFFFLL | ((v14 & 3) << 16);
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 120);
      *v7 = v9;
      *(_QWORD *)(a1 + 112) = v15;
      if (v12 != (v14 != 0))
      {
        if (v11)
        {
          if ((v15 & 0x40000) == 0)
            -[UIView _backing_setHidden:](a1, 0);
          objc_msgSend(*(id *)(a1 + 168), "clearHasBeenCommitted");
          v16 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v16 & 0xFFFFFFFFFFFBFFFFLL;
          if ((v16 & 0x80000) != 0)
          {
            objc_msgSend((id)a1, "setNeedsLayout");
            *(_QWORD *)(a1 + 112) &= ~0x80000uLL;
          }
          if (qword_1EDDCA898 != -1)
            dispatch_once(&qword_1EDDCA898, &__block_literal_global_3347);
          if (byte_1EDDCA61D)
            -[UIView _updateTraitsIfNeededWithBehavior:](a1, 0);
        }
        else if (-[UIView _backing_isHidden](a1))
        {
          *(_QWORD *)(a1 + 112) |= 0x40000uLL;
        }
        else
        {
          -[UIView _backing_setHidden:](a1, 1);
        }
      }
    }
  }
}

- (void)_flushConstraintsPendingAnimatedChanges
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  UIView *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)qword_1EDDCA670, "objectForKey:", self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v8, "container");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v9)
        {
          -[UIView _layoutEngine](self, "_layoutEngine");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "_removeFromEngine:", v10);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v5);
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v11 = v3;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v20;
    do
    {
      for (j = 0; j != v13; ++j)
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * j);
        objc_msgSend(v16, "container", (_QWORD)v19);
        v17 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (v17 == self)
        {
          if (objc_msgSend(v16, "hasBeenLowered"))
          {
            objc_msgSend(v16, "_containerGeometryDidChange");
            objc_msgSend(v16, "priority");
            objc_msgSend(v16, "setPriority:");
          }
          else
          {
            -[UIView _layoutEngine](self, "_layoutEngine");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "_addToEngine:", v18);

          }
        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    }
    while (v13);
  }

  objc_msgSend((id)qword_1EDDCA670, "removeObjectForKey:", self);
}

- (void)_addConstraintPendingAnimatedChanges:(id)a3
{
  id v4;
  _BOOL4 v5;
  id v6;

  v4 = a3;
  if (v4)
  {
    v6 = v4;
    v5 = +[UIView _isInAnimationBlock](UIView, "_isInAnimationBlock");
    v4 = v6;
    if (v5)
    {
      +[UIViewAnimationState _addConstraintPendingAnimation:container:](UIViewAnimationState, "_addConstraintPendingAnimation:container:", v6, self);
      v4 = v6;
    }
  }

}

- (id)_contentWidthVariable
{
  return 0;
}

- (id)_contentHeightVariable
{
  return 0;
}

- (id)_contentXOffsetVariable
{
  return 0;
}

- (id)_contentYOffsetVariable
{
  return 0;
}

- (_QWORD)_stashedLayoutVariableObservationsCreateIfNecessary
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = (void *)a1[31];
    if (!v2)
    {
      v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 512, 0, 4);
      v4 = (void *)v1[31];
      v1[31] = v3;

      v2 = (void *)v1[31];
    }
    a1 = v2;
  }
  return a1;
}

- (id)nsli_contentWidthVariable
{
  return 0;
}

- (id)nsli_contentHeightVariable
{
  return 0;
}

- (id)nsli_contentXOffsetVariable
{
  return 0;
}

- (id)nsli_contentYOffsetVariable
{
  return 0;
}

- (void)_performChangesDeferringAutoresizingMaskConstraintsUpdate:(_QWORD *)a1
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void (**v15)(void);

  v15 = a2;
  if (a1)
  {
    if (-[UIView _usesAutoresizingConstraints]((uint64_t)a1))
    {
      objc_msgSend(a1, "frame");
      v4 = v3;
      v6 = v5;
      v8 = v7;
      v10 = v9;
      a1[14] |= 0x4000uLL;
      v15[2]();
      a1[14] &= ~0x4000uLL;
      objc_msgSend(a1, "frame");
      if ((_UIRectEquivalentToRectWithAccuracy(v4, v6, v8, v10, v11, v12, v13, v14, 0.00000011920929) & 1) == 0)
        -[UIView _constraints_frameDidChange]((uint64_t)a1);
    }
    else
    {
      v15[2]();
    }
  }

}

- (void)_parameterCheckForSystemSpacingBelowView:(_QWORD *)a3 getTopBaselineView:(_QWORD *)a4 bottomBaselineView:
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  id v15;

  v7 = a2;
  if (!a1)
    goto LABEL_19;
  v15 = v7;
  if (v7)
  {
    if (v7 != a1)
    {
      if (a3)
        goto LABEL_5;
      goto LABEL_14;
    }
    v12 = CFSTR("Can't get spacing between a view and itself");
  }
  else
  {
    v12 = CFSTR("Other view must not be nil");
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Invalid view parameter: %@"), v12);
  v7 = v15;
  if (a3)
  {
LABEL_5:
    -[UIView _deepestViewForBaselineLayoutUsingFirstBaseline:](v7, 0);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8 != v15)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", sel__parameterCheckForSystemSpacingBelowView_getTopBaselineView_bottomBaselineView_, a1, CFSTR("UIView.m"), 3951, CFSTR("rdar://104043151 (-_systemSpacingBelowView: does not support views that don't return self from -viewForFirst/LastBaselineLayout)"));

    }
    v9 = objc_retainAutorelease(v8);
    *a3 = v9;
    if (a4)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  v9 = 0;
  if (a4)
  {
LABEL_8:
    -[UIView _deepestViewForBaselineLayoutUsingFirstBaseline:](a1, 1);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (v10 != a1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", sel__parameterCheckForSystemSpacingBelowView_getTopBaselineView_bottomBaselineView_, a1, CFSTR("UIView.m"), 3956, CFSTR("rdar://104043151 (-_systemSpacingBelowView: does not support views that don't return self from -viewForFirst/LastBaselineLayout)"));

    }
    v11 = objc_retainAutorelease(v10);
    *a4 = v11;
    goto LABEL_16;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (v9 == v11)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Invalid view parameter: first-baselineView for %@ is the same as last-baselineView for %@"), a1, v15);

  v7 = v15;
LABEL_19:

}

- (double)_systemSpacingBelowView:(id)a3 systemSpacingInvalidationRecorder:(id *)a4
{
  _QWORD *v5;
  _QWORD *v6;
  _UIViewSystemSpacingInvalidationRecorder *v7;
  _UIViewSystemSpacingInvalidationRecorder *v8;
  double v9;
  id v11;
  id v12;

  v11 = 0;
  v12 = 0;
  -[UIView _parameterCheckForSystemSpacingBelowView:getTopBaselineView:bottomBaselineView:](self, a3, &v12, &v11);
  v5 = v12;
  v6 = v11;
  if (a4)
  {
    v7 = -[_UIViewSystemSpacingInvalidationRecorder initWithTopView:bottomView:]([_UIViewSystemSpacingInvalidationRecorder alloc], "initWithTopView:bottomView:", v5, v6);
    -[UIView _addGeometryChangeObserver:](v5, v7);
    -[UIView _addGeometryChangeObserver:](v6, v7);
    v8 = objc_retainAutorelease(v7);
    *a4 = v8;

  }
  v9 = _calculatedSystemSpacing(v5, v6);

  return v9;
}

- (double)_systemSpacingBelowView:(id)a3 multiplier:(double)a4
{
  id v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  double v11;
  double v12;
  id v14;
  id v15;

  v6 = a3;
  if (a4 <= 0.0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("The multiplier parameter must be greater than 0"));
  v14 = 0;
  v15 = 0;
  -[UIView _parameterCheckForSystemSpacingBelowView:getTopBaselineView:bottomBaselineView:](self, v6, &v15, &v14);
  v7 = v15;
  v8 = v14;
  if (objc_msgSend(v7, "_hasFontInfoForVerticalBaselineSpacing"))
    v9 = 2;
  else
    v9 = 0;
  v7[30] = v7[30] & 0xFFFFFFFD | v9;
  if (objc_msgSend(v8, "_hasFontInfoForVerticalBaselineSpacing"))
    v10 = 2;
  else
    v10 = 0;
  v8[30] = v8[30] & 0xFFFFFFFD | v10;
  _calculatedSystemSpacing(v7, v8);

  UICeilToViewScale(self);
  v12 = v11;

  return v12;
}

+ (void)_removeHierarchyTrackingVisitor:(id)a3
{
  +[_UIViewVisitor _removeHierarchyTrackingVisitor:](_UIViewVisitor, "_removeHierarchyTrackingVisitor:", a3);
}

- (void)_setShouldArchiveUIAppearanceTags:(BOOL)a3
{
  int v3;

  if (a3)
    v3 = 0x10000000;
  else
    v3 = 0;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xEFFFFFFF | v3;
}

- (BOOL)_shouldArchiveUIAppearanceTags
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 28) & 1;
}

+ (id)appearanceWhenContainedIn:(Class)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v8;

  if (a3)
  {
    _UIInternalContainerClassesForContainerClasses(a3, &v8, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  if (v4)
    v5 = v4;
  else
    v5 = (void *)MEMORY[0x1E0C9AA60];
  objc_msgSend(a1, "_appearanceWhenContainedIn:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

+ (id)appearanceForTraitCollection:(id)a3
{
  return +[_UITraitBasedAppearance _appearanceForTraitCollection:forClass:withContainerList:](_UITraitBasedAppearance, "_appearanceForTraitCollection:forClass:withContainerList:", a3, a1, MEMORY[0x1E0C9AA60]);
}

+ (id)appearanceForTraitCollection:(id)a3 whenContainedInInstancesOfClasses:(id)a4
{
  id v6;
  void *v7;
  void *v8;

  v6 = a3;
  _UIInternalContainerClassArrayForContainerClassArray(a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[_UITraitBasedAppearance _appearanceForTraitCollection:forClass:withContainerList:](_UITraitBasedAppearance, "_appearanceForTraitCollection:forClass:withContainerList:", v6, a1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

+ (id)appearanceForTraitCollection:(id)a3 whenContainedIn:(Class)a4
{
  id v6;
  Class v7;
  void *v8;
  void *v10;

  v6 = a3;
  if (a4)
  {
    _UIInternalContainerClassesForContainerClasses(a4, &v10, 0);
    a4 = (Class)objc_claimAutoreleasedReturnValue();
  }
  if (a4)
    v7 = a4;
  else
    v7 = (Class)MEMORY[0x1E0C9AA60];
  +[_UITraitBasedAppearance _appearanceForTraitCollection:forClass:withContainerList:](_UITraitBasedAppearance, "_appearanceForTraitCollection:forClass:withContainerList:", v6, a1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

+ (void)_performForcedAppearanceModifications:(id)a3
{
  void (**v3)(void);
  int v4;

  v3 = (void (**)(void))a3;
  v4 = __isObjectTaggingEnabled;
  __isObjectTaggingEnabled = 0;
  v3[2]();

  if (v4 == 1)
    __isObjectTaggingEnabled = 1;
}

- (void)_setTraitStorageSubviews:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  UIView *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v4);
  -[UIView subviews](self, "subviews");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        if ((objc_msgSend(v5, "containsObject:", v13) & 1) == 0)
          objc_msgSend(v13, "removeFromSuperview");
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v10);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v14 = v4;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v22;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v22 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
        objc_msgSend(v19, "superview", (_QWORD)v21);
        v20 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (v20 == self)
          -[UIView bringSubviewToFront:](self, "bringSubviewToFront:", v19);
        else
          -[UIView addSubview:](self, "addSubview:", v19);
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    }
    while (v16);
  }

}

uint64_t (*__36__UIView__autogeneratedNameForLayer__block_invoke())(_QWORD, _QWORD)
{
  uint64_t (*result)(_QWORD, _QWORD);

  qword_1EDDCA688 = (uint64_t)sel_description;
  result = (uint64_t (*)(_QWORD, _QWORD))objc_msgSend(MEMORY[0x1E0DE7910], "instanceMethodForSelector:");
  qword_1EDDCA690 = result;
  return result;
}

- (void)encodeWithCoder:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  UIViewContentMode v21;
  CALayer *v22;
  BOOL v23;
  CALayer *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  double v46;
  double v47;
  double DefaultLayoutMargins;
  double v49;
  unint64_t v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[48];
  CGAffineTransform v73;
  _BYTE v74[128];
  _BYTE v75[128];
  uint64_t v76;
  CGRect v77;
  CGRect v78;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[_UIAppearance _applyInvocationsTo:window:matchingSelector:onlySystemInvocations:](_UIAppearance, "_applyInvocationsTo:window:matchingSelector:onlySystemInvocations:", self, 0, 0, 1);
  -[UIView _encodeFrameWithCoder:](self, "_encodeFrameWithCoder:", v4);
  -[UIView transform](self, "transform");
  if (!CGAffineTransformIsIdentity(&v73))
  {
    -[UIView transform](self, "transform");
    objc_msgSend(v4, "encodeCGAffineTransform:forKey:", v72, CFSTR("UITransform"));
  }
  -[UIView subviews](self, "subviews");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v7 = objc_alloc(MEMORY[0x1E0C99E20]);
    -[UIView subviews](self, "subviews");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v7, "initWithCapacity:", objc_msgSend(v8, "count"));

    -[UIView _populateArchivedSubviews:](self, "_populateArchivedSubviews:", v9);
    if (objc_msgSend(v9, "count"))
    {
      -[UIView _encodableSubviews](self, "_encodableSubviews");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      UIArrayByKeepingObjectsInSet(v10, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v11, CFSTR("UISubviews"));

    }
  }
  -[UIView _encodeBackgroundColorWithCoder:](self, "_encodeBackgroundColorWithCoder:", v4);
  if (-[UIView wantsDeepColorDrawing](self, "wantsDeepColorDrawing"))
    objc_msgSend(v4, "encodeBool:forKey:", -[UIView wantsDeepColorDrawing](self, "wantsDeepColorDrawing"), CFSTR("UIDeepDrawRect"));
  -[UIView hitTestDirectionalInsets](self, "hitTestDirectionalInsets");
  if (v15 != 0.0 || v12 != 0.0 || v14 != 0.0 || v13 != 0.0)
  {
    -[UIView hitTestDirectionalInsets](self, "hitTestDirectionalInsets");
    objc_msgSend(v4, "encodeDirectionalEdgeInsets:forKey:", CFSTR("UIHitTestDirectionalInsets"));
  }
  if (-[UIView isOpaque](self, "isOpaque"))
    objc_msgSend(v4, "encodeBool:forKey:", -[UIView isOpaque](self, "isOpaque"), CFSTR("UIOpaque"));
  if (-[UIView isHidden](self, "isHidden"))
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIHidden"));
  p_viewFlags = &self->_viewFlags;
  if ((*((_BYTE *)&self->_viewFlags + 20) & 8) != 0)
  {
    v17 = _tagForView(self);
    if (v17)
      objc_msgSend(v4, "encodeInteger:forKey:", v17, CFSTR("UITag"));
  }
  v18 = *(_QWORD *)p_viewFlags;
  if ((*(_QWORD *)p_viewFlags & 2) != 0)
  {
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIUserInteractionDisabled"));
    v18 = *(_QWORD *)p_viewFlags;
  }
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x40000) != 0)
  {
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIFocusInteractionDisabled"));
    v18 = *(_QWORD *)p_viewFlags;
    if ((*(_QWORD *)p_viewFlags & 0x20000000) == 0)
    {
LABEL_25:
      if ((v18 & 0x40000000) == 0)
        goto LABEL_26;
      goto LABEL_103;
    }
  }
  else if ((v18 & 0x20000000) == 0)
  {
    goto LABEL_25;
  }
  objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIMultipleTouchEnabled"));
  v18 = *(_QWORD *)p_viewFlags;
  if ((*(_QWORD *)p_viewFlags & 0x40000000) == 0)
  {
LABEL_26:
    if ((v18 & 0x20000) != 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_103:
  objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIExclusiveTouch"));
  v18 = *(_QWORD *)p_viewFlags;
  if ((*(_QWORD *)p_viewFlags & 0x20000) == 0)
  {
LABEL_27:
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIAutoresizeSubviews"));
    v18 = *(_QWORD *)p_viewFlags;
  }
LABEL_28:
  v19 = (v18 >> 18) & 0x3F;
  if (v19)
    objc_msgSend(v4, "encodeInteger:forKey:", v19, CFSTR("UIAutoresizingMask"));
  -[UIView alpha](self, "alpha");
  if (v20 < 1.0)
  {
    *(float *)&v20 = v20;
    objc_msgSend(v4, "encodeFloat:forKey:", CFSTR("UIAlpha"), v20);
  }
  if (!-[UIView clearsContextBeforeDrawing](self, "clearsContextBeforeDrawing"))
    objc_msgSend(v4, "encodeBool:forKey:", 0, CFSTR("UIClearsContextBeforeDrawing"));
  v21 = -[UIView contentMode](self, "contentMode");
  if (v21)
    objc_msgSend(v4, "encodeInteger:forKey:", v21, CFSTR("UIContentMode"));
  v22 = self->_layer;
  -[CALayer contentsCenter](v22, "contentsCenter");
  v78.origin.x = 0.0;
  v78.origin.y = 0.0;
  v78.size.width = 1.0;
  v78.size.height = 1.0;
  v23 = CGRectEqualToRect(v77, v78);

  if (!v23)
  {
    v24 = self->_layer;
    -[CALayer contentsCenter](v24, "contentsCenter");
    objc_msgSend(v4, "encodeCGRect:forKey:", CFSTR("UIContentStretch"));

  }
  if (-[UIView clipsToBounds](self, "clipsToBounds"))
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIClipsToBounds"));
  _UIViewGetInteractionTintColor(self);
  v25 = objc_claimAutoreleasedReturnValue();
  if (v25)
  {
    -[UIView _tintColorArchivingKey](self, "_tintColorArchivingKey");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v25, v26);

  }
  if (!-[UIView translatesAutoresizingMaskIntoConstraints](self, "translatesAutoresizingMaskIntoConstraints", v25))
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIViewDoesNotTranslateAutoresizingMaskIntoConstraints"));
  _UIViewConstraints(self);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v29 = v27;
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v68, v75, 16);
  if (v30)
  {
    v31 = v30;
    v32 = *(_QWORD *)v69;
    do
    {
      for (i = 0; i != v31; ++i)
      {
        if (*(_QWORD *)v69 != v32)
          objc_enumerationMutation(v29);
        v34 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
        if (objc_msgSend(v34, "shouldBeArchived"))
          objc_msgSend(v28, "addObject:", v34);
      }
      v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v68, v75, 16);
    }
    while (v31);
  }

  if (objc_msgSend(v28, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", v28, CFSTR("UIViewAutolayoutConstraints"));
  v35 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  -[UIView layoutGuides](self, "layoutGuides");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
  if (v37)
  {
    v38 = v37;
    v39 = *(_QWORD *)v65;
    do
    {
      for (j = 0; j != v38; ++j)
      {
        if (*(_QWORD *)v65 != v39)
          objc_enumerationMutation(v36);
        v41 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * j);
        if (objc_msgSend(v41, "_shouldBeArchived"))
          objc_msgSend(v35, "addObject:", v41);
      }
      v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
    }
    while (v38);
  }

  if (objc_msgSend(v35, "count"))
    objc_msgSend(v4, "encodeObject:forKey:", v35, CFSTR("UIViewLayoutGuides"));
  if (self)
  {
    v42 = objc_getAssociatedObject(self, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey);
    v43 = v42;
    if (v42)
    {
      objc_msgSend(v42, "sizeValue");
      objc_msgSend(v4, "encodeSize:forKey:", CFSTR("UIViewContentHuggingPriority"));
    }
    v44 = objc_getAssociatedObject(self, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey);
    v45 = v44;
    if (v44)
    {
      objc_msgSend(v44, "sizeValue");
      objc_msgSend(v4, "encodeSize:forKey:", CFSTR("UIViewContentCompressionResistancePriority"));
    }
  }
  else
  {
    v45 = 0;
    v43 = 0;
  }
  DefaultLayoutMargins = _UIViewGetDefaultLayoutMargins();
  if (v49 != self->_rawLayoutMargins.left
    || DefaultLayoutMargins != self->_rawLayoutMargins.top
    || v47 != self->_rawLayoutMargins.right
    || v46 != self->_rawLayoutMargins.bottom)
  {
    objc_msgSend(v4, "encodeUIEdgeInsets:forKey:", CFSTR("UIViewLayoutMargins"));
  }
  if (-[UIView layoutMarginsFollowReadableWidth](self, "layoutMarginsFollowReadableWidth"))
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIViewLayoutMarginsFollowReadableWidth"));
  v53 = *((_QWORD *)&self->_viewFlags + 1);
  if ((v53 & 0x1E0000000000000) != 0)
  {
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIViewPreservesSuperviewMargins"));
    *((_QWORD *)&v54 + 1) = *((unsigned int *)&self->_viewFlags + 4);
    *(_QWORD *)&v54 = *((_QWORD *)&self->_viewFlags + 1);
    objc_msgSend(v4, "encodeInteger:forKey:", (unint64_t)(v54 >> 53) & 0xF, CFSTR("UIViewPreservesSpecificSuperviewMargins"));
    v53 = *((_QWORD *)&self->_viewFlags + 1);
  }
  v55 = *((_DWORD *)&self->_viewFlags + 4);
  if ((v55 & 0x400) != 0)
  {
    objc_msgSend(v4, "encodeBool:forKey:", 1, CFSTR("UIViewLayoutMarginsAreDirectional"));
    v53 = *((_QWORD *)&self->_viewFlags + 1);
    v55 = *((_DWORD *)&self->_viewFlags + 4);
  }
  v56 = (v53 >> 57) & 0xF;
  if (v56 != 15)
  {
    objc_msgSend(v4, "encodeInteger:forKey:", v56, CFSTR("UIViewInsetsLayoutMarginsFromSafeArea"));
    v55 = *((_DWORD *)&self->_viewFlags + 4);
  }
  if ((v55 & 0x10000000) != 0)
  {
    objc_getAssociatedObject(self, &_UIAppearanceCustomizedSelectorsAssociationKey);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    if (v57)
      objc_msgSend(v4, "encodeObject:forKey:", v57, 0x1E172F620);

  }
  -[UIResponder restorationIdentifier](self, "restorationIdentifier");
  v58 = (void *)objc_claimAutoreleasedReturnValue();

  if (v58)
  {
    -[UIResponder restorationIdentifier](self, "restorationIdentifier");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v59, CFSTR("UIRestorationIdentifier"));

  }
  objc_msgSend(v4, "encodeInteger:forKey:", (*(_QWORD *)((char *)&self->_viewFlags + 20) >> 14) & 7, CFSTR("UIViewSemanticContentAttribute"));
  -[UIView _previewingSegueTemplateStorage](self, "_previewingSegueTemplateStorage");
  v60 = (void *)objc_claimAutoreleasedReturnValue();

  if (v60)
  {
    -[UIView _previewingSegueTemplateStorage](self, "_previewingSegueTemplateStorage");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v61, CFSTR("UIViewPreviewingSegueTemplateStorage"));

  }
  -[UIView _encodeLargeContentViewerPropertiesWithCoder:](self, "_encodeLargeContentViewerPropertiesWithCoder:", v4);
  if (-[UIView overrideUserInterfaceStyle](self, "overrideUserInterfaceStyle"))
  {
    +[UITraitCollection traitCollectionWithUserInterfaceStyle:](UITraitCollection, "traitCollectionWithUserInterfaceStyle:", -[UIView overrideUserInterfaceStyle](self, "overrideUserInterfaceStyle"));
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v62, CFSTR("UIViewLocalOverrideTraitCollection"));

  }
}

- (uint64_t)_removeAllGestureRecognizers
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v1 = result;
  result = objc_msgSend(*(id *)(result + 88), "count");
  if (!result)
    return result;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(v1 + 88);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v7, "setView:", 0, (_QWORD)v14);
        objc_msgSend((id)UIApp, "_gestureEnvironment");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "removeGestureRecognizer:", v7);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

  v9 = *(void **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = MEMORY[0x1E0C9AA60];

  result = (uint64_t)(id)objc_msgSend((id)v1, "_window");
  v10 = result;
  v11 = *(_QWORD *)(v1 + 104) & 0x5000;
  v12 = v11 != 0;
  if (v11 != 4096)
  {
    v13 = 0;
    if (!result)
      return result;
    goto LABEL_16;
  }
  if (qword_1EDDCA8B8 != -1)
    dispatch_once(&qword_1EDDCA8B8, &__block_literal_global_3390);
  result = objc_opt_isKindOfClass();
  v13 = result ^ 1;
  v12 = 1;
  if (v10)
  {
LABEL_16:
    if (((v13 | !v12) & 1) != 0)
      return objc_msgSend((id)objc_msgSend((id)UIApp, "_touchesEventForWindow:", v10), "_invalidateGestureRecognizerForWindowCache");
  }
  return result;
}

+ (void)_setupViewVisualization
{
  objc_class *v0;
  objc_method *InstanceMethod;
  objc_class *v2;
  objc_method *v3;

  objc_opt_self();
  v0 = (objc_class *)objc_opt_class();
  InstanceMethod = class_getInstanceMethod(v0, sel_layoutSublayersOfLayer_);
  v2 = (objc_class *)objc_opt_class();
  v3 = class_getInstanceMethod(v2, sel___vis_layoutSublayersOfLayer_);
  method_exchangeImplementations(InstanceMethod, v3);
}

- (void)_setChargeEnabled:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x800000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFF7FFFFFFFFLL | v3;
}

- (BOOL)_isChargeEnabled
{
  return (*(_QWORD *)&self->_viewFlags & 0x800000000) != 0 || -[UIView isEnabled](self, "isEnabled");
}

- (id)_textServicesResponderProxy
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *i;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[UIView interactions](self, "interactions", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v6, "responder");
          v3 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
      }
      v3 = (void *)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

- (int64_t)focusItemDeferralMode
{
  if (!-[UIView conformsToProtocol:](self, "conformsToProtocol:", &unk_1EDE22370))
    return 0;
  if (-[UIView isFirstResponder](self, "isFirstResponder"))
    return 2;
  return 1;
}

- (BOOL)_wantsKeyCommandsWhenDeferred
{
  return 0;
}

- (id)_defaultFocusEffect
{
  return +[UIFocusEffect effect](UIFocusEffect, "effect");
}

- (UIFocusEffect)focusEffect
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  int v3;
  void *v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  p_viewFlags = &self->_viewFlags;
  v3 = (*((_DWORD *)&self->_viewFlags + 5) >> 26) & 3;
  if (v3 == 2)
  {
    objc_getAssociatedObject(self, &FocusEffectKey);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    return (UIFocusEffect *)v4;
  }
  if (v3 == 1)
  {
LABEL_11:
    v4 = 0;
    return (UIFocusEffect *)v4;
  }
  if (v3)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        v10 = (*((_DWORD *)p_viewFlags + 5) >> 26) & 3;
        v11 = 67109120;
        v12 = v10;
        _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "Unknown case for _viewFlags.hasFocusEffect (%d).", (uint8_t *)&v11, 8u);
      }

    }
    else
    {
      v5 = focusEffect___s_category;
      if (!focusEffect___s_category)
      {
        v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&focusEffect___s_category);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (*((_DWORD *)p_viewFlags + 5) >> 26) & 3;
        v11 = 67109120;
        v12 = v7;
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Unknown case for _viewFlags.hasFocusEffect (%d).", (uint8_t *)&v11, 8u);
      }
    }
    goto LABEL_11;
  }
  -[UIView _defaultFocusEffect](self, "_defaultFocusEffect");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  return (UIFocusEffect *)v4;
}

- (BOOL)_shouldInformFocusAboutBecomingVisible
{
  void *v2;
  void *v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;

  -[UIView _window](self, "_window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "_isTextEffectsWindow") & 1) != 0
    || (objc_msgSend(v2, "windowScene"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "activationState"),
        v3,
        v4))
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v2, "windowScene");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_isPerformingSystemSnapshot");

    v5 = v7 ^ 1;
  }

  return v5;
}

- (BOOL)_canBecomeFirstResponderWhenPossible
{
  return (*(_QWORD *)&self->_viewFlags >> 11) & 1;
}

- (BOOL)cancelMouseTracking
{
  return (*(_QWORD *)&self->_viewFlags & 0x10) == 0;
}

- (BOOL)cancelTouchTracking
{
  return (*(_QWORD *)&self->_viewFlags & 0x10) == 0;
}

- (_QWORD)_hasTransparentBackground
{
  _QWORD *v1;
  uint64_t v2;
  CGColor *v3;
  CGColor *v4;

  if (result)
  {
    v1 = result;
    v2 = result[13];
    if ((v2 & 0x40) != 0)
    {
      v3 = (CGColor *)objc_msgSend(result, "_backgroundCGColor");
      if (v3)
      {
        v4 = v3;
        if (CGColorGetPattern(v3))
          return 0;
        return (_QWORD *)(CGColorGetAlpha(v4) == 0.0);
      }
      v2 = v1[13];
    }
    return (_QWORD *)((v2 & 0x400) == 0);
  }
  return result;
}

- (int64_t)compositingMode
{
  void *v2;
  id v3;
  int64_t v4;

  -[CALayer compositingFilter](self->_layer, "compositingFilter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v2, "type");
      v3 = (id)objc_claimAutoreleasedReturnValue();
      if (v3)
        goto LABEL_6;
    }
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  v3 = v2;
LABEL_6:
  v4 = _UICompositingModeForFilter(v3);

LABEL_8:
  return v4;
}

- (BOOL)_acceptsInauthenticTouches
{
  return 0;
}

- (BOOL)_layoutMarginsGuideIgnoresSystemMinimumMargins
{
  return 0;
}

- (unint64_t)edgesPreservingSuperviewLayoutMargins
{
  __int128 v2;

  *((_QWORD *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_viewFlags + 1);
  return (v2 >> 53) & 0xF;
}

- (void)_setIgnoresLayerTransformForSafeAreaInsets:(BOOL)a3
{
  int v3;

  if (a3)
    v3 = 0x800000;
  else
    v3 = 0;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFF7FFFFF | v3;
}

- (void)_recursiveEagerlyUpdateSafeAreaInsetsUntilViewController
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    objc_msgSend(a1, "_allSubviews", 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v9;
      do
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v9 != v4)
            objc_enumerationMutation(v1);
          v6 = *(id **)(*((_QWORD *)&v8 + 1) + 8 * i);
          -[UIView __viewDelegate](v6);
          v7 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v7)
          {
            objc_msgSend(v6, "_updateSafeAreaInsets");
            -[UIView _recursiveEagerlyUpdateSafeAreaInsetsUntilViewController](v6);
          }
        }
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v3);
    }

  }
}

- (id)_safeAreaLayoutGuideIfExists
{
  return self->_safeAreaLayoutGuide;
}

- (void)_clearSafeAreaInsets
{
  void *v3;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  int v8;
  UIView *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[UIView superview](self, "superview");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    -[UIView setSafeAreaInsets:](self, "setSafeAreaInsets:", 0.0, 0.0, 0.0, 0.0);
    return;
  }
  if (os_variant_has_internal_diagnostics())
  {
    __UIFaultDebugAssertLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      goto LABEL_8;
    -[UIView superview](self, "superview");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138412546;
    v9 = self;
    v10 = 2112;
    v11 = v7;
    _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, "_clearSafeAreaInsets ignored when superview is non-nil. self = %@, superview = %@", (uint8_t *)&v8, 0x16u);
LABEL_7:

LABEL_8:
    return;
  }
  v4 = _clearSafeAreaInsets___s_category;
  if (!_clearSafeAreaInsets___s_category)
  {
    v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v4, (unint64_t *)&_clearSafeAreaInsets___s_category);
  }
  v5 = *(NSObject **)(v4 + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = v5;
    -[UIView superview](self, "superview");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138412546;
    v9 = self;
    v10 = 2112;
    v11 = v7;
    _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "_clearSafeAreaInsets ignored when superview is non-nil. self = %@, superview = %@", (uint8_t *)&v8, 0x16u);
    goto LABEL_7;
  }
}

- (void)_setDontUpdateInferredLayoutMargins:(BOOL)a3
{
  int v3;

  if (a3)
    v3 = 512;
  else
    v3 = 0;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFDFF | v3;
}

- (BOOL)_dontUpdateInferredLayoutMargins
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 9) & 1;
}

- (void)_removeAllAnimationsIncludingSubviewsTrackingForAnimationRestoration
{
  char v2;

  *(_QWORD *)((char *)&self->_viewFlags + 20) |= 0x400000000uLL;
  v2 = __shouldTrackForAnimationRestoration;
  __shouldTrackForAnimationRestoration = 1;
  -[UIView _removeAllAnimations:](self, "_removeAllAnimations:", 1);
  __shouldTrackForAnimationRestoration = v2;
}

- (void)_finishTrackingForAnimationRestoration
{
  -[UIView _restoreRemovedAnimationsIncludingSubviews](self, "_restoreRemovedAnimationsIncludingSubviews");
  *(_QWORD *)((char *)&self->_viewFlags + 20) &= ~0x400000000uLL;
}

- (void)_restoreRemovedAnimationsIncludingSubviews
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  p_viewFlags = &self->_viewFlags;
  if ((*((_BYTE *)&self->_viewFlags + 24) & 2) != 0)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    -[UIView _allSubviews](self, "_allSubviews", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v7++), "_restoreRemovedAnimationsIncludingSubviews");
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v5);
    }

    *(_QWORD *)((char *)p_viewFlags + 20) &= ~0x200000000uLL;
  }
}

- (BOOL)_wantsAnimationRestoration
{
  return 0;
}

void __46__UIView_setLayoutMarginsFollowReadableWidth___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateInferredLayoutMargins");
    WeakRetained = v2;
  }

}

- (id)_layoutMarginsGuideIfExists
{
  return self->_layoutMarginsGuide;
}

- (unsigned)_secureName
{
  return 0;
}

- (BOOL)_fakeShouldAnimatePropertyWithKey:(id)a3
{
  return 0;
}

+ (void)_setAnimatedPropertiesEnabled:(BOOL)a3
{
  char v4;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __40__UIView__setAnimatedPropertiesEnabled___block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (qword_1EDDCA6E0 != -1)
    dispatch_once(&qword_1EDDCA6E0, block);
  v4 = byte_1EDDCA60A;
  if (byte_1EDDCA60A != 1)
  {
    if (a3)
      return;
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    method_exchangeImplementations((Method)qword_1EDDCA6D0, (Method)qword_1EDDCA6D8);
    byte_1EDDCA60A = v4 ^ 1;
  }
}

Method __40__UIView__setAnimatedPropertiesEnabled___block_invoke(uint64_t a1)
{
  Method result;

  qword_1EDDCA6D0 = (uint64_t)class_getInstanceMethod(*(Class *)(a1 + 32), sel__shouldAnimatePropertyWithKey_);
  result = class_getInstanceMethod(*(Class *)(a1 + 32), sel__fakeShouldAnimatePropertyWithKey_);
  qword_1EDDCA6D8 = (uint64_t)result;
  return result;
}

- (void)_invalidateAppearanceForTraitCollection:(id)a3
{
  id v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UIView traitCollection](self, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[UITraitCollection _containsTraitsInCollectionConsideringTraitsThatCanRepresentUnspecifiedOnly:]((uint64_t)v5, (uint64_t)v4);

  if (v6)
    -[UIView _invalidateAppearance](self, "_invalidateAppearance");
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[UIView _allSubviews](self, "_allSubviews", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "_invalidateAppearanceForTraitCollection:", v4);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v9);
  }

}

- (BOOL)_appearanceIsInvalid
{
  return (*(_QWORD *)&self->_viewFlags >> 41) & 1;
}

- (id)_extraInfoForTraitTrace
{
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x80) != 0)
    return 0;
  if (-[NSObject __isKindOfUIWindow](self, "__isKindOfUIWindow"))
    return 0;
  return CFSTR("pending traitCollection update");
}

- (id)_traitTrace:(id)a3
{
  return _UITraitTraceForTraitEnvironmentAndQueryString(self, a3);
}

- (id)_traitTrace
{
  return -[UIView _traitTrace:](self, "_traitTrace:", 0);
}

- (void)_collectExistingTraitCollectionsForTraitTracking:(id)a3
{
  void (**v4)(_QWORD);
  void (**v5)(_QWORD);

  v4 = (void (**)(_QWORD))a3;
  v5 = v4;
  if (self->_cachedTraitCollection)
  {
    v4[2](v4);
    v4 = v5;
  }
  if (self->__lastNotifiedTraitCollection)
  {
    v4[2](v5);
    v4 = v5;
  }

}

- (void)_recordTraitUsage:(unint64_t)a3 insideMethod:(const char *)a4 withInvalidationAction:
{
  _UITraitChangeRegistry *v8;
  void *v9;

  if (a1)
  {
    if (!a1[7])
    {
      if (_UITraitTokenSetCount(a2))
      {
        v8 = objc_alloc_init(_UITraitChangeRegistry);
        v9 = (void *)a1[7];
        a1[7] = (uint64_t)v8;

      }
    }
    -[_UITraitChangeRegistry recordTraitUsage:forTraitEnvironment:insideMethod:withInvalidationAction:](a1[7], a2, a1, a3, a4);
  }
}

- (void)_performSelectorTrackingTraitUsage:(SEL)a3 withInvalidationSelector:(SEL)a4
{
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _BYTE __dst[352];
  _BYTE v14[352];
  _OWORD __src[22];

  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 7063, CFSTR("%@ does not respond to action selector -%@"), self, v10);

  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 7064, CFSTR("%@ does not respond to invalidation selector -%@"), self, v12);

  }
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage(self, 0, __src);
  if (dyld_program_sdk_at_least())
    objc_msgSend(self, a3);
  else
    -[UIView performSelector:](self, sel_performSelector_, a3);
  memcpy(__dst, __src, sizeof(__dst));
  v8 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v14, v8, sizeof(v14));
  memcpy(v8, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)self, (uint64_t)&v14[136], -[UIView methodForSelector:](self, "methodForSelector:", a3), a4);
  _UITraitUsageTrackingResultDestroy((uint64_t)v14);
}

- (void)_registerAuxiliaryChildEnvironmentForTraitInvalidations:(id)a3
{
  id v4;
  _UITraitChangeRegistry *traitChangeRegistry;
  _UITraitChangeRegistry *v6;
  _UITraitChangeRegistry *v7;
  id v8;

  v4 = a3;
  traitChangeRegistry = self->_traitChangeRegistry;
  v8 = v4;
  if (!traitChangeRegistry)
  {
    v6 = objc_alloc_init(_UITraitChangeRegistry);
    v7 = self->_traitChangeRegistry;
    self->_traitChangeRegistry = v6;

    v4 = v8;
    traitChangeRegistry = self->_traitChangeRegistry;
  }
  -[_UITraitChangeRegistry registerAuxiliaryChildEnvironmentForTraitInvalidations:]((uint64_t)traitChangeRegistry, v4);

}

- (void)_unregisterAuxiliaryChildEnvironmentForTraitInvalidations:(id)a3
{
  -[_UITraitChangeRegistry unregisterAuxiliaryChildEnvironmentForTraitInvalidations:]((uint64_t)self->_traitChangeRegistry, a3);
}

- (void)_processDidChangeRecursivelyFromOldTraits:(id)a3 toCurrentTraits:(id)a4 forceNotification:(BOOL)a5
{

}

- (void)_updateDynamicBackgroundColor
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  CGColor *v5;
  CGColor *v6;
  CGColor *AssociatedObject;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  char *v21;
  _BYTE v22[352];
  _BYTE __dst[352];
  _OWORD __src[22];

  p_viewFlags = &self->_viewFlags;
  if ((*((_BYTE *)&self->_viewFlags + 22) & 2) != 0)
  {
    v5 = -[UIView _backgroundCGColor](self, "_backgroundCGColor");
    if (v5)
    {
      v6 = v5;
      AssociatedObject = (CGColor *)objc_getAssociatedObject(self, &unk_1EDDCA61F);
      if (!CGColorEqualToColor(AssociatedObject, v6))
      {
        objc_setAssociatedObject(self, &unk_1EDDCA620, 0, (void *)1);
        objc_setAssociatedObject(self, &unk_1EDDCA61F, 0, (void *)1);
        *(_QWORD *)((char *)p_viewFlags + 20) &= ~0x20000uLL;
        _UIViewSetBackgroundColorSystemColorName(self, 0);
      }
    }
  }
  if ((*((_BYTE *)p_viewFlags + 22) & 2) != 0)
  {
    memset(__src, 0, sizeof(__src));
    _UIBeginTrackingTraitUsage(self, 0, __src);
    objc_getAssociatedObject(self, &unk_1EDDCA620);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if ((*((_BYTE *)p_viewFlags + 22) & 8) != 0)
    {
      v12 = (void *)objc_msgSend(objc_retainAutorelease(v8), "CGColor");
    }
    else
    {
      -[UIView traitCollection](self, "traitCollection");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIColor _resolvedBackgroundColorWithTraitCollection:](v9, v10);
      v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v12 = (void *)objc_msgSend(v11, "CGColor");

    }
    if ((*((_BYTE *)p_viewFlags + 24) & 0x20) != 0)
    {
      -[UIView traitCollection](self, "traitCollection");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (_UILightWeightMaterialsEnabled(objc_msgSend(v13, "userInterfaceIdiom")))
      {
        objc_msgSend(v13, "traitCollectionByModifyingTraits:", &__block_literal_global_941);
        v14 = objc_claimAutoreleasedReturnValue();

        v13 = (void *)v14;
      }
      objc_msgSend(v9, "_resolvedMaterialWithTraitCollection:", v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "backgroundEffects");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "contentEffects");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "arrayByAddingObjectsFromArray:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView mt_setBackgroundEffects:](self, "mt_setBackgroundEffects:", v18);

      if (v15)
      {
        -[UIView _nilBackgroundColor](self, "_nilBackgroundColor");
        v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v12 = (void *)objc_msgSend(v19, "CGColor");

      }
    }
    else
    {
      -[UIView mt_setBackgroundEffects:](self, "mt_setBackgroundEffects:", 0);
    }
    objc_setAssociatedObject(self, &unk_1EDDCA61F, v12, (void *)1);
    objc_msgSend(v9, "_systemColorName");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _setBackgroundCGColor:withSystemColorName:]((uint64_t)self, (CGColor *)v12, v20);

    memcpy(v22, __src, sizeof(v22));
    v21 = (char *)GetTraitCollectionTSD() + 16;
    memcpy(__dst, v21, sizeof(__dst));
    memcpy(v21, v22, 0x160uLL);
    -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((uint64_t *)self, (uint64_t)&__dst[136], -[UIView methodForSelector:](self, "methodForSelector:", a2), sel__updateDynamicBackgroundColor);
    _UITraitUsageTrackingResultDestroy((uint64_t)__dst);

  }
}

void __39__UIView__updateDynamicBackgroundColor__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  objc_opt_self();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNSIntegerValue:forTrait:", 2, v3);

}

- (BOOL)_overrideTintColorAutomaticallyOverridesTintColor
{
  return 1;
}

- (id)__undimmedTintColor
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[5];

  if (!a1)
    return 0;
  objc_msgSend(a1, "_normalInheritedTintColor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[UIView __accessibilityUndimmedTintColorHighContrastVariantStorageKey](a1);
  if (v3)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __29__UIView___undimmedTintColor__block_invoke;
    v6[3] = &unk_1E16EB3B8;
    v6[4] = a1;
    -[UIView _variantOfColor:forKey:withCreationBlock:](a1, v2, v3, v6);
    v4 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v4;
  }
  return v2;
}

uint64_t __29__UIView___undimmedTintColor__block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessibilityHigherContrastTintColorForColor:", a2);
}

- (void)_endOcclusion:(id)a3
{
  int has_internal_diagnostics;
  unsigned __int16 tintAdjustmentDimmingCount;
  unsigned __int16 v6;
  void *v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  has_internal_diagnostics = os_variant_has_internal_diagnostics();
  tintAdjustmentDimmingCount = self->_tintAdjustmentDimmingCount;
  if (has_internal_diagnostics)
  {
    if (self->_tintAdjustmentDimmingCount)
      goto LABEL_3;
    __UIFaultDebugAssertLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_185066000, v8, OS_LOG_TYPE_FAULT, "UIKit Internal bug: Unbalanced call to _endOcclusion, please file a feedback report with any information you have that helps reproduce this bug!", buf, 2u);
    }

  }
  else
  {
    if (self->_tintAdjustmentDimmingCount)
      goto LABEL_3;
    v9 = _endOcclusion____s_category;
    if (!_endOcclusion____s_category)
    {
      v9 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
      atomic_store(v9, (unint64_t *)&_endOcclusion____s_category);
    }
    v10 = *(NSObject **)(v9 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_185066000, v10, OS_LOG_TYPE_ERROR, "UIKit Internal bug: Unbalanced call to _endOcclusion, please file a feedback report with any information you have that helps reproduce this bug!", v11, 2u);
    }
  }
  tintAdjustmentDimmingCount = self->_tintAdjustmentDimmingCount;
  if (tintAdjustmentDimmingCount)
  {
LABEL_3:
    v6 = tintAdjustmentDimmingCount - 1;
    self->_tintAdjustmentDimmingCount = v6;
    if (v6)
      return;
  }
  if ((*((_QWORD *)&self->_viewFlags + 1) & 0x1800000000) == 0
    && -[UIView tintAdjustmentMode](self, "tintAdjustmentMode") != UIViewTintAdjustmentModeDimmed)
  {
    -[UIView _dispatchTintColorVisitorWithReasons:](self, 2);
    +[_UIHDRUsageCoordinator sharedInstance]();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_UIHDRUsageCoordinator enableHDRSuppression:inViewHierarchy:]((uint64_t)v7, 0, self);

  }
}

- (double)_textButtonMargin
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;

  if ((dyld_program_sdk_at_least() & 1) != 0)
  {
    -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      objc_msgSend(v3, "_contentMarginForView:", self);
      v6 = v5;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        -[UIView traitCollection](self, "traitCollection");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v7, "horizontalSizeClass") == 1)
        {
          -[UIView bounds](self, "bounds");
          v9 = v8;

          if (v9 <= 320.0)
            v6 = v6 + -8.0;
        }
        else
        {

        }
      }
    }
    else
    {
      v6 = 0.0;
    }

  }
  else
  {
    -[UIView traitCollection](self, "traitCollection");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIViewController _slimHorizontalContentMarginForTraitCollection:](UIViewController, "_slimHorizontalContentMarginForTraitCollection:", v10);
    v6 = v11;

    -[UIView bounds](self, "bounds");
    if (v12 < 480.0)
      return v6 + -8.0;
  }
  return v6;
}

- (void)_setDrawsAsBackdropOverlay:(BOOL)a3
{
  -[UIView _setDrawsAsBackdropOverlayWithBlendMode:](self, "_setDrawsAsBackdropOverlayWithBlendMode:", a3);
}

- (void)_setSafeMaskView:(void *)a1
{
  id v3;

  v3 = a2;
  if (a1)
  {
    if (dyld_program_sdk_at_least())
      objc_msgSend(a1, "setMaskView:", v3);
    else
      objc_msgSend(a1, "_setMaskView:", v3);
  }

}

- (id)_safeMaskView
{
  void *v1;

  if (a1)
  {
    v1 = a1;
    if (dyld_program_sdk_at_least())
      objc_msgSend(v1, "maskView");
    else
      objc_msgSend(v1, "_maskView");
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (id)_cornerCurve
{
  void *v2;
  void *v3;

  -[UIView layer](self, "layer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cornerCurve");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (int64_t)_backdropMaskViewFlags
{
  __int128 v2;

  *((_QWORD *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(_QWORD *)&v2 = *((_QWORD *)&self->_viewFlags + 1);
  return (v2 >> 25) & 0x1F;
}

- (void)_setBackdropMaskViewFlags:(int64_t)a3
{
  *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFC1FFFFFFLL | ((unint64_t)(a3 & 0x1F) << 25);
}

- (UIView)_backdropMaskViewForGrayscaleTint
{
  return (UIView *)objc_getAssociatedObject(self, &unk_1EDDCA60D);
}

- (UIView)_backdropMaskViewForColorTint
{
  return (UIView *)objc_getAssociatedObject(self, &unk_1EDDCA60E);
}

- (id)_backdropMaskViewForColorBurnTint
{
  if (a1)
  {
    objc_getAssociatedObject(a1, &unk_1EDDCA60F);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (id)_backdropMaskViewForDarkeningTint
{
  if (a1)
  {
    objc_getAssociatedObject(a1, &unk_1EDDCA610);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (UIView)_backdropMaskViewForFilters
{
  return (UIView *)objc_getAssociatedObject(self, &unk_1EDDCA611);
}

- (NSArray)_backdropMaskViews
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _backdropMaskViewForGrayscaleTint](self, "_backdropMaskViewForGrayscaleTint");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _backdropMaskViewForColorTint](self, "_backdropMaskViewForColorTint");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView _backdropMaskViewForFilters](self, "_backdropMaskViewForFilters");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(v3, "addObject:", v4);
  if (v5)
    objc_msgSend(v3, "addObject:", v5);
  if (v6)
    objc_msgSend(v3, "addObject:", v6);

  return (NSArray *)v3;
}

- (id)_generateBackdropMaskImage
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  int v11;
  void *v12;
  double v13;
  _QWORD *ContextStack;
  uint64_t v15;
  void *v16;
  void *v17;

  -[UIView bounds](self, "bounds");
  if (v3 <= 0.0 || (-[UIView bounds](self, "bounds"), v4 <= 0.0))
  {
    v16 = 0;
  }
  else
  {
    -[UIView alpha](self, "alpha");
    v6 = v5;
    -[UIView setAlpha:](self, "setAlpha:", 1.0);
    -[UIView bounds](self, "bounds");
    v8 = v7;
    v10 = v9;
    v11 = -[UIView isOpaque](self, "isOpaque");
    +[UIScreen mainScreen](UIScreen, "mainScreen");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "scale");
    _UIGraphicsBeginImageContextWithOptions(v11, 0, v8, v10, v13);

    ContextStack = GetContextStack(0);
    if (*(int *)ContextStack < 1)
      v15 = 0;
    else
      v15 = ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
    -[UIView layer](self, "layer");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "renderInContext:", v15);

    _UIGraphicsGetImageFromCurrentImageContext(0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    UIGraphicsEndImageContext();
    -[UIView setAlpha:](self, "setAlpha:", v6);
  }
  return v16;
}

- (id)_generateBackdropMaskViewForFlag:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  UIImageView *v8;
  UIView *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;

  if (-[UIView isHidden](self, "isHidden")
    || (-[UIView _backdropMaskViewFlags](self, "_backdropMaskViewFlags") & a3) == 0)
  {
    v8 = 0;
  }
  else
  {
    if (-[UIView isMemberOfClass:](self, "isMemberOfClass:", objc_opt_class())
      && (-[UIView subviews](self, "subviews"),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          v6 = objc_msgSend(v5, "count"),
          v5,
          !v6))
    {
      v9 = [UIView alloc];
      -[UIView frame](self, "frame");
      v8 = -[UIView initWithFrame:](v9, "initWithFrame:");
      +[UIColor blackColor](UIColor, "blackColor");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIImageView setBackgroundColor:](v8, "setBackgroundColor:", v7);
    }
    else
    {
      -[UIView _generateBackdropMaskImage](self, "_generateBackdropMaskImage");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        v8 = -[UIImageView initWithImage:]([UIImageView alloc], "initWithImage:", v7);
        -[UIImageView setContentMode:](v8, "setContentMode:", -[UIView contentMode](self, "contentMode"));
        -[UIView frame](self, "frame");
        -[UIImageView setFrame:](v8, "setFrame:");
      }
      else
      {
        v8 = 0;
      }
    }

    -[UIView layer](self, "layer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "cornerRadius");
    v12 = v11;
    -[UIView layer](v8, "layer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setCornerRadius:", v12);

  }
  -[UIView _setBackdropMaskView:forFlag:](self, "_setBackdropMaskView:forFlag:", v8, a3);
  return v8;
}

- (void)_setBackdropMaskView:(id)a3 forFlag:(int64_t)a4
{
  const void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id value;

  value = a3;
  switch(a4)
  {
    case 1:
      if (self)
      {
        v6 = &unk_1EDDCA60D;
        goto LABEL_13;
      }
      break;
    case 2:
      if (self)
      {
        v6 = &unk_1EDDCA60E;
        goto LABEL_13;
      }
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      if (self)
      {
        v6 = &unk_1EDDCA611;
        goto LABEL_13;
      }
      break;
    case 8:
      if (self)
      {
        v6 = &unk_1EDDCA60F;
        goto LABEL_13;
      }
      break;
    default:
      if (a4 == 16 && self)
      {
        v6 = &unk_1EDDCA610;
LABEL_13:
        objc_setAssociatedObject(self, v6, value, (void *)1);
      }
      break;
  }
  if (-[UIView isHidden](self, "isHidden"))
  {
    v7 = 0;
LABEL_18:
    *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v7 & 1) << 24);
    goto LABEL_19;
  }
  if (value)
  {
    v7 = 1;
    goto LABEL_18;
  }
  -[UIView _backdropMaskViewForGrayscaleTint](self, "_backdropMaskViewForGrayscaleTint");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    *((_QWORD *)&self->_viewFlags + 1) |= 0x1000000uLL;
  }
  else
  {
    -[UIView _backdropMaskViewForColorTint](self, "_backdropMaskViewForColorTint");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      *((_QWORD *)&self->_viewFlags + 1) |= 0x1000000uLL;
    }
    else
    {
      -[UIView _backdropMaskViewForColorBurnTint](self);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        *((_QWORD *)&self->_viewFlags + 1) |= 0x1000000uLL;
      }
      else
      {
        -[UIView _backdropMaskViewForDarkeningTint](self);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          *((_QWORD *)&self->_viewFlags + 1) |= 0x1000000uLL;
        }
        else
        {
          -[UIView _backdropMaskViewForFilters](self, "_backdropMaskViewForFilters");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v12 != 0) << 24);

        }
      }

    }
  }

LABEL_19:
}

- (id)_backdropMaskViewForFlag:(int64_t)a3
{
  void *v4;

  v4 = 0;
  switch(a3)
  {
    case 1:
      -[UIView _backdropMaskViewForGrayscaleTint](self, "_backdropMaskViewForGrayscaleTint");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      -[UIView _backdropMaskViewForColorTint](self, "_backdropMaskViewForColorTint");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return v4;
    case 4:
      -[UIView _backdropMaskViewForFilters](self, "_backdropMaskViewForFilters");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 8:
      -[UIView _backdropMaskViewForColorBurnTint](self);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      if (a3 == 16)
      {
        -[UIView _backdropMaskViewForDarkeningTint](self);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
      }
      break;
  }
  return v4;
}

- (void)_removeBackdropMaskViews
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[UIView _backdropMaskViewForGrayscaleTint](self, "_backdropMaskViewForGrayscaleTint");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeFromSuperview");

  -[UIView _backdropMaskViewForColorTint](self, "_backdropMaskViewForColorTint");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeFromSuperview");

  -[UIView _backdropMaskViewForColorBurnTint](self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeFromSuperview");

  -[UIView _backdropMaskViewForDarkeningTint](self);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeFromSuperview");

  -[UIView _backdropMaskViewForFilters](self, "_backdropMaskViewForFilters");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeFromSuperview");

}

- (id)_anyBackdropMaskView
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(a1, "_backdropMaskViewForGrayscaleTint");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v4 = v2;
  }
  else
  {
    objc_msgSend(a1, "_backdropMaskViewForColorTint");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      v7 = v5;
    }
    else
    {
      objc_msgSend(a1, "_backdropMaskViewForFilters");
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    v4 = v7;

  }
  return v4;
}

- (void)_setFrameForBackdropMaskViews:(double)a3 convertFrame:(double)a4
{
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;

  if (a1)
  {
    if (a2)
    {
      objc_msgSend(a1, "superview");
      v11 = objc_claimAutoreleasedReturnValue();
      if (v11)
      {
        v12 = (void *)v11;
        -[UIView _anyBackdropMaskView](a1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "superview");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          objc_msgSend(a1, "superview");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          -[UIView _anyBackdropMaskView](a1);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "superview");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "convertRect:toView:", v17, a3, a4, a5, a6);
          a3 = v18;
          a4 = v19;
          a5 = v20;
          a6 = v21;

        }
      }
    }
    objc_msgSend(a1, "_backdropMaskViewForGrayscaleTint");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setFrame:", a3, a4, a5, a6);

    objc_msgSend(a1, "_backdropMaskViewForColorTint");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setFrame:", a3, a4, a5, a6);

    -[UIView _backdropMaskViewForColorBurnTint](a1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setFrame:", a3, a4, a5, a6);

    -[UIView _backdropMaskViewForDarkeningTint](a1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setFrame:", a3, a4, a5, a6);

    objc_msgSend(a1, "_backdropMaskViewForFilters");
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setFrame:", a3, a4, a5, a6);

  }
}

+ (void)_updateOrientationForMotionEngine:(int64_t)a3
{
  objc_msgSend((id)_motionEffectEngine, "_setTargetInterfaceOrientation:", a3);
}

- (void)setMotionEffects:(NSArray *)motionEffects
{
  NSArray *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = motionEffects;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[UIView motionEffects](self, "motionEffects");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v21;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(v6);
        -[UIView removeMotionEffect:](self, "removeMotionEffect:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v10++));
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v8);
  }

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v11 = v4;
  v12 = -[NSArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v11);
        -[UIView addMotionEffect:](self, "addMotionEffect:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v15++), (_QWORD)v16);
      }
      while (v13 != v15);
      v13 = -[NSArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    }
    while (v13);
  }

}

- (BOOL)_motionEffectsAreSuspended
{
  return objc_msgSend((id)_motionEffectEngine, "_motionEffectsAreSuspendedForView:", self);
}

uint64_t __51__UIView__recursivelyConsiderResumingMotionEffects__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  double v3;
  uint64_t v4;

  v2 = a2;
  if ((objc_msgSend(v2, "isHidden") & 1) != 0 || (objc_msgSend(v2, "alpha"), v3 < 0.01))
  {
    v4 = 0;
  }
  else
  {
    if (v2)
      objc_msgSend((id)_motionEffectEngine, "endSuspendingMotionEffectsForView:", v2);
    v4 = 1;
  }

  return v4;
}

+ (void)_setShouldEnableUIKitParallaxEffects:(BOOL)a3
{
  _shouldEnableUIKitParallaxEffects();
  byte_1EDDCA612 = a3;
}

- (double)_convertVisualAltitude:(double)a3 fromView:(id)a4
{
  return _convertVisualAltitudeFromViewToView(a4, self, a3);
}

- (CGRect)_responderSelectionRectForWindow:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  v4 = a3;
  -[UIView bounds](self, "bounds");
  -[UIView convertRect:toView:](self, "convertRect:toView:", v4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  v13 = v6;
  v14 = v8;
  v15 = v10;
  v16 = v12;
  result.size.height = v16;
  result.size.width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

- (CGRect)_responderExternalTouchRectForWindow:(id)a3
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  if (a3)
    objc_msgSend(a3, "frame");
  else
    -[UIView bounds](self, "bounds");
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (double)_convertRect:(double)a3 toViewInSameWindow:(double)a4
{
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  id v15;
  double v16;
  double v17;
  void *v19;

  v11 = a2;
  v12 = v11;
  if (a1)
  {
    if (!v11)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "handleFailureInMethod:object:file:lineNumber:description:", sel__convertRect_toViewInSameWindow_, a1, CFSTR("UIView.m"), 9555, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("view != nil"));

    }
    v13 = *(void **)(a1 + 168);
    v14 = v12[21];
    v15 = v13;
    objc_msgSend(v15, "convertRect:toLayer:", v14, a3, a4, a5, a6);
    v17 = v16;

  }
  else
  {
    v17 = 0.0;
  }

  return v17;
}

void __84__UIView__synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds_updateSuperview___block_invoke()
{
  id v0;

  _UIMainBundleIdentifier();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EDDCA615 = objc_msgSend(v0, "isEqualToString:", CFSTR("com.dexcom.CLARITYReports"));

}

void __51__UIView__reestablishConstraintsForTransformChange__block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "_removeFromEngine:", *(_QWORD *)(a1 + 40));
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "_addToEngine:", *(_QWORD *)(a1 + 40), (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

- (void)_setTransform3D:(CATransform3D *)a3
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[8];

  v3 = *(_OWORD *)&a3->m33;
  v7[4] = *(_OWORD *)&a3->m31;
  v7[5] = v3;
  v4 = *(_OWORD *)&a3->m43;
  v7[6] = *(_OWORD *)&a3->m41;
  v7[7] = v4;
  v5 = *(_OWORD *)&a3->m13;
  v7[0] = *(_OWORD *)&a3->m11;
  v7[1] = v5;
  v6 = *(_OWORD *)&a3->m23;
  v7[2] = *(_OWORD *)&a3->m21;
  v7[3] = v6;
  -[UIView setTransform3D:](self, "setTransform3D:", v7);
}

- (void)_setShouldNotifyGeometryObserversForBaselineChanges:(BOOL)a3
{
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFFFE | a3;
}

- (UIEdgeInsets)_morphInsets
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  UIEdgeInsets result;

  objc_getAssociatedObject(self, &_UIViewMorphInsetsKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "UIEdgeInsetsValue");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
  }
  else
  {
    v5 = 0.0;
    v7 = 0.0;
    v9 = 0.0;
    v11 = 0.0;
  }

  v12 = v5;
  v13 = v7;
  v14 = v9;
  v15 = v11;
  result.right = v15;
  result.bottom = v14;
  result.left = v13;
  result.top = v12;
  return result;
}

- (void)_setMorphInsets:(UIEdgeInsets)a3
{
  void *v4;
  UIEdgeInsets v5;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v5, "{UIEdgeInsets=dddd}");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_UIViewMorphInsetsKey, v4, (void *)1);

}

- (UIEdgeInsets)_cropInsets
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  UIEdgeInsets result;

  objc_getAssociatedObject(self, &_UIViewCropInsetsKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "UIEdgeInsetsValue");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
  }
  else
  {
    v5 = 0.0;
    v7 = 0.0;
    v9 = 0.0;
    v11 = 0.0;
  }

  v12 = v5;
  v13 = v7;
  v14 = v9;
  v15 = v11;
  result.right = v15;
  result.bottom = v14;
  result.left = v13;
  result.top = v12;
  return result;
}

- (void)_setCropInsets:(UIEdgeInsets)a3
{
  void *v4;
  UIEdgeInsets v5;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v5, "{UIEdgeInsets=dddd}");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_UIViewCropInsetsKey, v4, (void *)1);

}

- (CACornerRadii)_intersectedSceneCornerRadii
{
  CGSize *v5;
  CGSize v6;
  CGSize v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  double v49;
  double v50;
  CGFloat v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  CGFloat v58;
  CACornerRadii *result;
  CGFloat v60;
  id v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;

  v5 = (CGSize *)MEMORY[0x1E0CD2380];
  v6 = *(CGSize *)(MEMORY[0x1E0CD2380] + 16);
  retstr->minXMaxY = (CGSize)*MEMORY[0x1E0CD2380];
  retstr->maxXMaxY = v6;
  v7 = v5[3];
  retstr->maxXMinY = v5[2];
  retstr->minXMinY = v7;
  -[UIView window](self, "window");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "windowScene");
  v61 = (id)objc_claimAutoreleasedReturnValue();

  v9 = v61;
  if (v61)
  {
    objc_msgSend(v61, "_effectiveSettings");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "cornerRadiusConfiguration");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "coordinateSpace");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "bounds");
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    -[UIView bounds](self, "bounds");
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v28 = v27;
    -[UIView _cropInsets](self, "_cropInsets");
    v30 = v22 + v29;
    v32 = v24 + v31;
    v34 = v26 - (v29 + v33);
    v36 = v28 - (v31 + v35);
    objc_msgSend(v61, "coordinateSpace");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v37, v30, v32, v34, v36);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v45 = v44;

    v62.origin.x = v39;
    v62.origin.y = v41;
    v62.size.width = v43;
    v62.size.height = v45;
    if (v14 >= CGRectGetMinX(v62))
    {
      v63.origin.x = v39;
      v63.origin.y = v41;
      v63.size.width = v43;
      v63.size.height = v45;
      if (v14 <= CGRectGetMaxX(v63))
      {
        v64.origin.x = v39;
        v64.origin.y = v41;
        v64.size.width = v43;
        v64.size.height = v45;
        if (v16 >= CGRectGetMinY(v64))
        {
          v65.origin.x = v39;
          v65.origin.y = v41;
          v65.size.width = v43;
          v65.size.height = v45;
          if (v16 <= CGRectGetMaxY(v65))
          {
            objc_msgSend(v11, "topLeft");
            v60 = v46;
            objc_msgSend(v11, "topLeft");
            retstr->minXMinY.width = v60;
            retstr->minXMinY.height = v47;
          }
        }
      }
    }
    v48 = v16 + v20;
    v49 = v14 + v18;
    v66.origin.x = v39;
    v66.origin.y = v41;
    v66.size.width = v43;
    v66.size.height = v45;
    if (v14 >= CGRectGetMinX(v66))
    {
      v67.origin.x = v39;
      v67.origin.y = v41;
      v67.size.width = v43;
      v67.size.height = v45;
      if (v14 <= CGRectGetMaxX(v67))
      {
        v68.origin.x = v39;
        v68.origin.y = v41;
        v68.size.width = v43;
        v68.size.height = v45;
        if (v48 >= CGRectGetMinY(v68))
        {
          v69.origin.x = v39;
          v69.origin.y = v41;
          v69.size.width = v43;
          v69.size.height = v45;
          if (v48 <= CGRectGetMaxY(v69))
          {
            objc_msgSend(v11, "bottomLeft");
            v51 = v50;
            objc_msgSend(v11, "bottomLeft");
            retstr->minXMaxY.width = v51;
            retstr->minXMaxY.height = v52;
          }
        }
      }
    }
    v70.origin.x = v39;
    v70.origin.y = v41;
    v70.size.width = v43;
    v70.size.height = v45;
    if (v49 >= CGRectGetMinX(v70))
    {
      v71.origin.x = v39;
      v71.origin.y = v41;
      v71.size.width = v43;
      v71.size.height = v45;
      if (v49 <= CGRectGetMaxX(v71))
      {
        v72.origin.x = v39;
        v72.origin.y = v41;
        v72.size.width = v43;
        v72.size.height = v45;
        if (v48 >= CGRectGetMinY(v72))
        {
          v73.origin.x = v39;
          v73.origin.y = v41;
          v73.size.width = v43;
          v73.size.height = v45;
          if (v48 <= CGRectGetMaxY(v73))
          {
            objc_msgSend(v11, "bottomRight");
            v54 = v53;
            objc_msgSend(v11, "bottomRight");
            retstr->maxXMaxY.width = v54;
            retstr->maxXMaxY.height = v55;
          }
        }
      }
    }
    v74.origin.x = v39;
    v74.origin.y = v41;
    v74.size.width = v43;
    v74.size.height = v45;
    if (v49 >= CGRectGetMinX(v74))
    {
      v75.origin.x = v39;
      v75.origin.y = v41;
      v75.size.width = v43;
      v75.size.height = v45;
      if (v49 <= CGRectGetMaxX(v75))
      {
        v76.origin.x = v39;
        v76.origin.y = v41;
        v76.size.width = v43;
        v76.size.height = v45;
        if (v16 >= CGRectGetMinY(v76))
        {
          v77.origin.x = v39;
          v77.origin.y = v41;
          v77.size.width = v43;
          v77.size.height = v45;
          if (v16 <= CGRectGetMaxY(v77))
          {
            objc_msgSend(v11, "topRight");
            v57 = v56;
            objc_msgSend(v11, "topRight");
            retstr->maxXMinY.width = v57;
            retstr->maxXMinY.height = v58;
          }
        }
      }
    }

    v9 = v61;
  }

  return result;
}

- (id)resizableSnapshotFromRect:(CGRect)a3 withCapInsets:(UIEdgeInsets)a4
{
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.top, a4.left, a4.bottom, a4.right);
}

- (BOOL)drawViewHierarchyInRect:(CGRect)a3
{
  return -[UIView drawViewHierarchyInRect:afterScreenUpdates:](self, "drawViewHierarchyInRect:afterScreenUpdates:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (id)snapshotView
{
  -[UIView bounds](self, "bounds");
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0);
}

- (id)resizableSnapshotViewFromRect:(CGRect)a3 withCapInsets:(UIEdgeInsets)a4
{
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.top, a4.left, a4.bottom, a4.right);
}

- (BOOL)_isContainedInHostedFocusSystem
{
  return 0;
}

- (BOOL)canBecomeFocused
{
  return _AXSFullKeyboardAccessEnabled()
      && -[NSObject isAccessibilityElement](self, "isAccessibilityElement")
      && -[NSObject accessibilityRespondsToUserInteraction](self, "accessibilityRespondsToUserInteraction");
}

- (BOOL)_isFocusedOrAncestorOfFocusedView
{
  UIView *v2;
  void *v3;

  v2 = self;
  -[UIView _focusSystem](self, "_focusSystem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = objc_msgSend(v3, "_focusedItemIsContainedInEnvironment:includeSelf:", v2, 1);

  return (char)v2;
}

- (unint64_t)_countOfFocusedAncestorTrackingViewsInSubtree
{
  return self->_countOfFocusedAncestorTrackingViewsInSubtree;
}

- (void)_setCountOfFocusedAncestorTrackingViewsInSubtree:(unint64_t)a3
{
  self->_countOfFocusedAncestorTrackingViewsInSubtree = a3;
}

- (BOOL)_tracksFocusedAncestors
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 12) & 1;
}

- (void)_setTracksFocusedAncestors:(BOOL)a3
{
  uint64_t viewFlags;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  _UIViewBlockVisitor *v9;
  _QWORD aBlock[5];

  viewFlags = (uint64_t)self->_viewFlags;
  v5 = *((_QWORD *)&self->_viewFlags + 1);
  v6 = *((_DWORD *)&self->_viewFlags + 4);
  if (a3)
  {
    if ((v6 & 0x1000) != 0)
      return;
    *(_QWORD *)&self->_viewFlags = viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v6 | 0x1000;
    if (_setTracksFocusedAncestors__installVisitorOnceToken != -1)
      dispatch_once(&_setTracksFocusedAncestors__installVisitorOnceToken, &__block_literal_global_998_0);
    v7 = 1;
  }
  else
  {
    if ((v6 & 0x1000) == 0)
      return;
    *(_QWORD *)&self->_viewFlags = viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v6 & 0xFFFFEFFF;
    v7 = -1;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __49__UIView__dispatchTrackingFocusVisitorWithDelta___block_invoke;
  aBlock[3] = &__block_descriptor_40_e16_B16__0__UIView_8l;
  aBlock[4] = v7;
  v8 = _Block_copy(aBlock);
  v9 = -[_UIViewBlockVisitor initWithTraversalDirection:visitorBlock:]([_UIViewBlockVisitor alloc], "initWithTraversalDirection:visitorBlock:", 1, v8);
  -[UIView _receiveVisitor:](self, "_receiveVisitor:", v9);

}

void __37__UIView__setTracksFocusedAncestors___block_invoke()
{
  _UIFocusTrackingVisitor *v0;

  v0 = -[_UIViewVisitor initWithTraversalDirection:]([_UIFocusTrackingVisitor alloc], "initWithTraversalDirection:", 1);
  +[UIView _addHierarchyTrackingVisitor:](UIView, "_addHierarchyTrackingVisitor:", v0);

}

uint64_t __49__UIView__dispatchTrackingFocusVisitorWithDelta___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "_setCountOfFocusedAncestorTrackingViewsInSubtree:", *(_QWORD *)(a1 + 32) + objc_msgSend(v3, "_countOfFocusedAncestorTrackingViewsInSubtree"));

  return 1;
}

- (BOOL)_allowsFocusToLeaveViaHeading:(unint64_t)a3
{
  return 1;
}

- (uint64_t)_containsPreferredFocusableView
{
  _BOOL8 v1;
  void *v2;
  _UIFocusUpdateRequest *v3;
  id v4;
  void *v5;

  v1 = (_BOOL8)a1;
  if (a1)
  {
    if ((_UIFocusItemIsFocusedOrFocusable(a1) & 1) != 0)
    {
      return 1;
    }
    else
    {
      objc_msgSend((id)v1, "_window");
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      if (v2)
      {
        v3 = -[_UIFocusUpdateRequest initWithEnvironment:]([_UIFocusUpdateRequest alloc], "initWithEnvironment:", v1);
        -[_UIFocusUpdateRequest setAllowsOverridingPreferedFocusEnvironments:](v3, "setAllowsOverridingPreferedFocusEnvironments:", 0);
        v4 = -[UIFocusUpdateContext _initWithFocusUpdateRequest:]([UIFocusUpdateContext alloc], "_initWithFocusUpdateRequest:", v3);
        objc_msgSend(v4, "nextFocusedView");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v1 = v5 != 0;

      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

- (BOOL)_hasFocusableContents
{
  _BOOL8 v1;
  void *v2;
  _UIFocusMap *v3;
  void *v4;

  v1 = (_BOOL8)a1;
  if (a1)
  {
    objc_msgSend(a1, "_focusSystem");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      if ((_UIFocusItemIsFocusedOrFocusableInFocusSystem((void *)v1, v2) & 1) != 0)
      {
        v1 = 1;
      }
      else
      {
        v3 = -[_UIFocusMap initWithFocusSystem:rootEnvironment:]([_UIFocusMap alloc], "initWithFocusSystem:rootEnvironment:", v2, v1);
        -[_UIFocusMap _allFocusableItemsInEnvironment:](v3, "_allFocusableItemsInEnvironment:", v1);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v1 = objc_msgSend(v4, "count") != 0;

      }
    }
    else
    {
      v1 = 0;
    }

  }
  return v1;
}

- (void)_setFocusSpeedBumpEdges:(unint64_t)a3
{
  uint64_t v4;
  int v5;
  void *v6;
  unint64_t v7;

  v7 = a3;
  v4 = *((_QWORD *)&self->_viewFlags + 1);
  v5 = *((_DWORD *)&self->_viewFlags + 4);
  if (a3 || (v5 & 0x10000) != 0)
  {
    *(_QWORD *)&self->_viewFlags = self->_viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) = v4;
    *((_DWORD *)&self->_viewFlags + 4) = v5 & 0xFFFEFFFF | ((a3 != 0) << 16);
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v7, "Q");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }
    objc_setAssociatedObject(self, &_UIFocusEngineSpeedBumpKey, v6, (void *)1);

  }
}

- (unint64_t)_focusSpeedBumpEdges
{
  unint64_t result;
  void *v4;
  void *v5;
  unint64_t v6;

  result = 0;
  v6 = 0;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x10000) != 0)
  {
    objc_getAssociatedObject(self, &_UIFocusEngineSpeedBumpKey);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
      objc_msgSend(v4, "getValue:", &v6);

    return v6;
  }
  return result;
}

- (UIEdgeInsets)_focusableContentMargins
{
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  UIEdgeInsets result;

  v8 = 0u;
  v9 = 0u;
  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x20000) != 0)
  {
    objc_getAssociatedObject(self, &_UIViewFocusableContentMarginsAssocObjectKey);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
      objc_msgSend(v6, "getValue:", &v8);

    v4 = *((double *)&v8 + 1);
    v5 = *(double *)&v8;
    v2 = *((double *)&v9 + 1);
    v3 = *(double *)&v9;
  }
  result.right = v2;
  result.bottom = v3;
  result.left = v4;
  result.top = v5;
  return result;
}

- (void)_setFocusableContentMargins:(UIEdgeInsets)a3
{
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  void *v9;
  UIEdgeInsets v10;

  v4 = a3.left == 0.0;
  if (a3.top != 0.0)
    v4 = 0;
  if (a3.right != 0.0)
    v4 = 0;
  if (a3.bottom != 0.0)
    v4 = 0;
  v5 = *((_QWORD *)&self->_viewFlags + 1);
  v6 = *((_DWORD *)&self->_viewFlags + 4);
  if ((v6 & 0x20000) != 0 || !v4)
  {
    v7 = v6 & 0xFFFDFFFF;
    if (v4)
      v8 = 0;
    else
      v8 = 0x20000;
    *(_QWORD *)&self->_viewFlags = self->_viewFlags;
    *((_QWORD *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v7 | v8;
    if (v4)
    {
      v9 = 0;
    }
    else
    {
      v10 = a3;
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v10, "{UIEdgeInsets=dddd}");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_setAssociatedObject(self, &_UIViewFocusableContentMarginsAssocObjectKey, v9, (void *)1);

  }
}

- (BOOL)_isFocusDirectionFlippedHorizontally
{
  return 0;
}

- (id)_currentFocusAnimationCoordinator
{
  void *v2;
  void *v3;
  void *v4;

  -[UIView _focusSystemSceneComponent](self, "_focusSystemSceneComponent");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "focusAnimationCoordinatorManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeFocusAnimationCoordinator");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_preferredConfigurationForFocusAnimation:(int64_t)a3 inContext:(id)a4
{
  return +[_UIFocusAnimationConfiguration configurationWithStyle:](_UIFocusAnimationConfiguration, "configurationWithStyle:", 0, a4);
}

- (double)_preferredDurationForFocusAnimation:(int64_t)a3 inContext:(id)a4
{
  return 0.0;
}

- (double)_preferredDurationScaleFactorForFocusAnimation:(int64_t)a3 inContext:(id)a4
{
  return 0.0;
}

- (int64_t)_focusTouchSensitivityStyle
{
  return 0;
}

- (BOOL)_tvAllowsFocusInChildrenWhenFocused
{
  return 0;
}

- (BOOL)_tvAddsChildFocusItemsBeforeSelf
{
  return 0;
}

- (BOOL)_tvAddsChildFocusItemsButNotSelf
{
  return 0;
}

- (UIView)preferredFocusedView
{
  void *v3;
  int v4;
  UIViewController *v5;
  UIView *v6;
  UIView *v7;
  UIView *v8;

  if ((*(_DWORD *)&self->_viewFlags & 0x80000000) != 0
    && (-[UIView _focusBehavior](self, "_focusBehavior"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "includesContentScrollViewInPreferredFocusEnvironments"),
        v3,
        v4))
  {
    v5 = self->_viewDelegate;
    -[UIViewController _contentScrollView](v5, "_contentScrollView");
    v6 = (UIView *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }
  if (v6)
    v7 = v6;
  else
    v7 = self;
  v8 = v7;

  return v8;
}

- (NSArray)preferredFocusEnvironments
{
  UIView *v3;
  UIView *v4;
  void *v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  __UIFocusEnvironmentPreferredFocusedView(self, 0);
  v3 = (UIView *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  v5 = (void *)MEMORY[0x1E0C9AA60];
  if (v3 && v3 != self)
  {
    v7[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return (NSArray *)v5;
}

- (BOOL)shouldUpdateFocusInContext:(id)a3
{
  return 1;
}

- (void)_didUpdateFocusInContext:(id)a3
{
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  +[_UIFocusAnimationCoordinatorManager animationCoordinatorForContext:](_UIFocusAnimationCoordinatorManager, "animationCoordinatorForContext:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 10723, CFSTR("Received call to _didUpdateFocusInContext: outside of a focus update."));

  }
  -[UIView didUpdateFocusInContext:withAnimationCoordinator:](self, "didUpdateFocusInContext:withAnimationCoordinator:", v7, v5);

}

- (void)_setNeedsNonDeferredFocusUpdate
{
  void *v3;
  _UIFocusUpdateRequest *v4;

  v4 = -[_UIFocusUpdateRequest initWithEnvironment:]([_UIFocusUpdateRequest alloc], "initWithEnvironment:", self);
  -[_UIFocusUpdateRequest setAllowsDeferral:](v4, "setAllowsDeferral:", 0);
  -[UIView _focusSystem](self, "_focusSystem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_requestFocusUpdate:", v4);

}

- (BOOL)_isEligibleForFocusOcclusion
{
  void *v3;
  int v4;
  void *v5;
  BOOL v6;

  -[UIView _focusBehavior](self, "_focusBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsViewTransparency");

  if (!v4)
    return -[UIView _isEligibleForFocusInteraction](self, "_isEligibleForFocusInteraction");
  if (-[UIView isHidden](self, "isHidden")
    || !-[UIView _isEligibleForFocusGivenAlpha](self, "_isEligibleForFocusGivenAlpha"))
  {
    return 0;
  }
  -[UIView _window](self, "_window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5 != 0;

  return v6;
}

- (CGRect)_clippingRectInCoordinateSpace:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  v4 = a3;
  if (-[UIView clipsToBounds](self, "clipsToBounds"))
  {
    -[UIView bounds](self, "bounds");
    -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v4);
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;
  }
  else
  {
    v6 = *MEMORY[0x1E0C9D628];
    v8 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v10 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v12 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }

  v13 = v6;
  v14 = v8;
  v15 = v10;
  v16 = v12;
  result.size.height = v16;
  result.size.width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

- (NSString)focusGroupIdentifier
{
  $1DC6EB69857CC9E7E7608875A7943F0A *p_viewFlags;
  int v3;
  void *v4;
  unint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  p_viewFlags = &self->_viewFlags;
  v3 = (*((_DWORD *)&self->_viewFlags + 5) >> 23) & 3;
  if (v3 == 2)
  {
    objc_getAssociatedObject(self, &FocusGroupIdentifierKey_0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    return (NSString *)v4;
  }
  if (v3 == 1)
  {
LABEL_11:
    v4 = 0;
    return (NSString *)v4;
  }
  if (v3)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        v10 = (*((_DWORD *)p_viewFlags + 5) >> 23) & 3;
        v11 = 67109120;
        v12 = v10;
        _os_log_fault_impl(&dword_185066000, v9, OS_LOG_TYPE_FAULT, "Unknown case for _viewFlags.hasFocusGroupIdentifier (%d).", (uint8_t *)&v11, 8u);
      }

    }
    else
    {
      v5 = focusGroupIdentifier___s_category_0;
      if (!focusGroupIdentifier___s_category_0)
      {
        v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&focusGroupIdentifier___s_category_0);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (*((_DWORD *)p_viewFlags + 5) >> 23) & 3;
        v11 = 67109120;
        v12 = v7;
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, "Unknown case for _viewFlags.hasFocusGroupIdentifier (%d).", (uint8_t *)&v11, 8u);
      }
    }
    goto LABEL_11;
  }
  -[UIView _systemDefaultFocusGroupIdentifier](self, "_systemDefaultFocusGroupIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  return (NSString *)v4;
}

- (int64_t)_systemDefaultFocusGroupPriority
{
  return 0;
}

- (void)setFocusGroupPriority:(UIFocusGroupPriority)focusGroupPriority
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)((char *)&self->_viewFlags + 20) |= 0x2000000uLL;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", focusGroupPriority);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &FocusGroupPriorityKey, v4, (void *)1);

  -[UIView _focusSystem](self, "_focusSystem");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_focusMovementCache");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "focusGroupPriorityDidChange:", self);

}

- (UIFocusGroupPriority)focusGroupPriority
{
  void *v3;
  UIFocusGroupPriority v4;

  if ((*((_BYTE *)&self->_viewFlags + 23) & 2) == 0)
    return 0;
  objc_getAssociatedObject(self, &FocusGroupPriorityKey);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "integerValue");

  return v4;
}

- (CGRect)_focusRegionFrame
{
  double x;
  double y;
  double width;
  double height;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CGRect v30;
  CGRect result;

  -[UIView _defaultFocusRegionFrame](self, "_defaultFocusRegionFrame");
  x = v30.origin.x;
  y = v30.origin.y;
  width = v30.size.width;
  height = v30.size.height;
  if (CGRectIsNull(v30))
  {
    -[UIView bounds](self, "bounds");
    x = v7;
    y = v8;
    width = v9;
    height = v10;
  }
  -[UIView _window](self, "_window");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView convertRect:toView:](self, "convertRect:toView:", v11, x, y, width, height);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;

  -[UIView _focusableContentMargins](self, "_focusableContentMargins");
  v21 = v15 + v20;
  v24 = v17 - (v22 + v23);
  v26 = v19 - (v20 + v25);
  v27 = v13 + v22;
  v28 = v21;
  v29 = v24;
  result.size.height = v26;
  result.size.width = v29;
  result.origin.y = v28;
  result.origin.x = v27;
  return result;
}

- (id)_childFocusRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4
{
  void *v5;
  void *v6;

  if ((_UIViewShouldReturnSubviewsInFocusItemsInRect() & 1) != 0)
  {
    v5 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
    -[UIView _childFocusViews](self, "_childFocusViews");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bs_map:", &__block_literal_global_1011);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

id __53__UIView__childFocusRegionsInRect_inCoordinateSpace___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  objc_msgSend(v2, "focusItemContainer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _UIFocusRegionContainerFromEnvironmentAndContainer((uint64_t)v2, (uint64_t)v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)_childFocusViews
{
  UIViewController *v3;
  void *v4;
  int v5;
  void *v6;

  if ((*(_DWORD *)&self->_viewFlags & 0x80000000) == 0)
    goto LABEL_6;
  v3 = self->_viewDelegate;
  if (!-[UIViewController _shouldIgnoreChildFocusRegions](v3, "_shouldIgnoreChildFocusRegions"))
  {

    goto LABEL_6;
  }
  -[UIView _focusBehavior](self, "_focusBehavior");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsViewTransparency");

  if (v5)
  {
LABEL_6:
    -[UIView _allSubviews](self, "_allSubviews");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    return v6;
  }
  v6 = (void *)MEMORY[0x1E0C9AA60];
  return v6;
}

- (BOOL)_isPromiseFocusRegion
{
  return 0;
}

- (BOOL)_isTransparentFocusRegion
{
  return 0;
}

- (BOOL)isTransparentFocusItem
{
  void *v3;
  void *v4;
  char IsTransparentFocusItem;

  -[UIView _focusBehavior](self, "_focusBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && !objc_msgSend(v3, "supportsViewTransparency"))
    IsTransparentFocusItem = 0;
  else
    IsTransparentFocusItem = _UIViewIsTransparentFocusItem(self);

  return IsTransparentFocusItem;
}

- (id)_focusGesturesForFailureRequirements
{
  void *v2;
  void *v3;
  void *v4;

  -[UIView window](self, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_focusEventRecognizer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "gesturesForFailureRequirements");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)focusItemsInRect:(CGRect)a3
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  UIView *v8;
  void *v9;
  void *v10;
  UIView *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  id v30;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;
  CGRect v40;
  CGRect v41;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v39 = *MEMORY[0x1E0C80C00];
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    v8 = self;
    -[UIView _childFocusViews](v8, "_childFocusViews");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView _focusBehavior](v8, "_focusBehavior");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v10, "addsAccessibilityElementsToFocusEngine") & 1) != 0)
    {
      v32 = v10;
      v33 = v9;
      v11 = v8;
      -[NSObject accessibilityElements](v11, "accessibilityElements");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v14 = v12;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v35;
        do
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v35 != v17)
              objc_enumerationMutation(v14);
            v19 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
            _UIFocusItemSafeCast(v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            if (v20)
            {
              if ((_IsKindOfUIView((uint64_t)v19) & 1) == 0)
              {
                -[UIView focusItemContainer](v11, "focusItemContainer");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "coordinateSpace");
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                v23 = _UIFocusItemFrameInCoordinateSpace(v20, v22);
                v25 = v24;
                v27 = v26;
                v29 = v28;

                v40.origin.x = x;
                v40.origin.y = y;
                v40.size.width = width;
                v40.size.height = height;
                v41.origin.x = v23;
                v41.origin.y = v25;
                v41.size.width = v27;
                v41.size.height = v29;
                if (CGRectIntersectsRect(v40, v41))
                  objc_msgSend(v13, "addObject:", v20);
              }
            }

          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        }
        while (v16);
      }

      v9 = v33;
      objc_msgSend(v33, "arrayByAddingObjectsFromArray:", v13);
      v30 = (id)objc_claimAutoreleasedReturnValue();

      v10 = v32;
    }
    else
    {
      v30 = v9;
    }

  }
  else
  {
    v30 = (id)MEMORY[0x1E0C9AA60];
  }
  return v30;
}

- (BOOL)_isLazyFocusItemContainer
{
  return 0;
}

- (unint64_t)_focusGuideBehaviorForFocusMovement:(id)a3
{
  return 0;
}

- (CGRect)_focusRegionFrameInCoordinateSpace:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect result;

  v4 = a3;
  -[UIView _defaultFocusRegionFrame](self, "_defaultFocusRegionFrame");
  -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x20000) != 0)
  {
    -[UIView _focusableContentMargins](self, "_focusableContentMargins");
    v6 = v6 + v13;
    v8 = v8 + v14;
    v10 = v10 - (v13 + v15);
    v12 = v12 - (v14 + v16);
  }
  v17 = v6;
  v18 = v8;
  v19 = v10;
  v20 = v12;
  result.size.height = v20;
  result.size.width = v19;
  result.origin.y = v18;
  result.origin.x = v17;
  return result;
}

- (BOOL)_shouldAlwaysDiagnoseFocusInteractionEligibility
{
  return 1;
}

- (void)_diagnoseFocusInteractionEligibilityForReport:(id)a3
{
  -[UIView _diagnoseFocusInteractionEligibilityForReport:checkAncestors:](self, a3, 1);
}

- (void)_diagnoseFocusInteractionEligibilityForReport:(int)a3 checkAncestors:
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  objc_class *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;

  v26 = a2;
  if (a1)
  {
    objc_msgSend(a1, "_window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      +[_UIDebugIssue issueWithDescription:](_UIDebugIssue, "issueWithDescription:", CFSTR("This view is not contained in a window view hierarchy."));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addIssue:", v6);

    }
    if ((objc_msgSend(a1, "isUserInteractionEnabled") & 1) == 0)
    {
      +[_UIDebugIssue issueWithDescription:](_UIDebugIssue, "issueWithDescription:", CFSTR("This view has isUserInteractionEnabled set to NO. Views must allow user interaction to be focusable."));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addIssue:", v7);

    }
    if ((objc_msgSend(a1, "_isFocusInteractionEnabled") & 1) == 0)
    {
      +[_UIDebugIssue issueWithDescription:](_UIDebugIssue, "issueWithDescription:", CFSTR("This view has isFocusInteractionEnabled set to NO. Views must allow focus interaction to be focusable."));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addIssue:", v8);

    }
    objc_msgSend(a1, "alpha");
    if (fabs(v9) < 2.22044605e-16)
    {
      +[_UIDebugIssue issueWithDescription:](_UIDebugIssue, "issueWithDescription:", CFSTR("This view has an alpha value equal to 0. Views must be visible to be focusable."));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addIssue:", v10);

    }
    if (objc_msgSend(a1, "isHidden"))
    {
      +[_UIDebugIssue issueWithDescription:](_UIDebugIssue, "issueWithDescription:", CFSTR("This view is hidden. Views must be visible to be focusable."));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addIssue:", v11);

    }
    if (a3)
    {
      +[_UIDebugIssue issueWithDescription:](_UIDebugIssue, "issueWithDescription:", CFSTR("One or more ancestors have issues that may be preventing this item from being focusable. Details:"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "superview");
      v13 = objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        v14 = (void *)v13;
        do
        {
          v15 = (void *)MEMORY[0x1E0CB3940];
          v16 = v14;
          v17 = (objc_class *)objc_opt_class();
          NSStringFromClass(v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "stringWithFormat:", CFSTR("<%@: %p>"), v18, v16);
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          +[_UIDebugIssue issueWithFormat:](_UIDebugIssue, "issueWithFormat:", CFSTR("%@:"), v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v20, "setPrefix:", &stru_1E16EDF20);
          if ((objc_msgSend(v16, "_isEligibleForFocusInteraction") & 1) == 0)
            -[UIView _diagnoseFocusInteractionEligibilityForReport:checkAncestors:](v16, v20, 0);
          if (objc_msgSend(v16, "canBecomeFocused"))
          {
            +[_UIDebugIssue issueWithDescription:](_UIDebugIssue, "issueWithDescription:", CFSTR("This view returns YES from -canBecomeFocused, which will prevent its subviews from being focusable."));
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "addIssue:", v21);

          }
          objc_msgSend(v20, "subissues");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "count");

          if (v23)
            objc_msgSend(v12, "addIssue:", v20);

          objc_msgSend(v16, "superview");
          v14 = (void *)objc_claimAutoreleasedReturnValue();

        }
        while (v14);
      }
      objc_msgSend(v12, "subissues");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "count");

      if (v25)
        objc_msgSend(v26, "addIssue:", v12);

    }
  }

}

uint64_t __58__UIView__updateDirectionalConstraintsIfNeededWasFlipped___block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 < 0x13) & (0x60060u >> a3);
}

void __58__UIView__updateDirectionalConstraintsIfNeededWasFlipped___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "hasBeenLowered"))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      objc_msgSend(v4, "_removeFromEngine:");
      objc_msgSend(v4, "_addToEngine:", *(_QWORD *)(a1 + 32));
    }
    else
    {
      objc_msgSend(v4, "container");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "removeConstraint:", v4);
      objc_msgSend(v3, "addConstraint:", v4);
      objc_msgSend(*(id *)(a1 + 40), "setNeedsLayout");

    }
  }

}

- (id)_idleModeLayoutAttributes
{
  return objc_getAssociatedObject(self, sel__idleModeLayoutAttributes);
}

- (UIStoryboardPreviewingSegueTemplateStorage)_previewingSegueTemplateStorage
{
  return (UIStoryboardPreviewingSegueTemplateStorage *)objc_getAssociatedObject(self, sel__previewingSegueTemplateStorage);
}

+ (void)removePropertyAnimatorAnimationsInView:(id)a3
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id obj;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (v3)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    objc_msgSend((id)qword_1EDDCA650, "allValues");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
    if (v26)
    {
      v25 = *(_QWORD *)v42;
      do
      {
        v4 = 0;
        do
        {
          if (*(_QWORD *)v42 != v25)
            objc_enumerationMutation(obj);
          v27 = v4;
          v5 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v4);
          v37 = 0u;
          v38 = 0u;
          v39 = 0u;
          v40 = 0u;
          v28 = v5;
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
          if (v30)
          {
            v29 = *(_QWORD *)v38;
            do
            {
              v6 = 0;
              do
              {
                if (*(_QWORD *)v38 != v29)
                  objc_enumerationMutation(v28);
                v31 = v6;
                v7 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v6);
                objc_msgSend(v7, "_trackedAnimations");
                v8 = (void *)objc_claimAutoreleasedReturnValue();
                v9 = (void *)objc_msgSend(v8, "copy");

                v35 = 0u;
                v36 = 0u;
                v33 = 0u;
                v34 = 0u;
                v32 = v9;
                v10 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
                if (v10)
                {
                  v11 = v10;
                  v12 = *(_QWORD *)v34;
                  do
                  {
                    for (i = 0; i != v11; ++i)
                    {
                      if (*(_QWORD *)v34 != v12)
                        objc_enumerationMutation(v32);
                      v14 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
                      objc_getAssociatedObject(v14, &unk_1EDDCA604);
                      v15 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v3, "layer");
                      v16 = (void *)objc_claimAutoreleasedReturnValue();
                      v17 = objc_msgSend(v15, "isDescendantOf:", v16);

                      if (v17)
                      {
                        objc_getAssociatedObject(v14, &unk_1EDDCA603);
                        v18 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v15, "animationForKey:", v18);
                        v19 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v7, "_outerPropertyAnimator:", 1);
                        v20 = (void *)objc_claimAutoreleasedReturnValue();
                        v21 = v20;
                        if (v20)
                        {
                          objc_msgSend(v20, "_trackingIdentifier");
                          v22 = v3;
                          v23 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v7, "_untrackAnimationsWithIdentifier:keyPath:inLayer:removeFromLayer:", v23, v18, v15, 1);

                          v3 = v22;
                          objc_msgSend(v21, "_setOriginalFromValue:forKey:inLayer:", 0, v18, v15);
                        }

                      }
                    }
                    v11 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
                  }
                  while (v11);
                }

                v6 = v31 + 1;
              }
              while (v31 + 1 != v30);
              v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
            }
            while (v30);
          }

          v4 = v27 + 1;
        }
        while (v27 + 1 != v26);
        v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      }
      while (v26);
    }

  }
}

- (id)_outlinePath
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  double v12;
  double v13;
  void *v14;
  void *v15;

  v1 = a1;
  if (a1)
  {
    objc_msgSend(a1, "bounds");
    v3 = v2;
    v5 = v4;
    v7 = v6;
    v9 = v8;
    objc_msgSend(v1, "layer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "maskedCorners");
    objc_msgSend(v1, "_cornerRadius");
    v13 = v12;
    objc_msgSend(v1, "layer");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "cornerCurve");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIBezierPath _roundedRectBezierPath:withRoundedCorners:cornerRadius:segments:legacyCorners:](UIBezierPath, "_roundedRectBezierPath:withRoundedCorners:cornerRadius:segments:legacyCorners:", v11, 16, objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0CD2A60]), v3, v5, v7, v9, v13);
    v1 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

+ (BOOL)_shouldRedactTextInDescription
{
  return pthread_main_np() != 1 || (__shouldRedactTextInDescription & 1) == 0;
}

- (id)_conciseDescription
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<%@: %p"), objc_opt_class(), a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "layer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "name");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "length");

    if (v5)
    {
      objc_msgSend(a1, "layer");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "appendFormat:", CFSTR("; name=%@"), v7);

    }
    objc_msgSend(v2, "appendString:", CFSTR(">"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (id)_conciseParentDescription
{
  void *v3;
  UIView *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = (void *)objc_opt_new();
  v4 = self;
  -[UIView _conciseDescription](v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendString:", v5);

  -[UIView superview](v4, "superview");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    do
    {
      -[UIView _conciseDescription](v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "appendFormat:", CFSTR(" → %@"), v7);

      objc_msgSend(v6, "superview");
      v8 = objc_claimAutoreleasedReturnValue();

      v6 = (void *)v8;
    }
    while (v8);
  }
  return v3;
}

- (_UIGestureRecognizerContainer)_parentGestureRecognizerContainer
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD *)((char *)&self->_viewFlags + 20);
  -[UIView superview](self, "superview");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if ((v2 & 0x1000000000) != 0)
  {
    objc_msgSend(v3, "superview");
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  return (_UIGestureRecognizerContainer *)v4;
}

- (int64_t)_compareGestureRecognizerContainer:(id)a3
{
  _BYTE *v4;
  int IsKindOfUIView;
  int64_t v6;

  v4 = a3;
  IsKindOfUIView = _IsKindOfUIView((uint64_t)v4);
  v6 = _UIGestureRecognizerContainerCompare(self, v4, IsKindOfUIView ^ 1u);

  return v6;
}

- (UIView)_proxyView
{
  return 0;
}

- (UIEdgeInsets)_inferredLayoutMargins
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_inferredLayoutMargins.top;
  left = self->_inferredLayoutMargins.left;
  bottom = self->_inferredLayoutMargins.bottom;
  right = self->_inferredLayoutMargins.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (void)_setInferredLayoutMargins:(UIEdgeInsets)a3
{
  self->_inferredLayoutMargins = a3;
}

- (void)_setLayoutMarginsGuide:(id)a3
{
  objc_storeStrong((id *)&self->_layoutMarginsGuide, a3);
}

- (int64_t)_sceneDraggingBehaviorOnPan
{
  return self->_sceneDraggingBehaviorOnPan;
}

- (void)_setSceneDraggingBehaviorOnPan:(int64_t)a3
{
  self->_sceneDraggingBehaviorOnPan = a3;
}

- (void)_setReadableContentGuide:(id)a3
{
  objc_storeStrong((id *)&self->_readableContentGuide, a3);
}

- (UIView)_overrideReparentingContainer
{
  return self->__overrideReparentingContainer;
}

- (void)set_overrideReparentingContainer:(id)a3
{
  objc_storeStrong((id *)&self->__overrideReparentingContainer, a3);
}

- (CGRect)extent
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGRect result;

  -[CALayer position](self->_layer, "position");
  v4 = v3;
  v6 = v5;
  -[CALayer bounds](self->_layer, "bounds");
  v9 = v4 - v7 * 0.5;
  v10 = v6 - v8 * 0.5;
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v10;
  result.origin.x = v9;
  return result;
}

- (void)_setFrameWithAlignmentRect:(CGRect)a3
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CALayer *v12;
  CALayer *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double MinX;
  double v19;
  double MinY;
  CATransform3D v21[2];
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  -[UIView frameForAlignmentRect:](self, "frameForAlignmentRect:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = self->_layer;
  v13 = v12;
  memset(&v21[1], 0, sizeof(CATransform3D));
  if (v12)
    -[CALayer transform](v12, "transform");
  v21[0] = v21[1];
  if (CATransform3DIsIdentity(v21))
  {
    -[UIView setFrame:](self, "setFrame:", v5, v7, v9, v11);
  }
  else
  {
    -[CALayer anchorPoint](v13, "anchorPoint");
    v15 = v14;
    v17 = v16;
    v22.origin.x = v5;
    v22.origin.y = v7;
    v22.size.width = v9;
    v22.size.height = v11;
    MinX = CGRectGetMinX(v22);
    v23.origin.x = v5;
    v23.origin.y = v7;
    v23.size.width = v9;
    v23.size.height = v11;
    v19 = MinX + v15 * CGRectGetWidth(v23);
    v24.origin.x = v5;
    v24.origin.y = v7;
    v24.size.width = v9;
    v24.size.height = v11;
    MinY = CGRectGetMinY(v24);
    v25.origin.x = v5;
    v25.origin.y = v7;
    v25.size.width = v9;
    v25.size.height = v11;
    -[UIView setCenter:](self, "setCenter:", v19, MinY + v17 * CGRectGetHeight(v25));
    -[UIView bounds](self, "bounds");
    -[UIView setBounds:](self, "setBounds:");
  }

}

- (BOOL)isMultipleTouchEnabled
{
  return (*(_QWORD *)&self->_viewFlags >> 29) & 1;
}

- (id)_hitTestWithContext:(id)a3
{
  return 0;
}

- (double)_convertOffset:(double)a3 fromView:(double)a4
{
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (!a1)
    return 0.0;
  v7 = a2;
  objc_msgSend(a1, "convertPoint:fromView:", v7, a3, a4);
  v9 = v8;
  objc_msgSend(a1, "convertPoint:fromView:", v7, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  v11 = v10;

  return v9 - v11;
}

- (double)_constrainRectWithinSceneBounds:(double)a3 additionalInsets:(double)a4
{
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  void *v39;
  double v40;
  CGFloat v41;
  double v42;
  double v43;
  double v44;
  CGFloat v45;
  CGFloat v46;
  double MinX;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  NSObject *v54;
  double v55;
  unint64_t v56;
  NSObject *v57;
  double MinY;
  double v60;
  double v61;
  double MaxY;
  double v63;
  double v64;
  double v65;
  double MaxX;
  double v67;
  double v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  CGRect rect;
  uint64_t v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v74 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0.0;
  objc_msgSend(a1, "_window");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "_windowHostingScene");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(a1, "_window");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "safeAreaInsets");
    v19 = UIEdgeInsetsAdd(15, v15, v16, v17, v18, a6);
    v21 = v20;
    v71 = a4;
    rect.origin.x = a5;
    v65 = v23;
    v69 = v22;

    objc_msgSend(a1, "_window");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_referenceBounds");
    objc_msgSend(v24, "_convertRectFromSceneReferenceSpace:");
    v26 = v25;
    v28 = v27;
    v29 = a3;
    v31 = v30;
    v32 = a2;
    v34 = v33;

    v35 = v21 + v26;
    v36 = v19 + v28;
    v37 = v31 - (v21 + v65);
    v38 = v34 - (v19 + v69);
    objc_msgSend(a1, "_window");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "convertRect:toView:", v39, v32, v29, v71, rect.origin.x);
    v41 = v40;
    v70 = v43;
    v72 = v42;
    v45 = v44;
    v46 = v43;

    v75.origin.x = v35;
    v75.origin.y = v36;
    v75.size.width = v37;
    v75.size.height = v38;
    MaxX = CGRectGetMaxX(v75);
    v76.origin.x = v41;
    rect.origin.x = v41;
    v76.origin.y = v72;
    v76.size.width = v45;
    v76.size.height = v46;
    v67 = fmin(MaxX, CGRectGetMaxX(v76));
    v77.origin.x = v35;
    v77.origin.y = v36;
    v77.size.width = v37;
    v77.size.height = v38;
    MinX = CGRectGetMinX(v77);
    v78.origin.x = v41;
    v78.origin.y = v72;
    v78.size.width = v45;
    v78.size.height = v70;
    v68 = v67 - fmax(MinX, CGRectGetMinX(v78));
    v79.origin.x = v35;
    v79.origin.y = v36;
    v79.size.width = v37;
    v79.size.height = v38;
    MaxY = CGRectGetMaxY(v79);
    v80.origin.x = v41;
    v80.origin.y = v72;
    v80.size.width = v45;
    v80.size.height = v70;
    v63 = fmin(MaxY, CGRectGetMaxY(v80));
    v81.origin.x = v35;
    v81.origin.y = v36;
    v81.size.width = v37;
    v81.size.height = v38;
    MinY = CGRectGetMinY(v81);
    v82.origin.x = v41;
    v82.origin.y = v72;
    v82.size.width = v45;
    v82.size.height = v70;
    v64 = v63 - fmax(MinY, CGRectGetMinY(v82));
    v83.origin.x = v35;
    v83.origin.y = v36;
    v83.size.width = v37;
    v83.size.height = v38;
    v60 = CGRectGetMinX(v83);
    v84.origin.x = v41;
    v84.origin.y = v72;
    v84.size.width = v45;
    v84.size.height = v70;
    v48 = CGRectGetMinX(v84);
    v85.origin.x = v35;
    v85.origin.y = v36;
    v85.size.width = v37;
    v85.size.height = v38;
    v61 = fmax(v60, fmin(v48, CGRectGetMaxX(v85)));
    v86.origin.x = v35;
    v86.origin.y = v36;
    v86.size.width = v37;
    v86.size.height = v38;
    v49 = CGRectGetMinY(v86);
    v87.origin.x = rect.origin.x;
    v87.origin.y = v72;
    v87.size.width = v45;
    v87.size.height = v70;
    v50 = CGRectGetMinY(v87);
    v88.origin.x = v35;
    v88.origin.y = v36;
    v88.size.width = v37;
    v88.size.height = v38;
    v51 = fmax(v49, fmin(v50, CGRectGetMaxY(v88)));
    v89.origin.x = v35;
    v89.origin.y = v36;
    v89.size.width = v37;
    v89.size.height = v38;
    v52 = fmax(fmin(v68, CGRectGetWidth(v89)), 0.0);
    v90.origin.x = v35;
    v90.origin.y = v36;
    v90.size.width = v37;
    v90.size.height = v38;
    v53 = fmax(fmin(v64, CGRectGetHeight(v90)), 0.0);
    objc_msgSend(a1, "_window");
    v54 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "convertRect:fromView:", v54, v61, v51, v52, v53);
    a2 = v55;
  }
  else
  {
    if (!os_variant_has_internal_diagnostics())
    {
      v56 = _constrainRectWithinSceneBounds_additionalInsets____s_category;
      if (!_constrainRectWithinSceneBounds_additionalInsets____s_category)
      {
        v56 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v56, (unint64_t *)&_constrainRectWithinSceneBounds_additionalInsets____s_category);
      }
      v57 = *(NSObject **)(v56 + 8);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        LODWORD(rect.origin.y) = 138412290;
        *(_QWORD *)((char *)&rect.origin.y + 4) = a1;
        _os_log_impl(&dword_185066000, v57, OS_LOG_TYPE_ERROR, "Cannot convert rect from view that is not in a window scene: %@", (uint8_t *)&rect.origin.y, 0xCu);
      }
      goto LABEL_10;
    }
    __UIFaultDebugAssertLog();
    v54 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_FAULT))
    {
      LODWORD(rect.origin.y) = 138412290;
      *(_QWORD *)((char *)&rect.origin.y + 4) = a1;
      _os_log_fault_impl(&dword_185066000, v54, OS_LOG_TYPE_FAULT, "Cannot convert rect from view that is not in a window scene: %@", (uint8_t *)&rect.origin.y, 0xCu);
    }
  }

LABEL_10:
  return a2;
}

- (void)setFrame:(CGRect)a3 forFields:(int)a4
{
  char v4;
  double height;
  double width;
  double y;
  double x;
  double v10;
  double v11;
  double v12;
  double v13;

  v4 = a4;
  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView frame](self, "frame");
  if ((v4 & 1) != 0)
    v10 = x;
  if ((v4 & 2) != 0)
    v11 = y;
  if ((v4 & 4) != 0)
    v12 = width;
  if ((v4 & 8) != 0)
    v13 = height;
  -[UIView setFrame:](self, "setFrame:", v10, v11, v12, v13);
}

- (void)setRotationBy:(float)a3
{
  CGAffineTransform v5;
  CGAffineTransform v6;
  CGAffineTransform v7;

  memset(&v7, 0, sizeof(v7));
  -[UIView transform](self, "transform");
  v5 = v7;
  CGAffineTransformRotate(&v6, &v5, a3 * 3.14159265 / 180.0);
  v7 = v6;
  -[UIView setTransform:](self, "setTransform:", &v6);
}

- (BOOL)_clipsGlyphPathFrame:(CGRect)a3 shouldContinueSuperviewTraversal:(BOOL *)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  _BOOL4 v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[UIView _window](self, "_window", a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
    goto LABEL_5;
  if (!-[UIView clipsToBounds](self, "clipsToBounds"))
    goto LABEL_5;
  -[UIView bounds](self, "bounds");
  -[UIView convertRect:toView:](self, "convertRect:toView:", v9);
  v10 = v16.origin.x;
  v11 = v16.origin.y;
  v12 = v16.size.width;
  v13 = v16.size.height;
  v18.origin.x = x;
  v18.origin.y = y;
  v18.size.width = width;
  v18.size.height = height;
  if (CGRectIntersectsRect(v16, v18))
  {
    v17.origin.x = v10;
    v17.origin.y = v11;
    v17.size.width = v12;
    v17.size.height = v13;
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = width;
    v19.size.height = height;
    v14 = !CGRectContainsRect(v17, v19);
  }
  else
  {
LABEL_5:
    LOBYTE(v14) = 0;
  }

  return v14;
}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_1971(uint64_t a1, uint64_t a2)
{
  return a2;
}

- (id)__swiftAnimationInfo
{
  if (a1)
    a1 = (id *)a1[6];
  return a1;
}

- (void)set__swiftAnimationInfo:(uint64_t)a1
{
  id v4;

  v4 = a2;
  if (a1)
    objc_storeStrong((id *)(a1 + 48), a2);

}

- (void)_setPresentationValue:(id)a3 velocity:(id)a4 preferredFrameRateRangeMaximum:(int)a5 forKey:(id)a6
{
  -[UIView setPresentationValue:velocity:preferredFrameRateRangeMaximum:immediate:forKey:](self, a3, a4, a5, 0, a6);
}

void __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  objc_msgSend(*(id *)(a1 + 32), "owningView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v3 = *(void **)(a1 + 32);
    v7 = MEMORY[0x1E0C809B0];
    v8 = 3221225472;
    v9 = __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_5;
    v10 = &unk_1E16D9968;
    v13 = &v15;
    v11 = v3;
    v4 = *(id *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v12 = v4;
    v14 = v5;
    objc_msgSend(v11, "performWithLock:", &v7);
    if (*((_BYTE *)v16 + 24))
    {
      objc_msgSend(v2, "layer", v7, v8, v9, v10, v11);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addPresentationModifier:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

    }
    _Block_object_dispose(&v15, 8);
  }

}

void __118__UIView_InProcessAnimations_Internal__setPresentationValue_velocity_preferredFrameRateRangeMaximum_immediate_forKey___block_invoke_5(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "presentationModifierForKey:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v2 == *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)
                                                                              + 40);

}

+ (void)_createTransformerWithProgressAnimatableProperty:(void *)a3 modelValueSetter:(void *)a4 presentationValueSetter:
{
  id v6;
  id v7;
  id v8;
  _UIViewAnimatablePropertyTransformer *v9;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  objc_opt_self();
  v9 = -[_UIViewAnimatablePropertyTransformer initWithProgressAnimatableProperty:modelValueSetter:presentationValueSetter:]([_UIViewAnimatablePropertyTransformer alloc], "initWithProgressAnimatableProperty:modelValueSetter:presentationValueSetter:", v8, v7, v6);

}

- (void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2
{
  unsigned int v7;
  void *v9;
  id v10;

  -[CALayer sublayers](self->_layer, "sublayers");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v10, "count");
  if ((index1 & 0x8000000000000000) == 0
    && index1 != index2
    && v7 > (unint64_t)index1
    && v7 > (unint64_t)index2)
  {
    v9 = (void *)objc_msgSend(v10, "mutableCopy");
    objc_msgSend(v9, "exchangeObjectAtIndex:withObjectAtIndex:", index1, index2);
    -[CALayer setSublayers:](self->_layer, "setSublayers:", v9);
    -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
    -[UIView _invalidateSubviewCache](self, "_invalidateSubviewCache");

  }
}

- (BOOL)_allowsHighContrastForBackgroundColor
{
  return (*((unsigned __int8 *)&self->_viewFlags + 22) >> 3) & 1;
}

void __41__UIView_Hierarchy___setBackgroundColor___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  objc_opt_self();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNSIntegerValue:forTrait:", 2, v3);

}

void __39__UIView_Hierarchy___willMoveToWindow___block_invoke()
{
  id v0;

  _UIMainBundleIdentifier();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EDDCA617 = objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.WorkflowUI.SystemActionConfigurationExtension"));

}

- (CGRect)_rectToScrollToVisibleInCellInWindow:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  v4 = a3;
  -[UIView bounds](self, "bounds");
  objc_msgSend(v4, "convertRect:fromView:", self);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  v13 = v6;
  v14 = v8;
  v15 = v10;
  v16 = v12;
  result.size.height = v16;
  result.size.width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

+ (void)_testIfFirstView:(id)a3 secondView:(id)a4 areDescendantsOfView:(id)a5 results:(BOOL)a6[2]
{
  id v9;
  id v10;
  id v11;
  char v12;
  id v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  id v17;

  v9 = a5;
  v10 = v9;
  *a6 = 0;
  v17 = v9;
  if (a3)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v12 |= a3 == a4;
      if (a3 == v10)
        break;
      v13 = (id)objc_msgSend(a3, "superview");
      v10 = v17;
      a3 = v13;
      if (!v11)
        v11 = v13;
      if (!v13)
      {
        if ((v12 & 1) != 0)
        {
LABEL_8:
          v14 = *a6;
          goto LABEL_17;
        }
        goto LABEL_12;
      }
    }
    v14 = 1;
    *a6 = 1;
    if ((v12 & 1) != 0)
      goto LABEL_17;
LABEL_12:
    if (a4 != v10)
    {
      if (v11)
      {
        v15 = objc_msgSend(a4, "superview");
        v10 = v17;
        if (v11 == (id)v15)
          goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  else if (a4 != v9)
  {
LABEL_15:
    v16 = objc_msgSend(a4, "isDescendantOfView:", v17);
    v10 = v17;
    a6[1] = v16;
    goto LABEL_18;
  }
  v14 = 1;
LABEL_17:
  a6[1] = v14;
LABEL_18:

}

- (uint64_t)_layoutHash
{
  uint64_t v1;
  _QWORD v3[5];
  _QWORD v4[4];

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2050000000;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __32__UIView_Hierarchy___layoutHash__block_invoke;
  v3[3] = &unk_1E16EB7A0;
  v3[4] = v4;
  v4[3] = v3;
  v1 = __32__UIView_Hierarchy___layoutHash__block_invoke((uint64_t)v3, a1, 1);
  _Block_object_dispose(v4, 8);
  return v1;
}

uint64_t __32__UIView_Hierarchy___layoutHash__block_invoke(uint64_t a1, void *a2, char a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  objc_msgSend(v5, "frame");
  v7 = v6;
  v9 = v8;
  v12 = (unint64_t)(v10 * 4096.0 + v11 * 256.0);
  objc_msgSend(v5, "subviews");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count") + v12;

  v24 = 0u;
  v25 = 0u;
  if ((a3 & 1) != 0)
    v15 = v14;
  else
    v15 = v14 + (unint64_t)(v7 * 4096.0 + v9 * 65536.0);
  *((_QWORD *)&v22 + 1) = 0;
  v23 = 0uLL;
  objc_msgSend(v5, "subviews", 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v23 != v19)
          objc_enumerationMutation(v16);
        v15 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16))() ^ __ROR8__(v15, 61);
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v18);
  }

  return v15;
}

- (id)_layoutHashesStackCreateIfNeeded:(void *)a1
{
  void *v4;
  BOOL v5;

  objc_getAssociatedObject(a1, &_layoutHashesStackCreateIfNeeded___UILogIdenticalLayoutsKey);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    v5 = 1;
  else
    v5 = a2 == 0;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(a1, &_layoutHashesStackCreateIfNeeded___UILogIdenticalLayoutsKey, v4, (void *)1);
  }
  return v4;
}

- (void)_pushLayoutHash
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_opt_class();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v2);
    -[UIView _layoutHashesStackCreateIfNeeded:](a1, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[UIView _layoutHash](a1));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (__UILogIdenticalLayouts)
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        -[UIView _layoutHashesStackCreateIfNeeded:](a1, 1);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v8[0] = v4;
        v8[1] = v5;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 2);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v7);

      }
    }
    objc_sync_exit(v2);

  }
}

void __65__UIView_Hierarchy___validateLayoutHashHasChangedWithLayoutTime___block_invoke(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = a2;
  objc_msgSend(v12, "objectAtIndexedSubscript:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "unsignedIntegerValue");

  v8 = v12;
  if (v7 == a1[5])
  {
    if (__UILogIdenticalLayouts)
    {
      v9 = a1[6];
      v10 = a1[4];
      objc_msgSend(v12, "objectAtIndexedSubscript:", 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      NSLog(CFSTR("WARNING: %fs spent doing likely redundant layout for %@ before and after setNeedsLayout at: %@"), v9, v10, v11);

    }
    *a4 = 1;
    v8 = v12;
  }

}

- (void)_raiseExceptionForBackgroundThreadLayout
{
  id v2;
  void *v3;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  objc_class *v7;
  void *v8;
  objc_class *v9;
  void *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  NSObject *v14;
  objc_class *v15;
  objc_class *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  objc_class *v20;
  void *v21;
  objc_class *v22;
  objc_class *v23;
  const char *v24;
  objc_class *v25;
  objc_class *v26;
  objc_class *v27;
  int v28;
  void *v29;
  __int16 v30;
  id *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1[12];
    if (v2)
    {
      v3 = v2;
      if (pthread_main_np() == 1 || !dyld_program_sdk_at_least())
        goto LABEL_24;
      if (!os_variant_has_internal_diagnostics())
      {
        v4 = qword_1EDDCA750;
        if (!qword_1EDDCA750)
        {
          v4 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v4, (unint64_t *)&qword_1EDDCA750);
        }
        v5 = *(NSObject **)(v4 + 8);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          goto LABEL_24;
        v6 = v5;
        v7 = (objc_class *)objc_opt_class();
        NSStringFromClass(v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = (objc_class *)objc_opt_class();
        NSStringFromClass(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138413058;
        v29 = v8;
        v30 = 2048;
        v31 = a1;
        v32 = 2112;
        v33 = v10;
        v34 = 2048;
        v35 = v3;
        v11 = "Unsupported layout off the main thread for <%@: %p> with associated view controller <%@: %p>";
        goto LABEL_18;
      }
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        goto LABEL_20;
      v22 = (objc_class *)objc_opt_class();
      NSStringFromClass(v22);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = (objc_class *)objc_opt_class();
      NSStringFromClass(v23);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138413058;
      v29 = v8;
      v30 = 2048;
      v31 = a1;
      v32 = 2112;
      v33 = v10;
      v34 = 2048;
      v35 = v3;
      v24 = "Unsupported layout off the main thread for <%@: %p> with associated view controller <%@: %p>";
      goto LABEL_37;
    }
    objc_msgSend(a1, "_viewControllerForAncestor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = pthread_main_np();
    if (v3)
    {
      if (v12 == 1 || !dyld_program_sdk_at_least())
        goto LABEL_24;
      if (!os_variant_has_internal_diagnostics())
      {
        v13 = qword_1EDDCA758;
        if (!qword_1EDDCA758)
        {
          v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
          atomic_store(v13, (unint64_t *)&qword_1EDDCA758);
        }
        v14 = *(NSObject **)(v13 + 8);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_24;
        v6 = v14;
        v15 = (objc_class *)objc_opt_class();
        NSStringFromClass(v15);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = (objc_class *)objc_opt_class();
        NSStringFromClass(v16);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138413058;
        v29 = v8;
        v30 = 2048;
        v31 = a1;
        v32 = 2112;
        v33 = v10;
        v34 = 2048;
        v35 = v3;
        v11 = "Unsupported layout off the main thread for <%@: %p> with nearest ancestor view controller <%@: %p>";
LABEL_18:
        _os_log_impl(&dword_185066000, v6, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v28, 0x2Au);
LABEL_19:

LABEL_20:
LABEL_24:

        return;
      }
      __UIFaultDebugAssertLog();
      v6 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        goto LABEL_20;
      v25 = (objc_class *)objc_opt_class();
      NSStringFromClass(v25);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = (objc_class *)objc_opt_class();
      NSStringFromClass(v26);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138413058;
      v29 = v8;
      v30 = 2048;
      v31 = a1;
      v32 = 2112;
      v33 = v10;
      v34 = 2048;
      v35 = v3;
      v24 = "Unsupported layout off the main thread for <%@: %p> with nearest ancestor view controller <%@: %p>";
LABEL_37:
      _os_log_fault_impl(&dword_185066000, v6, OS_LOG_TYPE_FAULT, v24, (uint8_t *)&v28, 0x2Au);
      goto LABEL_19;
    }
    if (v12 == 1 || !dyld_program_sdk_at_least())
    {
LABEL_23:
      v3 = 0;
      goto LABEL_24;
    }
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v19 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
        goto LABEL_32;
      v27 = (objc_class *)objc_opt_class();
      NSStringFromClass(v27);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138412546;
      v29 = v21;
      v30 = 2048;
      v31 = a1;
      _os_log_fault_impl(&dword_185066000, v19, OS_LOG_TYPE_FAULT, "Unsupported layout off the main thread for <%@: %p> with no associated or ancestor view controller", (uint8_t *)&v28, 0x16u);
    }
    else
    {
      v17 = qword_1EDDCA760;
      if (!qword_1EDDCA760)
      {
        v17 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v17, (unint64_t *)&qword_1EDDCA760);
      }
      v18 = *(NSObject **)(v17 + 8);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v19 = v18;
      v20 = (objc_class *)objc_opt_class();
      NSStringFromClass(v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = 138412546;
      v29 = v21;
      v30 = 2048;
      v31 = a1;
      _os_log_impl(&dword_185066000, v19, OS_LOG_TYPE_ERROR, "Unsupported layout off the main thread for <%@: %p> with no associated or ancestor view controller", (uint8_t *)&v28, 0x16u);
    }

LABEL_32:
    goto LABEL_23;
  }
}

void __74__UIView_Hierarchy___updateConstraintsAsNecessaryAndApplyLayoutFromEngine__block_invoke(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  objc_class *v4;
  const char *Name;
  void *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 86;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 87;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v6;
  objc_msgSend(v6, "superview");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a2 + 72) = v7;

}

void __35__UIView_Hierarchy__layoutSubviews__block_invoke(uint64_t a1)
{
  -[UIView _updateConstraintsAsNecessaryAndApplyLayoutFromEngine](*(_QWORD *)(a1 + 32));
}

- (void)_resetContentStretch
{
  -[CALayer setContentsCenter:](self->_layer, "setContentsCenter:", 0.0, 0.0, 1.0, 1.0);
  -[CALayer setContentsScaling:](self->_layer, "setContentsScaling:", *MEMORY[0x1E0CD29F8]);
}

- (void)setContentStretch:(CGRect)contentStretch
{
  -[CALayer setContentsCenter:](self->_layer, "setContentsCenter:", contentStretch.origin.x, contentStretch.origin.y, contentStretch.size.width, contentStretch.size.height);
}

- (CGRect)contentStretch
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  -[CALayer contentsCenter](self->_layer, "contentsCenter");
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (void)_setContentRectInPixels:(CGRect)a3 forContentSize:(CGSize)a4
{
  double height;
  double width;
  double v6;
  BOOL v7;
  double v8;

  height = a3.size.height;
  width = a3.size.width;
  v6 = 1.0;
  v7 = a3.origin.x == 0.0 && a3.size.width == a4.width;
  v8 = 1.0;
  if (!v7)
  {
    a3.origin.x = a3.origin.x / a4.width;
    v8 = width / a4.width;
  }
  if (a3.origin.y != 0.0 || height != a4.height)
  {
    a3.origin.y = a3.origin.y / a4.height;
    v6 = height / a4.height;
  }
  -[CALayer setContentsRect:](self->_layer, "setContentsRect:", a3.origin.x, a3.origin.y, v8, v6);
}

- (void)_resetContentRect
{
  -[CALayer setContentsRect:](self->_layer, "setContentsRect:", 0.0, 0.0, 1.0, 1.0);
}

- (BOOL)_prefersDrawingWithForcedScaleFactorInClassicMode
{
  void *v2;
  void *v3;
  char v4;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _UIKitBundle();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqual:", v3) ^ 1;

  return v4;
}

- (void)_setShouldRasterize:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  id v7;

  v3 = a3;
  -[CALayer setShouldRasterize:](self->_layer, "setShouldRasterize:");
  -[UIView window](self, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "screen");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  v6 = v7;
  if (v7 && v3)
  {
    objc_msgSend(v7, "scale");
    -[CALayer setRasterizationScale:](self->_layer, "setRasterizationScale:");
    v6 = v7;
  }

}

- (BOOL)needsDisplayOnBoundsChange
{
  return -[CALayer needsDisplayOnBoundsChange](self->_layer, "needsDisplayOnBoundsChange");
}

- (void)setFixedBackgroundPattern:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x2000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFFFDFFFFFFLL | v3;
  -[UIView _updateNeedsDisplayOnBoundsChange](self);
}

- (BOOL)clearsContextBeforeDrawing
{
  return -[CALayer clearsContext](self->_layer, "clearsContext");
}

- (void)setClearsContext:(BOOL)a3
{
  -[CALayer setClearsContext:](self->_layer, "setClearsContext:", a3);
}

- (CGImage)newSnapshotWithRect:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  CGColorSpace *DeviceRGB;
  size_t v9;
  size_t v10;
  uint32_t v11;
  CGContext *v12;
  void *v13;
  void *v14;
  CGImage *v15;
  CGImage *v16;
  CFTypeID v17;
  CGFloat v18;
  CGColor *v19;
  CGColor *v20;
  CGFloat v21;
  CGImage *Image;
  CGAffineTransform v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v9 = vcvtpd_u64_f64(width);
  v10 = vcvtpd_u64_f64(height);
  if (-[UIView isOpaque](self, "isOpaque"))
    v11 = 8198;
  else
    v11 = 8194;
  v12 = CGBitmapContextCreate(0, v9, v10, 8uLL, 0, DeviceRGB, v11);
  CGColorSpaceRelease(DeviceRGB);
  if (self)
  {
    CGContextSaveGState(v12);
    -[CALayer mask](self->_layer, "mask");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      objc_msgSend(v13, "contents");
      v15 = (CGImage *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        v16 = v15;
        v17 = CFGetTypeID(v15);
        if (v17 == CGImageGetTypeID())
        {
          v18 = (double)CGImageGetWidth(v16);
          v25.size.height = (double)CGImageGetHeight(v16);
          v25.origin.x = 0.0;
          v25.origin.y = 0.0;
          v25.size.width = v18;
          CGContextClipToMask(v12, v25, v16);
        }
        CFRelease(v16);
      }
    }
    v19 = -[UIView _backgroundCGColor](self, "_backgroundCGColor");
    if (v19)
    {
      v20 = v19;
      -[UIView frame](self, "frame");
      v28.origin.x = x;
      v28.origin.y = y;
      v28.size.width = width;
      v28.size.height = height;
      if (!CGRectContainsRect(v26, v28))
      {
        CGContextSetFillColorWithColor(v12, v20);
        v21 = (double)CGBitmapContextGetWidth(v12);
        v27.size.height = (double)CGBitmapContextGetHeight(v12);
        v27.origin.x = 0.0;
        v27.origin.y = 0.0;
        v27.size.width = v21;
        CGContextFillRect(v12, v27);
      }
    }
    CGContextTranslateCTM(v12, -x, y + height);
    CGContextScaleCTM(v12, 1.0, -1.0);
    CALayerFrameAffineTransform();
    CGContextConcatCTM(v12, &v24);
    -[CALayer renderInContext:](self->_layer, "renderInContext:", v12);
    CGContextRestoreGState(v12);

  }
  CGContextFlush(v12);
  Image = CGBitmapContextCreateImage(v12);
  CGContextRelease(v12);
  return Image;
}

- (void)recursivelyForceDisplayIfNeeded
{
  uint64_t v3;
  uint64_t i;
  void *v5;
  id v6;

  -[CALayer displayIfNeeded](self->_layer, "displayIfNeeded");
  -[UIView _allSubviews](self, "_allSubviews");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v6, "count");
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      objc_msgSend(v6, "objectAtIndex:", i);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "recursivelyForceDisplayIfNeeded");

    }
  }

}

- (void)_createIOSurfaceWithPadding:(UIEdgeInsets)a3
{
  double right;
  double bottom;
  double left;
  double top;
  double v8;
  double v9;
  double v10;
  double v11;

  right = a3.right;
  bottom = a3.bottom;
  left = a3.left;
  top = a3.top;
  -[UIView bounds](self, "bounds");
  return -[UIView _createRenderingBufferFromRect:padding:gamut:]((__IOSurface *)self, -1, v8, v9, v10, v11, top, left, bottom, right);
}

- (__IOSurface)_createRenderingBufferFromRect:(double)a3 padding:(double)a4 gamut:(double)a5
{
  __IOSurface *v10;
  double v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[2];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[5];

  v10 = a1;
  v28[4] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v16 = a5 - (-a10 - a8);
    v27[0] = CFSTR("src-rect");
    v17 = a6 - (-a9 - a7);
    *(double *)v26 = a3;
    *(double *)&v26[1] = a4;
    *(double *)&v26[2] = a5;
    *(double *)&v26[3] = a6;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v26, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v18;
    v27[1] = CFSTR("dst-rect");
    *(double *)v25 = a8;
    *(double *)&v25[1] = a10;
    *(double *)&v25[2] = a5;
    *(double *)&v25[3] = a6;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v25, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v28[1] = v19;
    v27[2] = CFSTR("dst-size");
    *(double *)v24 = v16;
    *(double *)&v24[1] = v17;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v24, "{CGSize=dd}");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v28[2] = v20;
    v27[3] = CFSTR("dst-gamut");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v28[3] = v21;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 4);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = _UIRenderView(v10, v22, &__block_literal_global_453);

  }
  return v10;
}

- (id)_imageFromRect:(CGRect)a3
{
  return -[UIView _imageFromRect:gamut:](self, "_imageFromRect:gamut:", -1, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (id)_imageFromRect:(CGRect)a3 gamut:(int64_t)a4
{
  void *v6;
  void *v7;
  void *v8;
  __IOSurface *v9;
  __IOSurface *v10;
  CGRect v12;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v13[0] = CFSTR("src-rect");
  v12 = a3;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v12, "{CGRect={CGPoint=dd}{CGSize=dd}}");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v6;
  v13[1] = CFSTR("dst-gamut");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v14[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (self)
  {
    v9 = _UIRenderView(self, v8, &__block_literal_global_453);
    if (v9)
    {
      v10 = v9;
      self = -[UIImage initWithIOSurface:]([UIImage alloc], "initWithIOSurface:", v9);
      CFRelease(v10);
    }
    else
    {
      self = 0;
    }
  }

  return self;
}

+ (void)flush
{
  unint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = flush___s_category;
  if (!flush___s_category)
  {
    v2 = __UILogCategoryGetNode("View", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&flush___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "+[UIView flush] is deprecated, use +[CATransaction flush] instead.", v4, 2u);
  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  LastFlush = CACurrentMediaTime();
}

+ (void)throttledFlush
{
  if (CACurrentMediaTime() - *(double *)&LastFlush >= 0.1)
    +[UIView flush](UIView, "flush");
}

- (id)_deferredAnimationForKey:(id)a3 ignoringKeyFrames:(BOOL)a4
{
  BOOL v4;

  if (__animate)
    v4 = __currentViewAnimationState == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  objc_msgSend((id)__currentViewAnimationState, "_deferredAnimationForView:key:ignoringKeyFrames:", self, a3, a4);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)_initialValueForKey:(id)a3
{
  return -[UIView _backing__initialValueForKey:](self, (uint64_t)a3);
}

+ (void)_animateWithAttributes:(id)a3 animations:(id)a4 completion:(id)a5
{
  void (**v7)(_QWORD);
  void (**v8)(id, uint64_t);
  double v9;
  double v10;
  uint64_t v11;
  double *v12;

  v12 = (double *)a3;
  v7 = (void (**)(_QWORD))a4;
  v8 = (void (**)(id, uint64_t))a5;
  if (v12)
  {
    v9 = v12[1];
    v10 = v12[2];
    v11 = *((_QWORD *)v12 + 3);
    if (*((_BYTE *)v12 + 48))
      +[UIView _animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:](UIView, "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", v11, v7, v8, v9, v10, v12[9], v12[10], v12[7], v12[8]);
    else
      +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", v11, v7, v8, v9, v10);
  }
  else
  {
    v7[2](v7);
    if (v8)
      v8[2](v8, 1);
  }

}

+ (void)beginAnimations:(id)a3
{
  objc_msgSend(a1, "beginAnimations:context:", a3, 0);
}

+ (void)beginAnimations:(NSString *)animationID context:(void *)context
{
  +[UIViewAnimationState pushViewAnimationState:context:](UIViewAnimationState, "pushViewAnimationState:context:", animationID, context);
}

+ (void)commitAnimations
{
  +[UIViewAnimationState popAnimationState](UIViewAnimationState, "popAnimationState");
}

+ (BOOL)_isInKeyframeAnimationBlockWithAnimationsEnabled
{
  int v3;

  v3 = objc_msgSend((id)__currentViewAnimationState, "_isKeyframeAnimation");
  if (v3)
    LOBYTE(v3) = objc_msgSend(a1, "areAnimationsEnabled");
  return v3;
}

+ (void)setAnimationDelegate:(id)delegate
{
  id v4;
  id v5;

  v4 = delegate;
  if (__currentViewAnimationState && *(id *)(__currentViewAnimationState + 32) != v4)
  {
    v5 = v4;
    objc_storeStrong((id *)(__currentViewAnimationState + 32), delegate);
    v4 = v5;
  }

}

+ (void)setAnimationPosition:(CGPoint)a3
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = __currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    if (a3.x == *MEMORY[0x1E0C9D538] && a3.y == *(double *)(MEMORY[0x1E0C9D538] + 8))
    {
      v6 = 0;
    }
    else
    {
      v8 = CFSTR("inputPosition");
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9[0] = v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
      v6 = objc_claimAutoreleasedReturnValue();

      v3 = __currentViewAnimationState;
    }
    v7 = *(void **)(v3 + 120);
    *(_QWORD *)(v3 + 120) = v6;

  }
}

+ (id)_performWithAnimationTracking:(id)a3
{
  void (**v4)(_QWORD);
  void *v5;

  v4 = (void (**)(_QWORD))a3;
  objc_msgSend(a1, "_startAnimationTracking");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v4[2](v4);

  objc_msgSend(a1, "_finishAnimationTracking");
  return v5;
}

uint64_t __48__UIView_Animation___addCompletionWithPosition___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

+ (void)_addOrPerformCompletionWithPosition:(id)a3
{
  void (**v4)(id, uint64_t, _QWORD);

  v4 = (void (**)(id, uint64_t, _QWORD))a3;
  if ((objc_msgSend(a1, "_addCompletionWithPosition:") & 1) == 0)
    v4[2](v4, 1, 0);

}

+ (void)_completeAnimationWithUUID:(id)a3 duration:(double)a4 curve:(int64_t)a5 reverse:(BOOL)a6
{
  _BOOL4 v6;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  __CFString *v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float v39;
  double v40;
  double v41;
  double v42;
  void *v43;
  double v44;
  double v45;
  float v46;
  float v47;
  BOOL v48;
  double v49;
  double v50;
  char isKindOfClass;
  void *v52;
  void *v53;
  double v54;
  double v55;
  void *v56;
  char v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  void *v67;
  uint64_t v68;
  id obj;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  _BOOL4 v78;
  id v79;
  id v80;
  uint64_t v81;
  _QWORD v82[4];
  id v83;
  id v84;
  __CFString *v85;
  id v86;
  _QWORD v87[4];
  id v88;
  __CFString *v89;
  _QWORD v90[4];
  id v91;
  void *v92;
  __CFString *v93;
  id v94;
  _QWORD block[4];
  void *v96;
  _QWORD aBlock[5];
  id v98;
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  void *v108;
  _BYTE v109[128];
  _BYTE v110[128];
  uint64_t v111;

  v6 = a6;
  v111 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  if (v8)
  {
    v75 = v8;
    objc_msgSend((id)qword_1EDDCA650, "objectForKey:");
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v104, v110, 16);
    if (!v71)
      goto LABEL_69;
    v70 = *(_QWORD *)v105;
    v76 = *MEMORY[0x1E0CD2B58];
    v73 = *MEMORY[0x1E0CD3058];
    v78 = v6;
    while (1)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v105 != v70)
          objc_enumerationMutation(obj);
        v72 = v9;
        v10 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * v9);
        if (v6)
          objc_msgSend(v10, "_setFinishedPosition:", 1);
        v80 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v100 = 0u;
        v101 = 0u;
        v102 = 0u;
        v103 = 0u;
        v74 = v10;
        objc_msgSend(v10, "_trackedAnimations");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "reverseObjectEnumerator");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        v79 = v12;
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
        if (v13)
        {
          v14 = v13;
          v81 = *(_QWORD *)v101;
          do
          {
            v15 = 0;
            do
            {
              if (*(_QWORD *)v101 != v81)
                objc_enumerationMutation(v79);
              v16 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * v15);
              objc_getAssociatedObject(v16, &unk_1EDDCA603);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_getAssociatedObject(v16, &unk_1EDDCA604);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "animationForKey:", v17);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_msgSend(v80, "containsObject:", v19) & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  objc_msgSend(v16, "keyPath");
                  v20 = objc_claimAutoreleasedReturnValue();
                  if (v20)
                  {
                    v21 = (__CFString *)v20;
                    v22 = 0;
                    goto LABEL_24;
                  }
LABEL_21:
                  v23 = MEMORY[0x1E0C809B0];
                  aBlock[0] = MEMORY[0x1E0C809B0];
                  aBlock[1] = 3221225472;
                  aBlock[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke;
                  aBlock[3] = &unk_1E16B47A8;
                  aBlock[4] = v16;
                  v98 = v19;
                  v99 = v17;
                  v24 = _Block_copy(aBlock);
                  block[0] = v23;
                  block[1] = 3221225472;
                  block[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2326;
                  block[3] = &unk_1E16B1BF8;
                  v96 = v24;
                  v25 = qword_1EDDCA768;
                  v26 = v24;
                  v27 = v26;
                  if (v25 == -1)
                  {
                    v28 = v26;
                  }
                  else
                  {
                    dispatch_once(&qword_1EDDCA768, block);
                    v28 = v96;
                  }

                  v21 = 0;
                  v22 = 1;
                }
                else
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                    goto LABEL_21;
                  v22 = 0;
                  v21 = CFSTR("transition");
                }
LABEL_24:
                if ((objc_msgSend(v18, "hasBeenCommitted") & 1) != 0)
                {
                  if (a4 == 0.0)
                  {
                    objc_msgSend(v18, "removeAnimationForKey:", v17);
                    if (v21 && v6)
                    {
                      v87[0] = MEMORY[0x1E0C809B0];
                      v87[1] = 3221225472;
                      v87[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_3;
                      v87[3] = &unk_1E16B1B50;
                      v88 = v18;
                      v89 = v21;
                      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v87);

                      v29 = v88;
                      goto LABEL_61;
                    }
LABEL_62:

                    goto LABEL_63;
                  }
                  v29 = (void *)objc_msgSend(v19, "copy");
                  if (v29)
                  {
                    objc_msgSend(v18, "convertTime:fromLayer:", 0, CACurrentMediaTime());
                    v36 = v35;
                    objc_msgSend(v29, "beginTime");
                    v38 = v36 - v37;
                    objc_msgSend(v29, "speed");
                    v40 = v38 * v39;
                    objc_msgSend(v29, "timeOffset");
                    v42 = v40 - v41;
                    objc_msgSend(v29, "timingFunction");
                    v43 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v29, "duration");
                    v45 = v42 / v44;
                    *(float *)&v45 = v45;
                    objc_msgSend(v43, "_solveForInput:", v45);
                    v47 = v46;

                    v48 = v47 == 0.0;
                    if (!v78)
                      v48 = v47 == 1.0;
                    v49 = 0.0;
                    if (!v48)
                    {
                      v50 = v47;
                      if (!v78)
                        v50 = 1.0 - v47;
                      v49 = a4 / v50;
                    }
                    if (v78)
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        if (objc_msgSend(v16, "isAdditive"))
                        {
                          objc_opt_class();
                          isKindOfClass = objc_opt_isKindOfClass();
                          if (v21)
                          {
                            if ((isKindOfClass & 1) != 0)
                            {
                              objc_msgSend(v16, "keyPath");
                              v52 = (void *)objc_claimAutoreleasedReturnValue();
                              _UIFromValueForAnimation(v29, v52, v18, v75);
                              v53 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v29, "setFromValue:", v53);

                              objc_msgSend(v29, "setAdditive:", 0);
                              objc_msgSend(v29, "setToValue:", 0);
                            }
                          }
                        }
                      }
                      objc_msgSend(v29, "setAutoreverses:", 1);
                      v54 = -v49 - (v49 - a4);
                    }
                    else
                    {
                      objc_msgSend(v29, "setAutoreverses:", 1);
                      v54 = -(v49 - a4);
                    }
                    objc_msgSend(v29, "setBeginTime:", v54);
                    if (v49 == 0.0)
                      v55 = 0.001;
                    else
                      v55 = v49;
                    objc_msgSend(v29, "setDuration:", v55);
                    objc_msgSend(v29, "setBeginTimeMode:", CFSTR("relative"));
                    objc_msgSend(v29, "setFillMode:", v76);
                    objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", v73);
                    v56 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v29, "setTimingFunction:", v56);

                    if (v78)
                    {
                      objc_opt_class();
                      v57 = objc_opt_isKindOfClass();
                      if (v21)
                      {
                        if ((v57 & 1) != 0)
                        {
                          objc_msgSend(v18, "valueForKeyPath:", v21);
                          v58 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v29, "setToValue:", v58);

                        }
                      }
                    }
                    objc_msgSend(MEMORY[0x1E0CD2700], "animation");
                    v59 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v29, "delegate");
                    v60 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v59, "setDelegate:", v60);

                    objc_msgSend(v29, "setDelegate:", 0);
                    v108 = v29;
                    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v108, 1);
                    v61 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v59, "setAnimations:", v61);

                    objc_msgSend(v59, "setFillMode:", v76);
                    objc_msgSend(v59, "setDuration:", a4);
                    _UIGetAnimationCurveSpline(a5, v62, v63, v64, v65);
                    v66 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v59, "setTimingFunction:", v66);

                    objc_msgSend(v74, "_incrementDidEndCount");
                    objc_msgSend(v18, "addAnimation:forKey:", v59, v17);
                    objc_msgSend(v18, "animationForKey:", v17);
                    v67 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v67)
                      objc_msgSend(v80, "addObject:", v67);
                    if (v21 && v78)
                    {
                      v82[0] = MEMORY[0x1E0C809B0];
                      v82[1] = 3221225472;
                      v82[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_4;
                      v82[3] = &unk_1E16B51E8;
                      v83 = v18;
                      v84 = v29;
                      v85 = v21;
                      v86 = v75;
                      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v82);

                    }
                    v6 = v78;
                  }
                }
                else if (v6)
                {
                  objc_msgSend(v18, "removeAnimationForKey:", v17);
                  if ((v22 & 1) != 0)
                    goto LABEL_62;
                  v90[0] = MEMORY[0x1E0C809B0];
                  v90[1] = 3221225472;
                  v90[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2;
                  v90[3] = &unk_1E16B51E8;
                  v91 = v18;
                  v92 = v16;
                  v93 = v21;
                  v94 = v75;
                  +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v90);

                  v29 = v91;
                }
                else
                {
                  v29 = (void *)objc_msgSend(v16, "copy");
                  _UIGetAnimationCurveSpline(a5, v30, v31, v32, v33);
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v29, "setTimingFunction:", v34);

                  v6 = v78;
                  objc_msgSend(v18, "addAnimation:forKey:", v29, v17);
                }
LABEL_61:

                goto LABEL_62;
              }
LABEL_63:

              ++v15;
            }
            while (v14 != v15);
            v68 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
            v14 = v68;
          }
          while (v68);
        }

        v9 = v72 + 1;
      }
      while (v72 + 1 != v71);
      v71 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v104, v110, 16);
      if (!v71)
      {
LABEL_69:

        v8 = v75;
        break;
      }
    }
  }

}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke(_QWORD *a1)
{
  char v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = objc_opt_respondsToSelector();
  v3 = (void *)a1[4];
  if ((v2 & 1) != 0)
    objc_msgSend(v3, "debugDescription");
  else
    objc_msgSend(v3, "description");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();
  v6 = (void *)a1[5];
  if ((v5 & 1) != 0)
    objc_msgSend(v6, "debugDescription");
  else
    objc_msgSend(v6, "description");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = kFixedAnimationDuration_block_invoke_2___s_category;
  if (!kFixedAnimationDuration_block_invoke_2___s_category)
  {
    v8 = __UILogCategoryGetNode("Animation", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v8, (unint64_t *)&kFixedAnimationDuration_block_invoke_2___s_category);
  }
  v9 = *(NSObject **)(v8 + 8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = a1[6];
    v11 = (void *)MEMORY[0x1E0CB3978];
    v12 = v9;
    objc_msgSend(v11, "callStackSymbols");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138413058;
    v15 = v4;
    v16 = 2112;
    v17 = v7;
    v18 = 2112;
    v19 = v10;
    v20 = 2112;
    v21 = v13;
    _os_log_impl(&dword_185066000, v12, OS_LOG_TYPE_ERROR, "Attempting to complete an animation without a keyPath. tracked animation=%@; layer animation=%@, animationKey=%@; trace=%@;",
      (uint8_t *)&v14,
      0x2Au);

  }
}

uint64_t __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2326(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  _UIFromValueForAnimation(*(void **)(a1 + 40), *(void **)(a1 + 48), v2, *(void **)(a1 + 56));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKeyPath:", v3, *(_QWORD *)(a1 + 48));

}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "presentationLayer");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "valueForKeyPath:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKeyPath:", v3, *(_QWORD *)(a1 + 40));

}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  _UIFromValueForAnimation(*(void **)(a1 + 40), *(void **)(a1 + 48), v2, *(void **)(a1 + 56));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKeyPath:", v3, *(_QWORD *)(a1 + 48));

}

void __44__UIView_Animation___stopAnimationWithUUID___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  _UIFromValueForAnimation(*(void **)(a1 + 40), *(void **)(a1 + 48), v2, *(void **)(a1 + 56));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKeyPath:", v3, *(_QWORD *)(a1 + 48));

}

void __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  char v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_2;
  v6[3] = &unk_1E16B7F38;
  v7 = v3;
  v8 = *(_BYTE *)(a1 + 40);
  v5 = v3;
  objc_msgSend(v4, "_addCompletion:", v6);

}

uint64_t __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_animationDidStopWithNilAnimationFinished:", *(_BYTE *)(a1 + 40) == 0);
}

+ (void)_finalizeStoppedAnimationWithUUID:(id)a3 reverseAnimation:(BOOL)a4
{
  objc_msgSend(a1, "_finalizeStoppedAnimationWithUUID:reverseAnimation:state:performCompletionsImmediately:", a3, a4, 0, 0);
}

+ (id)_alongsideAnimations
{
  return _Block_copy((const void *)qword_1EDDCA658);
}

+ (void)_setAlongsideAnimations:(id)a3 toRunByEndOfBlock:(id)a4 animated:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  void (**v9)(_QWORD);
  void (**v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v5 = a5;
  v8 = a3;
  v9 = (void (**)(_QWORD))a4;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v11 = MEMORY[0x1E0C809B0];
  v12 = 3221225472;
  v13 = __72__UIView_Animation___setAlongsideAnimations_toRunByEndOfBlock_animated___block_invoke;
  v14 = &unk_1E16B1E40;
  v10 = (void (**)(_QWORD))v8;
  v15 = v10;
  v16 = &v17;
  objc_msgSend(a1, "_setAlongsideAnimations:", &v11);
  v9[2](v9);
  if (!*((_BYTE *)v18 + 24))
  {
    if (dyld_program_sdk_at_least()
      && +[UIViewPropertyAnimator _trackingAnimationsCurrentlyEnabled](UIViewPropertyAnimator, "_trackingAnimationsCurrentlyEnabled", v11, v12, v13, v14)&& +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled")&& v5)
    {
      +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", &__block_literal_global_2331_0, 0.2);
    }
    else
    {
      v10[2](v10);
      +[UIView _setAlongsideAnimations:](UIView, "_setAlongsideAnimations:", 0);
    }
  }

  _Block_object_dispose(&v17, 8);
}

uint64_t __72__UIView_Animation___setAlongsideAnimations_toRunByEndOfBlock_animated___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = __UIVIEW_IS_EXECUTING_ALONGSIDE_ANIMATION_BLOCK__(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

+ (void)_inheritAnimationParameters
{
  uint64_t v2;
  uint64_t v3;

  v2 = __currentViewAnimationState;
  v3 = *(_QWORD *)(__currentViewAnimationState + 8);
  if (v3)
  {
    *(_QWORD *)(__currentViewAnimationState + 40) = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v2 + 88) = *(_QWORD *)(v3 + 88);
  }
}

void __42__UIView_Animation__setAnimationsEnabled___block_invoke()
{
  unint64_t v0;
  NSObject *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v0 = kFixedAnimationDuration_block_invoke_3___s_category;
  if (!kFixedAnimationDuration_block_invoke_3___s_category)
  {
    v0 = __UILogCategoryGetNode("Animation", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v0, (unint64_t *)&kFixedAnimationDuration_block_invoke_3___s_category);
  }
  v1 = *(NSObject **)(v0 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v2 = (void *)MEMORY[0x1E0CB3978];
    v3 = v1;
    objc_msgSend(v2, "callStackSymbols");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 138412290;
    v6 = v4;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "+[UIView setAnimationsEnabled:] being called from a background thread. Performing any operation from a background thread on UIView or a subclass is not supported and may result in unexpected and insidious behavior. trace=%@", (uint8_t *)&v5, 0xCu);

  }
}

+ (void)_performWithAnimation:(id)a3
{
  void (**v3)(_QWORD);
  _BOOL8 v4;

  v3 = (void (**)(_QWORD))a3;
  v4 = +[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled");
  +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 1);
  v3[2](v3);

  +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", v4);
}

+ (void)_conditionallyPerformWithoutAnimation:(BOOL)a3 layout:(id)a4
{
  if (a3)
    objc_msgSend(a1, "performWithoutAnimation:", a4);
  else
    (*((void (**)(id))a4 + 2))(a4);
}

+ (void)setAnimationDuration:(NSTimeInterval)duration
{
  if (__currentViewAnimationState)
    *(NSTimeInterval *)(__currentViewAnimationState + 40) = duration;
}

+ (void)setAnimationDelay:(NSTimeInterval)delay
{
  if (__currentViewAnimationState)
    *(NSTimeInterval *)(__currentViewAnimationState + 48) = delay;
}

+ (void)setAnimationFrameInterval:(double)a3
{
  if (__currentViewAnimationState)
    *(double *)(__currentViewAnimationState + 56) = a3;
}

+ (void)setAnimationStartDate:(NSDate *)startDate
{
  uint64_t v3;

  if (__currentViewAnimationState)
  {
    -[NSDate timeIntervalSinceReferenceDate](startDate, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(__currentViewAnimationState + 80) = v3;
  }
}

+ (void)setAnimationStartTime:(double)a3
{
  if (__currentViewAnimationState)
    *(double *)(__currentViewAnimationState + 80) = a3;
}

+ (void)setAnimationPreventsAdditive:(BOOL)a3
{
  if (__currentViewAnimationState)
    *(_BYTE *)(__currentViewAnimationState + 209) = a3;
}

+ (void)setAnimationCurve:(UIViewAnimationCurve)curve
{
  if (__currentViewAnimationState)
    *(_QWORD *)(__currentViewAnimationState + 88) = curve;
}

+ (void)setAnimationRepeatCount:(float)repeatCount
{
  if (__currentViewAnimationState)
    *(float *)(__currentViewAnimationState + 96) = repeatCount;
}

+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses
{
  char v3;

  if (__currentViewAnimationState)
  {
    if (repeatAutoreverses)
      v3 = 8;
    else
      v3 = 0;
    *(_BYTE *)(__currentViewAnimationState + 172) = *(_BYTE *)(__currentViewAnimationState + 172) & 0xF7 | v3;
  }
}

+ (void)setAnimationBeginsFromCurrentState:(BOOL)fromCurrentState
{
  char v3;

  if (__currentViewAnimationState)
  {
    if (fromCurrentState)
      v3 = 2;
    else
      v3 = 0;
    *(_BYTE *)(__currentViewAnimationState + 172) = *(_BYTE *)(__currentViewAnimationState + 172) & 0xFD | v3;
  }
}

+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache
{
  _BOOL4 v5;
  UIView *v8;
  uint64_t v9;
  char v10;
  UIView *v11;

  v5 = cache;
  v8 = view;
  v9 = __currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    *(_QWORD *)(__currentViewAnimationState + 104) = transition;
    v11 = v8;
    objc_storeStrong((id *)(v9 + 112), view);
    v8 = v11;
    if (v5)
      v10 = 4;
    else
      v10 = 0;
    *(_BYTE *)(__currentViewAnimationState + 172) = *(_BYTE *)(__currentViewAnimationState + 172) & 0xFB | v10;
  }

}

+ (void)setAnimationWillStartSelector:(SEL)selector
{
  if (__currentViewAnimationState)
    *(_QWORD *)(__currentViewAnimationState + 152) = selector;
}

+ (void)setAnimationDidStopSelector:(SEL)selector
{
  if (__currentViewAnimationState)
    *(_QWORD *)(__currentViewAnimationState + 160) = selector;
}

- (void)_clearAnimationFilters
{
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  id v11;
  void *v12;
  id v13;

  -[UIView layer](self, "layer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "filters");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (id)objc_msgSend(v4, "mutableCopy");

  v5 = objc_msgSend(v13, "count");
  v6 = (v5 - 1);
  if (v5 - 1 >= 0)
  {
    do
    {
      objc_msgSend(v13, "objectAtIndex:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "name");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("curl"));

      if (v9)
        objc_msgSend(v13, "removeObjectAtIndex:", v6);

    }
    while (v6-- > 0);
  }
  if (objc_msgSend(v13, "count"))
    v11 = v13;
  else
    v11 = 0;
  -[UIView layer](self, "layer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setFilters:", v11);

}

- (void)_removePropertyAnimationsForLayerKeyPath:(id)a3
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  void *v21;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v23 = a3;
  if (!v23)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 16740, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("keyPath != nil"));

  }
  -[UIView layer](self, "layer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "animationKeys");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v29 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
        objc_msgSend(v5, "animationForKey:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v13, "keyPath");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v23, "isEqualToString:", v14);

          if (v15)
            objc_msgSend(v22, "addObject:", v12);
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    }
    while (v9);
  }

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v16 = v22;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v25;
    do
    {
      for (j = 0; j != v18; ++j)
      {
        if (*(_QWORD *)v25 != v19)
          objc_enumerationMutation(v16);
        objc_msgSend(v5, "removeAnimationForKey:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * j));
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v18);
  }

}

- (void)_enumerateDescendentViews:(id)a3
{
  void (**v4)(id, UIView *, _BYTE *);
  void *v5;
  char v6;

  v4 = (void (**)(id, UIView *, _BYTE *))a3;
  v6 = 0;
  v4[2](v4, self, &v6);
  if (!v6)
  {
    -[UIView subviews](self, "subviews");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    _enumerateViewForest(v5, (uint64_t)v4, &v6);

  }
}

+ (double)_durationForRotationFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4
{
  double result;

  objc_msgSend((id)UIApp, "windowRotationDuration");
  +[UIView _durationForRotationFromInterfaceOrientation:toInterfaceOrientation:withBaseDuration:](UIView, "_durationForRotationFromInterfaceOrientation:toInterfaceOrientation:withBaseDuration:", a3, a4);
  return result;
}

+ (void)_performWithDurationOverride:(double)a3 animations:(id)a4
{
  double v5;
  double v6;
  void (**v7)(void);

  v7 = (void (**)(void))a4;
  +[UIView _currentAnimationDuration](UIView, "_currentAnimationDuration");
  v6 = v5;
  +[UIView setAnimationDuration:](UIView, "setAnimationDuration:", a3);
  if (v7)
    v7[2]();
  +[UIView setAnimationDuration:](UIView, "setAnimationDuration:", v6);

}

+ (void)_setupAnimationWithDuration:(double)a3 delay:(double)a4 view:(id)a5 options:(unint64_t)a6 factory:(id)a7 animations:(id)a8 start:(id)a9 animationStateGenerator:(id)a10 completion:(id)a11
{
  id v19;
  void (**v20)(_QWORD);
  void (**v21)(_QWORD);
  id v22;
  int v23;
  id v24;
  id v25;
  _QWORD *v26;
  _QWORD *v27;
  id v28;
  void *v29;
  uint64_t v30;
  _BOOL4 v31;
  id WeakRetained;
  void *v33;
  id v34;
  id *v35;
  id *v36;
  unint64_t v37;
  NSObject *v38;
  NSObject *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint8_t buf[16];
  uint8_t v45[16];

  v19 = a5;
  v41 = a7;
  v20 = (void (**)(_QWORD))a8;
  v43 = a9;
  v21 = (void (**)(_QWORD))a10;
  v42 = a11;
  if (pthread_main_np() != 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      __UIFaultDebugAssertLog();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v45 = 0;
        _os_log_fault_impl(&dword_185066000, v39, OS_LOG_TYPE_FAULT, "UIView animation API is being called from a background thread. Performing any operation from a background thread on UIView or a subclass is not supported and may result in unexpected and insidious behavior.", v45, 2u);
      }

    }
    else
    {
      v37 = _setupAnimationWithDuration_delay_view_options_factory_animations_start_animationStateGenerator_completion____s_category;
      if (!_setupAnimationWithDuration_delay_view_options_factory_animations_start_animationStateGenerator_completion____s_category)
      {
        v37 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v37, (unint64_t *)&_setupAnimationWithDuration_delay_view_options_factory_animations_start_animationStateGenerator_completion____s_category);
      }
      v38 = *(NSObject **)(v37 + 8);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_185066000, v38, OS_LOG_TYPE_ERROR, "UIView animation API is being called from a background thread. Performing any operation from a background thread on UIView or a subclass is not supported and may result in unexpected and insidious behavior.", buf, 2u);
      }
    }
  }
  v22 = (id)__currentViewAnimationState;
  if ((a6 & 0x400) == 0
    || (objc_msgSend(a1, "_isAnimationTracking") & 1) != 0
    || (objc_msgSend(a1, "_shouldTrackAnimationsWithAnimator") & 1) != 0)
  {
    v23 = 0;
    if ((a6 & 0x200) != 0)
      goto LABEL_9;
  }
  else
  {
    v28 = (id)objc_msgSend(a1, "_startAnimationTracking");
    v23 = 1;
    if ((a6 & 0x200) != 0)
      goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v24 = a1;
    v25 = v19;
    v26 = v22;
    +[UIViewAnimationState pushViewAnimationState:context:](UIViewSpringAnimationState, "pushViewAnimationState:context:", 0, 0);
    v27 = (_QWORD *)__currentViewAnimationState;
    *(_QWORD *)(__currentViewAnimationState + 280) = v26[35];
    v27[36] = v26[36];
    v27[37] = v26[37];
    v27[38] = v26[38];

    v19 = v25;
    goto LABEL_12;
  }
LABEL_9:
  v24 = a1;
  if (v21)
    v21[2](v21);
  else
    +[UIViewAnimationState pushViewAnimationState:context:](UIViewAnimationState, "pushViewAnimationState:context:", 0, 0);
LABEL_12:
  v29 = v41;
  if (!__currentViewAnimationState)
    goto LABEL_36;
  objc_msgSend((id)__currentViewAnimationState, "setupWithDuration:delay:view:options:factory:parentState:start:completion:", v19, a6, v41, v22, v43, v42, a3, a4);
  v30 = __currentViewAnimationState;
  if (!*(_QWORD *)(__currentViewAnimationState + 104))
  {
    v31 = 0;
    if (!v20)
      goto LABEL_19;
LABEL_17:
    if (!v31)
    {
      v20[2](v20);
      v30 = __currentViewAnimationState;
      if (!__currentViewAnimationState)
        goto LABEL_33;
    }
    goto LABEL_19;
  }
  v31 = (*(_BYTE *)(__currentViewAnimationState + 172) & 4) == 0;
  if (v20)
    goto LABEL_17;
LABEL_19:
  if (!*(_DWORD *)(v30 + 168))
  {
    v40 = v19;
    if (!v22)
    {
      v34 = 0;
LABEL_32:

      v19 = v40;
      goto LABEL_33;
    }
    WeakRetained = objc_loadWeakRetained((id *)(v30 + 272));
    if (WeakRetained)
    {
      v33 = WeakRetained;
      v34 = 0;
    }
    else
    {
      if ((a6 & 0x2008) != 0)
      {
        v34 = 0;
        goto LABEL_31;
      }
      v35 = (id *)v22;
      do
      {
        v34 = objc_loadWeakRetained(v35 + 34);
        if (v34)
          break;
        v36 = (id *)v35[1];

        v35 = v36;
      }
      while (v36);

      if ((objc_msgSend(v34, "isInterruptible") & 1) != 0)
        goto LABEL_31;
      objc_msgSend(v34, "_viewAnimationState");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "_decrementDidEndCount");
    }

LABEL_31:
    v29 = v41;
    goto LABEL_32;
  }
LABEL_33:
  +[UIViewAnimationState popAnimationState](UIViewAnimationState, "popAnimationState");
  if (v20 && v31)
    objc_msgSend(v24, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, a6 & 0xFFFFFFFFFF8FFF7FLL, v29, v20, 0, 0, a3, a4, 0);
LABEL_36:
  if (v23)
    objc_msgSend(v24, "_finishAnimationTracking");

}

+ (void)_animateWithAnimationSettings:(id)a3 animations:(id)a4 completion:(id)a5
{
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v7 = a4;
  v8 = (void *)MEMORY[0x1E0D016B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __89__UIView_UIViewAnimationWithBlocks___animateWithAnimationSettings_animations_completion___block_invoke;
  v10[3] = &unk_1E16B1BA0;
  v11 = v7;
  v9 = v7;
  objc_msgSend(v8, "tryAnimatingWithSettings:actions:completion:", a3, v10, a5);

}

uint64_t __89__UIView_UIViewAnimationWithBlocks___animateWithAnimationSettings_animations_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

+ (void)animateWithSpringDuration:(NSTimeInterval)duration bounce:(CGFloat)bounce initialSpringVelocity:(CGFloat)velocity delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  _QWORD v20[7];
  double v21;
  double v22;
  double v23;
  double v24;

  v23 = 0.0;
  v24 = 0.0;
  v21 = 0.0;
  v22 = 0.0;
  v15 = completion;
  v16 = animations;
  +[UISpringTimingParameters _convertBounce:toDampingRatio:](UISpringTimingParameters, "_convertBounce:toDampingRatio:", &v24, bounce);
  +[UISpringTimingParameters _convertDampingRatio:response:toMass:stiffness:damping:](UISpringTimingParameters, "_convertDampingRatio:response:toMass:stiffness:damping:", &v23, &v22, &v21, v24, duration);
  v18 = v22;
  v17 = v23;
  v19 = v21;
  objc_opt_self();
  _durationOfSpringAnimation(v17, v18, v19, velocity);
  v20[1] = 3221225472;
  v20[2] = __128__UIView_UIViewAnimationWithBlocks__animateWithSpringDuration_bounce_initialSpringVelocity_delay_options_animations_completion___block_invoke;
  v20[3] = &__block_descriptor_56_e5_v8__0l;
  *(NSTimeInterval *)&v20[4] = duration;
  *(CGFloat *)&v20[5] = bounce;
  *(CGFloat *)&v20[6] = velocity;
  v20[0] = MEMORY[0x1E0C809B0];
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, options, 0, v16, 0, v20, v15);

}

uint64_t __128__UIView_UIViewAnimationWithBlocks__animateWithSpringDuration_bounce_initialSpringVelocity_delay_options_animations_completion___block_invoke(double *a1)
{
  +[UIViewAnimationState pushViewAnimationState:context:](UIViewSpringAnimationState, "pushViewAnimationState:context:", 0, 0);
  return objc_msgSend((id)__currentViewAnimationState, "generateSpringPropertiesForPerceptualDuration:bounce:velocity:", a1[4], a1[5], a1[6]);
}

+ (void)transitionFromView:(UIView *)fromView toView:(UIView *)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void *)completion
{
  UIView *v12;
  void *v13;
  void *v14;
  id *v15;
  id *v16;
  UIView *v17;
  UIView *v18;
  UIView *v19;
  UIView *v20;
  UIView *v21;
  _QWORD v22[4];
  UIView *v23;
  UIView *v24;
  _QWORD v25[4];
  UIView *v26;
  UIView *v27;

  v21 = fromView;
  v12 = toView;
  v13 = completion;
  if ((options & 0x100) != 0)
  {
    -[UIView setHidden:](v12, "setHidden:", 1);
    -[UIView superview](v21, "superview");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke;
    v25[3] = &unk_1E16B1B50;
    v15 = (id *)&v26;
    v16 = (id *)&v27;
    v26 = v21;
    v27 = v12;
    v19 = v12;
    v20 = v21;
    objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", v14, options, 0, v25, 0, 0, duration, 0.0, v13);
  }
  else
  {
    -[UIView superview](v21, "superview");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke_2;
    v22[3] = &unk_1E16B1B50;
    v15 = (id *)&v23;
    v16 = (id *)&v24;
    v23 = v21;
    v24 = v12;
    v17 = v12;
    v18 = v21;
    objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", v14, options, 0, v22, 0, 0, duration, 0.0, v13);
  }

}

uint64_t __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
  return objc_msgSend(*(id *)(a1 + 40), "setHidden:", 0);
}

uint64_t __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke_2(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "superview");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addSubview:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

+ (void)_transitionWithView:(id)a3 duration:(double)a4 options:(unint64_t)a5 transitionOptions:(id)a6 completion:(id)a7
{
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v12 = a6;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __103__UIView_UIViewAnimationWithBlocks___transitionWithView_duration_options_transitionOptions_completion___block_invoke;
  v14[3] = &unk_1E16B1B28;
  v15 = v12;
  v13 = v12;
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", a3, a5, 0, v14, 0, 0, a4, 0.0, a7);

}

void __103__UIView_UIViewAnimationWithBlocks___transitionWithView_duration_options_transitionOptions_completion___block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(__currentViewAnimationState + 120), *(id *)(a1 + 32));
}

+ (void)_animateWithFilter:(int)a3 filterView:(id)a4 filterValue:(double)a5 duration:(double)a6 delay:(double)a7 options:(unint64_t)a8 completion:(id)a9
{
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  double v20;
  int v21;

  v16 = a4;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __113__UIView_UIViewAnimationWithBlocks___animateWithFilter_filterView_filterValue_duration_delay_options_completion___block_invoke;
  v18[3] = &unk_1E16D6650;
  v21 = a3;
  v19 = v16;
  v20 = a5;
  v17 = v16;
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, a8, 0, v18, 0, 0, a6, a7, a9);

}

float __113__UIView_UIViewAnimationWithBlocks___animateWithFilter_filterView_filterValue_duration_delay_options_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  float result;

  v2 = __currentViewAnimationState;
  *(_DWORD *)(__currentViewAnimationState + 128) = *(_DWORD *)(a1 + 48);
  objc_storeStrong((id *)(v2 + 136), *(id *)(a1 + 32));
  result = *(double *)(a1 + 40);
  *(float *)(__currentViewAnimationState + 144) = result;
  return result;
}

+ (void)performSystemAnimation:(UISystemAnimation)animation onViews:(NSArray *)views options:(UIViewAnimationOptions)options animations:(void *)parallelAnimations completion:(void *)completion
{
  NSArray *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD aBlock[4];
  NSArray *v25;
  id v26;
  uint64_t *v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;

  v11 = views;
  v12 = parallelAnimations;
  v13 = completion;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0;
  v29 = (double *)&v28;
  v30 = 0x2020000000;
  v31 = 0;
  v15 = MEMORY[0x1E0C809B0];
  if (animation)
  {
    v16 = 0;
  }
  else
  {
    options |= 0x30000uLL;
    v31 = 0x3FE0000000000000;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke;
    aBlock[3] = &unk_1E16C0EA8;
    v25 = v11;
    v27 = &v28;
    v26 = v14;
    v16 = _Block_copy(aBlock);

  }
  if (v12)
    +[UIView _setAlongsideAnimations:](UIView, "_setAlongsideAnimations:", v12);
  v17 = v29[3];
  v18 = *(double *)&_UIViewDefaultSpringDamping;
  v21[0] = v15;
  v21[1] = 3221225472;
  v21[2] = __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2;
  v21[3] = &unk_1E16BC218;
  v19 = v14;
  v22 = v19;
  v20 = v13;
  v23 = v20;
  +[UIView animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:](UIView, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", options, v16, v21, v17, 0.0, v18, 0.0);

  _Block_object_dispose(&v28, 8);
}

void __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id obj;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  id v33;
  uint64_t v34;
  char v35;
  CGAffineTransform v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
  if (v2)
  {
    v3 = v2;
    v30 = *MEMORY[0x1E0CD2C88];
    v31 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v38 != v31)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend(v5, "layer");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "shouldRasterize");

        objc_msgSend(v5, "layer");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "rasterizationScale");
        v10 = v9;

        objc_msgSend(v5, "layer");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "filters");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v5, "layer");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setShouldRasterize:", 1);

        objc_msgSend(v5, "layer");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "setRasterizationScale:", 0.25);

        v15 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v16 = v15 * UIAnimationDragCoefficient();
        objc_msgSend(MEMORY[0x1E0CD2780], "filterWithType:", v30);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setName:", CFSTR("gaussianBlur"));
        objc_msgSend(v17, "setCachesInputImage:", 0);
        objc_msgSend(v17, "setValue:forKey:", &unk_1E1A96370, CFSTR("inputRadius"));
        objc_msgSend(v17, "setValue:forKey:", CFSTR("low"), CFSTR("inputQuality"));
        objc_msgSend(v5, "layer");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v17;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v41, 1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setFilters:", v19);

        CGAffineTransformMakeScale(&v36, 0.25, 0.25);
        objc_msgSend(v5, "setTransform:", &v36);
        objc_msgSend(v5, "setAlpha:", 0.0);
        objc_msgSend(MEMORY[0x1E0CD2710], "animationWithKeyPath:", CFSTR("filters.gaussianBlur.inputRadius"));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        +[UIView _setAnimationAttributes:](UIView, "_setAnimationAttributes:", v20);
        objc_msgSend(v20, "setRemovedOnCompletion:", 0);
        objc_msgSend(v20, "setDuration:", v16);
        objc_msgSend(v20, "setFromValue:", &unk_1E1A96370);
        v21 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v5, "_currentScreenScale");
        objc_msgSend(v21, "numberWithDouble:", 1.0 / v22 * 200.0);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setToValue:", v23);

        objc_msgSend(v5, "layer");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "addAnimation:forKey:", v20, 0);

        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2461;
        aBlock[3] = &unk_1E16EB880;
        aBlock[4] = v5;
        v33 = v12;
        v35 = v7;
        v34 = v10;
        v25 = v12;
        v26 = _Block_copy(aBlock);
        v27 = *(void **)(a1 + 40);
        v28 = _Block_copy(v26);
        objc_msgSend(v27, "addObject:", v28);

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
    }
    while (v3);
  }

}

void __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2461(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  double v7;
  id v8;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "layer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setFilters:", v2);

  objc_msgSend(*(id *)(a1 + 32), "layer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeAllAnimations");

  v5 = *(unsigned __int8 *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "layer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setShouldRasterize:", v5);

  if (*(_BYTE *)(a1 + 56))
  {
    v7 = *(double *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 32), "layer");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setRasterizationScale:", v7);

  }
}

uint64_t __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8) + 16))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8));
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

+ (void)_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 reason:(id)a4 animations:(id)a5
{
  objc_msgSend(a1, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", 1048609, a5, *(double *)&a3.minimum, *(double *)&a3.maximum, *(double *)&a3.preferred);
}

+ (void)_conditionallyModifyAnimations:(BOOL)a3 withPreferredFrameRateRange:(CAFrameRateRange)a4 updateReason:(unsigned int)a5 animations:(id)a6
{
  if (a3)
    objc_msgSend(a1, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", *(_QWORD *)&a5, a6, *(double *)&a4.minimum, *(double *)&a4.maximum, *(double *)&a4.preferred);
  else
    (*((void (**)(id, __n128, __n128, __n128))a6 + 2))(a6, *(__n128 *)&a4.minimum, *(__n128 *)&a4.maximum, *(__n128 *)&a4.preferred);
}

+ (void)_modifyAnimationsByDecomposingGeometricTypes:(BOOL)a3 animations:(id)a4
{
  _BOOL4 v4;
  _BYTE *v5;
  _BYTE *v6;
  char v7;
  char v8;
  char v9;
  void (**v10)(void);

  v4 = a3;
  v10 = (void (**)(void))a4;
  v5 = (id)__currentViewAnimationState;
  v6 = v5;
  if (v5)
  {
    v7 = v5[173];
    if (v4)
      v8 = 2;
    else
      v8 = 0;
    v9 = v7 & 0xFD;
    v5[173] = v7 & 0xFD | v8;
    if (v10)
    {
      v10[2]();
      v9 = v6[173] & 0xFD;
    }
    v6[173] = v9 | v7 & 2;
  }
  else if (v10)
  {
    v10[2]();
  }

}

+ (void)setAnimationTransition:(int64_t)a3 forView:(id)a4
{
  objc_msgSend(a1, "setAnimationTransition:forView:cache:", a3, a4, 0);
}

- (id)hitTest:(CGPoint)a3 forEvent:(__GSEvent *)a4
{
  double y;
  double x;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  UIView *v15;

  y = a3.y;
  x = a3.x;
  if ((UIViewIgnoresTouchEvents(self) & 1) != 0
    || !-[UIView pointInside:forEvent:](self, "pointInside:forEvent:", a4, x, y))
  {
    v15 = 0;
  }
  else
  {
    -[CALayer sublayers](self->_layer, "sublayers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "copy");

    v10 = objc_msgSend(v9, "count");
    if (v10 < 1)
    {
LABEL_9:
      v15 = self;
    }
    else
    {
      v11 = v10 + 1;
      while (1)
      {
        objc_msgSend(v9, "objectAtIndex:", (v11 - 2));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = (id)objc_msgSend(v12, "unsafeUnretainedDelegate");

        if (v13)
        {
          if (_IsKindOfUIView((uint64_t)v13))
          {
            v14 = v13;
            objc_msgSend(v14, "convertPoint:fromView:", self, x, y);
            objc_msgSend(v14, "hitTest:forEvent:", a4);
            v15 = (UIView *)objc_claimAutoreleasedReturnValue();

            if (v15)
              break;
          }
        }
        if ((unint64_t)--v11 <= 1)
          goto LABEL_9;
      }
    }

  }
  return v15;
}

- (BOOL)pointInside:(CGPoint)a3 forEvent:(__GSEvent *)a4
{
  return -[CALayer containsPoint:](self->_layer, "containsPoint:", a4, a3.x, a3.y);
}

- (void)setClipsSubviews:(BOOL)a3
{
  if (self)
    -[CALayer setMasksToBounds:](self->_layer, "setMasksToBounds:", a3);
}

+ (void)_transitionFromView:(void *)a3 toView:(void *)a4 duration:(uint64_t)a5 options:(void *)a6 animations:(void *)a7 completion:
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  BOOL v40;

  v12 = a3;
  v13 = a4;
  v14 = a6;
  v15 = a7;
  v26 = (void *)objc_opt_self();
  +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "superview");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = MEMORY[0x1E0C809B0];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke;
  v33[3] = &unk_1E16EB8C8;
  v34 = v17;
  v40 = a1 > 0.0;
  v35 = v16;
  v36 = v12;
  v37 = v13;
  v38 = v14;
  v39 = a5;
  v27[0] = v19;
  v27[1] = 3221225472;
  v27[2] = __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke_2;
  v27[3] = &unk_1E16EB8F0;
  v31 = v15;
  v32 = a5;
  v28 = v35;
  v29 = v36;
  v30 = v34;
  v20 = v15;
  v21 = v34;
  v22 = v36;
  v23 = v35;
  v24 = v14;
  v25 = v13;
  objc_msgSend(v26, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", v18, a5, 0, v33, 0, 0, a1, 0.0, v27);

}

uint64_t __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "beginAppearanceTransition:animated:", 0, *(unsigned __int8 *)(a1 + 80));
  objc_msgSend(*(id *)(a1 + 40), "beginAppearanceTransition:animated:", 1, *(unsigned __int8 *)(a1 + 80));
  objc_msgSend(*(id *)(a1 + 48), "superview");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addSubview:", *(_QWORD *)(a1 + 56));

  result = *(_QWORD *)(a1 + 64);
  if (result)
    result = (*(uint64_t (**)(void))(result + 16))();
  if ((*(_BYTE *)(a1 + 74) & 0x70) != 0)
    return objc_msgSend(*(id *)(a1 + 48), "removeFromSuperview");
  return result;
}

uint64_t __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "endAppearanceTransition");
  if ((*(_BYTE *)(a1 + 66) & 0x70) == 0)
    objc_msgSend(*(id *)(a1 + 40), "removeFromSuperview");
  objc_msgSend(*(id *)(a1 + 48), "endAppearanceTransition");
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

- (id)_focusFallbackScroller
{
  return 0;
}

void __66__UIView_Internal___willChangeToIdiom_onScreen_traverseHierarchy___block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "_willChangeToIdiom:onScreen:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 56))
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    objc_msgSend(a2, "_allSubviews", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 16))();
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

  }
}

- (void)_webCustomViewWasAddedAsSubviewOfView:(void *)a1
{
  id v3;

  if (a1)
  {
    v3 = a2;
    -[UIView _postMovedFromSuperview:](a1, 0);
    objc_msgSend(a1, "_subscribeToScrollNotificationsIfNecessary:", v3);
    objc_msgSend(a1, "_makeSubtreePerformSelector:withObject:", sel__subscribeToScrollNotificationsIfNecessary_, v3);

  }
}

- (void)_replaceLayer:(id)a3
{
  _UIViewSetLayer((uint64_t)self, a3);
}

- (void)_webCustomViewWillBeRemovedFromSuperview
{
  void *v3;
  id v4;

  -[UIView window](self, "window");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_subtreeMonitorsForView:", self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  __UIViewWillBeRemovedFromSuperview((uint64_t)self, v3);

}

- (void)_webCustomViewWasRemovedFromSuperview:(_QWORD *)a1
{
  id v3;
  void *v4;
  id v5;

  if (a1)
  {
    v3 = a2;
    objc_msgSend(a1, "window");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_subtreeMonitorsForView:", a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    __UIViewWasRemovedFromSuperview(a1, v3, v4);

  }
}

- (BOOL)_alwaysHandleScrollerMouseEvent
{
  return 0;
}

- (BOOL)_delaysTouchesForSystemGestures
{
  return (*((_QWORD *)&self->_viewFlags + 1) >> 30) & 1;
}

- (void)_setDelaysTouchesForSystemGestures:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x40000000;
  if (!a3)
    v3 = 0;
  *((_QWORD *)&self->_viewFlags + 1) = *((_QWORD *)&self->_viewFlags + 1) & 0xFFFFFFFFBFFFFFFFLL | v3;
}

+ (void)_performBlockWithoutAutomaticallyUpdatingFirstResponder:(void *)a3 forScene:
{
  id v4;
  void (**v5)(_QWORD);
  id v6;

  v4 = a3;
  v5 = a2;
  objc_opt_self();
  objc_msgSend(v4, "keyboardSceneDelegate");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "setAutomaticAppearanceInternalEnabled:", 0);
  objc_opt_self();
  ++__disablePromoteDescendantToFirstResponderCount;
  v5[2](v5);

  objc_opt_self();
  if (__disablePromoteDescendantToFirstResponderCount)
    --__disablePromoteDescendantToFirstResponderCount;
  objc_msgSend(v6, "setAutomaticAppearanceInternalEnabled:", 1);

}

- (BOOL)_canHandleStatusBarTouchAtLocation:(CGPoint)a3
{
  double y;
  double x;
  id v6;

  y = a3.y;
  x = a3.x;
  v6 = -[UIView superview](self, "superview");
  objc_msgSend(v6, "convertPoint:fromView:", self, x, y);
  return objc_msgSend(v6, "_canHandleStatusBarTouchAtLocation:");
}

- (void)_setContentImage:(uint64_t)a1
{
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  double v8;
  double v9;
  id v10;

  if (a1)
  {
    v3 = *(void **)(a1 + 168);
    v4 = objc_retainAutorelease(a2);
    v5 = v3;
    v6 = v4;
    objc_msgSend(v5, "setContents:", objc_msgSend(v6, "CGImage"));

    v7 = *(id *)(a1 + 168);
    objc_msgSend(v6, "scale");
    objc_msgSend(v7, "setContentsScale:");

    v10 = *(id *)(a1 + 168);
    objc_msgSend(v6, "scale");
    v9 = v8;

    objc_msgSend(v10, "setRasterizationScale:", v9);
  }
}

- (BOOL)skipsSubviewEnumeration
{
  return (*(_QWORD *)&self->_viewFlags >> 36) & 1;
}

- (void)setSkipsSubviewEnumeration:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x1000000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFEFFFFFFFFFLL | v3;
}

- (BOOL)_isAlphaHittableAndHasAlphaHittableAncestors
{
  id v1;
  float v2;
  double v3;
  _BOOL8 v4;
  void *v5;
  float v6;

  if (!a1)
    return 0;
  v1 = *(id *)(a1 + 168);
  objc_msgSend(v1, "opacity");
  v3 = v2;
  v4 = v3 >= 0.01;
  if (v1 && v3 >= 0.01)
  {
    do
    {
      objc_msgSend(v1, "superlayer");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      v4 = v5 == 0;
      if (!v5)
        break;
      objc_msgSend(v5, "opacity");
      v1 = v5;
    }
    while (v6 >= 0.01);
  }
  else
  {
    v5 = v1;
  }

  return v4;
}

- (uint64_t)_viewOrderRelativeToView:(int)a3 requireIntersection:
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  void *v34;
  double v35;
  double v36;
  void *v37;
  double v38;
  double v39;
  CGRect v41;
  CGRect v42;

  v5 = a2;
  if (!a1)
  {
    v8 = 0;
    goto LABEL_23;
  }
  objc_msgSend(a1, "window");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  v8 = -10000;
  if (!v5 || !v6)
    goto LABEL_22;
  objc_msgSend(v5, "window");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "window");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 == v10)
  {
    objc_msgSend(a1, "window");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a3)
      goto LABEL_8;
    objc_msgSend(a1, "bounds");
    objc_msgSend(v7, "convertRect:fromView:", a1);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    objc_msgSend(v5, "bounds");
    objc_msgSend(v7, "convertRect:fromView:", v5);
    v42.origin.x = v19;
    v42.origin.y = v20;
    v42.size.width = v21;
    v42.size.height = v22;
    v41.origin.x = v12;
    v41.origin.y = v14;
    v41.size.width = v16;
    v41.size.height = v18;
    if (!CGRectIntersectsRect(v41, v42))
    {
      v8 = -10000;
    }
    else
    {
LABEL_8:
      v23 = a1;
      objc_msgSend(v5, "superview");
      v24 = objc_claimAutoreleasedReturnValue();
      if ((id)v24 == v23)
      {
        v27 = 0;
        v26 = 0;
      }
      else
      {
        v25 = (id)v24;
        v26 = 0;
        v27 = 0;
        do
        {
          v28 = v27;
          v29 = v26;
          v30 = v25;
          v27 = v23;

          objc_msgSend(v27, "superview");
          v23 = (id)objc_claimAutoreleasedReturnValue();

          v26 = v5;
          objc_msgSend(v26, "superview");
          v25 = (id)objc_claimAutoreleasedReturnValue();

          while (v25)
          {
            if (v25 == v23)
              break;
            v31 = v26;
            v26 = v25;

            objc_msgSend(v26, "superview");
            v25 = (id)objc_claimAutoreleasedReturnValue();

          }
        }
        while (v25 != v23);
      }
      objc_msgSend(v23, "subviews");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "indexOfObject:", v27);
      if (v33 <= objc_msgSend(v32, "indexOfObject:", v26))
        goto LABEL_18;
      objc_msgSend(v27, "layer");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "zPosition");
      v36 = v35;
      objc_msgSend(v26, "layer");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "zPosition");
      v39 = v38;

      if (v36 >= v39)
        v8 = -2;
      else
LABEL_18:
        v8 = -3;

    }
LABEL_22:

    goto LABEL_23;
  }
  v8 = -10000;
LABEL_23:

  return v8;
}

- (void)_encodeFrameWithCoder:(id)a3
{
  double v4;
  double v5;
  id v7;
  CGRect v8;

  v7 = a3;
  -[UIView bounds](self, "bounds");
  if (!CGRectEqualToRect(v8, *MEMORY[0x1E0C9D648]))
  {
    -[UIView bounds](self, "bounds");
    objc_msgSend(v7, "encodeCGRect:forKey:", CFSTR("UIBounds"));
  }
  -[UIView center](self, "center");
  if (v5 != *MEMORY[0x1E0C9D538] || v4 != *(double *)(MEMORY[0x1E0C9D538] + 8))
  {
    -[UIView center](self, "center");
    objc_msgSend(v7, "encodeCGPoint:forKey:", CFSTR("UICenter"));
  }

}

- (void)_encodeBackgroundColorWithCoder:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[UIView _backgroundColor](self, "_backgroundColor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(v5, "encodeObject:forKey:", v4, CFSTR("UIBackgroundColor"));

}

- (BOOL)_allowsArchivingAsSubview
{
  return 1;
}

- (void)_populateArchivedSubviews:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UIView _encodableSubviews](self, "_encodableSubviews");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if ((*(_QWORD *)&self->_viewFlags & 0x800000000000000) != 0)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v13 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          if (objc_msgSend(v11, "_allowsArchivingAsSubview"))
            objc_msgSend(v4, "addObject:", v11);
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v8);
    }
  }
  else
  {
    objc_msgSend(v4, "addObjectsFromArray:", v5);
  }

}

- (id)_gestureRecognizers
{
  return self->_gestureRecognizers;
}

- (void)_removeGestureRecognizer:(_QWORD *)a1
{
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  if (a1)
  {
    v3 = (void *)a1[11];
    v4 = a2;
    v8 = (id)objc_msgSend(v3, "mutableCopy");
    objc_msgSend(v8, "removeObject:", v4);
    v5 = objc_msgSend(v8, "copy");
    v6 = (void *)a1[11];
    a1[11] = v5;

    _UIGestureRecognizerUnregisterFromContainer((uint64_t)v4, a1);
    v7 = (id)objc_msgSend(a1, "_window");
    if (v7)
      objc_msgSend((id)objc_msgSend((id)UIApp, "_touchesEventForWindow:", v7), "_invalidateGestureRecognizerForWindowCache");

  }
}

- (BOOL)_gestureRecognizerShouldReceiveTouch:(id)a3
{
  return 1;
}

- (BOOL)_shouldResignFirstResponderWithInteractionDisabled
{
  return 1;
}

- (BOOL)_monitorsSubtree
{
  return (*(_QWORD *)&self->_viewFlags >> 42) & 1;
}

- (BOOL)_monitorsView:(id)a3
{
  return -[UIView _containsView:]((uint64_t)self, (uint64_t)a3);
}

- (void)_recursivelyNameLayerTree
{
  id v2;

  -[UIView _backing_outermostLayer](self);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  RecursivelyNameLayerTree(v2);

}

+ (void)_animateWithFrictionBounceAnimations:(id)a3 completion:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  v6 = a3;
  objc_opt_self();
  if (_os_feature_enabled_impl())
    +[UIView __swift_animateWithFrictionBounceAnimations:completion:](UIView, "__swift_animateWithFrictionBounceAnimations:completion:", v6, v5);
  else
    +[UIView _animateWithAnimationAndComposerGetter:animations:completion:](UIView, "_animateWithAnimationAndComposerGetter:animations:completion:", &__block_literal_global_2599, v6, v5);

}

id __68__UIView_Internal___animateWithFrictionBounceAnimations_completion___block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  UIViewFrictionBounceAnimation *v7;
  void *v8;

  v5 = a4;
  v6 = a3;
  v7 = -[UIViewFrictionBounceAnimation initWithCurrent:target:]([UIViewFrictionBounceAnimation alloc], "initWithCurrent:target:", v6, v5);

  +[_UIViewAnimationWithComposerWrapper instanceWithAnimation:composer:](_UIViewAnimationWithComposerWrapper, "instanceWithAnimation:composer:", v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

+ (void)_animateUsingSpringInteractive:(BOOL)a3 animations:(id)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v8;
  double v9;
  double v10;
  id v11;

  v6 = a3;
  v8 = a5;
  v11 = a4;
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    +[UIView __swift_animateUsingSpringInteractive:animations:completion:](UIView, "__swift_animateUsingSpringInteractive:animations:completion:", v6, v11, v8);
  }
  else
  {
    v9 = 500.0;
    if (v6)
      v9 = 1000.0;
    v10 = 35.0;
    if (v6)
      v10 = 30.0;
    objc_msgSend(a1, "_animateUsingSpringWithTension:friction:interactive:animations:completion:", v6, v11, v8, v9, v10);
  }

}

- (void)_animatePropertyWithKey:(id)a3 currentValue:(id)a4 targetValue:(id)a5 newValueCallback:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    objc_msgSend(v11, "value");
    v15 = v14;
    objc_msgSend(v12, "value");
    v17 = v16;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke;
    v23[3] = &unk_1E16EB9E8;
    v18 = &v24;
    v24 = v13;
    -[UIView __swift_animatePropertyWithKey:currentValue:targetValue:newValueCallback:](self, "__swift_animatePropertyWithKey:currentValue:targetValue:newValueCallback:", v10, v23, v15, v17);
LABEL_5:

    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[UIView animationInfoCreateIfNecessary:](self, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "animatablePropertyForKey:createIfNecessary:", v10, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke_2;
    v21[3] = &unk_1E16EBA10;
    v18 = &v22;
    v22 = v13;
    objc_msgSend(v20, "animatePropertyWithCurrentValue:targetValue:preTickShouldRemoveCallback:newValueCallback:removedCallback:", v11, v12, 0, v21, 0);

    goto LABEL_5;
  }
LABEL_6:

}

void __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  +[UIInterpolatedFloat valueWithFloat:](UIInterpolatedFloat, "valueWithFloat:");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke_3;
  v6[3] = &unk_1E16B2F48;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

uint64_t __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 dampingRatioSmoothing:(double)a6 responseSmoothing:(double)a7 targetSmoothing:(double)a8 projectionDeceleration:(double)a9 retargetImpulse:(double)a10 animations:(id)a11 completion:(id)a12
{
  +[UIView __animateUsingSpringWithDampingRatio:response:interactive:initialDampingRatio:initialResponse:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:retargetImpulse:animations:completion:](a3, a4, a6, a7, a8, a9, a10, (uint64_t)a1, a5, 0, 0, a11, a12);
}

+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 initialDampingRatio:(double)a6 initialResponse:(double)a7 dampingRatioSmoothing:(double)a8 responseSmoothing:(double)a9 targetSmoothing:(double)a10 projectionDeceleration:(double)a11 animations:(id)a12 completion:(id)a13
{
  _BOOL8 v20;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;

  v20 = a5;
  v24 = (void *)MEMORY[0x1E0CB37E8];
  v25 = a13;
  v26 = a12;
  objc_msgSend(v24, "numberWithDouble:", a6);
  v28 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a7);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  +[UIView __animateUsingSpringWithDampingRatio:response:interactive:initialDampingRatio:initialResponse:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:retargetImpulse:animations:completion:](a3, a4, a8, a9, a10, a11, 0.0, (uint64_t)a1, v20, v28, v27, v26, v25);

}

+ (void)_animateByRetargetingAnimations:(id)a3 completion:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  v6 = a3;
  objc_opt_self();
  if (_os_feature_enabled_impl())
    +[UIView __swift_animateByRetargetingAnimations:completion:](UIView, "__swift_animateByRetargetingAnimations:completion:", v6, v5);
  else
    +[UIView _animateWithAnimationAndComposerGetter:animations:completion:animationStateSetup:](UIView, "_animateWithAnimationAndComposerGetter:animations:completion:animationStateSetup:", &__block_literal_global_2609, v6, v5, &__block_literal_global_2612);

}

id __63__UIView_Internal___animateByRetargetingAnimations_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  objc_msgSend(v8, "composer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
    v11 = v9;
  else
    v11 = (id)objc_opt_new();
  v12 = v11;

  objc_msgSend(v8, "animation");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  +[UIViewRetargetingAnimationDescription description](UIViewRetargetingAnimationDescription, "description");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "composeAnimation:withNewAnimationDescription:interactive:currentValue:targetValue:", v13, v14, 0, v7, v6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  +[_UIViewAnimationWithComposerWrapper instanceWithAnimation:composer:](_UIViewAnimationWithComposerWrapper, "instanceWithAnimation:composer:", v15, v12);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

uint64_t __63__UIView_Internal___animateByRetargetingAnimations_completion___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setType:", 1);
}

void __53__UIView_Internal___removeAllRetargetableAnimations___block_invoke_2(uint64_t a1)
{
  -[UIView __removeAllRetargetableAnimations:](*(id **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t __101__UIView_Internal___animateWithAnimationAndComposerGetter_animations_completion_animationStateSetup___block_invoke_2617(_QWORD *a1)
{
  uint64_t result;

  +[UIViewAnimationState pushViewAnimationState:context:](UIViewInProcessAnimationState, "pushViewAnimationState:context:", 0, 0);
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), (id)__currentViewAnimationState);
  objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setAnimationAndComposerGetter:", a1[4]);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  return result;
}

+ (void)animateBridgedWithContext:(id)a3 animations:(id)a4 completion:(id)a5
{
  id v7;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", a3, a4, a5);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleFailureInMethod:object:file:lineNumber:description:", a2, a1, CFSTR("UIView.m"), 19399, CFSTR("No longer supported, this method will be removed shortly."));

}

- (void)_setVelocity:(void *)a3 forKey:(uint64_t)a4 target:
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v7 = a3;
  if (a1)
  {
    objc_opt_self();
    if (_os_feature_enabled_impl())
    {
      objc_msgSend(a1, "__swift_setVelocity:key:target:", v11, v7, a4);
    }
    else
    {
      +[UIInterpolatedValue interpolatedWrapperForValue:key:](UIInterpolatedValue, "interpolatedWrapperForValue:key:", v11, v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[UIView animationInfoCreateIfNecessary:](a1, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "animatablePropertyForKey:createIfNecessary:", v7, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setVelocity:target:", v8, a4);

    }
  }

}

- (id)_targetVelocityForKey:(id)a3
{
  return -[UIView _velocityForKey:target:]((id *)&self->super.super.isa, a3, 1);
}

- (void)_setTargetVelocity:(id)a3 forKey:(id)a4
{
  -[UIView _setVelocity:forKey:target:](self, a3, a4, 1);
}

- (void)_setVelocity:(id)a3 forKey:(id)a4
{
  -[UIView _setVelocity:forKey:target:](self, a3, a4, 0);
}

- (id)_projectedTargetForKey:(id)a3 decelerationFactor:(double)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v6 = a3;
  objc_opt_self();
  if (_os_feature_enabled_impl())
  {
    -[UIView __swift_projectedTargetForKey:decelerationFactor:](self, "__swift_projectedTargetForKey:decelerationFactor:", v6, a4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[UIView animationInfoCreateIfNecessary:](self, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "animatablePropertyForKey:createIfNecessary:", v6, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "animationEntry");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = __Block_byref_object_copy__238;
    v28 = __Block_byref_object_dispose__238;
    v29 = 0;
    if (v10)
    {
      v18 = MEMORY[0x1E0C809B0];
      v19 = 3221225472;
      v20 = __62__UIView_Internal___projectedTargetForKey_decelerationFactor___block_invoke;
      v21 = &unk_1E16EBB58;
      v22 = v9;
      v23 = &v24;
      objc_msgSend(v10, "performWithoutLock:", &v18);

      if (v25[5])
        goto LABEL_6;
    }
    -[UIView layer](self, "layer", v18, v19, v20, v21);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "valueForKey:", v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIInterpolatedValue interpolatedWrapperForValue:key:](UIInterpolatedValue, "interpolatedWrapperForValue:key:", v12, v6);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v25[5];
    v25[5] = v13;

    if (v25[5])
    {
LABEL_6:
      objc_msgSend(v9, "composer", v18, v19, v20, v21);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "projectValue:decelerationFactor:", v25[5], a4);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "getValue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v7 = 0;
    }
    _Block_object_dispose(&v24, 8);

  }
  return v7;
}

void __62__UIView_Internal___projectedTargetForKey_decelerationFactor___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  objc_msgSend(*(id *)(a1 + 32), "composer");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)v3;
    objc_msgSend(*(id *)(a1 + 32), "composer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(v11, "targetValue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "copy");
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

    }
  }

}

- (void)_replaceInProcessAnimationForKey:(id)a3 behavior:(id)a4 interactive:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  id v9;

  v5 = a5;
  v9 = a3;
  v8 = a4;
  objc_opt_self();
  if (_os_feature_enabled_impl())
    -[UIView __swift_replaceInProcessAnimationForKey:behavior:interactive:](self, "__swift_replaceInProcessAnimationForKey:behavior:interactive:", v9, v8, v5);

}

+ (void)_createUnsafeTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5
{
  id v8;
  id v9;
  id v10;

  v10 = a3;
  v8 = a4;
  v9 = a5;
  objc_opt_self();
  if (_os_feature_enabled_impl())
    objc_msgSend(a1, "__swift_createUnsafeTransformerWithInputAnimatableProperties:modelValueSetter:presentationValueSetter:", v10, v8, v9);
  else

}

- (BOOL)_touchesInsideShouldHideCalloutBar
{
  return 1;
}

- (BOOL)_isMemberOfViewControllerHierarchy:(id)a3
{
  void *v4;
  BOOL v5;

  objc_msgSend(a3, "_existingView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    v5 = -[UIView isDescendantOfView:](self, "isDescendantOfView:", v4);
  else
    v5 = 0;

  return v5;
}

+ (id)_disabledColorForTintColor:(id)a3
{
  return +[UIColor _disabledColorForColor:]((uint64_t)UIColor, a3);
}

- (BOOL)_shouldUseViewForSceneDraggingBehavior
{
  return 1;
}

- (double)_center3D
{
  double v2;
  double v3;
  void *v4;

  if (!a1)
    return 0.0;
  objc_msgSend(a1, "center");
  v3 = v2;
  objc_msgSend(a1, "layer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "zPosition");

  return v3;
}

- (void)_setCenter3D:(double)a3
{
  id v6;

  if (a1)
  {
    objc_msgSend(a1, "setCenter:");
    objc_msgSend(a1, "layer");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setZPosition:", a4);

  }
}

- (id)_firstAncestorInteractionConformingToProtocol:(id)a3
{
  id v4;
  uint64_t v5;
  _BYTE *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  id v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[UIView superview](self, "superview");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (_BYTE *)v5;
    do
    {
      if ((v6[124] & 0x40) != 0)
      {
        objc_getAssociatedObject(v6, &_UIViewInteractionsKey);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v8 = v7;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v18;
          while (2)
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v18 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
              if ((objc_msgSend(v13, "conformsToProtocol:", v4) & 1) != 0)
              {
                v15 = v13;

                goto LABEL_16;
              }
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
            if (v10)
              continue;
            break;
          }
        }

      }
      objc_msgSend(v6, "superview");
      v14 = objc_claimAutoreleasedReturnValue();

      v6 = (_BYTE *)v14;
    }
    while (v14);
  }
  v15 = 0;
LABEL_16:

  return v15;
}

- (void)setGestureRecognizers:(NSArray *)gestureRecognizers
{
  NSArray *v4;
  NSArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD block[6];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = gestureRecognizers;
  if (self->_gestureRecognizers != v4)
  {
    -[UIView _removeAllGestureRecognizers]((uint64_t)self);
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = v4;
    v6 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v9);
          if (dyld_program_sdk_at_least()
            && (objc_msgSend(v10, "view"), v11 = (void *)objc_claimAutoreleasedReturnValue(), v11, v11))
          {
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __48__UIView_UIViewGestures__setGestureRecognizers___block_invoke;
            block[3] = &unk_1E16B1B50;
            block[4] = v10;
            block[5] = self;
            if (setGestureRecognizers__once != -1)
              dispatch_once(&setGestureRecognizers__once, block);
          }
          else
          {
            -[UIView _addGestureRecognizer:atEnd:]((uint64_t)self, v10, 1);
          }
          ++v9;
        }
        while (v7 != v9);
        v12 = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        v7 = v12;
      }
      while (v12);
    }

  }
}

void __48__UIView_UIViewGestures__setGestureRecognizers___block_invoke(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = kFixedAnimationDuration_block_invoke_5___s_category;
  if (!kFixedAnimationDuration_block_invoke_5___s_category)
  {
    v2 = __UILogCategoryGetNode("Warning", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v2, (unint64_t *)&kFixedAnimationDuration_block_invoke_5___s_category);
  }
  v3 = *(NSObject **)(v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = 138412546;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_185066000, v3, OS_LOG_TYPE_ERROR, "WARNING: A Gesture recognizer (%@) was setup in a storyboard/xib to be added to more than one view (->%@) at a time, this was never allowed, and is now enforced. Beginning with iOS 9.0 it will be put in the first view it is loaded into.", (uint8_t *)&v6, 0x16u);
  }
}

- (BOOL)deliversPressesForGesturesToSuperview
{
  return (*(_QWORD *)&self->_viewFlags >> 34) & 1;
}

- (void)setDeliversPressesForGesturesToSuperview:(BOOL)a3
{
  uint64_t v3;

  v3 = 0x400000000;
  if (!a3)
    v3 = 0;
  *(_QWORD *)&self->_viewFlags = *(_QWORD *)&self->_viewFlags & 0xFFFFFFFBFFFFFFFFLL | v3;
}

void __47__UIView_CALayerDelegate__drawLayer_inContext___block_invoke(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  objc_class *v4;
  const char *Name;
  void *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 84;
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 85;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v6;
  objc_msgSend(v6, "superview");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a2 + 72) = v7;

}

void __50__UIView_CALayerDelegate__layoutSublayersOfLayer___block_invoke(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  objc_class *v4;
  const char *Name;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v9, Name, 0x18uLL);
  v6 = *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)a2 = 82;
  v7 = *(void **)(a1 + 32);
  *(_QWORD *)(a2 + 8) = v7;
  *(_OWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(_DWORD *)(a2 + 40) = 83;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v7;
  objc_msgSend(v7, "superview");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a2 + 72) = v8;

}

- (BOOL)__shouldShowVisualizationWithName:(_BYTE *)a3 isSubclass:(_BYTE *)a4 isOtherModule:
{
  _BOOL8 v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD v14[5];

  if (!a1 || !os_variant_has_internal_diagnostics())
    return 0;
  if (qword_1EDDCA7F8 != -1)
    dispatch_once(&qword_1EDDCA7F8, &__block_literal_global_2817_0);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke_3;
  v14[3] = &unk_1E16EBBE8;
  v14[4] = a1;
  v10 = objc_msgSend((id)qword_1EDDCA7F0, "indexOfObjectPassingTest:", v14);
  v8 = v10 != 0x7FFFFFFFFFFFFFFFLL;
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = v10;
    if (a2)
    {
      objc_msgSend((id)qword_1EDDCA7E8, "objectAtIndexedSubscript:", v10);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a4)
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      _UIKitBundle();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *a4 = objc_msgSend(v12, "isEqual:", v13) ^ 1;

    }
    if (a3)
      *a3 = objc_msgSend(a1, "isMemberOfClass:", objc_msgSend((id)qword_1EDDCA7F0, "objectAtIndexedSubscript:", v11)) ^ 1;
  }
  return v8;
}

void __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  _UIKitPreferencesOnce();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("ControlsToVisualize"));
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)v1;
  if (v1)
    v3 = (void *)v1;
  else
    v3 = &unk_1E1A95360;
  objc_storeStrong((id *)&qword_1EDDCA7E8, v3);

  objc_msgSend((id)qword_1EDDCA7E8, "bs_map:", &__block_literal_global_2845);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1EDDCA7F0;
  qword_1EDDCA7F0 = v4;

}

Class __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke_2(int a1, NSString *aClassName)
{
  return NSClassFromString(aClassName);
}

uint64_t __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke_3()
{
  return objc_opt_isKindOfClass() & 1;
}

- (void)__vis_layoutSublayersOfLayer:(id)a3
{
  _BOOL4 v4;
  __CFString *v5;
  _UIViewMarkerLayer *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  uint64_t v10;
  void *v11;
  id v12;
  __int16 v13;

  -[UIView __vis_layoutSublayersOfLayer:](self, "__vis_layoutSublayersOfLayer:", a3);
  if (os_variant_has_internal_diagnostics())
  {
    v13 = 0;
    v12 = 0;
    v4 = -[UIView __shouldShowVisualizationWithName:isSubclass:isOtherModule:](self, &v12, (_BYTE *)&v13 + 1, &v13);
    v5 = (__CFString *)v12;
    if (!v4)
    {
LABEL_16:

      return;
    }
    objc_getAssociatedObject(self, &_markerViewKey);
    v6 = (_UIViewMarkerLayer *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v6 = objc_alloc_init(_UIViewMarkerLayer);
      objc_setAssociatedObject(self, &_markerViewKey, v6, (void *)1);
    }
    -[_UIViewMarkerLayer superlayer](v6, "superlayer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      -[UIView layer](self, "layer");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addSublayer:", v6);

    }
    if (v5)
      v9 = v5;
    else
      v9 = CFSTR("View");
    -[_UIViewMarkerLayer setLabel:](v6, "setLabel:", v9);
    if ((_BYTE)v13)
    {
      +[UIColor systemDarkRedColor](UIColor, "systemDarkRedColor");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!HIBYTE(v13))
      {
        v11 = 0;
        goto LABEL_15;
      }
      +[UIColor systemMintColor](UIColor, "systemMintColor");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    v11 = (void *)v10;
LABEL_15:
    -[_UIViewMarkerLayer setAlternateColor:](v6, "setAlternateColor:", v11);
    -[UIView bounds](self, "bounds");
    -[_UIViewMarkerLayer setFrame:](v6, "setFrame:");

    goto LABEL_16;
  }
}

- (void)_detectAndHandleClippedView
{
  void *v3;
  UIView *v4;
  void *v5;

  if (-[UIView _UIViewDebuggingIsViewClipping](self, "_UIViewDebuggingIsViewClipping"))
  {
    -[UIView _strokeClippedViewIfNecessary](self, "_strokeClippedViewIfNecessary");
    if (!-[UIView _clippingDetected](self))
    {
      -[UIView _dumpClippedViewWithScreenshotIfNecessary](self, "_dumpClippedViewWithScreenshotIfNecessary");
      if (self)
      {
        v5 = (void *)MEMORY[0x1E0C9AAB0];
        v4 = self;
LABEL_12:
        objc_setAssociatedObject(v4, &_UICliptracerAssociationKey, v5, (void *)1);
      }
    }
  }
  else if (self)
  {
    if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIStrokeClippedViews, (uint64_t)CFSTR("UIStrokeClippedViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EDDA84AC&& -[UIView _clippingDetected](self))
    {
      -[UIView layer](self, "layer");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setBorderWidth:", 0.0);

    }
    v4 = self;
    v5 = 0;
    goto LABEL_12;
  }
}

- (BOOL)_clippingDetected
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  objc_getAssociatedObject(a1, &_UICliptracerAssociationKey);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

- (BOOL)_UIViewDebuggingIsViewClipping
{
  BOOL v3;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  _BOOL8 v23;
  _BOOL8 v24;
  BOOL v25;
  double v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL8 v29;
  _BOOL4 v30;
  void *v31;
  void *v32;
  CGSize v33;
  CGRect v34;
  CGRect v35;

  if (qword_1EDDCA818 != -1)
    dispatch_once(&qword_1EDDCA818, &__block_literal_global_2854);
  if (byte_1EDDCA619 | byte_1EDDCA61A)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[UIView delegate](self, "delegate");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_opt_respondsToSelector() & 1) != 0
            && (objc_msgSend(v5, "textFieldShouldBeginEditing:", self) & 1) != 0)
          {
            goto LABEL_38;
          }

        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || !-[UIResponder isEditable](self, "isEditable"))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || (-[UIView isScrollEnabled](self, "isScrollEnabled") & 1) == 0)
          {
            -[UIView superview](self, "superview");
            v6 = objc_claimAutoreleasedReturnValue();
            if (!v6
              || (v7 = (void *)v6,
                  -[UIView superview](self, "superview"),
                  v8 = (void *)objc_claimAutoreleasedReturnValue(),
                  v9 = objc_msgSend(v8, "conformsToProtocol:", &unk_1EDE22B80),
                  v8,
                  v7,
                  (v9 & 1) == 0))
            {
              -[UIView performSelector:](self, "performSelector:", sel_text);
              v10 = (void *)objc_claimAutoreleasedReturnValue();
              v5 = v10;
              if (v10 && objc_msgSend(v10, "length"))
              {
                -[UIView _alignmentFrame](self, "_alignmentFrame");
                v12 = v11;
                v14 = v13;
                v16 = v15;
                v18 = v17;
                -[UIView sizeThatFits:](self, "sizeThatFits:", v15, v17);
                v21 = v19;
                v22 = v20;
                v23 = v16 + 5.0 < v19 && v19 != -1.0;
                v24 = v18 + 5.0 < v20 && v20 != -1.0;
                v34.origin.x = v12;
                v34.origin.y = v14;
                v34.size.width = v16;
                v34.size.height = v18;
                v25 = CGRectEqualToRect(v34, *MEMORY[0x1E0C9D648]);
                v26 = *(double *)(MEMORY[0x1E0C9D820] + 8);
                v27 = v16 == *MEMORY[0x1E0C9D820];
                if (v18 != v26)
                  v27 = 0;
                v28 = v25 || v27;
                v29 = v22 == v26 && v21 == *MEMORY[0x1E0C9D820];
                v30 = (v24 || v23) && (unint64_t)objc_msgSend(v5, "length") < 0xF;
                if (v30 | v28 | v29
                  && (_UIInternalPreferenceUsesDefault(&dword_1EDDA84D0, (uint64_t)CFSTR("UILogClippedViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EDDA84D4)
                {
                  v35.origin.x = v12;
                  v35.origin.y = v14;
                  v35.size.width = v16;
                  v35.size.height = v18;
                  NSStringFromCGRect(v35);
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  v33.width = v21;
                  v33.height = v22;
                  NSStringFromCGSize(v33);
                  v32 = (void *)objc_claimAutoreleasedReturnValue();
                  NSLog(&CFSTR("ClipTracer: Suspicious clipping: short = %d; alignmentZero = %d; contentSizeZero = %d; alignmentFra"
                           "me = %@; contentSize = %@, clippedHorz = %d; clippedVert = %d, text = %@").isa,
                    v30,
                    v28,
                    v29,
                    v31,
                    v32,
                    v23,
                    v24,
                    v5);

                }
                v3 = (v23 || v24) & ~(v28 | v29);
                goto LABEL_45;
              }
LABEL_38:
              v3 = 0;
LABEL_45:

              return v3;
            }
          }
        }
      }
    }
  }
  return 0;
}

- (void)_strokeClippedViewIfNecessary
{
  id v3;
  uint64_t v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  id v9;

  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIStrokeClippedViews, (uint64_t)CFSTR("UIStrokeClippedViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0)
  {
    if (byte_1EDDA84AC)
    {
      +[UIColor redColor](UIColor, "redColor");
      v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v4 = objc_msgSend(v3, "CGColor");
      -[UIView layer](self, "layer");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setBorderColor:", v4);

      -[UIView _screen](self, "_screen");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "scale");
      v7 = 1.0 / v6;
      -[UIView layer](self, "layer");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setBorderWidth:", v7);

    }
  }
}

- (id)_clippedViewHierarchyDescription
{
  return 0;
}

- (void)_dumpClippedViewWithScreenshotIfNecessary
{
  void *v3;
  __CFString *v4;
  char v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  objc_class *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  const __CFString *v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  objc_class *v28;
  uint64_t v29;
  void *v30;
  const __CFString *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  const __CFString *v35;
  uint64_t v36;
  void *v37;
  const __CFString *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  const __CFString *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  const __CFString *v50;
  uint64_t v51;
  void *v52;
  const __CFString *v53;
  uint64_t v54;
  void *v55;
  const __CFString *v56;
  NSObject *v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  void *v66;
  BOOL v67;
  dispatch_time_t v68;
  id v69;
  objc_class *v70;
  void *v71;
  void *v72;
  _QWORD block[5];
  id v74;
  id v75;
  BOOL v76;
  uint8_t buf[4];
  void *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  void *v82;
  uint64_t v83;
  CGSize v84;
  CGRect v85;
  CGRect v86;

  v83 = *MEMORY[0x1E0C80C00];
  -[UIView _clippedViewHierarchyDescription](self, "_clippedViewHierarchyDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[UIView performSelector:](self, "performSelector:", sel_text);
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v5 = _UIInternalPreferenceUsesDefault(&dword_1EDDA84D0, (uint64_t)CFSTR("UILogClippedViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  if (byte_1EDDA84D4)
    v6 = v5;
  else
    v6 = 1;
  if (v3)
  {
    if (_dumpClippedViewWithScreenshotIfNecessary_onceToken != -1)
      dispatch_once(&_dumpClippedViewWithScreenshotIfNecessary_onceToken, &__block_literal_global_3002);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    _UIMainBundleIdentifier();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v8)
      v10 = (const __CFString *)v8;
    else
      v10 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v10, CFSTR("bundle"));

    v11 = (objc_class *)objc_opt_class();
    NSStringFromClass(v11);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v12)
      v14 = (const __CFString *)v12;
    else
      v14 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v14, CFSTR("control_class"));

    if ((_UIInternalPreferenceUsesDefault(&dword_1EDDA84C8, (uint64_t)CFSTR("UIIncludeTextForClippedViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EDDA84CC)
    {
      if (v4)
        v15 = v4;
      else
        v15 = &stru_1E16EDF20;
      objc_msgSend(v7, "setObject:forKey:", v15, CFSTR("text"));
    }
    objc_msgSend((id)UIApp, "preferredContentSizeCategory");
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = (void *)v16;
    if (v16)
      v18 = (const __CFString *)v16;
    else
      v18 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v18, CFSTR("font"));

    -[UIView window](self, "window");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "size");
    NSStringFromCGSize(v84);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v20;
    if (v20)
      v22 = (const __CFString *)v20;
    else
      v22 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v22, CFSTR("window_size"));

    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "buildVersion");
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)v24;
    if (v24)
      v26 = (const __CFString *)v24;
    else
      v26 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v26, CFSTR("build_version"));

    -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = (objc_class *)objc_opt_class();
    NSStringFromClass(v28);
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = (void *)v29;
    if (v29)
      v31 = (const __CFString *)v29;
    else
      v31 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v31, CFSTR("view_controller"));

    +[UIDevice currentDevice](UIDevice, "currentDevice");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "systemName");
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = (void *)v33;
    if (v33)
      v35 = (const __CFString *)v33;
    else
      v35 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v35, CFSTR("platform"));

    objc_msgSend(v7, "setObject:forKey:", v3, CFSTR("hierarchy_description"));
    -[NSObject accessibilityIdentifier](self, "accessibilityIdentifier");
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = (void *)v36;
    if (v36)
      v38 = (const __CFString *)v36;
    else
      v38 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v38, CFSTR("accessibility_identifier"));

    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "preferredLocalizations");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "objectAtIndex:", 0);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    v42 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", v41);
    objc_msgSend(v42, "localeIdentifier");
    v43 = objc_claimAutoreleasedReturnValue();
    v44 = (void *)v43;
    if (v43)
      v45 = (const __CFString *)v43;
    else
      v45 = &stru_1E16EDF20;
    objc_msgSend(v7, "setObject:forKey:", v45, CFSTR("language"));

    -[__CFString _accessibilityAttributedLocalizedString](v4, "_accessibilityAttributedLocalizedString");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = v46;
    if (v46)
    {
      objc_msgSend(v46, "attributeValueForKey:", CFSTR("UIAccessibilityTokenLocalizedStringKey"));
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = (void *)v48;
      if (v48)
        v50 = (const __CFString *)v48;
      else
        v50 = &stru_1E16EDF20;
      objc_msgSend(v7, "setObject:forKey:", v50, CFSTR("ax_string_key"));

      objc_msgSend(v47, "attributeValueForKey:", CFSTR("UIAccessibilityTokenLocalizedStringTableName"));
      v51 = objc_claimAutoreleasedReturnValue();
      v52 = (void *)v51;
      if (v51)
        v53 = (const __CFString *)v51;
      else
        v53 = &stru_1E16EDF20;
      objc_msgSend(v7, "setObject:forKey:", v53, CFSTR("ax_table_name"));

      objc_msgSend(v47, "attributeValueForKey:", CFSTR("UIAccessibilityTokenLocalizedStringEnglishVersion"));
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = (void *)v54;
      if (v54)
        v56 = (const __CFString *)v54;
      else
        v56 = &stru_1E16EDF20;
      objc_msgSend(v7, "setObject:forKey:", v56, CFSTR("ax_english_text"));

    }
    if ((v6 & 1) == 0)
    {
      _UIClippingFaultLog();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_FAULT))
      {
        v70 = (objc_class *)objc_opt_class();
        NSStringFromClass(v70);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ax_english_text"));
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v78 = v71;
        v79 = 2114;
        v80 = v72;
        v81 = 2114;
        v82 = v7;
        _os_log_fault_impl(&dword_185066000, v57, OS_LOG_TYPE_FAULT, "[Internal] Text Clipping Detected: %{public}@ '%{public}@'\n'%{public}@'", buf, 0x20u);

      }
    }
    -[UIView frame](self, "frame");
    -[UIView convertRect:toView:](self, "convertRect:toView:", 0);
    v59 = v58;
    v61 = v60;
    v63 = v62;
    v65 = v64;
    -[UIView window](self, "window");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "bounds");
    v86.origin.x = v59;
    v86.origin.y = v61;
    v86.size.width = v63;
    v86.size.height = v65;
    v67 = CGRectIntersectsRect(v85, v86);

    v68 = dispatch_time(0, 1000000000);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke_3047;
    block[3] = &unk_1E16B1CF0;
    v76 = v67;
    block[4] = self;
    v74 = v7;
    v75 = &__block_literal_global_3011;
    v69 = v7;
    dispatch_after(v68, MEMORY[0x1E0C80D38], block);

  }
  else if ((v6 & 1) == 0)
  {
    NSLog(CFSTR("ClipTracer: No hierarchy for %@, %@"), self, v4);
  }

}

void __64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter;
  _dumpClippedViewWithScreenshotIfNecessary_dateFormatter = (uint64_t)v0;

  objc_msgSend((id)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss Z"));
  v2 = (void *)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter;
  objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setLocale:", v3);

  v4 = (void *)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter;
  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTimeZone:", v5);

}

__CFString *__64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke_2(uint64_t a1, void *a2)
{
  if (a2)
    return (__CFString *)a2;
  else
    return &stru_1E16EDF20;
}

void __64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke_3047(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  UIImage *v9;

  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIScreenshotClippedViews, (uint64_t)CFSTR("UIScreenshotClippedViews"), (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EDDA84B4&& *(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 32), "window");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[UIWindow _applicationKeyWindow](UIWindow, "_applicationKeyWindow");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bounds");
    v4 = (const void *)objc_msgSend(v2, "newSnapshotWithRect:");

    if (v4)
    {
      +[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", v4);
      v9 = (UIImage *)objc_claimAutoreleasedReturnValue();
      UIImagePNGRepresentation(v9);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "base64EncodedStringWithOptions:", 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v7 = *(void **)(a1 + 40);
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setValue:forKey:", v8, CFSTR("screenshot"));

      CFRelease(v4);
    }
  }
}

- (id)recursiveDescription
{
  return _UIRecursiveDescription(self->_layer, (uint64_t)&__block_literal_global_3141, (uint64_t)&__block_literal_global_3143_0);
}

id __43__UIView_UIDebugging__recursiveDescription__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id *v3;
  id *v4;
  id v5;
  id *v6;
  void *v7;

  v2 = a2;
  v3 = (id *)(id)objc_msgSend(v2, "unsafeUnretainedDelegate");
  if (v3)
  {
    v4 = v3;
    if (_IsKindOfUIView((uint64_t)v3))
    {
      v5 = v4[21];
      v6 = v4;

      v2 = v5;
    }
  }
  objc_msgSend(v2, "sublayers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

__CFString *__43__UIView_UIDebugging__recursiveDescription__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  objc_super v13;

  v2 = a2;
  v3 = (id)objc_msgSend(v2, "unsafeUnretainedDelegate");
  if (v3 && (v4 = v3, _IsKindOfUIView((uint64_t)v3)))
  {
    v5 = v4;
    objc_msgSend(v5, "debugDescription");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = v6;
    }
    else
    {
      v10 = (void *)MEMORY[0x1E0CB3940];
      v13.receiver = v5;
      v13.super_class = (Class)UIView;
      objc_msgSendSuper2(&v13, sel_description);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "stringWithFormat:", CFSTR("-desc was nil!- %@"), v11);
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    objc_msgSend(v2, "description");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v9;
    if (v9)
    {
      objc_msgSend(v9, "stringByAppendingString:", CFSTR(" (layer)"));
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = CFSTR("-layer desc was nil!-");
    }
  }

  return v8;
}

- (id)_parentDescription
{
  return _UIAncestralDescription((uint64_t)self, (uint64_t)sel_superview, 0);
}

- (id)_backdropGroups
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v3 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", self->_layer);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  while (objc_msgSend(v4, "count"))
  {
    objc_msgSend(v4, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeObjectAtIndex:", 0);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = v5;
      objc_msgSend(v6, "groupName");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        v8 = (id)objc_msgSend(v6, "unsafeUnretainedDelegate");
        v9 = v8;
        if (v8)
        {
          if (_IsKindOfUIView((uint64_t)v8))
          {
            v9 = v9;
            objc_msgSend(v9, "superview");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            NSClassFromString(CFSTR("UIVisualEffectView"));
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v11 = v10;

              v9 = v11;
            }

          }
          else
          {
            v9 = 0;
          }
        }
        if (v9)
          v12 = v9;
        else
          v12 = v6;
        v13 = v12;
        objc_msgSend(v3, "objectForKeyedSubscript:", v7);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v14)
        {
          objc_msgSend(v14, "addObject:", v13);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v13);
          v16 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v3, "setObject:forKeyedSubscript:", v16, v7);
          v13 = (id)v16;
        }

      }
    }
    objc_msgSend(v5, "sublayers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v17, "count"))
      objc_msgSend(v4, "addObjectsFromArray:", v17);

  }
  return v3;
}

- (id)_scriptingInfo
{
  return (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
}

- (id)scriptingInfoWithChildren
{
  return (id)MEMORY[0x1E0C9AA60];
}

- (uint64_t)_containerStyle
{
  id v1;
  id v2;

  if (!a1)
    return 0;
  v1 = (id)objc_msgSend(a1, "superview");
  if (!v1)
    return 0;
  v2 = v1;
  while (!objc_msgSend(v2, "_style"))
  {
    v2 = (id)objc_msgSend(v2, "superview");
    if (!v2)
      return 0;
  }
  return objc_msgSend(v2, "_style");
}

- (int)_style
{
  void *v2;
  _BOOL4 v3;

  +[UIViewController viewControllerForView:](UIViewController, "viewControllerForView:", self);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "modalPresentationStyle") == 2;

  return 2 * v3;
}

- (BOOL)useBlockyMagnificationInClassic
{
  return 1;
}

- (id)_enclosingScrollerIncludingSelf
{
  UIView *v2;

  if (self)
  {
    v2 = self;
    while (!-[NSObject __isKindOfUIScrollView](v2, "__isKindOfUIScrollView"))
    {
      self = (UIView *)-[UIView superview](v2, "superview");
      v2 = self;
      if (!self)
        return self;
    }
    self = v2;
  }
  return self;
}

- (BOOL)_isScrollingEnabled
{
  return 0;
}

- (id)_enclosingScrollableScrollerIncludingSelf
{
  UIView *v2;

  if (self)
  {
    v2 = self;
    while (!-[NSObject __isKindOfUIScrollView](v2, "__isKindOfUIScrollView")
         || !-[UIView _isScrollingEnabled](v2, "_isScrollingEnabled"))
    {
      self = (UIView *)-[UIView superview](v2, "superview");
      v2 = self;
      if (!self)
        return self;
    }
    self = v2;
  }
  return self;
}

- (uint64_t)_subviewsNeedAxisFlipping
{
  id v1;
  int v2;
  void *v3;
  uint64_t v4;

  if (a1)
  {
    v1 = a1;
    v2 = 0;
    do
    {
      objc_msgSend(v1, "layer");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v2 ^= objc_msgSend(v3, "flipsHorizontalAxis");

      objc_msgSend(v1, "superview");
      v4 = objc_claimAutoreleasedReturnValue();

      v1 = (id)v4;
    }
    while (v4);
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2 & 1;
}

- (id)_layoutRect
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  objc_getAssociatedObject(self, &_UIViewLayoutRectKey);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v4 = (void *)MEMORY[0x1E0D156F0];
    -[UIView leadingAnchor](self, "leadingAnchor");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView topAnchor](self, "topAnchor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView widthAnchor](self, "widthAnchor");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView heightAnchor](self, "heightAnchor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "layoutRectWithLeadingAnchor:topAnchor:widthAnchor:heightAnchor:", v5, v6, v7, v8);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_setAssociatedObject(self, &_UIViewLayoutRectKey, v3, (void *)1);
  }
  return v3;
}

- (BOOL)_isBoundingPathNonRectangular
{
  void *v2;
  char v3;

  -[UIView _effectiveBoundingPathAndBoundingPathView:](self, "_effectiveBoundingPathAndBoundingPathView:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isNonRectangular");

  return v3;
}

- (CGRect)_rectTuckedInBoundingPathCorner:(unint64_t)a3 withSize:(CGSize)a4 cornerRadii:(UIRectCornerRadii)a5 minimumPadding:(double)a6
{
  double topRight;
  double bottomRight;
  double bottomLeft;
  double topLeft;
  double height;
  double width;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  id v21;
  double x;
  double y;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  CGSize v42;
  CGRect v43;
  CGRect result;

  topRight = a5.topRight;
  bottomRight = a5.bottomRight;
  bottomLeft = a5.bottomLeft;
  topLeft = a5.topLeft;
  height = a4.height;
  width = a4.width;
  if (a6 < 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 21552, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("minimumPadding >= 0.0"));

  }
  if (topLeft >= bottomLeft)
    v16 = topLeft;
  else
    v16 = bottomLeft;
  if (topRight >= bottomRight)
    v17 = topRight;
  else
    v17 = bottomRight;
  if (width < v16 + v17
    || (topLeft >= topRight ? (v18 = topLeft) : (v18 = topRight),
        bottomLeft >= bottomRight ? (v19 = bottomLeft) : (v19 = bottomRight),
        height < v18 + v19))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v42.width = width;
    v42.height = height;
    NSStringFromCGSize(v42);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("UIView.m"), 21553, CFSTR("Rect size %@ is too small to fit corner radii: {%.1f, %.1f, %.1f, %.1f}"), v39, *(_QWORD *)&topLeft, *(_QWORD *)&bottomLeft, *(_QWORD *)&bottomRight, *(_QWORD *)&topRight);

  }
  v41 = 0;
  -[UIView _effectiveBoundingPathAndBoundingPathView:](self, "_effectiveBoundingPathAndBoundingPathView:", &v41);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v41;
  -[UIView bounds](self, "bounds");
  -[UIView convertRect:toView:](self, "convertRect:toView:", v21);
  objc_msgSend(v20, "_rectTuckedInCorner:ofBoundingPathAndRect:withSize:cornerRadii:minimumPadding:", a3, *(_QWORD *)&topLeft, *(_QWORD *)&bottomLeft, *(_QWORD *)&bottomRight, *(_QWORD *)&topRight, *(_QWORD *)&a6);
  x = v43.origin.x;
  y = v43.origin.y;
  v24 = v43.size.width;
  v25 = v43.size.height;
  if (CGRectIsNull(v43))
  {
    v26 = *MEMORY[0x1E0C9D628];
    v27 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v28 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v29 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v21, x, y, v24, v25);
    v26 = v30;
    v27 = v31;
    v28 = v32;
    v29 = v33;
  }

  v34 = v26;
  v35 = v27;
  v36 = v28;
  v37 = v29;
  result.size.height = v37;
  result.size.width = v36;
  result.origin.y = v35;
  result.origin.x = v34;
  return result;
}

- (int64_t)_overrideVibrancyTrait
{
  void *v3;
  int v4;
  void *v5;
  int64_t v6;

  -[UIView _internalTraitOverrides](self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_containsTraitToken:", 0x1E1A996A8);

  if (!v4)
    return -1;
  -[UIView _internalTraitOverrides](self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "_valueForNSIntegerTraitToken:", 0x1E1A996A8);

  return v6;
}

- (BOOL)_disableDictationTouchCancellation
{
  void *v2;
  char v3;

  objc_getAssociatedObject(self, &_sDisableDictationTouchCancellation);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

- (id)_layer
{
  return self->_layer;
}

- (void)_raiseExceptionForBackgroundThreadLayerPropertyModification
{
  id *v3;
  id *v4;
  unint64_t v5;
  NSObject *v6;
  objc_class *v7;
  NSString *v8;
  objc_class *v9;
  const char *v10;
  id *v11;
  int v12;
  unint64_t v13;
  objc_class *v14;
  NSString *v15;
  objc_class *v16;
  NSObject *v17;
  uint32_t v18;
  unint64_t v20;
  NSObject *v21;
  objc_class *v22;
  NSObject *v23;
  objc_class *v24;
  NSString *v25;
  objc_class *v26;
  const char *v27;
  objc_class *v28;
  NSString *v29;
  objc_class *v30;
  NSObject *v31;
  uint32_t v32;
  NSObject *v33;
  objc_class *v34;
  int v35;
  NSString *v36;
  __int16 v37;
  UIView *v38;
  __int16 v39;
  NSString *v40;
  __int16 v41;
  id *v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = -[UIView __viewDelegate]((id *)&self->super.super.isa);
  if (v3)
  {
    v4 = v3;
    if (pthread_main_np() == 1)
      return;
    if (!os_variant_has_internal_diagnostics())
    {
      v5 = _MergedGlobals_1331;
      if (!_MergedGlobals_1331)
      {
        v5 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v5, (unint64_t *)&_MergedGlobals_1331);
      }
      v6 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (objc_class *)objc_opt_class();
        v8 = NSStringFromClass(v7);
        v9 = (objc_class *)objc_opt_class();
        v35 = 138413314;
        v36 = v8;
        v37 = 2048;
        v38 = self;
        v39 = 2112;
        v40 = NSStringFromClass(v9);
        v41 = 2048;
        v42 = v4;
        v43 = 2112;
        v44 = objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v10 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with associated v"
              "iew controller <%@: %p>; backtrace: \n"
              "%@";
LABEL_15:
        v17 = v6;
        v18 = 52;
LABEL_16:
        _os_log_impl(&dword_185066000, v17, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v35, v18);
        return;
      }
      return;
    }
    v23 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      return;
    v24 = (objc_class *)objc_opt_class();
    v25 = NSStringFromClass(v24);
    v26 = (objc_class *)objc_opt_class();
    v35 = 138413314;
    v36 = v25;
    v37 = 2048;
    v38 = self;
    v39 = 2112;
    v40 = NSStringFromClass(v26);
    v41 = 2048;
    v42 = v4;
    v43 = 2112;
    v44 = objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v27 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with associated view "
          "controller <%@: %p>; backtrace: \n"
          "%@";
    goto LABEL_29;
  }
  v11 = -[UIView _viewControllerForAncestor](self, "_viewControllerForAncestor");
  v12 = pthread_main_np();
  if (!v11)
  {
    if (v12 == 1)
      return;
    if (!os_variant_has_internal_diagnostics())
    {
      v20 = qword_1ECD82628;
      if (!qword_1ECD82628)
      {
        v20 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
        atomic_store(v20, (unint64_t *)&qword_1ECD82628);
      }
      v21 = *(NSObject **)(v20 + 8);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = (objc_class *)objc_opt_class();
        v35 = 138412802;
        v36 = NSStringFromClass(v22);
        v37 = 2048;
        v38 = self;
        v39 = 2112;
        v40 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v10 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with no associate"
              "d or ancestor view controller; backtrace: \n"
              "%@";
        v17 = v21;
        v18 = 32;
        goto LABEL_16;
      }
      return;
    }
    v33 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      return;
    v34 = (objc_class *)objc_opt_class();
    v35 = 138412802;
    v36 = NSStringFromClass(v34);
    v37 = 2048;
    v38 = self;
    v39 = 2112;
    v40 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v27 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with no associated or"
          " ancestor view controller; backtrace: \n"
          "%@";
    v31 = v33;
    v32 = 32;
LABEL_30:
    _os_log_fault_impl(&dword_185066000, v31, OS_LOG_TYPE_FAULT, v27, (uint8_t *)&v35, v32);
    return;
  }
  if (v12 == 1)
    return;
  if (os_variant_has_internal_diagnostics())
  {
    v23 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      return;
    v28 = (objc_class *)objc_opt_class();
    v29 = NSStringFromClass(v28);
    v30 = (objc_class *)objc_opt_class();
    v35 = 138413314;
    v36 = v29;
    v37 = 2048;
    v38 = self;
    v39 = 2112;
    v40 = NSStringFromClass(v30);
    v41 = 2048;
    v42 = v11;
    v43 = 2112;
    v44 = objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v27 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with nearest ancestor"
          " view controller <%@: %p>; backtrace: \n"
          "%@";
LABEL_29:
    v31 = v23;
    v32 = 52;
    goto LABEL_30;
  }
  v13 = qword_1ECD82620;
  if (!qword_1ECD82620)
  {
    v13 = __UILogCategoryGetNode("Assert", (uint64_t)&g_UILogCategories, (uint64_t (*)(_BYTE *))__UILogCategoryNewNode)- 16;
    atomic_store(v13, (unint64_t *)&qword_1ECD82620);
  }
  v6 = *(NSObject **)(v13 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v14 = (objc_class *)objc_opt_class();
    v15 = NSStringFromClass(v14);
    v16 = (objc_class *)objc_opt_class();
    v35 = 138413314;
    v36 = v15;
    v37 = 2048;
    v38 = self;
    v39 = 2112;
    v40 = NSStringFromClass(v16);
    v41 = 2048;
    v42 = v11;
    v43 = 2112;
    v44 = objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v10 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with nearest ancestor"
          " view controller <%@: %p>; backtrace: \n"
          "%@";
    goto LABEL_15;
  }
}

uint64_t __45__UIView_UIKitManual__actionForLayer_forKey___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setOriginalToValue:forKey:inLayer:", objc_msgSend(a3, "valueForKeyPath:", a2), a2, a3);
}

- (id)_minXVariable
{
  return self->_minXVariable;
}

- (id)_minYVariable
{
  return self->_minYVariable;
}

- (id)_boundsWidthVariable
{
  return self->_boundsWidthVariable;
}

- (id)_boundsHeightVariable
{
  return self->_boundsHeightVariable;
}

- (id)nsli_minXVariable
{
  id result;

  result = self->_minXVariable;
  if (!result)
  {
    result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 0, 1);
    self->_minXVariable = (NSISVariable *)result;
  }
  return result;
}

- (id)nsli_minYVariable
{
  id result;

  result = self->_minYVariable;
  if (!result)
  {
    result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 0, 1);
    self->_minYVariable = (NSISVariable *)result;
  }
  return result;
}

- (id)nsli_boundsWidthVariable
{
  id result;

  result = self->_boundsWidthVariable;
  if (!result)
  {
    result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 1, 1);
    self->_boundsWidthVariable = (NSISVariable *)result;
  }
  return result;
}

- (id)nsli_boundsHeightVariable
{
  id result;

  result = self->_boundsHeightVariable;
  if (!result)
  {
    result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 1, 1);
    self->_boundsHeightVariable = (NSISVariable *)result;
  }
  return result;
}

- (void)_bringAncestorControlledCollectionSubviewToFrontAmongCoplanarPeers
{
  void *v3;
  void *v4;
  id v5;

  -[UIView window](self, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[UIView _ancestorCollectionReusableView](self, "_ancestorCollectionReusableView");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_collectionView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_addControlledSubview:", v5);

  }
}

- (id)_ancestorCollectionReusableView
{
  UIView *v3;
  void *v4;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = self;
  }
  else
  {
    -[UIView superview](self, "superview");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_ancestorCollectionReusableView");
    v3 = (UIView *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

- (CGRect)frameInView:(id)a3
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  -[UIView _frameInCoordinateSpace:window:](self, "_frameInCoordinateSpace:window:", a3, 0);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (CGRect)_frameInCoordinateSpace:(id)a3 window:(id)a4
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGRect result;

  v5 = a3;
  -[UIView bounds](self, "bounds");
  -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v5);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  v14 = v7;
  v15 = v9;
  v16 = v11;
  v17 = v13;
  result.size.height = v17;
  result.size.width = v16;
  result.origin.y = v15;
  result.origin.x = v14;
  return result;
}

- (id)_nearestViewController
{
  return 0;
}

- (CGRect)_sourceRectForPresentationInWindow:(id)a3
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  v3 = *MEMORY[0x1E0C9D628];
  v4 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v5 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v6 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (int64_t)_lfld_count
{
  void *v2;
  int64_t v3;

  objc_getAssociatedObject(self, &_MergedGlobals_19_6);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "integerValue");

  return v3;
}

- (void)_lfld_incrementCount
{
  int64_t v3;
  id v4;

  v3 = -[UIView _lfld_count](self, "_lfld_count");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v3 + 1);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_MergedGlobals_19_6, v4, (void *)1);

}

- (void)_lfld_prepareToResetCountIfNecessary
{
  void *v3;
  void *v4;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  objc_getAssociatedObject(self, &unk_1ECD7B5A1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v5[0] = *MEMORY[0x1E0C99748];
    v5[1] = CFSTR("UITrackingRunLoopMode");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[UIView performSelector:withObject:afterDelay:inModes:](self, "performSelector:withObject:afterDelay:inModes:", sel__lfld_resetCount, 0, v4, 0.0);

    objc_setAssociatedObject(self, &unk_1ECD7B5A1, MEMORY[0x1E0C9AAB0], (void *)1);
  }
}

- (void)_lfld_resetCount
{
  objc_setAssociatedObject(self, &_MergedGlobals_19_6, &unk_1E1A9B010, (void *)1);
  objc_setAssociatedObject(self, &unk_1ECD7B5A1, 0, (void *)1);
}

- (void)_lfld_pushCurrentLayoutMethodName:(id)a3
{
  id v4;
  id v5;

  v5 = a3;
  objc_getAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_setAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey, v4, (void *)1);
  }
  objc_msgSend(v4, "addObject:", v5);

}

- (void)_lfld_discardLastCurrentLayoutMethodName
{
  id v2;

  objc_getAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeLastObject");

}

- (NSString)_lfld_currentLayoutMethodName
{
  void *v2;
  void *v3;

  objc_getAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "lastObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (NSMutableArray)_lfld_geometryChangeRecords
{
  return (NSMutableArray *)objc_getAssociatedObject(self, &_UIViewLFLDGeometryChangeRecordsKey);
}

- (void)_lfld_addGeometryChangeRecordWithPropertyName:(id)a3 value:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _UIViewLFLDGeometryChangeRecord *v11;
  id v12;

  v6 = a4;
  v7 = a3;
  -[UIView _lfld_geometryChangeRecords](self, "_lfld_geometryChangeRecords");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_setAssociatedObject(self, &_UIViewLFLDGeometryChangeRecordsKey, v12, (void *)1);
  }
  +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "currentLayoutView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "_lfld_currentLayoutMethodName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[_UIViewLFLDGeometryChangeRecord initWithGeometricPropertyName:value:currentLayoutView:methodName:]([_UIViewLFLDGeometryChangeRecord alloc], "initWithGeometricPropertyName:value:currentLayoutView:methodName:", v7, v6, v9, v10);

  objc_msgSend(v12, "addObject:", v11);
}

- (NSMutableSet)_lfld_setNeedsLayoutCallStacks
{
  return (NSMutableSet *)objc_getAssociatedObject(self, &_UIViewLFLDSetNeedsLayoutCallStacksKey);
}

- (void)_lfld_addSetNeedsLayoutCallStack:(id)a3
{
  id v4;
  id v5;

  v5 = a3;
  -[UIView _lfld_setNeedsLayoutCallStacks](self, "_lfld_setNeedsLayoutCallStacks");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    objc_setAssociatedObject(self, &_UIViewLFLDSetNeedsLayoutCallStacksKey, v4, (void *)1);
  }
  objc_msgSend(v4, "addObject:", v5);

}

- (NSMutableArray)_lfld_variableChangeRecords
{
  return (NSMutableArray *)objc_getAssociatedObject(self, &_UIViewLFLDSubviewVariableChangeRecordsKey);
}

- (void)_lfld_addVariableChangeRecordForVariable:(id)a3 inLayoutEngine:(id)a4
{
  id v6;
  id v7;
  _UIViewLFLDVariableChangeRecord *v8;
  void *v9;
  void *v10;
  id v11;

  v6 = a4;
  v7 = a3;
  -[UIView _lfld_variableChangeRecords](self, "_lfld_variableChangeRecords");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_setAssociatedObject(self, &_UIViewLFLDSubviewVariableChangeRecordsKey, v11, (void *)1);
  }
  v8 = -[_UIViewLFLDVariableChangeRecord initWithVariable:inLayoutEngine:]([_UIViewLFLDVariableChangeRecord alloc], "initWithVariable:inLayoutEngine:", v7, v6);

  objc_msgSend(v11, "addObject:", v8);
  objc_msgSend(v7, "delegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v9, "conformsToProtocol:", &unk_1EDDD3D78) & 1) == 0)
  {

    v9 = 0;
  }
  objc_msgSend(v9, "_referenceView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "_lfld_addConstraintsAffectingVariableValueChange:", v8);

}

- (NSMapTable)_lfld_constraintsAffectingVariableValueChanges
{
  return (NSMapTable *)objc_getAssociatedObject(self, &_UIViewLFLDConstraintsAffectingVariableChangesKey);
}

- (void)_lfld_addConstraintsAffectingVariableValueChange:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "variable");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "delegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "conformsToProtocol:", &unk_1EDDD3D78) & 1) == 0)
  {
LABEL_15:

    goto LABEL_16;
  }
  if (v6)
  {
    -[UIView _lfld_constraintsAffectingVariableValueChanges](self, "_lfld_constraintsAffectingVariableValueChanges");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 512, 512, 0);
      objc_setAssociatedObject(self, &_UIViewLFLDConstraintsAffectingVariableChangesKey, v7, (void *)1);
    }
    objc_msgSend(v7, "objectForKey:", v5);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v7, "setObject:forKey:", v8, v5);
    }
    v21 = v7;
    -[UIView _layoutEngine](self, "_layoutEngine");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "constraintsAffectingValueOfVariable:", v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)objc_msgSend(v10, "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_314_1), "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_315_0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v11, "count"));
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v13 = v11;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v23;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v23 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v17), "description");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "addObject:", v18);

          ++v17;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      }
      while (v15);
    }

    v19 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v4, "value");
    objc_msgSend(v19, "numberWithDouble:");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKey:", v12, v20);

    goto LABEL_15;
  }
LABEL_16:

}

- (id)_lfld_minimalDescription
{
  void *v3;
  void *v4;
  CGRect v6;

  -[UIView frame](self, "frame");
  NSStringFromCGRect(v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<%@: %p; f=%@ "), objc_opt_class(), self, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _UIViewDescriptionAppendBaseClass(self, v4);
  objc_msgSend(v4, "appendString:", CFSTR(">"));

  return v4;
}

- (id)_lfld_description
{
  void *v3;
  uint64_t viewFlags;
  const __CFString *v5;

  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<%@: %p; "), objc_opt_class(), self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _UIViewDescriptionAppendBaseClass(self, v3);
  _UIViewDescriptionAppendFrame(self, v3);
  _UIViewDescriptionAppendTransform(self, v3);
  _UIViewDescriptionAppendTextIfApplicable(self, v3);
  viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x400000000000000) != 0)
  {
    objc_msgSend(v3, "appendString:", CFSTR("wants auto layout; "));
    if ((viewFlags & 0x80000000000) != 0)
      objc_msgSend(v3, "appendString:", CFSTR("hosts layout engine; "));
    if ((*(_QWORD *)&self->_viewFlags & 0x20000000000000) != 0)
      v5 = CFSTR("NO");
    else
      v5 = CFSTR("YES");
    objc_msgSend(v3, "appendFormat:", CFSTR("tAMIC = %@; "), v5);
    if (-[UIView hasAmbiguousLayout](self, "hasAmbiguousLayout"))
      objc_msgSend(v3, "appendString:", CFSTR("AMBIGUOUS LAYOUT; "));
  }
  objc_msgSend(v3, "appendString:", CFSTR(">"));
  return v3;
}

@end
